*** Settings ***
Documentation       Feature Test: backup Admin User Roles
...
Variables           data_variables_user.py

*** Variables ***
${AB_SLEEP}             180

#Resource           ../../../../../fusion/tests/resource/fusion_api_all_resource_files.txt

*** Keywords ***
Cleanup401
    [Arguments]
    Delete All Deployment Plans401
    Delete All Build Plans401
    Delete All Plan Scripts401
    Delete All Golden Images401

Delete All Deployment Plans401
    [Documentation]    user will fail to delete DP as user is unauthorized
    [Arguments]
    ${Response} =    i3s Api Get Deploymentplan
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Deploymentplan    ${Response['members'][${ABCNT}]['name']}
    \    Should Be Equal as Strings    ${Response1['status_code']}    401    msg=Authorized to delete DP.

Delete All Build Plans401
    [Documentation]    user will fail to delete BP as user is unauthorized
    [Arguments]
    ${Response} =    i3S api get buildplan
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3S api delete buildplan    ${Response['members'][${ABCNT}]['name']}
    \    Should Be Equal as Strings    ${Response1['status_code']}    401    msg=Authorized to delete BP.

Delete All Plan Scripts401
    [Documentation]    user will fail to delete PS as user is unauthorized
    [Arguments]
    ${Response} =    i3s Api Get Plan Scripts
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Plan Scripts    ${Response['members'][${ABCNT}]['name']}
    \    Should Be Equal as Strings    ${Response1['status_code']}    401    msg=Authorized to delete PS.

Delete All Golden Images401
    [Documentation]    user will fail to delete GI as user is unauthorized
    [Arguments]
    ${Response} =    i3s Api Get Golden Image
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Golden Image    ${Response['members'][${ABCNT}]['name']}
    \    Should Be Equal as Strings    ${Response1['status_code']}    401    msg=Authorized to delete GI.

Cleanup
    [Arguments]
    Delete All Deployment Plans
    Delete All Build Plans
    Delete All Plan Scripts
    Delete All Golden Images

Login to i3s
#    Get i3s Appliance Cluster IP and Login
    Set log level  TRACE
    [Arguments]    ${IP}=${FUSION_IP}    ${USERNAME}=${FUSION_USERNAME}    ${PASSWORD}=${FUSION_PASSWORD}
    ${admin_credentials} =    Create Dictionary    userName=${USERNAME}    password=${PASSWORD}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

Logout of Fusion
    [Documentation]    Terminates a session with the REST API.
    Fusion Api Logout Appliance

Extract Artifact Bundle
    [Arguments]    ${NAME}
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Authorized to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

Get ArtifactBundle Uri
    [Arguments]    ${Name}
    ${resp} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Delete All Deployment Plans
    [Arguments]
    ${Response} =    i3s Api Get Deploymentplan
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Deploymentplan    ${Response['members'][${ABCNT}]['name']}
    ${Response} =    i3s Api Get Deploymentplan
    Should Be Equal as Strings    ${Response['count']}    0    msg=Not Able delete DP

Delete All Build Plans
    [Arguments]
    ${Response} =    i3S api get buildplan
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3S api delete buildplan    ${Response['members'][${ABCNT}]['name']}
    ${Response} =    i3S api get buildplan
    Should Be Equal as Strings    ${Response['count']}    0    msg=Not Able delete BP

Delete All Plan Scripts
    [Arguments]
    ${Response} =    i3s Api Get Plan Scripts
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Plan Scripts    ${Response['members'][${ABCNT}]['name']}
    ${Response} =    i3s Api Get Plan Scripts
    Should Be Equal as Strings    ${Response['count']}    0    msg=Not Able delete PS

Delete All Golden Images
    [Arguments]
    ${Response} =    i3s Api Get Golden Image
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    ${Response1} =    i3s Api Delete Golden Image    ${Response['members'][${ABCNT}]['name']}
    ${Response} =    i3s Api Get Golden Image
    Should Be Equal as Strings    ${Response['count']}    0    msg=Not Able delete GI

Create backup on streamer
    [Arguments]
    Set Log Level    TRACE
    ${dp_grp_uri} =    I3S api get deploymentgroup
    Log to console    ${dp_grp_uri['members'][0]['uri']}
    ${MyDictionary} =    Create Dictionary
    Set To Dictionary    ${MyDictionary}    deploymentGroupURI    ${dp_grp_uri['members'][0]['uri']}
    Log to console    ${MyDictionary}
    ${Response} =    i3s Api Create Backup    ${MyDictionary}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create backup

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating BB    level=WARN

Restore backup bundle on streamer
    [Arguments]
    Set Log Level    TRACE
    ${dp_grp_uri} =    I3S api get deploymentgroup
    Log to console    ${dp_grp_uri['members'][0]['uri']}
    ${MyDictionary} =    Create Dictionary
    Set To Dictionary    ${MyDictionary}    deploymentGroupURI    ${dp_grp_uri['members'][0]['uri']}
    Log to console    ${MyDictionary}

    ${resp} =    I3S api get backup
    ${Response} =    I3S api extract backupbundle    ${MyDictionary}    ${resp['members'][0]['uri']}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to restore BB

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating BB    level=WARN

Restore backup bundle401
    [Arguments]
    Set Log Level    TRACE
    ${dp_grp_uri} =    I3S api get deploymentgroup
    Log to console    ${dp_grp_uri['members'][0]['uri']}
    ${MyDictionary} =    Create Dictionary
    Set To Dictionary    ${MyDictionary}    deploymentGroupURI    ${dp_grp_uri['members'][0]['uri']}
    Log to console    ${MyDictionary}

    ${resp} =    I3S api get backup
    ${Response} =    I3S api extract backupbundle    ${MyDictionary}    ${resp['members'][0]['uri']}
    Should Be Equal as Strings    ${Response['status_code']}    401    msg=Successful in extracting BB

Extract Artifact Bundle401
    [Arguments]    ${NAME}
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    401    msg=Authorized to extract Artifact Bundle.

Remove Users
    [Arguments]
    [Documentation]    Querys the appliance for all Users and then removes them
    Log to console and logfile    Removing USERS
    ${users} =    Fusion Api Get User
    :FOR    ${user}    IN    @{users['members']}
    \    Continue For Loop If    '${user['userName']}'=='Administrator'
    \    Continue For Loop If    '${user['userName']}'=='administrator'
    \    Continue For Loop If    '${user['userName']}'=='HardwareSetup'
    \    ${resp} =    Fusion Api Remove User    uri=${user['uri']}
    \    Should Be Equal as Strings    ${resp['status_code']}    204    msg=Failed to delete users

Download Auditlog401
    ${Response} =    i3s Api Download auditlog
    Should Be Equal as Strings    ${Response['status_code']}    401    msg=Failed to download audit log