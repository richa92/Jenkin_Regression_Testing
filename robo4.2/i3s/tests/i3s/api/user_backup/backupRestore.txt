*** Settings ***
Documentation       Feature Test: Backup and Restore
...
Variables           data_variables_user.py

Resource            ../../../../../fusion/tests/resource/fusion_api_all_resource_files.txt
Resource            ./common.txt

Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             BuiltIn
Library             FusionLibrary
Library             RoboGalaxyLibrary
Library             i3SLibrary
Variables           /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py

*** Test Cases ***
Login to Appliance and i3s
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test1
    Set log level  TRACE
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

Create backup on streamer without artifacts
    Set Log Level    TRACE
    ${dp_grp_uri} =    I3S api get deploymentgroup
    Log to console    ${dp_grp_uri['members'][0]['uri']}
    ${MyDictionary} =    Create Dictionary
    Set To Dictionary    ${MyDictionary}    deploymentGroupURI    ${dp_grp_uri['members'][0]['uri']}
    Log to console    ${MyDictionary}
    ${Response} =    i3s Api Create Backup    ${MyDictionary}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create backup

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    2
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    :FOR    ${EC}    IN    @{Errors}    # ${user['userName']}
    \    Log to console    ${EC['errorCode']}
    \    Should Be Equal as Strings    ${EC['errorCode']}    AB_BUNDLE_FAIL_ERROR    msg=Create Backup Bundle.

Extract Buitin AB
    Extract Artifact Bundle   ${artifact_bundle}

Perform Backup Operation
    Create backup on streamer

Get streamer backup information
    Set Log Level    TRACE
    ${resp} =    I3S api get backup
    Log to console    ${resp['members'][0]['artifactsbundleID']}
    Should Be Equal as Strings    ${resp['status_code']}    200    msg=Failed to get backup information

Get streamer backup information by ID
    Set Log Level    TRACE
    ${resp} =    I3S api get backup
    #${uri} =  ${resp['members'][0]['artifactsbundleID']}
    ${Response} =    I3S api get backup    param=${resp['members'][0]['artifactsbundleID']}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to get backup info by ID

Delete Artifacts
    Cleanup

Restore Operation
    Restore backup bundle on streamer

Cleaningup
    Cleanup

Download Streamer backup
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test3
    Set Log Level    TRACE
    ${resp} =    I3S api get backup
    ${Response1} =    I3S api download backup    param=${resp['members'][0]['downloadURI']}
    Should Be Equal as Strings    ${Response1['status_code']}    200    msg=Failed to download streamer backup

Upload Streamer backup
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test4
    Set Log Level    TRACE
    Sleep    20s
    ${Response} =    i3s Api Add backup    ${backup_file_name}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to upload backup bundle.
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN

Test tearingdown
    Cleanup
