*** Settings ***
Documentation        Feature Test: Artifact Bundles

Variables            data_variables_AB.py
Resource            ../../../../../fusion/tests/resource/fusion_api_all_resource_files.txt

Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             BuiltIn
Library             FusionLibrary
Library             RoboGalaxyLibrary
Library             i3SLibrary
Variables            ../../Jenkin_Regression_Testing/robo4.2/i3s/tests/testdata/i3s_QA_testdata.py

*** Variables ***
${VAL_DELETE}           <Response [204]>
${AB_SLEEP}             150
${GI_SLEEP}             300
${timeout}              1800
${interval}             30
${Total_GI}             8
${cnt}                  0

*** Test Cases ***

# Test Specific Setup
Login to Appliance
	[Tags]    critical    REG    PL-Test1
    Set Log level   Trace
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                                password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance     ${fusion_IP}    ${admin_credentials}

# Create all the required Artifacts in i3s appliance

Get i3s Appliance Cluster IP and Login
	[Tags]    critical    REG    PL-Test2
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
    # Login to i3s appliance
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                                password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

#------------------------Pre-requisites for Artifact Bundle---------------------

Add Golden Image One
	Set Log Level    TRACE
	[Tags]    critical    REG    AB-Test
    ${NAME} =    Get From Dictionary    ${goldenimage[0]}    name
    ${DESC} =    Get From Dictionary    ${goldenimage[0]}    description
    ${LOCAL_FILE} =    Get From Dictionary    ${goldenimage[0]}    file
    ${Response} =    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']} == 202    Wait For GI Complete  ${Response}    ${NAME}

Create Plan Script Mount One
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Deploy one
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Unmount One
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Mount Two
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Deploy Two
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Unmount Two
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[5]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Unmount Three
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[6]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script Unmount Four
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[7]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Empty Plan Script
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[8]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Build Plan Without Nic
    ${bp_body} =    CREATE BUILD PLAN PAYLOAD    ${buildplan[0]}
    ${Response} =    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan

Create Build Plan With Nic
    ${bp_body} =    CREATE BUILD PLAN PAYLOAD    ${buildplan[1]}
    ${Response} =    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan

Create Empty Build Plan
    ${bp_body} =    CREATE BUILD PLAN PAYLOAD    ${buildplan[2]}
    ${Response} =    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan

Create Deployment Plan Without Nic
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[0]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Deployment Plan With Nic
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[1]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Deployment Plan Without GI
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[2]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

#-----------------Create Artifactsbundle-------------------------------------

# OVF1047_TC01_Create artifacts bundle with special characters
Create Artifact Bundle With Special Chars
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[0]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Able to Create AB

# OVF1047_TC02_Create artifacts bundle with blank Name
Create Artifact Bundle With Blank
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[1]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Able to Create AB

#OVF1047_TC03_create AB without choosing any artifacts
Create Artifact Bundle Without Artifacts
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[2]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Able to Create AB

#OVF1047_TC04_Create Artifact Bundle For ReadOnly
Create Artifact Bundle For ReadOnly
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[3]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN

    ${NAME} =    Get From Dictionary    ${artifactbundle[3]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC05_Create artifacts bundle with duplicate name
Create Artifact Bundle With Dup Name
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[3]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Able Create AB with duplicate name

# OVF1047_TC06_Create Artifact Bundle With BuildPlan Only
Create Artifact Bundle With BuildPlan Only
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[4]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN

    ${NAME} =    Get From Dictionary    ${artifactbundle[4]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC07_Create Artifact Bundle With Planscript Only
Create Artifact Bundle With Planscript Only
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[5]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN

    ${NAME} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC08_Create Artifact Bundle With All Artifacts
Create Artifact Bundle With All Artifacts
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[6]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[6]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC09_Create Artifact Bundle With Multiple Deployment Plans
Create Artifact Bundle With Multiple Deployment Plans
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[7]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC10_Create Artifact Bundle With Multiple Artifacts Without Deployment Plan
Create Artifact Bundle With Multiple Artifacts Without Deployment Plan
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[8]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[8]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC11_Create Artifact Bundle one for testing Get call
Create Artifact Bundle one for testing Get call
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[10]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC12_Create Artifact Bundle two For testing Get call
Create Artifact Bundle two For testing Get call
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[11]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[11]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC13_Create Artifact Bundle three For testing Get call
Create Artifact Bundle three For testing Get call
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[12]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

# OVF1047_TC14_Create Artifact Bundle Without GI
Create Artifact Bundle Without GI
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[9]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN
    ${NAME} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['status']}    OK    msg=Failed to Create Artifact Bundle

#-------------------- Edit Artifacts bundle --------------------------------------

# OVF1047_TC15_update ab name with special characters
Update Artifact Bundle Name With Special Chars
    ${NAME} =    Get From Dictionary    ${artifactbundle[4]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[1]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=able to update artifact bundle.

# OVF1047_TC16_update ab with blank name
Update Artifact Bundle Name With Blank Name
    ${NAME} =    Get From Dictionary    ${artifactbundle[4]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[2]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=able to update artifact bundle.

# OVF1047_TC17_Update Artifact Bundle Name With Existing AB Name
Update Artifact Bundle Name With Existing AB Name
    ${NAME} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[3]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update artifact bundle.

# OVF1047_TC18_update ab with alphanumeric name
Update Artifact Bundle Name with AlphaNumeric Value
    ${NAME} =    Get From Dictionary    ${artifactbundle[11]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[4]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update artifact bundle.

# OVF1047_TC19_update ab with numeric values
Update Artifact Bundle Name With Numbers Value
    ${NAME} =    Get From Dictionary    ${artifactbundle[4]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[5]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update artifact bundle.

# OVF1047_TC20_update a read-only ab
Update Read Only Artifact Bundle Name
    ${NAME} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update[0]}    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=able to update read-only artifact bundle.

#-------------------- Get Artifacts Bundle-----------------------------------

# OVF1047_TC21_Get Artifact Bundle With Valid Name
Get Artifact Bundle With Valid Name
    ${NAME} =    Get From Dictionary    ${artifactbundle[3]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['members'][0]['name']}    ${NAME}    msg=Failed to Get Artifact Bundle.

# OVF1047_TC22_Get Artifact Bundle With Invalid Name
Get Artifact Bundle With Invalid Name
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[0]}    name
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['count']}    0    msg=Failed to Get Artifact Bundle.

# OVF1047_TC23_Get Artifacts Bundle By Count Lower Than Available
Get Artifacts Bundle By Count Lower Than Available
	[Tags]    critical    REG    PL-Test3
    ${Response} =    i3s Api Get Artifact Bundle    param=?count=10
    Should Be Equal as Strings    ${Response['count']}    10    msg=Failed to Get Artifact Bundle.

# OVF1047_TC24_Get Artifacts Bundle By Count Higher Than Available
Get Artifacts Bundle By Count Higher Than Available
    ${Response} =    i3s Api Get Artifact Bundle    param=?count=500
    Should Be Equal as Strings    ${Response['count']}    12    msg=Failed to Get Artifact Bundle.

# OVF1047_TC25_Get All Artifact Bundles
Get All Artifact Bundles
    ${Response} =    i3s Api Get Artifact Bundle
    ${cnt} =    Convert To Integer    ${Response['count']}
    Should Be Equal as Strings    ${Response['count']}    12    msg=Failed to Get Artifact Bundle.

# OVF1047_TC26_Get Artifacts Bundle By Ascending Order
Get Artifacts Bundle By Ascending Order
    ${Response} =    i3s Api Get Artifact Bundle
    ${ablist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${ablist}    ${Response['members'][${ABCNT}]['name']}
    Sort List    ${ablist}
    ${Response} =    i3s Api Get Artifact Bundle    param=?sort=name:asc
    ${sortedAblist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \       append to list    ${sortedAblist}    ${Response['members'][${ABCNT1}]['name']}
    Lists Should Be Equal    ${ablist}    ${sortedAblist}   msg="lists are not equal"

# OVF1047_TC27_Get Artifacts Bundle By Descending Order
Get Artifacts Bundle By Descending Order
    ${Response} =    i3s Api Get Artifact Bundle
    ${ablist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${ablist}    ${Response['members'][${ABCNT}]['name']}
    Sort List    ${ablist}
    Reverse List    ${ablist}
    ${Response} =    i3s Api Get Artifact Bundle    param=?sort=name:desc
    ${sortedAblist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${sortedAblist}    ${Response['members'][${ABCNT1}]['name']}
    Lists Should Be Equal    ${ablist}    ${sortedAblist}    msg="lists are not equal"

# OVF1047_TC28_Get Artifacts Bundle Using Smatch Order
Get Artifacts Bundle Using Smatch Order
    #   Usage:    https://15.212.171.216/rest/artifact-bundles?filter="'name' smatches 'CL%25'"
    #    Output:   "name": "CL RHEL Test Deployment Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name' smatches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC29_Get Artifacts Bundle Using Match Order
Get Artifacts Bundle Using Match Order
	[Tags]    critical    REG    PL-Test4
    #   Usage:    https://15.212.171.216/rest/artifact-bundles?filter="'name' matches 'CL%25'"
    #   Output:   "name": "CL RHEL Test Deployment Plan1",
    #             "name": "cl ESXi Test Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name' matches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC30_Get Artifacts Bundle End Name Using Sregex Order
Get Artifacts Bundle End Name Using Sregex Order
    #  Usage:    https://15.212.171.216/rest/artifact-bundles?filter='name' sregex '[A-Z]$'
    #  Output:    "name": "esxi6AB"
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[4]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' sregex '[A-Z]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC31_Get Artifacts Bundle Starting Name With Small cl Using Sregex
Get Artifacts Bundle Starting Name With Small cl Using Sregex
    #   Usage:    https://15.212.171.216/rest/artifact-bundles?filter='name' sregex 'cl'
    #    Output:    cl ESXi Test Plan1
    ${NAME} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' sregex 'cl'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC32_Get Artifacts Bundle Starting Name With Big CL Using Sregex
Get Artifacts Bundle Starting Name With Big CL Using Sregex
    #  Usage:   https://15.212.171.216/rest/artifact-bundles?filter='name' sregex 'CL'
    #  Output:   "name": "CL RHEL Test Deployment Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' sregex 'CL'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC33_Get Artifacts Bundle Starting Cap Name Using Sregex
Get Artifacts Bundle Starting Cap Name Using Sregex
	[Tags]    critical    REG    PL-Test5
    #  Usage:   https://15.212.171.216/rest/artifact-bundles?filter='name' sregex '^[A-Z]'
    #  Output:   "name": "RHEL-7.2-artifact-bundle",
    #  Output:   "name": "CL RHEL Test Deployment Plan1"
    ${NAME} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' sregex '^[A-Z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF1047_TC34_Get Artifacts Bundle Starting Small Name Using Sregex
Get Artifacts Bundle Starting Small Name Using Sregex
    #  Usage:   https://15.212.171.216/rest/artifact-bundles?filter='name' sregex '^[a-z]'
    #  Output:   "name": "bundle",
    #  Output:   "name": "bundle2",
    #  Output:   "name": "esxi6AB",
    #  Output:   "name": "bundle-file",
    #  Output:   "name": "cl ESXi Test Plan1"
    ${NAME} =    Get From Dictionary    ${artifactbundle[6]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${NAME2} =    Get From Dictionary    ${artifactbundle_update[4]}    name
    ${NAME3} =    Get From Dictionary    ${artifactbundle[8]}    name
    ${NAME4} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' sregex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF1047_TC35_Get Artifacts Bundle Starting Small Name Using Regex
Get Artifacts Bundle Starting Small Name Using Regex
    #  Usage:    https://15.212.171.216/rest/artifact-bundles?filter='name' regex '^[a-z]'
    #  Output:   "name": "bundle",
    #  Output:   "name": "bundle2",
    #  Output:   "name": "esxi6AB",
    #  Output:   "name": "bundle-file",
    #  Output:   "name": "RHEL-7.2-artifact-bundle",
    #  Output:   "name": "CL RHEL Test Deployment Plan1",
    #  Output:   "name": "cl ESXi Test Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[6]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${NAME2} =    Get From Dictionary    ${artifactbundle_update[4]}    name
    ${NAME3} =    Get From Dictionary    ${artifactbundle[8]}    name
    ${NAME4} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${NAME5} =    Get From Dictionary    ${artifactbundle[11]}    name
    # ${NAME6} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    # Append To List    ${baseList}    ${NAME6}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' regex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC36_Get Artifacts Bundle Ending Name With Numbers Using Regex
Get Artifacts Bundle Ending Name With Numbers Using Regex
    #    Usage:    https://15.212.171.216/rest/artifact-bundles?filter='name' regex '[0-9]$'
    #    Output:   "name": "1234",
    #    Output:   "name": "2",
    #    Output:   "name": "bundle2",
    #    Output:   "name": "CL RHEL Test Deployment Plan1",
    #    Output:   "name": "0ab_automate_1",
    #    Output:   "name": "cl ESXi Test Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[5]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${NAME2} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${NAME3} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${NAME4} =    Get From Dictionary    ${artifactbundle[3]}    name
    ${NAME5} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' regex '[0-9]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF1047_TC37_Get Artifacts Bundle Starting Name With Numbers Using Regex
Get Artifacts Bundle Starting Name With Numbers Using Regex
    #    Usage:    https://15.212.171.216/rest/artifact-bundles?filter='name' regex '^[0-9]'
    #    Output:   "name": "1234",
    #    Output:   "name": "2",
    #    Output:   "name": "0ab_automate_1",
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[5]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${NAME2} =    Get From Dictionary    ${artifactbundle[3]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter='name' regex '^[0-9]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC38_Get Artifacts Bundle for Regex Or
Get Artifacts Bundle for Regex Or
    #    Usage:    https://15.212.171.216/rest/artifact-bundles?filter="'name' regex 'RHEL|nir'"
    #    Output:   "name": "RHEL-7.2-artifact-bundle",
    #    Output:   "name": "CL RHEL Test Deployment Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name' regex 'RHEL|nir'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC39_Get Artifacts Bundle Starting Name With Regex
Get Artifacts Bundle Starting Name With Regex
    #    Usage:    https://15.212.171.216/rest/artifact-bundles?filter="'name' regex '^CL'"
    #    Output:    "name": "CL RHEL Test Deployment Plan1",
    #    Output:    "name": "cl ESXi Test Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name' regex '^CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF1047_TC40_Get Artifacts Bundle Ending Name With Regex
Get Artifacts Bundle Ending Name With Regex
    #   Usage:   https://15.212.171.216/rest/artifact-bundles?filter="'name' regex 'Plan1$'"
    #   Output:   "name": "CL RHEL Test Deployment Plan1",
    #   Output:   "name": "cl ESXi Test Plan1",
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${NAME1} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Artifact Bundle    param=?filter="'name' regex 'Plan1$'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${ABCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${ABCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

#---------by Navitha------------------

# OVF1047_TC41_Download Artifact Bundle By Name
Download Artifact Bundle By Name
    ${NAME} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${Response} =    i3s Api Download Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to download Artifact Bundle

# OVF1047_TC42_Delete Artifact Bundle
Delete Artifact Bundle
    ${NAME} =    Get From Dictionary    ${artifactbundle[5]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

# OVF1047_TC43_Add Artifact Bundle
Add Artifact Bundle
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[0]}    name
    ${Response} =    i3s Api Add Artifact Bundle    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to add Artifact Bundle.
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating AB    level=WARN

# OVF1047_TC44_Extract Artifact Bundle
Extract Artifact Bundle
    ${NAME} =    Get From Dictionary    ${artifactbundle_extract}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

#################################################################################################################################

# OVF1047_TC45_Extracting AB when one of its DP is not available
Delete Deploymentplan 1
    [Documentation]    Deleting the DP that is present in the AB
    [Tags]    OVF1047_TC30
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan#

# OVF1047_TC46_Extract Artifact Bundle for deleted DP
Extract Artifact Bundle for deleted DP
    [Documentation]    Extracting AB for deleted DP
    [Tags]    OVF1047_TC30
    ${NAME} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

# OVF1047_TC47_Extracting the extracted AB again
Extract Artifact Bundle for deleted DP 1
    [Documentation]    Extracting the AB when all its artifacts are present
    [Tags]    OVF1047_TC31
    ${NAME} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

# OVF1047_TC48_Adding AB more than 1GB
Add Artifact Bundle more than 1GB
    [Documentation]    Uploading a AB more than 1GB
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[4]}    name
    ${Response} =    i3s Api Add Artifact Bundle    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to add Artifact Bundle.
    # Wait for task to complete

# OVF1047_TC49_Creating two different AB with same content and extracting
Create Artifact Bundle AB
    [Documentation]    Creating AB
    [Tags]    OVF1047_TC33
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[13]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

Create Artifact Bundle AB 1
    [Documentation]    Creating a different AB with same content as previous created AB
    [Tags]    OVF1047_TC33
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[14]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

Extract Artifact Bundle AB
    [Documentation]    Extracting the 1st AB
    [Tags]    OVF1047_TC33
    ${NAME} =    Get From Dictionary    ${artifactbundle[13]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

Extract Artifact Bundle AB 1
    [Documentation]    Extracting 2nd AB
    [Tags]    OVF1047_TC33
    ${NAME} =    Get From Dictionary    ${artifactbundle[14]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

# OVF1047_TC50_Extracting the AB after changing the PS
Update Planscript by content 1
    [Documentation]    Updating the Planscript
    [Tags]    OVF1047_TC34
    ${NAME} =    Get From Dictionary    ${planscript[3]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[0]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status']}

Update Planscript by content 2
    [Documentation]    Updating the Planscript
    [Tags]    OVF1047_TC34
    ${NAME} =    Get From Dictionary    ${planscript[4]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[1]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status']}

Extract Artifact Bundle AB after PS Content updated
    [Documentation]    Extracting AB when the PS is edited
    [Tags]    OVF1047_TC34
    ${NAME} =    Get From Dictionary    ${artifactbundle[13]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

# OVF1047_TC51_Upload an invalid AB zip file
Upload Invalid Artifact zip file
    [Documentation]    Uploading an invalid zip file
    [Tags]    OVF1047_TC26
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[1]}    name
    ${Response} =    i3s Api Add Artifact Bundle    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    202    msg= Failed to Upload Artifact Bundle. Ensure that the artifact bundle is valid .zip file.
    Run Keyword If    ${Response['status_code']}==202  Log to console  Failed to add Artifact Bundle. Ensure that The contents of the file represent an artifact bundle.

# OVF1047_TC52_Upload Invalid Artifact zip file type
Upload Invalid Artifact zip file type
    [Documentation]    Adding AB with invalid file type
    [Tags]   OVF1047_TC35
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[2]}    name
    ${Response} =    i3s Api Add Artifact Bundle    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to add Artifact Bundle.
    Run Keyword If    ${Response['status_code']}==500  Log to console  Failed to add Artifact Bundle. Ensure that the artifact bundle is a .zip file.

########################################### CLEAN UP ########################################################################

Delete Artifact Bundle 1
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[5]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 2
    ${NAME} =    Get From Dictionary    ${artifactbundle[3]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 5
    ${NAME} =    Get From Dictionary    ${artifactbundle[6]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 6
    ${NAME} =    Get From Dictionary    ${artifactbundle[7]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 7
    ${NAME} =    Get From Dictionary    ${artifactbundle[8]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 8
    ${NAME} =    Get From Dictionary    ${artifactbundle[9]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 9
    ${NAME} =    Get From Dictionary    ${artifactbundle[10]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 10
    ${NAME} =    Get From Dictionary    ${artifactbundle_update[4]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 11
    ${NAME} =    Get From Dictionary    ${artifactbundle[12]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 12
    ${NAME} =    Get From Dictionary    ${artifactbundle[13]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 13
    ${NAME} =    Get From Dictionary    ${artifactbundle[14]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 14
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[3]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Artifact Bundle 15
    ${NAME} =    Get From Dictionary    ${artifactbundle_add[5]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete

Delete Deploymentplan 1 CleanUp
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 2 CleanUp
    ${NAME} =    Get From Dictionary    ${deploymentplan[1]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 3 CleanUp
    ${NAME} =    Get From Dictionary    ${deploymentplan[2]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Golden Image Rhel
    ${NAME}=    Get From Dictionary    ${goldenimage[0]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Build Plan1
    ${NAME}=    Get From Dictionary        ${buildplan[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan2
    ${NAME}=    Get From Dictionary        ${buildplan[1]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan3
    ${NAME}=    Get From Dictionary        ${buildplan[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Planscript1
    ${NAME}=    Get From Dictionary    ${planscript[0]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript2
    ${NAME}=    Get From Dictionary    ${planscript[1]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript3
    ${NAME}=    Get From Dictionary    ${planscript[2]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript4
    ${NAME}=    Get From Dictionary    ${planscript[3]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript5
    ${NAME}=    Get From Dictionary    ${planscript[4]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript6
    ${NAME}=    Get From Dictionary    ${planscript[5]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript7
    ${NAME}=    Get From Dictionary    ${planscript[6]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript8
    ${NAME}=    Get From Dictionary    ${planscript[7]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript9
    ${NAME}=    Get From Dictionary    ${planscript[8]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

#-------------------------------------------------------------------------------------------------------------
*** Keywords ***
Get ArtifactBundle Uri
    [Arguments]    ${Name}
    ${resp} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Goldenimage URI
    [Arguments]    ${giuri}
    ${resp} =    i3s Get Goldenimage    param=?filter="'name'=='${giuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Planscript URI
    [Arguments]    ${psuri}
    ${resp} =    i3s Get Planscript    param=?filter="'name'=='${psuri}'"
    ${uri} =     Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Buildplan URI
    [Arguments]    ${bpuri}
    ${resp} =    i3s Get Buildplan    param=?filter="'name'=='${bpuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Deploymentplan Uri
    [Arguments]    ${dpuri}
    ${resp} =    i3s Get Deploymentplan    param=?filter="'name'=='${dpuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Goldenimage Body
    [Arguments]    ${mx}    ${gi_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${giuri} =    Get From Dictionary    ${gi_body[${IND}]}    resourceUri
    \    ${uri} =    Get Goldenimage Uri    ${giuri}
    \    Set to Dictionary    ${gi_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${gi_body}

Get Planscript Body
    [Arguments]    ${mx}    ${ps_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${IND}]}    resourceUri
    \    ${uri} =    Get Planscript Uri    ${psuri}
    \    Set to Dictionary    ${ps_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${ps_body}

Get Buildplan Body
    [Arguments]    ${mx}    ${bp_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${bpuri} =    Get From Dictionary    ${bp_body[${IND}]}    resourceUri
    \    Log to console    ${bpuri}
    \    ${uri} =    Get Buildplan Uri    ${bpuri}
    \    Set to Dictionary    ${bp_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${bp_body}

Get Deploymentplan Body
    [Arguments]    ${mx}    ${dp_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${dpuri} =    Get From Dictionary    ${dp_body[${IND}]}    resourceUri
    \    Log to console    ${dpuri}
    \    ${uri} =    Get Deploymentplan Uri    ${dpuri}
    \    Set to Dictionary    ${dp_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${dp_body}

GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
    ...    Log To Console    GV_created_successfully for ${NAME}
    ...    ELSE
    ...    Log to Console    GV created but status yet to get updated to OK

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
    ${Retries}    Convert To Integer    30
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating GI    level=WARN
    Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response} =    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If    '${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri} =    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response} =    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length} =    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
        ...    ELSE
        ...    Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}

CREATE BUILD PLAN PAYLOAD
    [Arguments]    ${buildplan_create}
    ${bp_body} =    Copy Dictionary  ${buildplan_create}
    # planscript URI
    ${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
    ${mx} =    Get Length  ${ps_body}

    :FOR    ${NUM}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
    \    ${uri} =    GET PLANSCRIPT URI    ${psuri}
    \    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
    [Return]    ${bp_body}

Create Deploymentplan Payload
    [Arguments]    ${deploymentplan}
    ${dp_body} =    Copy Dictionary    ${deploymentplan}

    # Buildplan URI
    ${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
    ${bp_uri} =    Run Keyword If  '${bp_name}' is not ''    Get Buildplan URI    ${bp_name}
    Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

    # Goldenimage URI
    ${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
    ${gi_uri} =    Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
    Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
    [Return]    ${dp_body}

Create Artifact Bundle Payload
    [Arguments]    ${artifactbundle}
    ${ab_body} =    Copy Dictionary  ${artifactbundle}

    # GoldenImage URI
    ${Gstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    goldenImages
    ${gi_body} =    Run keyword if    ${Gstatus} == ${True}    Get from Dictionary    ${ab_body}    goldenImages
    ${mx} =    Run keyword if    ${Gstatus} == ${True}    Get Length    ${gi_body}
    ${gisUri} =    Run keyword If    '${mx}' != 'None'    Get Goldenimage Body    ${mx}    ${gi_body}

    # Planscript URI
    ${Pstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    planScripts
    ${ps_body} =    Run keyword if    ${Pstatus} == ${True}    Get from Dictionary    ${ab_body}    planScripts
    ${mx} =    Run keyword if    ${Pstatus} == ${True}    Get Length    ${ps_body}
    ${psUri} =    Run keyword If    '${mx}' != 'None'    Get Planscript Body    ${mx}    ${ps_body}

    # Buildplan URI
    ${Bstatus} =   run keyword and return status    Dictionary should contain key    ${ab_body}    buildPlans
    ${bp_body} =    Run keyword if    ${Bstatus} == ${True}    Get from Dictionary    ${ab_body}    buildPlans
    ${mx} =    Run keyword if    ${Bstatus} == ${True}    Get Length    ${bp_body}
    ${bpUri} =    Run keyword If    '${mx}' != 'None'    Get Buildplan Body    ${mx}    ${bp_body}

    # Deploymentplan URI
    ${Dstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    deploymentPlans
    ${dp_body} =    Run keyword if    ${Dstatus} == ${True}    Get from Dictionary    ${ab_body}    deploymentPlans
    ${mx} =    Run keyword if    ${Dstatus} == ${True}    Get Length    ${dp_body}
    ${depUri} =    Run keyword If    '${mx}' != 'None'    Get Deploymentplan Body    ${mx}    ${dp_body}
    [Return]    ${ab_body}
