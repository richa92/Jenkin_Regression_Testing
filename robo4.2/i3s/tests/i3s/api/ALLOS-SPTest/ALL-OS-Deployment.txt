*** Settings ***
Documentation    Feature Test: Multi OS Deployment test case

Resource           ../../setup-bringup-keywords.txt
Resource           ../../common.txt


Library    Collections
Library    json
Library    OperatingSystem
Library    BuiltIn
Library    FusionLibrary
Library    i3SLibrary
Library    Process

Variables   data-variable.py
Variables   ../../Jenkin_Regression_Testing/robo4.2/i3s/tests/testdata/i3s_QA_testdata.py

****************************************** Test Cases ******************************************
#Test Specific Setup	
Login to Appliance and i3s
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test1
    Set log level  TRACE
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

Add Artifact Bundle
    [Documentation]    Add all Artifact Bundle for all operating system
    ...       This Artifact Bundle contains  PS , GI , DP

    ${NUM}=  Get Length  ${artifactbundle_add}
    :FOR    ${index}    IN RANGE    0    ${NUM}
    \    ${LOCAL_FILE}=    Get From Dictionary    ${artifactbundle_add[${index}]}    ostype
    \    Log to console   ${LOCAL_FILE}
    \    ${Response}=    i3s Api Add Artifact Bundle    ${LOCAL_FILE}
    \    setup-bringup-keywords.Log to console and logfile    ${Response}
    \    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to add Artifact Bundle.

    \    # Wait for task to complete
    \    ${Retry Interval}    Convert To Number    60
    \    ${Retries}   Convert To Integer    20
    \    ${Resp}=     i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    \    # Check for errors
    \    ${Errors}=    Get From Dictionary    ${Resp}    taskErrors
    \    ${Errors}=    Get Length    ${Errors}
    \    Should be True    ${Errors} == 0    msg=Errors encountered while adding Artifact Bundle

Extract Artifact Bundle
    [Documentation]    Extract all  Bundle for all operating system
    ${NUM}=  Get Length  ${artifactbundle}

    :FOR    ${index}    IN RANGE    0    ${NUM}
    \   ${NAME}=    Get From Dictionary    ${artifactbundle[${index}]}    name
    \   Log To Console   Extracting Artifact Bundle ${NAME}.
    \   ${ab_uri}=    Get ArtifactBundle Uri    ${NAME}
    \   ${Response}=    i3s Api Extract Artifact Bundle    ${ab_uri}
    \   Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.

    \   #Wait for task to complete
    \   ${Retry Interval}    Convert To Number     60
    \   ${Retries}     Convert To Integer    20
    \   ${Response}=    i3s Api Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    \   # Check for errors
    \   ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    \   ${Errors}=    Get Length    ${Errors}
    \   Should be True    ${Errors} == 0    msg=Errors encountered while extracting Artifact Bundle
    \   Sleep  3min

Test SP-ManagementNIC for all OS
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test3
    [Documentation]    Server Profile creation  for ManagementNIC
    ${NUM}=  Get Length  ${serverprofile_3enc_ManagementNIC}
    :FOR    ${index}    IN RANGE    0   ${NUM}
    \   ${SP_name}=    Get From Dictionary     ${serverprofile_3enc_ManagementNIC[${index}]}    name
    \   Create Server Profile  ${serverprofile_3enc_ManagementNIC[${index}]}
    \   Power On Server      ${serverHardwareUri}
    \   Sleep   400
    \   Check the server ipv4 is reachable    ${SP_name}
    \   Power Off Server     ${serverHardwareUri}
    \   Delete Server Profile    ${SP_name}

Test SP-ManagamentNICTeaming for all OS
    [Documentation]		Server Profile creation  for TEAMNIC
    ${NUM}=  Get Length  ${serverprofile_3enc_ManagementNIC}
    :FOR    ${index}    IN RANGE    0   ${NUM}
    \   ${SP_name} =    Get From Dictionary    ${serverprofile_3enc_TeamNIC[${index}]}    name
    \   Create Server Profile  ${serverprofile_3enc_TeamNIC[${index}]}
    \   Power On Server      ${serverHardwareUri}
    \   Sleep   400
    \   Check the server ipv4 is reachable    ${SP_name
    \   Power Off Server      ${serverHardwareUri}
    \   Delete Server Profile    ${SP_name}

Delete all Deploymentplans
    [Documentation]    Delete  all  Deploymentplan
    ${Response}=    i3S api get deployment plan
    ${count}=    Get From Dictionary    ${Response}   count
    ${members}=    Get From Dictionary    ${Response}    members

    :FOR   ${index}    IN RANGE    0    ${count}
    \    ${NAME} =    Get From Dictionary    ${members[${index}]}    name
    \    Log To Console     Deleteing DeploymentPlan:- ${NAME}
    \    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    \    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete all Build Plans
    [Documentation]    Delete  all  Build Plan
    ${Response}=    i3S api get buildplan
    ${count}=    Get From Dictionary    ${Response}.  count
    ${members}=    Get From Dictionary    ${Response}    members

    :FOR    ${index}    IN RANGE    0    ${count}
    \   ${NAME}=    Get From Dictionary    ${members[${index}]}    name
    \   Log To Console     Deleteing BuildPlan:- ${NAME}
    \   ${Response}=    i3S api delete buildplan    ${NAME}
    \   Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete all Planscripts
    [Documentation]    Delete  all Planscript
    ${Response}=    i3S api get Plan Scripts
    ${count}=    Get From Dictionary    ${Response}   count
    ${members}=    Get From Dictionary    ${Response}    members

    :FOR    ${index}    IN RANGE    0    ${count}
    \   ${NAME}=    Get From Dictionary    ${members[${index}]}    name
    \   Log To Console     Deleteing Planscript:- ${NAME}
    \   ${Response}=    i3S api delete Plan Scripts    ${NAME}
    \   Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete all Golden Image
   [Documentation]    Delete  all Golden Image
   ${Response}=    i3S api get Golden Image
   ${count}=    Get From Dictionary    ${Response}   count
   ${members}=    Get From Dictionary    ${Response}    members

   :FOR    ${index}    IN RANGE    0    ${count}
    \   ${NAME}=    Get From Dictionary    ${members[${index}]}    name
    \   Log To Console    Deleting goldenimag:-  ${NAME}.
    \   ${Response}=    i3s Api Delete Golden Image    ${NAME}
    \   Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete all artifact Bundles
   [Documentation]    Delete  all artifact Bundle
   ${NUM}=  Get Length  ${artifactbundle}
   :FOR    ${index}    IN RANGE    0    ${NUM}
   \   ${NAME} =    Get From Dictionary    ${artifactbundle[${index}]}    name
   \   Log To Console    Deleting artifactbundle:-  ${NAME}.
   \   ${Response} =     i3s Api Delete Artifact Bundle    ${NAME}
   \   Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

############################################################ Server Profile  #####################################################################

*** Keywords ***

Create Server Profile
    [Arguments]    ${sp_body}
    [Documentation]    Create Server Profile
    #Create Server Profile Payload called from common.txt
	
    ${sp_body} =  Create Server Profile Payload    ${sp_body}
    ${spname}=    Get from Dictionary    ${sp_body}    name

    ${Response}=    Fusion API Create Server Profile    ${sp_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to initiate Create SP.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    15
    ${Response} =    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating Server Profile

    # check for OS volumes names
    ${os_vol}=    Get OS Volume Name    ${spname}
    Log to console    ${os_vol}
    Should not be equal as strings    '${os_vol}'    'None'    msg=OS volume should be created


Check the server ipv4 is reachable
    [Arguments]    ${SP_name}
    ${SP_Response} =    Get Server Profile body    ${SP_name}
    ${Mgmt_IP} =    Get Management IP Of Server Profile    ${SP_Response}
	Log to console	 ${Mgmt_IP}
    ${ping_status} =    Windows ping    ${Mgmt_IP}
    Run Keyword If    ${ping_status} == 0    Log to console    \nIP is set and reachable
    ...    ELSE    Fail     msg=IP is not reachable.

