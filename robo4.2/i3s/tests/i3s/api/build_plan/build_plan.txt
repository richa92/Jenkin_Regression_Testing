*** Settings ***
Documentation        Feature Test: Build Plan

Library            Collections
Library            json
Library            OperatingSystem
Library            Selenium2Library
Library            BuiltIn
Library            i3SLibrary
Library            FusionLibrary
Library            RoboGalaxyLibrary

Variables            /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py
Variables            data_variables_bp.py

*** Test Cases ***

#Test Specific Setup
LOGIN TO APPLIANCE
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test1
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId}=    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}

# Create all the required Artifacts in i3s appliance
GET I3S APPLIANCE CLUSTER IP AND LOGIN
	[Tags]    critical    REG    PL-Test2
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    # Login to i3s appliance
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

# Initial Setup Create Plan Script
Create Mount Plan Script
	[Tags]    critical    REG    PL-Test3
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create UnPack Plan Script
	[Tags]    critical    REG    PL-Test4
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Deploy Plan Script
	[Tags]    critical    REG    PL-Test5
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create RePack Plan Script
	[Tags]    critical    REG    PL-Test6
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create UnMount Plan Script
	[Tags]    critical    REG    PL-Test7
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Capture Plan Script
	[Tags]    critical    REG    PL-Test8
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[5]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

#---------------------------Create Test Cases ----------------------------

# OVF523_BP_TC01_Create OSBuildplan with NULL Name
Create OSBuildplan with NULL Name
    Log to console    Create OS Build Plan With Name Field As Empty
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[0]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg=Create OSBuildPlan return status does not match the expected return status : ${Response['status_code']}

# OVF523_BP_TC02_Create OSBuildplan of OSBP type Deploy
Create OSBuildplan of OSBP type Deploy
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test3
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[2]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy

# OVF523_BP_TC03_Create OSBuildplan of OSBP type Capture
Create OSBuildplan of OSBP type Capture
    Log to console    Create OS Build Plan With Type Capture
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[4]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Capture

# OVF523_BP_TC04_Create OSBuildplan of OSBP type Deploy and PS type Capture
Create OSBuildplan of OSBP type Deploy and PS type Capture
    Log to console    Create OS Build Plan With Type Deploy using Build Step Capture
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[3]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg=Create OSBuildPlan return status does not match the expected return status : ${Response['status_code']}

# OVF523_BP_TC05_Create OSBuildplan of OSBP type Capture and PS type Deploy
Create OSBuildplan of OSBP type Capture and PS type Deploy
    Log to console    Create OS Build Plan With Type Deploy using Build Step Capture
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[9]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg=Create OSBuildPlan return status does not match the expected return status : ${Response['status_code']}

# OVF523_BP_TC06_Create OSBuildplan with duplicate Name
Create OSBuildplan with duplicate Name
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[5]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg=Create OSBuildPlan return status does not match the expected return status : ${Response['status_code']}

# OVF523_BP_TC07_Create OSBuildplan of OSBP type deploy without Custom Attributes
Create OSBuildplan of OSBP type deploy without Custom Attributes
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[7]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan without CA with Type Deploy

# OVF523_BP_TC08_Create OSBuildplan of OSBP type capture without Custom Attributes
Create OSBuildplan of OSBP type capture without Custom Attributes
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[10]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan without CA with Type Capture

# OVF523_BP_TC09_Create OSBuildplan of OSBP type deploy without Build Step
Create OSBuildplan of OSBP type deploy without Build Step
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[8]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan without Build Step with Type Deploy : ${Response['status_code']}

# OVF523_BP_TC10_Create OSBuildplan of OSBP type Capture without Build Step
Create OSBuildplan of OSBP type Capture without Build Step
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[11]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan without Build Step with Type Capture : ${Response['status_code']}

# OVF523_BP_TC11_Create OSBuildplan with invalid data for hpProvided field
Create OSBuildplan with invalid data for hpProvided field
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[12]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with invalid data for hpProvided field : ${Response['status_code']}

# OVF523_BP_TC12_Create OSBuildplan with invalid data for osType field
Create OSBuildplan with invalid data for osType field
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[13]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with invalid data osType : ${Response['status_code']}

# OVF523_BP_TC13_Create OSBuildplan with invalid data for OSBP type field
Create OSBuildplan with invalid data for OSBP type field
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[14]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with invalid data for oeBuildPlanType type field : ${Response['status_code']}

# OVF523_BP_TC14_Create OSBuildplan with some missing fields
Create OSBuildplan with some missing fields
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[15]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with some missing fields : ${Response['status_code']}

# OVF523_BP_TC15_Create OSBuildplan with name field of length 255 characters
Create OSBuildplan with name field of length 255 characters
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[16]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan with name field of length 255 characters

# OVF523_BP_TC16_Create OSBuildplan with name field of length more than 255 characters
Create OSBuildplan with name field of length more than 255 characters
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[17]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with name field of length more than 255 characters : ${Response['status_code']}

# OVF523_BP_TC17_Create OSBuildplan with description field of length 1000 characters
Create OSBuildplan with description field of length 1000 characters
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[18]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create Build Plan with description field of length 1000 characters

# OVF523_BP_TC18_Create OSBuildplan with description field of length greater than 1000 characters
Create OSBuildplan with description field of length greater than 1000 characters
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[19]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with description field of length greater than 1000 characters : ${Response['status_code']}

# OVF523_BP_TC19_Create OSBuildplan with single Build step of OSBP type Deploy
Create OSBuildplan with single Build step of OSBP type Deploy
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[20]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with single Build step of OSBP type Deploy

# OVF523_BP_TC20_Create OSBuildplan with single Build step of OSBP type Capture
Create OSBuildplan with single Build step of OSBP type Capture
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[21]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with single Build step of OSBP type Capture

# OVF523_BP_TC21_Create OSBuildplan with multiple Build Steps for OSBP type Deploy with same PS data
Create OSBuildplan with multiple Build Steps for OSBP type Deploy with same PS data
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[1]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with multiple Build Steps for OSBP type Deploy with same PS data : ${Response['status_code']}

# OVF523_BP_TC22_Create OSBuildplan of OSBP type deploy with multiple Build Steps with different PS type
Create OSBuildplan of OSBP type deploy with multiple Build Steps with different PS type
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[22]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    403    msg=Failed to Create Build Plan with multiple Build Steps with different PS type : ${Response['status_code']}

# OVF523_BP_TC23_Create OSBuildplan with multiple Build Steps having same serial number in Build Step
Create OSBuildplan with multiple Build Steps having same serial number in Build Step
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[23]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with multiple Build Steps having same serial number in Build Step : ${Response['status_code']}

# OVF523_BP_TC24_Create OSBuildplan with multiple Build Steps having negative serial number in Build Step
Create OSBuildplan with multiple Build Steps having negative serial number in Build Step
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[24]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with multiple Build Steps having negative serial number in Build Step : ${Response['status_code']}

# OVF523_BP_TC25_Create OSBuildplan of OSBP type Deploy with Custom Attributes not in Plan Script
Create OSBuildplan of OSBP type Deploy with Custom Attributes not in Plan Script
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[25]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with Custom Attributes not in Plan Script : ${Response['status_code']}

# OVF523_BP_TC26_ Create OSBuildplan of OSBP type Deploy with multiple Custom Attributes and all with same data
Create OSBuildplan of OSBP type Deploy with multiple Custom Attributes and all with same data
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[26]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with multiple Custom Attributes and all with same data : ${Response['status_code']}

# OVF523_BP_TC27_Create OSBuildplan of OSBP type Deploy with invalid CA type
Create OSBuildplan of OSBP type Deploy with invalid CA type
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[27]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Create Build Plan with invalid CA type : ${Response['status_code']}

# OVF523_BP_TC28_Create OSBuildplan of OSBP type Deploy for update test
Create OSBuildplan of OSBP type Deploy for update test
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[28]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for update test

# OVF523_BP_TC29_Create OSBuildplan1 for testing GET public API calls
Create OSBuildplan1 for testing GET public API calls
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[29]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for GET call test

# OVF523_BP_TC30_Create OSBuildplan2 for testing GET public API calls
Create OSBuildplan2 for testing GET public API calls
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[30]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for GET call test

# OVF523_BP_TC31_Create OSBuildplan3 for testing GET public API calls
Create OSBuildplan3 for testing GET public API calls
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[31]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for GET call test

# OVF523_BP_TC32_Create OSBuildplan4 for testing GET public API calls
Create OSBuildplan4 for testing GET public API calls
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[32]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for GET call test

# OVF523_BP_TC33_Create OSBuildplan5 for testing GET public API calls
Create OSBuildplan5 for testing GET public API calls
    Log to console    Create OS Build Plan With Type Deploy
    ${bp_body}=    Create Build Plan Payload    ${buildplan_create[33]}
    ${Response}=    i3S api create buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan with Type Deploy for GET call test

#--------------------------- Get Test Cases ----------------------------

# OVF523_BP_TC34_Get Build Plan by Valid Name
Get Build Plan by Valid Name
    ${NAME}=    Get From Dictionary        ${buildplan_get[0]}    name
    Log To Console    \Get Build Plan     ${NAME}.
    ${Response}=    i3S api get buildplan    uri=?filter="'name'=='${NAME}'"
    Log To Console    ${Response['members'][0]['name']}
    Should Be Equal as Strings    ${Response['members'][0]['name']}    ${NAME}    msg=Failed to Get Build Plan with valid name

# OVF523_BP_TC35_Get Build Plan by Invalid Name
Get Build Plan by Invalid Name
    ${NAME}=    Get From Dictionary        ${buildplan_get[1]}    name
    Log To Console    \Get Build Plan     ${NAME}.
    ${Response}=    i3S api get buildplan    uri=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['count']}    0    msg=Failed to Get Build Plan with invalid name

#More GET Calls as per the Public API docs
# OVF523_BP_TC36_Get Buildplans by count lower than available
Get Buildplans by count lower than available
    ${Response} =    i3S Api Get Buildplan    param=?count=5
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['count']}    14    msg=Failed to Get Buildplan.

# OVF523_BP_TC37_Get Buildplans count higher than available
Get Buildplans count higher than available
    ${Response} =    i3S Api Get Buildplan    param=?count=500
    Should Be Equal as Strings    ${Response['count']}    14    msg=Failed to Get Buildplan.

# OVF523_BP_TC38_Get Buildplans By Ascending Order
Get Buildplans By Ascending Order
    ${Response} =    i3S Api Get Buildplan
    ${bplist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT}    IN RANGE    0    ${cnt}
    \    Log To Console    ${Response['members'][${BPCNT}]['name']}
    \    append to list    ${bplist}    ${Response['members'][${BPCNT}]['name']}
    Sort List    ${bplist}
    ${Response} =    i3S Api Get Buildplan    param=?sort=name:asc
    ${sortedbplist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    Log To Console    ${Response['members'][${BPCNT}]['name']}
    \    append to list    ${sortedbplist}    ${Response['members'][${BPCNT1}]['name']}
    Lists Should Be Equal    ${bplist}    ${sortedbplist}   msg="lists are not equal"

# OVF523_BP_TC39_Get Buildplans By Descending Order
Get Buildplans By Descending Order
    ${Response} =    i3S Api Get Buildplan
    ${bplist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${bplist}    ${Response['members'][${BPCNT}]['name']}
    Sort List    ${bplist}
    Reverse List    ${bplist}
    ${Response} =    i3S Api Get Buildplan    param=?sort=name:desc
    ${sortedbplist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \     append to list    ${sortedbplist}    ${Response['members'][${BPCNT1}]['name']}
    Lists Should Be Equal    ${bplist}    ${sortedbplist}    msg="lists are not equal"

# OVF523_BP_TC40_Get Buildplan Using Smatch Order
Get Buildplan Using Smatch Order
    #   Usage:    https://15.212.171.216/rest/build-plans?filter="'name' smatches 'CL%25'"
    #    Output:   "name": "CL RHEL     .",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter="'name' smatches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC41_Get Buildplan Using Match Order
Get Buildplan Using Match Order
    #   Usage:    https://15.212.171.216/rest/build-plans?filter="'name' matches 'CL%25'"
    #   Output:   "name": "CL RHEL     ..",
    #             "name": "cl artifact...",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter="'name' matches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC42_Get Buildplan ending with capital letters Using Sregex Order
Get Buildplan ending with capital letters Using Sregex Order
    #  Usage:    https://15.212.171.216/rest/build-plans?filter='name' sregex '[A-Z]$'
    #  Output:    "name": "xxxxGET"
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' sregex '[A-Z]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC43_Get Buildplans starting with small letter cl Using Sregex
Get Buildplans starting with small letter cl Using Sregex
    #   Usage:    https://15.212.171.216/rest/build-plans?filter='name' sregex 'cl'
    #    Output:    cl artifact_for_GET
    ${NAME} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' sregex 'cl'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC44_Get Buildplans starting with capital letter CL using Sregex
Get Buildplans starting with capital letter CL using Sregex
    #  Usage:   https://15.212.171.216/rest/build-plans?filter='name' sregex 'CL'
    #  Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' sregex 'CL'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC45_Get Buildplans starting with capital letters using Sregex
Get Buildplans starting with capital letters using Sregex
    #  Usage:   https://15.212.171.216/rest/build-plans?filter='name' sregex '^[A-Z]'
    #  Output:   "name": "RHEL-7.2-Buildplan",
    #  Output:   "name": "CL RHEL API_GET",
    #  Output:   "name": "BP*-Creat"
    ${NAME} =    Get From Dictionary    ${buildplan_create[2]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[4]}    name
    ${NAME2} =    Get From Dictionary    ${buildplan_create[7]}    name
    ${NAME3} =    Get From Dictionary    ${buildplan_create[10]}    name
    ${NAME4} =    Get From Dictionary    ${buildplan_create[16]}    name
    ${NAME5} =    Get From Dictionary    ${buildplan_create[18]}    name
    ${NAME6} =    Get From Dictionary    ${buildplan_create[20]}    name
    ${NAME7} =    Get From Dictionary    ${buildplan_create[21]}    name
    ${NAME8} =    Get From Dictionary    ${buildplan_create[28]}    name
    ${NAME9} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME10} =    Get From Dictionary    ${buildplan_create[31]}    name    
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' sregex '^[A-Z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_BP_TC46_Get Buildplan starting with small letters using Sregex
Get Buildplan starting with small letters using Sregex
    #  Sregex is case sensitive
    #  Usage:   https://15.212.171.216/rest/build-plans?filter='name' sregex '^[a-z]'
    #  Output:   "name": <will display all Buildplans starting with small charaters>
    ${NAME} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' sregex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_BP_TC47_Get Buildplans starting with any character using Regex
Get Buildplans starting with any character using Regex
    #  Regex is not case sensitive, will display all Buildplans starting with alphabets
    #  Usage:    https://15.212.171.216/rest/build-plans?filter='name' regex '^[a-z]'
    ${NAME} =    Get From Dictionary    ${buildplan_create[2]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[4]}    name
    ${NAME2} =    Get From Dictionary    ${buildplan_create[7]}    name
    ${NAME3} =    Get From Dictionary    ${buildplan_create[10]}    name
    ${NAME4} =    Get From Dictionary    ${buildplan_create[16]}    name
    ${NAME5} =    Get From Dictionary    ${buildplan_create[18]}    name
    ${NAME6} =    Get From Dictionary    ${buildplan_create[20]}    name
    ${NAME7} =    Get From Dictionary    ${buildplan_create[21]}    name
    ${NAME8} =    Get From Dictionary    ${buildplan_create[28]}    name
    ${NAME9} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME10} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${NAME11} =    Get From Dictionary    ${buildplan_create[31]}    name
    ${NAME12} =    Get From Dictionary    ${buildplan_create[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Append To List    ${baseList}    ${NAME11}
    Append To List    ${baseList}    ${NAME12}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' regex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC48_Get Buildplan for names ending With numbers using Regex
Get Buildplan for names ending With numbers using Regex
    #    Usage:    https://15.212.171.216/rest/build-plans?filter='name' regex '[0-9]$'
    #    Output:   "name": "Buildplan_456"
    ${NAME} =    Get From Dictionary    ${buildplan_create[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' regex '[0-9]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_BP_TC49_Get Buildplan for names starting with numbers using Regex
Get Buildplan for names starting with numbers using Regex
    #    Usage:    https://15.212.171.216/rest/build-plans?filter='name' regex '^[0-9]'
    #    Output:   "name": "123_Buildplan"
    ${NAME} =    Get From Dictionary    ${buildplan_create[32]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter='name' regex '^[0-9]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC50_Get Buildplan for Regex OR - Get the list of names that are ORed in the GET call usage
Get Buildplan for Regex OR - Get the list of names that are ORed in the GET call usage
    #    Usage:    https://15.212.171.216/rest/build-plans?filter="'name' regex 'RHEL|CL'"
    #    Output:   "name": "RHEL-7.2-Buildplan",
    #    Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${NAME2} =    Get From Dictionary    ${buildplan_create[31]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter="'name' regex 'RHEL|CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC51_Get Buildplan starting with a given character/character's using Regex
Get Buildplan starting with a given character/character's using Regex
    #    Usage:    https://15.212.171.216/rest/build-plans?filter="'name' regex '^CL'"
    #    Output:    "name": "CL RHEL API_GET",
    #    Output:    "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${NAME1} =    Get From Dictionary    ${buildplan_create[30]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter="'name' regex '^CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_BP_TC52_Get Buildplan ending with a particular word using Regex
Get Buildplan ending with a particular word using Regex
    #   Usage:   https://15.212.171.216/rest/build-plans?filter="'name' regex 'API_GET$'"
    #   Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${buildplan_create[29]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Buildplan    param=?filter="'name' regex 'API_GET$'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${BPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${BPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

#---------------------------Delete Test Cases ----------------------------

# OVF523_BP_TC53_Delete not in-use OSBP
Delete Build Plan1
    ${NAME}=    Get From Dictionary        ${buildplan_del[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan which is inuse
    ${NAME}=    Get From Dictionary        ${buildplan_del[1]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan which is inuse

Delete Build Plan2
    ${NAME}=    Get From Dictionary        ${buildplan_del[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan3
    ${NAME}=    Get From Dictionary        ${buildplan_del[3]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan4
    ${NAME}=    Get From Dictionary        ${buildplan_del[4]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan5
    ${NAME}=    Get From Dictionary        ${buildplan_del[5]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan6
    ${NAME}=    Get From Dictionary        ${buildplan_del[6]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan7
    ${NAME}=    Get From Dictionary        ${buildplan_del[7]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan8
    ${NAME}=    Get From Dictionary        ${buildplan_del[8]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan9
    ${NAME}=    Get From Dictionary        ${buildplan_del[9]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan10
    ${NAME}=    Get From Dictionary        ${buildplan_del[10]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan11
    ${NAME}=    Get From Dictionary        ${buildplan_del[11]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan12
    ${NAME}=    Get From Dictionary        ${buildplan_del[12]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan13
    ${NAME}=    Get From Dictionary        ${buildplan_del[13]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

# Delete Planscripts
Delete Planscript1
    ${NAME} =    Get From Dictionary    ${planscript_delete[0]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

Delete Planscript2
    ${NAME} =    Get From Dictionary    ${planscript_delete[1]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

Delete Planscript3
    ${NAME} =    Get From Dictionary    ${planscript_delete[2]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

Delete Planscript4
    ${NAME} =    Get From Dictionary    ${planscript_delete[3]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

Delete Planscript5
    ${NAME} =    Get From Dictionary    ${planscript_delete[4]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

Delete Planscript6
    ${NAME} =    Get From Dictionary    ${planscript_delete[5]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete Planscript

#-------------------- Build the required JSON body-----------------------------------
*** Keywords ***
GET PLANSCRIPT URI
    [Arguments]    ${psuri}
    ${resp} =    I3S GET PLANSCRIPT    param=?filter="'name'=='${psuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

CREATE BUILD PLAN PAYLOAD
    [Arguments]    ${buildplan_create}
    ${bp_body} =    Copy Dictionary  ${buildplan_create}
    #planscript URI    
    ${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
    ${mx} =  Get Length  ${ps_body}
    Log To Console    ${mx}

    :FOR    ${NUM}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
    \    ${uri} =    GET PLANSCRIPT URI    ${psuri}
    \    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
    \    Log to console     ${uri}
    [Return]    ${bp_body}

GET BUILDPLAN URI
    [Arguments]        ${Name}
    ${resp}=    i3S api get buildplan    param=?filter="'name'=='${NAME}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

GET BUILDPLAN URIID
    [Arguments]        ${Name}
    ${resp}=    i3S api get buildplan    uri=?filter="'id'=='${ID}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}
