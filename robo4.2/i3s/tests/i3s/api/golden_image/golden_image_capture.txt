*** Settings ***
Documentation        Feature Test: Golden Image Capture

    
Resource            /robo4.2/fusion/tests/resource/fusion_api_all_resource_files.txt

Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library
Library                BuiltIn
Library                FusionLibrary
Library                RoboGalaxyLibrary
Library                i3SLibrary

Variables                /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py
Variables           data_variables_gic.py


*** Variables ***
${AB_SLEEP}            180
${GI_SLEEP}         500
${timeout}                    1800
${interval}                    30
${DataFile}    /ab_Initial_setup_TestData.xml
${InvalidBPUri}    /rest/build-plans/123
${InvalidOSvolumeUri}    /rest/os-volumes/123


*** Test Cases ***

Login to Appliance
	Set Log Level  TRACE
	[Tags]    critical    MAT	TC11
	${admin_credentials}=	Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable	${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}= 	Fusion Api Login Appliance   ${fusion_IP}  	${admin_credentials}
	Log to console		${fusion_IP}

# Create all the required Artifacts in i3s appliance
Get i3s Appliance Cluster IP and Login
    Set Log Level  TRACE
	[Tags]    critical    MAT	TC12
    ${resp} =	Fusion Api Get i3sCluster IP
    ${i3S_IP} =		Get From Dictionary 	${resp['members'][0]}	primaryIPV4
    # Login to i3s appliance
    ${admin_credentials}= 	Create Dictionary	userName=${DEFAULT_USER}
    ...                                         password=${DEFAULT_PASSWORD}
    Set Suite Variable  ${admin_credentials}	${admin_credentials}
    ${Response}    ${SessionId}=	Fusion Api Login Appliance   ${fusion_IP}  ${admin_credentials}
    I3S API LOGIN APPLIANCE 	${i3S_IP} 	${SessionId}
	Log to console	${i3S_IP}
	
Create Server Profile
	Set Log Level  TRACE
	[Tags]    critical    MAT	TC13
    ${sp_body}=    Create Server Profile Payload    ${SERVERPROFILE_GIC}    
    ${Response}=	Fusion API Create Server Profile    ${sp_body}
    Should Be Equal as Strings		${Response['status_code']}	202		msg=Failed to initiate Create SP.

    # Wait for task to complete
    ${Retry Interval}	Convert To Number     30
    ${Retries}	Convert To Integer	25
    ${Response}=	Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
           Log    Errors encountered while creating Server Profile.    level=WARN

    #[Return]    ${Response}

# Create Golden Image Operation

# OVF523_GI_TC46_Golden Image Capture
Golden Image Capture
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[0]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[0]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    202        msg=Failed to Create GoldenImage with POST failure
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC47_Golden Image Capture with Duplicate Name
Golden Image Capture with Duplicate Name
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[1]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[1]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC48_Golden Image Capture with name field blank
Golden Image Capture with name field blank
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[2]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[2]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC49_Golden Image Capture with All Field Blank
Golden Image Capture with All Field Blank
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[3]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[3]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC50_Golden Image Capture with Invalid Name
Golden Image Capture with Invalid Name
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[4]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[4]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC51_Golden Image Capture with 255 character name
Golden Image Capture with 255 character name
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[5]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[5]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    202        msg= Failed to Create GoldenImage with POST failure
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC52_Golden Image Capture with name greater than 255 character
Golden Image Capture with name greater than 255 character
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[6]}   name
    ${gic_body}=        Create GI Capture Payload    ${creategoldenimage[6]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400 , Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC53_Golden Image Capture with 1000 Character Description
Golden Image Capture with 1000 Character Description
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[7]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[7]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    202        msg= Failed to Create GoldenImage with POST failure
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC54_Golden Image Capture with Description greater than 1000 character
Golden Image Capture with Description greater than 1000 character
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[8]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[8]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg= return status for Create GoldenImage is not 400, Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC55_Golden Image Capture with no BuildSteps in PS
Golden Image Capture with no BuildSteps in PS
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[9]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[9]}
    Log to console    ${gic_body}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    202        msg=Failed to Create GoldenImage with POST failure
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC56_Golden Image Capture with Non existing server profile
Golden Image Capture with Non existing server profile
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[10]}   name
    ${gic_body}=    Create GI Capture Payload    ${creategoldenimage[10]}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    500        msg=return status for Create GoldenImage is not 500, Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC57_Golden Image Capture with Non existing oebp
Golden Image Capture with Non existing oebp
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[11]}   name
    ${gic_body}=        Create GI Capture Payload    ${creategoldenimage[11]}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    500        msg= return status for Create GoldenImage is not 500, Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC58_Golden Image Capture with Non existing oebp and Non existing server profile
Golden Image Capture with Non existing oebp and Non existing server profile
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[12]}   name
    ${gic_body}=        Create GI Capture Payload    ${creategoldenimage[12]}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    500        msg= return status for Create GoldenImage is not 500, Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC59_Golden Image Capture with OEBP of type Deploy
Golden Image Capture with OEBP of type Deploy
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[13]}   name
    ${gic_body}=        Create GI Capture Payload    ${creategoldenimage[13]}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    500        msg= return status for Create GoldenImage is not 500, Status : ${Response['status_code']}
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

# OVF523_GI_TC60_Golden Image Capture with OEBP and SSRM blank
Golden Image Capture with OEBP and SSRM blank
    Set Log Level  TRACE
    Log to console    Golden Image Capture
    ${NAME}=    Get From Dictionary     ${creategoldenimage[14]}   name
    ${gic_body}=        Create GI Capture Payload    ${creategoldenimage[14]}
    ${Response}=    i3s Api Golden Image Capture      ${gic_body}
    Should Be Equal as Strings    ${Response['status_code']}    400        msg=Failed to Create GoldenImage with POST failure
    Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}

Power Off Server
    [Documentation]        Power Off Server Hardware
    ${blade_info}=    Get From Dictionary        ${serverprofile_gic}    serverHardwareUri
    Log to Console and Logfile    ${blade_info}
    ${ServerHwUri}=        Get Server Hardware Uri        ${blade_info}
    ${Payload}=        Create Dictionary        powerState=Off
                                               powerControl=PressAndHold
    ${Response}=        Fusion Api Edit Server Hardware Power State        ${Payload}        ${ServerHwUri}
    ${taskuri}=        Get From Dictionary        ${Response}        uri
    ${retries}=        Convert To Integer        10
    ${sleep_time}=        Convert To Integer        20
    ${Resp}=    Fusion Api Wait For Task To Complete    ${taskuri}        retries=${retries}        sleep_time=${sleep_time}
    ${taskState}        Get From Dictionary        ${Resp}        taskState
    ${taskStatus}        Get From Dictionary        ${Resp}        taskStatus
    ${status}=        Run Keyword If         '${taskState}'=='Completed'        Log To Console        ${taskStatus}
                       ELSE        Fail    msg=Failed to Power Off Server Successfully

Delete Server Profile
    #[Arguments]    ${NAME}=${SP NAME}
    ${NAME}=    Get From Dictionary        ${serverprofile_gic}    name
    Log to Console   \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Log to Console and Logfile    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     30
    ${Retries}           Convert To Integer    10
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
           Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
    Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}

Delete GoldenImage
     #[Arguments]    ${NAME}=${GI NAME}
    ${NAME}=    Get From Dictionary        ${creategoldenimage[0]}    name
    Log to Console and Logfile    \nDeleting Golden Image created ${NAME}
    ${Response}=    I3S API DELETE GOLDEN IMAGE      ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Golden Image ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}      202       msg=Failed to initiate Delete Golden Image ${Name}.

Delete GoldenImage_with_255_character_name
     #[Arguments]    ${NAME}=${GI NAME}
    ${NAME}=    Get From Dictionary        ${creategoldenimage[5]}    name
    Log to Console and Logfile    \nDeleting Golden Image created ${NAME}
    ${Response}=    I3S API DELETE GOLDEN IMAGE      ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Golden Image ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}      202       msg=Failed to initiate Delete Golden Image ${Name}

Delete GoldenImage_with_1000_char_description
     #[Arguments]    ${NAME}=${GI NAME}
    ${NAME}=    Get From Dictionary        ${creategoldenimage[7]}    name
    Log to Console and Logfile    \nDeleting Golden Image created ${NAME}
    ${Response}=    I3S API DELETE GOLDEN IMAGE      ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Golden Image ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}      202       msg=Failed to initiate Delete Golden Image ${Name}.

# OVF523_GI_TC61_Delete GoldenImage_no_buildstep
Delete GoldenImage_no_buildstep
     #[Arguments]    ${NAME}=${GI NAME}
    ${NAME}=    Get From Dictionary        ${creategoldenimage[9]}    name
    Log to Console and Logfile   \nDeleting Golden Image created ${NAME}
    ${Response}=    I3S API DELETE GOLDEN IMAGE      ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Golden Image ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202       msg=Failed to initiate Delete Golden Image ${Name}.

#-------------------- Build the required JSON body-----------------------------------

*** Keywords ***

Create Server Profile Payload
    [Documentation]    Create Server Profile Payload
                           profile = {"type":"ServerProfileV11","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
                                   "serverHardwareTypeUri":'SHT:SY 660 Gen9 1',
                                   "enclosureGroupUri":"EG:EG1",
                                      "osdeployment settings" : "OSDP:OSDP1",
                                     }
    [Arguments]        ${sp_groups}
    ${payload} =  Copy Dictionary  ${sp_groups}
    ${shuri} =     Get from Dictionary    ${payload}    serverHardwareUri
    # Get Server Hardware Information
    ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${shuri}'"
    ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Check PowerState
    #Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.
    ${ServerHwUri} =     Get Server Hardware URI        ${shuri}
    Set to Dictionary    ${payload}    serverHardwareUri    ${ServerHwUri}
    # Ensuring that Blade is Powered off before Server Profile creation
    ${Bladeload}=        Create Dictionary        powerState=Off
                                               powerControl=PressAndHold
    ${Response}=        Fusion Api Edit Server Hardware Power State        ${Bladeload}        ${ServerHwUri}
    ${taskuri}=        Get From Dictionary        ${Response}        uri
    ${retries}=        Convert To Integer        10
    ${sleep_time}=        Convert To Integer        10
    ${Resp}=    Fusion Api Wait For Task To Complete    ${taskuri}        retries=${retries}        sleep_time=${sleep_time}
    ${taskState}        Get From Dictionary        ${Resp}        taskState
    ${taskStatus}        Get From Dictionary        ${Resp}        taskStatus
    ${status}=        Run Keyword If         '${taskState}'=='Completed'        Log To Console        ${taskStatus}
                       ELSE        Fail    msg=Failed to Power Off Server Successfully
    # SHT
    ${sht} =    Get From Dictionary  ${payload}  serverHardwareTypeUri
    ${uri} =     Get Server Hardware Type URI        ${sht}
    Set to Dictionary    ${payload}    serverHardwareTypeUri    ${uri}
    # EG
    ${eg} =        Get From Dictionary  ${payload}  enclosureGroupUri
    ${eg_uri} =  Get Enclosure Group URI    ${eg}
    Set to Dictionary    ${payload}    enclosureGroupUri    ${eg_uri}
    # Enclosure
    ${enc} =   Get From Dictionary  ${payload}  enclosureUri
    ${enc_uri} =    Get Enclosure URI    ${enc}
    Set to Dictionary    ${payload}    enclosureUri    ${enc_uri}
    # Get OS DeploymentPlan
    ${osdp} =   Get From Dictionary  ${payload}  osDeploymentSettings
    ${osdp1} =           Get From Dictionary           ${osdp}  osDeploymentPlanUri
    ${osdp_Uri} =    Get OSDP URI    ${osdp1}
    Set to Dictionary    ${payload['osDeploymentSettings']}    osDeploymentPlanUri=${osdp_uri}
    # Get Network URI
    ${connection}=    Get From Dictionary  ${payload}   connections
    ${connection1}         Get From List  ${connection}   0
    ${nwuri} =    Get From Dictionary        ${connection1}  networkUri
    ${uri} =     Get Ethernet URIs        ${nwuri}
    Set to Dictionary    ${connection1}    networkUri=${uri[0]}
    [Return]   ${payload}

Create GI Capture Payload
    [Arguments]        ${creategoldenimage}
    ${gic_body} =  Copy Dictionary  ${creategoldenimage}
    #Buildplan URI
    ${bp_name} =    Get from Dictionary     ${gic_body}    buildPlanUri
    ${bp_uri} =    Run Keyword If  '${bp_name}' is not ''        Get Buildplan URI        ${bp_name}
    Set to Dictionary    ${gic_body}  buildPlanUri    ${bp_uri}
    #OSvolume URI
    ${sp_name} =    Get from Dictionary    ${gic_body}    osVolumeURI
    ${osvolume_uri} =    Run Keyword If  '${sp_name}' is not ''        Get OSvolume URI        ${sp_name}
    #${response} =     i3s Get Statelessserver    param=?filter="'name'=='${sp_name}'"
    #${osvolume_uri} =     Get From Dictionary        ${response['members'][0]}    oeVolume
    Set to Dictionary    ${gic_body}  osVolumeURI    ${osvolume_uri}
    [Return]    ${gic_body}

GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
           Log To Console    GV_created_successfully for ${NAME}
           ELSE
           Log to Console    GV created but status yet to get updated to OK

Wait For GIC Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    Log to Console and Logfile    ${Response}
    ${Retry Interval}    Convert To Number    30
    ${Retries}    Convert To Integer    30
    ${Resp}=    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Resp}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
               Log    Errors encountered while creating GI    level=WARN
    Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
                   Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If    '${Response['members'][0]['status']}' == 'OK'
                   Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length}=    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
               ELSE
               Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}

Get Buildplan Uri
    Set Log Level  TRACE
    [Arguments]        ${buildPlanUri}
    ${resp} =     i3s Get Buildplan        param=?filter="'name'=='${buildPlanUri}'"
    ${uri} =     Run Keyword if  ${resp['count']} != 0
            Get From Dictionary        ${resp['members'][0]}    uri
            ELSE
            Set Variable    ${InvalidBPUri}
    [Return]    ${uri}

Get OSvolume Uri
    [Arguments]        ${osvolumename}
    ${resp} =     i3s Get Statelessserver  param=?filter="'name'=='${osvolumename}'"
    ${uri} =     Run Keyword if  ${resp['count']} != 0
            Get From Dictionary        ${resp['members'][0]}    oeVolume
            ELSE
            Set Variable    ${InvalidOSvolumeUri}
    [Return]    ${uri}

Get GoldenImage Uri
    [Arguments]     ${Name}
    ${resp}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Get OSDP URI
        [Arguments]        ${osdp}
     ${resp} =      Fusion Api Get OS Deploymentplan        param=?filter="'name'=='${osdp}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}
