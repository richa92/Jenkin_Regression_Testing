*** Settings ***
Documentation       Feature Test: Goldenimage

Variables           data_variables_gi.py

Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             BuiltIn
Library             FusionLibrary
Library             RoboGalaxyLibrary
Library             i3SLibrary
Variables           /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py

*** Variables ***
${VAL_DELETE}   <Response [202]>
${GI_SLEEP}     300

*** Test Cases ***
#Test Specific Setup
Login to Fusion appliance
	Set log level	 TRACE
	[Tags]    critical    REG    GI-Test0
    #Login to fusion appliance and assign hostname to self._host
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}
    ...                                             password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId}=    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}

#Above login is a must to get the fusion hostname assigned to self._host
Get i3s Appliance Cluster IP and Login
	Set log level	 TRACE
	[Tags]    critical    REG    GI-Test1
    ${resp}=    Fusion Api Get i3sCluster IP
    ${i3S_IP}=    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    # Login to i3s appliance
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}
    ...                                             password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId}=    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

#Golden Image operations
# OVF523_GI_TC01_Add Golden Image with blank name
Add Golden Image with blank name
	Set log level	 TRACE
	[Tags]    critical    REG    GI-Test2
    ${NAME}=    Get From Dictionary     ${goldenimage_add[0]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[0]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[0]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC02_Add Golden Image
Add Golden Image
	Set log level	 TRACE
	[Tags]    critical    REG    GI-Test3
    ${NAME}=    Get From Dictionary     ${goldenimage_add[1]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[1]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[1]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC03_Add Golden Image with duplicate name
Add Golden Image with duplicate name
    ${NAME}=    Get From Dictionary     ${goldenimage_add[2]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[2]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[2]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC04_Add Golden Image with invalid name
Add Golden Image with invalid name
    ${NAME}=    Get From Dictionary     ${goldenimage_add[3]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[3]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[3]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC05_Add Golden Image with invalid file
Add Golden Image with invalid file
    ${NAME}=    Get From Dictionary     ${goldenimage_add[4]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[4]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[4]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC06_Add Golden Image for update test
Add Golden Image for update test
    ${NAME}=    Get From Dictionary     ${goldenimage_add[5]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[5]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[5]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC07_Add Golden Image with name having 255 characters
Add Golden Image with name having 255 characters
    ${NAME}=    Get From Dictionary     ${goldenimage_add[6]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[6]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[6]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage with name of length 255 characters 
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC08_Add Golden Image with name greater 255 characters
Add Golden Image with name greater 255 characters
    ${NAME}=    Get From Dictionary     ${goldenimage_add[7]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[7]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[7]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC09_Add Golden Image with description having 1000 characters
Add Golden Image with description having 1000 characters
    ${NAME}=    Get From Dictionary     ${goldenimage_add[8]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[8]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[8]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage with desc of length 1000 characters 
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC10_Add Golden Image with description greater 1000 characters
Add Golden Image with description greater 1000 characters
    ${NAME}=    Get From Dictionary     ${goldenimage_add[9]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[9]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[9]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    400    Create GI return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_GI_TC11_Add Golden Image1 for testing GET public API calls
Add Golden Image1 for testing GET public API calls
    ${NAME}=    Get From Dictionary     ${goldenimage_add[10]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[10]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[10]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC12_Add Golden Image2 for testing GET public API calls
Add Golden Image2 for testing GET public API calls
    ${NAME}=    Get From Dictionary     ${goldenimage_add[11]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[11]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[11]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC13_Add Golden Image3 for testing GET public API calls
Add Golden Image3 for testing GET public API calls
    ${NAME}=    Get From Dictionary     ${goldenimage_add[12]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[12]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[12]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC14_Add Golden Image4 for testing GET public API calls
Add Golden Image4 for testing GET public API calls
    ${NAME}=    Get From Dictionary     ${goldenimage_add[13]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[13]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[13]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# OVF523_GI_TC15_Add Golden Image5 for testing GET public API calls
Add Golden Image5 for testing GET public API calls
    ${NAME}=    Get From Dictionary     ${goldenimage_add[14]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[14]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[14]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage for update test
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

# Get testcases
# OVF523_GI_TC25_Get Golden Image by name
Get Golden Image by name
    ${NAME}=    Get From Dictionary    ${goldenimage_get[0]}    name
    Log To Console    Get Golden Image    ${NAME}
    ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to get Golden Image by name.

# OVF523_GI_TC26_Get Golden Image by description
Get Golden Image by description
    ${DESC}=    Get From Dictionary    ${goldenimage_get[1]}    description
    Log To Console    Get Golden Image ${DESC}.
    ${Response}=    i3s Api Get Golden Image    param=?filter="'description'=='${DESC}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to get Golden Image by desciption.

# OVF523_GI_TC27_Get Golden Image by invalid name
Get Golden Image by invalid name
    ${NAME}=    Get From Dictionary    ${goldenimage_get[2]}    name
    Log To Console    Get Golden Image ${NAME}
    ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to get Golden Image by invalid name.

# OVF523_GI_TC28_Get Golden Image by invalid id
Get Golden Image by invalid id
    ${ID}=    Get From Dictionary    ${goldenimage_get[3]}    id
    Log To Console    Get Golden Image    ${ID}
    ${Response}=    i3s Api Get Golden Image    param1=${id}
    Should Be Equal as Strings    ${Response['status_code']}    404    msg=Get by invalid Id successful.

#More GET Calls as per the Public API docs
# OVF523_GI_TC29_Get Golden Image by count lower than available
Get Golden Image by count lower than available
    ${Response} =    i3s Api Get Golden Image    param=?count=8
    Should Be Equal as Strings    ${Response['count']}    9    msg=Failed to Get Golden Image.

# OVF523_GI_TC62_Get Golden Image by count higher than available
Get Golden Image by count higher than available
    ${Response} =    i3s Api Get Golden Image    param=?count=500
    Should Be Equal as Strings    ${Response['count']}    9    msg=Failed to Get Golden Image.

# OVF523_GI_TC30_Get All GoldenImages
Get All GoldenImages
    ${Response} =    i3s Api Get Golden Image
    ${cnt} =    Convert To Integer    ${Response['count']}
    Should Be Equal as Strings    ${Response['count']}    9    msg=Failed to Get Golden Image.

# OVF523_GI_TC31_Get Golden Image By Ascending Order
Get Golden Image By Ascending Order
    ${Response} =    i3s Api Get Golden Image
    ${gilist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT}    IN RANGE    0    ${cnt}
    \    append to list    ${gilist}    ${Response['members'][${GICNT}]['name']}
    Sort List    ${gilist}
    ${Response} =    i3s Api Get Golden Image    param=?sort=name:asc
    ${sortedgilist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \      append to list    ${sortedgilist}    ${Response['members'][${GICNT1}]['name']}
    Lists Should Be Equal    ${gilist}    ${sortedgilist}   msg="lists are not equal"

# OVF523_GI_TC32_Get Golden Image By Descending Order
Get Golden Image By Descending Order
    ${Response} =    i3s Api Get Golden Image
    ${gilist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT}    IN RANGE    0    ${cnt}
    \    append to list    ${gilist}    ${Response['members'][${GICNT}]['name']}
    Sort List    ${gilist}
    Reverse List    ${gilist}
    ${Response} =    i3s Api Get Golden Image    param=?sort=name:desc
    ${sortedgilist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \     append to list    ${sortedgilist}    ${Response['members'][${GICNT1}]['name']}
    Lists Should Be Equal    ${gilist}    ${sortedgilist}    msg="lists are not equal"

# OVF523_GI_TC33_Get Golden Image Using Smatch Order
Get Golden Image Using Smatch Order
    #   Usage:    https://15.212.171.216/rest/golden-imagess?filter="'name' smatches 'CL%25'"
    #....Output:   "name": "CL RHEL .....",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter="'name' smatches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC34_Get Golden Image Using Match Order
Get Golden Image Using Match Order
    #   Usage:    https://15.212.171.216/rest/golden-imagess?filter="'name' matches 'CL%25'"
    #   Output:   "name": "CL RHEL ......",
    #             "name": "cl artifact...",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter="'name' matches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC36_Get Golden Image starting with small letter cl Using Sregex
Get Golden Image ending with capital letters Using Sregex Order
    #  Usage:    https://15.212.171.216/rest/golden-imagess?filter='name' sregex '[A-Z]$'
    #  Output:    "name": "XXXXGET"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' sregex '[A-Z]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC35_Get Golden Image ending with capital letters Using Sregex Order
Get Golden Image starting with small letter cl Using Sregex
    #   Usage:    https://15.212.171.216/rest/golden-imagess?filter='name' sregex 'cl'
    #....Output:    cl artifact_for_GET
    ${NAME} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' sregex 'cl'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC37_Get Golden Image starting with capital letter CL using Sregex
Get Golden Image starting with capital letter CL using Sregex
    #  Usage:   https://15.212.171.216/rest/golden-imagess?filter='name' sregex 'CL'
    #  Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' sregex 'CL'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC38_Get Golden Image starting with capital letters using Sregex
Get Golden Image starting with capital letters using Sregex
    #  Usage:   https://15.212.171.216/rest/golden-imagess?filter='name' sregex '^[A-Z]'
    #  Output:   "name": "RHEL-7.2-goldenimage",
    #  Output:   "name": "CL RHEL API_GET"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[12]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' sregex '^[A-Z]'
    Log To Console    ${Response}
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_GI_TC39_Get Golden Image starting with small letters using Sregex
Get Golden Image starting with small letters using Sregex
    #  Usage:   https://15.212.171.216/rest/golden-imagess?filter='name' sregex '^[a-z]'
    #  Output:   "name": "goldenimage_1",
    #  Output:   "name": "goldenimage_update",
    #  Output:   "name": "namelengthna.............",
    #  Output:   "name": "goldenimage_desc_lenghtthousand",
    #  Output:   "name": "cl artifact_for_GET"
    #  Output:   "name": "goldenimage_456"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[1]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[5]}    name
    ${NAME2} =    Get From Dictionary    ${goldenimage_add[6]}    name
    ${NAME3} =    Get From Dictionary    ${goldenimage_add[8]}    name
    ${NAME4} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${NAME5} =    Get From Dictionary    ${goldenimage_add[14]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' sregex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_GI_TC40_Get Golden Image starting with any characters Using Regex
Get Golden Image starting with any characters Using Regex
    #  Usage:    https://15.212.171.216/rest/golden-imagess?filter='name' regex '^[a-z]'
    #  Output:   "name": "goldenimage_1",
    #  Output:   "name": "goldenimage_update",
    #  Output:   "name": "namelengthna.............",
    #  Output:   "name": "goldenimage_desc_lenghtthousand",
    #  Output:   "name": "cl artifact_for_GET"
    #  Output:   "name": "goldenimage_456"
    #  Output:   "name": "CL RHEL API_GET"
    #  Output:   "name": "RHEL-7.2-goldenimage"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[1]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[5]}    name
    ${NAME2} =    Get From Dictionary    ${goldenimage_add[6]}    name
    ${NAME3} =    Get From Dictionary    ${goldenimage_add[8]}    name
    ${NAME4} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${NAME5} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${NAME6} =    Get From Dictionary    ${goldenimage_add[12]}    name
    ${NAME7} =    Get From Dictionary    ${goldenimage_add[14]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' regex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC41_Get Golden Image for names ending With numbers using Regex
Get Golden Image for names ending With numbers using Regex
    #    Usage:    https://15.212.171.216/rest/golden-imagess?filter='name' regex '[0-9]$'
    #    Output:   "name": "goldenimage_1"
    #    Output:   "name": "goldenimage_456"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[1]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[14]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' regex '[0-9]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_GI_TC42_Get Golden Image for names starting with numbers using Regex
Get Golden Image for names starting with numbers using Regex
    #    Usage:    https://15.212.171.216/rest/golden-imagess?filter='name' regex '^[0-9]'
    #    Output:   "name": "123_goldenimage"
    ${NAME} =    Get From Dictionary    ${goldenimage_add[13]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter='name' regex '^[0-9]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC43_Get Golden Image for Regex OR - Get the list of names that are ORed in the GET call usage
Get Golden Image for Regex OR - Get the list of names that are ORed in the GET call usage
    #    Usage:    https://15.212.171.216/rest/golden-imagess?filter="'name' regex 'RHEL|CL'"
    #    Output:   "name": "RHEL-7.2-golden-images",
    #    Output:   "name": "CL RHEL API_GET",
    #    Output:   "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${NAME2} =    Get From Dictionary    ${goldenimage_add[12]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter="'name' regex 'RHEL|CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC44_Get Golden Image starting with a given character/character's using Regex
Get Golden Image starting with a given character/character's using Regex
    #    Usage:    https://15.212.171.216/rest/golden-imagess?filter="'name' regex '^CL'"
    #    Output:    "name": "CL RHEL API_GET",
    #    Output:    "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${NAME1} =    Get From Dictionary    ${goldenimage_add[11]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter="'name' regex '^CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_GI_TC45_Get Golden Image ending with a particular word using Regex
Get Golden Image ending with a particular word using Regex
    #   Usage:   https://15.212.171.216/rest/golden-imagess?filter="'name' regex 'API_GET$'"
    #   Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${goldenimage_add[10]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Golden Image    param=?filter="'name' regex 'API_GET$'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${GICNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${GICNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

##### Download GoldenImage
# OVF523_GI_TC16_Download Golden Image
Download Golden Image
	Set log level	 TRACE
	[Tags]    critical    REG    GI-Test4
    ${NAME}=    Get From Dictionary    ${goldenimage_add[1]}    name
	Log To Console    ${NAME}
    ${Response}=    i3s Api Download GOlden Image   param=?filter="'name'==${NAME}"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to download Golden Image.

#Update testcases
# OVF523_GI_TC17_Update Golden Image by description
Update Golden Image by description
    ${NAME}=    Get From Dictionary    ${goldenimage_add[5]}    name
    Log To Console    Update Golden Image    ${NAME}
    ${gi_uri}=    Get Golden Image Uri    ${NAME}
    ${Response}=    i3s Api Update GoldenImage    ${goldenimage_update[0]}    ${gi_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update golden image by description

# OVF523_GI_TC18_Update Golden Image by name
Update Golden Image by name
    ${NAME}=    Get From Dictionary    ${goldenimage_add[5]}    name
    Log To Console    Update Golden Image    ${NAME}
    ${gi_uri}=    Get Golden Image Uri    ${NAME}
    ${Response}=    i3s Api Update GoldenImage    ${goldenimage_update[1]}    ${gi_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update golden image by name

#delete testcases
# OVF523_GI_TC19_Delete Golden Image
Delete Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[0]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

# OVF523_GI_TC20_Delete Golden Image created for update
Delete Golden Image created for update
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

# OVF523_GI_TC21_Delete Golden Image created with name 255 characters
Delete Golden Image created with name 255 characters
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[2]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

# OVF523_GI_TC22_Delete Golden Image created with desc of 1000 characters
Delete Golden Image created with desc of 1000 characters
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[3]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

# OVF523_GI_TC23_Delete Non existing Golden Image
Delete Non existing Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[4]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response}   None        msg=Delete non existig GoldenImage successful

# OVF523_GI_TC24_Delete Golden Image1 created to test public api get calls
Delete Golden Image1 created to test public api get calls
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[5]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Golden Image2 created to test public api get calls
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[6]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Golden Image3 created to test public api get calls
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[7]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Golden Image4 created to test public api get calls
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[8]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Golden Image5 created to test public api get calls
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[9]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

#-------------------- Build the required JSON body-----------------------------------
*** Keywords ***
Get GoldenImage Uri
    [Arguments]    ${Name}
    ${resp}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
    ...    Log To Console    GV_created_successfully for ${NAME}
    ...    ELSE
    ...    Log to Console    GV created but status yet to get updated to OK

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
....${Retries}    Convert To Integer    30
....${Resp}=    i3s API Wait For Task To Complete....${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

....# Check for errors
....${Errors}=    Get From Dictionary    ${Resp}    taskErrors
....${Errors}=    Get Length    ${Errors}
....Run Keyword If    ${Errors} != 0
...........    Log    Errors encountered while creating GI    level=WARN
....Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If....'${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length}=    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
        ...    ELSE
....    ...    Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}
