*** Settings ***
Documentation        Feature Test: In-use Testcases

Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library
Library                BuiltIn
Library                FusionLibrary
Library                RoboGalaxyLibrary
Library                i3SLibrary

Variables                ../../Jenkin_Regression_Testing/robo4.2/i3s/tests/testdata/i3s_QA_testdata.py
Variables                data_variable_inuse.py

Resource                ../../../../../fusion/tests/resource/fusion_api_all_resource_files.txt

*** Variables ***
${GI_SLEEP}     300
${AB_SLEEP}     60

*** Test Cases ***

Login to Appliance
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    Set Log Level   TRACE

Get i3s Appliance Cluster IP and Login
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
# Login to i3s appliance
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                                password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

############################################################################################################################################################
# Initial Setup

Add Golden Image FOR INUSE - READ ONLY NO
    ${NAME}=    Get From Dictionary     ${goldenimage[0]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage[0]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage[0]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

#For Creating GOlden Image with Read only YES

Create Artifact Bundle AB
    Set log level  TRACE
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle[0]}
    ${Response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create AB
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

Extract Artifact Bundle AB
    ${NAME} =    Get From Dictionary    ${artifactbundle[0]}    name
    ${ab_uri} =    Get ArtifactBundle Uri    ${NAME}
    ${Response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Artifact Bundle.
    Sleep    ${AB_SLEEP}

Create Plan Script having Multiple CA - READ ONLY NO
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script having Single CA - READ ONLY NO
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script having Multiple CA - READ ONLY YES
    Set log level  TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script having Single CA - READ ONLY YES
    Set log level  TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Build Plan having Multiple CA - READ ONLY NO
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan[0]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Build Plan having Single CA - READ ONLY NO
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan[1]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Build Plan having Multiple CA - READ ONLY YES
    Set log level  TRACE
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan[2]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Build Plan having Single CA - READ ONLY YES
    Set log level  TRACE
    Log to console    Create OS Build Plan
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan[3]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Deployment Plan Valid DP with multiple CA - READ ONLY NO
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[0]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Deployment Plan Valid DP with Single CA - READ ONLY NO
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[1]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Deployment Plan Valid DP with multiple CA - READ ONLY YES
    Set log level  TRACE
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[2]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Deployment Plan Valid DP with Single CA - READ ONLY YES
    Set log level  TRACE
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[3]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

#################### Test Cases ################################

Inuse_TC01_Edit Inuse Planscript(DP) By Name and Description
    ${NAME} =    Get From Dictionary    ${planscript[1]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[1]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC02 _Edit Inuse BuildPlan(DP) Change In Name, Description and CA
    ${NAME} =    Get From Dictionary    ${buildplan[1]}    name
    Log To Console    \nBuildplan which will be updated is: \t${NAME}
    ${bp_uri} =    Get Buildplan Uri    ${NAME}
    Log To Console    \nBuildplan URI is:    \t${bp_uri}
    ${bp_body} =    Create Buildplan Payload    ${buildplan_update[1]}
    Log To Console    \nBuildplan Body is:    \t${bp_body}
    ${Response} =    i3s Api Update Buildplan    ${bp_body}  ${bp_uri}
    Log To Console    \nBuildplan Response is:    \t${Response}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Buildplan

Inuse_TC03_Edit Inuse Golden Image(DP) by description and name
    ${NAME}=    Get From Dictionary    ${goldenimage[0]}    name
    Log To Console    Update Golden Image    ${NAME}
    ${gi_uri}=    Get Golden Image Uri    ${NAME}
    ${Response}=    i3s Api Update GoldenImage    ${goldenimage_update[0]}    ${gi_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update golden image by description

Inuse_TC04_Delete Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[1]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Inuse_TC05_Delete Inuse Build Plan
    ${NAME}=    Get From Dictionary        ${buildplan_update[1]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Delete Build Plan

Inuse_TC06_Delete Inuse Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage_update[0]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC07_Delete Inuse Planscript - READ ONLY YES
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${planscript[3]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    409    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. PS cannot be Deleted

Inuse_TC08_Delete Inuse Build Plan - READ ONLY YES
    Set log level  TRACE
    ${NAME}=    Get From Dictionary        ${buildplan[3]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP cannot Deleted

Inuse_TC09_Delete Inuse Golden Image - READ ONLY YES
    ${NAME}=    Get From Dictionary    ${goldenimage[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage
    Run Keyword If    ${Response['status_code']}==409  Log to console  GOLDEN IMAGE IN USE. GI cannot be Deleted

Create ServerProfile with Valid DP multiple CA - READ ONLY NO
	[Tags]    critical    REG    PL-Test4
    ${NAME} =    Get From Dictionary    ${serverprofile[0]}    name
    Log to console    \n${NAME}
    ${sp_body}=        Create Server Profile Payload        ${Serverprofile[0]}
    ${Response}=    Fusion API Create Server Profile    ${sp_body}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    15
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating Server Profile

Create ServerProfile with Valid DP multiple CA - READ ONLY YES
	[Tags]    critical    REG    PL-Test5
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${serverprofile[1]}    name
    Log to console    \n${NAME}
    ${sp_body}=        Create Server Profile Payload        ${Serverprofile[1]}
    ${Response}=    Fusion API Create Server Profile    ${sp_body}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    15
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating Server Profile

########################################################################################################################################

Inuse_TC10_Edit Inuse Planscript(SP) by Name and Description
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[0]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC11_ Edit Inuse BuildPlan(SP) Change In Name, Description and CA
    ${NAME} =    Get From Dictionary    ${buildplan[0]}    name
    Log To Console    \nBuildplan which will be updated is: \t${NAME}
    ${bp_uri} =    Get Buildplan Uri    ${NAME}
    Log To Console    \nBuildplan URI is:    \t${bp_uri}
    ${bp_body} =    Create Buildplan Payload    ${buildplan_update[0]}
    Log To Console    \nBuildplan Body is:    \t${bp_body}
    ${Response} =    i3s Api Update Buildplan    ${bp_body}  ${bp_uri}
    Log To Console    \nBuildplan Response is:    \t${Response}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Update Buildplan

Inuse_TC12_Edit Inuse Golden Image(SP)
    ${NAME}=    Get From Dictionary    ${goldenimage_update[0]}    name
    Log To Console    Update Golden Image    ${NAME}
    ${gi_uri}=    Get Golden Image Uri    ${NAME}
    ${Response}=    i3s Api Update GoldenImage    ${goldenimage_update[1]}    ${gi_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update golden image by description

Inuse_TC13_Edit Inuse Deployment Plan (SP)
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[1]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Update Deploymentplan

Inuse_TC14_Delete Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC15_Delete Inuse Build Plan
    ${NAME}=    Get From Dictionary        ${buildplan[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Delete Build Plan

Inuse_TC16_Delete Inuse Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage_update[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC17_Delete Inuse Deployment Plan
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan

Inuse_TC18_Delete Planscript - READ ONLY YES
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${planscript[2]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    204    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. PS cannot be Deleted

Inuse_TC19_Delete Inuse Build Plan - READ ONLY YES
    Set log level  TRACE
    ${NAME}=    Get From Dictionary        ${buildplan[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP cannot be Deleted

Inuse_TC20_Delete Inuse Golen Image - READ ONLY YES
    ${NAME}=    Get From Dictionary    ${goldenimage[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage
    Run Keyword If    ${Response['status_code']}==409  Log to console  GOLDEN IMAGE IN USE. GI cannot be Deleted

Inuse_TC21_Delete Inuse Deployment Plan - READ ONLY YES
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${deploymentplan[2]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    #Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan
    Run Keyword If    ${Response['status_code']}==412  Log to console  DEPLOYMENT PLAN IS USE. DP cannot be Deleted

#############################################################################################################################################

Create Serverprofile Template from Serverprofile - READ ONLY NO
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${Serverprofile[0]}    name
    Log To Console    \n\nServer Profile to be updated is: ${NAME}
    ${SP_json} =    Fusion API Get Server Profiles    param=?filter='name'=='${NAME}'
    ${SP_members_list} =     Get from Dictionary    ${SP_json}    members
    ${SP_members_dict} =    Convert to Dictionary    @{SP_members_list}
    # Get the SP uri, to be used next in update call
    ${SP_uri} =    Get from Dictionary    ${SP_members_dict}    uri
    Log To Console    \n\n${SP_uri}
    ${SPT_Request_body} =    Fusion API Get Server Profiles    uri=${SP_uri}    param=/new-profile-template
    ${SPT_members_dict} =    Convert to Dictionary    ${SPT_Request_body}
    # Get the value of name  from the SPT_from_SP json
    ${SP_name} =    Get from Dictionary    ${SPT_from_SP[0]}    name
    Set to Dictionary    ${SPT_members_dict}    name    ${SP_name}
    # Get call with new-profile-template returns all members in a dictionary , it does not have members field seperatly
    # SPT_members_dict contains dict members with status_code and headers which is not
    # required for the SPT create, hence removing the same
    Remove From Dictionary    ${SPT_members_dict}    status_code
    Remove From Dictionary    ${SPT_members_dict}    headers
    #Log to console    \n\n${SPT_members_dict}
    ${Response} =    Fusion API Create Server Profile Template   ${SPT_members_dict}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SPT
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    5
    ${Response} =    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors_count} =    Get Length    ${Errors}
    Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccessfully created server profile template from server profile
    ...    ELSE    Fail    msg=Errors encountered while creating Server Profile Template from server profile...\n${Errors}

Create Serverprofile Template from Serverprofile - READ ONLY YES
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${Serverprofile[1]}    name
    Log To Console    \n\nServer Profile to be updated is: ${NAME}
    ${SP_json} =    Fusion API Get Server Profiles    param=?filter='name'=='${NAME}'
    ${SP_members_list} =     Get from Dictionary    ${SP_json}    members
    ${SP_members_dict} =    Convert to Dictionary    @{SP_members_list}
    # Get the SP uri, to be used next in update call
    ${SP_uri} =    Get from Dictionary    ${SP_members_dict}    uri
    Log To Console    \n\n${SP_uri}
    ${SPT_Request_body} =    Fusion API Get Server Profiles    uri=${SP_uri}    param=/new-profile-template
    ${SPT_members_dict} =    Convert to Dictionary    ${SPT_Request_body}
    # Get the value of name  from the SPT_from_SP json
    ${SP_name} =    Get from Dictionary    ${SPT_from_SP[1]}    name
    Set to Dictionary    ${SPT_members_dict}    name    ${SP_name}
    # Get call with new-profile-template returns all members in a dictionary , it does not have members field seperatly
    # SPT_members_dict contains dict members with status_code and headers which is not
    # required for the SPT create, hence removing the same
    Remove From Dictionary    ${SPT_members_dict}    status_code
    Remove From Dictionary    ${SPT_members_dict}    headers
    #Log to console    \n\n${SPT_members_dict}
    ${Response} =    Fusion API Create Server Profile Template   ${SPT_members_dict}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SPT
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    5
    ${Response} =    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors_count} =    Get Length    ${Errors}
    Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccessfully created server profile template from server profile...
    ...    ELSE    Fail    msg=Errors encountered while creating Server Profile Template from server profile...\n${Errors}

Delete Server Profile - READ ONLY NO
    [Tags]   Run-this12
    ${NAME}=    Get From Dictionary        ${Serverprofile[0]}    name
    Log To Console    \nDeleting Server Profile ${NAME}
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    10
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while deleting Server Profile
    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
    Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}

Delete Server Profile - READ ONLY YES
    [Tags]   Run-this12
    ${NAME}=    Get From Dictionary        ${Serverprofile[1]}    name
    Log To Console    \nDeleting Server Profile ${NAME}
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    10
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while deleting Server Profile
    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
    Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}

#################################################################################################################################################

Inuse_TC22_Edit Inuse Planscript(SPT) by Name and Description
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[0]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC23_ Edit Inuse BuildPlan(SPT) Change In Name, Description and CA
    ${NAME} =    Get From Dictionary    ${buildplan[0]}    name
    Log To Console    \nBuildplan which will be updated is: \t${NAME}
    ${bp_uri} =    Get Buildplan Uri    ${NAME}
    Log To Console    \nBuildplan URI is:    \t${bp_uri}
    ${bp_body} =    Create Buildplan Payload    ${buildplan_update[0]}
    Log To Console    \nBuildplan Body is:    \t${bp_body}
    ${Response} =    i3s Api Update Buildplan    ${bp_body}  ${bp_uri}
    Log To Console    \nBuildplan Response is:    \t${Response}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Update Buildplan

Inuse_TC24_Edit Inuse Golden Image(SPT)
    ${NAME}=    Get From Dictionary    ${goldenimage_update[1]}    name
    Log To Console    Update Golden Image    ${NAME}
    ${gi_uri}=    Get Golden Image Uri    ${NAME}
    ${Response}=    i3s Api Update GoldenImage    ${goldenimage_update[2]}    ${gi_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update golden image by description

Inuse_TC25_Edit Inuse Deployment Plan(SPT)
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[2]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Update Deploymentplan

Inuse_TC26_Delete Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC27_Delete Inuse Build Plan
    ${NAME}=    Get From Dictionary        ${buildplan[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Delete Build Plan

Inuse_TC28_Delete Inuse Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage_update[2]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC29_Delete Inuse Deployment Plan
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan

Inuse_TC30_Delete Planscript - READ ONLY YES
    Set log level  TRACE
    ${NAME} =    Get From Dictionary    ${planscript[2]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    204    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. PS cannot be Deleted

nuse_TC31_Delete Inuse Build Plan - READ ONLY YES
    Set log level  TRACE
    ${NAME}=    Get From Dictionary        ${buildplan[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP cannot be Deleted

Inuse_TC32_Delete Inuse Golen Image - READ ONLY YES
    ${NAME}=    Get From Dictionary    ${goldenimage[1]}    name
    Log To Console    Deleting goldenimag    ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage
    Run Keyword If    ${Response['status_code']}==409  Log to console  GOLDEN IMAGE IN USE. GI cannot be Deleted

Inuse_TC33_Delete Inuse Deployment Plan - READ ONLY YES
    ${NAME} =    Get From Dictionary    ${deploymentplan[2]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    #Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan
    Run Keyword If    ${Response['status_code']}==412  Log to console  DEPLOYMENT PLAN IS USE. DP cannot be Deleted

########################################################################################################################

Create Inuse Plan Script
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Inuse Build Plan
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan[4]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan


Inuse_TC34_Edit Inuse Planscript content when name and no. of CA remain same
    ${NAME} =    Get From Dictionary    ${planscript[4]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[2]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC35_Edit Inuse Planscript CA
    ${NAME} =    Get From Dictionary    ${planscript_update[2]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[3]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC36_Add CA to Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[3]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[4]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC37_Edit Inuse Planscript content and add duplicate CA with different value
    ${NAME} =    Get From Dictionary    ${planscript_update[4]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[5]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC38_Edit Inuse Planscript content and add duplicate CA with no default value
    ${NAME} =    Get From Dictionary    ${planscript_update[4]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[6]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC39_Edit Inuse Planscript content and add new CA with default value
    ${NAME} =    Get From Dictionary    ${planscript_update[6]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[7]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC40_Edit Inuse Planscript content and add new CA with no default value
    ${NAME} =    Get From Dictionary    ${planscript_update[3]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[4]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC41_CA should be deleted from the Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[7]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[8]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC42_Add a NIC sub-attribute to Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[8]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[9]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC43_Edit the name of NIC sub-attribute of Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[9]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[10]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC44_Add a invalid NIC sub-attribute of Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[10]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[11]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC45_Updating the blank CA value with some default value on Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[11]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[12]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC46_Edit the default value of existing CA Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[12]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[13]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC47_Delete the NIC sub-attribute of In-use Planscipt
    ${NAME} =    Get From Dictionary    ${planscript_update[13]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[14]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC48_Edit Name and Description of Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[14]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[15]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC49_Edit the type field of Inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[15]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[16]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}



Create Deployment Plan for unassigned Server Profile
    Set log level  TRACE
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[4]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create unassigned Server Profile
    ${NAME} =    Get From Dictionary    ${serverprofile[2]}    name
    Log to console    \n${NAME}
    ${sp_body}=        Create Server Profile Payload        ${Serverprofile[2]}
    ${Response}=    Fusion API Create Server Profile    ${sp_body}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    15
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    Log to Console    \n${Response}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating Server Profile


Inuse_TC50_Edit Inuse Planscript for unassigned Sever Profile
    ${NAME} =    Get From Dictionary    ${planscript_update[15]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[17]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

Inuse_TC51_Delete Inuse Planscript fo unassigned Server Profile
    ${NAME} =    Get From Dictionary    ${planscript_update[15]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    409    msg=Failed to delete GoldenImage

Inuse_TC52_Edit Inuse Deployment Plan for unassigned Server Profile
    ${NAME} =    Get From Dictionary    ${deploymentplan[4]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[5]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    412    msg=Failed to Update Deploymentplan


Inuse_TC53_Delete Inuse Deployment Plan for unassigned Server Profile
    ${NAME} =    Get From Dictionary    ${deploymentplan[4]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan


################################################## Clean UP ############################################################

Delete Server Profile Template
    ${NAME}=    Get From Dictionary        ${SPT_from_SP[0]}    name
    Log To Console    \nDeleting Server Profile Template ${NAME}
    ${Response} =        Fusion API Delete Server Profile Template    ${NAME}
    Log to console and logfile    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to initiate delete server profile template
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     30
    ${Retries}    Convert To Integer    10
    ${Resp}=    Fusion API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while deleting Server Profile Template..\n${Errors}

Delete Deploymentplan with Multiple CA - READ ONLY NO
    ${NAME} =    Get From Dictionary    ${deploymentplan[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan with Single CA - READ ONLY NO
    ${NAME} =    Get From Dictionary    ${deploymentplan[1]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Golden Image 1
    ${NAME}=    Get From Dictionary    ${goldenimage_update[2]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Build Plan having Multiple CA - READ ONLY NO
    ${NAME}=    Get From Dictionary        ${buildplan[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan having Updated Single CA - READ ONLY NO
    ${NAME}=    Get From Dictionary        ${buildplan_update[1]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Planscript having Multiple CA - READ ONLY NO
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete Server Profile Template - READ ONLY YES
    ${NAME}=    Get From Dictionary        ${SPT_from_SP[1]}    name
    Log To Console    \nDeleting Server Profile Template ${NAME}
    ${Response} =        Fusion API Delete Server Profile Template    ${NAME}
    Log to console and logfile    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to initiate delete server profile template
    # Wait for task to complete

Delete Deploymentplan Valid DP with multiple CA - READ ONLY YES
    ${NAME} =    Get From Dictionary    ${deploymentplan[2]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    #Should Be Equal As Strings    ${Response['status_code']}    412    msg=Failed to delete Deploymentplan
    Run Keyword If    ${Response['status_code']}==412  Log to console  DEPLOYMENT PLAN IS USE. DP is not Deleted

Delete Deploymentplan Valid DP with Single CA - READ ONLY YES
    ${NAME} =    Get From Dictionary    ${deploymentplan[3]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    #Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan
    Run Keyword If    ${Response['status_code']}==412  Log to console  DEPLOYMENT PLAN IS USE. DP is not Deleted

Delete Golden Image 2 - READ ONLY YES
    ${NAME}=    Get From Dictionary    ${goldenimage[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Build Plan having Multiple CA - READ ONLY YES
    ${NAME}=    Get From Dictionary        ${buildplan[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP is not Deleted

Delete Build Plan having Single CA - READ ONLY YES
    ${NAME}=    Get From Dictionary        ${buildplan[3]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP is not Deleted

Delete Planscript having Multiple CA - READ ONLY YES
    ${NAME} =    Get From Dictionary    ${planscript[2]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    204    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. Ps is not Deleted

Delete Planscript having Single CA - READ ONLY YES
    ${NAME} =    Get From Dictionary    ${planscript[3]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    #Should Be Equal as Strings    ${Response['status_code']}    409    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. PS is not Deleted

Delete Artifact Bundle AB
    ${NAME} =    Get From Dictionary    ${artifactbundle[0]}    name
    ${Response} =    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete


Delete unassigned Server Profile
    ${NAME}=    Get From Dictionary        ${Serverprofile[2]}    name
    Log To Console    \nDeleting Server Profile ${NAME}
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}
    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    10
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while deleting Server Profile
    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
    Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}

Delete inuse DP for unassigned Server Profile
    ${NAME} =    Get From Dictionary    ${deploymentplan[4]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan
    Run Keyword If    ${Response['status_code']}==412  Log to console  DEPLOYMENT PLAN IS USE. DP is not Deleted

Delete inuse Build Plan
    ${NAME}=    Get From Dictionary        ${buildplan[4]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Build plan deleted
    Run Keyword If    ${Response['status_code']}==412  Log to console  BUILD PLAN IN USE. BP is not Deleted

Delete inuse Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[15]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Plan Script Deleted
    Run Keyword If    ${Response['status_code']}==409  Log to console  PLAN SCRIPT IN USE. Ps is not Deleted

*** Keywords ***

Get ArtifactBundle Uri
    [Arguments]    ${Name}
    ${resp} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Deploymentplan Uri
    [Arguments]    ${dpuri}
    ${resp} =    i3s Get Deploymentplan    param=?filter="'name'=='${dpuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

GET PLANSCRIPT URI
    [Arguments]    ${psuri}
    ${resp} =    I3S GET PLANSCRIPT    param=?filter="'name'=='${psuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Goldenimage URI
    [Arguments]    ${giuri}
    ${resp} =    i3s Get Goldenimage        param=?filter="'name'=='${giuri}'"
    ${uri} =    Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Buildplan URI
    [Arguments]        ${bpuri}
    ${resp} =     i3s Get Buildplan        param=?filter="'name'=='${bpuri}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

Create Deploymentplan Payload
    [Arguments]    ${deploymentplan_create}
    ${dp_body} =    Copy Dictionary    ${deploymentplan_create}

    #Buildplan URI
    ${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
    Log to console and logfile        \nBP Name is:\t ${bp_name}
    ${bp_uri} =    Run Keyword If  '${bp_name}' is not ''        Get Buildplan URI    ${bp_name}
    Log to console and logfile        \nBP URI is:\t ${bp_uri}
    #${bp_uri} =    Get Buildplan URI    ${bp_name}
    Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

    #Goldenimage URI
    ${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
    Log to console and logfile        \nGI Name is:\t ${gi_name}
    ${gi_uri} =    Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
    Log to console and logfile        \nGI URI is:\t ${gi_uri}
    #${gi_uri} =    Get Goldenimage URI    ${gi_name}
    Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
    [Return]    ${dp_body}

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
    ${Retries}    Convert To Integer    30
    ${Resp}=    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Resp}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating GI    level=WARN
    Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If    '${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        Log to console    ${GV_Response}
        Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    Golden volume created successfully
        Run Keyword If    '${GV_Response['members'][0]['status']}' != 'OK'
            ...    Log To Console    Golden volume creation failed to get created for the goldenimage

CREATE BUILD PLAN PAYLOAD
    [Arguments]    ${buildplan_create}
    ${bp_body} =    Copy Dictionary  ${buildplan_create}
    #planscript URI
    ${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
    ${mx} =  Get Length  ${ps_body}
    Log To Console    ${mx}

    :FOR    ${NUM}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
    \    ${uri} =    GET PLANSCRIPT URI    ${psuri}
    \    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
    \    Log to console     ${uri}
    [Return]    ${bp_body}


Create Server Profile Payload
    [Documentation]    Create Server Profile Payload
    ...                    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
    ...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
    ...                            "enclosureGroupUri":"EG:EG1",
    ...                               "osdeployment settings" : "OSDP:OSDP1",
    ...                           ...}
    [Arguments]        ${sp_groups}
    ${payload} =  Copy Dictionary  ${sp_groups}
    ${server_hw} =    Get from Dictionary    ${payload}    serverHardwareUri
    #Get server hardware URI
    ${ServerHwUri} =     Run Keyword If    '${server_hw}' != 'None'    Get Server Hardware URI        ${server_hw}
    ...    ELSE    Set Variable    ${server_hw}
    Log        ${server_hw} : ${ServerHwUri}
    Set to Dictionary    ${payload}    serverHardwareUri    ${ServerHwUri}
    # Ensuring that Blade is Powered off before Server Profile creation
    ${taskState}    ${taskStatus} =    Run Keyword If    '${ServerHwUri}' != 'None'    Power On Off Server    ${ServerHwUri}    Off
    ...    ELSE    Set Variable    ${ServerHwUri}    ${ServerHwUri}
    ${status}=        Run Keyword If         '${taskState}'=='Completed'        Log To Console        ${taskStatus}
    ...                ELSE        Log    Task Status : ${taskStatus}
    # SHT
    ${sht} =    Get From Dictionary  ${payload}  serverHardwareTypeUri
    ${sht_uri} =     Get Server Hardware Type URI        ${sht}
    Log    ${sht} : ${sht_uri}
    Set to Dictionary        ${payload}    serverHardwareTypeUri    ${sht_uri}
    # EG
    ${eg} =        Get From Dictionary  ${payload}  enclosureGroupUri
    ${eg_uri} =  Get Enclosure Group URI    ${eg}
    Log    ${eg} : ${eg_uri}
    Set to Dictionary    ${payload}    enclosureGroupUri    ${eg_uri}
    # Enclosure
    ${enc} =   Get From Dictionary  ${payload}  enclosureUri
    ${enc_uri} =    Run Keyword If    '${enc}' != 'None'    Get Enclosure URI    ${enc}
    ...    ELSE    Set Variable    ${enc}
    Log    ${enc} : ${enc_uri}
    Set to Dictionary    ${payload}    enclosureUri    ${enc_uri}
    # SPT
    ${spt} =    Get From Dictionary  ${payload}  serverProfileTemplateUri
    ${SPTUri} =     Run Keyword If    '${spt}' != 'None'    Get SPT URI        ${spt}
    ...    ELSE    Set Variable    ${spt}
    Log    ${spt} : ${SPTUri}
    Set to Dictionary    ${payload}    serverProfileTemplateUri    ${SPTUri}
    # Get OS DeploymentPlan
    ${osds} =   Get From Dictionary  ${payload}  osDeploymentSettings
    ${osdp} =    Run Keyword If    ${osds} != None    Get From Dictionary    ${osds}  osDeploymentPlanUri
    ...    ELSE    Set Variable    ${osds}
    ${osdp_Uri} =    Run Keyword If    '${osdp}' != 'None'    Get OSDP URI    ${osdp}
    ...    ELSE    Set Variable    ${osdp}
    Log    ${osdp} : ${osdp_uri}
    Log to console and logfile    ${osdp_uri}
    Run Keyword If    ${osds} != None    Set to Dictionary    ${payload['osDeploymentSettings']}    osDeploymentPlanUri=${osdp_uri}
    # Get Network URI of os custom attributes
    ${OS_CA} =    Run Keyword If    ${osds} != None    Get From Dictionary    ${osds}    osCustomAttributes
    ...    ELSE    Create List
    :FOR    ${CA}    IN    @{OS_CA}
    \    ${CA_name} =    Get From Dictionary    ${CA}    name
    \    ${regex_match} =    Evaluate    re.search(r'networkuri', '${CA_name}', re.I)    re
    \    Run Keyword If    '${regex_match}' == 'None'    continue For Loop
    \    ${Mgmt_Nic} =    Get From Dictionary    ${CA}    value
    \    ${nwuri} =     Get Ethernet URI        ${Mgmt_Nic}
    \    Log to console and logfile    ${nwuri}
    \    Set to Dictionary    ${CA}    value=${nwuri}
    # Get Network URI of connections
    ${connectionSettings}=    Get From Dictionary  ${payload}   connectionSettings
    ${connection}=       Get From Dictionary  ${connectionSettings}   connections
    ${Number_of_connections}=  Get Length    ${connection}
    Log    Number of connections : ${Number_of_connections}
    Log to console and logfile    ${Number_of_connections}
    Log    VALUE IN CONNECTION :
    :FOR    ${conn_index}    IN Range    0    ${Number_of_connections}
    \    ${connection_id}    Get From List    ${connection}    ${conn_index}
    \    ${nw_uri} =    Get From Dictionary    ${connection_id}    networkUri
    \    ${uri} =     Get Ethernet URI        ${nw_uri}
    \    Log to console and logfile    ${uri}
    \    Set to Dictionary    ${connection_id}    networkUri=${uri}
    [Return]   ${payload}

Power On Off Server
    [Documentation]        Power On/Power Off Server Hardware
    [Arguments]    ${ServerHwUri}    ${power_state}
    Log    Powering ${power_state} Server Hardware : ${ServerHwUri}
    ${blade_load}=        Create Dictionary        powerState=${power_state}
    ...                                        powerControl=MomentaryPress
    ${Response}=    Fusion Api Edit Server Hardware Power State        ${blade_load}        ${ServerHwUri}
    #${taskuri}=       Get From Dictionary        ${Response}        uri
    ${retries}=    Convert To Integer        20
    ${sleep_time}=    Convert To Integer        30
    ${Resp}=    Fusion Api Wait For Task To Complete    ${Response['headers']['Location']}        retries=${retries}        sleep_time=${sleep_time}
    ${taskState}        Get From Dictionary        ${Resp}        taskState
    ${taskStatus}        Get From Dictionary        ${Resp}        taskStatus
    [Return]    ${taskState}    ${taskStatus}

Get OSDP URI
    [Arguments]        ${osdp}
    ${resp} =     Fusion Api Get OS Deploymentplan        param=?filter="'name'=='${osdp}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Goldenimage Body
    [Arguments]    ${mx}    ${gi_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${giuri} =    Get From Dictionary    ${gi_body[${IND}]}    resourceUri
    \    ${uri} =    Get Goldenimage Uri    ${giuri}
    \    Set to Dictionary    ${gi_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${gi_body}

Create Artifact Bundle Payload
    [Arguments]    ${artifactbundle}
    ${ab_body} =    Copy Dictionary    ${artifactbundle}
    #GoldenImage URI
    ${Gstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    goldenImages
    ${gi_body} =    Run keyword if    ${Gstatus} ==${True}    Get from Dictionary    ${ab_body}    goldenImages
    ${mx} =    Run keyword if    ${Gstatus} ==${True}    Get Length    ${gi_body}
    ${gisUri} =    Run keyword If    '${mx}'!='None'    Get Goldenimage Body    ${mx}    ${gi_body}
    #Planscript URI
    ${Pstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    planScripts
    ${ps_body} =    Run keyword if    ${Pstatus} ==${True}    Get from Dictionary    ${ab_body}    planScripts
    ${mx} =    Run keyword if    ${Pstatus} ==${True}    Get Length    ${ps_body}
    ${psUri} =    Run keyword If    '${mx}'!='None'    Get Planscript Body    ${mx}    ${ps_body}
    #Buildplan URI
    ${Bstatus} =   run keyword and return status    Dictionary should contain key    ${ab_body}    buildPlans
    ${bp_body} =    Run keyword if    ${Bstatus} ==${True}    Get from Dictionary    ${ab_body}    buildPlans
    ${mx} =    Run keyword if    ${Bstatus} ==${True}    Get Length    ${bp_body}
    ${bpUri} =    Run keyword If    '${mx}'!='None'    Get Buildplan Body    ${mx}    ${bp_body}
    #Deploymentplan URI
    ${Dstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    deploymentPlans
    ${dp_body} =    Run keyword if    ${Dstatus} ==${True}    Get from Dictionary    ${ab_body}    deploymentPlans
    ${mx} =    Run keyword if    ${Dstatus} ==${True}    Get Length    ${dp_body}
    ${depUri} =    Run keyword If    '${mx}'!='None'    Get Deploymentplan Body    ${mx}    ${dp_body}
    [Return]    ${ab_body}
