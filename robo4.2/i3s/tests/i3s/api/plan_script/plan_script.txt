*** Settings ***
Documentation     Test Planscripts
...    = Usage =
...    | pybot | -v I3S_IP:<Your-IP> | -v XML_FILE:<XML_FILE> | planscripts.txt
...    = Variables =
...    | I3S IP | Required; IP address of the I3SVM to use |
...    | XML_FILE | Required; File containing data in XML format |

Library     String
Library     Collections
Library     Selenium2Library
Library     robot.api.logger
Library     RoboGalaxyLibrary
Library     OperatingSystem
Library     SSHLibrary
Library     i3SLibrary
Library     FusionLibrary
Variables   data_variables_ps.py
Variables   /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py

*** Variables ***
${VAL_DELETE}  <Response [204]>

*** Test Cases ***
#Test Specific Setup
Login to Appliance
	[Tags]    critical    REG    PL-Main
     ${admin_credentials}=    Create Dictionary   userName=${DEFAULT_USER}
    ...                               password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId}=    Fusion Api Login Appliance    ${fusion_IP}      ${admin_credentials}

# Create all the required Artifacts in i3s appliance
Get i3s Appliance Cluster IP and Login
	[Tags]    critical    REG    PL-Main2
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}   primaryIPV4
    # Login to i3s appliance
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}
    ...                               password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}

# OVF523_PS_TC01_Create_Plan_Script_with_valid_name
Create Plan Script with valid name
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

# OVF523_PS_TC02_Create_Planscript_with_NULL_value_for_name
Create Planscript with NULL value for Name field
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_PS_TC03_Create_Planscript_with_all_fields_set_to_NULL
Create Planscript with all fields set to NULL
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_PS_TC04_Create_Planscript_with_valid_fields_for_Deploy
Create Planscript with valid fields for Deploy
    ${Response} =    I3s Api Create Plan Scripts  ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for deploy planType, status : ${Response['status_code']}

# OVF523_PS_TC05_Create_Planscript_with_Duplicate_Name
Create Planscript with Duplicate Name
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_PS_TC06_Create_Planscript_with_Invalid_Name
Create Planscript with Invalid Name
    ${Response}=    I3s Api Create Plan Scripts  ${planscript[5]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_PS_TC07_Create_Planscript_with_No_Plantype
Create Planscript with No Plantype
    ${Response} =    I3s Api Create Plan Scripts  ${planscript[6]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status, status : ${Response['status_code']}

# OVF523_PS_TC08_Create_Planscript_with_Invalid_Plantype
Create Planscript with Invalid Plantype
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[7]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC09_Create_Planscript_with_Name_of_Length_255_characters
Create Planscript with Name field of length 255 characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[8]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for name field of length 255 characters, status : ${Response['status_code']}

# OVF523_PS_TC10_Create_Planscript_with_Name_of_Length_greater_than_255_characters
Create Planscript with Name field of length greater then 255 characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[9]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC11_Create_Planscript_with_Description_of_Length_1000_characters
Create Planscript with Description field of length 1000 characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[10]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for description field of length 1000 characters, status : ${Response['status_code']}

# OVF523_PS_TC12_Create_Planscript_with_Description_of_Length_greater_than_1000_characters
Create Planscript with Description field of length greater then 1000 characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[11]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC13_Create_Planscript_for_Update_Test
Create Planscript for Update Test
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[12]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for update, status : ${Response['status_code']}

# OVF523_PS_TC14_Create_Planscript_for_Delete_Test
Create Planscript for Delete Test
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[13]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for delete, status : ${Response['status_code']}

# OVF523_PS_TC15_Create_Planscript_for_Get_Test
Create Planscript for Get Test
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[14]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript for get, status : ${Response['status_code']}

# OVF523_PS_TC16_Create_Planscript_with_valid_fields_for_Capture
Create Planscript with valid fields for Capture
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[15]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript with capture planType, status : ${Response['status_code']}

# OVF523_PS_TC17_Create_ESXi5_mount_Planscript
Create ESXi 5 mount Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[16]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC18_Create_ESXi5_unpack_state_Planscript
Create ESXi 5 unpack state Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[17]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC19_Create_ESXi5_configure_management_1st_NIC_Planscript
Create ESXi 5 configure management 1st NIC Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[18]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC20_Create_ESXi5_simple_double_management_NIC_Planscript
Create ESXi 5 simple double management NIC Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[19]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC21_Create_ESXi5_set_password_Planscript
Create ESXi 5 set password Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[20]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC22_Create_ESXi5_configure_ssh_Planscript
Create ESXi 5 configure ssh Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[21]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC23_Create_ESXi5_repack_state_Planscript
Create ESXi 5 repack state Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[22]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC24_Create_ESXi5_unmount_Planscript
Create ESXi 5 unmount Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[23]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC25_Create_ESXi5_generalize_host_configuration_Planscript
Create ESXi 5 generalize host configuration Planscript
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[24]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Couldn't create Planscript, status : ${Response['status_code']}

# OVF523_PS_TC26_Create_General_type_planscript_with_custom_attributes
Create General type planscript with custom attributes
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[25]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC27_Create_Capture_type_planscript_with_custom_attributes
Create Capture type planscript with custom attributes
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[26]}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC28_Create_planscript_to_update_custom_attribute_name_and_value
Create planscript to update ca name, value
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[27]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC29_Create_planscript_to_update_with_name_max_characters
Create planscript to update with name max characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[30]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC30_Create_planscript_to_update_with_description_max_characters
Create planscript to update with description max characters
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[31]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC47_Create planscript1 for testing GET public API calls
Create planscript1 for testing GET public API calls
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[32]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC48_Create planscript2 for testing GET public API calls
Create planscript2 for testing GET public API calls
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[33]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC49_Create planscript3 for testing GET public API calls
Create planscript3 for testing GET public API calls
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[34]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC50_Create planscript4 for testing GET public API calls
Create planscript4 for testing GET public API calls
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[35]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC51_Create planscript5 for testing GET public API calls
Create planscript5 for testing GET public API calls
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[36]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Create Planscript return status does not match the expected return status , status : ${Response['status_code']}

#############################################################################################

# OVF523_PS_TC52_Get Planscript by Name
Get Planscript by Name
    ${NAME} =    Get From Dictionary    ${planscript_get[0]}    name
    Log To Console    \Get Plan Script ${NAME}.
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC53_Get Planscript by Content
Get Planscript by Content
    ${content} =    Get From Dictionary    ${planscript_get[1]}   content
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'content'=='${content}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC54_Get Planscript by Description
Get Planscript by Description
    ${description} =    Get From Dictionary    ${planscript_get[2]}    description
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'description'=='${description}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC55_Get Planscript by Plantype
Get Planscript by Plantype
    ${planType} =    Get From Dictionary    ${planscript_get[3]}    planType
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'planType'=='${planType}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC56_Get All Planscripts
Get All Planscripts
    ${Response} =    i3s Api Get Plan Scripts
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC57_Get Planscript using count parameter
Get Planscript using count parameter
    ${count} =    Get From Dictionary    ${planscript_get[5]}    count
    ${Response} =    i3s Api Get Plan Scripts    param=?count=${count}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}
    Should Be Equal as Strings    ${Response['count']}    ${count}    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC58_Get Planscripts using case insensitive filter
Get Planscripts using case insensitive filter
    ${NAME} =    Get From Dictionary    ${planscript_get[0]}    name
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' matches '${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}
    Should Be Equal as Strings    ${Response['count']}    1    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC59_Get Planscripts using not name filter
Get Planscripts using not name filter
    ${NAME} =    Get From Dictionary    ${planscript_get[0]}    name
    ${Response} =    i3s Api Get Plan Scripts    param=?filter=NOT "'name' = '${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}
    ${count}  Set Variable   ${Response['count']}-1
    :FOR  ${X}  IN RANGE  0  ${count}
     \  Dictionary Should Not Contain Value    ${Response['members'][${X}]}    ${NAME}

# OVF523_PS_TC60_Get Planscripts using case sensitive filter
Get Planscripts using case sensitive filter
    ${NAME} =    Get From Dictionary    ${planscript_get[6]}    name
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' smatches '${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}
    Should Be Equal as Strings    ${Response['count']}    1    msg=Planscript didn't return name match planscript

# OVF523_PS_TC61_Get Planscript With Invalid Name
Get Planscript With Invalid Name
    ${NAME}=    Get From Dictionary        ${planscript_get[7]}    name
    ${Response}=    i3s Api Get Plan Scripts    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['count']}    0    msg=Failed to Get Artifact Bundle.

#More GET Calls as per the Public API docs

# OVF523_PS_TC62_Get Planscripts by count lower than available
Get Planscripts by count lower than available
    Set Log Level  TRACE
    ${Response} =    i3s Api Get Plan Scripts    param=?count=25
    Should Be Equal as Strings    ${Response['count']}    25    msg=Failed to Get Planscript.

# OVF523_PS_TC63_Get Planscripts count higher than available
Get Planscripts count higher than available
    ${Response} =    i3s Api Get Plan Scripts    param=?count=500
    Should Be Equal as Strings    ${Response['count']}    25    msg=Failed to Get Planscript.

# OVF523_PS_TC64_Get Planscript By Ascending Order
Get Planscript By Ascending Order
    ${Response} =    i3s Api Get Plan Scripts
    ${pslist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${pslist}    ${Response['members'][${PSCNT}]['name']}
    Sort List    ${pslist}
    ${Response} =    i3s Api Get Plan Scripts    param=?sort=name:asc
    ${sortedpslist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \       append to list    ${sortedpslist}    ${Response['members'][${PSCNT1}]['name']}
    Lists Should Be Equal    ${pslist}    ${sortedpslist}   msg="lists are not equal"

# OVF523_PS_TC65_Get Planscript By Descending Order
Get Planscript By Descending Order
    ${Response} =    i3s Api Get Plan Scripts
    ${pslist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${pslist}    ${Response['members'][${PSCNT}]['name']}
    Sort List    ${pslist}
    Reverse List    ${pslist}
    ${Response} =    i3s Api Get Plan Scripts    param=?sort=name:desc
    ${sortedpslist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \     append to list    ${sortedpslist}    ${Response['members'][${PSCNT1}]['name']}
    Lists Should Be Equal    ${pslist}    ${sortedpslist}    msg="lists are not equal"

# OVF523_PS_TC66_Get Planscript Using Smatch Order
Get Planscript Using Smatch Order
    #   Usage:    https://15.212.171.216/rest/plan-scripts?filter="'name' smatches 'CL%25'"
    #    Output:   "name": "CL RHEL     .",
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' smatches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC67_Get Planscript Using Match Order
Get Planscript Using Match Order
    #   Usage:    https://15.212.171.216/rest/plan-scripts?filter="'name' matches 'CL%25'"
    #   Output:   "name": "CL RHEL     ..",
    #             "name": "cl artifact...",
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' matches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC68_Get Planscript ending with capital letters using Sregex Order
Get Planscript ending with capital letters using Sregex Order
    #  Usage:    https://15.212.171.216/rest/plan-scripts?filter='name' sregex '[A-Z]$'
    #  Output:    "name": "xxxxGET"
    ${NAME} =    Get From Dictionary    ${planscript[18]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[19]}    name
    ${NAME2} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME3} =    Get From Dictionary    ${planscript[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' sregex '[A-Z]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC69_Get Planscripts starting with small letter cl Using Sregex
Get Planscripts starting with small letter cl Using Sregex
    #   Usage:    https://15.212.171.216/rest/plan-scripts?filter='name' sregex 'cl'
    #    Output:    cl artifact_for_GET
    ${NAME} =    Get From Dictionary    ${planscript[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' sregex 'cl'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC70_Get Planscripts starting with capital letter CL using Sregex
Get Planscripts starting with capital letter CL using Sregex
    #  Usage:   https://15.212.171.216/rest/plan-scripts?filter='name' sregex 'CL'
    #  Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' sregex 'CL'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC71_Get Planscripts starting with capital letters using Sregex
Get Planscripts starting with capital letters using Sregex
    #  Usage:   https://15.212.171.216/rest/plan-scripts?filter='name' sregex '^[A-Z]'
    #  Output:   "name": "RHEL-7.2-planscript",
    #  Output:   "name": "CL RHEL API_GET",
    #  Output:   "name": "EsxiPlanScript",
    #  Output:   "name": "Planscript_valid_deploy"
    #  Output:   "name": "HPE - ESXi 5 - **"
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[3]}    name
    ${NAME2} =    Get From Dictionary    ${planscript[16]}    name
    ${NAME3} =    Get From Dictionary    ${planscript[17]}    name
    ${NAME4} =    Get From Dictionary    ${planscript[18]}    name
    ${NAME5} =    Get From Dictionary    ${planscript[19]}    name
    ${NAME6} =    Get From Dictionary    ${planscript[20]}    name
    ${NAME7} =    Get From Dictionary    ${planscript[21]}    name
    ${NAME8} =    Get From Dictionary    ${planscript[22]}    name
    ${NAME9} =    Get From Dictionary    ${planscript[23]}    name
    ${NAME10} =    Get From Dictionary    ${planscript[24]}    name
    ${NAME11} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME12} =    Get From Dictionary    ${planscript[34]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Append To List    ${baseList}    ${NAME11}
    Append To List    ${baseList}    ${NAME12}    
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' sregex '^[A-Z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_PS_TC72_Get Planscript starting with small letters using Sregex
Get Planscript starting with small letters using Sregex
    #  Sregex is case sensitive
    #  Usage:   https://15.212.171.216/rest/plan-scripts?filter='name' sregex '^[a-z]'
    #  Output:   "name": <will display all planscripts starting with small charaters>
    ${NAME} =    Get From Dictionary    ${planscript[8]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[10]}    name
    ${NAME2} =    Get From Dictionary    ${planscript[12]}    name
    ${NAME3} =    Get From Dictionary    ${planscript[13]}    name
    ${NAME4} =    Get From Dictionary    ${planscript[14]}    name
    ${NAME5} =    Get From Dictionary    ${planscript[15]}    name
    ${NAME6} =    Get From Dictionary    ${planscript[27]}    name
    ${NAME7} =    Get From Dictionary    ${planscript[30]}    name
    ${NAME8} =    Get From Dictionary    ${planscript[31]}    name
    ${NAME9} =    Get From Dictionary    ${planscript[33]}    name
    ${NAME10} =    Get From Dictionary    ${planscript[36]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' sregex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_PS_TC73_Get Planscripts starting with any character using Regex
Get Planscripts starting with any character using Regex
    #  Regex is not case sensitive, will display all planscripts starting with alphabets
    #  Usage:    https://15.212.171.216/rest/plan-scripts?filter='name' regex '^[a-z]'
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[3]}    name
    ${NAME2} =    Get From Dictionary    ${planscript[8]}    name
    ${NAME3} =    Get From Dictionary    ${planscript[10]}    name
    ${NAME4} =    Get From Dictionary    ${planscript[12]}    name
    ${NAME5} =    Get From Dictionary    ${planscript[13]}    name
    ${NAME6} =    Get From Dictionary    ${planscript[14]}    name
    ${NAME7} =    Get From Dictionary    ${planscript[15]}    name
    ${NAME8} =    Get From Dictionary    ${planscript[16]}    name
    ${NAME9} =    Get From Dictionary    ${planscript[17]}    name
    ${NAME10} =    Get From Dictionary    ${planscript[18]}    name
    ${NAME11} =    Get From Dictionary    ${planscript[19]}    name
    ${NAME12} =    Get From Dictionary    ${planscript[20]}    name
    ${NAME13} =    Get From Dictionary    ${planscript[21]}    name
    ${NAME14} =    Get From Dictionary    ${planscript[22]}    name
    ${NAME15} =    Get From Dictionary    ${planscript[23]}    name
    ${NAME16} =    Get From Dictionary    ${planscript[24]}    name
    ${NAME17} =    Get From Dictionary    ${planscript[27]}    name
    ${NAME18} =    Get From Dictionary    ${planscript[30]}    name
    ${NAME19} =    Get From Dictionary    ${planscript[31]}    name
    ${NAME20} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME21} =    Get From Dictionary    ${planscript[33]}    name
    ${NAME22} =    Get From Dictionary    ${planscript[34]}    name
    ${NAME23} =    Get From Dictionary    ${planscript[36]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Append To List    ${baseList}    ${NAME11}
    Append To List    ${baseList}    ${NAME12}
    Append To List    ${baseList}    ${NAME13}
    Append To List    ${baseList}    ${NAME14}
    Append To List    ${baseList}    ${NAME15}
    Append To List    ${baseList}    ${NAME16}
    Append To List    ${baseList}    ${NAME17}
    Append To List    ${baseList}    ${NAME18}
    Append To List    ${baseList}    ${NAME19}
    Append To List    ${baseList}    ${NAME20}
    Append To List    ${baseList}    ${NAME21}
    Append To List    ${baseList}    ${NAME22}
    Append To List    ${baseList}    ${NAME23}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' regex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC74_Get Planscript for names ending With numbers using Regex
Get Planscript for names ending With numbers using Regex
    #    Usage:    https://15.212.171.216/rest/plan-scripts?filter='name' regex '[0-9]$'
    #    Output:   "name": "planscript_456"
    ${NAME} =    Get From Dictionary    ${planscript[36]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' regex '[0-9]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_PS_TC75_Get Planscript for names starting with numbers using Regex
Get Planscript for names starting with numbers using Regex
    #    Usage:    https://15.212.171.216/rest/plan-scripts?filter='name' regex '^[0-9]'
    #    Output:   "name": "123_planscript"
    ${NAME} =    Get From Dictionary    ${planscript[35]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter='name' regex '^[0-9]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC76_Get Planscript for Regex OR - Get the list of names that are ORed in the GET call usage
Get Planscript for Regex OR - Get the list of names that are ORed in the GET call usage
    #    Regex is not case sensitive
    #    Usage:    https://15.212.171.216/rest/plan-scripts?filter="'name' regex 'RHEL|CL'"
    #    Output:   "name": "RHEL-7.2-planscript",
    #    Output:   "name": "CL RHEL API_GET",
    #    Output:   "name":  "cl artifact_for_GET"
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[33]}    name
    ${NAME2} =    Get From Dictionary    ${planscript[34]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' regex 'RHEL|CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC77_Get Planscript starting with a given character/character's using Regex
Get Planscript starting with a given character/character's using Regex
    #    Usage:    https://15.212.171.216/rest/plan-scripts?filter="'name' regex '^CL'"
    #    Output:    "name": "CL RHEL API_GET",
    #    Output:    "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${NAME1} =    Get From Dictionary    ${planscript[33]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' regex '^CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_PS_TC78_Get Planscript ending with a particular word using Regex
Get Planscript ending with a particular word using Regex
    #   Usage:   https://15.212.171.216/rest/plan-scripts?filter="'name' regex 'API_GET$'"
    #   Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${planscript[32]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3s Api Get Plan Scripts    param=?filter="'name' regex 'API_GET$'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${PSCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${PSCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

##############################################################################################################

# OVF523_PS_TC31_Update_planscript_by_content
Update Planscript by content
    ${NAME} =    Get From Dictionary    ${planscript[12]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[0]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC32_Update_planscript_by_hpProvided
Update Planscript by hpProvided
    ${NAME} =    Get From Dictionary     ${planscript[0]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[1]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC33_Update_planscript_by_PlanType
Update Planscript by PlanType
    ${NAME} =    Get From Dictionary    ${planscript[12]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[2]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC34_Update_planscript_by_Description
Update Planscript by Description
    ${NAME} =    Get From Dictionary    ${planscript[12]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[3]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC35_Update_planscript_by_Name
Update Planscript by Name
    ${NAME} =    Get From Dictionary    ${planscript[0]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[4]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Get Planscript return status does not match the expected return status , status : ${Response['status_code']}

# OVF523_PS_TC36_Update_planscript_custom_attribute_value
Update Planscript custom attribute value
    ${NAME} =    Get From Dictionary    ${planscript[27]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[5]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Couldn't update Planscript by name, status : ${Response['status_code']}

# OVF523_PS_TC37_Update_planscript_custom_attribute_name_and_value
Update Planscript custom attribute name, value
    ${NAME} =    Get From Dictionary    ${planscript[27]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[6]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Couldn't update Planscript by name, status : ${Response['status_code']}

# OVF523_PS_TC38_Update_read-only_planscript
Update read-only Planscript
    ${NAME} =    Get From Dictionary    ${planscript_update[7]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[7]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    403    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC39_Update_planscript_name_to_have_255_characters
Update Planscript name to have 255 characters
    ${NAME} =    Get From Dictionary    ${planscript[30]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[10]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC40_Update_planscript_description_to_have_1000_characters
Update Planscript description to have 1000 characters
    ${NAME} =    Get From Dictionary    ${planscript[31]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[14]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC41_Update_planscript_name_to_have_duplicate_name
Update Planscript name to have duplicate name
    ${NAME} =    Get From Dictionary    ${planscript[14]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[12]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC42_Update_planscript_name_to_have_name_with_invalid_characters
Update Planscript name to have name with invalid characters
    ${NAME} =    Get From Dictionary    ${planscript[13]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[13]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC43_Update_General_planscript_to_add_custom_attributes
Update General Planscript to add custom attributes
    ${NAME} =    Get From Dictionary    ${planscript[23]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[15]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC44_Update_Capture_planscript_to_add_custom_attributes
Update Capture Planscript to add custom attributes
    ${NAME} =    Get From Dictionary    ${planscript[15]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[16]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC45_Update_planscript_to_change_all_fields_blank
Update Planscript to change all fields blank
    ${NAME} =    Get From Dictionary    ${planscript[23]}    name
    ${ps_uri} =    Get PlanScript Uri    ${NAME}
    ${Response} =    i3s Api Update Plan Scripts    ${planscript_update[17]}    ${ps_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=update Planscript return message doesn't match expected status, status : ${Response['status_code']}

# OVF523_PS_TC46_Delete_Planscript
Delete Planscript1
    ${NAME}=    Get From Dictionary     ${planscript_delete[0]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript2
    ${NAME}=    Get From Dictionary     ${planscript_delete[1]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript3
    ${NAME}=    Get From Dictionary     ${planscript_delete[2]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript4
    ${NAME}=    Get From Dictionary     ${planscript_delete[3]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript5
    ${NAME}=    Get From Dictionary     ${planscript_delete[4]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript6
    ${NAME}=    Get From Dictionary     ${planscript_delete[5]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript7
    ${NAME}=    Get From Dictionary     ${planscript_delete[6]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript8
    ${NAME}=    Get From Dictionary     ${planscript_delete[7]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript9
    ${NAME}=    Get From Dictionary     ${planscript_delete[8]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript10
    ${NAME}=    Get From Dictionary     ${planscript_delete[9]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript11
    ${NAME}=    Get From Dictionary     ${planscript_delete[10]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript12
    ${NAME}=    Get From Dictionary     ${planscript_delete[11]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript13
    ${NAME}=    Get From Dictionary     ${planscript_delete[12]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript14
    ${NAME}=    Get From Dictionary     ${planscript_delete[13]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript15
    ${NAME}=    Get From Dictionary     ${planscript_delete[14]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip16
    ${NAME}=    Get From Dictionary     ${planscript_delete[15]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip17
    ${NAME}=    Get From Dictionary     ${planscript_delete[16]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip18
    ${NAME}=    Get From Dictionary     ${planscript_delete[17]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip19
    ${NAME}=    Get From Dictionary     ${planscript_delete[18]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip20
    ${NAME}=    Get From Dictionary     ${planscript_delete[19]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip21
    ${NAME}=    Get From Dictionary     ${planscript_delete[20]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip22
    ${NAME}=    Get From Dictionary     ${planscript_delete[21]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip23
    ${NAME}=    Get From Dictionary     ${planscript_delete[22]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip24
    ${NAME}=    Get From Dictionary     ${planscript_delete[23]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscrip25
    ${NAME}=    Get From Dictionary     ${planscript_delete[24]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

#-------------------- Build the required JSON body-----------------------------------
*** Keywords ***
Get PlanScript Uri
    [Arguments]    ${Name}
    ${resp} =    i3s Get Planscript    param=?filter="'name'=='${NAME}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}
