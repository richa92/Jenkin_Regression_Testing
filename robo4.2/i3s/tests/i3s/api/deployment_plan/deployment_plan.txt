*** Settings ***
Documentation        Feature Test: Deployment Plan


Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library
Library                BuiltIn
Library                FusionLibrary
Library                RoboGalaxyLibrary
Library                i3SLibrary

Variables                /robo4.2/i3s/tests/testdata/i3s_QA_testdata.py
Variables                data_variables_dp.py

Resource                ../../../../../fusion/tests/resource/fusion_api_all_resource_files.txt



*** Variables ***
${GI_SLEEP}     300

*** Test Cases ***

Login to Appliance
	Set log level	 TRACE
	[Tags]    critical    REG    PL-Test1
    ${admin_credentials} =    Create Dictionary   userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}

Get i3s Appliance Cluster IP and Login
	[Tags]    critical    REG    PL-Test2
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_IP} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    Log to console and logfile    ${i3S_IP}
    # Login to i3s appliance
    ${admin_credentials}=    Create Dictionary    userName=${DEFAULT_USER}    password=${DEFAULT_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_IP}    ${SessionId}


############################################################################################################################################################

# Initial Setup

Add Golden Image 1
    ${NAME}=    Get From Dictionary     ${goldenimage_add[0]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[0]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[0]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

Add Golden Image 2
    ${NAME}=    Get From Dictionary     ${goldenimage_add[1]}    name
    ${DESC}=    Get From Dictionary     ${goldenimage_add[1]}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage_add[1]}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}
	
Create Plan Script for MOUNT
	[Tags]    critical    REG    PL-Test3
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script for DEPLOY
	[Tags]    critical    REG    PL-Test4
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script for UMOUNT
	[Tags]    critical    REG    PL-Test5
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script having Multiple CA
	[Tags]    critical    REG    PL-Test6
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Plan Script having Single CA
	[Tags]    critical    REG    PL-Test7
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

Create Build Plan having Multiple CA
	[Tags]    critical    REG    PL-Test8
	Set log level	 TRACE
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan_create[0]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Build Plan having Single CA
    Log to console    Create OS Build Plan
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan_create[1]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

Create Build Plan having Multiple CA-For Update Test
    Log to console    Create OS Build Plan
    Log to console    Create OS Build Plan
    ${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan_create[2]}
    ${Response}=    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201        msg=Failed to Create Build Plan

############################################################################################################################################################

# OVF523_DP_TC01_Create Deployment Plan Valid DP with multiple CA
Create Deployment Plan Valid DP with multiple CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[0]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC02_Create Deployment Plan Valid DP with Single CA
Create Deployment Plan Valid DP with Single CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[1]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC03_Create Deployment Plan Deployment Plan with all the valid fields and name having 255 characters
Create Deployment Plan Deployment Plan with all the valid fields and name having 255 characters
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[2]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC04_Create Deployment Plan Deployment Plan with all the valid fields and name having more 255 characters
Create Deployment Plan Deployment Plan with all the valid fields and name having more 255 characters
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[3]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC05_Create Deployment Plan Valid DP having description field containing 1000 characters
Create Deployment Plan Valid DP having description field containing 1000 characters
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[4]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC06_Create Deployment Plan Valid DP having description field containing more than 1000 characters
Create Deployment Plan Valid DP having description field containing more than 1000 characters
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[5]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC07_Create Deployment Plan No Name, Desc, GI, BP, CA
Create Deployment Plan No Name, Desc, GI, BP, CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[6]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC08_Create Deployment Plan Valid DP with multiple CA for Update test- Change in Name
Create Deployment Plan Valid DP with multiple CA for Update test- Change in Name
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[7]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC09_Create Deployment Plan Valid DP with multiple CA for Update test- Change in Name and Description
Create Deployment Plan Valid DP with multiple CA for Update test- Change in Name and Description
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[8]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC10_Create Deployment Plan Blank GI BP Name Desc but valid CA
Create Deployment Plan Blank GI BP Name Desc but valid CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[9]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC11_Create Deployment Plan Valid GI BP Name Desc but blank CA value
Create Deployment Plan Valid GI BP Name Desc but blank CA value
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[10]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC12_Create Deployment Plan Valid GI BP Name Desc but NO CA
Create Deployment Plan Valid GI BP Name Desc but NO CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[11]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC13_Create Deployment Plan Valid Name Desc GI CA but blank BP
Create Deployment Plan Valid Name Desc GI CA but blank BP
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[12]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC14_Create Deployment Plan Valid Name Desc CA and BP but blank GI
Create Deployment Plan Valid Name Desc CA and BP but blank GI
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[13]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC15_Create Deployment Plan Valid GI BP Name Desc and CA but duplicate name
Create Deployment Plan Valid GI BP Name Desc and CA but duplicate name
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[14]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC16_Create Deployment Plan Deployment Plan containing special characters
Create Deployment Plan Deployment Plan containing special characters
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[15]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC17_Create Deployment Plan No Name Desc GI BP except CA
Create Deployment Plan No Name Desc GI BP except CA
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[16]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Create DP return status does not match with the expected return status

# OVF523_DP_TC18_Create Deployment Plan DP having multiple CA and hpProvided set to True
Create Deployment Plan DP having multiple CA and hpProvided set to True
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[17]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC19_Create Deployment Plan DP having multiple CA and all CA visible set to True
Create Deployment Plan DP having multiple CA and all CA visible set to True
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[18]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC20_Create Deployment Plan DP having multiple CA and some of the CA visible set to True
Create Deployment Plan DP having multiple CA and some of the CA visible set to True
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[19]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC21_Create Deployment Plan DP having multiple CA and all CA are not editable
Create Deployment Plan DP having multiple CA and all CA are not editable
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[20]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC22_Create Deployment Plan1 for testing GET public API calls
Create Deployment Plan1 for testing GET public API calls
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[21]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC23_Create Deployment Plan2 for testing GET public API calls
Create Deployment Plan2 for testing GET public API calls
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[22]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC24_Create Deployment Plan3 for testing GET public API calls
Create Deployment Plan3 for testing GET public API calls
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[23]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC25_Create Deployment Plan4 for testing GET public API calls
Create Deployment Plan4 for testing GET public API calls
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[24]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# OVF523_DP_TC26_Create Deployment Plan5 for testing GET public API calls
Create Deployment Plan5 for testing GET public API calls
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_create[25]}
    ${Response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

############################################################################################################################################################

#OVF523_DP_TC27_Get Deploymentplan by Existing DP Name
Get Deploymentplan by Existing DP Name
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[0]}    name
    Log To Console    \nGet Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Get Deploymentplan    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Get DeploymentPlan
    Should Be Equal as Strings    ${Response['count']}    1    msg=Failed to Get DeploymentPlan by Name

# OVF523_DP_TC28_Get Deploymentplan by Non-existing DP Name
Get Deploymentplan by Non-existing DP Name
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[9]}    name
    Log To Console    \nGet Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Get Deploymentplan    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Get DeploymentPlan
    Should Be Equal as Strings    ${Response['count']}    0    msg=Failed to Get DeploymentPlan by Name

#More GET Calls as per the Public API docs
# OVF523_DP_TC29_Get Deploymentplans by count lower than available
Get Deploymentplans by count lower than available
    ${Response} =    i3S Api Get Deploymentplan    param=?count=5
    Should Be Equal as Strings    ${Response['count']}    5    msg=Failed to Get Deploymentplan.

# OVF523_DP_TC30_Get Deploymentplans count higher than available
Get Deploymentplans count higher than available
    ${Response} =    i3S Api Get Deploymentplan    param=?count=500
    Should Be Equal as Strings    ${Response['count']}    16    msg=Failed to Get Deploymentplan.

# OVF523_DP_TC31_Get Deploymentplan By Ascending Order
Get Deploymentplan By Ascending Order
    ${Response} =    i3S Api Get Deploymentplan
    ${dplist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${dplist}    ${Response['members'][${DPCNT}]['name']}
    Sort List    ${dplist}
    ${Response} =    i3S Api Get Deploymentplan    param=?sort=name:asc
    ${sorteddplist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \       append to list    ${sorteddplist}    ${Response['members'][${DPCNT1}]['name']}
    Lists Should Be Equal    ${dplist}    ${sorteddplist}   msg="lists are not equal"

# OVF523_DP_TC32_Get Deploymentplan By Descending Order
Get Deploymentplan By Descending Order
    ${Response} =    i3S Api Get Deploymentplan
    ${dplist} =    Create List
    ${cnt} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT}    IN RANGE    0    ${cnt}
    \    append to list    ${dplist}    ${Response['members'][${DPCNT}]['name']}
    Sort List    ${dplist}
    Reverse List    ${dplist}
    ${Response} =    i3S Api Get Deploymentplan    param=?sort=name:desc
    ${sorteddplist} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \     append to list    ${sorteddplist}    ${Response['members'][${DPCNT1}]['name']}
    Lists Should Be Equal    ${dplist}    ${sorteddplist}    msg="lists are not equal"

# OVF523_DP_TC33_Get Deploymentplan Using Smatch Order
Get Deploymentplan Using Smatch Order
    #   Usage:    https://15.212.171.216/rest/deployment-plans?filter="'name' smatches 'CL%25'"
    #    Output:   "name": "CL RHEL     .",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter="'name' smatches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC34_Get Deploymentplan Using Match Order
Get Deploymentplan Using Match Order
    #   Usage:    https://15.212.171.216/rest/deployment-plans?filter="'name' matches 'CL%25'"
    #   Output:   "name": "CL RHEL     ..",
    #             "name": "cl artifact...",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter="'name' matches 'CL%25'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC35_Get Deploymentplan ending with capital letters Using Sregex Order
Get Deploymentplan ending with capital letters Using Sregex Order
    #  Usage:    https://15.212.171.216/rest/deployment-plans?filter='name' sregex '[A-Z]$'
    #  Output:    "name": "xxxxGET"
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[0]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[1]}    name
    ${NAME2} =    Get From Dictionary    ${deploymentplan_create[13]}    name
    ${NAME3} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME4} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' sregex '[A-Z]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC36_Get Deploymentplans starting with small letter cl Using Sregex
Get Deploymentplans starting with small letter cl Using Sregex
    #   Usage:    https://15.212.171.216/rest/deployment-plans?filter='name' sregex 'cl'
    #    Output:    cl artifact_for_GET
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' sregex 'cl'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC37_Get Deploymentplans starting with capital letter CL using Sregex
Get Deploymentplans starting with capital letter CL using Sregex
    #  Usage:   https://15.212.171.216/rest/deployment-plans?filter='name' sregex 'CL'
    #  Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' sregex 'CL'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC38_Get Deploymentplans starting with capital letters using Sregex
Get Deploymentplans starting with capital letters using Sregex
    #  Usage:   https://15.212.171.216/rest/deployment-plans?filter='name' sregex '^[A-Z]'
    #  Output:   "name": "RHEL-7.2-Deploymentplan",
    #  Output:   "name": "CL RHEL API_GET",
    #  Output:   "name": "Valid DP *"
    #  Output:   "name": "DP having *"
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[0]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[1]}    name
    ${NAME2} =    Get From Dictionary    ${deploymentplan_create[2]}    name
    ${NAME3} =    Get From Dictionary    ${deploymentplan_create[4]}    name
    ${NAME4} =    Get From Dictionary    ${deploymentplan_create[7]}    name
    ${NAME5} =    Get From Dictionary    ${deploymentplan_create[8]}    name
    ${NAME6} =    Get From Dictionary    ${deploymentplan_create[13]}    name
    ${NAME7} =    Get From Dictionary    ${deploymentplan_create[17]}    name
    ${NAME8} =    Get From Dictionary    ${deploymentplan_create[18]}    name
    ${NAME9} =    Get From Dictionary    ${deploymentplan_create[19]}    name
    ${NAME10} =    Get From Dictionary    ${deploymentplan_create[20]}    name
    ${NAME11} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME12} =    Get From Dictionary    ${deploymentplan_create[23]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Append To List    ${baseList}    ${NAME11}
    Append To List    ${baseList}    ${NAME12}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' sregex '^[A-Z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_DP_TC39_Get Deploymentplan starting with small letters using Sregex
Get Deploymentplan starting with small letters using Sregex
    #  Sregex is case sensitive
    #  Usage:   https://15.212.171.216/rest/deployment-plans?filter='name' sregex '^[a-z]'
    #  Output:   "name": <will display all Deploymentplans starting with small charaters>
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[25]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' sregex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_DP_TC40_Get Deploymentplans starting with any character using Regex
Get Deploymentplans starting with any character using Regex
    #  Regex is not case sensitive, will display all Deploymentplans starting with alphabets
    #  Usage:    https://15.212.171.216/rest/deployment-plans?filter='name' regex '^[a-z]'
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[0]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[1]}    name
    ${NAME2} =    Get From Dictionary    ${deploymentplan_create[2]}    name
    ${NAME3} =    Get From Dictionary    ${deploymentplan_create[4]}    name
    ${NAME4} =    Get From Dictionary    ${deploymentplan_create[7]}    name
    ${NAME5} =    Get From Dictionary    ${deploymentplan_create[8]}    name
    ${NAME6} =    Get From Dictionary    ${deploymentplan_create[13]}    name
    ${NAME7} =    Get From Dictionary    ${deploymentplan_create[17]}    name
    ${NAME8} =    Get From Dictionary    ${deploymentplan_create[18]}    name
    ${NAME9} =    Get From Dictionary    ${deploymentplan_create[19]}    name
    ${NAME10} =    Get From Dictionary    ${deploymentplan_create[20]}    name
    ${NAME11} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME12} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${NAME13} =    Get From Dictionary    ${deploymentplan_create[23]}    name
    ${NAME14} =    Get From Dictionary    ${deploymentplan_create[25]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Append To List    ${baseList}    ${NAME3}
    Append To List    ${baseList}    ${NAME4}
    Append To List    ${baseList}    ${NAME5}
    Append To List    ${baseList}    ${NAME6}
    Append To List    ${baseList}    ${NAME7}
    Append To List    ${baseList}    ${NAME8}
    Append To List    ${baseList}    ${NAME9}
    Append To List    ${baseList}    ${NAME10}
    Append To List    ${baseList}    ${NAME11}
    Append To List    ${baseList}    ${NAME12}
    Append To List    ${baseList}    ${NAME13}
    Append To List    ${baseList}    ${NAME14}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' regex '^[a-z]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC41_Get Deploymentplan for names ending With numbers using Regex
Get Deploymentplan for names ending With numbers using Regex
    #    Usage:    https://15.212.171.216/rest/deployment-plans?filter='name' regex '[0-9]$'
    #    Output:   "name": "Deploymentplan_456"
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[25]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' regex '[0-9]$'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}   msg="lists are not equal"

# OVF523_DP_TC42_Get Deploymentplan for names starting with numbers using Regex
Get Deploymentplan for names starting with numbers using Regex
    #    Usage:    https://15.212.171.216/rest/deployment-plans?filter='name' regex '^[0-9]'
    #    Output:   "name": "123_Deploymentplan"
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[24]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter='name' regex '^[0-9]'
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC43_Get Deploymentplan for Regex OR - Get the list of names that are ORed in the GET call usage
Get Deploymentplan for Regex OR - Get the list of names that are ORed in the GET call usage
    #    Usage:    https://15.212.171.216/rest/deployment-plans?filter="'name' regex 'RHEL|CL'"
    #    Output:   "name": "RHEL-7.2-Deploymentplan",
    #    Output:   "name": "CL RHEL API_GET",
    #    Output:   "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${NAME2} =    Get From Dictionary    ${deploymentplan_create[23]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Append To List    ${baseList}    ${NAME2}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter="'name' regex 'RHEL|CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC44_Get Deploymentplan starting with a given character/character's using Regex
Get Deploymentplan starting with a given character/character's using Regex
    #    Usage:    https://15.212.171.216/rest/deployment-plans?filter="'name' regex '^CL'"
    #    Output:    "name": "CL RHEL API_GET",
    #    Output:    "name": "cl artifact_for_GET",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${NAME1} =    Get From Dictionary    ${deploymentplan_create[22]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Append To List    ${baseList}    ${NAME1}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter="'name' regex '^CL'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

# OVF523_DP_TC45_Get Deploymentplan ending with a particular word using Regex
Get Deploymentplan ending with a particular word using Regex
    #   Usage:   https://15.212.171.216/rest/deployment-plans?filter="'name' regex 'API_GET$'"
    #   Output:   "name": "CL RHEL API_GET",
    ${NAME} =    Get From Dictionary    ${deploymentplan_create[21]}    name
    ${baseList} =    Create List
    Append To List    ${baseList}    ${NAME}
    Sort List    ${baseList}
    ${Response} =    i3S Api Get Deploymentplan    param=?filter="'name' regex 'API_GET$'"
    ${respList} =    Create List
    ${cnt1} =    Convert To Integer    ${Response['count']}
    :FOR    ${DPCNT1}    IN RANGE    0    ${cnt1}
    \    append to list    ${respList}    ${Response['members'][${DPCNT1}]['name']}
    Sort List    ${respList}
    Lists Should Be Equal    ${baseList}    ${respList}    msg="lists are not equal"

############################################################################################################################################################

# OVF523_DP_TC46_Update Deploymentplan Change In Name And Description
Update Deploymentplan Change In Name And Description
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[4]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[1]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Deploymentplan

# OVF523_DP_TC47_Update Deploymentplan Change In Name
Update Deploymentplan Change In Name
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[5]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[0]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Deploymentplan

# OVF523_DP_TC48_Update Deploymentplan Change In CA
Update Deploymentplan Change In CA
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[0]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[2]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Deploymentplan

# OVF523_DP_TC49_Update Deploymentplan Change In GI
Update Deploymentplan Change In GI
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[6]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[3]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Deploymentplan

# OVF523_DP_TC50_Update Deploymentplan Change In BP
Update Deploymentplan Change In BP
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[7]}    name
    Log To Console    \nDeploymentplan which will be updated is:    \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[4]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Update Deploymentplan

#OVF523_DP_TC51_Update Deploymentplan Edit a Read-Only Deploymentplan
Update Deploymentplan Edit a Read-Only Deploymentplan
    ${NAME} =    Get From Dictionary    ${deploymentplan_get[8]}    name
    Log To Console    \nDeploymentplan which will be updated is: \t${NAME}
    ${dp_uri} =    Get Deploymentplan Uri    ${NAME}
    Log To Console    \nDeployment URI is:    \t${dp_uri}
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan_update[4]}
    ${Response} =    i3s Api Update Deploymentplan    ${dp_body}  ${dp_uri}
    Should Be Equal as Strings    ${Response['status_code']}    400    msg=Failed to Update Deploymentplan

############################################################################################################################################################

#OVF523_DP_TC52_Delete Deploymentplan
Delete Deploymentplan 1
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[0]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 2
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[1]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 3
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[2]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 4
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[3]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 5
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[4]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 6
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[5]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 7
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[6]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 8
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[7]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 9
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[8]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 10
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[9]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 11
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[10]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 12
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[11]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 13
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[12]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 14
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[13]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 15
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[14]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

Delete Deploymentplan 16
    ${NAME} =    Get From Dictionary    ${deploymentplan_delete[15]}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan

############################################################################################################################################################

# Cleanup for the initial setup

Delete Build Plan having Multiple CA
    ${NAME}=    Get From Dictionary        ${buildplan_del[0]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan having Single CA
    ${NAME}=    Get From Dictionary        ${buildplan_del[1]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete Build Plan having Multiple CA-Created For Update test
    ${NAME}=    Get From Dictionary        ${buildplan_del[2]}    name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan

Delete MOUNT Planscript
    ${NAME} =    Get From Dictionary    ${planscript_delete[0]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete DEPLOY Planscript
    ${NAME} =    Get From Dictionary    ${planscript_delete[1]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete UMOUNT Planscript3
    ${NAME} =    Get From Dictionary    ${planscript_delete[2]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete Planscript having Multiple CA
    ${NAME} =    Get From Dictionary    ${planscript_delete[3]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete Planscript having Single CA
    ${NAME} =    Get From Dictionary    ${planscript_delete[4]}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage

Delete Golden Image 1
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[0]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

Delete Golden Image 2
    ${NAME}=    Get From Dictionary    ${goldenimage_delete[1]}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

############################################################################################################################################################

*** Keywords ***

Get Deploymentplan Uri
    [Arguments]    ${dpuri}
    ${resp} =    i3s Get Deploymentplan    param=?filter="'name'=='${dpuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

GET PLANSCRIPT URI
    [Arguments]    ${psuri}
    ${resp} =    I3S GET PLANSCRIPT    param=?filter="'name'=='${psuri}'"
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Goldenimage URI
    [Arguments]    ${giuri}
    ${resp} =     i3s Get Goldenimage        param=?filter="'name'=='${giuri}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

Get Buildplan URI
    [Arguments]        ${bpuri}
    ${resp} =     i3s Get Buildplan        param=?filter="'name'=='${bpuri}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    [Return]    ${uri}

Create Deploymentplan Payload
    [Arguments]    ${deploymentplan_create}
    ${dp_body} =    Copy Dictionary    ${deploymentplan_create}

    #Buildplan URI
    ${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
    Log to console and logfile        \nBP Name is:\t ${bp_name}
    ${bp_uri} =    Run Keyword If  '${bp_name}' is not ''        Get Buildplan URI    ${bp_name}
    Log to console and logfile        \nBP URI is:\t ${bp_uri}
    #${bp_uri} =    Get Buildplan URI    ${bp_name}
    Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

    #Goldenimage URI
    ${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
    Log to console and logfile        \nGI Name is:\t ${gi_name}
    ${gi_uri} =    Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
    Log to console and logfile        \nGI URI is:\t ${gi_uri}
    #${gi_uri} =    Get Goldenimage URI    ${gi_name}
    Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
    [Return]    ${dp_body}

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
    ${Retries}    Convert To Integer    30
    ${Resp}=    i3s API Wait For Task To Complete    ${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Resp}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
        ...    Log    Errors encountered while creating GI    level=WARN
    Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If    '${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        Log to console    ${GV_Response}
        Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    Golden volume created successfully
        Run Keyword If    '${GV_Response['members'][0]['status']}' != 'OK'
            ...    Log To Console    Golden volume creation failed to get created for the goldenimage

CREATE BUILD PLAN PAYLOAD
    [Arguments]    ${buildplan_create}
    ${bp_body} =    Copy Dictionary  ${buildplan_create}
    #planscript URI
    ${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
    ${mx} =  Get Length  ${ps_body}
    Log To Console    ${mx}

    :FOR    ${NUM}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
    \    ${uri} =    GET PLANSCRIPT URI    ${psuri}
    \    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
    \    Log to console     ${uri}
    [Return]    ${bp_body}
