*** Settings ***
Documentation		Feature Test: CHO
...
	
Resource            ../../../../fusion/tests/resource/fusion_api_all_resource_files.txt

Library				Collections
Library             json
Library				OperatingSystem
Library		        Selenium2Library 
Library				BuiltIn
Library				FusionLibrary
Library				RoboGalaxyLibrary
Library				i3SLibrary

Variables   		../../testdata/i3s_QA_testdata.py
Variables 		    CHO-data_variables_ME.py



*** Variables ***

${VAL_DELETE}				<Response [204]>
${POTASH}					Virtual Connect SE 40Gb F8 Module for Synergy
${CHLORIDE20}				Synergy 20Gb Interconnect Link Module
${GI_SLEEP}					600
${AB_SLEEP}					180
${timeout}					1800
${interval}					30
${Blade_boot}    			1200


*** Test Cases ***

#########################################################################################################################################################


Login to Appliance
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		${fusion_IP}		${admin_credentials}	

	

Get i3s Appliance Cluster IP and Login	
	${resp} = 	Fusion Api Get i3sCluster IP
	${i3S_IP} = 	Get From Dictionary		${resp['members'][0]}	primaryIPV4	
	Log to console and logfile		${i3S_IP}
	# Login to i3s appliance
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		${fusion_IP}		${admin_credentials}	
	I3S API LOGIN APPLIANCE		${i3S_IP}		${SessionId}

#########################################################################################################################################################

Create Logical Enclosure
    Set Log Level    TRACE
	#${le}=  fusion_api_get_logical_enclosure 
    ${Response}=	 Add Logical Enclosure from variable       ${les_3enc}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create Logical Enclosure.

	#Wait for task to complete
	${Retry Interval}    Convert To Number    120
	${Retries}           Convert To Integer    120
	${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating Logical Enclosure.
	Sleep    30


#########################################################################################################################################################

Add Golden Image
    [Tags]  non-critical
	Set Log Level    TRACE
	Log to console    Add Golden Image for CHO
    ${NAME}=    Get From Dictionary     ${goldenimage}    name
    Log To Console    \nName is:\t ${NAME}
    
    ${DESC}=    Get From Dictionary     ${goldenimage}    description
    Log To Console    \nDescription is:\t ${DESC}
    
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage}    file
    Log To Console    \nLOCAL_FILE is:\t ${LOCAL_FILE}
    
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Log To Console    \nResponse is:\t ${Response['status_code']}
    
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}

	
Create Plan Script 1
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[0]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    
    
Create Plan Script 2
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[1]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    
    
Create Plan Script 3
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[2]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    
    
Create Plan Script 4
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[3]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    

Create Plan Script 5
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[4]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    
    
Create Plan Script 6
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[5]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS
    
    
Create Plan Script 7
    [Tags]  non-critical
    Set Log Level    TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript[6]}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS



Create OSBuildplan
    [Tags]  non-critical
	Set Log Level    TRACE
	Log to console    Create Build Plan for CHO
	${bp_body}=    Create Build Plan Payload    ${buildplan}
	${Response}=    i3S api create buildplan    ${bp_body}
	Should Be Equal as Strings    ${Response['status_code']}	201		msg=Failed to Create Build Plan with Type Deploy



Create Deployment Plan
    [Tags]  non-critical
	Set Log Level    TRACE
	Log to console    Create Deployment Plan for CHO
	${dp_body} =    Create Deploymentplan Payload    ${deploymentplan}
	${Response} =    i3s Api Create Deploymentplan    ${dp_body}
	Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan


#########################################################################################################################################################


Create Artifact Bundle
    [Tags]  non-critical
	Set Log Level    TRACE
	Log to console    Create Artifact Bundle
	${ab_body}=		Create Artifact Bundle Payload	${artifactbundle}
	${Response}=		i3s Api Create Artifact Bundle	${ab_body}
	Should Be Equal as Strings    ${Response['status_code']}	202		msg=Failed to Create AB
	
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20
	${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating AB    level=WARN


Get Artifact Bundle
    [Tags]  non-critical
	Set Log Level    TRACE
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Get Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Get Artifact Bundle.     


Download Artifact Bundle
    [Tags]  non-critical
    Set Log Level    TRACE
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Download Artifact Bundle ${NAME}.
   	${Response}=    i3s Api Download Artifact Bundle	param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to download Artifact Bundle.


Remove the downloaded Artifact Bundle from user's laptop
    [Tags]  non-critical
    Set Log Level    TRACE
    Run    del C:\\goldenimage\\ab_download.zip


Update Artifact Bundle
    [Tags]  non-critical
	Set Log Level    TRACE
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Update Artifact Bundle ${NAME}.
    ${ab_uri}=	Get ArtifactBundle Uri	${NAME}
    Log To Console	${ab_uri}
    ${Response}=    i3s Api Update Artifact Bundle	${artifactbundle_update}	${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update artifact bundle. 
    
    
Delete Artifact Bundle
    [Tags]  non-critical
	Set Log Level    TRACE
	${NAME}=	Get From Dictionary		${artifactbundle_update}	name
    Log To Console    \nDeleting Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=not able to delete  




#########################################################################################################################################################
 

Create Server Profile 1
    [Tags]  non-critical
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[0]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	
	# We should call Create Server Profile Payload NIC when we have NIC attributes as it has additional connection
	${sp_body}=		Create Server Profile Payload		${Server_Profile_body}
	${Response}=    Fusion API Create Server Profile    ${sp_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.
	Run Keyword If    ${Response['status_code']} == 202    Log to Console and logfile    AUTO option appears on SP page

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    60
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors_count}=    Get Length    ${Errors}
	Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccesfully created server profile... ${SP_name}
	...    ELSE    Fail    msg=Errors encountered while creating Server Profile...\n${Errors}
	

 

Create Server Profile 2
    [Tags]  non-critical
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[1]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	
	# We should call Create Server Profile Payload NIC when we have NIC attributes as it has additional connection
	${sp_body}=		Create Server Profile Payload		${Server_Profile_body}
	${Response}=    Fusion API Create Server Profile    ${sp_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.
	Run Keyword If    ${Response['status_code']} == 202    Log to Console and logfile    AUTO option appears on SP page

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    60
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors_count}=    Get Length    ${Errors}
	Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccesfully created server profile... ${SP_name}
	...    ELSE    Fail    msg=Errors encountered while creating Server Profile...\n${Errors}

 

Create Server Profile 3
    [Tags]  non-critical
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[2]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	
	# We should call Create Server Profile Payload NIC when we have NIC attributes as it has additional connection
	${sp_body}=		Create Server Profile Payload		${Server_Profile_body}
	${Response}=    Fusion API Create Server Profile    ${sp_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.
	Run Keyword If    ${Response['status_code']} == 202    Log to Console and logfile    AUTO option appears on SP page

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    60
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors_count}=    Get Length    ${Errors}
	Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccesfully created server profile... ${SP_name}
	...    ELSE    Fail    msg=Errors encountered while creating Server Profile...\n${Errors}
	

 

Create Server Profile 4
    [Tags]  non-critical
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[3]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	
	# We should call Create Server Profile Payload NIC when we have NIC attributes as it has additional connection
	${sp_body}=		Create Server Profile Payload		${Server_Profile_body}
	${Response}=    Fusion API Create Server Profile    ${sp_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.
	Run Keyword If    ${Response['status_code']} == 202    Log to Console and logfile    AUTO option appears on SP page

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    60
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors_count}=    Get Length    ${Errors}
	Run Keyword If    ${Errors_count} == 0    Log to console    \nSuccesfully created server profile... ${SP_name}
	...    ELSE    Fail    msg=Errors encountered while creating Server Profile...\n${Errors}
	


#########################################################################################################################################################


Power On Server 1
    [Tags]  non-critical
	[Documentation]		Power On Server Hardware
    Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[0]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power On Off Server    ${server_hw}    On
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power On Server Successfully
	



Power On Server 2
    [Tags]  non-critical
	[Documentation]		Power On Server Hardware
    Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[1]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power On Off Server    ${server_hw}    On
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power On Server Successfully
	
	

Power On Server 3
    [Tags]  non-critical
	[Documentation]		Power On Server Hardware
    Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[2]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power On Off Server    ${server_hw}    On
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power On Server Successfully
	



Power On Server 4
    [Tags]  non-critical
	[Documentation]		Power On Server Hardware
    Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[3]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power On Off Server    ${server_hw}    On
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power On Server Successfully



#########################################################################################################################################################
#########################################################################################################################################################

	Sleep    ${Blade_boot}      # For the server to boot

#########################################################################################################################################################
#########################################################################################################################################################

	

Ping Server Mgmt IP 1
    [Tags]  non-critical
    [Documentation]		Ping Server Hardware Using Management IP
    Set Log Level    TRACE
	${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[0]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	${SP_Response} =    Get Server Profile    ${SP_name}
	${Mgmt_IP} =    Get Management IP Of Server Profile    ${SP_Response}
	${ping_status} =    Windows ping    ${Mgmt_IP}
	Run Keyword If    ${ping_status} == 0    Log to console    \nIP is set and reachable
	...				ELSE		Fail	msg=IP is not reachable.
		



Ping Server Mgmt IP 2
    [Tags]  non-critical
    [Documentation]		Ping Server Hardware Using Management IP
    Set Log Level    TRACE
	${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[1]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	${SP_Response} =    Get Server Profile    ${SP_name}
	${Mgmt_IP} =    Get Management IP Of Server Profile    ${SP_Response}
	${ping_status} =    Windows ping    ${Mgmt_IP}
	Run Keyword If    ${ping_status} == 0    Log to console    \nIP is set and reachable
	...				ELSE		Fail	msg=IP is not reachable.


Ping Server Mgmt IP 3
    [Tags]  non-critical
    [Documentation]		Ping Server Hardware Using Management IP
    Set Log Level    TRACE
	${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[2]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	${SP_Response} =    Get Server Profile    ${SP_name}
	${Mgmt_IP} =    Get Management IP Of Server Profile    ${SP_Response}
	${ping_status} =    Windows ping    ${Mgmt_IP}
	Run Keyword If    ${ping_status} == 0    Log to console    \nIP is set and reachable
	...				ELSE		Fail	msg=IP is not reachable.
		



Ping Server Mgmt IP 4
    [Tags]  non-critical
    [Documentation]		Ping Server Hardware Using Management IP
    Set Log Level    TRACE
	${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[3]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
	${SP_Response} =    Get Server Profile    ${SP_name}
	${Mgmt_IP} =    Get Management IP Of Server Profile    ${SP_Response}
	${ping_status} =    Windows ping    ${Mgmt_IP}
	Run Keyword If    ${ping_status} == 0    Log to console    \nIP is set and reachable
	...				ELSE		Fail	msg=IP is not reachable.
	

#########################################################################################################################################################


Power Off Server 1
    [Tags]  non-critical
	[Documentation]		Power Off Server Hardware
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[0]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power Off Server    ${server_hw}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully




Power Off Server 2
    [Tags]  non-critical
	[Documentation]		Power Off Server Hardware
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[1]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power Off Server    ${server_hw}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully



Power Off Server 3
    [Tags]  non-critical
	[Documentation]		Power Off Server Hardware
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[2]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power Off Server    ${server_hw}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully




Power Off Server 4
    [Tags]  non-critical
	[Documentation]		Power Off Server Hardware
	Set Log Level    TRACE
    ${Server_Profile_body} =    Copy Dictionary    ${serverprofile_3enc[3]}
    ${SP_name} =    Get From Dictionary    ${Server_Profile_body}    name
    
    ${SP_Response} =    Get Server Profile    ${SP_name}
	${server_hw}    Get From Dictionary    ${SP_Response}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power Off Server    ${server_hw}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully


#########################################################################################################################################################


Delete Server Profile 1
    [Tags]  non-critical
    #[Arguments]    ${NAME}=${SP NAME}
    Set Log Level    TRACE
    ${NAME}=	Get From Dictionary		${serverprofile_3enc[0]}	name
    Log To Console    \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    60
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
	Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}




Delete Server Profile 2
    [Tags]  non-critical
    #[Arguments]    ${NAME}=${SP NAME}
    Set Log Level    TRACE
    ${NAME}=	Get From Dictionary		${serverprofile_3enc[1]}	name
    Log To Console    \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    60
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
	Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}





Delete Server Profile 3
    [Tags]  non-critical
    #[Arguments]    ${NAME}=${SP NAME}
    Set Log Level    TRACE
    ${NAME}=	Get From Dictionary		${serverprofile_3enc[2]}	name
    Log To Console    \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    60
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
	Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}




Delete Server Profile 4
    [Tags]  non-critical
    #[Arguments]    ${NAME}=${SP NAME}
    Set Log Level    TRACE
    ${NAME}=	Get From Dictionary		${serverprofile_3enc[3]}	name
    Log To Console    \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    60
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
	Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}


#########################################################################################################################################################


Delete Deployment Plan
    [Tags]  non-critical
	Set Log Level    TRACE
	${NAME} =    Get From Dictionary    ${deploymentplan_delete}    name
    Log To Console    \nDeleting Deploymentplan:\t ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan


Delete Build Plan
    [Tags]  non-critical
	Set Log Level    TRACE
	${NAME}=	Get From Dictionary		${buildplan_delelte}	name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Log To Console    ${Response}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan


Delete Planscript1
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[0]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript2
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[1]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript3
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[2]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript4
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[3]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript5
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[4]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript6
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[5]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204

Delete Planscript7
    [Tags]  non-critical
	Set Log Level    TRACE
    ${NAME}=    Get From Dictionary     ${planscript_delete[6]}    name
    ${Response}=    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal As Strings      ${Response['status_code']}  204
    
    
Delete Golden Image
    [Tags]  non-critical
	Set Log Level    TRACE
	Sleep    60
    ${NAME}=    Get From Dictionary    ${goldenimage_delete}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage


#########################################################################################################################################################
 
Delete Logical Enclosure
    [Tags]  critical
    Set Log Level    TRACE
	${leuri}=   	Get Logical Enclosure URI	 LE
	${Response}=	Fusion Api Delete Logical Enclosure		uri=${leuri}	param=?force=False
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to delete Logical Enclosure.

	# Wait for task to complete
	${Retry Interval}    Convert To Number    120
	${Retries}           Convert To Integer    40
	${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating Logical Enclosure.
	Sleep    900


#########################################################################################################################################################


*** Keywords ***

Get ArtifactBundle Uri
	[Arguments]		${Name}	
    ${resp}=    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"    
    ${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}  

Get Deploymentplan Uri
	[Arguments]		${dpuri}
	${resp} = 	i3s Get Deploymentplan		param=?filter="'name'=='${dpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	[Return]	${uri}	
	
Create Artifact Bundle Payload
	[Arguments]		${artifactbundle}	
	${ab_body} =  Copy Dictionary  ${artifactbundle}	
	#Deploymentplan URI	
	${dp_body} = 	Get from Dictionary	${ab_body}	deploymentPlans	
	${dpuri} =	Get From Dictionary  ${dp_body[0]}  resourceUri	
	${uri} = 	Get Deploymentplan Uri		${dpuri}	
	Set to Dictionary	${dp_body[0]}  resourceUri	${uri}	
	[Return]	${ab_body}
		
Get Logical Enclosure URI
	[Arguments]  ${name}
	${resp} = 	Fusion Api Get Logical Enclosure  param=?filter="'name' = '${name}'"
	${count} =  Get From Dictionary  ${resp}  count
	Return from keyword if  $count==0  '/bad_logical_enclosure_uri'
	${uri} = 	Get From Dictionary  ${resp['members'][0]}  uri
	[Return]	${uri}
	
Add Logical Enclosure from variable
	[Documentation]	Adds a Logical Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]		${enc}
	Log to Console and logfile  	Adding LOGICAL ENCLOSURE
	${eguri} = 	Get From Dictionary	${enc}	enclosureGroupUri
	@{words} = 	Split String	${eguri}	:
	${type} = 	Get From List	${words}	0
	${e} = 		Get From List	${words}	1
	${eguri} = 	Get Enclosure Group URI	${e}
    ${encuris} =    Get From Dictionary     ${enc}  enclosureUris
	Set to dictionary	${enc}	enclosureGroupUri		${eguri}
    ${encuri_list} =    Create List
    :FOR    ${encuri}   IN  @{encuris}
	\   	@{words} = 	Split String	${encuri}	:
	\       ${type} = 	Get From List	${words}	0
	\       ${e} = 		Get From List	${words}	1
	\       ${encuri} = 	Get Enclosure URI	${e}
	\       Append to List	${encuri_list}	${encuri}

	set to dictionary   ${enc}  enclosureUris   ${encuri_list}
	${resp} =	Fusion Api Create Logical Enclosure 	${enc}
	[Return]  ${resp}

 


GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
    ...    Log To Console    GV_created_successfully for ${NAME}
    ...    ELSE 
    ...    Log to Console    GV created but status yet to get updated to OK

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
	${Retries}    Convert To Integer    30
	${Resp}=    i3s API Wait For Task To Complete	${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating GI    level=WARN
	Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If	'${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length}=    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
        ...    ELSE
	    ...    Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}
            
GET PLANSCRIPT URI
	[Arguments]    ${psuri}
	${resp} =    i3s Api Get Plan Scripts    param=?filter="'name'=='${psuri}'"
	${uri} =    Get From Dictionary    ${resp['members'][0]}    uri	
	[Return]    ${uri}
    
Get Goldenimage URI
	[Arguments]    ${giuri}
	${resp} = 	i3s Get Goldenimage		param=?filter="'name'=='${giuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}

CREATE BUILD PLAN PAYLOAD
	[Arguments]    ${buildplan_create}
	${bp_body} =    Copy Dictionary  ${buildplan_create}
	#planscript URI	
	${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
	${mx} =  Get Length  ${ps_body}
	Log To Console    ${mx}

	:FOR    ${NUM}    IN RANGE    0    ${mx}
	\    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
	\    ${uri} =    GET PLANSCRIPT URI    ${psuri}
	\    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
	\    Log to console 	${uri}
	[Return]    ${bp_body}
	
	
Get Buildplan URI
	[Arguments]		${bpuri}
	${resp} = 	i3S api get buildplan		param=?filter="'name'=='${bpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}


    
Create Deploymentplan Payload
	[Arguments]    ${deploymentplan_create}
	${dp_body} =    Copy Dictionary    ${deploymentplan_create}

	#Buildplan URI
	${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
	Log to Console and logfile		\nBP Name is:\t ${bp_name}
	${bp_uri} =    Run Keyword If  '${bp_name}' is not ''		Get Buildplan URI    ${bp_name}
	Log to Console and logfile		\nBP URI is:\t ${bp_uri}
	#${bp_uri} =    Get Buildplan URI    ${bp_name}
	Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

	#Goldenimage URI
	${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
	Log to Console and logfile		\nGI Name is:\t ${gi_name}
	${gi_uri} =	Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
	Log to Console and logfile		\nGI URI is:\t ${gi_uri}
	#${gi_uri} =    Get Goldenimage URI    ${gi_name}
	Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
	[Return]    ${dp_body}

	
	
##################################


Create Server Profile Payload
	[Documentation]	Create Server Profile Payload
	...				    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
	...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
	...                            "enclosureGroupUri":"EG:EG1",
	...							   "osdeployment settings" : "OSDP:OSDP1",
	...                           ...}	
	[Arguments]		${sp_groups}	
	Log to Console and logfile  	Adding SERVER PROFILE	
	${payload} =  Copy Dictionary  ${sp_groups}	
	${server_hw} =    Get from Dictionary    ${payload}    serverHardwareUri
	# Get Server Hardware Information
    # ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${server_hw}'"
    # ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.
    # Get server hardware URI
    ${ServerHwUri} = 	Get Server Hardware URI		${server_hw}
	Log		${server_hw} : ${ServerHwUri}
	Set to Dictionary	${payload}	serverHardwareUri	${ServerHwUri}
	# Ensuring that Blade is Powered off before Server Profile creation
	${taskState}    ${taskStatus} =    Power On Off Server    ${ServerHwUri}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully	
	# SHT
	${sht} =	Get From Dictionary  ${payload}  serverHardwareTypeUri
	${sht_uri} = 	Get Server Hardware Type URI		${sht}
	Log	${sht} : ${sht_uri}
	Set to Dictionary	${payload}	serverHardwareTypeUri	${sht_uri}
	# EG	
	${eg} =		Get From Dictionary  ${payload}  enclosureGroupUri
	${eg_uri} =  Get Enclosure Group URI    ${eg}
	Log	${eg} : ${eg_uri}
	Set to Dictionary	${payload}	enclosureGroupUri	${eg_uri}	
	# Enclosure
	${enc} =   Get From Dictionary  ${payload}  enclosureUri
	${enc_uri} =	Get Enclosure URI    ${enc}
	Log	${enc} : ${enc_uri}
	Set to Dictionary	${payload}	enclosureUri	${enc_uri}
	# Get OS DeploymentPlan
	${osds} =   Get From Dictionary  ${payload}  osDeploymentSettings
	${osdp} =    Get From Dictionary    ${osds}  osDeploymentPlanUri
	${osdp_Uri} =	Get OSDP URI    ${osdp}
	Log	${osdp} : ${osdp_uri}
	Set to Dictionary	${payload['osDeploymentSettings']}	osDeploymentPlanUri=${osdp_uri}
    # Get Network URI of os custom attributes
    ${OS_CA} =    Get From Dictionary    ${osds}    osCustomAttributes
    :FOR    ${CA}    IN    @{OS_CA}
    \    ${CA_name} =    Get From Dictionary    ${CA}    name
    \    ${regex_match} =    Evaluate    re.search(r'networkuri', '${CA_name}', re.I)    re
    \    Run Keyword If    '${regex_match}' == 'None'    continue For Loop
    \    ${CA_value} =    Get From Dictionary    ${CA}    value
    \    ${nwuri} = 	Get Ethernet URIs		${CA_value}
    \    Set to Dictionary    ${CA}    value=${nwuri[0]}

	# Get Network URI of connections
	${connectionSettings}=	Get From Dictionary  ${payload}   connectionSettings
	Log to console and logfile    \n\nconnectionSettings is: \n${connectionSettings}\n\n
	
	${connection}=	Get From Dictionary  ${connectionSettings}   connections
	Log to console and logfile    \n\nConnection is: \n${connection}\n\n
	
	${Number_of_connections}=  Get Length    ${connection}
	Log to console and logfile    \n\nNumber_of_connections are: \n${Number_of_connections}\n\n
	
	
	
	Log	VALUE IN CONNECTION :
    :FOR    ${conn_index}    IN Range    0    ${Number_of_connections}
    \    ${connection_id}    Get From List    ${connection}    ${conn_index}
    \    ${nw_uri} =    Get From Dictionary    ${connection_id}    networkUri
    \    ${uri} = 	Get Ethernet URIs		${nw_uri}
    \    Log		${nw_uri} : ${uri[0]}
    \    Set to Dictionary	${connection_id}	networkUri=${uri[0]}

	Log Dictionary		${payload}	
	[Return]   ${payload} 


Get OSDP URI
	[Arguments]		${osdp}
	${resp} = 	Fusion Api Get OS Deploymentplan		param=?filter="'name'=='${osdp}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	[Return]	${uri}

Power Off Server
	[Documentation]		Power On/Power Off Server Hardware
	[Arguments]    ${ServerHwUri}    ${power_state}
	Log to Console and logfile	\nPowering ${power_state} Server Hardware : ${ServerHwUri}\n
	${blade_load}=		Create Dictionary		powerState=${power_state}
	...										powerControl=PressAndHold
	${Response}=    Fusion Api Edit Server Hardware Power State		${blade_load}		${ServerHwUri}
	${taskuri}=	   Get From Dictionary		${Response}		uri
	${retries}=    Convert To Integer		10
	${sleep_time}=    Convert To Integer		20
	${Resp}=    Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	[Return]    ${taskState}    ${taskStatus}

Power On Off Server
	[Documentation]		Power On/Power Off Server Hardware
	[Arguments]    ${ServerHwUri}    ${power_state}
	Log to Console and logfile	Powering ${power_state} Server Hardware : ${ServerHwUri}
	${blade_load}=		Create Dictionary		powerState=${power_state}
	...										powerControl=MomentaryPress
	${Response}=    Fusion Api Edit Server Hardware Power State		${blade_load}		${ServerHwUri}
	${taskuri}=	   Get From Dictionary		${Response}		uri
	${retries}=    Convert To Integer		10
	${sleep_time}=    Convert To Integer		20
	${Resp}=    Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	[Return]    ${taskState}    ${taskStatus}

Windows ping
    [Arguments]     ${host}
    ${rc}    ${Output}=    Run And Return Rc And Output    ping -n 4 ${host}
    Log to Console and logfile   ${Output}
    # Should Contain    ${Output}    TTL=
    [Return]    ${rc}

Delete Server Profile
    [Arguments]     ${sp_name}
    Log To Console    Deleting Server Profile... ${sp_name}.
    ${SP_response_body} =    Get Server Profile    ${sp_name}
    # Ensuring that Blade is Powered off before Server Profile deletion
    ${server_hw}    Get From Dictionary    ${SP_response_body}    serverHardwareUri
	${taskState}    ${taskStatus} =    Power On Off Server    ${server_hw}    Off
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully	
    ${Response}=    Fusion API Delete Server Profile    ${sp_name}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${sp_name} not found.
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to initiate Delete Server Profile ${sp_name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    60
    ${Response} =    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
    [Return]   ${Response} 

Get Server Profile
    [Arguments]    ${SP_name}
    ${resp} =    Fusion API Get Server Profiles    param=?filter="name='${SP_name}'"
    Run Keyword If    ${resp['count']} != 0    Log    ${resp['count']} Server Profile[s] are present with name ${SP_name}
    ...    ELSE    Fail    msg=ERROR: No Server Profiles are present with name ${SP_name}
    # Log to console    Get SP Response : ${resp}
    ${SP_response_body} =    Copy Dictionary    ${resp['members'][0]}
    Log Dictionary    ${SP_response_body}
    [Return]    ${SP_response_body}
    
Get Management IP Of Server Profile
    [Arguments]    ${SP_response_body}
	${osds} =   Get From Dictionary    ${SP_response_body}    osDeploymentSettings
	${OS_CA} =    Get From Dictionary    ${osds}    osCustomAttributes
    :FOR    ${CA}    IN    @{OS_CA}
    \    ${CA_name} =    Get From Dictionary    ${CA}    name
    \    ${regex_match} =    Evaluate    re.search(r'ipaddress', '${CA_name}', re.I)    re
    \    Run Keyword If    '${regex_match}' == 'None'    continue For Loop
    \    ${MGMT_IP_address} =    Get From Dictionary    ${CA}    value
    Log to console    ${MGMT_IP_address}
    [Return]    ${MGMT_IP_address}
