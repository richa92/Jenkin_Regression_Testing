*** Settings ***
Documentation       Feature Test: Fusion i3S Integration
Resource            resource.robot
Suite Setup         Set Log Level    TRACE

*** Test Cases ***

Get number of i3s appliances in the test ring
    [Documentation]    1-Get number of i3s appliances in the test ring
    [Tags]    critical    MAT    TC01
    ${i3s_appliances_count} =    Get Length    ${i3s_appliances}
    Set Suite Variable    ${i3s_appliances_count}

Get number of OV appliances in the test ring
    [Documentation]    2-Get number of OV appliances in the test ring
    [Tags]    critical    MAT    TC02
    ${ov_appliances_count} =    Get Length    ${ov_appliances}
    Set Suite Variable    ${ov_appliances_count}

Check if all i3sappliances are reachable
    [Documentation]    1-Check if all i3sappliances are reachable
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${i3s_ip}
Check if all ovappliances are reachable
    [Documentation]    2-Check if all ovappliances are reachable
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${ov_ip}
Check if all i3sappliances have usbs mounted
    [Documentation]    3-Check if all i3sappliances have usbs mounted
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
      \    Is usb mounted on appliance    ${i3s_ip}

Remove builds in I3Sappliances
    [Documentation]    4-Remove builds in I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command   cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy I3S build to I3Sappliances
    [Documentation]    5-Copy I3S build to I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    ${buildName} =    Extract Build Name    ${I3S_Build}
    Set Suite Variable    ${i3sBuildName}    ${buildName}
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip} 
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%br0]/${I3S_Build}'
    \    ${output} =    Execute Command    find / -name ${buildName}
    \    Should Contain    ${output}    /mnt/usb/${buildName}


Check if all ovappliances have usbs mounted
    [Documentation]    7-Check if all ovappliances have usbs mounted
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Is usb mounted on appliance    ${ov_ip}

Remove builds in OVappliances
    [Documentation]    8-Remove builds in OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command    cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy OV build to OVappliances
    [Documentation]    9-Copy OV build to OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    ${buildName} =    Extract Build Name    ${Ov_Build}
    Set Suite Variable    ${ovBuildName}    ${buildName}
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%bond0]/${Ov_Build}'
    \    ${output} =    Execute Command    find / -name ${ovBuildName}
    \    Should Contain    ${output}     /mnt/usb/${ovBuildName}



Unzip I3S build in I3Sappliances
    [Documentation]    11-Unzip I3S build in I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
	  \   Login to Appliance via SSH  ${i3s_ip}
      \   ${output} =    Execute Command    cd /mnt/usb;unzip ${i3sBuildName}
	  \   ${output} =    Execute Command    echo $?
	  \   Should Contain    ${output}    0

Verify signature of I3S DDImages
    [Documentation]    12-Verify signature of I3S DDImages
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${files_count_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${i3sBuildName}|wc -l
    \    ${files_in_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${i3sBuildName}
    \    @{words} =    Split String    ${files_in_zip}
    \    ${file_list} =    Get files list in ddimage zip    ${files_count_zip}    @{words}
    \    ${gz_files}=    Get Matches    ${file_list}    regexp=(.*[^sig]$)
    \    Log    ${gz_files}    console=True
    \    ${gz_files_count} =    Get Length    ${gz_files}
    \    Check signature of files in ddimage    ${gz_files_count}   ${gz_files}
	
Unzip OV build in OVappliances
    [Documentation]    13-Unzip OV build in OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    cd /mnt/usb;unzip ${ovBuildName}
    \    ${output} =    Execute Command    echo $?
    \    Should Contain    ${output}    0

Verify signature of OV DDImages
    [Documentation]    14-Verify signature of OV DDImages
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${files_count_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${ovBuildName}|wc -l
    \    ${files_in_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${ovBuildName}
    \    @{words} =    Split String    ${files_in_zip}
    \    ${file_list} =    Get files list in ddimage zip    ${files_count_zip}    @{words}
    \    ${gz_files} =    Get Matches     ${file_list}    regexp=(.*[^sig]$)
    \    Log    ${gz_files}    console=True
    \    ${gz_files_count} =    Get Length    ${gz_files}
    \    Check signature of files in ddimage    ${gz_files_count}    ${gz_files}
 
Install I3S build on I3S appliances
    [Documentation]    3-Install I3S build on I3S appliances
    [Tags]    critical    MAT    INSTALL-I3S    TC03
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =   Execute Command  /sbin/hponcfg -f /ci/etc/usb-reimage/ilo_ribcl_developer_usb_reimage.xml
    \    Should Contain    ${output}    succeeded
    \    Start Command    reboot -f now
    \    Wait Until Keyword Succeeds    30min  3sec  Appliance is unreachable    ${i3s_ip}

Install OV build on OV appliances
    [Documentation]    4-Install OV build on OV appliances
    [Tags]    critical    MAT    INSTALL-OV    TC04
    ${ov_appliances_count} =    Get Length    ${ov_appliances}
    Login to Appliance via SSH    ${ov_appliances[0]}
    ${output}    ${rc} =    Execute Command    cat /ci/etc/network | grep CLUSTER_MGMT_MASK    return_stdout=True    return_rc=True
    ${cluster_formed} =    run keyword if    ${rc} == 0    set variable    True
    Run Keyword IF    ${ov_appliances_count}==2 and ${cluster_formed}    Trigger on 2 node withcluster
    ...    ELSE IF    ${ov_appliances_count}==2 and ${cluster_formed} is None    Trigger on 2 node withoutcluster
    ...    ELSE    Trigger on 1 node

Check OV appliances reachable post install complete time
    [Documentation]    5-Check OV appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-OV    TC05
    ${DateTime} =    Get Current Date
    Log    Time: ${DateTime}    console=True
    Sleep    1h 5min
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait Until Keyword Succeeds    30min    3sec    resource.Wait For Appliance To Become Pingable    ${ov_ip}
    \    Login to Appliance via SSH    ${ov_ip}


Check OV appliances webapps started
    [Documentation]    6-Check OV appliances webapps started
    [Tags]    critical    MAT    INSTALL-OV    TC06
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait for appliance webapps to startup    ${ov_ip}

Check I3S appliances reachable post install complete time
    [Documentation]    7-Check I3S appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-I3S    TC07
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    50min    3sec    resource.Wait For Appliance To Become Pingable    ${i3s_ip}

Check I3S appliances webapps started
    [Documentation]    8-Check I3S appliances webapps started
    [Tags]    critical    MAT    INSTALL-I3S    TC08
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    10min    3sec    Wait for appliance webapps to startup    ${i3s_ip}

Accept eula
    [Documentation]    9-Accept eula
    [Tags]    critical    MAT    TC09
    Login to Appliance via SSH    ${OV_ACTIVE}
    ${output} =    Execute Command    curl -ikg -X POST -H 'Content-Type: application/json' https://localhost/rest/appliance/eula/save -d '{"supportAccess":"yes"}'
    Should Contain    ${output}    ${status}

Change default Admin password
    [Documentation]    10-Change default Admin password
    [Tags]    critical    MAT    TC10
    Login to Appliance via SSH    ${OV_ACTIVE}
    ${output} =    Execute Command    curl -ikg -X POST -H 'Content-Type: application/json' -H 'X-API-Version: 300' https://localhost/rest/users/changePassword -d '{"newPassword":"${NEW_PASSWORD}", "oldPassword":"admin", "userName":"Administrator"}'

Login to Ov Appliance using ipv6
    [Documentation]    11-Login to Ov Appliance using ipv6
    [Tags]    critical    MAT    TC11
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    [${OV_ACTIVE}]    ${admin_credentials}    300

Configure OV with ip4
    [Documentation]    12-Configure OV with ip4
    [Tags]    critical    MAT    TC12
    ${Response} =    Fusion Api Configure Appliance Interfaces    ${network}    300
    ${Resp} =    Fusion Api Get Resource    ${Response['headers']['Location']}
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${error_count} =    Get Length    ${Errors}
    Should be True    ${error_count} == 0    msg=Errors encountered while configuring OV with ipv4
    Wait Until Keyword Succeeds    5min    3sec    resource.Wait For Appliance To Become Pingable    ${fusion_IP}

Login to OV Appliance using Ipv4
    [Documentation]    13-Login to OV Appliance using Ipv4
    [Tags]    critical    MAT    LOGIN    TC13
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${response}    ${sessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}

Do hardware setup
    [Documentation]    14-Do hardware setup
    [Tags]    critical    MAT    HW-SETUP    TC14
    Invoke Hardware Setup    timeout=300	interval=20
    Sleep    1000s
    Wait Until Keyword Succeeds    35min    50sec    All Enclosures Status Should Be OK or Warning


CREATE SUBNET FOR MGMT
    [Documentation]    15-CREATE SUBNET FOR MGMT
    [Tags]    critical    MAT    ADD-SUBNET    TC15
    ${resp} =    Fusion Api Create Ipv4 Subnet    body=${mgmt_subnet}
    should be equal as integers    ${resp['status_code']}    200

CREATE RANGE-FOR MGMT
    [Documentation]    16-CREATE RANGE-FOR MGMT
    [Tags]    critical    MAT    ADD-SUBNET-RANGE    TC16
    ${subnet_uri} =    Get Subnet uri    ${mgmt_ipv4ranges['networkId']}
    Set to dictionary    ${mgmt_ipv4ranges}    subnetUri=${subnet_uri}
    Remove From Dictionary    ${mgmt_ipv4ranges}    networkId
    ${resp}=    Fusion Api Create Ipv4 Range    ${mgmt_ipv4ranges}
    should be equal as integers    ${resp['status_code']}    200

CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Documentation]    17-CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Tags]    critical    MAT    ADD-MGMT-NW    TC17
    ${networkId} =    Get From Dictionary    ${mgmt_network}    networkId
    Remove From Dictionary    ${mgmt_network}    networkId
    ${subnet_uri} =    Run Keyword If    '${networkId}' is not '${null}'    Get Subnet uri    ${networkId}
    Set to dictionary    ${mgmt_network}    subnetUri=${subnet_uri}
    ${resp} =    Fusion Api Create Ethernet Network    body=${mgmt_network}
    should be equal as integers    ${resp['status_code']}    202

CREATE SUBNET FOR iSCSI
    [Documentation]    18-CREATE SUBNET FOR iSCSI
    [Tags]    critical    MAT    ADD-SUBNET    TC18
    ${resp} =    Fusion Api Create Ipv4 Subnet    body=${iscsi_subnet}
    should be equal as integers    ${resp['status_code']}    200

CREATE RANGE-FOR iSCSI
    [Documentation]    19-CREATE RANGE-FOR iSCSI
    [Tags]    critical    MAT    ADD-SUBNET-RANGE    TC19
    ${subnet_uri} =    Get Subnet uri    ${iscsi_ipv4ranges['networkId']}
    Set to dictionary    ${iscsi_ipv4ranges}    subnetUri=${subnet_uri}
    Remove From Dictionary    ${iscsi_ipv4ranges}    networkId
    ${resp}=    Fusion Api Create Ipv4 Range    ${iscsi_ipv4ranges}
    should be equal as integers    ${resp['status_code']}    200

CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Documentation]    20-CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Tags]    critical    MAT    ADD-ISCSI-NW    TC20
    ${networkId} =    Get From Dictionary    ${iscsi_network}    networkId
    Remove From Dictionary    ${iscsi_network}    networkId
    ${subnet_uri} =    Run Keyword If    '${networkId}' is not '${null}'    Get Subnet uri    ${networkId}
    Set to dictionary    ${iscsi_network}    subnetUri=${subnet_uri}
    ${resp} =    Fusion Api Create Ethernet Network    body=${iscsi_network}
    should be equal as integers    ${resp['status_code']}    202

Create OS Deployment Server
    [Documentation]    21-Create OS Deployment Server
    [Tags]    critical    MAT    ADD-OSDS    TC21
    ${osds_body} =    Create Deployment Server Payload    ${osdeploymentserver}    OSDS-3enc
    ${response} =    Fusion Api Create OS DeploymentServer    ${osds_body}
    Wait For task2    ${response}    timeout=1200    interval=60

CREATE LIG
    [Documentation]    22-CREATE LIG
    [Tags]    critical    MAT    ADD-LIG    TC22
    Add LIG from variable    ${lig_tbird_3enc}

CREATE EG
    [Documentation]    23-CREATE EG
    [Tags]    critical    MAT    ADD-EG    TC23
    Add Enclosure Group from variable    ${enc_groups_tbird_3enc}

Create Logical Enclosure
    [Documentation]    24-Create LE
    [Tags]    critical    MAT    ADD-LE    TC24
    Add Logical Enclosure from variable    ${les_3enc}
