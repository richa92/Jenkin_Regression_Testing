*** Settings ***
Documentation       Feature Test: Fusion i3S Integration
Resource            ../../resource.robot
Suite Setup         Set Log Level    TRACE

*** Test Cases ***

Get number of i3s appliances in the test ring
    [Documentation]    1-Get number of i3s appliances in the test ring
    [Tags]    critical    MAT    TC01
    ${i3s_appliances_count} =    Get Length    ${i3s_appliances}
    Set Suite Variable    ${i3s_appliances_count}

Get number of OV appliances in the test ring
    [Documentation]    2-Get number of OV appliances in the test ring
    [Tags]    critical    MAT    TC02
    ${ov_appliances_count} =    Get Length    ${ov_appliances}
    Set Suite Variable    ${ov_appliances_count}

Check if all i3sappliances are reachable
    [Documentation]    1-Check if all i3sappliances are reachable
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${i3s_ip}
Check if all ovappliances are reachable
    [Documentation]    2-Check if all ovappliances are reachable
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${ov_ip}
Check if all i3sappliances have usbs mounted
    [Documentation]    3-Check if all i3sappliances have usbs mounted
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
      \    Is usb mounted on appliance    ${i3s_ip}

Remove builds in I3Sappliances
    [Documentation]    4-Remove builds in I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command   cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy I3S build to I3Sappliances
    [Tags]  critical
	${Build_name} =		Extract Build Name		${I3S_Build}
	Set Suite Variable		${I3S_Build_Name}		${Build_name}
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP} 
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O 'http://[${build_server}%br0]/${I3S_Build}'	  
      \   ${output}=	Execute Command  find / -name ${Build_name}
	  \   Should Contain	${output}    /mnt/usb/${Build_name}



Check if all ovappliances have usbs mounted
    [Documentation]    7-Check if all ovappliances have usbs mounted
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Is usb mounted on appliance    ${ov_ip}

Remove builds in OVappliances
    [Documentation]    8-Remove builds in OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command    cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy OV build to OVappliances
    [Tags]  critical
	Set Log Level  TRACE
	${Build_name} =		Extract Build Name		${Ov_Build}
	Set Suite Variable		${Ov_Build_Name}		${Build_name}
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP} 
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O 'http://[${build_server}%bond0]/${Ov_Build}'
      \   ${output}=	Execute Command  find / -name ${Ov_Build_Name}
	  \   Should Contain	${output}    /mnt/usb/${Ov_Build_Name}


Unzip I3S build in I3Sappliances
    [Tags]  critical
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
      \   ${output} =   Execute Command  cd /mnt/usb;unzip ${I3S_Build_Name}
	  \   ${output} =  Execute Command  echo $?
	  \   Should Contain	${output}  0

Verify signature of I3S DDImages
    [Tags]  critical
	:FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \  ${files_count_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${I3S_Build_Name}|wc -l
      \  ${files_in_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${I3S_Build_Name}
      \  @{words} = 	Split String	${files_in_zip}
	  \  ${file_list} =  Get files list in ddimage zip   ${files_count_zip}   @{words}
	  \  ${gz_files}=	Get Matches	 ${file_list}	regexp=(.*[^sig]$)
	  \  Log to console   ${gz_files}
	  \  ${gz_files_count}=  Get Length	 ${gz_files}
	  \  Check signature of files in ddimage  ${gz_files_count}   ${gz_files}
	
Unzip OV build in OVappliances
    [Tags]  critical
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
      \   ${output} =   Execute Command  cd /mnt/usb;unzip ${Ov_Build_Name}
	  \   ${output} =  Execute Command  echo $?
	  \   Should Contain	${output}  0
	  
Verify signature of OV DDImages
    [Tags]  critical
   	:FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${X}
	  \   Login to Appliance via SSH  ${IP}
	  \  ${files_count_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${Ov_Build_Name}|wc -l
      \  ${files_in_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${Ov_Build_Name}
      \  @{words} = 	Split String	${files_in_zip}
	  \  ${file_list} =  Get files list in ddimage zip   ${files_count_zip}   @{words}
	  \  ${gz_files}=	Get Matches	 ${file_list}	regexp=(.*[^sig]$)
	  \  Log to console   ${gz_files}
	  \  ${gz_files_count}=  Get Length	 ${gz_files}
	  \  Check signature of files in ddimage  ${gz_files_count}   ${gz_files}
 
Install I3S build on I3S appliances
    [Documentation]    3-Install I3S build on I3S appliances
    [Tags]    critical    MAT    INSTALL-I3S    TC03
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =   Execute Command  /sbin/hponcfg -f /ci/etc/usb-reimage/ilo_ribcl_developer_usb_reimage.xml
    \    Should Contain    ${output}    succeeded
    \    Start Command    reboot -f now
    \    Wait Until Keyword Succeeds    30min  3sec  Appliance is unreachable    ${i3s_ip}

Install OV build on OV appliances
    [Documentation]    4-Install OV build on OV appliances
    [Tags]    critical    MAT    INSTALL-OV    TC04
    ${ov_appliances_count} =    Get Length    ${ov_appliances}
    Login to Appliance via SSH    ${ov_appliances[0]}
    ${output}    ${rc} =    Execute Command    cat /ci/etc/network | grep CLUSTER_MGMT_MASK    return_stdout=True    return_rc=True
    ${cluster_formed} =    run keyword if    ${rc} == 0    set variable    True
    Run Keyword IF    ${ov_appliances_count}==2 and ${cluster_formed}    Trigger on 2 node withcluster
    ...    ELSE IF    ${ov_appliances_count}==2 and ${cluster_formed} is None    Trigger on 2 node withoutcluster
    ...    ELSE    Trigger on 1 node

Check OV appliances reachable post install complete time
    [Documentation]    5-Check OV appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-OV    TC05
    ${DateTime} =    Get Current Date
    Log    Time: ${DateTime}    console=True
    Sleep    1h 5min
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait Until Keyword Succeeds    30min    3sec    resource.Wait For Appliance To Become Pingable    ${ov_ip}
    \    Login to Appliance via SSH    ${ov_ip}


Check OV appliances webapps started
    [Documentation]    6-Check OV appliances webapps started
    [Tags]    critical    MAT    INSTALL-OV    TC06
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait for appliance webapps to startup    ${ov_ip}

Check I3S appliances reachable post install complete time
    [Documentation]    7-Check I3S appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-I3S    TC07
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    50min    3sec    resource.Wait For Appliance To Become Pingable    ${i3s_ip}

Check I3S appliances webapps started
    [Documentation]    8-Check I3S appliances webapps started
    [Tags]    critical    MAT    INSTALL-I3S    TC08
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    10min    3sec    Wait for appliance webapps to startup    ${i3s_ip}