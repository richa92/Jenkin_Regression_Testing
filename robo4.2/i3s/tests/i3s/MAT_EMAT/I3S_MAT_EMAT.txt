*** Settings ***
Documentation       Feature Test: Fusion i3S Integration
Resource            resource.robot
Suite Setup         Set Log Level    TRACE

Variables 		    MAT_EMAT_data_variables.py
*** Test Cases ***
Check if all i3sappliances are reachable
    [Documentation]    1-Check if all i3sappliances are reachable
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${i3s_ip}
Check if all ovappliances are reachable
    [Documentation]    2-Check if all ovappliances are reachable
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    resource.Wait For Appliance To Become Pingable    ${ov_ip}
Check if all i3sappliances have usbs mounted
    [Documentation]    3-Check if all i3sappliances have usbs mounted
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
      \    Is usb mounted on appliance    ${i3s_ip}

Remove builds in I3Sappliances
    [Documentation]    4-Remove builds in I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command   cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy I3S build to I3Sappliances
    [Documentation]    5-Copy I3S build to I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    ${buildName} =    Extract Build Name    ${I3S_Build}
    Set Suite Variable    ${i3sBuildName}    ${buildName}
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip} 
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%br0]/${I3S_Build}'
    \    ${output} =    Execute Command    find / -name ${buildName}
    \    Should Contain    ${output}    /mnt/usb/${buildName}

Download I3S build sha file in I3Sappliance
    [Documentation]    6-Download I3S build sha file in I3Sappliance
    [Tags]    critical    MAT    COPY-I3S-BUILD
    ${buildName_sha} =    Extract Build Name    ${I3S_Build_sha}
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip} 
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%br0]/${I3S_Build_sha}'
    \    ${output}=    Execute Command    find / -name ${buildName_sha}
    \    Should Contain    ${output}    /mnt/usb/${buildName_sha}
Check if all ovappliances have usbs mounted
    [Documentation]    7-Check if all ovappliances have usbs mounted
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Is usb mounted on appliance    ${ov_ip}

Remove builds in OVappliances
    [Documentation]    8-Remove builds in OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    rm -rf /mnt/usb/*
    \    ${output} =    Execute Command    cd /mnt/usb;ls | wc -l
    \    Should Contain    ${output}    0

Copy OV build to OVappliances
    [Documentation]    9-Copy OV build to OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    ${buildName} =    Extract Build Name    ${Ov_Build}
    Set Suite Variable    ${ovBuildName}    ${buildName}
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%bond0]/${Ov_Build}'
    \    ${output} =    Execute Command    find / -name ${ovBuildName}
    \    Should Contain    ${output}     /mnt/usb/${ovBuildName}

Copy OV sha file to OVappliances
    [Documentation]    10-Copy OV sha file to OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    ${buildName_sha} =    Extract Build Name    ${Ov_Build_sha}
    Set Suite Variable    ${ovBuildName_sha}    ${buildName_sha}
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    cd /mnt/usb;curl -O 'http://[${build_server}%bond0]/${Ov_Build_sha}'
    \    ${output}=    Execute Command    find / -name ${ovBuildName_sha}
    \    Should Contain    ${output}    /mnt/usb/${ovBuildName_sha}
Unzip I3S build in I3Sappliances
    [Documentation]    11-Unzip I3S build in I3Sappliances
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
	  \   Login to Appliance via SSH  ${i3s_ip}
      \   ${output} =    Execute Command    cd /mnt/usb;unzip ${i3sBuildName}
	  \   ${output} =    Execute Command    echo $?
	  \   Should Contain    ${output}    0

Verify signature of I3S DDImages
    [Documentation]    12-Verify signature of I3S DDImages
    [Tags]    critical    MAT    COPY-I3S-BUILD
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${files_count_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${i3sBuildName}|wc -l
    \    ${files_in_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${i3sBuildName}
    \    @{words} =    Split String    ${files_in_zip}
    \    ${file_list} =    Get files list in ddimage zip    ${files_count_zip}    @{words}
    \    ${gz_files}=    Get Matches    ${file_list}    regexp=(.*[^sig]$)
    \    Log    ${gz_files}    console=True
    \    ${gz_files_count} =    Get Length    ${gz_files}
    \    Check signature of files in ddimage    ${gz_files_count}   ${gz_files}
Unzip OV build in OVappliances
    [Documentation]    13-Unzip OV build in OVappliances
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =    Execute Command    cd /mnt/usb;unzip ${ovBuildName}
    \    ${output} =    Execute Command    echo $?
    \    Should Contain    ${output}    0

Verify signature of OV DDImages
    [Documentation]    14-Verify signature of OV DDImages
    [Tags]    critical    MAT    COPY-OV-BUILD
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${files_count_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${ovBuildName}|wc -l
    \    ${files_in_zip} =    Execute Command    cd /mnt/usb;unzip -Z1 ${ovBuildName}
    \    @{words} =    Split String    ${files_in_zip}
    \    ${file_list} =    Get files list in ddimage zip    ${files_count_zip}    @{words}
    \    ${gz_files} =    Get Matches     ${file_list}    regexp=(.*[^sig]$)
    \    Log    ${gz_files}    console=True
    \    ${gz_files_count} =    Get Length    ${gz_files}
    \    Check signature of files in ddimage    ${gz_files_count}    ${gz_files}

Get number of i3s appliances in the test ring
    [Documentation]    15-Get number of i3s appliances in the test ring
    [Tags]    critical    MAT    TC01
    ${i3s_appliances_count} =    Get Length    ${i3s_appliances}
    Set Suite Variable    ${i3s_appliances_count}

Get number of OV appliances in the test ring
    [Documentation]    16-Get number of OV appliances in the test ring
    [Tags]    critical    MAT    TC02
    ${ov_appliances_count} =    Get Length    ${ov_appliances}
    Set Suite Variable    ${ov_appliances_count}

Install I3S build on I3S appliances
    [Documentation]    17-Install I3S build on I3S appliances
    [Tags]    critical    MAT    INSTALL-I3S    TC03
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Login to Appliance via SSH    ${i3s_ip}
    \    ${output} =   Execute Command  /sbin/hponcfg -f /ci/etc/usb-reimage/ilo_ribcl_developer_usb_reimage.xml
    \    Should Contain    ${output}    succeeded
    \    Start Command    reboot -f now
    \    Wait Until Keyword Succeeds    10min  3sec  Appliance is unreachable    ${i3s_ip}
    Sleep  600s
Factory reset the enclosures
    [Documentation]    18-Factory  Reset Frames
    [Tags]  critical MAT FR-Frames TC04
    Login to Appliance via SSH  ${OV_ACTIVE}%12
	${output} =   Execute Command  /ci/bin/tbird/appliance-hal.sh factory-reset-enclosures
	Sleep  900s
	Login to Appliance via SSH  ${OV_ACTIVE}%12
	${output} =   Execute Command  /ci/bin/tbird/appliance-hal.sh list-enclosures|wc -l
	Should Contain  ${output}    0

	
Install OV build on OV appliances
    [Documentation]    19-Install OV build on OV appliances
    [Tags]  critical
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Login to Appliance via SSH    ${ov_ip}
    \    ${output} =   Execute Command  /sbin/hponcfg -f /ci/etc/usb-reimage/ilo_ribcl_developer_usb_reimage.xml
    \    Should Contain    ${output}    succeeded
	\    Start Command    reboot -f now
    \    Wait Until Keyword Succeeds    10min  3sec  Appliance is unreachable    ${ov_ip}


Check OV appliances reachable post install complete time
    [Documentation]    20-Check OV appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-OV    TC05
    ${DateTime} =    Get Current Date
    Log    Time: ${DateTime}    console=True
    Sleep    1h 4min
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait Until Keyword Succeeds    30min    3sec    resource.Wait For Appliance To Become Pingable    ${ov_ip}
    \    Login to Appliance via SSH    ${ov_ip}

Check OV appliances webapps started
    [Documentation]    21-Check OV appliances webapps started
    [Tags]    critical    MAT    INSTALL-OV    TC06
    :FOR    ${ov_ip}    IN    @{ov_appliances}
    \    Wait for appliance webapps to startup    ${ov_ip}

Check I3S appliances reachable post install complete time
    [Documentation]    22-Check I3S appliances reachable post install complete time
    [Tags]    critical    MAT    INSTALL-I3S    TC07
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    50min    3sec    resource.Wait For Appliance To Become Pingable    ${i3s_ip}

Check I3S appliances webapps started
    [Documentation]    23-Check I3S appliances webapps started
    [Tags]    critical    MAT    INSTALL-I3S    TC08
    :FOR    ${i3s_ip}    IN    @{i3s_appliances}
    \    Wait Until Keyword Succeeds    10min    3sec    Wait for appliance webapps to startup    ${i3s_ip}

Accept eula
    [Documentation]    24-Accept eula
    [Tags]    critical    MAT    TC09
    Login to Appliance via SSH    ${OV_ACTIVE}
    ${output} =    Execute Command    curl -ikg -X POST -H 'Content-Type: application/json' https://localhost/rest/appliance/eula/save -d '{"supportAccess":"yes"}'
    Should Contain    ${output}    ${status}

Change default Admin password
    [Documentation]    25-Change default Admin password
    [Tags]    critical    MAT    TC10
    Login to Appliance via SSH    ${OV_ACTIVE}
    ${output} =    Execute Command    curl -ikg -X POST -H 'Content-Type: application/json' -H 'X-API-Version: 300' https://localhost/rest/users/changePassword -d '{"newPassword":"${NEW_PASSWORD}", "oldPassword":"admin", "userName":"Administrator"}'

Login to Ov Appliance using ipv6
    [Documentation]    26-Login to Ov Appliance using ipv6
    [Tags]    critical    MAT    TC11
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${Response}    ${SessionId} =    Fusion Api Login Appliance    [${OV_ACTIVE}]    ${admin_credentials}    300

Configure OV with ip4
    [Documentation]    27-Configure OV with ip4
    [Tags]    critical    MAT    TC12
    ${Response} =    Fusion Api Configure Appliance Interfaces    ${network}    300
    ${Resp} =    Fusion Api Get Resource    ${Response['headers']['Location']}
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${error_count} =    Get Length    ${Errors}
    Should be True    ${error_count} == 0    msg=Errors encountered while configuring OV with ipv4
    Wait Until Keyword Succeeds    5min    3sec    resource.Wait For Appliance To Become Pingable    ${fusion_IP}
Do hardware setup
    [Documentation]    28-Do hardware setup
    [Tags]    critical    MAT    HW-SETUP    TC14
    Invoke Hardware Setup    timeout=300	interval=20
    Sleep    1000s
    Wait Until Keyword Succeeds    15min    50sec    All Enclosures Status Should Be OK or Warning

CREATE SUBNET FOR MGMT
    [Documentation]    29-CREATE SUBNET FOR MGMT
    [Tags]    critical    MAT    ADD-SUBNET    TC15
    ${resp} =    Fusion Api Create Ipv4 Subnet    body=${mgmt_subnet}
    should be equal as integers    ${resp['status_code']}    200

CREATE RANGE-FOR MGMT
    [Documentation]    30-CREATE RANGE-FOR MGMT
    [Tags]    critical    MAT    ADD-SUBNET-RANGE    TC16
    ${subnet_uri} =    Get Subnet uri    ${mgmt_ipv4ranges['networkId']}
    Set to dictionary    ${mgmt_ipv4ranges}    subnetUri=${subnet_uri}
    Remove From Dictionary    ${mgmt_ipv4ranges}    networkId
    ${resp}=    Fusion Api Create Ipv4 Range    ${mgmt_ipv4ranges}
    should be equal as integers    ${resp['status_code']}    200

CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Documentation]    31-CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Tags]    critical    MAT    ADD-MGMT-NW    TC17
    ${networkId} =    Get From Dictionary    ${mgmt_network}    networkId
    Remove From Dictionary    ${mgmt_network}    networkId
    ${subnet_uri} =    Run Keyword If    '${networkId}' is not '${null}'    Get Subnet uri    ${networkId}
    Set to dictionary    ${mgmt_network}    subnetUri=${subnet_uri}
    ${resp} =    Fusion Api Create Ethernet Network    body=${mgmt_network}
    should be equal as integers    ${resp['status_code']}    202

CREATE SUBNET FOR iSCSI
    [Documentation]    32-CREATE SUBNET FOR iSCSI
    [Tags]    critical    MAT    ADD-SUBNET    TC18
    ${resp} =    Fusion Api Create Ipv4 Subnet    body=${iscsi_subnet}
    should be equal as integers    ${resp['status_code']}    200

CREATE RANGE-FOR iSCSI
    [Documentation]    33-CREATE RANGE-FOR iSCSI
    [Tags]    critical    MAT    ADD-SUBNET-RANGE    TC19
    ${subnet_uri} =    Get Subnet uri    ${iscsi_ipv4ranges['networkId']}
    Set to dictionary    ${iscsi_ipv4ranges}    subnetUri=${subnet_uri}
    Remove From Dictionary    ${iscsi_ipv4ranges}    networkId
    ${resp}=    Fusion Api Create Ipv4 Range    ${iscsi_ipv4ranges}
    should be equal as integers    ${resp['status_code']}    200

CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Documentation]    34-CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
    [Tags]    critical    MAT    ADD-ISCSI-NW    TC20
    ${networkId} =    Get From Dictionary    ${iscsi_network}    networkId
    Remove From Dictionary    ${iscsi_network}    networkId
    ${subnet_uri} =    Run Keyword If    '${networkId}' is not '${null}'    Get Subnet uri    ${networkId}
    Set to dictionary    ${iscsi_network}    subnetUri=${subnet_uri}
    ${resp} =    Fusion Api Create Ethernet Network    body=${iscsi_network}
    should be equal as integers    ${resp['status_code']}    202

Create OS Deployment Server
    [Documentation]    35-Create OS Deployment Server
    [Tags]    critical    MAT    ADD-OSDS    TC21
    ${osds_body} =    Create Deployment Server Payload    ${osdeploymentserver}    OSDS-3enc
    ${response} =    Fusion Api Create OS DeploymentServer    ${osds_body}
    Wait For task2    ${response}    timeout=1200    interval=60

CREATE LIG
    [Documentation]    36-CREATE LIG
    [Tags]    critical    MAT    ADD-LIG    TC22
    Add LIG from variable    ${lig_tbird_3enc}

CREATE EG
    [Documentation]    37-CREATE EG
    [Tags]    critical    MAT    ADD-EG    TC23
    Add Enclosure Group from variable    ${enc_groups_tbird_3enc}

Create Logical Enclosure
    [Documentation]    38-Create LE
    [Tags]    critical    MAT    ADD-LE    TC24
    Add Logical Enclosure from variable    ${les_3enc}

Get i3s Appliance Cluster IP and Login
    [Documentation]    39-Get i3s Appliance Cluster IP and Login
    [Tags]    critical    MAT    LOGIN-I3S    TC25
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_ip} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_ip}    ${SessionId}

Add Golden Image
    [Documentation]    40-Add Golden Image
    [Tags]    critical    MAT    ADD-GI    TC26
    ${name} =    Get From Dictionary    ${goldenimage[1]}    name
    ${desc} =    Get From Dictionary    ${goldenimage[1]}    description
    ${local_file} =    Get From Dictionary    ${goldenimage[1]}    file
    ${response} =    i3s Api Add Golden Image    ${local_file}    param=?name=${name}&description=${desc}
    

Create Plan Script
    [Documentation]    41-Create Plan Script
    [Tags]    critical    MAT    ADD-PS    TC27
    Set Log Level  TRACE
    ${response} =    I3s Api Create Plan Scripts    ${planscript}
    Should Be Equal as Strings    ${response['status_code']}    201    msg=Failed to Create PS

Create OSBuildplan
    [Documentation]    42-Create OSBuildplan
    [Tags]    critical    MAT    ADD-OSDP    TC28
    ${bp_body} =    CREATE BUILD PLAN PAYLOAD    ${buildplan}
    ${response} =    i3S_api_create_buildplan    ${bp_body}
    Should Be Equal as Strings    ${response['status_code']}    201    msg=Failed to Create Build Plan with Type Deploy

Create OEDeploymentplan
    [Documentation]    43-Create OEDeploymentplan
    [Tags]    critical    MAT    ADD-OEDP    TC29
    ${dp_body} =    Create Deploymentplan Payload    ${deploymentplan[0]}
    ${response} =    i3s Api Create Deploymentplan    ${dp_body}
    Should Be Equal as Strings    ${response['status_code']}    201    msg=Failed to Create DeploymentPlan

Create Artifact Bundle
    [Documentation]    44-Create Artifact Bundle
    [Tags]    critical    MAT    CREATE-AB    TC30
    Log    Create Artifact Bundle    console=True
    ${ab_body} =    Create Artifact Bundle Payload    ${artifactbundle}
    ${response} =    i3s Api Create Artifact Bundle    ${ab_body}
    Should Be Equal as Strings    ${response['status_code']}	202		msg=Failed to Create AB
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle

Get Artifact Bundle
    [Documentation]    45-Get Artifact Bundle
    [Tags]    critical    MAT    GET-AB    TC31
    ${name}=    Get From Dictionary    ${artifactbundle}    name
    Log    \Get Artifact Bundle ${name}.    console=True  
    ${response} =    i3s Api Get Artifact Bundle    param=?filter="'name'=='${name}'"
    Should Be Equal as Strings    ${response['status_code']}    200    msg=Failed to Get Artifact Bundle.

Download Artifact Bundle
    [Documentation]    46-Download Artifact Bundle
    [Tags]    critical    MAT    DOWNLOAD-AB    TC32
    ${name}=    Get From Dictionary    ${artifactbundle}    name
    Log    \Download Artifact Bundle ${name}    console=True
    ${response} =    i3s Api Download Artifact Bundle    param=?filter="'name'=='${name}'"
    Should Be Equal as Strings    ${response['status_code']}    200    msg=Failed to download Artifact Bundle.

Remove the downloaded Artifact Bundle from user laptop
    [Documentation]    47-Remove the downloaded Artifact Bundle from user's laptop
    [Tags]    critical    MAT    R-AB    TC33
    Set Log Level    TRACE
    Run    del C:\\goldenimage\\ab_download.zip

Update Artifact Bundle
    [Documentation]    48-Update Artifact Bundle
    [Tags]    critical    MAT    UPDATE-AB    TC34
    ${name} =    Get From Dictionary    ${artifactbundle}    name
    Log    \Update Artifact Bundle ${name}.    console=True
    ${ab_uri} =    Get ArtifactBundle Uri    ${name}
    ${response} =    i3s Api Update Artifact Bundle    ${artifactbundle_update}    ${ab_uri}
    Should Be Equal as Strings    ${response['status_code']}    200    msg=Failed to update artifact bundle. 

Delete Artifact Bundle
    [Documentation]    49-Delete Artifact Bundle
    [Tags]    critical    MAT    R-AB    TC35
    ${name} =    Get From Dictionary    ${artifactbundle_update}    name
    Log    \nDeleting Artifact Bundle ${name}.    console=True
    ${response} =    i3s Api Delete Artifact Bundle    ${name}
    Should Be Equal As Strings    ${response['status_code']}    204

Create support dump without username
    [Documentation]    50-CREATE SUPPORT DUMP WITHOUT USER NAME
    [Tags]    critical    MAT    CREATE-SUPPORT DUMP    TC36
    ${Response} =    I3s Api Create supportdump    ${sd_body[2]}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Create supportdump

Create support dump with encryption
    [Documentation]    51-CREATE SUPPORT DUMP WITH ENCRYPTION
    [Tags]    critical    MAT    CREATE-ENCRYPTED SUPPORT DUMP    TC37
    ${Response} =    I3s Api Create supportdump    ${sd_body[1]}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Create supportdump

Download And Create support dump without encryption
    [Documentation]    52-Add Artifact Bundle
    [Tags]    critical    MAT    DOWNLOAD-UNENCRYPTED SUPPORT DUMP DOWNLOAD    TC38
    ${Response} =    I3s Api Create supportdump    ${sd_body[0]}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Create supportdump
    ${Response1} =    I3s Api Download supportdump    ${Response['uri']}
    Should Be Equal as Strings    ${Response1['status_code']}    200    msg=Failed to download supportdump

Add Artifact Bundle
    [Documentation]    53-Add Artifact Bundle
    [Tags]    critical    MAT    ADD-AB    TC39
    ${name} =    Get From Dictionary    ${artifactbundle_add}    name
    Log    \Add Artifact Bundle ${name}.    console=True
    ${response} =    i3s Api Add Artifact Bundle    ${name}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to add Artifact Bundle.
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle


Extract Artifact Bundle
    [Documentation]    54-REExtract Artifact Bundle
    [Tags]    critical    MAT    REEXTRACT-AB    TC75
    ${name} =    Get From Dictionary    ${artifactbundle_extract}    name
    Log    \Extract Artifact Bundle ${name}.    console=True
    ${ab_uri} =    Get ArtifactBundle Uri    ${name}
    ${response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to extract Artifact Bundle.
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle
    Sleep  25min

Delete esxi artifact bundle added
    [Documentation]    55-Delete esxi artifact bundle added
    [Tags]    critical    MAT    R-AB    TC41
    ${name} =    Get From Dictionary    ${artifactbundle_delete}    name
    ${response} =    i3s Api Delete Artifact Bundle    ${name}
    Should Be Equal as Strings    ${response['status_code']}    204    msg=Failed to delete Artifactbundle

Create Server Profile
    [Documentation]    56-Create Server Profile with user specific ManagementNIC
    [Tags]    ADD-SP    MAT    TC42

    ${responses}=  Add Server Profile  ${serverprofile_3enc}
    Run Keyword If  ${responses} is not ${null}  Run Keyword And Continue On Failure   Wait For Task2  ${responses}
    ...  timeout=1200  interval=5

Power On Server
    [Documentation]    57-Power On Server
    [Tags]    MAT    TC43
    ${blade_info} =    Get From Dictionary    ${BLADES}    Blade1
    Power on server    ${BLADES['Blade1']}

Check the server ipv4 is reachable
    [Documentation]    58-Check the server ipv4 is reachable
    [Tags]    MAT    TC44
    Wait Until Keyword Succeeds    15min    50sec    resource.Wait For Appliance To Become Pingable    ${blade_IP}

Power off SP
    [Documentation]    59-Power off  SP
    [Tags]    TC45

    ${blade_info} =    Get From Dictionary    ${BLADES}    Blade1
    Power off server    ${BLADES['Blade1']}

Get i3s Appliance Cluster IP and Login
    [Documentation]    60-Get i3s Appliance Cluster IP and Login
    [Tags]    critical    MAT    LOGIN-I3S    TC46
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_ip} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_ip}    ${SessionId}

Create backup of all the artifacts on image streamer
    [Documentation]    61-Create backup of all the artifacts on image streamer
    [Tags]    critical    MAT    ARTIFACT BACKUP    TC47
    Set Log Level    TRACE
    ${dp_grp_response} =    I3S Api Get Deploymentgroup
    Log to console    ${dp_grp_response['members'][0]['uri']}
    ${dp_grp_json} =    Create Dictionary
    Set To Dictionary    ${dp_grp_json}    deploymentGroupURI    ${dp_grp_response['members'][0]['uri']}
    Log to console    ${dp_grp_json}
	${Response} =    i3s Api Create Backup    ${dp_grp_json}
	Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to Create image streamer backup bundle	
	# Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating image streamer backup bundle

Get image streamer backup information
    [Documentation]    62-BACKUP INFO
    [Tags]    critical    MAT    BACKUP INFO    TC48
	${resp} =    I3S Api Get Backup
	Log to console    \n${resp['members'][0]['uri']}
	Should Be Equal as Strings    ${resp['status_code']}    200    msg=Failed to get backup bundle information

Get image streamer backup information by ID
    [Documentation]    63-BACKUP INFO ID
    [Tags]    critical    MAT    BACKUP INFO ID    TC49
    ${Response} =    I3S Api Get Backup
    Log to console    \n${Response['members'][0]['uri']}     
	${Get_Response} =    I3S Api Get Backup    param=${Response['members'][0]['artifactsbundleID']}
	Log to console    \n${Get_Response['uri']}

ReAdd Artifact Bundle
    [Documentation]    64-REAdd Artifact Bundle
    [Tags]    critical    MAT    READD-AB    TC50
    ${name} =    Get From Dictionary    ${artifactbundle_add}    name
    Log    \Add Artifact Bundle ${name}.    console=True
    ${response} =    i3s Api Add Artifact Bundle    ${name}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to add Artifact Bundle.
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle

Restore backup bundle on image streamer
    [Documentation]    65-BACKUP RESTORE
    [Tags]    critical    MAT    BACKUP RESTORE    TC51
	# The new AB created above should not be present in the setup after Restore
    Set Log Level    TRACE
    ${dp_grp_response} =    I3S Api Get Deploymentgroup
    Log to console    ${dp_grp_response['members'][0]['uri']}
    ${dp_grp_json} =    Create Dictionary
    Set To Dictionary    ${dp_grp_json}    deploymentGroupURI    ${dp_grp_response['members'][0]['uri']}
	${Response} =    I3s Api Extract Backupbundle    ${dp_grp_json}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to extract Backup bundle	
	# Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}    Convert To Integer    20
    ${Resp} =    i3s API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}
    # Check for errors
    ${Errors} =    Get From Dictionary    ${Resp}    taskErrors
    ${Errors} =    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while extracting Artifact Bundle


Golden Image Capture
    [Documentation]    66-GOLDEN IMAGE CAPTURE
    [Tags]    critical    MAT    CAPTURE-GI    TC52
    Set Log Level  TRACE
	Log to console    Golden Image Capture
	${NAME}=    Get From Dictionary     ${creategoldenimage[0]}   name
	${gic_body}=    Create GI Capture Payload	${creategoldenimage[0]}
	Log to console    ${gic_body}
	${Response}=    i3s Api Golden Image Capture  	${gic_body}	
	#Should Be Equal as Strings    ${Response['status_code']}	202		msg=Failed to Create GoldenImage with POST failure
	#Run Keyword If    ${Response['status_code']}==202   Wait For GIC Complete  ${Response}    ${NAME}



Create Server profile Template with automatic ManagementNIC
    [Documentation]    67-Create two Server profile Template with automatic ManagementNIC (SY 480 Gen9 1 and SY 480 Gen9 2)
    [Tags]    TC53    SPT

    Set Log Level    TRACE
    ${spts} =    copy.deepcopy    ${sp_templates}
    :FOR    ${spt}    IN    @{spts}
    \    Log    \nCreating Server Profile Template: ${spt['name']}    console=yes
    \    ${spt_body}=    Create Server Profile Template Payload    ${spt}
    \    ${responses}=    Fusion Api Create Server Profile Template    ${spt_body}
    \    Wait For Task2    ${responses}    timeout=60    interval=10


Create SP using SPT
    [Documentation]    68-Create SP using SPT
    [Tags]    TC54    SP-SPT

    Set Log Level    TRACE
	${responses}=    Create List
    :For    ${sp}    IN    @{sp_from_spt}
    \    ${pay_load}=    Create Server Profile POST Payload from SPT    ${sp}
    \    ${response}=    Fusion API Create Server Profile    ${pay_load}	param=?force=ignoreServerHealth    api=${None}  headers=${None}
	\	 Append to List  ${responses}  ${response}
    Wait For Task2    ${responses}    timeout=600    interval=15

Verify OS volume is created in i3s when SP is created
    [Documentation]   69-Verify OS volume is created in i3s when SP is created.
    [Tags]            TC55
    ${sp_body} =    Copy Dictionary    ${spt_profile}
    

    Log    \nVerifying whether OS Volume is assigned to server profile '${sp_body['name']}'
    ${os_vol}=    Get OS Volume From Server Profile    ${sp_body['name']}
    Should not be equal as strings    '${os_vol}'    'None'    msg=OS volume should be assigned to server profile '${sp_body['name']}'
	
	
Unassign hardware from SP
    [Documentation]    70- Unassigning hardware from SP
    [Tags]    TC56    UNASSIGN-SP

    Set Log Level    TRACE
    ${profile} =    copy.deepcopy    ${spt_profile}
    ${sp} =    Get From Dictionary    ${spt_profile}    name
    Pop From Dictionary    ${profile}    serverHardwareUri

    ${payload} =  Create Server Profile Put Payload  ${profile}
    ${profile_dto} =     Get Resource  SP:${sp}
    ${profile_etag} =     Get From Dictionary        ${profile_dto}    eTag
    ${profile_uri} =  Get From Dictionary        ${profile_dto}  uri
    Set to dictionary    ${payload}    eTag    ${profile_etag}
    ${resp} =     Fusion Api Edit Server Profile    body=${payload}    uri=${profile_uri}    param=?force=ignoreServerHealth
    Wait For Task2    ${resp}    timeout=600    interval=15

Verify OS volume not retained when SP is made unassigned
    [Documentation]    71-Verify OS volume is retained when SP is made unassigned
    [Tags]    TC57
    ${sp_body} =    Copy Dictionary    ${spt_profile}
    
	Log    \nVerifying whether OS Volume is assigned to server profile '${sp_body['name']}'
    ${os_vol}=    Get OS Volume From Server Profile    ${sp_body['name']}
    Should be equal as strings    '${os_vol}'    'None'    msg=OS volume not retained when sp unassigned '${sp_body['name']}'


Assign hardware to Unassigned SP
    [Documentation]    72-Reassigning hardware to SP
    [Tags]    TC58    ASSIGN-HW-SP

    Set Log Level    TRACE
    ${profile} =    copy.deepcopy    ${spt_profile}
    ${sp} =    Get From Dictionary    ${spt_profile}    name

    ${payload} =  Create Server Profile Put Payload  ${profile}
    ${profile_dto} =     Get Resource  SP:${sp}
    ${profile_etag} =     Get From Dictionary        ${profile_dto}    eTag
    ${profile_uri} =  Get From Dictionary        ${profile_dto}  uri
    Set to dictionary    ${payload}    eTag    ${profile_etag}
    ${resp} =     Fusion Api Edit Server Profile    body=${payload}    uri=${profile_uri}    param=?force=ignoreServerHealth
    Wait For Task2    ${resp}    timeout=600    interval=15
	
Verify OS volume is retained when SP is made reassigned back from unassigned sp
    [Documentation]    73-Verify OS volume is retained when SP is made reassigned 
	[Tags]    critical     TC59
    ${sp_body} =    Copy Dictionary    ${spt_profile}
    Log    \nDelete server profile '${sp_body['name']}' if already exist
    	
	
    Log    \nVerifying whether OS Volume is retained after unassining profile '${sp_body['name']}'
    ${os_vol}=    Get OS Volume From Server Profile    ${sp_body['name']}
    Should Not be equal as strings    '${os_vol}'    'None'    msg=OS volume is created for server profile
	
Verify OS volume is deleted and cannot be retained when corresponding SP is deleted (force)
    [Documentation]    74-Verify OS volume is deleted and cannot be retained when corresponding SP is deleted (force)
    [Tags]             TC60
    ${sp_body} =    Copy Dictionary    ${serverprofile_3enc}
    Log    \nDelete server profile '${sp_body['name']}' before proceeding to create
    Delete Server Profile    ${sp_body['name']}

    ${responses}=  Add Server Profile  ${serverprofile_3enc}
    Run Keyword If  ${responses} is not ${null}  Run Keyword And Continue On Failure   Wait For Task2  ${responses}
    ...  timeout=1200  interval=5

    Log    \nVerifying whether OS Volume is assigend to profile '${sp_body['name']}'
    ${osVolUri} =    Get Server Profile OS Volume URI    ${sp_body['name']}
    ${os_vol}=    Get OS Volume From Server Profile    ${sp_body['name']}
    Should not be equal as strings    '${os_vol}'    'None'    msg=OS volume should be assigned to server profile '${sp_body['name']}'
    
    Delete Server Profile    ${sp_body['name']}
    ${resp1}=    Get Resource by URI    ${osVolUri}
    Run Keyword If    '${resp1['status_code']}' == '404'    Log    \nOS volume is deleted after deleting SP '${sp_body['name']}'    console=True
    ...    ELSE    Fail    Failed to delete profile OS volume after deleting profile

Power off all SP
    [Documentation]    75-Power off all SP
    [Tags]    TC61

    Set Log Level    TRACE
    Log    Powering off Server profiles    console=True
    Power off Servers in Profiles    ${sp_from_spt}

Delete all SP
    [Documentation]    76-Delete all SP
    [Tags]    TC62    R-SP
	
    Set Log Level    TRACE
	Remove All Server Profiles  force=${True}


Delete all SPT
    [Documentation]    77-Delete all SPT
    [Tags]    TC63    R-SP
	
    Set Log Level    TRACE
	Remove All Server Profile Templates  

    Set Log Level    TRACE
	Remove All Server Profiles  force=${True}
#    Power off Servers in Profiles    ${sp_from_spt}
#    ${responses} =    Remove Server Profiles from variable    ${sp_from_spt}
#    Run Keyword If    ${responses} is not ${null}    Wait For Task2    ${responses}
#     ...    timeout=2000    interval=5
#    Server Profile Should Not Exist    ${sp_from_spt}

Delete LE
    [Documentation]    78-Delete LE
    [Tags]    TC64    R-LE

    Set Log Level    TRACE
    ${uri} =    Get Logical Enclosure URI    ${les_3enc['name']}
    ${resp} =     fusion api delete logical enclosure    uri=${uri}    param=?force=True
    Wait For Task2    ${resp}    timeout=900    interval=20


Delete OSDS
    [Documentation]    79-Delete OSDS
    [Tags]    TC67    R-OSDS

    Set Log Level    TRACE
    Log    Deleting OSDS '${osdeploymentserver['name']}' from oneview    console=True
    ${resp} =    Fusion Api Delete Os Deploymentserver    ${osdeploymentserver['name']}
    Wait For Task2    ${resp}    timeout=900    interval=20
	

Remove/insert both i3s after OSDS delete complete
    [Documentation]    80-Remove/insert both i3s after OSDS delete complete
    [Tags]    TC68    R-I3S
    Sleep   360s
    Set Log Level    TRACE
    ${authtoken} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    Log    ${authtoken[0]['sessionID']}    console=True
    ${id} =    Open Connection    ${fusion_IP}
    Login    root    hpvse1

    Log    Powering on I3S....
    :For    ${image_streamer}    In    @{i3s_hosts}
	\    ${em_ipv6} =    Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${image_streamer['encl_serial_number']}
	\    ${em_oath} =    Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${image_streamer['encl_serial_number']} -o t
	\    ${eFuseOn} =    Set Variable    curl -kgX POST -H 'x-auth-token: ${em_oath}' https://[${em_ipv6}%bond0]/rest/v1/CIManagerBays/${image_streamer['bay']} -d '{"Action":"EFuseOn"}'
    \    ${resp} =    Execute Command    ${eFuseOn}
	\    Sleep    360s
	\    ${eFuseOff} =    Set Variable    curl -kgX POST -H 'x-auth-token: ${em_oath}' https://[${em_ipv6}%bond0]/rest/v1/CIManagerBays/${image_streamer['bay']} -d '{"Action":"EFuseOff"}'
    \    ${resp} =    Execute Command    ${eFuseOff}	
	Sleep    960s

    Log    Check I3S appliances webapps started
    ${i3s_appliances_count} =    Get Length    ${i3s_appliances}
    :FOR    ${x}    IN RANGE    0    ${i3s_appliances_count}
      \    ${ip} =     Get From List    ${i3s_appliances}    ${x}
      \    Wait Until Keyword Succeeds    10min    3sec    Wait for appliance webapps to startup    ${ip}

Recreate OSDS
    [Documentation]    81-Recreate OSDS
    [Tags]    TC69    Recreate-OSDS

    Set Log Level    TRACE
    Log    Create Deployment Server    console=True
    ${osds_body} =    Create Deployment Server Payload    ${osdeploymentserver}    ${osdeploymentserver['name']}
    ${response} =    Fusion Api Create OS DeploymentServer    ${osds_body}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to Create OSDS
    Wait For Task2    ${response}    timeout=1500    interval=20

	
Fusion Api Logout Appliance
    [Documentation]    82-Logout appliance
    [Tags]    TC69    OV logout
    Fusion Api Logout Appliance

Login to OV Appliance using Ipv4
    [Documentation]    83-login
    [Tags]    TC69    Relogin
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${response}    ${sessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}

Recreate LE
    [Documentation]    84-Recreate LE
    [Tags]    TC69    Recreate-LE
    Add Logical Enclosure from variable    ${les_3enc1}



REGet i3s Appliance Cluster IP and Login
    [Documentation]    85-Get i3s Appliance Cluster IP and Login
    [Tags]    critical    MAT    LOGIN-I3S    TC73
    ${resp} =    Fusion Api Get i3sCluster IP
    ${i3S_ip} =    Get From Dictionary    ${resp['members'][0]}    primaryIPV4
    ${admin_credentials} =    Create Dictionary    userName=${DEFAULT_USER}
    ...                                            password=${NEW_PASSWORD}
    Set Suite Variable    ${admin_credentials}    ${admin_credentials}
    ${response}    ${SessionId} =    Fusion Api Login Appliance    ${fusion_IP}    ${admin_credentials}
    I3S API LOGIN APPLIANCE    ${i3S_ip}    ${SessionId}

ReAdd Artifact Bundle
    [Documentation]    86-REAdd Artifact Bundle
    [Tags]    critical    MAT    READD-AB    TC74
    ${name} =    Get From Dictionary    ${artifactbundle_add}    name
    Log    \Add Artifact Bundle ${name}.    console=True
    ${response} =    i3s Api Add Artifact Bundle    ${name}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to add Artifact Bundle.
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle
	
ReExtract Artifact Bundle
    [Documentation]    87-REExtract Artifact Bundle
    [Tags]    critical    MAT    REEXTRACT-AB    TC75
    ${name} =    Get From Dictionary    ${artifactbundle_extract}    name
    Log    \Extract Artifact Bundle ${name}.    console=True
    ${ab_uri} =    Get ArtifactBundle Uri    ${name}
    ${response} =    i3s Api Extract Artifact Bundle    ${ab_uri}
    Should Be Equal as Strings    ${response['status_code']}    202    msg=Failed to extract Artifact Bundle.
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${resp}=    i3s API Wait For Task To Complete	${response['headers']['Location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${errors}=    Get From Dictionary    ${resp}    taskErrors
	${errCount}=    Get Length    ${errors}
	Should be True    ${errCount} == 0    msg=Errors encountered while adding Artifact Bundle
    Sleep  25min

ReCreate Server Profile
    [Documentation]    88-RECreate Server Profile with user specific ManagementNIC
    [Tags]    READD-SP    MAT    TC76

    ${responses}=  Add Server Profile  ${serverprofile_3enc}
    Run Keyword If  ${responses} is not ${null}  Run Keyword And Continue On Failure   Wait For Task2  ${responses}
    ...  timeout=1200  interval=5

Remove blade by Efuse then validate profile
    [Documentation]    89-I3S SP Volume validation by removing corosponding Blade
    #${blade_details}=    Get blade details by profile     ${serverprofile_3enc}
	${sp_body} =    Copy Dictionary    ${serverprofile_3enc}
    ${name} =  Get From Dictionary  ${serverprofile_3enc}  name
    ${profile}=    Get Resource  SP:${name}
    Log to console and logfile  	\t Efuse On for profile ${name}
    Efuse blade by profile    ${serverprofile_3enc}    EFuseOn
    Log to console and logfile  	\t Waiting for profile to be in Normal state
    Wait Until Keyword Succeeds    10 min   2s        Profile In Normal State    ${profile}
    Log to console and logfile  	\t Waiting for profile to be in Critical Status
    Wait Until Keyword Succeeds    5 min   90s        Profile In Critical Status    ${profile}
    Sleep  20s
	

Reinsert blade by Efuse then validate profile   
    [Documentation]   90-I3S SP Volume Rejoining Validation after reinsert back corosponding Blade
    ${sp_body} =    Copy Dictionary    ${serverprofile_3enc}
    ${name} =  Get From Dictionary  ${serverprofile_3enc}  name
    ${profile}=    Get Resource  SP:${name} 
    Log to console and logfile  	\t Efuse Off for profile ${name}
    Efuse blade by profile    ${serverprofile_3enc}    EFuseOff
    Log to console and logfile  	\t Waiting for profile to be in Updating state
    Wait Until Keyword Succeeds    10 min   10s        Profile In Updating State    ${profile}
    Log to console and logfile  	\t Waiting for profile to be in Normal state
    Wait Until Keyword Succeeds    10 min   2s        Profile In Normal State    ${profile}
    Log to console and logfile  	\t Waiting for profile to be in OK state
    Wait Until Keyword Succeeds    10 min   20s        Profile In OK Status    ${profile}
    Sleep  20s
    
	Log    \nVerifying whether OS Volume Rejoined after reinserting blade to profile '${sp_body['name']}'
    ${os_vol}=    Get OS Volume From Server Profile    ${sp_body['name']}
    Should Not be equal as strings    '${os_vol}'    'None'    msg=OS volume Rejoined after Reinserted Blade
Add Server Profile Templates
	[Documentation]    91-Create Server Profile Template
    [Tags]    SPT    MAT
    ${clrm_mat_spt} =    copy.deepcopy    ${clrm_mat_spt_var}
    ${blnCreateSPT} =    Add Server Profile Templates from variable    ${clrm_mat_spt}	
	Wait For Task2    ${blnCreateSPT[0]}    timeout=10m    interval=1m    errorMessage=Remediate Failed	
	

Add Hypervisor Managers
	[Documentation]    92-Add Hypervisor Manager
    [Tags]    HM    MAT
    ${HM_IP}=    Get From Dictionary        ${Hypervisor_manager[0]}        name
    Import Certificate to OV    ${HM_IP}        ${OV_IP}    ${OV_credentials}        Vcenter
    Add Hypervisor Manager    ${Hypervisor_manager}    True    202

Add Hypervisor cluster
	[Documentation]    93-Add Hypervisor Cluster Profile
    [Tags]    HCP    MAT
	${create_cluster_response}=		Add Cluster Profile		${Cluster_payload}
	Wait For Task2    ${create_cluster_response[0]['task_resp']}    timeout=10m    interval=1m    errorMessage=Remediate Failed
	[Teardown]		Collect SupportDump on Failure

Delete Hypervisor Cluster
	[Documentation]    94-Delete Hypervisor Cluster Profile
    [Tags]    HCP    MAT	Cleanup
	Delete cluster profile		${Cluster_payload[0]["name"]}

Delete Hypervisor Manager1
	[Documentation]    95-Delete Hypervisor Manager
    [Tags]    HM    MAT		Cleanup
	${Delete_Hypervisor_Manager}=	Delete Hypervisor Manager		${Hypervisor_manager}	
	Wait For Task2    ${Delete_Hypervisor_Manager[0]['task_resp']}    timeout=10m    interval=1m    errorMessage=Remediate Failed
	

Delete SPT
	[Documentation]    96-Delete Server Profile Template
    [Tags]    SPT    MAT		Cleanup
	Remove Server Profile Templates from variable		${clrm_mat_spt_var}
