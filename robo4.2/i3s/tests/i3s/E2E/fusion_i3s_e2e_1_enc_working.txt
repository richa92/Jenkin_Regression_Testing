*** Settings ***
Documentation		Feature Test: Fusion i3S Integration

Resource            C:/RG_CODE/fusion_scale/tests/resource/fusion_api_all_resource_files.txt

Library				Collections
Library             json
Library				OperatingSystem
Library		        Selenium2Library 
Library				BuiltIn
Library				FusionLibrary
Library				RoboGalaxyLibrary
Library				i3SLibrary

Variables   		../../testdata/i3s_QA_testdata.py
Variables 		    data_variables_SE.py


*** Variables ***

${VAL_DELETE}				<Response [204]>
${POTASH}					Virtual Connect SE 40Gb F8 Module for Synergy
${CHLORIDE20}				Synergy 20Gb Interconnect Link Module
${GI_SLEEP}					600
${AB_SLEEP}					180
${timeout}					1800
${interval}					30


*** Test Cases ***

#Test Specific Setup
Login to Appliance
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		${fusion_IP}		${admin_credentials}	

#Create Subnet for mgmt and Associate to Network
CREATE SUBNET FOR MGMT
	${sub} =		Build SUBNET Body		${subnet}   	15.212.168.0
	${resp} = 			fusion_api_create_ipv4_subnet	 body=${sub}	
	${valDict} = 	Create Dictionary	status_code=${200}
	Validate Response	${resp}	${valDict}

CREATE RANGE-FOR MGMT
	${range}=   Build IPRange Body    	${ipv4ranges}      15.212.168.0    		mgmt_nw
	Log to console and logfile    ${range} 	
	:For  ${x}  in  @{range}
	\   ${resp}=  fusion_api_create_ipv4_range   	${x}
	\	Log to console and logfile    ${resp}
	\	Log to console and logfile    ${x}
	\   ${valDict} = 	Create Dictionary		status_code=${200}
	\	Log to console and logfile    ${valDict}
	\   Validate Response	${resp}	${valDict}

CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
	${network_body}=	Build Network Body With Subnet Uri		${Ethernet_network_1}		mgmt_nw		15.212.168.0
	${resp} = 	Fusion Api Create Ethernet Network		body=${network_body}
	${valDict} = 	Create Dictionary	status_code=${202}
	Validate Response	${resp}		${valDict}

#Create Subnet for deploy and Associate to Network
CREATE SUBNET FOR iSCSI
	${sub} =		Build SUBNET Body		${subnet}   	192.168.0.0
	${resp} = 			fusion_api_create_ipv4_subnet	 body=${sub}	
	${valDict} = 	Create Dictionary	status_code=${200}
	Validate Response	${resp}	${valDict}

CREATE RANGE-FOR iSCSI
	${range}=   Build IPRange Body    	${ipv4ranges}      192.168.0.0    		iscsi_nw
	Log to console and logfile    ${range} 	
	:For  ${x}  in  @{range}
	\   ${resp}=  fusion_api_create_ipv4_range   	${x}
	\	Log to console and logfile    ${resp}
	\	Log to console and logfile    ${x}
	\   ${valDict} = 	Create Dictionary		status_code=${200}
	\	Log to console and logfile    ${valDict}
	\   Validate Response	${resp}	${valDict}

CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
	${network_body}=	Build Network Body With Subnet Uri		${Ethernet_network_1}		iscsi_nw		192.168.0.0
	${resp} = 	Fusion Api Create Ethernet Network		body=${network_body}
	${valDict} = 	Create Dictionary	status_code=${202}
	Validate Response	${resp}		${valDict}
	
# Create LIG and EG
CREATE LIG 
	Log to console    "Creating Logical Interconnect Group for Potash"	
	${ligs}=  Create LIG TBird Payload   ${lig_tbird_1enc}
	Log to Console and logfile    CreateLIG2 ${ligs['name']} 
	${Response}=  fusion api create lig     ${ligs}      
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to Create LIG.

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    15
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating LIG    level=WARN

	#[Return]    ${Response} 	
 
CREATE EG
	Log to console    Create Enclosure group
	${enc_body} =		Create EG Body		${enc_groups_tbird_1enc}      
	${resp} =		Fusion Api Create Enclosure Group	${enc_body}      
	${valDict} = 	Create Dictionary	status_code=${201}      
	Validate Response	${resp}	${valDict}
	  
# Create OS Deployment Server
Create OS Deployment Server	
	Log to console    Create Deployment Server
	${osds_body}=		Create Deployment Server Payload		${osdeploymentserver}		OSDS-1enc
	${Response}=		Fusion Api Create OS DeploymentServer	${osds_body} 
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to Create OSDS
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    10
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating OSDS    level=WARN
	#[Return]    ${Response}

#Create LE 	
Create Logical Enclosure
	#[Arguments]		${LE NAME}=LE-1enc		${EG Name}=EG-1enc
	
	#Get enclosureGroupUri
	${Response}=            Fusion Api Get Enclosure Groups     
	${members}=             Get From Dictionary                 ${Response}     members
	Log to console and logfile		${members}
	${member}=              Get From List                       ${members}      0
	${enclosureGroupUri}=   Get From Dictionary                 ${member}       uri

	# Get enclosureUri
	${Response}=        Fusion Api Get Enclosures
	${members}=         Get From Dictionary     ${Response}     members
	${member}=          Get From List           ${members}      0
	${enclosureUri}=    Get From Dictionary     ${member}       uri
	${enclosureUris}=   Create List             ${enclosureUri}

	# Build Payload
	${LE Payload}=      Fusion API Create Logical Enclosure Payload     name=LE-1enc
	...                 enclosureGroupUri=${enclosureGroupUri}
	...                 enclosureUris=${enclosureUris}

	${NicelyFormattedJsonString}    dumps   ${LE Payload}      indent=${4}     sort_keys=${True}
	Log     ${NicelyFormattedJsonString}

	# Create Logical Enclosure
	${Response}=        Fusion Api Create Logical Enclosure         body=${LE Payload}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create Logical Enclosure.

	# Wait for task to complete
	${Retry Interval}    Convert To Number    120
	${Retries}           Convert To Integer    40
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating Logical Enclosure.
	#[Return]    ${Response}
	
	  
# Create all the required Artifacts in i3s appliance

Get i3s Appliance Cluster IP and Login	
	${resp} = 	Fusion Api Get i3sCluster IP
	${i3S_IP} = 	Get From Dictionary		${resp['members'][0]}	primaryIPV4	
	Log to console and logfile		${i3S_IP}
	# Login to i3s appliance
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		${fusion_IP}		${admin_credentials}	
	I3S API LOGIN APPLIANCE		${i3S_IP}		${SessionId}
	 	
Add Golden Image
    ${NAME}=    Get From Dictionary     ${goldenimage}    name
    ${DESC}=    Get From Dictionary     ${goldenimage}    description
    ${LOCAL_FILE}=    Get From Dictionary    ${goldenimage}    file
    ${Response}=    i3s Api Add Golden Image    ${LOCAL_FILE}    param=?name=${NAME}&description=${DESC}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to create GoldenImage
    Run Keyword If    ${Response['status_code']}==202    Wait For GI Complete  ${Response}   ${NAME}


Create Plan Script
    Set Log Level  TRACE
    ${Response} =    I3s Api Create Plan Scripts    ${planscript}
    Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create PS

	
Create OSBuildplan
	${bp_body}=    CREATE BUILD PLAN PAYLOAD    ${buildplan}
	${Response}=    i3S_api_create_buildplan    ${bp_body}
	Should Be Equal as Strings    ${Response['status_code']}	201		msg=Failed to Create Build Plan with Type Deploy
	
Create OEDeploymentplan
	${dp_body} =    Create Deploymentplan Payload    ${deploymentplan}
	${Response} =    i3s Api Create Deploymentplan    ${dp_body}
	Should Be Equal as Strings    ${Response['status_code']}    201    msg=Failed to Create DeploymentPlan

# Artifact Bundle operations	
Create Artifact Bundle
	Log to console    Create Artifact Bundle
	${ab_body}=		Create Artifact Bundle Payload	${artifactbundle}
	${Response}=		i3s Api Create Artifact Bundle	${ab_body}
	Should Be Equal as Strings    ${Response['status_code']}	202		msg=Failed to Create AB
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${Resp}=    i3s API Wait For Task To Complete	${Response['location']}		sleep_time=${Retry Interval}	retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating AB    level=WARN
    
Get Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Get Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to Get Artifact Bundle.     

Download Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Download Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Download Artifact Bundle	param=?filter="'name'=='${NAME}'"
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to download Artifact Bundle.
    
Update Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle}	name
    Log To Console    \Update Artifact Bundle ${NAME}.
    ${ab_uri}=	Get ArtifactBundle Uri	${NAME}
    Log To Console	${ab_uri}
    ${Response}=    i3s Api Update Artifact Bundle	${artifactbundle_update}	${ab_uri}
    Should Be Equal as Strings    ${Response['status_code']}    200    msg=Failed to update artifact bundle. 
    
Delete Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle_update}	name
    Log To Console    \nDeleting Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Delete Artifact Bundle    ${NAME}
    Should Be Equal As Strings		${Response}	${VAL_DELETE}    
   
Add Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle_add}	name
    Log To Console    \Add Artifact Bundle ${NAME}.
    ${Response}=    i3s Api Add Artifact Bundle	 ${NAME}
    Log to console and logfile	${Response}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to add Artifact Bundle.
    # Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20	
	${Resp}=    i3s API Wait For Task To Complete	${Response['headers']['location']}		sleep_time=${Retry Interval}	retries=${Retries}	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating AB    level=WARN
		
Extract Artifact Bundle
	${NAME}=	Get From Dictionary		${artifactbundle_extract}	name
    Log To Console    \Extract Artifact Bundle ${NAME}.
    ${ab_uri}=	Get ArtifactBundle Uri	${NAME}    
    ${Response}=    i3s Api Extract Artifact Bundle		${ab_uri}
    Should Be Equal as Strings    ${Response}    <Response [202]>    msg=Failed to extract Artifact Bundle.
    Sleep	${AB_SLEEP}
    # Wait for task to complete , commenting this code as RM is not returninf correctly
	#${Retry Interval}    Convert To Number     20
	#${Retries}           Convert To Integer    20
	#Log to console and logfile	Navithaaaaaaaa
	#Log to console and logfile	${Response['headers']['location']}
	#${Resp}=    i3s API Wait For Task To Complete	${Response['headers']['location']}		sleep_time=${Retry Interval}	retries=${Retries}	

	
Create Server Profile
#CREATE SP i3s_sp_for_SE
	Log to console    Create Server Profile
	# We should call Create Server Profile Payload NIC when we have NIC attributes as it has additional connection
	${sp_body}=		Create Server Profile Payload		${serverprofile_1enc}	      
	${Response}=    Fusion API Create Server Profile    ${sp_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    15
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
	...    Log    Errors encountered while creating Server Profile.    level=WARN

	#[Return]    ${Response} 
	
Power On Server
	[Documentation]		Power On Server Hardware
	${blade_info}=	Get From Dictionary		${BLADES}	Blade1
	Log to Console and Logfile	${blade_info}
	${ServerHwUri}=		Get Server Hardware Uri		${blade_info}	
	${Payload}=		Create Dictionary		powerState=On
	...										powerControl=MomentaryPress
	${Response}=		Fusion Api Edit Server Hardware Power State		${Payload}		${ServerHwUri}
	${taskuri}=		Get From Dictionary		${Response}		uri
	${retries}=		Convert To Integer		10
	${sleep_time}=		Convert To Integer		20
	${Resp}=		Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power On Server Successfully
	
Power Off Server
	[Documentation]		Power Off Server Hardware
	${blade_info}=	Get From Dictionary		${BLADES}	Blade1
	Log to Console and Logfile	${blade_info}
	${ServerHwUri}=		Get Server Hardware Uri		${blade_info}
	${Payload}=		Create Dictionary		powerState=Off
	...										powerControl=PressAndHold
	${Response}=		Fusion Api Edit Server Hardware Power State		${Payload}		${ServerHwUri}
	${taskuri}=		Get From Dictionary		${Response}		uri
	${retries}=		Convert To Integer		10
	${sleep_time}=		Convert To Integer		20
	${Resp}=	Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully
	
#Delete
Delete Server Profile
    #[Arguments]    ${NAME}=${SP NAME}
    ${NAME}=	Get From Dictionary		${serverprofile_1enc}	name
    Log To Console    \nDeleting Server Profile ${NAME}.
    ${Response}=    Fusion API Delete Server Profile    ${NAME}
    Should Not Be Equal    ${Response}    ${None}    msg=Server Profile ${Name} not found.
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Delete Server Profile ${Name}.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    5
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while deleting Server Profile.    level=WARN

    ${Response}=    Fusion API Get Server Profiles    param=?filter="name='${NAME}'"
	Should Be Equal as Integers    ${Response['count']}    0    msg=Failed to delete Server Profile ${Name}   

 DELETE LE-LE_1_Encl
	${leuri}=   	Get Logical Enclosure URI	 LE-1enc
	${Response}=	Fusion Api Delete Logical Enclosure		uri=${leuri}	param=?force=True
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to delete Logical Enclosure.

	# Wait for task to complete
	${Retry Interval}    Convert To Number    60
	${Retries}           Convert To Integer    40
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating Logical Enclosure.
	
DELETE ENCLOSURE GROUP
	${encuri}=		Get Enclosure Group URI		EG-1enc
	${resp}=	Fusion Api Delete Enclosure Group	uri=${encuri}
	${valDict} = 	Create Dictionary	status_code=${204}
	Validate Response	${resp}	${valDict}
	
DELETE LIG
	${lig_uri}=		Get LIG URI	  LIG-1enc
	Log		${lig_uri}
	${Response}=	Fusion Api Delete LIG	uri=${lig_uri}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to Create LIG.

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    15
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating LIG    level=WARN

#DELETE ALL THE ARTIFACTS CREATED
Delete Deploymentplan
	${NAME} =    Get From Dictionary    ${deploymentplan}    name
    Log To Console    \nDeleting Deploymentplan:\t    ${NAME}
    ${Response} =    i3s Api Delete Deploymentplan    ${NAME}
    Should Be Equal As Strings    ${Response['status_code']}    204    msg=Failed to delete Deploymentplan
    
Delete Build Plan
	${NAME}=	Get From Dictionary		${buildplan}	name
    Log To Console    \nDeleting Build Plan ${NAME}.
    ${Response}=    i3S api delete buildplan    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to Delete Build Plan
    
Delete Planscript
    ${NAME} =    Get From Dictionary    ${planscript}    name
    ${Response} =    i3s Api Delete Plan Scripts    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    204    msg=Failed to delete GoldenImage
    
Delete Golden Image
    ${NAME}=    Get From Dictionary    ${goldenimage}    name
    Log To Console    Deleting goldenimag   ${NAME}.
    ${Response}=    i3s Api Delete Golden Image    ${NAME}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to delete GoldenImage

DELETE OS DEPLOYMENT SERVER
	#Delete OS Deployment Server
	${Response}=		Fusion Api Delete OS DeploymentServer	OSDS-1enc
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to delete OSDS

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    15
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating LIG    level=WARN
		
DELETE MGMT NETWORK
	${neturi}=	Get Ethernet URI	mgmt_nw
	${resp}=	Fusion Api Delete Ethernet Network 		uri=${neturi}
	${valDict} = 	Create Dictionary	status_code=${202}
	Validate Response	${resp}	${valDict}
	
DELETE DEPLOY NETWORK
	${neturi}=	Get Ethernet URI	iscsi_nw
	${resp}=	Fusion Api Delete Ethernet Network 		uri=${neturi}
	${valDict} = 	Create Dictionary	status_code=${202}
	Validate Response	${resp}	${valDict}

DELETE RANGE for MGMT
	${subnets}=	Get Subnet		15.212.168.0
    ${uri}=			Get from Subnet				${subnets}			uri
    ${resp} =   fusion api get ipv4 subnet		uri=${uri}
    ${rangeuri} =     Get From Dictionary     ${resp}    rangeUris
    ${resp}=	fusion api delete ipv4 range	uri=${rangeuri[0]}	
	${valDict} = 	Create Dictionary	status_code=${204}
	Validate Response	${resp}	${valDict}
	
DELETE RANGE for DEPLOY
	${subnets}=	Get Subnet		192.168.0.0
    ${uri}=			Get from Subnet				${subnets}			uri
    ${resp} =   fusion api get ipv4 subnet		uri=${uri}
    ${rangeuri} =     Get From Dictionary     ${resp}    rangeUris
    ${resp}=	fusion api delete ipv4 range	uri=${rangeuri[0]}	
	${valDict} = 	Create Dictionary	status_code=${204}
	Validate Response	${resp}	${valDict}
    
DELETE SUBNET for MGMT
	${subnets}=   Get Subnet	15.212.168.0
	${uri}=    Get from Subnet		${subnets}			uri
	${resp} =       fusion_api_delete_ipv4_subnet   		 uri=${uri}
	${valDict} = 	Create Dictionary	status_code=${204}
	Validate Response	${resp}	${valDict} 
	
DELETE SUBNET for DEPLOY
	${subnets}=   Get Subnet	192.168.0.0
	${uri}=    Get from Subnet		${subnets}			uri
	${resp} =       fusion_api_delete_ipv4_subnet   		 uri=${uri}
	${valDict} = 	Create Dictionary	status_code=${204}
	Validate Response	${resp}	${valDict}
	
#-------------------- Build the required JSON body-----------------------------------
*** Keywords ***

Get ArtifactBundle Uri
	[Arguments]		${Name}	
    ${resp}=    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"    
    ${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}  

Get Deploymentplan Uri
	[Arguments]		${dpuri}
	${resp} = 	i3s Get Deploymentplan		param=?filter="'name'=='${dpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	[Return]	${uri}	
	
Create Artifact Bundle Payload
	[Arguments]		${artifactbundle}	
	${ab_body} =  Copy Dictionary  ${artifactbundle}	
	#Deploymentplan URI	
	${dp_body} = 	Get from Dictionary	${ab_body}	deploymentPlans	
	${dpuri} =	Get From Dictionary  ${dp_body[0]}  resourceUri	
	${uri} = 	Get Deploymentplan Uri		${dpuri}	
	Set to Dictionary	${dp_body[0]}  resourceUri	${uri}	
	[Return]	${ab_body}	

Get Subnet
	[Arguments] 			${NETWORK_ID}	
	${resp} =   fusion api get ipv4 subnet	
	${subnetcounts} =     Get From Dictionary     ${resp}    members
	${l} = 	Get Length	${subnetcounts}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${subnet} =     Get From List   ${subnetcounts}    ${x}
    \	Exit For Loop If 	'${subnet['networkId']}' == '${NETWORK_ID}'
	[Return]    ${subnet}
	#Log			${subnet}

Get from Subnet
	[Arguments]     ${subnet_list}   	${element}    
	${return} =     Get From Dictionary     ${subnet_list}			${element}  
	[Return]    ${return}
   
Get OSDP URI
	[Arguments]		${osdp}
	${resp} = 	Fusion Api Get OS Deploymentplan		param=?filter="'name'=='${osdp}'"
	Log to console and logfile		${resp}
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	[Return]	${uri}	
	
Get Appliance URI	
	[Arguments]		${appliance}	
	${resp} = 	Fusion Api Get i3sAppliance Uri		param=?filter="'name'=='${appliance}'"	
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	[Return]	${uri}

Build Network Body With Subnet Uri
	[Documentation]	Select the Subnet Uri and add in the Subnet Uri field of the Request Body to create a Network and associate the Subnet
	#[Aguments]			${Ethernet_network_1}		${NETWORK_ID}
	[Arguments]		${networks}		${networkname}	${NETWORK_ID}
	${subnets}=    Get Subnet        ${NETWORK_ID}
    ${uri}=         Get from Subnet         ${subnets}              uri
	Log		${uri}
	#Log		${networkname}
	Log to console and logfile  	Adding ETHERNET NETWORKS
	:FOR	${network1}	IN	@{networks}	
	\		${networkname1} =	Get From Dictionary		${network1}		name	
	\		Run Keyword If	'${networkname}'!='${networkname1}'		Continue For Loop
	\		Set to dictionary    		${network1}     		subnetUri=${uri}
	\		${network_body}=	Copy Dictionary 	${network1}	
	[Return]	${network_body}
	
Build IPRange Body
	[Arguments]   	${ipv4ranges}   	${NETWORK_ID}    	${RANGE_NAME}	
	${subnets}=    Get Subnet        ${NETWORK_ID}
	${uri}=         Get from Subnet         ${subnets}              uri      
	${ipv4_1}=  Create List 
	:For  ${ipv4}  IN   @{ipv4ranges}
	\           ${name} =   Get From Dictionary   ${ipv4}  name      
	\           Run Keyword If    '${name}'!='${RANGE_NAME}'        Continue For Loop      
	\           Set to dictionary    		${ipv4}     		subnetUri=${uri}      
	\           Append to List    ${ipv4_1}    	${ipv4}
	[Return]   ${ipv4_1}

Build SUBNET Body
	[Arguments]   	${subnet}   	${SUBNET_SELECT}    
	Log 				"Subnet ":${subnet}
	${subnet_ret}=     Create Dictionary
	:For  ${subnetdetails}  IN   @{subnet}
	\		Log 		${subnetdetails}
	\     ${networkId} =   Get From Dictionary   ${subnetdetails}  networkId
	\		Log			${networkId}
	\		Log			${SUBNET_SELECT}
	\		Run Keyword If    '${networkId}'!='${SUBNET_SELECT}'        Continue For Loop
	\		Log 			"Subnet Matching ":${subnetdetails}
	\		${subnet_ret}=		Copy Dictionary		${subnetdetails} 	
	Log 		"Val Subnet_ret":${subnet_ret}
	[Return]	${subnet_ret} 
   
Create LIG TBird Payload
	[Arguments]       ${ligs}
	Set Log Level    Trace
	${Potash}=   Get Interconnect Type URI     ${POTASH}
	#${Chloride}=     Get Interconnect Type URI    ${CHLORIDE20}
	${Response}=   Get From Dictionary     ${ligs}    interconnectMapTemplate
	${interconnectMapEntryTemplates}=		Create List
	${interconnectMapEntryTemplates1}=	Get From Dictionary     ${Response}     interconnectMapEntryTemplates
	:For   ${item}   IN   @{interconnectMapEntryTemplates1}
	\     ${ICM}=    Get From Dictionary    ${item}   permittedInterconnectTypeUri
	\   Run keyword If   '${ICM}' == 'Virtual Connect SE 40Gb F8 Module for Synergy'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Potash}
	\   Run keyword If   '${ICM}' == '${CHLORIDE20}'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${CHLORIDE20}
	\   Append To List    ${interconnectMapEntryTemplates}     ${item}
	# Create LIG Body
	${ls}=    Set to Dictionary     ${Response}   interconnectMapEntryTemplates=${interconnectMapEntryTemplates}
	Set to Dictionary   ${ligs}         interconnectMapTemplate=${Response}  
       
	${uplinkSets1}=	Get From Dictionary  ${ligs}   uplinkSets
	${uplinkSets2}=	Create List 
	${fcnetworkuri}=		Create List
	${ethnetworkuri}=		Create List      
	:FOR  ${x}  IN    @{uplinkSets1}
	\     ${networkType}=		Get From Dictionary     ${x}  networkType
	\     ${networks} =           Get From Dictionary           ${x}  networkUris
	\     Run Keyword If    '${networkType}' == 'Ethernet'            Continue For Loop
	\     ${networkUris}=		Get FC Uris ${networks}
	\    Append to List    ${fcnetworkuri}   ${networkUris}	
	\		Log to Console and logfile THIS IS NOT FOR ETHERNET
	\     log to console and logfile   ${networkUris}
	\     Set to dictionary	${x}	networkUris=${networkUris}
	\		Log to Console and logfile IAM I APPENDING HERE
	\     Append to List    ${uplinkSets2}    ${x}
	log to console and logfile   ${uplinkSets2}

	:FOR  ${x}  IN    @{uplinkSets1}
	\     ${networkType}=		Get From Dictionary     ${x}  networkType
	\     ${networks} =		Get From Dictionary           ${x}  networkUris
	\		Log to Console and logfile	${networkType}
	\		Log to Console and logfile	${networks}
	\     Run Keyword If    '${networkType}' == 'FibreChannel'  Continue For Loop
	\     ${networkUris}=		Get FCoE Uris     ${networks}
	\		Log to Console and logfile 	${networkUris}
	\   ${ethernetUris}=		Get Ethernet URIs   ${networks}
	\		Log to Console and logfile		${ethernetUris}
	\   ${networkUris}=			combine lists   ${networkUris}  ${ethernetUris}
	\		Log to Console and logfile		${networkUris}
	\		Log to Console and logfile		${x}
	#\      Append to List    ${ethnetworkuri}  ${networkUris}
	\     Set to dictionary	${x}	networkUris=${networkUris}
	\     Append to List    ${uplinkSets2}    ${x}
	log to console and logfile   ${uplinkSets2}
      
	Set to Dictionary		${ligs}     uplinkSets=${uplinkSets2}
	#log to console and logfile  ${ligs}
	[Return]   ${ligs}
      
Create EG Body
	[Documentation]	Adds Enclosure Group to an appliance from a variable which contains a list of dicts with the entire payload and also Associate a Range
	[Arguments]		${enc_groups}
	Log to console and logfile  	Adding ENCLOSURE GROUP
	${enc_group_body} =  Copy Dictionary  ${enc_groups}	
	${Response}=   Get From Dictionary     ${enc_group_body}		osDeploymentSettings
	${deploymentSettings}=	Get From Dictionary     ${Response}		deploymentModeSettings
	${deployment}=	Get From Dictionary     ${deploymentSettings}		deploymentNetworkUri
	${ethernetUris}=		Get Ethernet URIs   ${deployment}
	Log to console and logfile		${ethernetUris[0]}		
	Set to dictionary	${deploymentSettings}		deploymentNetworkUri	${ethernetUris[0]}
	
    Log to console and logfile  	GET LIG URI
	${l} = 	Get Length	${enc_group_body['interconnectBayMappings']}
	:FOR 	${x}	IN RANGE	0	${l}
	\	${liguri} = 	Get From Dictionary	${enc_group_body['interconnectBayMappings'][${x}]}	logicalInterconnectGroupUri	
	\   Continue For Loop If    '${liguri}' == 'None'
	\	${liguri} = 	Common URI Lookup by name    ${liguri}
	\	Set to dictionary	${enc_group_body['interconnectBayMappings'][${x}]}	logicalInterconnectGroupUri		${liguri}	
	Log to console and logfile		ENC GROUP BODY VALUE	
	[Return]	${enc_group_body}
		
Get Logical Enclosure URI
	[Arguments]  ${name}
	${resp} = 	Fusion Api Get Logical Enclosure  param=?filter="'name' = '${name}'"
	${count} =  Get From Dictionary  ${resp}  count
	Return from keyword if  $count==0  '/bad_logical_enclosure_uri'
	${uri} = 	Get From Dictionary  ${resp['members'][0]}  uri
	[Return]	${uri}
	
Create Deployment Server Payload
	[Arguments]		${osdeploymentserver}	${osdp_name}
	Log to console and logfile  	Adding OSDS
	${osds_body}=	Copy Dictionary 	${osdeploymentserver}
	#Network URI
	${nwuri} = 	Get from Dictionary	${osds_body}	mgmtNetworkUri
	${uri} = 	Get Ethernet URIs		${nwuri}
	#Log to console and logfile		${uri[0]}
	Set to Dictionary	${osds_body}	mgmtNetworkUri	${uri[0]}	
	#APPLIANCE URI
	${appuri} =	Get From Dictionary  ${osds_body}  applianceUri	
	${uri} = 	Get Appliance URI		${appuri}	
	Set to Dictionary	${osds_body}	applianceUri	${uri}
	[Return]   ${osds_body}	   
 
Create Server Profile Payload
	[Documentation]	Create Server Profile Payload
	...				    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
	...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
	...                            "enclosureGroupUri":"EG:EG1",
	...							   "osdeployment settings" : "OSDP:OSDP1",
	...                           ...}	
	[Arguments]		${sp_groups}	
	Log to console and logfile  	Adding SERVER PROFILE	
	${payload} =  Copy Dictionary  ${sp_groups}	
	${shuri} = 	Get from Dictionary	${payload}	serverHardwareUri
	# Get Server Hardware Information
    ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${shuri}'"
    ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Check PowerState
    #Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.      
    ${ServerHwUri} = 	Get Server Hardware URI		${shuri}
	Log to console and logfile		${ServerHwUri}
	Set to Dictionary	${payload}	serverHardwareUri	${ServerHwUri}
	# Ensuring that Blade is Powered off before Server Profile creation
	${Bladeload}=		Create Dictionary		powerState=Off
	...										powerControl=PressAndHold
	${Response}=		Fusion Api Edit Server Hardware Power State		${Bladeload}		${ServerHwUri}
	${taskuri}=		Get From Dictionary		${Response}		uri
	${retries}=		Convert To Integer		10
	${sleep_time}=		Convert To Integer		10
	${Resp}=	Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully	
	# SHT
	${sht} =	Get From Dictionary  ${payload}  serverHardwareTypeUri
	${uri} = 	Get Server Hardware Type URI		${sht}
	Log to console and logfile		${uri}
	Set to Dictionary	${payload}	serverHardwareTypeUri	${uri}
	# EG	
	${eg} =		Get From Dictionary  ${payload}  enclosureGroupUri
	Log to console and logfile	${eg}
	${eg_uri} =  Get Enclosure Group URI    ${eg}	
	Set to Dictionary	${payload}	enclosureGroupUri	${eg_uri}	
	# Enclosure
	${enc} =   Get From Dictionary  ${payload}  enclosureUri
	Log to console and logfile		${enc}
	${enc_uri} =	Get Enclosure URI    ${enc}
	Log to console and logfile		${enc_uri}
	Set to Dictionary	${payload}	enclosureUri	${enc_uri}
	# Get OS DeploymentPlan
	${osdp} =   Get From Dictionary  ${payload}  osDeploymentSettings
	${osdp1} =           Get From Dictionary           ${osdp}  osDeploymentPlanUri
	${osdp_Uri} =	Get OSDP URI    ${osdp1}
	Log to console and logfile		${osdp_uri}
	Set to Dictionary	${payload['osDeploymentSettings']}	osDeploymentPlanUri=${osdp_uri}
	# Get Network URI
	${connection}=	Get From Dictionary  ${payload}   connections
	Log to console and logfile		VALUE IN CONNECTION
	${connection1} 		Get From List  ${connection}   0	
	${nwuri} =	Get From Dictionary		${connection1}  networkUri
	log to console and logfile   ${nwuri}
	${uri} = 	Get Ethernet URIs		${nwuri}
	Log to console and logfile		${uri[0]}	
	Set to Dictionary	${connection1}	networkUri=${uri[0]}
	Log to console and logfile		${payload}	
	[Return]   ${payload} 

GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
    ...    Log To Console    GV_created_successfully for ${NAME}
    ...    ELSE 
    ...    Log to Console    GV created but status yet to get updated to OK

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
	${Retries}    Convert To Integer    30
	${Resp}=    i3s API Wait For Task To Complete	${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}
	
	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating GI    level=WARN
	Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If	'${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length}=    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
        ...    ELSE
	    ...    Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}
            
GET PLANSCRIPT URI
	[Arguments]    ${psuri}
	${resp} =    I3S GET PLANSCRIPT    param=?filter="'name'=='${psuri}'"
	${uri} =    Get From Dictionary    ${resp['members'][0]}    uri	
	[Return]    ${uri}
    
Get Goldenimage URI
	[Arguments]    ${giuri}
	${resp} = 	i3s Get Goldenimage		param=?filter="'name'=='${giuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}

Get Buildplan URI
	[Arguments]		${bpuri}
	${resp} = 	i3s Get Buildplan		param=?filter="'name'=='${bpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}

CREATE BUILD PLAN PAYLOAD
	[Arguments]    ${buildplan_create}	
	${bp_body} =    Copy Dictionary  ${buildplan_create}	
	#planscript URI	
	${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
	${mx} =  Get Length  ${ps_body}
	Log To Console    ${mx}
	
	:FOR    ${NUM}    IN RANGE    0    ${mx}
	\    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri	
	\    ${uri} =    GET PLANSCRIPT URI    ${psuri}	
	\    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
	\    Log to console 	${uri}
	[Return]    ${bp_body}
    
Create Deploymentplan Payload
	[Arguments]    ${deploymentplan_create}
	${dp_body} =    Copy Dictionary    ${deploymentplan_create}

	#Buildplan URI
	${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
	Log to console and logfile		\nBP Name is:\t ${bp_name}
	${bp_uri} =    Run Keyword If  '${bp_name}' is not ''		Get Buildplan URI    ${bp_name}
	Log to console and logfile		\nBP URI is:\t ${bp_uri}
	#${bp_uri} =    Get Buildplan URI    ${bp_name}
	Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

	#Goldenimage URI
	${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
	Log to console and logfile		\nGI Name is:\t ${gi_name}
	${gi_uri} =	Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
	Log to console and logfile		\nGI URI is:\t ${gi_uri}
	#${gi_uri} =    Get Goldenimage URI    ${gi_name}
	Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
	[Return]    ${dp_body}
	

Create Server Profile Payload for NIC
	[Documentation]	Create Server Profile Payload
	...				    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
	...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
	...                            "enclosureGroupUri":"EG:EG1",
	...							   "osdeployment settings" : "OSDP:OSDP1",
	...                           ...}	
	[Arguments]		${sp_groups}	
	Log to console and logfile  	Adding SERVER PROFILE	
	${payload} =  Copy Dictionary  ${sp_groups}	
	${shuri} = 	Get from Dictionary	${payload}	serverHardwareUri
	# Get Server Hardware Information
    ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${shuri}'"
    ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Check PowerState
    #Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.      
    ${ServerHwUri} = 	Get Server Hardware URI		${shuri}
	Log to console and logfile		${ServerHwUri}
	Set to Dictionary	${payload}	serverHardwareUri	${ServerHwUri}
	# Ensuring that Blade is Powered off before Server Profile creation
	${Bladeload}=		Create Dictionary		powerState=Off
	...										powerControl=PressAndHold
	${Response}=		Fusion Api Edit Server Hardware Power State		${Bladeload}		${ServerHwUri}
	${taskuri}=		Get From Dictionary		${Response}		uri
	${retries}=		Convert To Integer		10
	${sleep_time}=		Convert To Integer		10
	${Resp}=	Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully	
	# SHT
	${sht} =	Get From Dictionary  ${payload}  serverHardwareTypeUri
	${uri} = 	Get Server Hardware Type URI		${sht}
	Log to console and logfile		${uri}
	Set to Dictionary	${payload}	serverHardwareTypeUri	${uri}
	# EG	
	${eg} =		Get From Dictionary  ${payload}  enclosureGroupUri
	Log to console and logfile	${eg}
	${eg_uri} =  Get Enclosure Group URI    ${eg}	
	Set to Dictionary	${payload}	enclosureGroupUri	${eg_uri}	
	# Enclosure
	${enc} =   Get From Dictionary  ${payload}  enclosureUri
	Log to console and logfile		${enc}
	${enc_uri} =	Get Enclosure URI    ${enc}
	Log to console and logfile		${enc_uri}
	Set to Dictionary	${payload}	enclosureUri	${enc_uri}
	# Get OS DeploymentPlan
	${osdp} =   Get From Dictionary  ${payload}  osDeploymentSettings
	${osdp1} =           Get From Dictionary           ${osdp}  osDeploymentPlanUri
	${osdp_Uri} =	Get OSDP URI    ${osdp1}
	Log to console and logfile		${osdp_uri}
	Set to Dictionary	${payload['osDeploymentSettings']}	osDeploymentPlanUri=${osdp_uri}
	# Get Network URI
	${connection}=	Get From Dictionary  ${payload}   connections
	Log to console and logfile		VALUE IN CONNECTION
	#Get the iscsi nw uri
	${connection1} 		Get From List  ${connection}   0	
	${nwuri} =	Get From Dictionary		${connection1}  networkUri
	log to console and logfile   ${nwuri}
	${uri} = 	Get Ethernet URIs		${nwuri}
	Log to console and logfile		${uri[0]}	
	Set to Dictionary	${connection1}	networkUri=${uri[0]}
	#Get the mgmt network uri
	${connection2} 		Get From List  ${connection}   1	
	${nwuri} =	Get From Dictionary		${connection2}  networkUri
	log to console and logfile   ${nwuri}
	${uri} = 	Get Ethernet URIs		${nwuri}
	Log to console and logfile		${uri[0]}	
	Set to Dictionary	${connection2}	networkUri=${uri[0]}
	Log to console and logfile		${payload}	
	[Return]   ${payload}
 