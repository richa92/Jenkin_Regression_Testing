*** Settings ***
Documentation		Feature Test: Fusion i3S Integration

Resource            ./setup-bringup-keywords.txt
Resource             ../../../../fusion/tests/resource/fusion_api_all_resource_files.txt
Library				i3SLibrary


Variables 		    ./EB2512-data-variables.py


*** Test Cases ***
Get number of i3s appliances in the test ring
	Set Log Level  TRACE
	${i3s_appliances_count}=  Get Length	 ${i3s_appliances}
    Set Suite Variable	${i3s_appliances_count}

Get number of OV appliances in the test ring
   ${ov_appliances_count}=  Get Length	 ${ov_appliances}
   Set Suite Variable	${ov_appliances_count}

Check if all i3sappliances are reachable
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
      \   setup-bringup-keywords.Wait For Appliance To Become Pingable  ${IP}

Check if all ovappliances are reachable
	:FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
      \   setup-bringup-keywords.Wait For Appliance To Become Pingable  ${IP}

Check if all i3sappliances have usb's mounted
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
      \   Is usb mounted on appliance  ${IP}

Check if all ovappliances have usb's mounted
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Is usb mounted on appliance  ${IP}

Remove builds in OVappliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =  Execute Command   rm -rf /mnt/usb/*
	  \   ${output} =  Execute Command  cd /mnt/usb;ls | wc -l
	  \   Should Contain	${output}  0

Copy OV build to OVappliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O --fail 'http://[${build_server}%bond0]/ov-builds/${Ov_Build}'
      \   ${output}=	Execute Command  find / -name ${Ov_Build}
	  \   Should Contain	${output}    /mnt/usb/${Ov_Build}

Copy OV sha file to OVappliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O --fail 'http://[${build_server}%bond0]/ov-builds/${Ov_Build_sha}'
      \   ${output}=	Execute Command  find / -name ${Ov_Build_sha}
	  \   Should Contain	${output}    /mnt/usb/${Ov_Build_sha}

Verify sha256checksum in OVappliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output1} =  Execute Command  var="$(cat /mnt/usb/${OV_Build_sha})";var2="$(echo $var|awk '{print $1; }')";echo $var2
	  \   ${output2} =  Execute Command  var3="$(sha256sum /mnt/usb/${OV_Build})";var4="$(echo $var3|awk '{print $1; }')";echo $var4
      \   Should be Equal  ${output1}  	${output2}

Unzip OV build in OVappliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
      \   ${output} =   Execute Command  cd /mnt/usb;unzip ${OV_Build}
	  \   ${output} =  Execute Command  echo $?
	  \   Should Contain	${output}  0

Verify signature of OV DDImages
   	:FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${X}
	  \   Login to Appliance via SSH  ${IP}
	  \  ${files_count_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${OV_Build}|wc -l
      \  ${files_in_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${OV_Build}
      \  @{words} = 	Split String	${files_in_zip}
	  \  ${file_list} =  Get files list in ddimage zip   ${files_count_zip}   @{words}
	  \  ${gz_files}=	Get Matches	 ${file_list}	regexp=(.*[^sig]$)
	  \  Log to console   ${gz_files}
	  \  ${gz_files_count}=  Get Length	 ${gz_files}
	  \  Check signature of files in ddimage  ${gz_files_count}   ${gz_files}

Remove builds in I3Sappliances
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =  Execute Command   rm -rf /mnt/usb/*
	  \   ${output} =  Execute Command  cd /mnt/usb;ls | wc -l
	  \   Should Contain	${output}  0

Copy I3S build to I3Sappliances
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O --fail 'http://[${build_server}%br0]/i3s-builds/${I3S_Build}'
      \   ${output}=	Execute Command  find / -name ${I3S_Build}
	  \   Should Contain	${output}    /mnt/usb/${I3S_Build}

Download I3S build sha file in I3Sappliance
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output} =   Execute Command  cd /mnt/usb;curl -O --fail 'http://[${build_server}%br0]/i3s-builds/${I3S_Build_sha}'
      \   ${output}=	Execute Command  find / -name ${I3S_Build_sha}
	  \   Should Contain	${output}    /mnt/usb/${I3S_Build_sha}

Verify sha256checksum in I3Sappliances
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \   ${output1} =  Execute Command  var="$(cat /mnt/usb/${I3S_Build_sha})";var2="$(echo $var|awk '{print $1; }')";echo $var2
	  \   ${output2} =  Execute Command  var3="$(sha256sum /mnt/usb/${I3S_Build})";var4="$(echo $var3|awk '{print $1; }')";echo $var4
      \   Should be Equal  ${output1}  	${output2}

Unzip I3S build in I3Sappliances
    :FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
      \   ${output} =   Execute Command  cd /mnt/usb;unzip ${I3S_Build}
	  \   ${output} =  Execute Command  echo $?
	  \   Should Contain	${output}  0

Verify signature of I3S DDImages
	:FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${x}
	  \   Login to Appliance via SSH  ${IP}
	  \  ${files_count_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${I3S_Build}|wc -l
      \  ${files_in_zip} =  Execute Command  cd /mnt/usb;unzip -Z1 ${I3S_Build}
      \  @{words} = 	Split String	${files_in_zip}
	  \  ${file_list} =  Get files list in ddimage zip   ${files_count_zip}   @{words}
	  \  ${gz_files}=	Get Matches	 ${file_list}	regexp=(.*[^sig]$)
	  \  Log to console   ${gz_files}
	  \  ${gz_files_count}=  Get Length	 ${gz_files}
	  \  Check signature of files in ddimage  ${gz_files_count}   ${gz_files}

Install I3S build on I3S appliances
	:FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${X}
	  \   Login to Appliance via SSH  ${IP}
      \   ${output} =   Execute Command  /sbin/hponcfg -f /ci/etc/usb-reimage/ilo_ribcl_developer_usb_reimage.xml
	  \   Should Contain	${output}    succeeded
	  \   Start Command   reboot -f now
	  \   Wait Until Keyword Succeeds	  15min  3sec  setup-bringup-keywords.Appliance is unreachable   ${IP}

Install OV build on OV appliances
    :FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${X}
	  \   Login to Appliance via SSH  ${IP}
      \   ${command}=    Set Variable    /ci/etc/usb-reimage/developer_usb_reimage.sh -R
	  \	  Log	${command}
      \   SSHLibrary.Write    ${command}
	  \   SSHLibrary.Write    ${command}
      \   Log to console    developer_usb_reimage.sh script is running...
      \	  ${output}=    Wait Until Keyword Succeeds    20 minutes    2 minutes
      \   ...    Read Until    Script succeeded
	  \   Log 	${output}
	  \	  Log to console    developer_usb_reimage.sh script is succeeded. Waiting for reboot...
	  \   Sleep  600s

Check OV appliances reachable post install complete time
	:FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${X}
	  \   Wait Until Keyword Succeeds	  130min  10min  setup-bringup-keywords.Wait For Appliance To Become Pingable  ${IP}
	  \   Login to Appliance via SSH  ${IP}

Check OV appliances webapps started
	:FOR  ${X}  IN RANGE  0  ${ov_appliances_count}
      \   ${IP} =     Get From List   ${ov_appliances}    ${X}
      \   Wait for appliance webapps to startup  ${IP}

Check I3S appliances reachable post install complete time
	:FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${X}
      \   Wait Until Keyword Succeeds	  75min  3sec  setup-bringup-keywords.Wait For Appliance To Become Pingable  ${IP}

Check I3S appliances webapps started
	:FOR  ${X}  IN RANGE  0  ${i3s_appliances_count}
      \   ${IP} =     Get From List   ${i3s_appliances}    ${X}
      \   Wait Until Keyword Succeeds	  10min  3sec  setup-bringup-keywords.Wait for appliance webapps to startup  ${IP}

Accept eula
	Login to Appliance via SSH  ${OV_ACTIVE}
	${output} =   Execute Command  curl -ikg -X POST -H 'Content-Type: application/json' https://localhost/rest/appliance/eula/save -d '{"supportAccess":"yes"}'
	Should Contain	${output}    ${status}

Change default Admin password
	Login to Appliance via SSH  ${OV_ACTIVE}
    ${output} =   Execute Command  curl -ikg -X POST -H 'Content-Type: application/json' -H 'X-API-Version: 600' https://localhost/rest/users/changePassword -d '{"newPassword":"${DEFAULT_PASSWORD}", "oldPassword":"admin", "userName":"Administrator"}'

Login to Ov Appliance using ipv6
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		[${fusion_IPv6}]		${admin_credentials}

Configure OV with ip4
   ${sleep_time}    Convert To Number    5
   ${retries}    Convert To Integer    5
   ${Response} =  Fusion Api Configure Appliance Interfaces  ${network}
   ${Resp} =  Fusion Api Get Resource   ${Response['headers']['Location']}
   ${Errors}=    Get From Dictionary    ${Resp}    taskErrors
   ${Errors}=    Get Length    ${Errors}
   # Check for errors
   Should be True    ${Errors} == 0    msg=Errors encountered while configuring OV with ipv4
   Wait Until Keyword Succeeds	  5min  3sec  setup-bringup-keywords.Wait For Appliance To Become Pingable  ${fusion_IP}


Login to OV Appliance using Ipv4
	${admin_credentials}=		Create Dictionary	userName=${DEFAULT_USER}
	...												password=${DEFAULT_PASSWORD}
	Set Suite Variable		${admin_credentials}	${admin_credentials}
	${Response}    ${SessionId}=	Fusion Api Login Appliance 		${fusion_IP}		${admin_credentials}

Do hardware setup
   Invoke Hardware Setup  600
   Sleep  1000s
   Wait Until Keyword Succeeds	  20min  50sec  All Enclosures Status Should Be OK or Warning

CREATE SUBNET FOR MGMT
	${sub} =		Build SUBNET Body		${subnet}   	${mgmt_subnet}
	${resp} = 			fusion_api_create_ipv4_subnet	 body=${sub}
	${valDict} = 	Create Dictionary	status_code=${200}
	setup-bringup-keywords.validate Response	${resp}	${valDict}

CREATE RANGE-FOR MGMT
	${range}=   Build IPRange Body    	${ipv4ranges}      ${mgmt_subnet}    		${mgmt_ip_range}
	setup-bringup-keywords.Log to console and logfile    ${range}
	:For  ${x}  in  @{range}
	\   ${resp}=  fusion_api_create_ipv4_range   	${x}
	\	setup-bringup-keywords.Log to console and logfile    ${resp}
	\	setup-bringup-keywords.Log to console and logfile    ${x}
	\   ${valDict} = 	Create Dictionary		status_code=${200}
	\	setup-bringup-keywords.Log to console and logfile    ${valDict}
	\   setup-bringup-keywords.validate Response	${resp}	${valDict}

CREATE UNTAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
	${network_body}=	Build Network Body With Subnet Uri		${Ethernet_network_1}		${mgmt_network_name}		${mgmt_subnet}
	${resp} = 	Fusion Api Create Ethernet Network		body=${network_body}
	${valDict} = 	Create Dictionary	status_code=${202}
	setup-bringup-keywords.Validate Response	${resp}		${valDict}

#Create Subnet for deploy and Associate to Network
CREATE SUBNET FOR iSCSI
	${sub} =		Build SUBNET Body		${subnet}   	${deploy_subnet}
	${resp} = 			fusion_api_create_ipv4_subnet	 body=${sub}
	${valDict} = 	Create Dictionary	status_code=${200}
	setup-bringup-keywords.Validate Response	${resp}	${valDict}

CREATE RANGE-FOR iSCSI
	${range}=   Build IPRange Body    	${ipv4ranges}      ${deploy_subnet}    		${deploy_ip_range}
	setup-bringup-keywords.Log to console and logfile    ${range}
	:For  ${x}  in  @{range}
	\   ${resp}=  fusion_api_create_ipv4_range   	${x}
	\	setup-bringup-keywords.Log to console and logfile    ${resp}
	\	setup-bringup-keywords.Log to console and logfile    ${x}
	\   ${valDict} = 	Create Dictionary		status_code=${200}
	\	setup-bringup-keywords.Log to console and logfile    ${valDict}
	\   setup-bringup-keywords.Validate Response	${resp}	${valDict}

CREATE TAGGED NETWORK AND ASSOCIATE SUBNET HAVING RANGE
	${network_body}=	Build Network Body With Subnet Uri		${Ethernet_network_1}		${deploy_network_name}		${deploy_subnet}
	${resp} = 	Fusion Api Create Ethernet Network		body=${network_body}
	${valDict} = 	Create Dictionary	status_code=${202}
	setup-bringup-keywords.Validate Response	${resp}		${valDict}


# Create OS Deployment Server
Create OS Deployment Server
	Log to console    Create Deployment Server
	Sleep  600s
	${osds_body}=		Create Deployment Server Payload		${osdeploymentserver}		${osdeploymentserver_name}
	${Response}=		Fusion Api Create OS DeploymentServer	${osds_body}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to Create OSDS
	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    20
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}
	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating LIG

CREATE LIG
	#setup-bringup-keywords.Log to console    "Creating Logical Interconnect Group for Potash"
	[Tags]  STEP8
	${ligs}=  Create LIG TBird Payload   ${lig_tbird_3enc}
	setup-bringup-keywords.Log to Console and logfile    CreateLIG2 ${ligs['name']}
	${Response}=  fusion api create lig     ${ligs}
	setup-bringup-keywords.Log to Console and logfile	${Response}
	Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to Create LIG.

	# Wait for task to complete
	${Retry Interval}    Convert To Number     60
	${Retries}           Convert To Integer    15
	${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating LIG

CREATE EG
	Log to console    Create Enclosure group
	${enc_body} =		Create EG Body		${enc_groups_tbird_3enc}
	${resp} =		Fusion Api Create Enclosure Group	${enc_body}
	${valDict} = 	Create Dictionary	status_code=${201}
	setup-bringup-keywords.Validate Response	${resp}	${valDict}

#Create LE
Create Logical Enclosure
	#${le}=  fusion_api_get_logical_enclosure
    ${Response}=	 Add Logical Enclosure from variable       ${les_3enc}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create Logical Enclosure.

	#Wait for task to complete
	${Retry Interval}    Convert To Number    120
	${Retries}           Convert To Integer    80
	${Response}=    Fusion API Wait For Task To Complete    ${Response['headers']['Location']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Response}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Should be True    ${Errors} == 0    msg=Errors encountered while creating Logical Enclosure.



#-------------------- Build the required JSON body-----------------------------------
*** Keywords ***
Check signature of files in ddimage
    [Arguments]   ${gz_files_count}    ${gz_files}
	:FOR  ${Z}  IN RANGE  0  ${gz_files_count}
         \   ${file_name} =     Get From List   ${gz_files}    ${Z}
		 \   ${output} =   Execute Command  cd /ci/etc/usb-reimage/;gpg --import hpPublicKey2048_key1.pub
	     \   ${output} =   Execute Command  cd /mnt/usb;gpg --check-sigs B1275EA3
	     \   ${output} =   Execute Command  cd /mnt/usb;ls
	     \   ${output} =   Execute Command  cd /mnt/usb;gpg --verify ${file_name}.sig ${file_name};echo $?
	     \   Should Contain  ${output}  0

Get files list in ddimage zip
    [Arguments]   ${files_count_zip}   @{words}
	${file_list} =    Create List
	Log to console   ${file_list}
    :FOR  ${Y}  IN RANGE  0  ${files_count_zip}
    	 \  ${file} = 	Get From List	${words}	${Y}
		 \  Append to List  ${file_list}	${file}
	[Return]   ${file_list}

All Enclosures Status Should Be OK or Warning
    #[Documentation]  Check status of Enclosure and warn user in case of status is not OK
    #...              Warning shown where status is Warning
    #..              Fail test where status is other than OK and Warning
    #...  act_on_failure provide option to either fail current test(Fail) or complete suite(Fatal Error)
    [Arguments]    ${act_on_failure}=Fail
    [Tags]    ENC-HEALTH
    ${encs} =  Fusion Api Get Enclosures
    # Make sure we get (more than zero) enclosures listed
    ${count}       Get From Dictionary    ${encs}    count
    Run Keyword If  '${count}'=='0'    Fail    msg=No enclosures found
    :FOR  ${enc}  IN  @{encs['members']}
    \  Run Keyword If  '${enc['status']}' == 'OK'  Log  ${enc['name']}, Status ${enc['status']}
    ...  ELSE IF  '${enc['status']}' == 'Warning'  Log  ${enc['name']}, Status ${enc['status']}  level=WARN
    ...  ELSE  Run Keyword And Continue On Failure  ${act_on_failure}  ${enc['name']}, Status ${enc['status']}

Get ArtifactBundle Uri
	[Arguments]		${Name}
    ${resp}=    i3s Api Get Artifact Bundle    param=?filter="'name'=='${NAME}'"
    ${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Get Deploymentplan Uri
	[Arguments]		${dpuri}
	${resp} = 	i3s Get Deploymentplan		param=?filter="'name'=='${dpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Get Subnet
	[Arguments] 			${NETWORK_ID}
	${resp} =   fusion api get ipv4 subnet
	${subnetcounts} =     Get From Dictionary     ${resp}    members
	${l} = 	Get Length	${subnetcounts}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${subnet} =     Get From List   ${subnetcounts}    ${x}
    \	Exit For Loop If 	'${subnet['networkId']}' == '${NETWORK_ID}'
	[Return]    ${subnet}

Get from Subnet
	[Arguments]     ${subnet_list}   	${element}
	${return} =     Get From Dictionary     ${subnet_list}			${element}
	[Return]    ${return}

Get OSDP URI
	[Arguments]		${osdp}
	${resp} = 	Fusion Api Get OS Deploymentplan		param=?filter="'name'=='${osdp}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Get Appliance URI
	[Arguments]		${appliance}
	${resp} = 	Fusion Api Get i3sappliance Uri		param=?filter="'name'=='${appliance}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Build Network Body With Subnet Uri
	[Documentation]	Select the Subnet Uri and add in the Subnet Uri field of the Request Body to create a Network and associate the Subnet
	#[Aguments]			${Ethernet_network_1}		${NETWORK_ID}
	[Arguments]		${networks}		${networkname}	${NETWORK_ID}
	${subnets}=    Get Subnet        ${NETWORK_ID}
    ${uri}=         Get from Subnet         ${subnets}              uri
	Log		${uri}
	#Log		${networkname}
	setup-bringup-keywords.Log to console and logfile  	Adding ETHERNET NETWORKS
	:FOR	${network1}	IN	@{networks}
	\		${networkname1} =	Get From Dictionary		${network1}		name
	\		Run Keyword If	'${networkname}'!='${networkname1}'		Continue For Loop
	\		Set to dictionary    		${network1}     		subnetUri=${uri}
	\		${network_body}=	Collections.Copy Dictionary 	${network1}
	[Return]	${network_body}

Build IPRange Body
	[Arguments]   	${ipv4ranges}   	${NETWORK_ID}    	${RANGE_NAME}
	${subnets}=    Get Subnet        ${NETWORK_ID}
	${uri}=         Get from Subnet         ${subnets}              uri
	${ipv4_1}=  Create List
	:For  ${ipv4}  IN   @{ipv4ranges}
	\           ${name} =   Get From Dictionary   ${ipv4}  name
	\           Run Keyword If    '${name}'!='${RANGE_NAME}'        Continue For Loop
	\           Set to dictionary    		${ipv4}     		subnetUri=${uri}
	\           Append to List    ${ipv4_1}    	${ipv4}
	[Return]   ${ipv4_1}

Build SUBNET Body
	[Arguments]   	${subnet}   	${SUBNET_SELECT}
	Log 				"Subnet ":${subnet}
	${subnet_ret}=     Create Dictionary
	:For  ${subnetdetails}  IN   @{subnet}
	\		Log 		${subnetdetails}
	\     ${networkId} =   Get From Dictionary   ${subnetdetails}  networkId
	\		Log			${networkId}
	\		Log			${SUBNET_SELECT}
	\		Run Keyword If    '${networkId}'!='${SUBNET_SELECT}'        Continue For Loop
	\		Log 			"Subnet Matching ":${subnetdetails}
	\		${subnet_ret}=		Collections.Copy Dictionary		${subnetdetails}
	Log 		"Val Subnet_ret":${subnet_ret}
	[Return]	${subnet_ret}

Create LIG TBird Payload
	[Arguments]       ${ligs}
	Set Log Level    Trace
	${Potash}=   setup-bringup-keywords.Get Interconnect Type URI     ${POTASH}
	${Chloride10} =   Run keyword If   '${CHLORIDEX}' == 'CHLORIDE10'   setup-bringup-keywords.Get Interconnect Type URI    ${CHLORIDE10}
	${Chloride20} =   Run keyword If   '${CHLORIDEX}' == 'CHLORIDE20'   setup-bringup-keywords.Get Interconnect Type URI    ${CHLORIDE20}
	#${Chloride10}=     setup-bringup-keywords.Get Interconnect Type URI    ${CHLORIDEX}
	#${Chloride20}=     setup-bringup-keywords.Get Interconnect Type URI    ${CHLORIDE20}
	${Response}=   Get From Dictionary     ${ligs}    interconnectMapTemplate
	${interconnectMapEntryTemplates}=		Create List
	${interconnectMapEntryTemplates1}=	Get From Dictionary     ${Response}     interconnectMapEntryTemplates
	:For   ${item}   IN   @{interconnectMapEntryTemplates1}
	\     ${ICM}=    Get From Dictionary    ${item}   permittedInterconnectTypeUri
	\   Run keyword If   '${ICM}' == 'Virtual Connect SE 40Gb F8 Module for Synergy'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Potash}
	\   Run keyword If   '${ICM}' == 'Synergy 10Gb Interconnect Link Module'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Chloride10}
	\   Run keyword If   '${ICM}' == 'Synergy 20Gb Interconnect Link Module'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Chloride20}

	\   Append To List    ${interconnectMapEntryTemplates}     ${item}
	# Create LIG Body
	${ls}=    Set to Dictionary     ${Response}   interconnectMapEntryTemplates=${interconnectMapEntryTemplates}
	Set to Dictionary   ${ligs}         interconnectMapTemplate=${Response}

	${uplinkSets1}=	Get From Dictionary  ${ligs}   uplinkSets
	${uplinkSets2}=	Create List
	${fcnetworkuri}=		Create List
	${ethnetworkuri}=		Create List
	:FOR  ${x}  IN    @{uplinkSets1}
	\     ${networkType}=		Get From Dictionary     ${x}  networkType
	\     ${networks} =           Get From Dictionary           ${x}  networkUris
	\     Run Keyword If    '${networkType}' == 'Ethernet'            Continue For Loop
	\     ${networkUris}=		Get FC Uris ${networks}
	\    Append to List    ${fcnetworkuri}   ${networkUris}
	\		setup-bringup-keywords.Log to console and logfile THIS IS NOT FOR ETHERNET
	\     setup-bringup-keywords.Log to console and logfile   ${networkUris}
	\     Set to dictionary	${x}	networkUris=${networkUris}
	\		setup-bringup-keywords.Log to console and logfile IAM I APPENDING HERE
	\     Append to List    ${uplinkSets2}    ${x}
	setup-bringup-keywords.Log to console and logfile   ${uplinkSets2}

	:FOR  ${x}  IN    @{uplinkSets1}
	\     ${networkType}=		Get From Dictionary     ${x}  networkType
	\     ${networks} =		Get From Dictionary           ${x}  networkUris
	\		setup-bringup-keywords.Log to console and logfile	${networkType}
	\		setup-bringup-keywords.Log to console and logfile	${networks}
	\     Run Keyword If    '${networkType}' == 'FibreChannel'  Continue For Loop
	\     ${networkUris}=		setup-bringup-keywords.Get FCoE Uris     ${networks}
	\		setup-bringup-keywords.Log to console and logfile 	${networkUris}
	\   ${ethernetUris}=		setup-bringup-keywords.Get Ethernet URIs   ${networks}
	\		setup-bringup-keywords.Log to console and logfile		${ethernetUris}
	\   ${networkUris}=			combine lists   ${networkUris}  ${ethernetUris}
	\		setup-bringup-keywords.Log to console and logfile		${networkUris}
	\		setup-bringup-keywords.Log to console and logfile		${x}
	\     Set to dictionary	${x}	networkUris=${networkUris}
	\     Append to List    ${uplinkSets2}    ${x}
	setup-bringup-keywords.Log to console and logfile   ${uplinkSets2}

	Set to Dictionary		${ligs}     uplinkSets=${uplinkSets2}
	#setup-bringup-keywords.Log to console and logfile  ${ligs}
	[Return]   ${ligs}

Create EG Body
	[Documentation]	Adds Enclosure Group to an appliance from a variable which contains a list of dicts with the entire payload and also Associate a Range
	[Arguments]		${enc_groups}
	setup-bringup-keywords.Log to console and logfile  	Adding ENCLOSURE GROUP
	${enc_group_body} =  Copy Dictionary  ${enc_groups}
	${Response}=   Get From Dictionary     ${enc_group_body}		osDeploymentSettings
    setup-bringup-keywords.Log to console and logfile  	GET LIG URI
	${l} = 	Get Length	${enc_group_body['interconnectBayMappings']}
	:FOR 	${x}	IN RANGE	0	${l}
	\	${liguri} = 	Get From Dictionary	${enc_group_body['interconnectBayMappings'][${x}]}	logicalInterconnectGroupUri
	\   Continue For Loop If    '${liguri}' == 'None'
	\	${liguri} = 	setup-bringup-keywords.Common URI Lookup by name    ${liguri}
	\	Set to dictionary	${enc_group_body['interconnectBayMappings'][${x}]}	logicalInterconnectGroupUri		${liguri}
	setup-bringup-keywords.Log to console and logfile		ENC GROUP BODY VALUE
	[Return]	${enc_group_body}

Get Logical Enclosure URI
	[Arguments]  ${name}
	${resp} = 	Fusion Api Get Logical Enclosure  param=?filter="'name' = '${name}'"
	${count} =  Get From Dictionary  ${resp}  count
	Return from keyword if  $count==0  '/bad_logical_enclosure_uri'
	${uri} = 	Get From Dictionary  ${resp['members'][0]}  uri
	[Return]	${uri}

Add Logical Enclosure from variable
	[Documentation]	Adds a Logical Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]		${enc}
	setup-bringup-keywords.Log to console and logfile  	Adding LOGICAL ENCLOSURE
	${eguri} = 	Get From Dictionary	${enc}	enclosureGroupUri
	@{words} = 	Split String	${eguri}	:
	${type} = 	Get From List	${words}	0
	${e} = 		Get From List	${words}	1
	${eguri} = 	setup-bringup-keywords.Get Enclosure Group URI	${e}
    ${encuris} =    Get From Dictionary     ${enc}  enclosureUris
	Set to dictionary	${enc}	enclosureGroupUri		${eguri}
    ${encuri_list} =    Create List
    :FOR    ${encuri}   IN  @{encuris}
	\   	@{words} = 	Split String	${encuri}	:
	\       ${type} = 	Get From List	${words}	0
	\       ${e} = 		Get From List	${words}	1
	\       ${encuri} = 	setup-bringup-keywords.Get Enclosure URI	${e}
	\       Append to List	${encuri_list}	${encuri}

	set to dictionary   ${enc}  enclosureUris   ${encuri_list}
	${resp} =	Fusion Api Create Logical Enclosure 	${enc}
	[Return]  ${resp}

Create Deployment Server Payload
	[Arguments]		${osdeploymentserver}	${osdp_name}
	setup-bringup-keywords.Log to console and logfile  	Adding OSDS
	${osds_body}=	Copy Dictionary 	${osdeploymentserver}
	#Network URI
	${nwuri} = 	Get from Dictionary	${osds_body}	mgmtNetworkUri
	${uri} = 	setup-bringup-keywords.Get Ethernet URIs		${nwuri}
	#setup-bringup-keywords.Log to console and logfile		${uri[0]}
	Set to Dictionary	${osds_body}	mgmtNetworkUri	${uri[0]}
	#APPLIANCE URI
	${appuri} =	Get From Dictionary  ${osds_body}  applianceUri
	${uri} = 	Get Appliance URI		${appuri}
	Set to Dictionary	${osds_body}	applianceUri	${uri}
	[Return]   ${osds_body}

#Create Server Profile Payload for NIC
Create Server Profile Payload
	[Documentation]	Create Server Profile Payload
	...				    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
	...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
	...                            "enclosureGroupUri":"EG:EG1",
	...							   "osdeployment settings" : "OSDP:OSDP1",
	...                           ...}
	[Arguments]		${sp_groups}
	#Log to console and logfile  	CREATING SERVER PROFILE PAYLOAD
	${payload} =  Copy Dictionary  ${sp_groups}
	${server_hw} =    Get from Dictionary    ${payload}    serverHardwareUri
	# Get Server Hardware Information
    # ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${server_hw}'"
    # ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.
    # Get server hardware URI
    ${ServerHwUri} = 	Run Keyword If    '${server_hw}' != 'None'    setup-bringup-keywords.Get Server Hardware URI		${server_hw}
    ...    ELSE    Set Variable    ${server_hw}
	Log		${server_hw} : ${ServerHwUri}
	Set to Dictionary	${payload}	serverHardwareUri	${ServerHwUri}
	# Ensuring that Blade is Powered off before Server Profile creation
	${taskState}    ${taskStatus} =    Run Keyword If    '${ServerHwUri}' != 'None'    Power On Off Server    ${ServerHwUri}    Off
	...    ELSE    Set Variable    ${ServerHwUri}    ${ServerHwUri}
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Log    Task Status : ${taskStatus}
	# SHT
	${sht} =	Get From Dictionary  ${payload}  serverHardwareTypeUri
	${sht_uri} = 	setup-bringup-keywords.Get Server Hardware Type URI		${sht}
	Log	${sht} : ${sht_uri}
	Set to Dictionary	${payload}	serverHardwareTypeUri	${sht_uri}
	# EG
	${eg} =		Get From Dictionary  ${payload}  enclosureGroupUri
	${eg_uri} =  setup-bringup-keywords.Get Enclosure Group URI    ${eg}
	Log	${eg} : ${eg_uri}
	Set to Dictionary	${payload}	enclosureGroupUri	${eg_uri}
	# Enclosure
	${enc} =   Get From Dictionary  ${payload}  enclosureUri
	${enc_uri} =	Run Keyword If    '${enc}' != 'None'    setup-bringup-keywords.Get Enclosure URI    ${enc}
	...    ELSE    Set Variable    ${enc}
	Log	${enc} : ${enc_uri}
	Set to Dictionary	${payload}	enclosureUri	${enc_uri}
	# Get OS DeploymentPlan
	${osds} =   Get From Dictionary  ${payload}  osDeploymentSettings
	${osdp} =    Run Keyword If    ${osds} != None    Get From Dictionary    ${osds}  osDeploymentPlanUri
	...    ELSE    Set Variable    ${osds}
	${osdp_Uri} =	Run Keyword If    '${osdp}' != 'None'    Get OSDP URI    ${osdp}
	...    ELSE    Set Variable    ${osdp}
	Log	${osdp} : ${osdp_uri}
	Run Keyword If    ${osds} != None    Set to Dictionary	${payload['osDeploymentSettings']}	osDeploymentPlanUri=${osdp_uri}
    # Get Network URI of os custom attributes
    ${OS_CA} =    Run Keyword If    ${osds} != None    Get From Dictionary    ${osds}    osCustomAttributes
    ...    ELSE    Create List
    :FOR    ${CA}    IN    @{OS_CA}
    \    ${CA_name} =    Get From Dictionary    ${CA}    name
    \    ${regex_match} =    Evaluate    re.search(r'networkuri', '${CA_name}', re.I)    re
    \    Run Keyword If    '${regex_match}' == 'None'    continue For Loop
    \    ${Mgmt_Nic} =    Get From Dictionary    ${CA}    value
    \    ${nwuri} = 	setup-bringup-keywords.Get Ethernet URI		${Mgmt_Nic}
    \    Set to Dictionary    ${CA}    value=${nwuri}
	# Get Network URI of connections
	${connection}=	Get From Dictionary  ${payload}   connections
	${Number_of_connections}=  Get Length    ${connection}
	Log    Number of connections : ${Number_of_connections}
	Log	VALUE IN CONNECTION :
    :FOR    ${conn_index}    IN Range    0    ${Number_of_connections}
    \    ${connection_id}    Get From List    ${connection}    ${conn_index}
    \    ${nw_uri} =    Get From Dictionary    ${connection_id}    networkUri
    \    ${uri} = 	setup-bringup-keywords.Get Ethernet URI		${nw_uri}
    \    Log		${nw_uri} : ${uri}
    \    Set to Dictionary	${connection_id}	networkUri=${uri}

	Log Dictionary		${payload}
	[Return]   ${payload}

GV Create Success
    [Arguments]    ${GV_Response}    ${NAME}
    Log To Console    Check GV status
    Run Keyword If    '${GV_Response['members'][0]['status']}' == 'OK'
    ...    Log To Console    GV_created_successfully for ${NAME}
    ...    ELSE
    ...    Log to Console    GV created but status yet to get updated to OK

Wait For GI Complete
    # Wait for task to complete
    [Arguments]    ${Response}    ${NAME}
    ${Retry Interval}    Convert To Number    30
	${Retries}    Convert To Integer    30
	${Resp}=    i3s API Wait For Task To Complete	${Response['headers']['location']}    sleep_time=${Retry Interval}    retries=${Retries}

	# Check for errors
	${Errors}=    Get From Dictionary    ${Resp}    taskErrors
	${Errors}=    Get Length    ${Errors}
	Run Keyword If    ${Errors} != 0
		...    Log    Errors encountered while creating GI    level=WARN
	Should Be Equal As Integers    ${Errors}    0    msg=Could not create Golden Image !!
    Run Keyword If    ${Errors} == 0  Log to console  No errors
        ${Response}=    i3s Api Get Golden Image    param=?filter="'name'=='${NAME}'"
        Run Keyword If    '${Response['members'][0]['status']}' != 'OK'
            ...    Log to console    i3S API Add Golden Image failed,imageStatus not Active
        Run Keyword If	'${Response['members'][0]['status']}' == 'OK'
            ...    Log To Console    i3S API Add Golden Image successful,imageStatus is Active
        ${gv_image_uri}=    Get GoldenImage Uri    ${NAME}
        Sleep    ${GI_SLEEP}
        #Form param to get golden volume Uri
        ${GV_Response}=    i3s Api Get Golden Volume    param=?filter="'imageuri'='${gv_image_uri}'"
        ${length}=    Get Length    ${GV_Response['members']}
        Run Keyword If    ${length} == 1    GV Create Success    ${GV_Response}    ${NAME}
        ...    ELSE
	    ...    Should Be Equal as Strings    ${length}    1    msg=Failed to create GoldenImage for ${NAME}

GET PLANSCRIPT URI
	[Arguments]    ${psuri}
	${resp} =    I3S GET PLANSCRIPT    param=?filter="'name'=='${psuri}'"
	${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
	[Return]    ${uri}

Get Goldenimage URI
	[Arguments]    ${giuri}
	${resp} = 	i3s Get Goldenimage		param=?filter="'name'=='${giuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}

Get Buildplan URI
	[Arguments]		${bpuri}
	${resp} = 	i3s Get Buildplan		param=?filter="'name'=='${bpuri}'"
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]    ${uri}

CREATE BUILD PLAN PAYLOAD
	[Arguments]    ${buildplan_create}
	${bp_body} =    Copy Dictionary  ${buildplan_create}
	#planscript URI
	${ps_body} =    Get from Dictionary    ${bp_body}    buildStep
	${mx} =  Get Length  ${ps_body}
	Log To Console    ${mx}

	:FOR    ${NUM}    IN RANGE    0    ${mx}
	\    ${psuri} =    Get From Dictionary    ${ps_body[${NUM}]}    planScriptUri
	\    ${uri} =    GET PLANSCRIPT URI    ${psuri}
	\    Set to Dictionary    ${ps_body[${NUM}]}    planScriptUri    ${uri}
	\    Log to console 	${uri}
	[Return]    ${bp_body}

Create Deploymentplan Payload
	[Arguments]    ${deploymentplan_create}
	${dp_body} =    Copy Dictionary    ${deploymentplan_create}

	#Buildplan URI
	${bp_name} =    Get from Dictionary    ${dp_body}    oeBuildPlanURI
	setup-bringup-keywords.Log to console and logfile		\nBP Name is:\t ${bp_name}
	${bp_uri} =    Run Keyword If  '${bp_name}' is not ''		Get Buildplan URI    ${bp_name}
	setup-bringup-keywords.Log to console and logfile		\nBP URI is:\t ${bp_uri}
	#${bp_uri} =    Get Buildplan URI    ${bp_name}
	Set to Dictionary    ${dp_body}    oeBuildPlanURI    ${bp_uri}

	#Goldenimage URI
	${gi_name} =    Get from Dictionary    ${dp_body}    goldenImageURI
	setup-bringup-keywords.Log to console and logfile		\nGI Name is:\t ${gi_name}
	${gi_uri} =	Run Keyword If  '${gi_name}' is not ''    Get Goldenimage URI    ${gi_name}
	setup-bringup-keywords.Log to console and logfile		\nGI URI is:\t ${gi_uri}
	#${gi_uri} =    Get Goldenimage URI    ${gi_name}
	Set to Dictionary    ${dp_body}    goldenImageURI    ${gi_uri}
	[Return]    ${dp_body}

Create Server Profile Payload for NIC
	[Documentation]	Create Server Profile Payload
	...				    profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
	...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
	...                            "enclosureGroupUri":"EG:EG1",
	...							   "osdeployment settings" : "OSDP:OSDP1",
	...                           ...}
	[Arguments]		${sp_groups}
	setup-bringup-keywords.Log to console and logfile  	Adding SERVER PROFILE
	${payload} =  Copy Dictionary  ${sp_groups}
	${shuri} = 	Get from Dictionary	${payload}	serverHardwareUri
	# Get Server Hardware Information
    ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${shuri}'"
    ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    # Check PowerState
    #Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware is powered on. Must be powered off for Server Profile creation.
    ${ServerHwUri} = 	Get Server Hardware URI		${shuri}
	setup-bringup-keywords.Log to console and logfile		${ServerHwUri}
	Set to Dictionary	${payload}	serverHardwareUri	${ServerHwUri}
	# Ensuring that Blade is Powered off before Server Profile creation
	${Bladeload}=		Create Dictionary		powerState=Off
	...										powerControl=PressAndHold
	${Response}=		Fusion Api Edit Server Hardware Power State		${Bladeload}		${ServerHwUri}
	${taskuri}=		Get From Dictionary		${Response}		uri
	${retries}=		Convert To Integer		10
	${sleep_time}=		Convert To Integer		10
	${Resp}=	Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	${status}=		Run Keyword If 		'${taskState}'=='Completed'		Log To Console		${taskStatus}
	...				ELSE		Fail	msg=Failed to Power Off Server Successfully
	# SHT
	${sht} =	Get From Dictionary  ${payload}  serverHardwareTypeUri
	${uri} = 	Get Server Hardware Type URI		${sht}
	setup-bringup-keywords.Log to console and logfile		${uri}
	Set to Dictionary	${payload}	serverHardwareTypeUri	${uri}
	# EG
	${eg} =		Get From Dictionary  ${payload}  enclosureGroupUri
	setup-bringup-keywords.Log to console and logfile	${eg}
	${eg_uri} =  setup-bringup-keywords.Get Enclosure Group URI    ${eg}
	Set to Dictionary	${payload}	enclosureGroupUri	${eg_uri}
	# Enclosure
	${enc} =   Get From Dictionary  ${payload}  enclosureUri
	setup-bringup-keywords.Log to console and logfile		${enc}
	${enc_uri} =	Get Enclosure URI    ${enc}
	setup-bringup-keywords.Log to console and logfile		${enc_uri}
	Set to Dictionary	${payload}	enclosureUri	${enc_uri}
	# Get OS DeploymentPlan
	${osdp} =   Get From Dictionary  ${payload}  osDeploymentSettings
	${osdp1} =           Get From Dictionary           ${osdp}  osDeploymentPlanUri
	${osdp_Uri} =	Get OSDP URI    ${osdp1}
	setup-bringup-keywords.Log to console and logfile		${osdp_uri}
	Set to Dictionary	${payload['osDeploymentSettings']}	osDeploymentPlanUri=${osdp_uri}
	# Get Network URI
	${connection}=	Get From Dictionary  ${payload}   connections
	setup-bringup-keywords.Log to console and logfile		VALUE IN CONNECTION
	#Get the iscsi nw uri
	${connection1} 		Get From List  ${connection}   0
	${nwuri} =	Get From Dictionary		${connection1}  networkUri
	setup-bringup-keywords.Log to console and logfile   ${nwuri}
	${uri} = 	setup-bringup-keywords.Get Ethernet URIs		${nwuri}
	setup-bringup-keywords.Log to console and logfile		${uri[0]}
	Set to Dictionary	${connection1}	networkUri=${uri[0]}
	#Get the mgmt network uri
	${connection2} 		Get From List  ${connection}   1
	${nwuri} =	Get From Dictionary		${connection2}  networkUri
	setup-bringup-keywords.Log to console and logfile   ${nwuri}
	${uri} = 	setup-bringup-keywords.Get Ethernet URIs		${nwuri}
	setup-bringup-keywords.Log to console and logfile		${uri[0]}
	Set to Dictionary	${connection2}	networkUri=${uri[0]}
	setup-bringup-keywords.setup-bringup-keywords.Log to console and logfile		${payload}
	[Return]   ${payload}

Invoke Hardware Setup
    [Documentation]  SSH to the Tbird appliance and invoke hardware setup via REST, only on Tbird platform
    ...              Example:
    ...                Invoke Hardware Setup
    ...                Invoke Hardware Setup  timeout=60  interval=2
    ...                Invoke Hardware Setup  api=300 timeout=60  interval=5
    ...              Data Varables Required:
    ...                ${X-API-VERSION}              300              # X-API-VERSION
    ...                ${FUSION_IP}            	     ${APPLIANCE_IP}  # Fusion Appliance IP
    ...                ${FUSION_SSH_USERNAME}        root             # Fusion SSH Username
    ...                ${FUSION_SSH_PASSWORD}        hponeview        # Fusion SSH Password
    ...                ${FUSION_PROMPT}              \#               # Fusion Appliance Prompt
    ...

    [Arguments]  ${api}=${X-API-VERSION}  ${timeout}=60  ${interval}=5
    #Login to Fusion via SSH
	Login to Appliance via SSH  ${fusion_IP}
    #${output} =   Execute SSH Command     curl -k -X POST -H "X-API-Version:${api}" https://localhost/rest/appliance/tech-setup
	${output} =   Execute Command     curl -k -X POST -H "X-API-Version:${api}" https://localhost/rest/appliance/tech-setup
    ${task} =   Get Task By Param   param=?filter='name'='Discover hardware'&sort=created:descending&count=1
    #fusion_api_appliance_setup.Wait For Task  ${task}  timeout=${timeout}  interval=${interval}
	#Wait For Task  ${task}  timeout=${timeout}  interval=${interval}
	${retries}=		 Convert To Integer  16
	${sleep_time}=		Convert To Integer  60
	${Resp}=	Fusion Api Wait For Task To Complete	${task}		retries=${retries}		sleep_time=${sleep_time}


Get Task By Param
    [Documentation]    Get task by param
    ...    Examples:
    ...    Get Task By Param param=?filter='name'=='Discover hardware'&sort=created:descending&count=1
    ...    Get Task By Param param=?filter="'name'='Add' AND associatedResource.resourceName='${name}'"&sort=created:descending&count=1
    [Arguments]    ${param}
    ${resp}=    Fusion Api Get Task    param=${param}
    ${status} =    Run keyword and return status    Dictionary should contain key    ${resp}    'errorCode'
    Return from keyword if    ${status}==${True}    ${resp}
    ${count} =    Get From Dictionary    ${resp}    count
    Return from keyword if    ${count}==0    ${resp}
    [Return]    ${resp['members'][0]['uri']}

Create Artifact Bundle Payload
    [Arguments]    ${artifactbundle}
    ${ab_body} =    Copy Dictionary  ${artifactbundle}

    #GoldenImage URI
    ${Gstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    goldenImages
    ${gi_body} =    Run keyword if    ${Gstatus} ==${True}    Get from Dictionary    ${ab_body}    goldenImages
    ${mx} =    Run keyword if    ${Gstatus} ==${True}    Get Length    ${gi_body}
    ${gisUri} =    Run keyword If    '${mx}'!='None'    Get Goldenimage Body    ${mx}    ${gi_body}

    #Planscript URI
    ${Pstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    planScripts
    ${ps_body} =    Run keyword if    ${Pstatus} ==${True}    Get from Dictionary    ${ab_body}    planScripts
    ${mx} =    Run keyword if    ${Pstatus} ==${True}    Get Length    ${ps_body}
    ${psUri} =    Run keyword If    '${mx}'!='None'    Get Planscript Body    ${mx}    ${ps_body}

    #Buildplan URI
    ${Bstatus} =   run keyword and return status    Dictionary should contain key    ${ab_body}    buildPlans
    ${bp_body} =    Run keyword if    ${Bstatus} ==${True}    Get from Dictionary    ${ab_body}    buildPlans
    ${mx} =    Run keyword if    ${Bstatus} ==${True}    Get Length    ${bp_body}
    ${bpUri} =    Run keyword If    '${mx}'!='None'    Get Buildplan Body    ${mx}    ${bp_body}

    #Deploymentplan URI
    ${Dstatus} =    run keyword and return status    Dictionary should contain key    ${ab_body}    deploymentPlans
    ${dp_body} =    Run keyword if    ${Dstatus} ==${True}    Get from Dictionary    ${ab_body}    deploymentPlans
    ${mx} =    Run keyword if    ${Dstatus} ==${True}    Get Length    ${dp_body}
    ${depUri} =    Run keyword If    '${mx}'!='None'    Get Deploymentplan Body    ${mx}    ${dp_body}
    [Return]    ${ab_body}

Get Goldenimage Body
    [Arguments]    ${mx}    ${gi_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${giuri} =    Get From Dictionary    ${gi_body[${IND}]}    resourceUri
    \    ${uri} =    Get Goldenimage Uri    ${giuri}
    \    Set to Dictionary    ${gi_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${gi_body}

Get Planscript Body
    [Arguments]    ${mx}    ${ps_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${psuri} =    Get From Dictionary    ${ps_body[${IND}]}    resourceUri
    \    ${uri} =    Get Planscript Uri    ${psuri}
    \    Set to Dictionary    ${ps_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${ps_body}

Get Buildplan Body
    [Arguments]    ${mx}    ${bp_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${bpuri} =    Get From Dictionary    ${bp_body[${IND}]}    resourceUri
    \    Log to console    ${bpuri}
    \    ${uri} =    Get Buildplan Uri    ${bpuri}
    \    Set to Dictionary    ${bp_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${bp_body}

Get Deploymentplan Body
    [Arguments]    ${mx}    ${dp_body}
    :FOR    ${IND}    IN RANGE    0    ${mx}
    \    ${dpuri} =    Get From Dictionary    ${dp_body[${IND}]}    resourceUri
    \    Log to console    ${dpuri}
    \    ${uri} =    Get Deploymentplan Uri    ${dpuri}
    \    Set to Dictionary    ${dp_body[${IND}]}    resourceUri    ${uri}
    [Return]    ${dp_body}

Power On Off Server
	[Documentation]		Power On/Power Off Server Hardware
	[Arguments]    ${ServerHwUri}    ${power_state}
	Log    Powering ${power_state} Server Hardware : ${ServerHwUri}
	${blade_load}=		Create Dictionary		powerState=${power_state}
	...										powerControl=MomentaryPress
	${Response}=    Fusion Api Edit Server Hardware Power State		${blade_load}		${ServerHwUri}
	${taskuri}=	   Get From Dictionary		${Response}		uri
	${retries}=    Convert To Integer		20
	${sleep_time}=    Convert To Integer		30
	${Resp}=    Fusion Api Wait For Task To Complete	${taskuri}		retries=${retries}		sleep_time=${sleep_time}
	${taskState}		Get From Dictionary		${Resp}		taskState
	${taskStatus}		Get From Dictionary		${Resp}		taskStatus
	[Return]    ${taskState}    ${taskStatus}





