*** Settings ***
Resource            ../../../../fusion/tests/resource/fusion_api_all_resource_files.txt

*** Variables ***
${APP_SSH_USERNAME}           root             
${APP_SSH_PASSWORD}           hpvse1
${APP_TIMEOUT}                300
${APP_PROMPT}                 #
${SERVER_SSH_USERNAME}        root
${SERVER_SSH_PASSWORD}        imageMgmt123


*** Keywords ***
# -----------------------------------------------------------------------------
#   ANY BASH SHELL INTERFACE KEYWORDS
# -----------------------------------------------------------------------------
Login to Appliance via SSH
    [Documentation]             Connect to Appliance CIM Bash via SSH
    ...                         Example:\n| Login to Appliance Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}      ${USERNAME}=${APP_SSH_USERNAME}
    ...                         ${PASSWORD}=${APP_SSH_PASSWORD}    
    ...                         ${TIMEOUT}=${APP_TIMEOUT}    ${ALIAS}=APP_SSH
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}    
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}
	
SSH Logout of Appliance
    [Documentation]             Exit the current open SSH connection
	Close Connection         


	

Login to Build Server via SSH
    [Documentation]             Connect to Appliance CIM Bash via SSH
    ...                         Example:\n| Login to Appliance Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}      ${USERNAME}=${SERVER_SSH_USERNAME}
    ...                         ${PASSWORD}=${SERVER_SSH_PASSWORD}    
    ...                         ${TIMEOUT}=${APP_TIMEOUT}    ${ALIAS}=APP_SSH
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}    
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}
	
Wait For Appliance To Become Pingable
	[Documentation]	Waits for an appliance to become pingable
	[Arguments]		${appliance}={IP}	${timeout}=1 min	${interval}=5 s
	Wait Until Keyword Succeeds		${timeout}	${interval}	setup-bringup-keywords.Appliance is pingable 	${appliance}

Appliance is pingable
	[Arguments]		${appliance}
	Set Log Level	TRACE
	Run keyword if	os.name == "nt"	setup-bringup-keywords.Windows ping	${appliance}
	...	ELSE	Unix ping	${appliance}

Appliance is unreachable
    [Documentation]	Waits for an appliance to become unreachable
	[Arguments]		${appliance}	${timeout}=1 min	${interval}=5 s
	Wait Until Keyword Succeeds		${timeout}	${interval}	 Windows ping unreachable check 	${appliance}
	Set Log Level	TRACE
	Run keyword if	os.name == "nt"	Windows ping unreachable check	${appliance}
	
Windows ping
	[Arguments]		${host}
	${result} =  Set Variable   0
    ${Output}=    Run    ping -n 4 ${host}
    #fusion_api_appliance_setup.Log to console and logfile    ${Output}
	${res} =  Get Lines containing String  ${output}  Destination host unreachable
#	Log to console        DEBUG - ${res}
	${lc} =   Get Line Count  ${res}
#	Log to console        DEBUG - ${lc}
	${result} =  Evaluate  ${lc} + ${result}
#	Log to console       Windows Ping says ${result}
#	${result} =          Validatex Response  {output}  Destination host unreachable
#	Log to console       Windows Ping says again ${result}
	[Return]   ${result}
	
#    Should Contain    ${Output}    Reply from ${host}
#	[Return]	${Output}
	
Windows ping unreachable check
	[Arguments]		${host}
    ${Output}=    Run    ping -n 4 ${host}
    fusion_api_appliance_setup.Log to console and logfile    ${Output}
    Should Contain    ${Output}    unreachable
	[Return]	${Output}
	
Wait for appliance webapps to startup
    [Arguments]		${IP} 
    Set Log Level  TRACE
    Login to Appliance via SSH  ${IP}
	${output} =   Execute Command  /ci/bin/wait-for-cic
	Should Contain	${output}    done
	[Return]	${Output}
 
Is usb mounted on appliance
   [Arguments]		${IP} 
   Set Log Level  TRACE
   Login to Appliance via SSH  ${IP}
   ${output} =   Execute Command  cd /mnt/usb;echo $?
   Should Contain	${output}    0
   [Return]	 ${Output}

	
Validatex Response
   [Documentation]    Check if a string is there in the 'response' 
   ...                and return line-count
   [Arguments]        ${response}   ${validationString}
   Set Variable       ${lc}  0
   Set Variable       ${res}  ""
   ${res} =           Get Lines containing String  ${response}   ${validationString}
   ${lc} =            Get Line Count  ${res}
   [return]           ${lc}
   
	
   
