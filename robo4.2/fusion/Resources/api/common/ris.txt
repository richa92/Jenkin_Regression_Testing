*** Settings ***
Library				FusionLibrary
Library  			BuiltIn
Library				Collections
Library             json
Library  			Dialogs
Library             OperatingSystem
Library             ./RisHelpers.py

*** Keywords ***
Verify RIS Node
    [Documentation]	Verify RIS Node
    ...             ris_node = {
    ...                 "server": ENC1SHBAY1
    ...                 "username":"Administrator",
    ...                 "password":"hpvse123",
    ...                 "path":"/rest/v1/Systems/1/bios/iSCSI",
    ...                 "validate":{
    ...                     "Description": "This is the Server iSCSI Software Initiator Current Settings",
    ...                 }
    ...             }
	[Arguments]		${ris_node}  ${VERBOSE}=False  ${iLO_IP}=${None}  ${DISABLE_DICT_SORTING}=${False}  ${DISABLE_LIST_SORTING}=${False}
	Run Keyword If  ${iLO_IP}==${None}  Log    \nVerify RIS node for server ${ris_node['server']}    console=true
	${ris_node['ilo']} =      Run Keyword If    ${iLO_IP}==${None}
	...     Get Server Hardware iLO IP  ${ris_node['server']}
	...     ELSE    Get Variable Value        ${iLO_IP}
	Run Keyword If    '${VERBOSE}'=='True'  Log    The iLO is ${ris_node['ilo']}    console=true
    ${output} =  Get RIS Resource  ${ris_node['ilo']}  ${ris_node['username']}  ${ris_node['password']}  ${ris_node['path']}
    ${validate_status} =  Fusion api validate response follow  ${ris_node['validate']}  ${output}  wordy=${VERBOSE}  disable_dict_sorting=${DISABLE_DICT_SORTING}  disable_list_sorting=${DISABLE_LIST_SORTING}
    Run Keyword If  '${validate_status}'=='False'  Fail  Verify RIS node for server iLO ${ris_node['ilo']} failed
    Log    PASS: Verify RIS node for server iLO ${ris_node['ilo']}    console=true

Verify RIS Nodes for List
    [Documentation]  Verify RIS Nodes for List
    [Arguments]		${list}  ${DISABLE_DICT_SORTING}=${False}  ${DISABLE_LIST_SORTING}=${False}
    Run Keyword for List  ${list}  Verify RIS Node  DISABLE_DICT_SORTING=${DISABLE_DICT_SORTING}  DISABLE_LIST_SORTING=${DISABLE_LIST_SORTING}

Contain String in PersistentBootConfigOrder
    [Documentation]	Contain String in PersistentBootConfigOrder
    ...             ris_node = {
    ...                 "server": ENC1SHBAY1
    ...                 "username":"Administrator",
    ...                 "password":"hpvse123",
    ...                 "path":"/rest/v1/Systems/1/bios/iSCSI",
    ...                 "string":"NIC.FlexLOM.\\d.\\d.iSCSI"
    ...             }
	[Arguments]		${ris_node}  ${CONTAIN}=True  ${VERBOSE}=False
	Log    \nVerify RIS node for server ${ris_node['server']}    console=true
	${ris_node['ilo']} =  Get Server Hardware iLO IP  ${ris_node['server']}
	Run Keyword If    '${VERBOSE}'=='True'  Log    The iLO is ${ris_node['ilo']}    console=true
    ${output} =  Get RIS Resource  ${ris_node['ilo']}  ${ris_node['username']}  ${ris_node['password']}  ${ris_node['path']}
    ${boot_order} =  get from dictionary  ${output}  PersistentBootConfigOrder
    ${boot_order} =  convert to string  ${boot_order}
    Run Keyword If    '${VERBOSE}'=='True'    Log    Persistent boot order is ${boot_order}    console=true
    ${matches} =  Get Regexp Matches  ${boot_order}  ${ris_node['string']}
    ${len} =  get length  ${matches}
    Run Keyword If    '${VERBOSE}'=='True'    Log    Matches is ${matches}    console=true
    Run Keyword If  '${len}'=='0' and '${CONTAIN}'=='True'  Fail  Contain String in PersistentBootConfigOrder ${ris_node['ilo']} CONTAIN=${CONTAIN} failed
    Run Keyword If  '${len}'!='0' and '${CONTAIN}'=='False'  Fail  Contain String in PersistentBootConfigOrder ${ris_node['ilo']} CONTAIN=${CONTAIN} failed
    Log    PASS: Contain String in PersistentBootConfigOrder ${ris_node['ilo']} CONTAIN=${CONTAIN}    console=true

Contain String in PersistentBootConfigOrder for List
    [Documentation]  Contain String in PersistentBootConfigOrder for List
    [Arguments]		${list}  &{kwargs}
    Run Keyword for List with kwargs  ${list}  Contain String in PersistentBootConfigOrder  &{kwargs}

Get RIS Node
    [Documentation]	Get RIS Node
    ...             ris_node = {
    ...                 "server": ENC1SHBAY1
    ...                 "username":"Administrator",
    ...                 "password":"hpvse123",
    ...                 "path":"/rest/v1/Systems/1/bios/iSCSI",
    ...             }
	[Arguments]		${ris_node}  ${VERBOSE}=False
	Log    \nGet RIS node for server ${ris_node['server']}    console=true
	${ris_node['ilo']} =  Get Server Hardware iLO IP  ${ris_node['server']}
	Run Keyword If    '${VERBOSE}'=='True'  Log    The iLO is ${ris_node['ilo']}    console=true
    ${output} =  Get RIS Resource  ${ris_node['ilo']}  ${ris_node['username']}  ${ris_node['password']}  ${ris_node['path']}
    Run Keyword If  '${VERBOSE}'=='True'  Log    The RIS node for server ${ris_node['server']} is ${output}    console=true
    [Return]  ${output}

Get RIS UefiClass
    [Documentation]	Get RIS UefiClass
    ...             The data file needs to define ilo_credentials.
    ...             Get RIS UefiClass  ${SERVER}
	[Arguments]		${server}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log    \nGet RIS UefiClass for server ${server}    console=true
	${ilo} =  Get Server Hardware iLO IP  ${server}
	Run Keyword If    '${VERBOSE}'=='True'  Log    The iLO is ${ilo}    console=true
    ${output} =  Get RIS Resource  ${ilo}  ${ilo_username}  ${ilo_password}  /redfish/v1/Systems/1/
    Run Keyword If  '${VERBOSE}'=='True'  Log    The RIS node for server ${server} is ${output}    console=true
    ${UefiClass} =  get from dictionary  ${output['Oem']['Hpe']['Bios']}  UefiClass
    [Return]  ${UefiClass}

Update RIS SmartStorageConfig Settings DWC
    [Documentation]	Update RIS SmartsStorageConfig Settings DWC
    ...             The data file needs to define ilo_credentials.
    ...             Update RIS SmartsStorageConfig Settings DWC  ${SERVER}  Enabled|Disabled
	[Arguments]		${server}  ${DWC}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}
	Log    \nUpdate RIS Smartstorageconfig Settings DWC for server ${server}    console=true
	${ilo} =  Get Server Hardware iLO IP  ${server}
	${payload} =  Get RIS Resource  ${ilo}  ${ilo_username}  ${ilo_password}  /redfish/v1/Systems/1/smartstorageconfig/settings
    Set to Dictionary    ${payload}    DriveWriteCache    ${DWC}
	${json_string} =  json.dumps  ${payload}
	${rtn} =  PUT RIS Resource  ${ilo}  ${ilo_username}  ${ilo_password}  /redfish/v1/Systems/1/smartstorageconfig/settings  ${json_string}
    Should be equal  ${rtn}  ${true}  msg=Update RIS SmartsStorageConfig Settings DWC
    Log     PASS: Update RIS SmartStorageConfig Settings DWC on ${server} to ${DWC}   console=true

Get RIS Server Memory
    [Documentation]	Get RIS Server Memory details
    ...             The data file needs to define ilo_credentials.
    ...             ris_node = {
    ...                 "server": ENC1SHBAY1
    ...                 "username":"Administrator",
    ...                 "password":"hpvse123",
    ...                 "path":"/rest/v1/Systems/1/Memory",
    ...             }
	[Arguments]		${ris_node}  ${VERBOSE}=False
	Log  \nGet RIS node for server ${ris_node['server']}
	${ris_node['ilo']} =  Get Server Hardware iLO IP  ${ris_node['server']}
	Run Keyword If    '${VERBOSE}'=='True'  Log  The iLO is ${ris_node['ilo']}
    ${command} =  set variable  curl -ksL --user ${ris_node['username']}:${ris_node['password']} -X GET https://${ris_node['ilo']}${ris_node['path']}
    ${rc}  ${output} =  run and return rc and output  ${command}
    Run Keyword If    '${VERBOSE}'=='True'    Log    run ${command} output is ${output}
    Should be equal as integers  ${rc}  0  msg=Return code of ${command}
    ${output} =  json.loads  ${output}
    Run Keyword If  '${VERBOSE}'=='True'  Log  The RIS node for server ${ris_node['server']} is ${output}
    ${index} =    Set Variable    ${0}
    ${dimms} =  Create List
    :FOR    ${item}    IN    @{output['Members']}
    \    ${path} =  set variable  ${item['@odata.id']}
    \    Log  ${path}
    \    ${command} =  set variable  curl -ksL --user ${ris_node['username']}:${ris_node['password']} -X GET https://${ris_node['ilo']}${path}
    \    ${rc}  ${output2} =  run and return rc and output  ${command}
    \    Run Keyword If    '${VERBOSE}'=='True'    Log    run ${command} output is ${output2}
    \    Append To List   ${dimms}  ${output2}
    Set To Dictionary    ${output}  memory  ${dimms}
    [Return]  ${output}

Get DCS RIS Server Memory
    [Documentation]	Get RIS Server Memory details
    ...             The data file needs to define ilo_credentials.
    ...             ris_node = {
    ...                 "server": ENC1SHBAY1
    ...                 "username":"Administrator",
    ...                 "password":"hpvse123",
    ...                 "path":"/rest/v1/Systems/1/Memory",
    ...             }
	[Arguments]		${ris_node}  ${VERBOSE}=True
	Log  \nGet RIS node for server ${ris_node['server']}
	${ris_node['ilo']} =  Get Server Hardware iLO IP  ${ris_node['server']}
	Run Keyword If    '${VERBOSE}'=='True'  Log  The iLO is ${ris_node['ilo']}
	${payload_url} =  Set Variable  https://${ris_node['ilo']}/redfish/v1/Systems/1/Memory/
	${payload} =  Create Dictionary  url=${payload_url}  payload=   methodType=GET
	${resp} =   DCS Api Post Get Server Memory   ${APPLIANCE_IP}  body=${payload}
	Log  \n${resp}
    Run Keyword If  '${VERBOSE}'=='True'  Log  The RIS node for server ${ris_node['server']} is ${resp}
    ${index} =    Set Variable    ${0}
    ${dimms} =  Create List
    :FOR    ${item}    IN    @{resp['Members']}
    \    ${path} =  set variable  ${item['@odata.id']}
    \    Log  ${path}
    \   ${dimm_payload_url} =  Set Variable  https://${ris_node['ilo']}${path}
	\   ${dimm_payload} =  Create Dictionary  url=${dimm_payload_url}  payload=   methodType=GET
	\   ${dimm_resp} =   DCS Api Post Get Server Dimm   ${APPLIANCE_IP}  body=${dimm_payload}
    \    Run Keyword If    '${VERBOSE}'=='True'    Log    output is ${dimm_resp}
    \    Append To List   ${dimms}  ${dimm_resp}
    Set To Dictionary    ${resp}  memory  ${dimms}
    Log  \n${resp}
    [Return]  ${resp}

Server Hardware Local Storage Should Match RIS
    [Documentation]	Server hardware local storage should match RIS
    ...             The data file needs to define ilo_credentials.
    [Arguments]		${server}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}
    Log  Checking server hardware local storage on server ${server}  console=True
    ${ilo} =  Get Server Hardware iLO IP  ${server}
    ${sh_uri} =  Get Server Hardware URI  ${server}
    ${sh_ls} =  Fusion Api Get Resource  uri=${sh_uri}/localStorage

    # this Keyword used to use RIS as "Expected" and REST as "Actual" for Fusion Api Validate Response Follow.
    # At 4.20 major restructure in both thus it easiere to make REST the expected and modify that data.  REST is a subset
    # of the RIS.  Still did require changes in "Get RIS Array Controllers" but far less than if we kept RIS as the "Expected"
    ${sh_ls} =    Massage REST For RIS Compare    ${sh_ls}

    Log  The server hardware local storage ${sh_ls}
    ${ilo_ls} =  Get RIS Array Controllers  ${ilo}  ${ilo_username}  ${ilo_password}
    Log  The RIS local storage ${ilo_ls}
    ${verify} =  Fusion Api Validate Response Follow  ${sh_ls}  ${ilo_ls}  wordy=True
    Should be equal  ${verify}  ${True}  msg=Server Hardware Local Storage Should Match RIS on server ${server}
    Log  PASS: Server hardware local storage should match RIS on server ${server}  console=True
