*** Settings ***
Library				FusionLibrary
Library  			BuiltIn
Library				Collections
Library             json
Library  			Dialogs
Library             OperatingSystem
Library             XML
Library             ./CpqlocfgHelper.py

*** Keywords ***
Run cpqlocfg and Verify Server POST State
    [Documentation]	Run cpqlocfg utility on the iLO and verify the server POST state
    ...                 Run cpqlocfg and Verify Server POST State  16.114.220.48  IN_POST_DISCOVERY_COMPLETE|FINISHED_POST
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${post_state}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and verify POST state is ${post_state} on iLO ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_Host_Post_State.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to get POST state for ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  SERVER_POST_STATE
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server ${ilo} POST state is ${element.attrib['VALUE']}  console=True
    Should Match Regexp  ${element.attrib['VALUE']}  (?m)${post_state}  msg=The POST state of server ${ilo} should match
    [Return]  ${output}

Run cpqlocfg and Verify CQTDISC Should Not Be Set
    [Documentation]  Run cpqlocfg utility on the iLO and verify that the CQTDISC is not Set
    ...                 Run cpqlocfg and Verify CQTDISC Should Not Be Set  16.114.220.48
    ...             Data file needs to define:
    ...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
    [Arguments]  ${ilo}  ${VERBOSE}=True
    Log  \nRun cpqlocfg and verify CQTDISC should not be set on server iLO ${ilo}  console=True
    ${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
    ${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_CQTDISC.xml
#   Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  CpqlocfgHelper.run_cpqlocfg  ${command}
    Should Match Regexp    ${output}  '.*There is no such EV.*'
    [Return]  ${output}

Run cpqlocfg and Reset iLO
    [Documentation]	Run cpqlocfg utility and reset the iLO
    ...                 Run cpqlocfg and Reset iLO  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and reset iLO ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Reset_RIB.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to reset ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  INFORM
    Run Keyword If    '${VERBOSE}'=='True'    Log  The INFORM is ${element.text}  console=True
    Should Match  ${element.text}  Integrated Lights-Out will reset at the end of the script.  msg=iLO ${ilo} is reset
    [Return]  ${output}

Run cpqlocfg and Get Server Name
    [Documentation]	Run cpqlocfg utility and get server name
    ...                 Run cpqlocfg and Get Server Name  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and get server name on iLO ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_Server_Name.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to get server name from ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  SERVER_NAME
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server name of ${ilo} is ${element.attrib['VALUE']}  console=True
    [Return]  ${element.attrib['VALUE']}

Run cpqlocfg and Check Server Name
    [Documentation]	Run cpqlocfg utility and check server name
    ...                 Run cpqlocfg and Check Server Name  16.114.220.48  newhost
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${expected_server_name}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and check server name is ${expected_server_name} on iLO ${ilo}  console=True
	${actual_server_name} =  Run cpqlocfg and Get Server Name  ${ilo}  ilo_username=${ilo_username}  ilo_password=${ilo_password}  VERBOSE=${VERBOSE}
    Should Match  ${actual_server_name}  ${expected_server_name}  msg=The server name on iLO ${ilo} should match expected

Run cpqlocfg and Set Server Name
    [Documentation]	Run cpqlocfg utility and set server name
    ...                 Run cpqlocfg and Set Server Name  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${server_name}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and set server name on iLO ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
    ${action} =  set variable  ${cpqlocfg_dir}\\actions\\Set_Server_Name.xml
    ${action_copy} =  set variable  ${cpqlocfg_dir}\\actions\\Set_Server_Name_copy.xml
    ${xml} =  Parse XML  ${action}
    ${element} =  Get Element  ${xml}  LOGIN/SERVER_INFO/SERVER_NAME
    set element attribute  ${element}  value  ${server_name}
    Save Xml  ${xml}  ${action_copy}  encoding=${None}
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action_copy} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to set server name on ${ilo} should return PASS
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server name of ${ilo} is set to ${server_name}  console=True
    [Return]  ${status}

Run cpqlocfg and Power On Server
    [Documentation]	Run cpqlocfg utility and power on server
    ...                 Run cpqlocfg and Power On Server  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and power on ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Set_Host_Power_On.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to power on ${ilo} should return PASS
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server ${ilo} is powered on  console=True
    [Return]  ${status}

Run cpqlocfg and Power Off Server
    [Documentation]	Run cpqlocfg utility and power off server
    ...                 Run cpqlocfg and Power Off Server  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and power off ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Set_Host_Power_Off.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to power off ${ilo} should return PASS
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server ${ilo} is powered off  console=True
    [Return]  ${status}

Run cpqlocfg and Get Server Power State
    [Documentation]	Run cpqlocfg utility and get server power state
    ...                 Run cpqlocfg and Get Server Power State  16.114.220.48  ON
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and get server power state on iLO ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_Host_Power.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to get server power state for ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  GET_HOST_POWER
    Run Keyword If    '${VERBOSE}'=='True'    Log  The server power state of ${ilo} is ${element.attrib['HOST_POWER']}  console=True
    [Return]  ${element.attrib['HOST_POWER']}

Run cpqlocfg and Check Server Power State
    [Documentation]	Run cpqlocfg utility and check server power state
    ...                 Run cpqlocfg and Check Server Power State  16.114.220.48  ON
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${expected_power_state}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and and Check server power state is ${expected_power_state} on iLO ${ilo}  console=True
	${actual_power_state} =  Run cpqlocfg and Get Server Power State  ${ilo}  ilo_username=${ilo_username}  ilo_password=${ilo_password}  VERBOSE=${VERBOSE}
    Should Match  ${actual_power_state}  ${expected_power_state}  msg=The server power state on iLO ${ilo} should match expected

Run cpqlocfg and Hold Power Button
    [Documentation]	Run cpqlocfg utility and hold power button
    ...                 Run cpqlocfg and hold power button  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and hold power button ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Set_Virtual_Power_BTN.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to hold power button for ${ilo} should return PASS
    Run Keyword If    '${VERBOSE}'=='True'    Log  Hold the power button on server ${ilo}  console=True
    [Return]  ${status}

Run cpqlocfg and Power Off Server By Press and Hold
        [Documentation]	Run cpqlocfg utility and power off server by press and hold
    ...                 Run cpqlocfg and power off server by press and hold  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and power off server by press and hold ${ilo}  console=True
	${power_state} =  Run cpqlocfg and Get Server Power State  ${ilo}  ilo_username=${ilo_username}  ilo_password=${ilo_password}  VERBOSE=True
	Run Keyword If    '${power_state}'=='ON'  Run cpqlocfg and Hold Power Button  ${ilo}
	Wait Until Keyword Succeeds  5m  5s  Run cpqlocfg and Check Server Power State  ${ilo}  OFF

Run cpqlocfg and Get SNMP Settings
    [Documentation]	Run cpqlocfg utility and get SNMP settings
    ...                 Run cpqlocfg and get SNMP settings  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and get SNMP settings for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_SNMP_IM_Settings.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to get SNMP settings for ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  GET_SNMP_IM_SETTINGS
    ${rtn} =  element to string  ${element}
    Run Keyword If    '${VERBOSE}'=='True'    Log  The SNMP Settings of ${ilo} are ${rtn}  console=True
    [Return]  ${rtn}

Run cpqlocfg and Set SNMP Settings
    [Documentation]	Run cpqlocfg utility and set SNMP settings
    ...                 Run cpqlocfg and set SNMP settings  16.114.220.48  Init_SNMP_IM_Settings.xml
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${action}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and set SNMP settings for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\${action}
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to set SNMP settings for ${ilo} should return PASS
    [Return]  ${output}

Run cpqlocfg and Send SNMP Test Trap
    [Documentation]	Run cpqlocfg utility and send SNMP test trap. Works on iLO4 and above.
    ...                 Run cpqlocfg and send SNMP test trap  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and send SNMP test trap for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Send_SNMP_Test_Trap.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to send SNMP Test Trap for ${ilo} should return PASS
    [Return]  ${output}

Run cpqlocfg and Clear SNMP Settings
    [Documentation]	Run cpqlocfg utility and clear SNMP settings
    ...                 Run cpqlocfg and clear SNMP settings  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and clear SNMP settings for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Clear_SNMP_IM_Settings.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to get SNMP settings for ${ilo} should return PASS
    [Return]  ${output}

Run cpqlocfg and Get CQHORD
    [Documentation]	Run cpqlocfg and Get CQHORD EV. CQHORD defines legacy BIOS mode boot controller order
    ...                 Run cpqlocfg and Get CQHORD  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and get CQHORD EV for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_CQHORD.xml
	# Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=Run cpqlocfg and Get CPHORD for ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${rtn} =  XML.Get Element Attribute  ${xml}  VALUE  GET_EV
    Run Keyword If    '${VERBOSE}'=='True'    Log  The CQHORD EV of ${ilo} is ${rtn}  console=True
    [Return]  ${rtn}

Run cpqlocfg and Get Licenses
    [Documentation]	Run cpqlocfg and Get Licenses.
    ...                 Run cpqlocfg and Get Licenses  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and get Licenses for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_all_Licenses.xml
	# Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=Run cpqlocfg and Get Licenses for ${ilo} should return PASS
    ${xml} =  Parse XML  ${output}
    ${element} =  Get Element  ${xml}  GET_ALL_LICENSES
    ${rtn} =  element to string  ${element}
    Run Keyword If    '${VERBOSE}'=='True'    Log  Licenses of ${ilo} are ${rtn}  console=True
    [Return]  ${rtn}

Run cpqlocfg and Remove Licenses
    [Documentation]	Run cpqlocfg utility and remove Licenses
    ...                 Run cpqlocfg and remove Licenses  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and remove Licenses for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Remove_License.xml
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to remove Licenses for ${ilo} should return PASS
    [Return]  ${output}

Run cpqlocfg and Set Licenses
    [Documentation]	Run cpqlocfg utility and set Licenses
    ...                 Run cpqlocfg and set Licenses  16.114.220.48  Licenses.xml
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and set Licenses for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\License.xml
	# Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg to set Licenses for ${ilo} should return PASS
    [Return]  ${output}

Run cpqlocfg and Get Licenses from blob
    [Documentation]	Run cpqlocfg and Get Licenses from blob.
    ...                 Run cpqlocfg and Get Licenses from blob  16.114.220.48
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${VERBOSE}=False
	Log  \nRun cpqlocfg and Get Licenses from blob for ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Get_all_Licenses_blob.xml
	# Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=Run cpqlocfg and Get Licenses for ${ilo} should return PASS
    ${rtn} =  Parse XML  ${output}
    Run Keyword If    '${VERBOSE}'=='True'    Log  Licenses of ${ilo} are ${rtn}  console=True
    [Return]  ${rtn}

Run cpqlocfg and Delete Remote Manager Configuration
    [Documentation]    Run cpqlocfg and removes OneView as the remote manager configuration from iLO
    ...   Currently does not check results of script.  If failed, probably due to server not remote managed
    ...   Leave up to caller to decide what to do
    [Arguments]    ${ilo}    ${VERBOSE}=False
    Log  \nRun cpqlocfg and Delete Remote Manager from ${ilo}    console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\Delete_Remote_Manager.xml
	# Get the iLO credentials from the data file
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_credentials['username']} -p ${ilo_credentials['password']}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Run Keyword If    '${VERBOSE}'=='True'    Log   Delete output: ${output}    console=true
    [Return]    ${output}

Run cpqlocfg and Execute Action
    [Documentation]	Run cpqlocfg utility and execute Argument action
    ...                 Run cpqlocfg and Execute Action  16.114.220.48    Get_IML[.xml]
	...             Data file needs to define:
	...                 ilo_credentials =  {'username': 'Administrator', 'password': 'hpvse123'}
	[Arguments]  ${ilo}  ${action}    ${ilo_username}=${ilo_credentials['username']}  ${ilo_password}=${ilo_credentials['password']}  ${VERBOSE}=False
	${action} =    Remove String    ${action}    .xml
	${action} =    Catenate    SEPARATOR=.    ${action}    xml

	Log  \nRun cpqlocfg and execute ${action} on ${ilo}  console=True
	${cpqlocfg_dir} =  set variable  ${CURDIR}\\..\\..\\..\\Tools\\cpqlocfg
	${action} =  set variable  ${cpqlocfg_dir}\\actions\\${action}
    ${command} =  set variable  ${cpqlocfg_dir}\\cpqlocfg.exe -f ${action} -s ${ilo} -u ${ilo_username} -p ${ilo_password}
    ${output}  ${status}=  run_cpqlocfg  ${command}
    Should match  ${status}  PASS  msg=run_cpqlocfg execute ${action} from ${ilo} should return PASS
    [Return]  ${output}
