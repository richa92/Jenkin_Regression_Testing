*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs
Documentation       Perform a GET on storage pool and use the entire storage pool object in the request body for PUT.
...                 Put can be used to set isManaged and requestingRefresh to True/False.
...                 Data File Examples:
...                 storage_pools = [
...                    {"storageSystemUri": STORESERV1_NAME, "name": STORESERV1_POOL1,  "isManaged": True,},
...                    {"storageSystemUri": STORESERV1_NAME, "name": STORESERV1_POOL2,  "isManaged": True,},
...                    {"storageSystemUri": STORESERV1_NAME, "name": STORESERV1_POOL3,  "isManaged": True, "requestRefreshing":False},
...                 ]

*** Keywords ***
Edit Storage Pool
	[Documentation]	Edit the storage pool.
	[Arguments]		${storagePool}
	${payload} =  Create Storage Pool PUT Payload  ${storagePool}
	${resp} =  Fusion Api Edit Storage Pool  ${payload}  ${payload['uri']}
	[return]  ${resp}

Edit Storage Pools Async
	[Documentation]	Edit a list of storage pools and return the responses.
    [Arguments]     ${storagePools}   ${sp_status_code}=202
	Log 	Editing Storage Pools     console=True
	${resplist} =  Create List
	:FOR	${sp}	IN	@{storagePools}
	\       Log  Editing the storage pool ${sp['name']}   console=True
	\		${resp} =  Edit Storage Pool  ${sp}
    \       Run Keyword If  ${resp['status_code']}!=${sp_status_code}    Run Keyword And Continue On Failure     FAIL     Editing Storage Pool ${sp['name']} failed
    \       Continue For Loop If    ${resp['status_code']}!=${sp_status_code}
	\		Append To List  ${resplist}  ${resp}
	[Return]	${resplist}

Create Storage Pool PUT Payload
	[Documentation]	Create the payload for edit storage pool.
	[Arguments]		${storagePool}
	${name} =  Get from Dictionary  ${storagePool}  name
	${ssUri} =  Get Storage System URI  ${storagePool['storageSystemUri']}
	${spUri} =  Get Storage Pool URI  ${storagePool['name']}  ssName=${storagePool['storageSystemUri']}
    ${spCopy} =  copy dictionary  ${storagePool}
    set to dictionary  ${spCopy}  storageSystemUri  ${ssUri}
	${payload} =  fusion api get resource  ${spUri}
	# remove the status_code and headers in the response
	remove from dictionary  ${payload}  status_code
	remove from dictionary  ${payload}  headers
	Update Dictionary Subset  ${payload}  ${spCopy}
	[return]		${payload}

Get Storage Pool URI
	[Documentation]	Get storage Pool URI by name and storageSystemUri if given.
	[Arguments]		${spName}	${ssName}=${None}
	${ssUri} = 	Run keyword if  '${ssName}'!='${None}'  Get Storage System URI	${ssName}
	${param} =  set variable if  '${ssName}'=='${None}'  ?query=name eq '${spName}'  ?query=name eq '${spName}' AND storageSystemUri eq '${ssUri}'
	${resp} = 	Fusion Api Get Storage Pools	param=${param}
	Return From Keyword If  ${resp['count']}==0  /rest/storage_pool_uri_${spName}_not_found
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Verify Storage Pool is Managed
    [Documentation]     Verify that Storage Pool is in Managed State
    [Arguments]     ${storage_pools}
    :FOR    ${sp}   IN      @{storage_pools}
    \   ${uri} =    Get Storage Pool URI    ${sp['name']}
    \   ${dto} =    Get Resource by URI     ${uri}
    \   Should match regexp    ${dto['state']}     Managed
    \   Should match regexp    ${dto['status']}    OK


