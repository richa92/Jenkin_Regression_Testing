*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             XML
Library             SSHLibrary
Library             String
Library             Dialogs
Library             json
Library             ./NetworkingHelpers.py

*** Keywords ***
Refresh Random SAS Interconnect
    [Documentation]  Randomly refresh SAS Interconnects
    ${name} =  Get Random Actual SAS Interconnect Name
    Fusion API Refresh SAS Interconnect by Name  ${name}

Refresh SAS Interconenct By Name
    [Documentation]  Randomly refresh SAS Interconnects by Name
    [Arguments]  ${name}
    ${sasic_uri} =    Common URI lookup by name    SASIC:${name}
    ${body} =    Create Dictionary    refreshState=RefreshPending
    ${resp} =    Fusion API Put SAS Interconnects    body=${body}    uri=${sasic_uri}
    ...    param=/refreshState
    [Return]    ${resp}

Hard Reset Random SAS Interconnect
    [Documentation]  Randomly hard reset SAS Interconnects
    ${name} =  Get Random Actual SAS Interconnect Name
    Fusion API Hard Reset SAS Interconnect by Name  ${name}

Soft Reset Random SAS Interconnect
    [Documentation]  Randomly soft reset SAS Interconnects
    ${name} =  Get Random Actual SAS Interconnect Name
    Fusion API Soft Reset SAS Interconnect by Name  ${name}

Get Random Actual SAS Interconnect Name
    [Documentation]  Randomly get actual name of SAS Interconnects
    ${all_SAS_interconnects} =    Fusion API Get SAS Interconnects
    ${count} =    Get From Dictionary    ${all_SAS_interconnects}    count
    ${random_SAS_interconnect_index} =    Evaluate    random.randint(0, ${count - 1})
    ...  modules=random
    ${name} =    Get From Dictionary
    ...  ${all_SAS_interconnects['members'][${random_SAS_interconnect_index}]}    name
    [Return]  ${name}

Power Random SAS Interconnect On and Off
    [DOCUMENTATION]  Toggle the Power, Verify,
    ...  Return To Orignal Power State and Verify for a Random SAS Interconnect
    ${name} =  Get Random Actual SAS Interconnect Name
    Fusion API Power SAS Interconnect On and Off by Name  ${name}

Get Sas Interconnect URI
    [Documentation]  Get URI of SAS Interconnect
    [Arguments]  ${name}
    ${resp} =  Fusion Api Get Sas Interconnects  param=?filter="'name' = '${name}'"
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail
    ...  Fail: Get SAS Interconnect URI found no match for name ${name}
    ${uri} =  Get From Dictionary  ${resp['members'][0]}  uri
    [Return]  ${uri}

Get Sas Interconnect
    [Documentation]  Get SAS Interconnect
    [Arguments]  ${name}
    ${resp} =  Fusion Api Get Sas Interconnects  param=?filter="'name' = '${name}'"
    Log    ${resp}  TRACE
    ${status}  ${error_message} =  Run Keyword and Ignore Error  Get From Dictionary
    ...  ${resp}  message
    Dictionary Should Not Contain Key  ${resp}  message  ${error_message}
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get SAS Interconnect found no match for name ${name}
    [Return]  ${resp['members'][0]}

Get Sas Interconnects and verify
    [Documentation]  Get SAS Interconnect and verify with expected data
    ${resp} =    Fusion Api Get Sas Interconnects
    Log    ${resp}  TRACE
    ${status}  ${error_message} =  Run Keyword and Ignore Error  Get From Dictionary
    ...  ${resp}  message
    Dictionary Should Not Contain Key  ${resp}  message  ${error_message}
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get SAS Interconnects found no Interconnects
    [Return]    ${resp['members'][0]}

Get Sas Interconnect Type URI
    [Documentation]  Get SAS Interconnect type URI
    [Arguments]  ${name}
    ${resp} =  fusion api get sas interconnect types  param=?filter="'name' = '${name}'"
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get SAS IC Type URI found no match for name ${name}
    ${uri} =  Get From Dictionary  ${resp['members'][0]}  uri
    [Return]  ${uri}

Get Random Expected SAS Interconnect
    [Documentation]  Get Random expected SAS Interconnect
    [Arguments]  ${expected_sas_interconnect_list}
    ${number_of_sas_interconnects} =  Get Length  ${expected_sas_interconnect_list}
    Log  ${\n}Number of expected SAS Interconnects: ${number_of_sas_interconnects}  console=True
    ${random_index} =  Evaluate  random.randint(0, ${number_of_sas_interconnects - 1})
    ...  modules=random
    ${random_sas_interconnect} =  Get From List  ${expected_sas_interconnect_list}  ${random_index}
    [Return]  ${random_sas_interconnect}

Verify Random SAS Interconnect
    [Documentation]  Verify Random expected SAS Interconnect
    [Arguments]  ${expected_sas_interconnect_list}
    ${random_expected_sas_interconnect} =  Get Random Expected SAS Interconnect
    ...  ${expected_sas_interconnect_list}
    ${expected_sas_interconnect_name} =  Get From Dictionary
    ...  ${random_expected_sas_interconnect}  name
    Log  ${\n}Expected SAS Interconnect name: ${expected_sas_interconnect_name}  console=True
    ${actual_sas_interconnect} =  Get SAS Interconnect  ${expected_sas_interconnect_name}
    Log to Console  ${\n}Actual SAS Interconnect:${actual_sas_interconnect}
    ${validate_status} =  Fusion API Validate Response Follow  ${random_expected_sas_interconnect}
    ...  ${actual_sas_interconnect}  wordy=${True}
    Run Keyword If  '${validate_status}'=='False'  Fail
    ...  Verify Random SAS Interconnect ${expected_sas_interconnect_name} failed

Verify Sas Interconnect
    [Documentation]  Verify sas interconnect DTO with the expected one
    ...              **kwargs are used to add key value pair to the expected DTO
    ...              Example:
    ...                Verify Sas Interconnect  ${expected_dto}
    ...                Verify Sas Interconnect  ${expected_dto}  uidState=Off
    ...              Data Required:
    ...                Expected sas interconnect DTO
    [Arguments]  ${expected_dto}  &{kwargs}
    ${name} =  Get From Dictionary  ${expected_dto}  name
    Log  ${\n}Verifying Sas Interconnect ${name}
    ${new_expected_dto} =  Add Key Value to DTO  ${expected_dto}  &{kwargs}
    ${dto} =  Get Sas Interconnect  ${name}
    ${validate_status} =  Fusion api validate response follow  ${new_expected_dto}  ${dto}
    ...  wordy=${True}
    Run Keyword If  '${validate_status}'=='False'  Fail  Validate SAS Interconnect ${name} failed

Verify Sas Interconnects from list
    [Documentation]  Verify a list of sas interconnect DTOs with the expected ones
    ...              **kwargs are used to add key value pair to the expected DTO
    ...              Example:
    ...                Verify Sas Interconnects  ${list}
    ...                Verify Sas Interconnects  ${list}  powerState=On
    ...              Data Required:
    ...                List of expected sas interconnect DTO
    [Arguments]  ${list}  &{kwargs}
    Log    ${\n}Verifying Sas Interconnects from list    console=true
    Run Keyword for List with kwargs  ${list}  Verify Sas Interconnect  &{kwargs}

Patch Sas Interconnect
    [Documentation]  Patch Sas Interconnect
    ...  Example:
    ...  Patch Sas Interconnects  ${dto}  op=replace  path=/uidState
    ...  value=Off timeout=60  interval=5
    ...  Data Required:
    ...  Sas Interconnect DTO
    [Arguments]  ${dto}  ${op}=replace  ${path}=/uidState  ${value}=/off  ${timeout}=60
    ...  ${interval}=5
    ${name} =  Get From Dictionary  ${dto}  name
    Log  ${\n}Patching Sas Interconnect ${name} with op=${op} path=${path} and value=${value}
    ${uri} =  Get Sas Interconnect URI  ${name}
    ${dict} =  Create Dictionary  op=${op}  path=${path}  value=${value}
    ${list} =  Create List  ${dict}
    ${resp} =  fusion api patch sas interconnect  ${list}  ${uri}
    ${status}  ${task_uri} =  Run Keyword and Ignore Error  Get From Dictionary
    ...  ${resp['headers']}  location
    Run Keyword If  '${status}'=='FAIL'  Fail
    ...  Fail: Patch SAS IC not return Location header in ${resp}
    Log  The task URI is ${task_uri}
    ${task} =  Fusion Api Get Task  uri=${task_uri}
    Wait For Task2  ${task}  timeout=${timeout}  interval=${interval}

Turn Sas Interconnects UID Off from list
    [Documentation]  Turn Sas Interconnects UID Off from list
    ...              Example:
    ...                Turn Sas Interconnects UID Off from list  ${list}
    ...              Data Required:
    ...                List of sas interconnects
    [Arguments]  ${list}
    Log    ${\n}Turning Sas Interconnects UID Off from list    console=true
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace
    ...  path=/uidState  value=Off  timeout=60  interval=5

Turn Sas Interconnects UID On from list
    [Documentation]  Turn Sas Interconnects UID On from list
    ...              Example:
    ...                Turn Sas Interconnects UID On from list  ${list}
    ...              Data Required:
    ...                List of sas interconnects
    [Arguments]  ${list}
    Log  ${\n}Turning Sas Interconnects UID On from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace
    ...  path=/uidState  value=On  timeout=60  interval=5

Power Off Sas Interconnects from list
    [Documentation]  Power off Sas Interconnects from list
    ...              Example:
    ...                Power off Sas Interconnects from list ${list}
    ...              Data Required:
    ...                List of sas interconnects
    [Arguments]  ${list}
    Log  ${\n}Powering Off Sas Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace  path=/powerState
    ...  value=Off  timeout=120  interval=5

Power On Sas Interconnects from list
    [Documentation]  Power On Sas Interconnects from list
    ...              Example:
    ...                Power On Sas Interconnects from list  ${list}
    ...              Data Required:
    ...                List of sas interconnects
    [Arguments]  ${list}
    Log  ${\n}Powering On Sas Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace  path=/powerState
    ...  value=On  timeout=900  interval=10

Soft Reset Sas Interconnects from list
    [Documentation]  Soft Reset Sas Interconnect from list
    ...              Example:
    ...                Soft Reset Sas Interconnects from list  ${list}
    ...              Data Required:
    ...                List of Sas interconnects
    [Arguments]  ${list}
    Log  ${\n}Resetting Sas Interconnects from list console=True
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace
    ...  path=/cpuResetState  value=Reset  timeout=900  interval=10

Hard Reset Sas Interconnects from list
    [Documentation]  Hard Reset Sas Interconnect from list
    ...              Example:
    ...                Hard Reset Sas Interconnects from list  ${list}
    ...              Data Required:
    ...                List of Sas interconnects
    [Arguments]  ${list}
    Log  ${\n}Resetting Sas Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Sas Interconnect  op=replace
    ...  path=/deviceResetState  value=Reset  timeout=900  interval=10

All SAS Interconnects Status Should Be OK or Warning
    [Documentation]  Check status of SAS Interconnects and warn user in case of status is not OK
    ...              Warning shown where status is Warning
    ...              Fail test where status is other than OK and Warning
    ...  act_on_failure provide option to either fail current test(Fail)
    ...  or complete suite(Fatal Error)
    [Arguments]    ${act_on_failure}=Fail
    ${ics} =  Fusion Api Get Sas Interconnects
    # Make sure we get (more than zero) interconnects listed
    ${count}       Get From Dictionary    ${ics}    count
    Run Keyword If  '${count}'=='0'    Fail    msg=No interconnects found
    :FOR  ${ic}  IN  @{ics['members']}
    \  Log  Name ${ic['name']}, Status ${ic['status']}, State ${ic['state']}
    \  Run Keyword If  '${ic['status']}' == 'OK'  Log  Name ${ic['name']}, Status ${ic['status']}
    ...  ELSE IF  '${ic['status']}' == 'Warning'  Log  Name ${ic['name']}, Status ${ic['status']}
    ...  level=WARN
    ...  ELSE  Run Keyword And Continue On Failure  ${act_on_failure}
    ...  Name ${ic['name']}, Status ${ic['status']}

SAS Interconnects Attribute ${attribute} Should Have Value ${value}
    [Documentation]  Check attribute of SAS Interconnect and warn user in case of state is not expected
    ...              Fail test where it is other than expected
    ${ics} =  Fusion Api Get Sas Interconnects
    # Make sure we get (more than zero) interconnects listed
    ${count}       Get From Dictionary    ${ics}    count
    Run Keyword If  '${count}'=='0'    Fail    msg=No SAS Interconnects found
    ${res} =  Set Variable  ${empty}
    :FOR  ${ic}  IN  @{ics['members']}
    \  ${res} =  Run Keyword If  '${ic['${attribute}']}' != '${value}'  Catenate  ${res}
    ...     \nSAS ICM name [${ic['name']}] Expected ${attribute} ${value} but found ${ic['${attribute}']}
    \  ...  ELSE  Set Variable  ${res}
    ${count} =  Get Length  ${res}
    Run Keyword If  '${count}' > '0'  Fail  ${res}