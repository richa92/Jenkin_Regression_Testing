*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             XML
Library             SSHLibrary
Library             String
Library             Dialogs

*** Keywords ***
IC reached state
    [Documentation]  IC reached state
    [Arguments]     ${uri}  ${state}
    Set Log Level   TRACE
    ${resp} =   fusion api get resource     ${uri}
    Log     \t ${uri}: ${resp['state']}
    Should Match Regexp     ${resp['state']}    ${state}
    [Return]    ${resp}

Get IC
    [Documentation]  Get IC
    ${resp} =   fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Run Keyword If  '${ic['model']}' != '${ICM_MODEL}'      Continue For Loop
    \   Append to list      ${ic_list}  ${ic}
    [Return]    ${ic_list}

Get from IC
    [Documentation]  Get from IC
    [Arguments]     ${ic}   ${element}
    ${return} =     Get From Dictionary     ${ic}   ${element}
    [Return]    ${return}

Get IC URI
    [Documentation]  Get IC URI
    [Arguments]     ${name}
    ${resp} =   Fusion Api Get Interconnect         param=?filter="'name' = '${name}'"
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get IC URI found no match for name ${name}
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Get Interconnect
    [Documentation]  Get Interconnect
    [Arguments]     ${name}
    ${resp} =   Fusion Api Get Interconnect  param=?filter="'name' = '${name}'"
    Log    ${resp}  TRACE
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get IC found no match for name ${name}
    [Return]    ${resp['members'][0]}

Get Interconnect Firmware Version
    [Documentation]  Get interconnect firmware version by name
    ...              Example:
    ...                Get Interconnect Firmware Version  ${interconnect}
    [Arguments]     ${name}
    ${interconnect} =   Get Interconnect  ${name}
    ${fwversion} =  Get From Dictionary  ${interconnect}  firmwareVersion
    [Return]    ${fwversion}

Get Interconnect Type URI
    [Documentation]  Get Interconnect Type URI
    [Arguments]     ${name}
    ${resp} =   Fusion Api Get Interconnect Types  param=?filter="'name'=='${name}'"
    ${count} =  Get From Dictionary  ${resp}  count
    Run Keyword If  $count==0  Fail  Fail: Get IC Type URI found no match for name ${name}
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Verify Interconnect
    [Documentation]  Verify interconnect DTO with the expected one
    ...              **kwargs are used to add key value pair to the expected DTO
    ...              Example:
    ...                Verify Interconnect ${expected_dto}
    ...                Verify Interconnect ${expected_dto}  state=Monitored
    ...              Data Required:
    ...                Expected interconnect DTO
    [Arguments]  ${expected_dto}  &{kwargs}
    ${name} =  Get From Dictionary  ${expected_dto}  name
    Log     ${\n}Verifying Interconnect ${name}  console=True
    ${new_expected_dto} =  Add Key Value to DTO  ${expected_dto}  &{kwargs}
    ${dto} =  Get Interconnect  ${name}
    ${validate_status} =  Fusion api validate response follow  ${new_expected_dto}  ${dto}  wordy=${True}
    Run Keyword If  '${validate_status}'=='False'  Fail  Validate Interconnect ${name} failed

Verify Interconnects from list
    [Documentation]  Verify list of interconnect DTO with the expected ones.
    ...              **kwargs are used to add key value pair to the expected DTO
    ...              Example:
    ...                Verify Interconnects from list  ${list}
    ...                Verify Interconnects from list  ${list}  state=Monitored
    ...              Data Required:
    ...                List of expected interconnects
    [Arguments]  ${list}  &{kwargs}
    Log     ${\n}Verifying Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Verify Interconnect  &{kwargs}

Patch Interconnect
    [Documentation]  Patch Interconnect
    ...              Example:
    ...                Patch Interconnect  ${dto}  op=replace  path=/uidState  value=Off timeout=60  interval=5
    ...              Data Required:
    ...                Interconnect DTO
    [Arguments]  ${dto}  ${op}=replace  ${path}=/uidState  ${value}=/off  ${timeout}=60  ${interval}=5
    ${name} =  Get From Dictionary  ${dto}  name
    Log     ${\n}Patching Interconnect ${name} with op=${op} path=${path} and value=${value}
    ${uri} =  Get IC URI  ${name}
    ${dict} =  Create Dictionary  op=${op}  path=${path}  value=${value}
    ${list} =  Create List  ${dict}
    ${resp} =  fusion api patch interconnect  ${list}  ${uri}
    ${status}  ${task_uri} =  Run Keyword and Ignore Error  Get From Dictionary  ${resp['headers']}  location
    Return From Keyword If    '${status}'=='FAIL'    ${resp}
    Log    The task URI is ${task_uri}
    ${task} =  Fusion Api Get Task  uri=${task_uri}
    Wait For Task2  ${task}  timeout=${timeout}  interval=${interval}

Turn Interconnects UID Off from list
    [Documentation]  Turn Interconnects UID Off from list
    ...              Example:
    ...                Turn Interconnects UID Off from list  ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Turning Interconnects UID Off from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/uidState  value=Off  timeout=60  interval=5

Turn Interconnects UID On from list
    [Documentation]  Turn Interconnects UID On from list
    ...              Example:
    ...                Turn Interconnects UID On from list  ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Turning Interconnects UID On from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/uidState  value=On  timeout=60  interval=5

Power Off Interconnects from list
    [Documentation]  Power off Interconnects from list
    ...              Example:
    ...                Power off Interconnects from list ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Powering Off Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/powerState  value=Off  timeout=60  interval=5


Power On Interconnects from list
    [Documentation]  Power On Interconnects from list
    ...              Example:
    ...                Power On Interconnects from list  ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Powering On Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/powerState  value=On  timeout=300  interval=10

Soft Reset Interconnects from list
    [Documentation]  Soft Reset Interconnect from list
    ...              Example:
    ...                Soft Reset Interconnects from list  ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Resetting Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/cpuResetState  value=Reset  timeout=600  interval=10

Hard Reset Interconnects from list
    [Documentation]  Hard Reset Interconnect from list
    ...              Example:
    ...                Hard Reset Interconnects from list  ${list}
    ...              Data Required:
    ...                List of interconnects
    [Arguments]  ${list}
    Log     ${\n}Resetting Interconnects from list  console=True
    Run Keyword for List with kwargs  ${list}  Patch Interconnect  op=replace  path=/deviceResetState  value=Reset  timeout=600  interval=10

Create IC Port URI
    [Documentation]  Creates IC Port URI from given Interconnect name and port name
    ...              Example:   create a valid dowlink port uri
    ...                Create IC Port URI     ic=CN75016BG8, interconnect 3   port=d1
    [Arguments]     ${IC}   ${port}
    ${icUri} =  Get IC URI     ${IC}
    ${icId} =    Fetch from right    ${icUri}    /
    ${icPortUri}=    Set Variable    ${icUri}/ports/${icId}:${port}
    Log    ${icPortUri}    console=True
    [Return]    ${icPortUri}


Update IC Port
     [Documentation]  Enable or Disable Uplink or Downlink IC Port
    ...              Example:
    ...                Update IC Port     ${ENC1ICBAY3}   ${UpLinkPort}   ${disable_uplink}
    ...              Data Required:
    ...                disable_uplink = {
    ...                      "associatedUplinkSetUri": "us-unTagged",
    ...                      "interconnectName": ENC1ICBAY3,
    ...                       "portType": "Uplink",
    ...                     "portId": "ENC1ICBAY3:Q1:1",
    ...                     "portHealthStatus": "Normal",
    ...                     "capability": ["EnetFcoe","Ethernet","FibreChannel"],
    ...                     "configPortTypes": ["EnetFcoe","Ethernet"],
    ...                     "enabled": False,
    ...                     "portName": UpLinkPort,
    ...                     "portStatus": "Linked",
    ...                     "type": "port"}

    [Arguments]    ${IC}    ${port}    ${body}
    ${icUri} =    Get IC URI    ${IC}
    ${icId} =    Fetch from right    ${icUri}    /
    ${portId}=    Set Variable    ${icId}:${port}
    Log     \nUpdating port  console=True
    ${us} =    Get From Dictionary    ${body}    associatedUplinkSetUri
    ${usUri} =    Get Uplinkset URI    ${us}
    Set to dictionary   ${body}    associatedUplinkSetUri    ${usUri}
    Set to dictionary   ${body}    portId    ${portId}
    ${req_body} =    Create List
    Append to list    ${req_body}    ${body}
    ${resp} =    Fusion Api Edit Interconnect Ports    body=${req_body}    uri=${icUri}
    ${status}  ${task_uri} =    Run Keyword and Ignore Error    Get From Dictionary    ${resp['headers']}    location
    Return From Keyword If    '${status}'=='FAIL'    ${resp}
    Log    The task URI is ${task_uri}
    ${task} =    Fusion Api Get Task    uri=${task_uri}
    Wait For Task2    ${resp}    timeout=10m    interval=5
    [return]    ${resp}

Update IC Port Async
     [Documentation]  Enable or Disable Uplink or Downlink IC Port
    ...              Example:
    ...                Update IC Port     ${ENC1ICBAY3}   ${UpLinkPort}   ${disable_uplink}
    ...              Data Required:
    ...                disable_uplink = {
    ...                      "associatedUplinkSetUri": "us-unTagged",
    ...                      "interconnectName": ENC1ICBAY3,
    ...                       "portType": "Uplink",
    ...                     "portId": "ENC1ICBAY3:Q1:1",
    ...                     "portHealthStatus": "Normal",
    ...                     "capability": ["EnetFcoe","Ethernet","FibreChannel"],
    ...                     "configPortTypes": ["EnetFcoe","Ethernet"],
    ...                     "enabled": False,
    ...                     "portName": UpLinkPort,
    ...                     "portStatus": "Linked",
    ...                     "type": "port"}

    [Arguments]    ${IC}    ${port}    ${body}
    ${icUri} =    Get IC URI    ${IC}
    ${icId} =    Fetch from right    ${icUri}    /
    ${portId}=    Set Variable    ${icId}:${port}
    Log     \nUpdating port ${IC} ${port}  console=True
    ${us} =    Get From Dictionary    ${body}    associatedUplinkSetUri
    ${usUri} =    Get Uplinkset URI    ${us}
    Set to dictionary   ${body}    associatedUplinkSetUri    ${usUri}
    Set to dictionary   ${body}    portId    ${portId}
    ${req_body} =    Create List
    Append to list    ${req_body}    ${body}
    ${resp} =    Fusion Api Edit Interconnect Ports    body=${req_body}    uri=${icUri}
    [return]    ${resp}

All Interconnects Status Should Be OK or Warning
    [Documentation]  Check status of Interconnects and warn user in case of status is not OK
    ...              Warning shown where status is Warning
    ...              Fail test where status is other than OK and Warning
    ...  act_on_failure provide option to either fail current test(Fail) or complete suite(Fatal Error)
    [Arguments]    ${act_on_failure}=Fail
    ${ics} =   Fusion Api Get Interconnect
    # Make sure we get (more than zero) interconnects listed
    ${count}       Get From Dictionary    ${ics}    count
    Run Keyword If  '${count}'=='0'    Fail    msg=No interconnects found
    :FOR  ${ic}  IN  @{ics['members']}
    \  Log  Name ${ic['name']}, Status ${ic['status']}, State ${ic['state']}
    \  Run Keyword If  '${ic['status']}' == 'OK'  Log  Name ${ic['name']}, Status ${ic['status']}
    ...  ELSE IF  '${ic['status']}' == 'Warning'  Log  Name ${ic['name']}, Status ${ic['status']}  level=WARN
    ...  ELSE  Run Keyword And Continue On Failure  ${act_on_failure}  Name ${ic['name']}, Status ${ic['status']}

Interconnects Attribute ${attribute} Should Have Value ${value}
    [Documentation]  Check state of Interconnect and warn user in case of state is not as expected
    ...              Fail test where state is not as expected
    ${ics} =   Fusion Api Get Interconnect
    # Make sure we get (more than zero) interconnects listed
    ${count}       Get From Dictionary    ${ics}    count
    Run Keyword If  '${count}'=='0'    Fail    msg=No interconnects found
    ${res} =  Set Variable  ${empty}
    :FOR  ${ic}  IN  @{ics['members']}
    \  ${res} =  Run Keyword If  '${ic['${attribute}']}' != '${value}'  Catenate  ${res}
    ...     \nICM name [${ic['name']}] Expected ${attribute} ${value} but found ${ic['${attribute}']}
    \  ...  ELSE  Set Variable  ${res}
    ${count} =  Get Length  ${res}
    Run Keyword If  '${count}' > '0'  Fail  ${res}

Get All Interconnect Uris
    [Documentation]    Get Resources Uris list and return it
    ${resp} =    Fusion Api Get Interconnect
    ${memb_list} =    Get From Dictionary    ${resp}    members
    ${uri_list} =    Create List
    :FOR    ${memb}    IN    @{memb_list}
    \       ${uri} =    Get From Dictionary    ${memb}    uri
    \       Append To List    ${uri_list}    ${uri}
    [Return]      ${uri_list}
