*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs

*** Keywords ***
Edit uplinkset
    [Documentation]   Edits an uplinkset <name> for given <li> with request body <us>
    [Arguments]    ${name}    ${us}   ${li}
    ${us} =        Copy Dictionary  ${us}
    ${li_uri} =    Get LI URI   ${li}
    ${us_uri} =    Get Uplinkset URI       ${name}
    ${body} =      Build US body    ${us}    ${li_uri}
    ${resp} =      Fusion Api Edit Uplink Set    body=${body}    uri=${us_uri}
    [Return]       ${resp}

Get Uplinkset URI
    [Documentation]    Gets the URI for an US
    [Arguments]     ${us}
    ${resp} =   Fusion Api Get Uplink Set    param=?filter="'name'=='${us}'"
    ${count} =  Get From Dictionary  ${resp}  count
    Return from keyword if    ${count}==0    '/bad_uplinkset_uri'
    ${uri} =  Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Add Uplinkset from variable
    [Documentation]  Adds a uplinkset to an logical interconnect from a variable which contains a list of dicts with the entire payload.
    ...              Example:
    ...              uplinkset = {
    ...                  "type": "uplink-setV300",
    ...                  "name": uplinkset_name,    #user should defined uplinkset name
    ...                  "portConfigInfos": [
    ...                      {"desiredSpeed": "Auto",
    ...                       "location": {"locationEntries": [
    ...                                        {"value": "Q2:1", "type": "Port"},
    ...                                        {"value": 3, "type": "Bay"},
    ...                                        {"value": "CN754406XL", "type": "Enclosure"}]
    ...                                    }
    ...                       }
    ...                  ],
    ...                  "networkType": "FibreChannel",
    ...                  "primaryPortLocation": None,
    ...                  "reachability": None,
    ...                  "manualLoginRedistributionState": "Supported",
    ...                  "logicalInterconnectUri": "EG:%s" % LI_name,   #user should defined logical interconnect name
    ...                  "connectionMode": "Auto",
    ...                  "lacpTimer": "Short",
    ...                  "nativeNetworkUri": None,
    ...                  "networkUris": [],
    ...                  "fcNetworkUris": ["FC:%s" % FC_Name],    #user should defined fabric channel name
    ...                  "fcoeNetworkUris": []
    ...              }
    [Arguments]   ${uplinkset}
    Log    Adding Uplinkset To LOGICAL Interconnect   console=True
    ${resp}=    Add Uplinkset from variable Async    ${uplinkset}
    Should Be equal as integers   ${resp["status_code"]}    202
    Log    The task uri should be: ${resp["headers"]["Location"]}    console=True
    ${task} =    Wait For Task    ${resp}    120min    30s
    [Return]   ${task}

Add Uplinkset from variable Async
    [Documentation]  Adds a uplinkset to an logical interconnect from a variable which contains a list of dicts with the entire payload.
    ...              Example:
    ...              uplinkset = {
    ...                  "type": "uplink-setV300",
    ...                  "name": uplinkset_name,    #user should defined uplinkset name
    ...                  "portConfigInfos": [
    ...                      {"desiredSpeed": "Auto",
    ...                       "location": {"locationEntries": [
    ...                                        {"value": "Q2:1", "type": "Port"},
    ...                                        {"value": 3, "type": "Bay"},
    ...                                        {"value": "CN754406XL", "type": "Enclosure"}]
    ...                                    }
    ...                       }
    ...                  ],
    ...                  "networkType": "FibreChannel",
    ...                  "primaryPortLocation": None,
    ...                  "reachability": None,
    ...                  "manualLoginRedistributionState": "Supported",
    ...                  "logicalInterconnectUri": "EG:%s" % LI_name,   #user should defined logical interconnect name
    ...                  "connectionMode": "Auto",
    ...                  "lacpTimer": "Short",
    ...                  "nativeNetworkUri": None,
    ...                  "networkUris": [],
    ...                  "fcNetworkUris": ["FC:%s" % FC_Name],    #user should defined fabric channel name
    ...                  "fcoeNetworkUris": []
    ...              }
    [Arguments]   ${uplinkset}
    Log    Adding Uplinkset To LOGICAL Interconnect   console=True
    ${uplinkset} =   Copy Dictionary  ${uplinkset}
    ${liuri}=    Get From Dictionary  ${uplinkset}  logicalInterconnectUri
    @{words}=    Split String  ${liuri}  :
    ${type}=     Get From List  ${words}  0
    ${e}=        Get From List  ${words}  1
    ${liuri}=    Get LI URI    ${e}
    Set To Dictionary  ${uplinkset}  logicalInterconnectUri  ${liuri}

    ${status}  ${Entries}=    Run Keyword And Ignore Error
    ...      Get From Dictionary  ${uplinkset["portConfigInfos"][0]["location"]}  locationEntries
    ${locationEntries}=    Run Keyword If  '${status}'=='PASS'  Lookup PortConfigInfors Uris  ${Entries}
    Run Keyword If  ${locationEntries} is not ${None}    Set To Dictionary  ${uplinkset["portConfigInfos"][0]["location"]}  locationEntries  ${locationEntries}

    ${ethuris}=   Get From Dictionary  ${uplinkset}  networkUris
    ${ethuri_list} =    Create List
    :FOR    ${ethuri}   IN    @{ethuris}
    \       @{words} =  Split String     ${ethuri}    :
    \       ${type} =   Get From List    ${words}    0
    \       ${e} =      Get From List    ${words}    1
    \       ${ethuri} =  Get Ethernet URI   ${e}
    \       Append to List  ${ethuri_list}  ${ethuri}
    Set To Dictionary   ${uplinkset}  networkUris   ${ethuri_list}

    ${fcuris}=    Get From Dictionary  ${uplinkset}  fcNetworkUris
    ${fcuri_list} =    Create List
    :FOR    ${fcuri}   IN    @{fcuris}
    \       @{words} =  Split String     ${fcuri}    :
    \       ${type} =   Get From List    ${words}    0
    \       ${e} =      Get From List    ${words}    1
    \       ${fcuri} =  Get FC URI       ${e}
    \       Append to List  ${fcuri_list}  ${fcuri}
    Set To Dictionary   ${uplinkset}  fcNetworkUris   ${fcuri_list}

    ${fcoeuris}=  Get From Dictionary  ${uplinkset}  fcoeNetworkUris
    ${fcoeuri_list} =    Create List
    :FOR    ${fcoeuri}   IN    @{fcoeuris}
    \       @{words} =  Split String     ${fcoeuri}    :
    \       ${type} =   Get From List    ${words}    0
    \       ${e} =      Get From List    ${words}    1
    \       ${fcuri} =  Get FCoE URI   ${e}
    \       Append to List  ${fcoeuris}  ${fcoeuri}
    Set To Dictionary   ${uplinkset}  fcoeNetworkUris   ${fcoeuri_list}

    ${resp}=    Fusion Api Create Uplink Set  ${uplinkset}
    [Return]   ${resp}

Build US body
    [Documentation]    Builds UplinkSet body
	[Arguments]		${us}	${li_uri}
	Set to dictionary	${us}	logicalInterconnectUri	${li_uri}
	${l} = 	Get Length	${us['portConfigInfos']}
	:FOR	${x}	IN RANGE	0	${l}
	\   ${enc_uri} =            Get From Dictionary     ${us['portConfigInfos'][${x}]}	enclosure
	\   ${enc_uri} =        Get Enclosure Uri   ${enc_uri}
	\	Set To Dictionary		${us['portConfigInfos'][${x}]}	enclosure	${enc_uri}

	# process eth
	${networks} = 		Get From Dictionary		${us}	networkUris
	${networkUris} = 	Get Ethernet Uris	${networks}
	Set to dictionary	${us}	networkUris	${networkUris}
	# process fc
	${networks} = 		Get From Dictionary		${us}	fcNetworkUris
	${networkUris} = 	Get FC Uris	${networks}
	Set to dictionary	${us}	fcNetworkUris	${networkUris}
	# process fcoe
	${networks} = 		Get From Dictionary		${us}	fcoeNetworkUris
	${networkUris} = 	Get FCoE Uris	${networks}
	Set to dictionary	${us}	fcoeNetworkUris	${networkUris}
    # process nativeNetwork
    ${nativeNetworks} = 	Pop From Dictionary		${us}	nativeNetworkUri  ${None}
	${nativeNetworkUris} = 	Run Keyword If  '${nativeNetworks}'!='${None}'    Common URI lookup by name    ${nativeNetworks}
	Run Keyword If  '${nativeNetworkUris}'!='${None}'    Set to dictionary	${us}	nativeNetworkUri	${nativeNetworkUris}

	${body} = 		Fusion Api Create Uplink Set Payload	${us}
	[Return]	${body}

Lookup PortConfigInfors Uris
    [Documentation]    Lookup portConfigInfors Uris
    [Arguments]    ${locationEntries}
    :FOR    ${locationEntrie}    IN    @{locationEntries}
    \       Continue For Loop If   '${locationEntrie["type"]}' != 'Enclosure'
    \       ${encuri}=   Get From Dictionary  ${locationEntrie}  value
    \       @{words}=    Split String  ${encuri}  :
    \       ${type}=     Get From List  ${words}  0
    \       ${e}=        Get From List  ${words}  1
    \       ${encuri}=   Get Enclosure URI    ${e}
    \       Set To Dictionary  ${locationEntrie}  value  ${encuri}
    [Return]  ${locationEntries}

Remove Uplinkset By Uri
    [Documentation]  Remove Uplinkset Via Uri
    ...                Remove Uplinkset By Uri  ${uri}
    [Arguments]     ${uri}
    Log    \nRemoving Uplinkset ${uri}   console=True
    ${resp}=    Fusion Api Delete Uplink Set  uri=${uri}
    [Return]  ${resp}

Remove Uplinkset By Name
    [Documentation]  Remove uplinkset via name
    ...              Remove Uplinkset By Name  ${name}
    [Arguments]    ${name}
    Log    \nRemoveing Uplinkset ${name}    console=True
    ${uri}=    Get Uplinkset URI  ${name}
    Return From Keyword If    '${uri}' == '/bad_uplinkset_uri'
    ${resp}=    Remove Uplinkset By Uri   ${uri}
    [Return]  ${resp}

Remove All Uplinksets
    [Documentation]  Remove All Uplinksets
    [Arguments]     ${timeout}=6m    ${internal}=10
    Log    Remove All Uplinksets   console=True
    ${resp} =   Fusion Api Get Uplink Set
    :FOR    ${uplinkset}   IN    @{resp['members']}
    \       ${uri} =     Get From Dictionary    ${uplinkset}    uri
    \       ${resp} =    Remove Uplinkset By Uri  uri=${uri}
    \       ${task} =    Wait For Task2   ${resp}    ${timeout}    ${interval}