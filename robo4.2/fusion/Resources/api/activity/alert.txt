*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             XML
Library             SSHLibrary
Library             String
Library             Dialogs
Library             json

*** Keywords ***
Get Alert by Param
    [Documentation]  Get alert by param
    ...    Examples:
    ...    Get Alert By Param   param=?filter=description like 'The logical enclosure is inconsistent with its enclosure group*'
    [Arguments]  ${param}
    Log    Get Alert by Param param=${param}  console=True
    ${resp}=  fusion api get alerts   param=${param}
    Should be equal  '${resp['status_code']}'  '200'  msg=Get alert by param status code should be 200
    Should not be equal  '${resp['count']}'  '0'  msg=Get alert by param count should not be 0
    Log  PASS: Get Alert by Param found match ${resp['members'][0]['uri']}  console=True
    [Return]  ${resp['members'][0]}

Get ALL Alerts by Param
    [Documentation]  Get All alerts by param
    ...    Examples:
    ...    Get ALL Alerts By Param   param=?filter=description like 'The logical enclosure is inconsistent with its enclosure group*'
    [Arguments]  ${param}
    Log    Get Alert by Param param=${param}  console=True
    ${resp}=  fusion api get alerts   param=${param}
    Should be equal  '${resp['status_code']}'  '200'  msg=Get alert by param status code should be 200
    Log  PASS: Get Alert by Param found match  console=True
    [Return]  ${resp}

Remove All Alerts
    [Documentation]  Remove all alerts by param
    ...    Examples:
    ...    Remove All Alerts
    ...    Remove All Alerts   param=?filter=description like 'The logical enclosure is inconsistent with its enclosure group*'
    [Arguments]  ${param}=${EMPTY}    ${timeout}=600  ${interval}=10  ${VERBOSE}=False
    Log  Removing All Alerts param=${param}  console=True
    ${resp} =    fusion api delete alert   param=${param}
    Wait For Task2  ${resp}  timeout=${timeout}  interval=${interval}

Delete All Alerts by Param
    [Documentation]  Delete Alert by param
    ...    Examples:
    ...    Delete Alert By Param   param=?filter=description like 'The logical enclosure is inconsistent with its enclosure group*'
    [Arguments]  ${param}      ${RETURN_CODE}=404
    Log    ${\n}Delete Alert by Param ${param}    console=true
    ${alerts} =    Fusion Api Get Alerts    param=${param}
    ${count} =    Get From Dictionary    ${alerts}    count
    Run Keyword and Return If  '${count}'=='0'    Log    No alerts matching param were obtained.    console=true

    :FOR    ${alert}    IN    @{alerts['members']}
    \       ${resp} =    Fusion Api Delete Alert    uri=${alert['uri']}
    \       Log    Deleting Alert ${alert['uri']}

    ${alerts} =    Fusion Api Get Alerts    param=${param}
    ${count} =    Get From Dictionary    ${alerts}    count
    Run Keyword If  '${count}'!='0'   Fail    Not all of the Alerts were Deleted

Clear Alert
    [Documentation]  Clear Alert by param
    ...    Examples:
    ...    Clear Alert  ${alert}
    [Arguments]  ${alert}
    Log    Clear Alert ${alert['uri']}  console=True
    ${payload} =   Create Dictionary   alertState=Cleared
    ${resp} =  fusion api update alert  uri=${alert['uri']}  body=${payload}
    Should be equal  '${resp['status_code']}'  '200'  msg=Clear alert status code should be 200
    Log  ${\n}Pass: Clear Alert ${alert['uri']}  console=True
    [Return]  ${resp}

Check Alert Event Item
    [Documentation]  Check alert event item
    ...    Examples:
    ...       Check alert event item  ${alert}  eventItemName=PduTrapType  eventItemValue=TRAP
    [Arguments]  ${alert}  ${eventItemName}  ${eventItemValue}
    ${event} =  Fusion Api Get Events  uri=${alert['associatedEventUris'][0]}
    Log    Check alert ${alert['uri']} event ${event['uri']}  console=True
    Check Event Item  ${event}  ${eventItemName}  ${eventItemValue}

Get Critical Alert Count
    [Documentation]  Get Critical alerts count in appliance
    ${response} =   Get ALL Alerts by Param    param=?filter="alertState EQ 'Active' and severity EQ 'Critical'"
    ${count}=   Get From Dictionary  ${response}  count
    :For   ${alert}   IN   @{response['members']}
    \   continue for loop if    ${count} == 0
    \   ${uri} =    Get From Dictionary  ${alert}  uri
    \   ${response}=   Get Resource by URI   ${uri}
    \   Log    ${response['associatedResource']['resourceName']}: ${alert['description']}    WARN    console=True
    [Return]   ${count}

Log All Warning and Critical Alerts
   [Documentation]  Log All Warning Or Critical Alerts
   ${alerts} =    Get ALL Alerts by Param    param=?filter="alertState EQ 'Active' and (severity='Critical' or severity='warning')"
   Log   Total Count of Active Critical/Warning Alerts :${alerts['count']}   console=True
   Return from keyword if    ${alerts['count']} == 0
   :For   ${alert}   IN   @{alerts['members']}
   \   ${uri} =    Get From Dictionary  ${alert}  uri
   \   ${resp}=   Get Resource by URI   ${uri}
   \   Log    ${resp['associatedResource']['resourceName']}: ${alert['description']}    WARN    console=True

Should Not Have Active Alerts With Severity Other Than
    [Documentation]  Warn the use in case of Active alerts with Severity other than OK
    [Arguments]  ${severity}=OK
    ${alerts} =    Get ALL Alerts by Param    param=?filter="alertState EQ 'Active' and (severity!='${severity}')"
    Return from keyword if    ${alerts['count']} == 0
    ${res} =  Set Variable  ${empty}
    :For    ${alert}    IN    @{alerts['members']}
    \    ${res} =  Catenate  ${res}
    ...  \nSeverity:-${alert['severity']} Description:-${alert['description']} Type:-${alert['physicalResourceType']} Name:-${alert['associatedResource']['resourceName']}
    Fail  ${alerts['count']} Active Alerts found ${res}