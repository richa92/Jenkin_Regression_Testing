*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library				SSHLibrary
Library				String
Library				Dialogs

Resource			../fusion_api_resource.txt


*** Keywords ***

Get Hypervisor Manager by Uri
	[Documentation]	Get hypervisor Manager by URI
	[Arguments]		${hmuri}
	${resp} = 	Fusion Api Get Hypervisor Manager	uri=${hmuri}
	${status}		Run keyword and return status	Dictionary Should Contain Key	${resp}		members
	${res}=		Run keyword if	${status}==True		Get From Dictionary		${resp['members'][0]}	uri
	${res1}	Set variable if		${status}==True		${res}		${EMPTY}
	[Return]	${res1}

Get Hypervisor Manager URI
	[Documentation]	Get hypervisor Manager URI
	[Arguments]		${hm}
	${resp} = 	Fusion Api Get Hypervisor Manager	param=?filter="'name'=='${hm}'"
	${status}		Run keyword and return status	Dictionary Should Contain Key	${resp}		members
	${hm_c}=	Run keyword if	${status}==True		get length	${resp['members']}
	${count}	set variable if		${status}==True		${hm_c}		0
	${uri}=		Run keyword if	${count}>=1		Get From Dictionary		${resp['members'][0]}	uri
	${hm_uri}	Set variable if		${status}==True and ${count}>=1		${uri}		${EMPTY}
	[Return]	${hm_uri}

Get Hypervisor Manager 
	[Documentation]		Get hypervisor manager details with name
	[Arguments]		${hm}
	${hm_details}=	Create Dictionary
	${resp} = 	Fusion Api Get Hypervisor Manager	param=?filter="'name'=='${hm}'"
	:FOR	${m}	IN	@{resp['members']}
	\	${hm_details}=	Run keyword if	'${m['name']}'=='${hm}'		copy dictionary		${m}
	[Return]	${hm_details}

Get all Hypervisor manager
	[Documentation]		Get all hypervisor manager details with name
	${hm_details}=	Create Dictionary
	${resp} = 	Fusion Api Get Hypervisor Manager
	:FOR	${m}	IN	@{resp['members']}
	\	${hm_details}=		copy dictionary		${m}
	[Return]	${hm_details}

Add Hypervisor Manager
	[Documentation]	Adds Hypervisor Managers to an appliance from a variable which contains a list of dicts with the entire payload.
	...		Data File Example :
	...		vcenter = 		[{'username': 'dcs', 'password': 'dcs', 'type': 'HypervisorManagerV2', 'name': '172.18.13.11', 'port': '443'}]
	[Arguments]		${hypervisor_managers}	${validation}=False		${status_code}=202
	${tasks} =			Create Dictionary
	${actual_hm} =  	Create list
	Log    Adding Hypervisor Managers    console=true
	:FOR	${hm}	IN	@{hypervisor_managers}
	\	${hm_body}=	Build hypervisor manager payload	${hm}
	\	Log    Adding hypervisor_manager:${hm['name']}    console=true
	\	${rest_resp}=	Fusion Api Create Hypervisor Manager 	${hm_body}
	\	Log to Console	rest_resp:${rest_resp}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  ${status_code}
	\	Log to Console	status:${status}
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	30s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed
	\	Log to Console	task_resp:${task_resp}
	\	${dict} =  Create dictionary
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${hm['name']}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	set to dictionary   ${dict}  rest_body=${hm_body}
	\	append to list  ${actual_hm}  ${dict}
	[Return]    ${actual_hm}

Build hypervisor manager payload
	[Documentation]		Build hypervisor manager payload
	[Arguments]		${hm}
	&{dict}		Create Dictionary
	${user_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	username
	Run Keyword If	${user_status}==True		Set to Dictionary	${dict}	username	${hm['username']}
	${pswd_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	password
	Run Keyword If	${pswd_status}==True		Set to Dictionary	${dict}	password	${hm['password']}
	${type_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	type
	Run Keyword If	${type_status}==True		Set to Dictionary	${dict}	type	${hm['type']}
	${name_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	name
	Run Keyword If	${name_status}==True		Set to Dictionary	${dict}	name	${hm['name']}
	${display_name_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	displayName
	Run Keyword If	${display_name_status}==True		Set to Dictionary	${dict}	displayName	${hm['displayName']}
	${port_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	port
	Run Keyword If	${port_status}==True		Set to Dictionary	${dict}	port	${hm['port']}
	${ver_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	version
	Run Keyword If	${ver_status}==True		Set to Dictionary	${dict}	version	${hm['version']}
	${initialScopeUris_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	initialScopeUris
	${initialScopeUris}		Run Keyword If	${initialScopeUris_status}==True		Create List
	Run Keyword If	${initialScopeUris_status}==True		Set to Dictionary	${dict}	initialScopeUris	${initialScopeUris}
	&{pref}		Create dictionary
	${switch_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	virtualSwitchType
	Run Keyword If	${switch_status}==True		Set to Dictionary	${pref}	virtualSwitchType	${hm['virtualSwitchType']}
	${switchver_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	distributedSwitchVersion
	Run Keyword If	${switchver_status}==True		Set to Dictionary	${pref}	distributedSwitchVersion	${hm['distributedSwitchVersion']}
	${switchuse_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	distributedSwitchUsage
	Run Keyword If	${switchuse_status}==True		Set to Dictionary	${pref}	distributedSwitchUsage	${hm['distributedSwitchUsage']}
	${hytype_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	hypervisor_type
	Run Keyword If	${hytype_status}==True		Set to Dictionary	${pref}	type	${hm['hypervisor_type']}
	${mvmotion_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	multiNicVMotion
	Run Keyword If	${mvmotion_status}==True		Set to Dictionary	${pref}	multiNicVMotion	${hm['multiNicVMotion']}
	${c}=	get length	${pref}
	run keyword if	${c}>0	Set to dictionary	${dict}		preferences		${pref}
	Log to console	${dict}
	[Return]	${dict}

Update Hypervisor Manager
	[Documentation]	Update Hypervisor Managers from the appliance
	...		Data File Example :
	...		update_vcenter = [{'type' : 'HypervisorManagerV2', 'name' : '172.18.13.11', 'username' : 'dcs', 'password' : 'dcs', 'port' : '443', 'version' : '5.1.0', 'virtualSwitchType' : 'Distributed', 'multiNicVMotion' : 'false', 'distributedSwitchUsage':'GeneralNetworks', 'distributedSwitchVersion':'5.1.0', 'HypervisorType':'Vmware'}]
	[Arguments]		${vcenter}	${validation}=False		${status_code}=202
	${update_hm_list}=  	Create list
	:FOR	${hm}	in	@{vcenter}
	\	Log    Updating Hypervisor Manager    console=true
	\	${preferences}=		create Dictionary
	\	${get_hm}=	Get Hypervisor Manager	 ${hm['name']}
	\	Log to console	${get_hm}
	\	${hm_uri}=	Get Hypervisor Manager URI	${hm['name']}
	\	${length} =  Get Length  ${get_hm}
	\	Run Keyword If  ${length} == 0  Return from keyword	${update_hm_list}
	\	run keyword if	'${hm_uri}'=='${EMPTY}' or '${hm_uri}'=='None'	Return from keyword	${update_hm_list}
	\	Log to console	${hm_uri}
	\	Log to console	Get_hm:${get_hm}
	\	${resp_data}=	Copy Dictionary		${get_hm}

	\	${type_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	type
	\	Run Keyword If	${type_status}==True		Set to Dictionary	${resp_data}	type	${hm['type']}
	\	Log to console	${resp_data['type']}

	#Hostname Hypervisor-manager
	\	${hostname_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	hostname
	\	Run Keyword If	${hostname_status}==True		Set to Dictionary	${resp_data}	hostname	${hm['hostname']}

	#Username for Hypervisor-manager
	\	${username_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	username
	\	Run Keyword If	${username_status}==True		Set to Dictionary	${resp_data}	username	${hm['username']}

	#password for Hypervisor-manager
	\	${password_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	password
	\	Run Keyword If	${password_status}==True		Set to Dictionary	${resp_data}	password	${hm['password']}

	#Hypervisor version for Hypervisor-manager
	\	${version_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	version
	\	Log to console	${version_status}
	\	Run Keyword If	${version_status}==True		Set to Dictionary	${resp_data}	version	${hm['version']}
	\	Log to console	${resp_data['version']}

	# port detail for Hypervisor-manager
	\	${port_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	port
	\	Run Keyword If	${port_status}==True		Set to Dictionary	${resp_data}	port	${hm['port']}

	#Hypervisor type for Hypervisor-manager
	\	${type_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	hypervisor_type
	\	Run Keyword If	${type_status}==True		Set to Dictionary	${preferences}	type	${hm['hypervisor_type']}

	#Virtual switchtype for Hypervisor-manager
	\	${vswitchtype_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	virtualSwitchType
	\	Run Keyword If	${vswitchtype_status}==True		Set to Dictionary	${preferences}	virtualSwitchType	${hm['virtualSwitchType']}

	# Distributed switch usage for Hypervisor-manager
	\	${dvsusage_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	distributedSwitchUsage
	\	Run Keyword If	${dvsusage_status}==True		Set to Dictionary	${preferences}	distributedSwitchUsage	${hm['distributedSwitchUsage']}

	#Multi nic vmotion status
	\	${MNVmotion_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	multiNicVMotion
	\	Run Keyword If	${MNVmotion_status}==True		Set to Dictionary	${preferences}	multiNicVMotion	${hm['multiNicVMotion']}

	#Distributed virtual switch version for Hypervisor-manager
	\	${dvsVersion_status}		Run keyword and return status	Dictionary Should Contain Key		${hm}	distributedSwitchVersion
	\	Run Keyword If	${dvsVersion_status}==True		Set to Dictionary	${preferences}	distributedSwitchVersion	${hm['distributedSwitchVersion']}
	#Assign preference dictionary to payload
	\	${preference_status}		Run keyword and return status	Dictionary Should Contain Key		${get_hm}		preferences
	\	Log to console	${preference_status}
	\	Log to console	${preferences}
	\	Run Keyword If	${preference_status}==True		Set to Dictionary	${resp_data}	preferences		${preferences}
	\	Log to console		updatebody:${resp_data}
	\	${rest_resp}=	Fusion Api Update Hypervisor Manager 	${resp_data}	${hm_uri}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  ${status_code}
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	30s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed

	\	${dict} =  Create dictionary
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${hm['name']}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	set to dictionary   ${dict}  rest_body=${resp_data}
	\	append to list  ${update_hm_list}  ${dict}
	[Return]    ${update_hm_list}

Delete Hypervisor Manager
	[Documentation]	Delete Hypervisor Manager
	[Arguments]		${vcenter}
	${del_hm}=  	Create list
	:FOR	${hm}	in	@{vcenter}
	\	${dict}=  Create dictionary
	\	&{rest_resp}	create Dictionary
	\	Log    \nDeleting hypervisor manager:${hm['name']}    console=true
	\	${uri}=		Get Hypervisor Manager URI		${hm['name']}
	\	run keyword if	'${uri}'=='${EMPTY}' or '${uri}'=='None'	run keywords
	\	...		Set to dictionary	${rest_resp}	message=hypervisor manager: ${hm['name']} not found	AND
	\	...		Set to Dictionary	${dict}		status=False	rest_resp=${rest_resp}		AND
	\	...		append to list		${del_hm}	${dict}
	\	run keyword if	'${uri}'=='${EMPTY}' or '${uri}'=='None'	Return from keyword	${del_hm}
	\	${rest_resp} = 	Fusion Api Delete Hypervisor Manager	uri=${uri}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  202
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	60s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${hm['name']}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	append to list  ${del_hm}  ${dict}
	[Return]    ${del_hm}

Hypervisor Managers attribute ${attribute} Should Have Value ${value}
    [Documentation]    Hypervisor Managers attribute Should be expected
    ${profiles} =   Fusion Api Get Hypervisor Manager
    # Make sure we get (more than zero) profile listed
    Run Keyword If  '${profiles['count']}'=='0'    Fail    msg=No Hypervisor Manager found
    ${res} =  Set Variable  ${empty}
    :FOR    ${profile}  IN  @{profiles['members']}
    \  ${res} =  Run Keyword If  '${profile['${attribute}']}' != '${value}'  Catenate  ${res}
    ...     \nHypervisor Manager name [${profile['name']}] Expected ${attribute} ${value} but found ${profile['${attribute}']}
    \  ...  ELSE  Set Variable  ${res}
    ${count} =  Get Length  ${res}
    Run Keyword If  '${count}' > '0'  Fail  ${res}
