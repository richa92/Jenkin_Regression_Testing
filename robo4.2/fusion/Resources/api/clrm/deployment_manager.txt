*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs

Resource         	../fusion_api_resource.txt


*** Keywords ***

Get Deployment Manager URI
    [Documentation]    Get Deployment Manager Uri
    [Arguments]     ${dm}
    #Get the deployment manager filtered on it's name
    ${resp} =   Fusion Api Get Deployment Manager       param=?filter="'name'=='${dm}'"
    #Filter for Deploymane manager URI
    ${uri} =    set Variable If    ${resp['count']}>0    ${resp['members'][0]['uri']}    \not_found 
    [Return]    ${uri}

Get Deployment Manager 
	[Documentation]	Get Deployment Manager by name
	[Arguments]		${dm}
	${dm_details}= 	Create Dictionary
	#Get the deployment manager filtered on it's name
	${resp} = 	Fusion Api Get Deployment Manager		param=?filter="'name'=='${dm}'"
	${status}		run keyword and return status	Dictionary should contain key	${resp}		members
	run keyword if	${status}==False 	return from keyword	${EMPTY}
	:FOR	${m}	IN	@{resp['members']}
	\	Log to console	${m['name']}
	\	${dm_details}=	Run keyword if	'${m['name']}'=='${dm}'		copy dictionary		${m}
	[Return]	${dm_details}

Get all Deployment Managers 
	[Documentation]	Get all Deployment Manager
	${dm_details}= 	Create list
	${resp} = 	Fusion Api Get Deployment Manager
	${status}		run keyword and return status	Dictionary should contain key	${resp}		members
	run keyword if	${status}==False 	return from keyword	${EMPTY}
	${dm_details}	copy list		${resp['members']}
	[Return]	${dm_details}

Get Deployment Manager by URI
	[Documentation]	Get Deployment Manager by uri
	[Arguments]		${uri}
	${dm_details}= 	Create Dictionary
	#Get the deployment manager filtered on it's name
	${resp} = 	Fusion Api Get Deployment Manager		param=?filter="'uri'=='${uri}'"
	${status}		run keyword and return status	Dictionary should contain key	${resp}		members
	run keyword if	${status}==False 	return from keyword	${EMPTY}
	:FOR	${m}	IN	@{resp['members']}
	\	Log to console	${m['uri']}
	\	${dm_details}=	Run keyword if	'${m['uri']}'=='${dm}'		copy dictionary		${m}
	[Return]	${dm_details}

Add Deployment Manager
	[Documentation]	Adds Deployment Managers to an appliance from a variable which contains a list of dicts with the entire payload.
	...		Data File Example :
	...		deployment_managers = 		[{'username': 'dcs', 'password': 'dcs', 'type': 'DeploymentManager', 'name': '172.18.9.1', 'port': '443'}]
    [Arguments]		${deployment_managers}		${validation}		${status_code}=202
	${add_dm} =  	Create list
	Log    Adding Deployment Managers    console=true
	#Post Deployment Manager with the input payload
	:FOR	${dm}	IN	@{deployment_managers}
	\	Log    Adding dep_mgr:${dm['name']}    console=true
	\	${dm1}=	Build deployment manager payload	${dm}
	\	${rest_resp}=		Fusion Api Create Deployment Manager		${dm1}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  ${status_code}
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	60s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed
	#Creating a list of dictionaries which contains response, used for validations
	\	${dict} =  Create dictionary
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${dm['name']}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	set to dictionary   ${dict}  rest_body=${dm1}
 	\	append to list  ${add_dm}  ${dict}
 	[Return]    ${add_dm}

Build deployment manager payload
	[Documentation]	Builds deployment manager payload
	[Arguments]		${dm}
	&{dict}		Create Dictionary
	${user_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	username
	Run Keyword If	${user_status}==True		Set to Dictionary	${dict}	username	${dm['username']}
	${pswd_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	password
	Run Keyword If	${pswd_status}==True		Set to Dictionary	${dict}	password	${dm['password']}
	${type_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	type
	Run Keyword If	${type_status}==True		Set to Dictionary	${dict}	type	${dm['type']}
	${name_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	name
	Run Keyword If	${name_status}==True		Set to Dictionary	${dict}	name	${dm['name']}
	${port_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	port
	Run Keyword If	${port_status}==True		Set to Dictionary	${dict}	port	${dm['port']}
	[Return]	${dict}

Delete Deployment Manager
	[Documentation]	Delete Deployment Manager
	[Arguments]		${dep_mgrs}
	${del_dm} =  	Create list
	:FOR	${dm}	IN	@{dep_mgrs}
	\	Log    Deleting dep_mgr:${dm}    console=true
	\	${uri}=		Get Deployment Manager URI		${dm['name']}
	\	${rest_resp} = 	Fusion Api Delete Deployment Manager	uri=${uri}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  202
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	60s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed
	#Creating a list of dictionaries which contains response, used for validations
	\	${dict} =  Create dictionary
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${dm}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	append to list  ${del_dm}  ${dict}
 	[Return]    ${del_dm}

Update Deployment Manager
	[Documentation]	Update Deployment Managers from the appliance
	...		Data File Example :
	...		update_deployment_managers = [{'name': '172.18.9.1', 'port': '444'}]
    [Arguments]		${Deployment_managers}		${validation}		${status_code}=202
	${update_dm_list}=  	Create list
	:FOR	${dm}	IN	@{Deployment_managers}
	\	Log    Updating Deployment Manager    console=true
	#Get on the resource
	\	${get_dm}=	Get Deployment Manager	 ${dm['name']}
	\	${dm_uri}=	Get Deployment Manager URI	${dm['name']}
	\	${resp_data}=	Copy Dictionary		${get_dm}
	#Update the values in GET response
	\	${port_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	port
	\	Run Keyword If	${port_status}==True		Set to Dictionary	${resp_data}	port	${dm['port']}

	\	${username_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	username
	\	Run Keyword If	${username_status}==True		Set to Dictionary	${resp_data}	username	${dm['username']}

	\	${password_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	password
	\	Run Keyword If	${password_status}==True		Set to Dictionary	${resp_data}	password	${dm['password']}

	\	${type_status}		Run keyword and return status	Dictionary Should Contain Key		${dm}	type
	\	Run Keyword If	${type_status}==True		Set to Dictionary	${resp_data}	type	${dm['type']}

	\	Log to console		Deployment Manager Update request body:${resp_data}

	\	${rest_resp}=	Fusion Api Update Deployment Manager 	${resp_data}	${dm_uri}
	\	${status}=      Run Keyword And Return Status	should be equal as integers  ${rest_resp['status_code']}  ${status_code}
	\	${task_resp}=	Run Keyword If		'${status}'=='True'		Wait For Task	${rest_resp}	3000s	60s
	\	${task_status}=		Run Keyword If		'${status}'=='True'		Run Keyword And Return Status	should be equal 	 ${task_resp['taskState']}	Completed
	#Creating a list of dictionaries which contains response, used for validations
	\	${dict} =  Create dictionary
	\	set to dictionary   ${dict}  rest_resp=${rest_resp}
	\	set to dictionary   ${dict}  name=${dm['name']}
	\	set to dictionary   ${dict}  status=${status}
	\	set to dictionary   ${dict}  task_resp=${task_resp}
	\	set to dictionary   ${dict}  task_status=${task_status}
	\	set to dictionary   ${dict}  rest_body=${resp_data}
	\	append to list  ${update_dm_list}  ${dict}
 	[Return]    ${update_dm_list}
