*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             XML
Library             SSHLibrary
Library             String
Library             Dialogs

*** Keywords ***
Get Server Profile Template Transformation URI
    [Documentation]    Get Server Profile Template Transformation URI
    [Arguments]    ${profile_template}
    ${payload} =  copy dictionary  ${profile_template}
    ${name} =    Get from Dictionary    ${profile_template}  name
    Log    Creating SERVER PROFILE TEMPLATE Transformation URI    console=True
    # SHT
    ${status}  ${return} =  Run Keyword and Ignore Error  Get From Dictionary  ${payload}    serverHardwareTypeUri
    ${sht} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${sht_uri} =  run keyword if  '${status}'=='PASS' and '${sht}'!=''   Common URI Lookup by name  ${sht}
    run keyword if  '${status}'=='PASS' and '${sht}'!=''  Set to Dictionary  ${payload}  serverHardwareTypeUri  ${sht_uri}
    # EG
    ${status}  ${return} =  Run Keyword and Ignore Error  Get From Dictionary  ${payload}    enclosureGroupUri
    ${eg} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${eg_uri} =  run keyword if  '${status}'=='PASS' and '${eg}'!=''    Common URI Lookup by name    ${eg}
    run keyword if  '${status}'=='PASS' and '${eg}'!=''  Set to Dictionary    ${payload}    enclosureGroupUri    ${eg_uri}
    # SPT
    ${profile_template_dto} =    Get Resource  SPT:${name}
    log  ${profile_template_dto}    console=True
    ${profile_template_uri} =  Get From Dictionary    ${profile_template_dto}  uri
    ${uri}=    Catenate  SEPARATOR=    ${profile_template_uri}/transformation?serverHardwareTypeUri=${sht_uri}&enclosureGroupUri=${eg_uri}
    [return]  ${uri}

Get Server Profile Template Transformation
    [Documentation]    Get Server Profile Template Transformation
    [Arguments]    ${uri}
    ${resp} =    Fusion Api Get Server Profile Templates    uri=${uri}
    [Return]    ${resp}

Verify Server Profile Template Transformation DTO
    [Documentation]  Verify Server Profile Template Transformation DTO
    ...              Example:
    ...                Verify Resource  ${expected_dto}    ${transformation_dto}
    ...                Verify Resource  ${expected_dto}  ${transformation_dto}    Status=OK
    ...              Data Required:
    ...                Expected Resource DTO    Transformation DTO
    [Arguments]  ${expected_dto}    ${transformation_dto}
    ${payload} =  copy dictionary  ${expected_dto}
    ${name} =  Get from Dictionary    ${payload}    name
    Log    ${\n}Verifying ${name}    console=True
    ${new_expected_dto}=    Create Server Profile Template Payload    ${expected_dto}
    log    ${transformation_dto}    console=True
    log    ${new_expected_dto}      console=True
    ${validate_status} =  Fusion api validate response follow  ${new_expected_dto}  ${transformation_dto}  wordy=${False}
    Run Keyword If  '${validate_status}'=='False'  Fail  Verify  ${name} failed
    Log    Verify ${name} succeeded    console=True

Create Server Profile Template Payload
    [Documentation]    Create Server Profile Template payload
    [Arguments]    ${profile_template}    ${api}=${None}
    ${payload} =  copy dictionary  ${profile_template}
    Log    Creating SERVER PROFILE TEMPLATE Payload    console=True
    # Scope
    ${status}  ${return} =  Run Keyword and Ignore Error  Get From Dictionary  ${payload}  initialScopeUris
    ${scope_names} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${scopes} =    run keyword if  '${status}'=='PASS'    Run Keyword For List    ${scope_names}    Common URI Lookup by name
    run keyword if  '${status}'=='PASS'    Set To Dictionary    ${payload}    initialScopeUris    ${scopes}
    # SHT
    ${status}  ${return} =  Run Keyword and Ignore Error  Get From Dictionary  ${payload}    serverHardwareTypeUri
    ${sht} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${sht_uri} =  run keyword if  '${status}'=='PASS' and '${sht}'!=''   Common URI Lookup by name  ${sht}
    run keyword if  '${status}'=='PASS' and '${sht}'!=''  Set to Dictionary    ${payload}    serverHardwareTypeUri    ${sht_uri}
    # EG
    ${status}  ${return} =  Run Keyword and Ignore Error  Get From Dictionary  ${payload}    enclosureGroupUri
    ${eg} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${eg_uri} =  run keyword if  '${status}'=='PASS' and '${eg}'!=''    Common URI Lookup by name    ${eg}
    run keyword if  '${status}'=='PASS' and '${eg}'!=''  Set to Dictionary    ${payload}    enclosureGroupUri    ${eg_uri}
    # Connections
    ${connectionSettings} =    Get From Dictionary    ${payload}    connectionSettings
    ${status}  ${manageConnections} =  Run Keyword and Ignore Error  Get From Dictionary  ${connectionSettings}  manageConnections
    ${connections} =    Run Keyword if  '${status}'=='PASS' and '${manageConnections}'=='True'  Get From Dictionary  ${connectionSettings}  connections
    ${connections} =    Run Keyword if  '${manageConnections}'=='True'  Lookup Connection Uris    ${connections}
    Run Keyword if  '${manageConnections}'=='True'  Set to Dictionary   ${connectionSettings}  connections     ${connections}
    Run Keyword if  '${status}'=='PASS'  Set to Dictionary   ${payload}  connectionSettings     ${connectionSettings}

    # osDeploymentSettings
    ${status}  ${return} =  Run Keyword and Ignore Error      Get From Dictionary    ${payload}    osDeploymentSettings
    ${osDeploymentSettings} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${osDeploymentSettings} =   run keyword if  '${status}'=='PASS' and ${osDeploymentSettings}!=${None}     Set OS Deployment settings        ${osDeploymentSettings}
    Run keyword if  '${status}'=='PASS' and ${osDeploymentSettings}!=${None}    Set to Dictionary   ${payload}  osDeploymentSettings     ${osDeploymentSettings}

    # sanStorage
    ${status}  ${return} =  Run Keyword and Ignore Error    Get From Dictionary    ${payload}    sanStorage
    ${sanStorage} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${sanStorage} =   run keyword if  '${status}'=='PASS' and ${sanStorage}!=${None}    Verify Storage Volume    ${sanStorage}
    # SanStorage[sanSystemCredentials]
    ${ssc_status}  ${sanSystemCredentials} =  Run Keyword and Ignore Error  Get From Dictionary  ${sanStorage}  sanSystemCredentials
    ${new_sanSystemCredentials} =  run keyword if  '${ssc_status}'=='PASS'  Lookup sanSystemCredentials uris  ${sanSystemCredentials}
    Run Keyword If  '${ssc_status}'=='PASS'  Set to Dictionary  ${sanStorage}  sanSystemCredentials  ${new_sanSystemCredentials}
    Run Keyword if  '${status}'=='PASS'  Set to Dictionary   ${payload}  sanStorage     ${sanStorage}
    # sanStorage Volume Attachments ATAI
    Return From Keyword If    ${sanStorage}==${None}    ${payload}
    ${payload} =  run keyword if  '${status}'=='PASS' and ${sanStorage}!=${None}  lookup server profile template volume attachment ATAI  ${payload}

    # initialScopeUri
    ${status}  ${return} =  Run Keyword and Ignore Error      Get From Dictionary    ${payload}    initialScopeUris
    ${scopes} =  set variable if  '${status}'=='PASS'  ${return}  error
    ${scope_uris} =    Run Keyword if  '${status}'=='PASS' and '${scopes}'!=''  Get Scope URIs By Name  ${scopes}
    run keyword if  '${status}'=='PASS' and '${scopes}'!=''  Set to Dictionary    ${payload}    initialScopeUris    ${scope_uris}

    [return]    ${payload}

Add Server Profile Template
    [Documentation]    Add Server Profile Template
    ...                    profile_template = {'type': 'ServerProfileTemplateV2',
    ...                  'serverProfileDescription': '0000A66101, bay 3-withBothRaid',
    ...                  'serverHardwareTypeUri': 'SHT:SY 480 Gen9 1',
    ...                  'enclosureGroupUri': 'EG:EG1'
    ...                  'initialScopeUris': ['Scope:scope1','Scope:scope2']
    ...                  ...}
    [Arguments]        ${profile_template}  ${api}=${None}  ${status_code}=202
    ${name} =     Get from Dictionary    ${profile_template}    name
    Log      \nCreating Server Profile Template ${name}  console=yes
    ${payload} =  Create Server Profile Template Payload  ${profile_template}
    ${resp} =     Fusion Api Create Server Profile Template    body=${payload}  api=${api}
    Run Keyword And Continue on Failure   should be equal as integers  ${resp['status_code']}  ${status_code}
    [Return]  ${resp}

Add Non Existing Server Profile Templates
    [Documentation]   Adds non existing Server Profiles Templates to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]   ${profileTemps}  ${notFoundStatusCodeList}=404  ${status_code}=202
    ${toAdd} =  Create List
    ${resplist} =   Create List
    :FOR   ${profile}  IN  @{profileTemps}
    \       Log  Adding Server Profile Template -${profile['name']}    console=True
    \       ${resp} =     Get Resource  SPT:${profile['name']}
    \       ${response_status_code}=  Convert To String  ${resp['status_code']}
    \       ${status}=     Run Keyword And Return Status   List Should Contain Value  ${notFoundStatusCodeList}  ${response_status_code}
    \       Run Keyword If    ${status}==False  Log  Server Profile Template ${profile['name']} is already added    WARN
    \       Run Keyword If    ${status}==True  Append To List   ${toAdd}  ${profile}

    :FOR   ${profile}  IN  @{toAdd}
    \   ${resp} =  Add Server Profile Template  ${profile}
    \   continue for loop if  ${resp['status_code']}!=${status_code}
    \   append to list   ${resplist}  ${resp}
    [return]    ${resplist}

Add Server Profile Templates from variable
    [Documentation]    Adds Server Profile Templates to an appliance from a variable which contains a list of dicts with the entire payload and validates with expected payload,if Verify=True
    [Arguments]    ${profile_templates}  ${api}=${None}
    Log    Adding SERVER PROFILE TEMPLATES    console=True
    ${toAdd} =  Create List
    :FOR    ${spt}    IN    @{profile_templates}
    \    ${status} =  Check Resource Existing  SP:${spt['name']}
    \    Run Keyword If    ${status}=='FAIL'  Append To List   ${toAdd}  ${spt}
    ${len} =   get length  ${toAdd}
    Return from keyword if  '${len}'=='0'  Nothing to be added
    ${resplist} =  Create List
    :FOR    ${spt}  IN  @{toAdd}
    \    ${resp} =  Add Server Profile Template  ${spt}  api=${api}
    \    append to list    ${resplist}    ${resp}
    [return]    ${resplist}

Get Server Profile Template Details By Name
    [Documentation]    Get Server Profile Templates of  an appliance
    [Arguments]    ${profiles}
    Log    Getting SERVER PROFILE TEMPLATES Details of ${name}    console=True
    ${resp} =    Fusion Api Get Server Profile Templates  param=?filter="'name'=='${name}'"
    Log  ${resp}    console=True
    ${count} =  Get From Dictionary  ${resp}  count
    Return from keyword if  $count==0  ${resp}
    [Return]    ${resp['members'][0]}

Get Server Profile Template URI
    [Documentation]    Get Server Profile Template URI
    [Arguments]    ${spt}
    ${resp} =    Fusion Api Get Server Profile Templates    param=?filter="'name'=='${spt}'"
    Return From Keyword If  ${resp['count']}==0  /rest/server_profile_template_uri_${spt}_not_found
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Edit Server Profile Template
    [Documentation]    Edit Server Profile Template
    [Arguments]    ${profile_template}    ${api}=${None}
    ${name} =    Get from Dictionary    ${profile_template}  name
    Log    \nEditing Server Profile Template ${name}    console=True
    ${payload} =  Create Server Profile Template Payload  ${profile_template}
    ${profile_template_dto} =    Get Resource  SPT:${name}
    log  ${profile_template_dto}    console=True
    ${profile_template_etag} =    Get From Dictionary    ${profile_template_dto}    eTag
    ${profile_template_uri} =  Get From Dictionary    ${profile_template_dto}  uri
    Set to dictionary    ${payload}    eTag    ${profile_template_etag}
    ${resp} =    Fusion Api Edit Server Profile Template    body=${payload}    uri=${profile_template_uri}  api=${api}
    [return]  ${resp}

Edit Server Profile Templates
    [Documentation]  Edit Server Profile Templates
    [Arguments]     @{profile_templates}
     :FOR   ${edit_profile_template}    IN  @{profile_templates}
     \      ${resp} =   Edit Server Profile Template   ${edit_profile_template}
     \      log      ${resp}    console=True
     \      Wait For Task2  ${resp}    timeout=60   interval=5

Edit Server Profile Templates from variable
    [Documentation]    Edit Server Profile Templates from a variable which contains a list of dicts with the entire payload
    [Arguments]    ${profile_templates}  ${api}=${None}
    Log    Editing SERVER PROFILES TEMPLATES    console=True
    ${resplist} =    Create List
    :FOR    ${profile_template}  IN  @{profile_templates}
    \    ${resp} =  Edit Server Profile Template  ${profile_template}  api=${api}
    \    append to list    ${resplist}    ${resp}
    [return]    ${resplist}

Verify Server Profile Template
    [Documentation]  Verify SPT DTO with the expected one
    ...              **kwargs are used to add key value pair to the expected DTO
    ...              Example:
    ...                Verify Server Profile Template  ${spt}
    ...                Verify Server Profile Template  ${spt}  status=OK
    ...              Data Required:
    ...                Expected SPT DTO
    [Arguments]  ${spt}  ${api}=${None}  &{kwargs}
    ${name} =  Get From Dictionary  ${spt}  name
    Log 	${\n}Verifying Server Profile Template ${name}    console=True
    ${expected_dto} =  Create Server Profile Template Payload  ${spt}
    ${expected_dto} =  Add Key Value to DTO  ${expected_dto}  &{kwargs}
    ${dto} =  Get Resource  SPT:${name}  api=${api}
    ${validate_status} =  Fusion api validate response follow  ${expected_dto}  ${dto}  wordy=${True}
    Run Keyword If  '${validate_status}'=='False'  Fail  Validate Server Profile Template ${name} failed

Verify Server Profile Templates
    [Documentation]  Verify SPT DTO with the expected one
    [Arguments]     ${profile_templates}  ${api}=${None}  &{kwargs}
    Run Keyword for List with kwargs  ${profile_templates}  Verify Server Profile Template  api=${api}  &{kwargs}

Remove Server Profile Templates from variable
    [Documentation]    Remove Server Profile Templates from a list of profile template DTO
    ...                profile = [{"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
    ...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
    ...                            "enclosureGroupUri":"EG:EG1",
    ...                           ...}]
    ...                Remove Server Profile Templates from variable  ${profile_templates}
    [Arguments]  ${profile_templates}
    Log    \nRemoving Server Profile Templates from Variable
    ${resplist} =    Create List
    :FOR    ${spt}  IN  @{profile_templates}
    \    ${resp} =  Remove Server Profile Template    ${spt}
    \    append to list    ${resplist}	${resp}
    [return]    ${resplist}

Remove Server Profile Template
    [Documentation]    Remove Server Profile Template
    ...                profile = {"type":"ServerProfileV6","serverHardwareUri":'SH:'+ ${ENC1SHBAY1},
    ...                            "serverHardwareTypeUri":'SHT:SY 480 Gen9 1',
    ...                            "enclosureGroupUri":"EG:EG1",
    ...                           ...}
    ...                Remove Server Profile Template ${profile_template} and return the resp
    [Arguments]  ${profile_template}
    ${uri} =    Common URI lookup by name  SPT:${profile_template['name']}
    ${resp} =   Fusion Api Delete Server Profile Template  uri=${uri}
    [return]    ${resp}

Remove All Server Profile Templates
    [Documentation]    Querys the appliance for all Server Profile Templates and then removes them
    ...                 Updated to return -${resplist}, helps Async deletion.
    ...                 Handle the response list in the test case using "Run Keyword for List with kwargs  ${responses}  Wait For Task2   timeout=600    interval=5"
    Log    Removing SERVER PROFILE TEMPLATES    console=True
    ${resplist} =  Create List
    ${profile_templates} =  Fusion Api Get Server Profile Templates  param=?sort=name:ascending
    ${count}=            Convert To String  ${profile_templates['count']}
    Run Keyword If  '${count}'=='0'    Log   Server Profile Template doesn't Exists     WARN
    :FOR    ${profile_template}  IN  @{profile_templates['members']}
    \    ${resp} =  Fusion Api Delete Server Profile Template    uri=${profile_template['uri']}
    \    append to list    ${resplist}    ${resp}
    [return]    ${resplist}

Remove All Server Profile Templates Async
    [Documentation]    Querys the appliance for all Server Profile Templates and then removes them
    ${resps} =    Remove All Server Profile Templates
    Wait For Task2    ${resps}

Verify Server Profile Templates exist
    [Documentation]   Verify if any server profile templates exist
    ...               Checks if any server profile template is present
    Log   Verifying if any profile exists
    ${response}=   Fusion Api Get Server Profile Templates
    ${count}=   Convert To String  ${response['count']}
    Run Keyword If   '${response['count']}'!='0'   Fail   msg=All Server profiles templates are not removed

Server Profile Templates Should Not Exist
    [Documentation]   Check Specified server profile templates does not exists after removal
    [Arguments]  ${profile_templates}
    Log   Verifying if any profile exists    console=True
    :FOR    ${spt}  IN  @{profile_templates}
    \   ${templateFound} =  Check Resource Existing  SPT:${spt['name']}
    \   Run Keyword If   ${templateFound}=='PASS'   Fail   msg=Server profile template '${spt['name']}' still exists

Remove All SPT
    [Documentation]    Querys the appliance for Given SPT and then removes them
    [Arguments]  ${VERIFY}=${False}
    Log    Removing Server Profile Templates    console=True
    ${spts} =    Fusion Api Get Server Profile Templates
    ${count}=            Convert To String  ${spts['count']}
    Run Keyword If  '${count}'=='0'    Log   Server Profile Templates doesn't Exist     WARN
    :FOR    ${spt}  IN  @{spts['members']}
    \       ${resp} =    Fusion Api Delete Server Profile Template    uri=${spt['uri']}
    \       ${task} =    Wait For Task    ${resp}    240s    10s
    \       Log  ${task}    console=True
    \       ${task_state} =    Get From Dictionary    ${task}    taskState
    \       ${task_error_message} =    Run Keyword If    '${task_state}'=='Error'    Get From Dictionary    ${task['taskErrors'][0]}    message
    #\      Return from keyword if  '${task_state}'=='Error'  ${task}
    \       Run Keyword If    '${task_state}'=='Error'     Log    Delete FAILED for SPT URI:${spt['uri']} and its Response:${task_error_message}     WARN    console=true
    \       Continue For Loop If  '${task_state}'=='Error'
    \       ${val} =       Create Dictionary   taskState=Completed
    \       ${result} =    Validate Response    ${task}    ${val}
    \       ${response} =    Fusion Api Get Server Profile Templates    param=?filter="'name'=='${spt['name']}'"
    \       Log    count:${response['count']}    console=True
    \       # ${response} will be set to 'None' if ${VERIFY} was false.   That will cause an exception below as the key ['count'] doesn't exist
    \       Run Keyword If         '${VERIFY}'=='True' and '${response['count']}' == '0'     Log       Delete SUCCESS for SPT URI:${spt['uri']} and its Response:${response}    console=True
    \       ...    ELSE IF         '${VERIFY}'=='True' and '${response['count']}' != '0'     Log       Delete FAILED for SPT URI:${spt['uri']} and its Response:${response}     ERROR

Create Server Profile from SPT
    [Documentation]     Craetes a server profile by SPT URI
    [Arguments]  ${server_profiles_from_spt}  ${VERIFY}=${FALSE}  ${expected_server_profiles_from_spt}=@empty  ${STATUS_CODE}=202    ${param}=?ignoreServerHealth=true
    Log      Creating SERVER PROFILES from Server Profile template    console=True
    ${actualsps} =  Create List
    :FOR    ${profile}  IN  @{server_profiles_from_spt}
    \   ${sh} =     Get from Dictionary     ${profile}  serverHardwareUri
    \   ${sh_uri} =     Get Server Hardware URI     ${sh}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${sh_uri}
    \   ${sh_resp} =    Fusion Api Get Server Hardware      param=?filter="'name'=='${sh}'"
    \   ${sht_uri} =    Get from Dictionary     ${sh_resp['members'][0]}    serverHardwareTypeUri
    \   Set to Dictionary   ${profile}  serverHardwareTypeUri   ${sht_uri}
    \   ${spname} =     Get from Dictionary     ${profile}  name
    \   ${eg} =     Get from Dictionary     ${profile}  enclosureGroupUri
    \   ${eg_uri} =     Common URI Lookup by name    ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${eg_uri}
    #\  ${enc} =    Get from Dictionary     ${profile}  enclosureUri
    #\  ${enc_uri} =    Common URI Lookup by name    ${enc}
    #\  Set to Dictionary   ${profile}  enclosureUri    ${enc_uri}
    \   ${connections} =    Get From Dictionary     ${profile['connectionSettings']}  connections
    \   ${connections} =    Lookup Connection Uris  ${connections}
    \   Set to Dictionary   ${profile['connectionSettings']}  connections     ${connections}
    \   ${spturi} =     Get from Dictionary     ${profile}  serverProfileTemplateUri
    \   ${spt_uri} =    Common URI Lookup by name    ${spturi}
    \   Set to Dictionary   ${profile}  serverProfileTemplateUri    ${spt_uri}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}    param=${param}
    #   -If !$VERIFY, then go to the next Server Profile
    \   continue for loop if  ${VERIFY}==${FALSE}
    #   -Check the response code to ensure the server profile was created as expected
    \   should be equal as integers  ${resp['status_code']}  ${STATUS_CODE}
    \   Log    ${resp}  TRACE    console=true
    #   -We need a way to track the responses for later verification.  Add info to a dict, then add the dict to a list
    \   ${dict} =  create dictionary
    \   set to dictionary   ${dict}  resp=${resp}
    \   set to dictionary   ${dict}  spname=${spname}
    \   append to list  ${actualsps}  ${dict}
    # If !{VERIFY}, then we're done
    Return From Keyword If  ${VERIFY}==${FALSE}    ${actualsps}
    # Iterate through the list of responses build in the last for loop
    :FOR    ${sp}  IN  @{actualsps}
    #       -Wait for the sp creation task to finish
    \       ${spname} =         Get From Dictionary     ${sp}       spname
    \       Wait For Task2  ${sp['resp']}   timeout=600     interval=10
    #       -Grab the correct network from the expected network listed that was passed in
    \       ${expItem} =  Fusion Api Get Dict From List  ${expected_server_profiles_from_spt}  name  ${spname}
    #       -If the network isn't in the list to validate, skip it
    \       CONTINUE FOR LOOP IF  ${expItem}=={}
    #       -Get the network resource and do the comparison
    \       ${actItem} =  Get Resource    SP:${spname}
    \       ${result} =  fusion api validate response follow   ${expItem}  ${actItem}  wordy=${TRUE}
    \       Run keyword and continue on failure  should be equal  ${result}  ${TRUE}
    \       Log  ${result}    console=True

Create Non Existing Server Profile from SPT
    [Documentation]     Craetes a server profile by SPT URI
    [Arguments]  ${server_profiles_from_spt}  ${VERIFY}=${FALSE}  ${STATUS_CODE}=202    ${notFoundStatusCodeList}=404    ${param}=?ignoreServerHealth=true
    Log    Creating SERVER PROFILES from Server Profile template    console=true
    ${resplist} =  Create List
    :FOR    ${profile}  IN  @{server_profiles_from_spt}
    \    Log  Adding Server Profile -${profile['name']}    console=True
    #   Check whether the profile already exists
    \   ${resp1} =                              Get Resource  SP:${profile['name']}
    \   ${response_status_code}=  Convert To String  ${resp1['status_code']}
    \   ${status}=           Run Keyword And Return Status   List Should Contain Value  ${notFoundStatusCodeList}  ${response_status_code}
    \   Run Keyword If    ${status}==False           Log         Server Profile ${profile['name']} is already added                WARN
    \   continue for loop if  ${status}==False
    \   ${sh} =     Get from Dictionary     ${profile}  serverHardwareUri
    \   ${sh_uri} =     Get Server Hardware URI     ${sh}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${sh_uri}
    \   ${sh_resp} =    Fusion Api Get Server Hardware      param=?filter="'name'=='${sh}'"
    \   ${sht_uri} =    Get from Dictionary     ${sh_resp['members'][0]}    serverHardwareTypeUri
    \   Set to Dictionary   ${profile}  serverHardwareTypeUri   ${sht_uri}
    \   ${spname} =     Get from Dictionary     ${profile}  name
    \   ${eg} =     Get from Dictionary     ${profile}  enclosureGroupUri
    \   ${eg_uri} =     Common URI Lookup by name    ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${eg_uri}
    \   ${connections} =    Get From Dictionary     ${profile['connectionSettings']}  connections
    \   ${connections} =    Lookup Connection Uris  ${connections}
    \   Set to Dictionary   ${profile['connectionSettings']}  connections     ${connections}
    \   ${spturi} =     Get from Dictionary     ${profile}  serverProfileTemplateUri
    \   ${spt_uri} =    Common URI Lookup by name    ${spturi}
    \   Set to Dictionary   ${profile}  serverProfileTemplateUri    ${spt_uri}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}    param=${param}
    #   -Check the response code to ensure the server profile was created as expected
    \   Run keyword and continue on failure  should be equal as integers   ${resp['status_code']}  ${status_code}
    \   continue for loop if    '${resp['status_code']}'!='${status_code}'
    \   append to list    ${resplist}    ${resp}
    [return]    ${resplist}

Create Server Profile Template from Profile
    [Documentation]     Create SPT from profile
    [Arguments]  ${profile_dto}  ${spt_name}    ${scope_names}=${None}
    ${profile_uri} =  Common URI Lookup by name  SP:${profile_dto['name']}
    ${payload} =  fusion api get server profile new template  ${profile_uri}
    # remove the status_code and headers in the response
    remove from dictionary  ${payload}  status_code
    remove from dictionary  ${payload}  headers
    # set SPT name in the payload
    Set to Dictionary   ${payload}  name  ${spt_name}
    ${scopes} =    Create List
    ${scope_names} =    Set Variable If    ${scope_names}==${None}    ${scopes}    ${scope_names}
    ${scopes} =    Run Keyword For List    ${scope_names}    Get Scope URI By Name
    Set To Dictionary    ${payload}    initialScopeUris    ${scopes}
    ${resp} =  Fusion Api Create Server Profile Template  body=${payload}
    [Return]  ${resp}

Server Profile Templates Attribute ${attribute} Should Have Value ${value}
    [Documentation]    Check attribute of Server Profile Template
    ...    Fail the test in case of attribute other than expected
    ${spts} =    Fusion Api Get Server Profile Templates
    Run Keyword If  '${spts['count']}' == '0'  Fail  msg=No profile templates found
    ${res} =  Set Variable  ${empty}
    :FOR  ${spt}  IN  @{spts['members']}
    \  ${res} =  Run Keyword If  '${spt['${attribute}']}' != '${value}'  Catenate  ${res}
    ...  \nServer name [${spt['${attribute}']}] Expected ${attribute} ${value} but found ${spt['${attribute}']}
    \  ...  ELSE  Set Variable  ${res}
    ${count} =  Get Length  ${res}
    Run Keyword If  '${count}' > '0'  Fail  ${res}