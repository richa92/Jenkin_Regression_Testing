*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs

*** Keywords ***
Get Specified Node from HA Nodes
    [Documentation]   Retrieves information about all members of the high-availability appliance cluster.
    ...               The parameter role could be: Active/Standby/Unused
    [Arguments]    ${ROLE}=Active
    Log To Console And Logfile    Get specified node in HA appliance cluster
    ${resp}=    Fusion Api Get HA Nodes
    :FOR    ${node}    IN    @{resp['members']}
    \       Return From Keyword If    '${node['role']}' == '${ROLE}'  ${node}
    [Return]  /bad_node_${ROLE}

Get Uri From Appliance HA Nodes
    [Documentation]   Retrieves information about all members of the high-availability appliance cluster.
    ...               The parameter role could be: Active/Standby/Unused
    [Arguments]    ${ROLE}=Active
    Log To Console And Logfile    Get specified node uri from HA appliance cluster
    ${resp}=    Fusion Api Get HA Nodes
    :FOR    ${node}    IN    @{resp['members']}
    \       Return From Keyword If    '${node['role']}' == '${ROLE}'  ${node["uri"]}
    [Return]  /bad_node_uri

Remove Standby Node from HA Nodes
    [Documentation]    Remove the standby node from a HA cluster environment
    Log To Console And Logfile   Remove the standby node from a HA cluster environment
    ${standby}=        Get Uri From Appliance HA Nodes  ROLE=Standby
    ${resp}=    Run Keyword if    '${standby}' != '/bad_node_uri'   Fusion Api Delete HA Nodes    uri=${standby}
    Run Keyword if  '${standby}' != '/bad_node_uri'  Wait For Task2    ${resp}   timeout=60m    interval=10

Power Off HA Node And Wait For Success
    [Documentation]    Power off the HA Node and wait for success
    [Arguments]  ${node}  ${post_state}=PWR_STATE_OFF  ${timeout}=2m  ${interval}=10s
    Log To Console And Logfile    Power off the HA Node
    ${status}=    Run cpqlocfg and Power Off Server   ${node}

    Log To Console  \nWait for HA node to reach POST State ${post_state}
    Wait Until Keyword Succeeds  ${timeout}  ${interval}  Run cpqlocfg and Verify Server POST State  ${node}  ${post_state}
    Log To Console  \nHA node has reached the POST state ${post_state}

Power On HA Node And Wait For Success
    [Documentation]    Power on HA Node and wait for success
    [Arguments]  ${node}  ${post_state}=IN_POST_DISCOVERY_COMPLETE|FINISHED_POST  ${timeout}=6m  ${interval}=10s
    Log To Console And Logfile    Power on the HA Node
    ${status}=    Run cpqlocfg and Power On Server   ${node}

    Log To Console  \nWait for HA node to reach POST State ${post_state}
    Wait Until Keyword Succeeds  ${timeout}  ${interval}  Run cpqlocfg and Verify Server POST State  ${node}  ${post_state}
    Log To Console  \nHA node has reached the POST state ${post_state}

Restart Appliance
    [Documentation]    Restart Appliance
    Log To Console And Logfile    Restarting Appliance
    Fusion Api Appliance Shutdown    REBOOT

Wait For Appliance State To Be Expected State
    [Documentation]    Wait For Appliance State To Be Expected State
    ...                The ExpectedState could be:  STARTING/OK/UPGRADE, etc.
    [Arguments]    ${ExpectedState}    ${timeout}=40 min    ${interval}=30 s
    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Appliance Should Be In The Expected State  ${ExpectedState}

Appliance Should Be In The Expected State
    [Documentation]  Appliance Should Be In The Expected State
    [Arguments]    ${ExpectedState}
   ${state} =     Fusion Api Get Resource       /controller-state.json
   Log To Console  -Appliance state ${state['state']}
   Should Match Regexp        ${state['state']}  ((?i)${ExpectedState})
