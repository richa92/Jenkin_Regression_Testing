*** Settings ***
Documentation       Run this Automation Test Suite with features like SSH currently included in this suite.
...
Resource            ../../../../Resources/api/fusion_api_resource.txt
Resource            ../InternalResource.txt
Resource            NitroSSH.txt
Library             ../InternalFunctions.py
Variables           ../Data_Variables.py

Library             RoboGalaxyLibrary
Library             FusionLibrary

*** Test cases ***
Login
    [Documentation]    Login
    Set Log Level    TRACE
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${Appliance_credentials}

Set Suite Variables before running Automation Suite
    [Documentation]    Set Suite Variables before running Automation Suite
    Set Suite Variables before running Automation Suite  ${INTERCONNECT1}   ${INTERCONNECT2}

Get Random Password for nitro
    [Documentation]    Get Random Password for nitro
    ${Random_Password}=    Get Random Password for nitro  ${APPLIANCE_IP}  ${SSH_USER}  ${SSH_PASS}  ${Enclosure1}   ${Enc1_nitro_Module_Bay_No}
    Set Suite Variable    ${Random_Password}

Connect to Appliance
    [Documentation]    Connect to Appliance
    ${SSH}=    ssh_connect    ${APPLIANCE_IP}  ${SSH_USER}  ${SSH_PASS}
    Set Suite Variable     ${SSH}

Verify the maximum SSH sessions are supported in ICM
    [Documentation]    Verify the maximum SSH sessions are supported in ICM
    Verify the maximum SSH sessions are supported in ICM   ${Random_Password}  ${NitroIP1_IPV4}

Verify SSH is allowed through static IPv4 and IPv6
    [Documentation]    Verify SSH is allowed through static IPv4 and IPv6
    Log   Test1
    Open Connection And Log In      ${APPLIANCE_IP}    ${SSH_USER}    ${SSH_PASS}
    ${master_ip} =    Get Master ICM IP    ${nitroUserName}    ${Random_Password}    ${NitroIP1_IPV4}    ${NitroIP2_IPV4}
    ${slave_ip} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP1_IPV4}    ELSE    Set Variable    ${NitroIP2_IPV4}
    ${master_ipv6} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP2_IPV6}    ELSE    Set Variable    ${NitroIP1_IPV6}
    ${slave_ipv6} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP1_IPV6}    ELSE    Set Variable    ${NitroIP2_IPV6}
    Verify SSH is allowed through static IPv4 and IPv6    ${SSH}  ${nitroUserName}  ${Random_Password}  ${master_ip}  ${master_ipv6}%bond0  OneView#
    Verify SSH is allowed through static IPv4 and IPv6    ${SSH}  ${nitroUserName}  ${Random_Password}  ${slave_ip}  ${slave_ipv6}%bond0  OneView>

Verify SSH is allowed for netop user
    [Documentation]    Verify SSH is allowed for netop user
    Log   Test2
    Enable FaceplateSerial, Netop User and Canserial for interconnect    ${APPLIANCE_IP}  ${INTERCONNECT1}    ${netop_user}
    Enable FaceplateSerial, Netop User and Canserial for interconnect    ${APPLIANCE_IP}  ${INTERCONNECT2}    ${netop_user}
    Open Connection And Log In      ${APPLIANCE_IP}    ${SSH_USER}    ${SSH_PASS}
    ${master_ip} =    Get Master ICM IP    ${nitroUserName}    ${Random_Password}    ${NitroIP1_IPV4}    ${NitroIP2_IPV4}
    ${slave_ip} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP1_IPV4}    ELSE    Set Variable    ${NitroIP2_IPV4}
    ${master_ipv6} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP2_IPV6}    ELSE    Set Variable    ${NitroIP1_IPV6}
    ${slave_ipv6} =    Run Keyword If    '${master_ip}'=='${NitroIP2_IPV4}'    Set Variable    ${NitroIP1_IPV6}    ELSE    Set Variable    ${NitroIP2_IPV6}
    Verify SSH is allowed through static IPv4 and IPv6    ${SSH}  netop  netop123   ${master_ip}  ${master_ipv6}%bond0  OneView#
    Verify SSH is allowed through static IPv4 and IPv6    ${SSH}  netop  netop123   ${slave_ip}  ${slave_ipv6}%bond0  OneView>

Verify SSH is allowed after Active/Standby force fail-over in ICM
    [Documentation]    Verify SSH is allowed after Active/Standby force fail-over in ICM
    Log   Test3
    Verify SSH is allowed after Active/Standby force fail-over in ICM    ${APPLIANCE_IP}  ${Random_Password}  ${NitroIP1_IPV4}  ${NitroIP1_IPV6}  ${NitroIP2_IPV4}  ${NitroIP2_IPV6}  OneView#

Verify SSH is allowed after ICM Reset
    [Documentation]    Verify SSH is allowed after ICM Reset
    Verify SSH is allowed after ICM Reset    ${APPLIANCE_IP}  ${Random_Password}  ${NitroIP1_IPV4}  ${NitroIP1_IPV6}  ${NitroIP2_IPV4}  ${NitroIP2_IPV6}  OneView#

Connect to Linux box and execute scripts
    [Documentation]    Connect to Linux box and execute scripts
    ${ssh_linux_vm}=    ssh_connect    ${linuxip}  ${linuxuser}  ${linuxpassword}
    Set Suite Variable     ${ssh_linux_vm}
    execute_cmd    ${ssh_linux_vm}   cd /root/POTASH/Nitro_Func/COMMON_SCRIPTS; rm -rf /root/.ssh/known_hosts; python nitro_main.py ${Random_Password} &
    ssh_close   ${ssh_linux_vm}