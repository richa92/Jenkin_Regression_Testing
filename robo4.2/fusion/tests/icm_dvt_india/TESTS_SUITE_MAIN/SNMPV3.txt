*** Settings ***
Documentation       This module for Validate SNMPv3 User Creation and Traps Configuration
Resource           ../../../Resources/api/fusion_api_resource.txt
Resource           FCoE.txt
Library           Assccii
Library           OperatingSystem

Variables           Data_Variables.py

*** Variables ***

*** keywords ***
Get SNMP Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpwalk -v3 -u ${PUsrName} -a sha -A ${PPwd} -x AES -X ${PPwd} -l AuthPriv udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMP Set Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpset -v3 -u ${PUsrName} -a sha -A ${PPwd} -x AES -X ${PPwd} -l AuthPriv udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPv3Get Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpget -v3 -u ${PUsrName} -a sha -A ${PPwd} -x AES -X ${PPwd} -l AuthPriv udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPv3Set Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpset -v3 -u ${PUsrName} -a sha -A ${PPwd} -x AES -X ${PPwd} -t 30 -l AuthPriv udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get NoAuthNoPriv SNMP Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PIPAddr}
    ${cmd}=    set variable    snmpget -v3 -l noAuthNoPriv -u ${PUsrName} udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get AuthNoPriv SNMP Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpget -v3 -l authNoPriv -u ${PUsrName} -A ${PPwd} -a SHA udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPwalk Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpwalk -v3 -u ${PUsrName} -a sha -A ${PPwd} -x AES -X ${PPwd} -l AuthPriv udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPwalknoAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PIPAddr}
    ${cmd}=    set variable    snmpwalk -v3 -l noAuthNoPriv -u ${PUsrName} udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPGetnoAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PIPAddr}
    ${cmd}=    set variable    snmpget -v3 -l noAuthNoPriv -u ${PUsrName} udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPSetnoAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PIPAddr}
    ${cmd}=    set variable    snmpset -v3 -l noAuthNoPriv -u ${PUsrName} udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPwalkAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpwalk -v3 -l authNoPriv -u ${PUsrName} -A ${PPwd} -a SHA udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPGetAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpget -v3 -l authNoPriv -u ${PUsrName} -A ${PPwd} -a SHA udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get SNMPSetAuthNoPriv Command
    [Documentation]    To get the SNMP command merge with user name, password and Master potash IP
    [Arguments]        ${PUsrName}    ${PPwd}    ${PIPAddr}
    ${cmd}=    set variable    snmpset -v3 -l authNoPriv -u ${PUsrName} -A ${PPwd} -a SHA udp6:[${PIPAddr}]:161
    [return]  ${cmd}

Get EngineId
    [Documentation]    Keyword to Get EngineId
    [Arguments]          ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    Open Connection And Log In      ${APPLIANCE_IP}
    ${cmdd}=    Get SNMPv3Get Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Set Suite Variable    ${cmdd}
    ${Pcmd}=    catenate    ${cmdd}    1.3.6.1.6.3.10.2.1.1.0
    ${output}=     Execute Command    ${Pcmd}
    ${str}=    Split String    ${output}    Hex-STRING:
    ${EID}=    Get From List    ${str}    1
    ${Strp}=    Strip String    ${EID}
    ${wthoutspaces}=    Remove String    ${Strp}    ${SPACE}
    Log To Console    ${Strp}
    @{str1}=    Split String    ${Strp}    ${SPACE}
    Log   ${str1}
    ${EngineId}=    set variable    128.0.0.11.3.92.185.1.71.169.91.
    ${wthoutspaces}=    set variable     8000000B035CB90147A95B
    [return]    ${EngineId}    ${wthoutspaces}


Custom EngineId
    [Documentation]    Keyword to Get Custom EngineId
    ${Strp}=    Set variable    80 00 00 0B 03 5C B9 01 28 83
    ${dd}=    Generate Random String    2    [NUMBERS]abcdef
    ${stng}=    Catenate    ${Strp} ${dd}
    ${wthoutspaces}=    Remove String    ${stng}    ${SPACE}
    ${str1}=    Split String    ${stng}    ${SPACE}
    Log     ${str1}
    ${frstrng}=    Set variable
    : for   ${item} in  @{str1}
    \   ${intgr}=    Convert To Integer    ${item}    16
    \   ${rstrng}=    catenate    ${intgr}.
    \   ${frstrng}=    catenate    ${frstrng}${rstrng}
    \   ${EngineId}=    Strip String    ${frstrng}
    [return]    ${EngineId}    ${wthoutspaces}

Create User AuthPriv
    [Documentation]    Keyword to Create User AuthPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${rdmpwd}    ${eid}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${rdmuserName}\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.5.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.1.3"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-USER-BASED-SM-MIB::usmHMACSHAAuthProtocol\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.8.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.2.4"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-FRAMEWORK-MIB::snmpPrivProtocols.4\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.9.11.${eid}${strLen}.${ascii} s "${rdmpwd}"
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmpwd}"\\s*[\\w\\W]*?
    Log To Console    ${fCmd}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.6.11.${eid}${strLen}.${ascii} s "${rdmpwd}"
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmpwd}"\\s*[\\w\\W]*?
    Log To Console    ${fCmd}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 1
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?INTEGER: active\\s*[\\w\\W]*?
    Log To Console    ${fCmd}

Create Group For User AuthPriv
    [Documentation]    Keyword to Create Group For User AuthPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${groupName}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    Creating SNMP Group..
    Log To Console    1.Row Status: Create and Wait  [ highlighted is the user name, 6-> user_name length, 3-> snmpV3]
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Group Name:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.3.3.${strLen}.${ascii} s "${groupName}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = STRING: ${groupName}\\s*[\\w\\W]*?

    Log To Console    3.Row Active:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: active\\s*[\\w\\W]*?

Provide SNMP access To User AuthPriv
    [Documentation]    Keyword to Provide SNMP access To User AuthPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${groupName}
    ${strLen}=    Get Length    ${groupName}
    ${ascii}=    GetAsciiValue  ${groupName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Row Create and Wait :[highlighted is the Group Name {Private} in asci, 7-> group name length, 0.3.3 - > (context_id (0) . snmpv3(3) . AuthPrivUsed (3) )
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.3 i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authPriv = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.ReadView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.5.${strLen}.${ascii}.0.3.3 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    3.WriteView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.6.${strLen}.${ascii}.0.3.3 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    4. NotifyView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.7.${strLen}.${ascii}.0.3.3 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    5.Row Active
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.3 i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authPriv = INTEGER: active\\s*[\\w\\W]*?

Create User AuthNoPriv
    [Documentation]    Keyword to Create User AuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${rdmpwd}    ${eid}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${rdmuserName}\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.5.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.1.3"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-USER-BASED-SM-MIB::usmHMACSHAAuthProtocol\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.8.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.2.1"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-USER-BASED-SM-MIB::usmNoPrivProtocol\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.6.11.${eid}${strLen}.${ascii} s "${rdmpwd}"
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmpwd}"\\s*[\\w\\W]*?
    Log To Console    ${fCmd}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 1
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?INTEGER: active\\s*[\\w\\W]*?
    Log To Console    ${fCmd}

Create Group For User AuthNoPriv
    [Documentation]    Keyword to Create Group For User AuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${groupName}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    Creating SNMP Group..
    Log To Console    1.Row Status: Create and Wait  [ highlighted is the user name, 6-> user_name length, 3-> snmpV3]
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Group Name:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.3.3.${strLen}.${ascii} s "${groupName}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = STRING: ${groupName}\\s*[\\w\\W]*?

    Log To Console    3.Row Active:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: active\\s*[\\w\\W]*?

Provide SNMP access To User AuthNoPriv
    [Documentation]    Keyword to Provide SNMP access To User AuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${groupName}
    ${strLen}=    Get Length    ${groupName}
    ${ascii}=    GetAsciiValue  ${groupName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Row Create and Wait :[highlighted is the Group Name {Private} in asci, 7-> group name length, 0.3.2 - > (context_id (0) . snmpv3(3) . AuthnoPrivUsed (3) )
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.2 i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authNoPriv = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.ReadView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.5.${strLen}.${ascii}.0.3.2 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    3.WriteView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.6.${strLen}.${ascii}.0.3.2 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    4. NotifyView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.7.${strLen}.${ascii}.0.3.2 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    5.Row Active
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.2 i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.authNoPriv = INTEGER: active\\s*[\\w\\W]*?

Create User NoAuthNoPriv
    [Documentation]    Keyword to Create User NoAuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${eid}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${rdmuserName}\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.5.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.1.1"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-USER-BASED-SM-MIB::usmNoAuthProtocol\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.8.11.${eid}${strLen}.${ascii} o "1.3.6.1.6.3.10.1.2.1"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = OID: SNMP-USER-BASED-SM-MIB::usmNoPrivProtocol\\s*[\\w\\W]*?
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 1
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?INTEGER: active\\s*[\\w\\W]*?
    Log To Console    ${fCmd}

Create Group For User NoAuthNoPriv
    [Documentation]    Keyword to Create Group For User NoAuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}    ${groupName}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    Creating SNMP Group..
    Log To Console    1.Row Status: Create and Wait  [ highlighted is the user name, ${strLen}-> user_name length, 3-> snmpV3]
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Group Name:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.3.3.${strLen}.${ascii} s "${groupName}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = STRING: ${groupName}\\s*[\\w\\W]*?

    Log To Console    3.Row Active:
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.2.1.5.3.${strLen}.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${rdmuserName}" = INTEGER: active\\s*[\\w\\W]*?

Provide SNMP access To User NoAuthNoPriv
    [Documentation]    Keyword to Provide SNMP access To User NoAuthNoPriv
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${groupName}
    ${strLen}=    Get Length    ${groupName}
    ${ascii}=    GetAsciiValue  ${groupName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Row Create and Wait :[highlighted is the Group Name {Private} in asci, 7-> group name length, 0.3.2 - > (context_id (0) . snmpv3(3) . noAuthnoPrivUsed (1) )
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.1 i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.noAuthNoPriv = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.ReadView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.5.${strLen}.${ascii}.0.3.1 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.noAuthNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    3.WriteView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.6.${strLen}.${ascii}.0.3.1 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.noAuthNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    4. NotifyView
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.7.${strLen}.${ascii}.0.3.1 s "iso"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.noAuthNoPriv = STRING: iso\\s*[\\w\\W]*?

    Log To Console    5.Row Active
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.16.1.4.1.9.${strLen}.${ascii}.0.3.1 i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?"${groupName}"."".3.noAuthNoPriv = INTEGER: active\\s*[\\w\\W]*?

Create snmpNotifyEntry
    [Documentation]    Keyword to Create snmpNotifyEntry
    [Arguments]    ${Random_Password}    ${PotashIP1_IPV6}    ${row_name_Notify}    ${notify_tag_name}    ${snmptNotifyType}
    ${ascii}=    GetAsciiValue  ${row_name_Notify}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Waiting for the Row
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.13.1.1.1.5.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Notify}' = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Providing snmpNotifyTag Value
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.13.1.1.1.2.${ascii} s "${notify_tag_name}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpNotifyTag.'${row_name_Notify}' = STRING: ${notify_tag_name}\\s*[\\w\\W]*?

    Log To Console    3.Providing snmpNotifyType Value
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.13.1.1.1.3.${ascii} i ${snmptNotifyType}
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Notify}' = INTEGER:\\s*[\\w\\W]*?
    Log To Console    4.Row Activation..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.13.1.1.1.5.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Notify}' = INTEGER: active\\s*[\\w\\W]*?

SNMPTargetAddrEntry
    [Documentation]    Keyword to Create SNMPTargetAddrEntry
    [Arguments]    ${Random_Password}    ${PotashIP1_IPV6}    ${row_name_Target}    ${notify_tag_name}    ${TIPAddress}    ${row_name_Params}
    ${ascii}=    GetAsciiValue  ${row_name_Target}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Waiting for the Row..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.2.1.9.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Target}' = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Providing snmpTargetAddrTAddress..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.2.1.3.${ascii} x 5A0100DE00C9
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Target}' = Hex-STRING:\\s*[\\w\\W]*?

    Log To Console    3.snmpTargetAddrTagList_NotifyTagName
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.2.1.6.${ascii} s "${notify_tag_name}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Target}' = STRING: ${notify_tag_name}\\s*[\\w\\W]*?

    Log To Console    4.snmpTargetAddrParams_Params Row Value
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.2.1.7.${ascii} s "${row_name_Params}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Target}' = STRING: ${row_name_Params}\\s*[\\w\\W]*?

    Log To Console    5.Waiting for the Row..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.2.1.9.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Target}' = INTEGER: active\\s*[\\w\\W]*?

SNMPTargetParamsEntry
    [Documentation]    Keyword to Create SNMPTargetParamsEntry
    [Arguments]    ${Random_Password}    ${PotashIP1_IPV6}    ${row_name_Params}    ${user_name}    ${SecLevel}
    ${ascii}=    GetAsciiValue  ${row_name_Params}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    Log To Console    1.Waiting for the Row..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.7.${ascii} i 5
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?'${row_name_Params}' = INTEGER: createAndWait\\s*[\\w\\W]*?

    Log To Console    2.Providing snmpTargetParamsMPModel..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.2.${ascii} i 3
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpTargetParamsMPModel.'${row_name_Params}' = INTEGER: 3\\s*[\\w\\W]*?

    Log To Console    3.snmpTargetParamsSecurityModel..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.3.${ascii} i 3
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpTargetParamsSecurityModel.'${row_name_Params}' = INTEGER: 3\\s*[\\w\\W]*?

    Log To Console    4.snmpTargetParamsSecurityName..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.4.${ascii} s "${user_name}"
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpTargetParamsSecurityName.'${row_name_Params}' = STRING: ${user_name}\\s*[\\w\\W]*?

    Log To Console    5.snmpTargetParamsSecurityLevel..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.5.${ascii} i ${SecLevel}
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpTargetParamsSecurityLevel.'${row_name_Params}' = INTEGER:\\s*[\\w\\W]*?

    Log To Console    6.Row Activation ..
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.12.1.3.1.7.${ascii} i 1
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?snmpTargetParamsRowStatus.'${row_name_Params}' = INTEGER: active\\s*[\\w\\W]*?


TestCase1:To verify the ICM allows each snmpv3 user to configure with AuthPriv roles
    [Documentation]    Keyword To verify the ICM allows each snmpv3 user to configure with AuthPriv roles
    Log   ${EXECDIR}
    Append To File    ${EXECDIR}/file_with_variable.txt  ********************************* ${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    Log     ${userName}

    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  GroupName :${grpName} ${\n}
    Log      ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyName :${notifyName}${\n}
    Log    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  TargetName :${targetName}${\n}
    Log     ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyTag :${ntfytag}${\n}
    Log     ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ParamsName :${paramsName}${\n}
    Log     ${paramsName}

    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}     ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #Test4: To Check SNMPv3 SET/GET/WALK working_AuthPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    Create snmpNotifyEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${notifyName}    ${ntfytag}    2
    SNMPTargetAddrEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${targetName}    ${ntfytag}    ip    ${paramsName}
    SNMPTargetParamsEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${paramsName}    ${userName}    3
    Execute Command And Verify Traps    ${eid1}    ${userName}    ${passwrd}

To verify the ICM allows each snmpv3 user to configure with AuthPriv roles with Custom EngineID
    [Documentation]    Keyword To verify the ICM allows each snmpv3 user to configure with AuthPriv roles with Custom EngineID
    Append To File    ${EXECDIR}/file_with_variable.txt  ********************************* ${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  GroupNmae :${grpName} ${\n}
    Log To Console    ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyName :${notifyName}${\n}
    Log To Console    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  TargetName :${targetName}${\n}
    Log To Console    ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyTag :${ntfytag}${\n}
    Log To Console    ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ParamsName :${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Custom EngineId
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}     ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    Test4: To Check SNMPv3 SET/GET/WALK working_AuthPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    Create snmpNotifyEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${notifyName}    ${ntfytag}    2


To verify the ICM allows each snmpv3 user to configure with AuthPriv roles with Custom EngineID for Traps
    [Documentation]    Keyword To verify the ICM allows each snmpv3 user to configure with AuthPriv roles with Custom EngineID for Traps
    Append To File    ${EXECDIR}/file_with_variable.txt  ********************************* ${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  GroupNmae :${grpName} ${\n}
    Log To Console    ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyName :${notifyName}${\n}
    Log To Console    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  TargetName :${targetName}${\n}
    Log To Console    ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyTag :${ntfytag}${\n}
    Log To Console    ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ParamsName :${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Custom EngineId
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}     ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    Test4: To Check SNMPv3 SET/GET/WALK working_AuthPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    Create snmpNotifyEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${notifyName}    ${ntfytag}    1
    SNMPTargetAddrEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${targetName}    ${ntfytag}    ip    ${paramsName}
    SNMPTargetParamsEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${paramsName}    ${userName}    3
    Sleep    3Sec
    Execute Command And Verify Traps    ${eid1}    ${userName}    ${passwrd}


TestCase2:To verify the ICM allows each snmpv3 user to configure with noAuthnoPriv roles
    [Documentation]    Keyword To verify the ICM allows each snmpv3 user to configure with noAuthnoPriv roles
    Append To File    ${EXECDIR}/file_with_variable.txt  ********************************* ${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:noAuthnoPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  GroupNmae :${grpName} ${\n}
    Log To Console    ${grpName}
    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyName :${notifyName}${\n}
    Log To Console    ${notifyName}
    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  TargetName :${targetName}${\n}
    Log To Console    ${targetName}
    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyTag :${ntfytag}${\n}
    Log To Console    ${ntfytag}
    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ParamsName :${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${eid}
    Create Group For User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #ToCheck SNMPv3 SET/GET/WALK working_noAuthnoPriv    ${userName}    ${PotashIP1_IPV6}
    Create snmpNotifyEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${notifyName}    ${ntfytag}    1
    SNMPTargetAddrEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${targetName}    ${ntfytag}    ip    ${paramsName}
    SNMPTargetParamsEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${paramsName}    ${userName}    1
    Execute Command And Verify Traps NoAuthNoPriv    ${eid1}    ${userName}


TestCase3:To verify the ICM allows each snmpv3 user to configure with AuthnoPriv roles
    [Documentation]    Keyword To verify the ICM allows each snmpv3 user to configure with AuthnoPriv roles
    Append To File    ${EXECDIR}/file_with_variable.txt  ********************************* ${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthnoPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  GroupNmae :${grpName} ${\n}
    Log To Console    ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyName :${notifyName}${\n}
    Log To Console    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  TargetName :${targetName}${\n}
    Log To Console    ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  NotifyTag :${ntfytag}${\n}
    Log To Console    ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ParamsName :${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}


    Create User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #To Check SNMPv3 SET/GET/WALK working_AuthnoPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    Create snmpNotifyEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${notifyName}    ${ntfytag}    2
    SNMPTargetAddrEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${targetName}    ${ntfytag}    ip    ${paramsName}
    SNMPTargetParamsEntry    ${Random_Password}    ${PotashIP1_IPV6}    ${paramsName}    ${userName}    2
    Execute Command And Verify Traps AuthNoPriv    ${eid1}    ${userName}    ${passwrd}


Test4: To Check SNMPv3 SET/GET/WALK working_AuthPriv
    [Documentation]    Keyword To Check SNMPv3 SET/GET/WALK working_AuthPriv
    [Arguments]    ${userName}    ${passwrd}    ${PotashIP1_IPV6}

    Open Connection And Log In      ${APPLIANCE_IP}

    ${valcmd}=    Get SNMPv3Get Command    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?SNMPv2-SMI::enterprises.11.5.7.5.8.1.81.1.3.0 = STRING:\\s*[\\w\\W]*?

    ${valcmd}=    Get SNMPwalk Command    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.6.3.15.1.2.2.1.3
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${userName}\\s*[\\w\\W]*?
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMP Set Command    ${userName}    ${passwrd}     ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?down\\s*[\\w\\W]*?
    Sleep    3
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?up\\s*[\\w\\W]*?

To Check SNMPv3 SET/GET/WALK working_AuthnoPriv
    [Documentation]    Keyword To Check SNMPv3 SET/GET/WALK working_AuthnoPriv
    [Arguments]    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    ${valcmd}=    Get SNMPGetAuthNoPriv Command    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?SNMPv2-SMI::enterprises.11.5.7.5.8.1.81.1.3.0 = STRING:\\s*[\\w\\W]*?

    ${valcmd}=    Get SNMPwalkAuthNoPriv Command    ${userName}    ${passwrd}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.6.3.15.1.2.2.1.3
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${userName}\\s*[\\w\\W]*?
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMPSetAuthNoPriv Command    ${userName}    ${passwrd}     ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?down\\s*[\\w\\W]*?
    Sleep    3
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?up\\s*[\\w\\W]*?


ToCheck SNMPv3 SET/GET/WALK working_noAuthnoPriv
    [Documentation]    Keyword To Check SNMPv3 SET/GET/WALK working_noAuthnoPriv
    [Arguments]    ${userName}    ${PotashIP1_IPV6}
    ${valcmd}=    Get SNMPGetnoAuthNoPriv Command    ${userName}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?SNMPv2-SMI::enterprises.11.5.7.5.8.1.81.1.3.0 = STRING:\\s*[\\w\\W]*?

    ${valcmd}=    Get SNMPwalknoAuthNoPriv Command    ${userName}    ${PotashIP1_IPV6}
    ${fvalcmd}=    catenate    ${valcmd}    1.3.6.1.6.3.15.1.2.2.1.3
    ${output}=     Execute Command    ${fvalcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${userName}\\s*[\\w\\W]*?
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMPSetnoAuthNoPriv Command    ${userName}    ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?down\\s*[\\w\\W]*?
    Sleep    3
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    ${output}=     Execute Command    ${Pcmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?up\\s*[\\w\\W]*?

Create User authPriv_noTrapandNotify
    [Documentation]    Keyword To Create User authPriv_noTrapandNotify
    Append To File    ${EXECDIR}/file_with_variable.txt  ***********authPriv_noTrapandNotify******${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${grpName}${\n}
    Log To Console    ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${notifyName}${\n}
    Log To Console    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${targetName}${\n}
    Log To Console    ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${ntfytag}${\n}
    Log To Console    ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}     ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #Test4: To Check SNMPv3 SET/GET/WALK working_AuthPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}

Create User noAuthnoPriv_noTrapandNotify
    [Documentation]    Keyword To Create User noAuthnoPriv_noTrapandNotify
    Append To File    ${EXECDIR}/file_with_variable.txt  ***********noAuthnoPriv_noTrapandNotify******${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:noAuthnoPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${grpName}${\n}
    Log To Console    ${grpName}
    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${notifyName}${\n}
    Log To Console    ${notifyName}
    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${targetName}${\n}
    Log To Console    ${targetName}
    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${ntfytag}${\n}
    Log To Console    ${ntfytag}
    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${paramsName}${\n}
    Log To Console    ${paramsName}

    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${eid}
    Create Group For User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User NoAuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #ToCheck SNMPv3 SET/GET/WALK working_noAuthnoPriv    ${userName}    ${PotashIP1_IPV6}

Create User AuthNoPriv_noTrapandNotify
    [Documentation]    Keyword To Create User AuthNoPriv_noTrapandNotify
    Append To File    ${EXECDIR}/file_with_variable.txt  ***********AuthNoPriv_noTrapandNotify******${\n}
    ${randomusr}=    Generate Random String    4    [LETTERS][LOWER]
    ${userName}=    catenate    HPEU${randomusr}
    #Log To Console    ${userName}
    ${randompwd} =  Generate Random String  6  [LOWER][NUMBERS]
    ${passwrd}=    catenate    HPEP${randompwd}
    #Log To Console    ${passwrd}
    Log To Console    ${\n}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${userName}:${passwrd}:AuthnoPriv${\n}
    ${randomGrpName}=    Generate Random String    4    [LETTERS]
    ${grpName}=    catenate    HPEG${randomGrpName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${grpName}${\n}
    Log To Console    ${grpName}

    ${randomnotifyname}=    Generate Random String    3    [LETTERS]
    ${notifyName}=    catenate    NTFY${randomnotifyname}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${notifyName}${\n}
    Log To Console    ${notifyName}

    ${randomtargetName}=    Generate Random String    3    [LETTERS]
    ${targetName}=    catenate    TRGTY${randomtargetName}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${targetName}${\n}
    Log To Console    ${targetName}

    ${randomntfytag}=    Generate Random String    3    [LETTERS]
    ${ntfytag}=    catenate    NTFYtag${randomntfytag}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${ntfytag}${\n}
    Log To Console    ${ntfytag}

    ${randomparams}=    Generate Random String    3    [LETTERS]
    ${paramsName}=    catenate    PRMS${randomparams}
    Append To File    ${EXECDIR}/file_with_variable.txt  ${paramsName}${\n}
    Log To Console    ${paramsName}


    ${eidout}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${eid}=    Get From List    ${eidout}    0
    ${eid1}=    Get From List    ${eidout}    1
    Append To File    ${EXECDIR}/file_with_variable.txt  Engine Id :${eid1}${\n}

    Create User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${passwrd}    ${eid}
    Create Group For User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${userName}    ${grpName}
    Provide SNMP access To User AuthNoPriv    ${Random_Password}     ${PotashIP1_IPV6}    ${grpName}
    #To Check SNMPv3 SET/GET/WALK working_AuthnoPriv    ${userName}    ${passwrd}    ${PotashIP1_IPV6}

Delete User
    [Documentation]    Keyword To Delete User
    [Arguments]    ${Random_Password}     ${PotashIP1_IPV6}    ${rdmuserName}
    ${eid}=    Get EngineId    ${APPLIANCE_IP}    ${Random_Password}     ${PotashIP1_IPV6}
    ${strLen}=    Get Length    ${rdmuserName}
    ${ascii}=    GetAsciiValue  ${rdmuserName}
    ${comncmdSet}=    Get SNMPv3Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${fCmd}=    catenate    ${comncmdSet}    1.3.6.1.6.3.15.1.2.2.1.13.11.${eid}${strLen}.${ascii} i 6
    Log To Console    ${fCmd}
    ${output}=     Execute Command    ${fCmd}
    run keyword and continue on failure  Should Match Regexp    ${output}    \\s*[\\w\\W]*?${rdmuserName}\\s*[\\w\\W]*?

To Verify Adding more than Max User
    [Documentation]    To Verify Adding more than Max User
    : FOR    ${INDEX}    IN RANGE    1
    \    Create User authPriv_noTrapandNotify
    \    Create User noAuthnoPriv_noTrapandNotify
    \    Create User AuthNoPriv_noTrapandNotify



Execute Command And Verify Traps
    [Documentation]    Keyword To Execute Command And Verify Traps
    [arguments]    ${engineId}    ${snmpusername}    ${snmppassword}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}

    Execute Command    touch /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "createUser -e 0x${engineId} ${snmpusername} SHA ${snmppassword} AES ${snmppassword}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} > /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "authuser log ${snmpusername}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "snmpTrapdAddr 90.1.0.222:201" >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "disableAuthorization yes" >> /root/Desktop/SNMP/snmptrapd.conf
    ${command}=    Catenate    snmptrapd -f -C -c /root/Desktop/SNMP/snmptrapd.conf -Lf /root/Desktop/SNMP/${snmpusername}.log
    Start Command    ${command}
    #trigger the log commnd
    Sleep    3sec
    Open Connection And Log In   ${APPLIANCE_IP}
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMP Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    Sleep    2Secs
    ${outputOut}=     Execute Command    ${Pcmd}
    Sleep    2Secs
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${outputOut}=     Execute Command    ${Pcmd}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}
    #Sleep    2Sec
    ${ecmd}=    Catenate    cat /root/Desktop/SNMP/${snmpusername}.log
    ${out}=    Execute Command   ${ecmd}
    log to console    ${out}
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep    4sec
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    service snmptrapd start
    Execute Command    service snmpd start


Execute Command And Verify Traps AuthNoPriv
    [Documentation]    Keyword To Execute Command And Verify Traps AuthNoPriv
    [arguments]    ${engineId}    ${snmpusername}    ${snmppassword}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}

    Execute Command    touch /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "createUser -e 0x${engineId} ${snmpusername} SHA ${snmppassword}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} > /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "authuser log ${snmpusername}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "snmpTrapdAddr 90.1.0.222:201" >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "disableAuthorization yes" >> /root/Desktop/SNMP/snmptrapd.conf
    ${command}=    Catenate    snmptrapd -f -C -c /root/Desktop/SNMP/snmptrapd.conf -Lf /root/Desktop/SNMP/${snmpusername}.log
    Start Command    ${command}
    #trigger the log commnd
    Sleep    3sec
    Open Connection And Log In       ${APPLIANCE_IP}
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMP Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    Sleep    2Secs
    ${outputOut}=     Execute Command    ${Pcmd}
    Sleep    2Secs
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${outputOut}=     Execute Command    ${Pcmd}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}
    #Sleep    2Sec
    ${ecmd}=    Catenate    cat /root/Desktop/SNMP/${snmpusername}.log
    ${out}=    Execute Command   ${ecmd}
    log to console    ${out}
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep    4sec
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    service snmptrapd start
    Execute Command    service snmpd start


Execute Command And Verify Traps NoAuthNoPriv
    [Documentation]    Keyword To Execute Command And Verify Traps NoAuthNoPriv
    [arguments]    ${engineId}    ${snmpusername}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}

    Execute Command    touch /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "createUser -e 0x${engineId} ${snmpusername}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} > /root/Desktop/SNMP/snmptrapd.conf
    ${cmd}=    Catenate    "authuser log ${snmpusername}"
    Log To Console    ${cmd}
    Execute Command    echo ${cmd} >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "snmpTrapdAddr 90.1.0.222:201" >> /root/Desktop/SNMP/snmptrapd.conf
    Execute Command    echo "disableAuthorization yes" >> /root/Desktop/SNMP/snmptrapd.conf
    ${command}=    Catenate    snmptrapd -f -C -c /root/Desktop/SNMP/snmptrapd.conf -Lf /root/Desktop/SNMP/${snmpusername}.log
    Start Command    ${command}
    #trigger the log commnd
    Sleep    3sec
    Open Connection And Log In       ${APPLIANCE_IP}
    ${OID}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${SNMP_PORT}  ${PotashIP1_IPV6}
    ${cmdSet}=    Get SNMP Set Command    OneView    ${Random_Password}     ${PotashIP1_IPV6}
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 1
    Sleep    2Secs
    ${outputOut}=     Execute Command    ${Pcmd}
    Sleep    2Secs
    ${Pcmd}=    catenate    ${cmdSet}    IF-MIB::ifAdminStatus.${OID} i 2
    ${outputOut}=     Execute Command    ${Pcmd}
    Open Connection And Log In     ${TRAP_HOST}   ${TRAP_USERNAME}   ${TRAP_PASSWORD}
    #Sleep    2Sec
    ${ecmd}=    Catenate    cat /root/Desktop/SNMP/${snmpusername}.log
    ${out}=    Execute Command   ${ecmd}
    log to console    ${out}
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep    4sec
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    pgrep snmptrapd | xargs kill -9
    sleep     2
    Execute Command    service snmptrapd start
    Execute Command    service snmpd start


To verify the persistence
    [Documentation]    Keyword To verify the persistence
    Open Connection And Log In      ${APPLIANCE_IP}
    Create User authPriv_noTrapandNotify
    Create User noAuthnoPriv_noTrapandNotify
    Create User AuthNoPriv_noTrapandNotify

