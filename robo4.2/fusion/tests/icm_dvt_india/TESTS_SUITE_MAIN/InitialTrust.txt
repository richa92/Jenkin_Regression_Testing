*** Settings ***
Documentation       This Module for Initial Trust Feature Testing in Potash
Resource           ../../../Resources/api/fusion_api_resource.txt
Library       SnmpLibrary

*** Variables ***

*** keywords ***

Initial Trust verification of Potash with Fingerprint Algorithm SHA256 and Host key algorithm as SSH-RSA
    [Documentation]  Initial Trust verification of Potash with Fingerprint Algorithm SHA256 and Host key algorithm as SSH-RSA

    Open Connection And Log In      ${APPLIANCE_IP}

    ${EM_SN}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o i
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o t

    ${write_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"WriteCanmicBlocks", "List": [ {"Block": '53', "Format": "Base64", "Data": "'AQ=='"} ]}'
    ${write_output}=   Execute Command   ${write_cmd}
    Should Contain  ${write_output}  Success
    Sleep         5secs

    ${read_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['54']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${canmic_block}=   Execute Command   ${read_cmd}
    @{output}=    Split String  ${canmic_block}  |
    ${res}=  Strip String  @{output}[0]  characters=00000000
    ${canmic_dump}=    Strip String  ${res}

    Should Match Regexp     ${canmic_dump}  01 [0-9A-Fa-f ]{11}
    ${ReadFingerprintHash}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['57']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash}=   Execute Command   ${ReadFingerprintHash}

    ${ReadFingerprintHash_ECDSA}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['58']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash_ECDSA}=   Execute Command   ${ReadFingerprintHash_ECDSA}
    Close Connection


    ${SshKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA256 -f /data/etc/ssh/ssh_host_rsa_key.pub
    ${ECDSAKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA256 -f /data/etc/ssh/ssh_host_ecdsa_key.pub
    Open Connection And Log In      ${APPLIANCE_IP}  Administrator  hpvse123
    Sleep         4secs
    Read Until    >
    Write  console-view
    Write  kill interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Read Until    console-view>
    Write  connect interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Write  \r\n
    Sleep         5secs
    Write  root
    Read Until  Password:
    Write  UnoVista
    Read Until  \#
    #Write  help
    #${output}=  Read Until  \#
    Write  ${SshKeyGenCmd}
    ${Ssh_output}=  Read Until  \#

    Write  ${ECDSAKeyGenCmd}
    ${ECDSA_output}=  Read Until  \#
    Write  exit
    Close Connection

    ${Ssh_key}=  Split String  ${Ssh_output}  SHA256:
    ${ECDSA_key}=  Split String  ${ECDSA_output}  SHA256:

    Open Connection And Log In      ${APPLIANCE_IP}
    ${Ssh_ConvertKeyToBase64}=  Set variable  echo "${Ssh_key[1]}" | xxd -r -p | base64
    ${Ssh_Fingerprint}=  Execute Command   ${Ssh_ConvertKeyToBase64}
    ${FingerprintKeyGen}=  Strip String  ${Ssh_Fingerprint}  characters='='  mode=right
    Should Contain  ${FingerprintHash}  ${FingerprintKeyGen}

    ${ECDSA_ConvertKeyToBase64}=  Set variable  echo "${ECDSA_key[1]}" | xxd -r -p | base64
    ${ECDSA_Fingerprint}=  Execute Command   ${ECDSA_ConvertKeyToBase64}
    ${ECDSA_FingerprintKeyGen}=  Strip String  ${ECDSA_Fingerprint}  characters='='  mode=right
    Should Contain  ${FingerprintHash_ECDSA}  ${ECDSA_FingerprintKeyGen}
    Close All Connections



Initial Trust verification of Potash with Fingerprint Algorithm SHA384 and Host key algorithm as SSH-RSA and ECDSA
    [Documentation]  Initial Trust verification of Potash with Fingerprint Algorithm SHA384 and Host key algorithm as SSH-RSA and ECDSA.

    Open Connection And Log In      ${APPLIANCE_IP}

    ${EM_SN}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o i
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o t

    ${write_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"WriteCanmicBlocks", "List": [ {"Block": '53', "Format": "Base64", "Data": "'Ag=='"} ]}'
    ${write_output}=   Execute Command   ${write_cmd}
    Should Contain  ${write_output}  Success
    Sleep         5secs

    ${read_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['54']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${canmic_block}=   Execute Command   ${read_cmd}
    @{output}=    Split String  ${canmic_block}  |
    ${res}=  Strip String  @{output}[0]  characters=00000000
    ${canmic_dump}=    Strip String  ${res}


    Should Match Regexp     ${canmic_dump}  02 [0-9A-Fa-f ]{11}
    ${ReadFingerprintHash}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['57']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash}=   Execute Command   ${ReadFingerprintHash}

    ${ReadFingerprintHash_ECDSA}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['58']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash_ECDSA}=   Execute Command   ${ReadFingerprintHash_ECDSA}
    Close Connection

    ${SshKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA384 -f /data/etc/ssh/ssh_host_rsa_key.pub
    ${ECDSAKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA384 -f /data/etc/ssh/ssh_host_ecdsa_key.pub
    Open Connection And Log In      ${APPLIANCE_IP}  Administrator  hpvse123
    Sleep         4secs
    Read Until    >
    Write  console-view
    Write  kill interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Read Until    console-view>
    Write  connect interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Write  \r\n
    Sleep         5secs
    Write  root
    Read Until  Password:
    Write  UnoVista
    Read Until  \#
    #Write  help
    #${output}=  Read Until  \#
    Write  ${SshKeyGenCmd}
    ${Ssh_output}=  Read Until  \#

    Write  ${ECDSAKeyGenCmd}
    ${ECDSA_output}=  Read Until  \#
    Write  exit
    Close Connection

    ${Ssh_key}=  Split String  ${Ssh_output}  SHA384:
    ${ECDSA_key}=  Split String  ${ECDSA_output}  SHA384:

    Open Connection And Log In      ${APPLIANCE_IP}
    ${Ssh_ConvertKeyToBase64}=  Set variable  echo "${Ssh_key[1]}" | xxd -r -p | base64
    ${Ssh_Fingerprint}=  Execute Command   ${Ssh_ConvertKeyToBase64}
    ${FingerprintKeyGen}=  Strip String  ${Ssh_Fingerprint}  characters='='  mode=right
    Should Contain  ${FingerprintHash}  ${FingerprintKeyGen}

    ${ECDSA_ConvertKeyToBase64}=  Set variable  echo "${ECDSA_key[1]}" | xxd -r -p | base64
    ${ECDSA_Fingerprint}=  Execute Command   ${ECDSA_ConvertKeyToBase64}
    ${ECDSA_FingerprintKeyGen}=  Strip String  ${ECDSA_Fingerprint}  characters='='  mode=right
    Should Contain  ${FingerprintHash_ECDSA}  ${ECDSA_FingerprintKeyGen}
    Close All Connections



Initial Trust verification of Potash with Fingerprint Algorithm SHA512 and Host key algorithm as SSH-RSA and ECDSA
    [Documentation]  Initial Trust verification of Potash with Fingerprint Algorithm SHA512 and Host key algorithm as SSH-RSA and ECDSA.

    Open Connection And Log In      ${APPLIANCE_IP}

    ${EM_SN}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o i
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o t

    ${write_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"WriteCanmicBlocks", "List": [ {"Block": '53', "Format": "Base64", "Data": "'BA=='"} ]}'
    ${write_output}=   Execute Command   ${write_cmd}
    Should Contain  ${write_output}  Success
    Sleep         5secs

    ${read_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['54']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${canmic_block}=   Execute Command   ${read_cmd}
    @{output}=    Split String  ${canmic_block}  |
    ${res}=  Strip String  @{output}[0]  characters=00000000
    ${canmic_dump}=    Strip String  ${res}
    #Log To Console  ${canmic_dump}
    #${canmic_dump}=  Set Variable  '01 0b 00 00 0c'
    Should Match Regexp     ${canmic_dump}  04 [0-9A-Fa-f ]{11}
    ${ReadFingerprintHash}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['57']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash}=   Execute Command   ${ReadFingerprintHash}

    ${ReadFingerprintHash_ECDSA}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['58']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash_ECDSA}=   Execute Command   ${ReadFingerprintHash_ECDSA}
    Close Connection

    ${SshKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA512 -f /data/etc/ssh/ssh_host_rsa_key.pub
    ${ECDSAKeyGenCmd}=  Set Variable  ssh-keygen -l -w -E SHA512 -f /data/etc/ssh/ssh_host_ecdsa_key.pub
    Open Connection And Log In      ${APPLIANCE_IP}  Administrator  hpvse123
    Sleep         4secs
    Read Until    >
    Write  console-view
    Write  kill interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Read Until    console-view>
    Write  connect interconnect ${Enclosure1} ${Enc1_Potash_Module_Bay_No}
    Sleep         5secs
    Write  \r\n
    Sleep         5secs
    Write  root
    Read Until  Password:
    Write  UnoVista
    Read Until  \#
    #Write  help
    #${output}=  Read Until  \#
    Write  ${SshKeyGenCmd}
    ${Ssh_output}=  Read Until  \#

    Write  ${ECDSAKeyGenCmd}
    ${ECDSA_output}=  Read Until  \#
    Write  exit
    Close Connection

    ${Ssh_key}=  Split String  ${Ssh_output}  SHA512:
    ${ECDSA_key}=  Split String  ${ECDSA_output}  SHA512:

    Open Connection And Log In      ${APPLIANCE_IP}
    ${Ssh_ConvertKeyToBase64}=  Set variable  echo "${Ssh_key[1]}" | xxd -r -p | base64
    ${Ssh_Fingerprint}=  Execute Command   ${Ssh_ConvertKeyToBase64}
    ${Fingerprint}=  Split String  ${Ssh_Fingerprint}  \n
    ${ssh_fp}=  catenate  SEPARATOR=  ${Fingerprint[0].strip()}  ${Fingerprint[1].strip()}
    ${FingerprintKeyGen}=  Strip String  ${ssh_fp}  characters='='  mode=right
    Should Contain  ${FingerprintHash}  ${FingerprintKeyGen}

    ${ECDSA_ConvertKeyToBase64}=  Set variable  echo "${ECDSA_key[1]}" | xxd -r -p | base64
    ${ECDSA_Fingerprint}=  Execute Command   ${ECDSA_ConvertKeyToBase64}
    ${Fingerprint_ECDSA}=  Split String  ${ECDSA_Fingerprint}  \n
    ${ssh_fp_ECDSA}=  catenate  SEPARATOR=  ${Fingerprint_ECDSA[0].strip()}  ${Fingerprint_ECDSA[1].strip()}
    ${ECDSA_FingerprintKeyGen}=  Strip String  ${ssh_fp_ECDSA}  characters='='  mode=right
    Should Contain  ${FingerprintHash_ECDSA}  ${ECDSA_FingerprintKeyGen}
    Close All Connections



Initial Trust verification of Potash with unsupported Fingerprint Algorithm and Host key algorithm as SSH-RSA and ECDSA
    [Documentation]  Initial Trust verification of Potash with unsupported Fingerprint Algorithm and Host key algorithm as SSH-RSA and ECDSA.

    Open Connection And Log In      ${APPLIANCE_IP}

    ${EM_SN}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o i
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enclosure1} -o t

    ${write_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"WriteCanmicBlocks", "List": [ {"Block": '53', "Format": "Base64", "Data": "'BQ=='"} ]}'
    ${write_output}=   Execute Command   ${write_cmd}
    Should Contain  ${write_output}  Success
    Sleep         5secs
    ${read_cmd}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['54']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${canmic_block}=   Execute Command   ${read_cmd}
    @{output}=    Split String  ${canmic_block}  |
    ${res}=  Strip String  @{output}[0]  characters=00000000
    ${canmic_dump}=    Strip String  ${res}

    Should Match Regexp     ${canmic_dump}  00 [0-9A-Fa-f ]{11}
    ${ReadFingerprintHash}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['57']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash}=   Execute Command   ${ReadFingerprintHash}
    Should Match Regexp     ${FingerprintHash}  A*==

    ${ReadFingerprintHash_ECDSA}=    catenate    curl --tlsv1 --fail -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://${EM_SN}%bond0/rest/v1/InterconnectManager/${Enc1_Potash_Module_Bay_No} -d '{"Action":"ReadCanmicBlocks", "List":['58']}' | grep } | python -m json.tool | grep Data | cut -d "\\"" -f 4
    ${FingerprintHash_ECDSA}=   Execute Command   ${ReadFingerprintHash_ECDSA}
    Should Match Regexp     ${FingerprintHash_ECDSA}    A*==
    Close Connection
