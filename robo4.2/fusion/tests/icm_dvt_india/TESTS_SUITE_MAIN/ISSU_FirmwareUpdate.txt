*** Settings ***
Documentation       This module for testing ISSU Firmware Upgrade feature
Resource           ../../../Resources/api/fusion_api_resource.txt
Library           RoboGalaxyLibrary
Library           FusionLibrary

Library             BuiltIn
Library             Collections
Library             XML
Library             String
Library             Dialogs


*** Variables ***

*** keywords ***


#############################################################################
#   POTASH ICM Firmware Update - Initial Steps before firmware update
#############################################################################
POTASH ICM Firmware Update - Initial Steps before firmware update
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}   ${FirmwareUpdate_URL}  ${FirmwareUpdate_Package}

    Log    ${PotashIP1}
    Log    ${PotashIP2}


    ########################################################################################
    # scp hpe_icm_fv1-1.1.0-12-2017-01-03.pkg and package.json to
    # Both Potash Modules (Master and Subordinate)
    ########################################################################################
    #Open Connection And Log In      ${APPLIANCE_IP}
    Open Connection And Log In      90.1.0.201     root   iso*help

    #################################################################################
    #  ISSU Mode Compatible check
    #################################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.9.0
    ${output}=     Execute Command    ${cmd}
    ${compatible_check}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.9.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.9.0
    ${output}=     Execute Command    ${cmd}
    ${compatible_check}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.9.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check}

    #################################################################################
    #  Set ISSU Mode of Master Potash to Full Compatable.
    #  Subordinate should change automatically
    #################################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.9.0 i 1
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check}

    #################################################################################
    #  ISSU Mode Compatible check
    #################################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.9.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check}

    #Getting ISSU mode of the switches to Fully-compatible mode/Sub-ordinate
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.9.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check}


    ################################################################################
    # Keeping the switches in Maintenance mode. The expectation is that when
    # we change on MASTER switch then STAND_BY should change automatically
    ################################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0
    ${output}=     Execute Command    ${cmd}
    ${compatible_check1.1_integer2}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.1.0 = INTEGER: 2
    ${compatible_check1.2_integer2}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.2.0 = INTEGER: 2
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check1.1_integer2}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check1.1_integer2}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.2.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check1.2_integer2}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.2.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check1.2_integer2}

    #################################################################################
    # Set Master Potash module to Maintenance mode. Subordinate Potash Module
    # should change automatically
    #################################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP1}

    ${cmd1}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0 i 1

    #${cmd}=  set variable   snmpset -v3 -l authPriv -u OneView -A f9qFh7Ece5VHUOzN -a SHA -x AES -X f9qFh7Ece5VHUOzN 90.1.0.179 1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0 i 1
    ${output}=     Execute Command    ${cmd1}
    ${set_compatible_check_1.1_integer1}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.1.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${set_compatible_check_1.1_integer1}

    ###############################################################################
    # Check switch moved to Maintenance mode
    ###############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd1}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0
    ${cmd2}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.2.0

    ${output}=     Execute Command    ${cmd1}
    ${compatible_check_1.1_integer1}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.1.0 = INTEGER: 1
    run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.1_integer1}

    ${output}=     Execute Command    ${cmd2}
    ${compatible_check_1.2_integer1}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.2.0 = INTEGER: 1
    run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.2_integer1}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd1}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.1.0
    ${cmd2}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.2.0
    ${output}=     Execute Command    ${cmd1}
    run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.1_integer1}

    ${output}=     Execute Command    ${cmd2}
    run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.2_integer1}

    ${cmd_output}=  Download_ICM_Firmware  ${linuxip}  ${linuxuser}  ${linuxpassword}  ${FirmwareUpdate_URL}  ${FirmwareUpdate_Package}  ${PotashIP1}  ${PotashIP2}  ${Random_Password}

    #################################################################################
    # Setting the image path for master switch
    ################################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    .1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.3.0 s "/upload/${FirmwareUpdate_Package}"
    ${output}=     Execute Command    ${cmd}
    ${package_path}    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.3.0 = STRING: "/upload/${FirmwareUpdate_Package}"
    #run keyword and continue on failure  Should Contain    ${output}    ${package_path}

    Sleep  2 minutes

    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    .1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.3.0 s "/upload/${FirmwareUpdate_Package}"
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain    ${output}    ${package_path}

    Sleep  2 minutes

    ##############################################################################
    # Verifying  the image path for master/subordinate switch
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    .1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.3.0
    ${output}=     Execute Command    ${cmd}
    #${compatible_check_1.3_null}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.3.0 = ""
    #run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.3_null}


    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    .1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.3.0
    ${output}=     Execute Command    ${cmd}
    # run keyword and continue on failure  Should Contain    ${output}    ${compatible_check_1.3_null}

    #############################################################################
    # Findout master/switch using FS_RM mib.Master
    # switch should return 1 and whereas stand-by should return 2
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}
    ${mib_check}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.4.0 = INTEGER: 1
    run keyword and continue on failure  Should Contain    ${output}    ${mib_check}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}
    ${mib_check_standby}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.4.0 = INTEGER: 2
    run keyword and continue on failure  Should Contain    ${output}    ${mib_check_standby}


    ##############################################################################
    # Loading image on stand-by
    ##############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.10.0
    ${output}=     Execute Command    ${cmd}
    #${image_standby}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.10.0 = INTEGER: 0
    #run keyword and continue on failure  Should Contain    ${output}    ${image_standby}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.10.0
    ${output}=     Execute Command    ${cmd}
    #${mib_check_standby}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.10.0 = INTEGER: 0
    #run keyword and continue on failure  Should Contain    ${output}    ${mib_check_standby}
    #Sleep  2 minutes


#############################################################################
#   POTASH ICM Firmware Update - update subordinate
#############################################################################
POTASH ICM Firmware Update - update subordinate
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}

    ##############################################################################
    #set SNMP .set image for stand-by module
    ##############################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.10.0 i 1
    ${output}=     Execute Command    ${cmd}
    ${set_image}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.10.0 = INTEGER: 1
    run keyword and continue on failure  Should Contain    ${output}    ${set_image}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.11.0
    ${output}=     Execute Command    ${cmd}
    Sleep  10 minutes


    ############################################################################
    #Check firmware version on Stand-by and Master
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain     ${output}   ${firmware_version}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}


    #############################################################################
    # Check stand-by switch joins in DUS as stand-by only.
    # Master switch should return 1 and whereas stand-by should return 2
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}



#############################################################################
#   FC/FCOE - Check and update the potash module on latest firmware
#############################################################################
POTASH ICM Firmware Update - update master
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}

    Sleep  2 minutes
    ############################################################################
    # Force switchover master
    ############################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.8.0 i 1
    ${output}=     Execute Command    ${cmd}
    ${switchover_master}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.8.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${switchover_master}

    Sleep  3 minutes
    #Wait For 60 Sec

    ##########################################################################
    #Checking status of Force Switchover on master switch
    ###########################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.1.99.1.8.0
    ${output}=     Execute Command    ${cmd}
    ${switchover_status}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.8.0 = INTEGER: 2
    #run keyword and continue on failure  Should Contain    ${output}    ${switchover_status}

    ##########################################################################
    # Check the switch roles are swapped
    # Master switch should return 1 and whereas stand-by should return 2
    ##########################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}
    ${switchover_roles}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.4.0 = INTEGER: 2
    #Should Contain    ${output}    ${switchover_roles}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}
    ${switchover_roles1}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.4.0 = INTEGER: 1
    #Should Contain    ${output}    ${switchover_roles1}

    ############################################################################
    # Loading image on Master switch
    ############################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.10.0 i 1
    ${output}=     Execute Command    ${cmd}
    ${load_image}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.10.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${load_image}

    Sleep  10 minutes

    #################################################################################
    # Checking ISSU command status Master switch should update
    # the firmware and status should return success
    ################################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.11.0
    ${output}=     Execute Command    ${cmd}
    ${update_firmware}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.11.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${update_firmware}
    Sleep  3 minutes

    ################################################################################
    # Check firmware version on Stand-by and Master
    ###############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain     ${output}   ${firmware_version}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}   1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}
    #run keyword and continue on failure  Should Contain     ${output}   ${firmware_version}

    ################################################################################
    #  Force switch over again so that PotashIP1 is again master
    ################################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.8.0 i 1
    ${output}=     Execute Command    ${cmd}
    ${switchover_master}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.1.99.1.8.0 = INTEGER: 1
    #run keyword and continue on failure  Should Contain    ${output}    ${switchover_master}


###################################################################################
#   ISSU:: Verify the ISSU firmware upgrade/downgrade with tagged Ethernet traffic
###################################################################################
ISSU:: Verify the ISSU firmware upgrade/downgrade with tagged Ethernet traffic
    [Documentation]    Verify the ISSU firmware upgrade/downgrade with tagged Ethernet traffic
    [Arguments]       ${PotashIP1}    ${PotashIP2}   ${FirmwareUpdate_URL}  ${FirmwareUpdate_Package}  ${outputfile}

    POTASH ICM Firmware Update - Initial Steps before firmware update     ${PotashIP1}   ${PotashIP2}   ${FirmwareUpdate_URL}  ${FirmwareUpdate_Package}

    log to console    Initiate PING MLAGIP - Before firmware upgrade subordinate potash ICM.
    ${cmd}=   catenate  start /b "" ping -t  ${MLAGTEAMEDIP}  >  ${outputfile}
    Log  ${cmd}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}

    POTASH ICM Firmware Update - update subordinate  ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING MLAGIP results - since subordinate ICM completed firmware upgrade.

    Sleep  2 minutes
    POTASH ICM Firmware Update - update master    ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING MLAGIP results - since master potash ICM completed firmware upgrade.
    ${cmd} =   catenate   taskkill /IM ping.exe /F & type  ${outputfile}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}

    run keyword and continue on failure  Should NotContain  ${cmd_output}  Destination host unreachable.
    run keyword and continue on failure  Should NotContain  ${cmd_output}  Request timed out.
    ${pingoutput}=   catenate   Reply from  ${MLAGTEAMEDIP}: bytes=
    run keyword and continue on failure  Should Contain   ${cmd_output}  ${pingoutput}


###################################################################################
#   ISSU:: Verify the ISSU firmware upgrade/downgrade with tagged Ethernet traffic
###################################################################################
ISSU:: Verify the ISSU firmware upgrade/downgrade with untagged Ethernet traffic
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}  ${FirmwareUpdate_Package}

    POTASH ICM Firmware Update - Initial Steps before firmware update     ${PotashIP1}   ${PotashIP2}  ${FirmwareUpdate_Package}

    log to console    Initiate PING MLAGIP - Before firmware upgrade subordinate potash ICM.

    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}firmwareupgrade_with_untaggedethernet.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    POTASH ICM Firmware Update - update subordinate  ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING MLAGIP results - since subordinate ICM completed firmware upgrade.

    Sleep  2 minutes
    #POTASH ICM Firmware Update - update master    ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING MLAGIP results - since master potash ICM completed firmware upgrade.
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}


###################################################################################
#   Verify the failure of MLAG link during the ISSU case B firmware update
###################################################################################
Verify the failure of MLAG link during the ISSU case B firmware update
    [Documentation]    Verify the failure of MLAG link during the ISSU case B firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}  ${FirmwareUpdate_Package}  ${MLAG_Uplink_Port1}  ${MLAG_Uplink_Port2}

    ${OID1}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${MLAG_Uplink_Port1}  ${PotashIP1}
    ${OID2}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${MLAG_Uplink_Port2}  ${PotashIP1}

    POTASH ICM Firmware Update - Initial Steps before firmware update     ${PotashIP1}   ${PotashIP2}  ${FirmwareUpdate_Package}

    log to console    Initiate PING MLAGIP - Before firmware updrade subordinate ICM, and MLAG uplink corresponding to subordinate ICM just disabled.
    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}test1_disable_mlag_uplink_during_firmware_upgrade.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    # Disable the MLAG uplink on which firmware update is happening.
    Open Connection And Log In      ${APPLIANCE_IP}
    ${snmp_set_cmd}=    Get SNMPSET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 2
    ${output}=     Execute Command    ${cmd}

    POTASH ICM Firmware Update - update subordinate  ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING results
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}

    # Enable the MLAG uplink port.
    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 1
    ${output}=     Execute Command    ${cmd}

    Sleep  10 minutes

    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}test2_disable_mlag_uplink_during_firmware_upgrade.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    # Disable the MLAG uplink port on the other module where the traffic shift will happen.
    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 2
    ${output}=     Execute Command    ${cmd}

    POTASH ICM Firmware Update - update master    ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING results after firmware update of MASTER
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}

    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 1
    ${output}=     Execute Command    ${cmd}


###################################################################################
#   Disable one of the uplink port which is part of MLAG and verify functionality
###################################################################################
Disable one of the uplink port which is part of MLAG and verify functionality
    [Documentation]    Disable one of the uplink port which is part of MLAG and verify functionality
    [Arguments]        ${PotashIP1}  ${MLAG_Uplink_Port1}   ${outputfile}
    Log    ${outputfile}
    ${OID1}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${MLAG_Uplink_Port1}  ${PotashIP1}

    log to console    Initiate PING - Before disabling one of the MLAG UPLINK port

    ${cmd}=   catenate  start /b "" ping -t  ${MLAGTEAMEDIP}  >  ${outputfile}
    Log  ${cmd}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}

    # Disable one of the MLAG uplinks - subordinate
    Open Connection And Log In      ${APPLIANCE_IP}
    ${snmp_set_cmd}=    Get SNMPSET Command    OneView    ${Random_Password}     ${PotashIP1}

    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID1} i 2
    ${output}=     Execute Command    ${cmd}

    Sleep  2 minutes
    log to console    Collect continuous PING results

    ${cmd} =   catenate   taskkill /IM ping.exe /F & type  ${outputfile}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}

    Log   ${cmd_output}

    Should NotContain  ${cmd_output}  Destination host unreachable.
    Should NotContain  ${cmd_output}  Request timed out.
    ${pingoutput}=   catenate   Reply from  ${MLAGTEAMEDIP}: bytes=
    Log  ${pingoutput}
    Should Contain   ${cmd_output}  ${pingoutput}

    # Enable the Mlag uplink port.
    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID1} i 1
    ${output}=     Execute Command    ${cmd}



###################################################################################
#   Disable both the uplink ports which are part of MLAG and verify functionality
###################################################################################
Disable both the uplink ports which are part of MLAG and verify functionality
    [Documentation]    Disable both the uplink ports which are part of MLAG and verify functionality
    [Arguments]        ${PotashIP1}  ${MLAG_Uplink_Port1}   ${MLAG_Uplink_Port2}  ${outputfile}

    ${OID1}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${MLAG_Uplink_Port1}  ${PotashIP1}
    ${OID2}=    Get OID for Interface     ${APPLIANCE_IP}  ${Random_Password}  ${MLAG_Uplink_Port2}  ${PotashIP1}

    log to console    Initiate PING - before disabling mlag uplink
    ${cmd}=   catenate  start /b "" ping -t  ${MLAGTEAMEDIP}  >  ${outputfile}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}


    # Disable both MLAG uplink ports
    Open Connection And Log In      ${APPLIANCE_IP}
    ${snmp_set_cmd}=    Get SNMPSET Command    OneView    ${Random_Password}     ${PotashIP1}

    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID1} i 2
    ${output}=     Execute Command    ${cmd}
    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 2
    ${output}=     Execute Command    ${cmd}
    Sleep  2 minutes

    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID1} i 1
    ${output}=     Execute Command    ${cmd}

    ${cmd}=    catenate    ${snmp_set_cmd}    IF-MIB::ifAdminStatus.${OID2} i 1
    ${output}=     Execute Command    ${cmd}

    log to console    Collect continuous PING results
    ${cmd} =   catenate   taskkill /IM ping.exe /F & type  ${outputfile}
    ${cmd_output}=   serverlogin  ${MLAGSERVERIP}  ${MLAGSERVERUSER}  ${MLAGSERVERPASSWORD}  ${MLAGSERVERDOMAINPWD}  ${cmd}
    Log     ${cmd_output}

    ${pingoutput}=   catenate   Reply from  ${MLAGTEAMEDIP}: bytes=
    Log  ${pingoutput}
    Should Contain   ${cmd_output}  ${pingoutput}


###################################################################################
#   Continuous Ping teamed MLAGIP - Do a ICM reset and verify functionality
###################################################################################
Continuous Ping teamed MLAGIP - Do a ICM reset and verify functionality
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}

    log to console    Initiate PING MLAGIP - Before ICM Reset
    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}test7_icm_reset.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}


    Open Connection And Log In      ${APPLIANCE_IP}
    ${output}=    FCoE.ISS Reset with SNMP Command    OneView    ${Random_Password}    ${potash_IP1}

    log to console    Collect continuous PING MLAGIP results - potash ICM Reset completed.
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}

    # Force switchover - to make sure master/subordinate topology remains intact after execution of test case.
    ${cmd}=    Get SNMPSET Command   OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.8.0 i 1
    ${output}=     Execute Command    ${cmd}



###################################################################################
#   Continuous Ping teamed MLAGIP - Do a EFuse reset and verify functionality
###################################################################################
Continuous Ping teamed MLAGIP - Do a Poweroff/on ICM and verify functionality
    [Documentation]    firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}

    log to console    Initiate PING MLAGIP - Before Poweroff/on Potash ICM

    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}test8_poweroffon_icm2.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    Power off/on interconnect    ${APPLIANCE_IP}  ${Random_Password}  ${INTERCONNECT1}  ${PotashIP2}

    log to console    potash first ICM poweroff/on completed. Going to initiate poweroff/on second ICM.
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}

    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}test9_poweroffon_icm1.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    Power off/on interconnect    ${APPLIANCE_IP}  ${Random_Password}  ${INTERCONNECT2}  ${PotashIP1}

    log to console    Collect continuous PING MLAGIP results - potash ICM poweroff/on completed.
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}





###################################################################################
#   Set Firmware Version Suite Variable
###################################################################################
Set Firmware Version Suite Variable
    [Documentation]    Keyword to Set Firmware Version Suite Variable
    [Arguments]       ${FirmwareUpgrade_Package}  ${FirmwareDowngrade_Package}

    ${version}=    Split String  ${FirmwareUpgrade_Package}   -
    ${version_firsthalf}=    Get From List    ${version}    1
    ${version_secondhalf}=    Get From List    ${version}    2
    ${firmwareupgrade_version}=    catenate    ${version_firsthalf}   -   ${version_secondhalf}
    ${firmwareupgrade_version}=    Remove String    ${firmwareupgrade_version}    ${space}
    Log   ${version_firsthalf}
    Log   ${version_secondhalf}
    Log   ${firmwareupgrade_version}
    Set Suite Variable    ${firmwareupgrade_version}


    ${version}=    Split String  ${FirmwareDowngrade_Package}   -
    ${version_firsthalf}=    Get From List    ${version}    1
    ${version_secondhalf}=    Get From List    ${version}    2
    ${firmwaredowngrade_version}=    catenate    ${version_firsthalf}   -   ${version_secondhalf}
    ${firmwaredowngrade_version}=    Remove String    ${firmwaredowngrade_version}    ${space}
    Log   ${version_firsthalf}
    Log   ${version_secondhalf}
    Log   ${firmwaredowngrade_version}
    Set Suite Variable    ${firmwaredowngrade_version}




#############################################################################
#   Firmware Upgrade subordinate - Initiate Reset Master ICM in Parallel
#############################################################################
Firmware Upgrade subordinate - Initiate Reset Master ICM in Parallel
    [Documentation]    Firmware Upgrade subordinate - Initiate Reset Master ICM in Parallel
    [Arguments]       ${PotashIP1}    ${PotashIP2}

    ##############################################################################
    #set SNMP .set image for stand-by module
    ##############################################################################
    ${cmd}=    Get SNMP Set Command   OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.10.0 i 1
    ${output}=     Execute Command    ${cmd}
    ${set_image}=    set variable    SNMPv2-SMI::enterprises.11.5.7.5.8.2.2.103.1.10.0 = INTEGER: 1
    run keyword and continue on failure  Should Contain    ${output}    ${set_image}

    ##############################################################################
    #Reset Master ICM
    ##############################################################################
    Open Connection And Log In      ${APPLIANCE_IP}
    ${output}=    FCoE.ISS Reset with SNMP Command    OneView    ${Random_Password}    ${potash_IP1}


    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.2.2.103.1.11.0
    ${output}=     Execute Command    ${cmd}
    Sleep  5 minutes

    ############################################################################
    #Check firmware version on Stand-by and Master
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}
    run keyword and continue on failure  Should Contain     ${output}   ${firmware_version}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.81.1.3.0
    ${output}=     Execute Command    ${cmd}


    #############################################################################
    # Check stand-by switch joins in DUS as stand-by only.
    # Master switch should return 1 and whereas stand-by should return 2
    #############################################################################
    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP1}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}

    ${cmd}=    Get SNMPGET Command    OneView    ${Random_Password}     ${PotashIP2}
    ${cmd}=    catenate    ${cmd}    1.3.6.1.4.1.11.5.7.5.8.1.99.1.4.0
    ${output}=     Execute Command    ${cmd}

###################################################################################
#   Verify the Module reset during the ISSU case B firmware update
###################################################################################
Verify the Module reset during the ISSU case B firmware update
    [Documentation]    Verify the Module reset during the ISSU case B firmware update
    [Arguments]       ${PotashIP1}    ${PotashIP2}  ${FirmwareUpdate_Package}

    POTASH ICM Firmware Update - Initial Steps before firmware update     ${PotashIP1}   ${PotashIP2}  ${FirmwareUpdate_Package}

    log to console    Initiate PING MLAGIP - Before firmware upgrade subordinate potash ICM.

    ${outputfile} =   Set Variable     ${ISSU_RESULTS_FOLDER}firmwareupgrade_with_untaggedethernet.txt
    ${ssh}=   ping_MLAG    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}   ${outputfile}  ${MLAGIP}

    Firmware Upgrade subordinate - Initiate Reset Master ICM in Parallel  ${PotashIP1}   ${PotashIP2}

    log to console    Collect continuous PING MLAGIP results - since subordinate ICM completed firmware upgrade.
    stop_continuous_ping        ${ssh}    ${APPLIANCE_IP}     ${OV_root_usr}    ${OV_root_pwd}

