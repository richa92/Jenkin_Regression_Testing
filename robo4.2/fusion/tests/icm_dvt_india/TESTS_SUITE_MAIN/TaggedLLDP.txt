*** Settings ***
Documentation       This module for testing Tagged LLDP feature in Potash
Resource           ../../../Resources/api/fusion_api_resource.txt
Library            RoboGalaxyLibrary
Library            FusionLibrary

Library             BuiltIn
Library             Collections
Library             XML
Library             String
Library             Dialogs


*** Variables ***

*** keywords ***

############################################################################
# Updating LIG for Tagged LLDP
#############################################################################
Update LIG Tagged LLDP
    [Documentation]    Keyword to update LIG for Tagged LLDP feature testing and verifying its functionality.
    [Arguments]   ${lig_edit}   ${LI}   ${LLDP_OPTION}
    ${lig_resp} =    Fusion Api Get Lig    param=?filter="'name'=='${lig_edit['name']}'"
    Log to console and logfile     ${lig_resp}
    ${lig_uri} =     Get From Dictionary   ${lig_resp['members'][0]}   uri
    Log to console and logfile    ${lig_uri}
    ${body} =  Build LIG body    ${lig_edit}
    Log to Console  ${body}
    ${resp} =    Fusion Api Edit Lig    ${body}    ${lig_uri}
    Log to console and logfile    ${resp}
    Run keyword unless   ${resp['status_code']} == 202     Fail    ${resp['message']}
    ${task} =   Wait For Task   ${resp}    120s    2s
    Log to console and logfile    ${task}
    Log to console and logfile    LIG edited successfully
    Perform an Update From Group    ${LI}
    ${LLDP_STATUS}=  Run Keyword If   '${LLDP_OPTION}'=='disabled'    set variable   False
    ...         ELSE     set variable  True
    Verify TaggedLLDP_OneView_LI  ${LI1_URI}   ${LLDP_STATUS}
    Verify TaggedLLDP_ICM_CLI     ${LLDP_OPTION}

############################################################################
# After Updating in LIG for Tagged LLDP, Perform an Update From Group in LI
#############################################################################
Perform an Update From Group
    [Documentation]    Performing an Update From Group in LI
    [Arguments]        ${LI}
    ${LI_URI} =    Get LI URI    ${LI}
    Set Global Variable    ${LI1_URI}    ${LI_URI}
    ${resp_li}        Fusion Api Update from group    ${LI1_URI}
    Run keyword unless  ${resp_li['status_code']}== 202    Fail    ${resp_li['message']}
    ${task} =   Wait For Task   ${resp_li}  2400s   30s
    Log to console and logfile    \nLI updated from group successfully.

############################################################################
# verify Tagged LLDP option in OneView LI
#############################################################################
Verify TaggedLLDP_OneView_LI
    [Documentation]    Keyword to verify Tagged LLDP option in OneView LI
    [Arguments]     ${LI1_URI}   ${LLDP_STATUS}
    ${getresp}       Fusion Api Get Li   ${LI1_URI}
    Log to console and logfile     ${getresp}
    ${enet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${enet_settings}
    ${ENABLETAGGEDLLDP_VAL} =    Get From Dictionary     ${enet_settings}   enableTaggedLldp
    Should Be Equal As Strings    ${LLDP_STATUS}    ${ENABLETAGGEDLLDP_VAL}
    Log to console and logfile    Tagged LLDP <${LLDP_STATUS}> compared with TaggedLldp in LI <${ENABLETAGGEDLLDP_VAL}>

############################################################################
# Verifying both  TaggedLLDP status and Tagged LLDP address mode in CLI
# The Command to verify inside Interconnect module is  show LLDP
#############################################################################
Verify TaggedLLDP_ICM_CLI
    [Documentation]    Keyword to verify Tagged LLDP option in Potash ICM CLI
    [Arguments]     ${LLDP_OPTION}
    ${out}=    Open Connection And Log In    ${PotashIP1}     ${PotashUserName}    ${Random_Password}
    Log to console and logfile     ${out}
    Write    ${\n}
    Write    show LLDP
    Write    ${\n}
    Read
    ${output}=    Read Until    OneView#
    close connection
    Log to console and logfile   ${output}
    Should Contain     ${output}    ${LLDP_OPTION}
    Run Keyword If   '${LLDP_OPTION}' != 'disabled'    Should Match Regexp     ${output}    LLDP\\s+Tag\\s+Status\\s+:\\s+enabled   Log to console and logfile   "Sucessfully verified in CLI"
