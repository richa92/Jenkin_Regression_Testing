*** Settings ***
Documentation       Run Prerequisites and run the QOS Feature
...
Resource           ../../../Resources/api/fusion_api_resource.txt
Resource           ../TESTS_SUITE_MAIN/FCoE.txt
Resource           QOS.txt

Variables           Data_Variables.py

Library             QOSInternalFunctions.py
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             InternalFunctions


*** Test cases ***

Login
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${Appliance_credentials}

Set Suite Variables before running Automation Suite
    Set Suite Variables before running Automation Suite  ${INTERCONNECT1}   ${INTERCONNECT2}

FC/FCOE :: Get Random Password for Potash
    ${Random_Password}=    Get Random Password for Potash  ${APPLIANCE_IP}  ${OV_root_usr}  ${OV_root_pwd}  ${Enclosure1}    ${Enc1_Potash_Module_Bay_No}
    Set Suite Variable    ${Random_Password}

SSH To Potash CLI
    ${SSH}=    ssh_connect_paramiko    ${PotashIP1}   OneView    ${Random_Password}
    Set Suite Variable     ${SSH}

Test1: To verify that default will be fromQOS and the configuration should be pushed to ETS when QOS configuration mode is passthrough
    Create LIG with QOS Type CustomwithFcoe  ${LIG_QOS}   ${QosPassthrough_lig}
    ${return}=   QOS_CLI_Verification   ${SSH}   ${QosPassthrough_lig}    ${interface}
    Should Contain     ${return}     0

Test2: To verify that default will be fromQOS and the configuration should be pushed to ETS when QOS configuration mode is Without FCOE lossless
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config2}
    ${return}=   QOS_CLI_Verification   ${SSH}   ${QoS_Config2}  ${interface}
    Should Contain     ${return}     0

Test3: To verify that  DCBX-ETS module shall not be allowed to configure or accept  ETS traffic grouping related configurations
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config5}
    ${return}=   QOS_CLI_Verification     ${SSH}   ${QoS_Config5}  ${interface}
    Should Contain     ${return}     0

Test4: To verify that show running config should not display the configuration in the DCBX-ETS and QoS configuration should display show run config
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config3}
    ${return}=   QOS_CLI_Verification   ${SSH}   ${QoS_Config3}  ${interface}
    Should Contain     ${return}     0

Test5: To Verify that debug logs is implemented for tracing and debugging purpose during configuration sync in DCBx ETS and QOS
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config1}
    ${return}=   QOS_CLI_Verification   ${SSH}  ${QoS_Config1}  ${interface}
    Should Contain     ${return}     0

Test6: To Verify that default will be fromQOS and the configuration remains same after uplink enable.
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config1}
    ${return}=   QOS_CLI_Verification     ${SSH}  ${QoS_Config1}  ${interface}
    Should Contain     ${return}     0

Test7: To Verify that default will be fromQOS and the configuration should be pushed to ETS based on QOS configuration when the node is in non willing state.
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config1}
    ${return}=   QOS_CLI_Verification     ${SSH}  ${QoS_Config1}  ${interface}
    Should Contain     ${return}     0

Test8: To verify that DCBx-ETS configuration should not be allowed for logical ports (VPLAG/s-channels)
    Edit Lig with QoS   ${LIG_QOS}   ${QoS_Config2}
    ${return}=   QOS_CLI_Verification      ${SSH}  ${QoS_Config2}  ${interface}
    Should Contain     ${return}     0
