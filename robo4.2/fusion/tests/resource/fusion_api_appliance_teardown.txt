*** Settings ***
Library    RoboGalaxyLibrary
Library    FusionLibrary
Library    OperatingSystem
Library    BuiltIn
Library    Collections
Library    SSHLibrary
Library    String

#Variables			${DATA}

*** Variables ***
${APPLIANCE_IP}     ${None}
#${DATA}				data_variables.py

*** Keywords ***


#######################################
# TEARDOWN WORFLOWS
#######################################
Suite Teardown
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    fusion_api_appliance_setup.Log to console and logfile    [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    ${type} =    Get enclosure type
    Run Keyword If All Tests Passed    Run Keyword If    '${type}' == 'C7000'    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Run Keyword If    '${type}' == 'SY12000'    Remove ALL Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users

Get Enclosure Type
    [Documentation]    Querys the appliance and returned current enclosure type
    ${encs} =    Fusion API Get Enclosures
    ${enctype} =   set variable     ${null}
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${enctype} =    Get From Dictionary   ${enc}   enclosureType
    [Return]    ${enctype}

Remove All Enclosures
    [Documentation]    Querys the appliance for all Enclosures and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing ENCLOSURES
    ${encs} =    Fusion Api Get Enclosures
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${resp} =    Fusion Api Remove Enclosure    uri=${enc['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task     ${resp}    240s    10s
    \    ${val} =    Create Dictionary    taskState=Completed
    \    ${result} =    fusion_api_validation.Validate Response    ${task}    ${val}

Remove All Enclosure Groups
    [Documentation]    Querys the appliance for all Enclosure Groups and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing ENCLOSURE GROUPS
    ${encs} =     Fusion Api Get Enclosure Groups
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${resp} =    Fusion Api Delete Enclosure Group    uri=${enc['uri']}

Remove All Logical Enclosures
    [Documentation]    Querys the appliance for all Enclosure Groups and then removes them
    [Arguments]    ${timeout}=20m    ${interval}=30s    ${force}=${False}
    fusion_api_appliance_setup.Log to console and logfile      Removing LOGICAL ENCLOSURES
    ${param} =  set variable if  ${force}==${False}  ${Empty}  ?force=${True}
    ${encs} =    Fusion Api Get Logical Enclosure
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${resp} =    Fusion Api Delete Logical Enclosure    uri=${enc['uri']}  param=${param}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    ${timeout}    ${interval}
    \    ${val} =    Create Dictionary    taskState=Completed
    \    ${result} =    fusion_api_validation.Validate Response    ${task}    ${val}

Remove All Ethernet Networks
    [Documentation]    Querys the appliance for all Ethernet networks and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing ETHERNET NETWORKS
    ${networks} =    Fusion Api Get Ethernet Networks
    :FOR    ${net}    IN    @{networks['members']}
    \    ${resp} =    Fusion Api Delete Ethernet Network        uri=${net['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All FC Networks
    [Documentation]    Querys the appliance for all FC networks and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing FC NETWORKS
    ${networks} =     Fusion Api Get FC Networks
    :FOR    ${net}    IN    @{networks['members']}
    \    ${resp} =    Fusion Api Delete FC Network    uri=${net['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All FCoE Networks
    [Documentation]    Querys the appliance for all FCoE networks and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing FCoE NETWORKS
    ${networks} =     Fusion Api Get FCoE Networks
    :FOR    ${net}    IN    @{networks['members']}
    \    ${resp} =    Fusion Api Delete FCoE Network        uri=${net['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All LIGs
    [Documentation]    Querys the appliance for all LIGs and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing LIGS
    ${ligs} =    Fusion Api Get LIG
    :FOR    ${lig}   IN    @{ligs['members']}
    \    ${resp} =    Fusion Api Delete LIG    uri=${lig['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All SAS LIGs
    [Documentation]    Querys the appliance for all SAS LIGs and then removes them
    fusion_api_appliance_setup.Log to console and logfile    Removing SAS LIGS
    ${ligs} =    Fusion Api Get SAS LIG
    :FOR    ${lig}   IN    @{ligs['members']}
    \    ${resp} =    Fusion Api Delete LIG    uri=${lig['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All LS
    [Documentation]    Querys the appliance for all LSs and then removes them
    fusion_api_appliance_setup.Log to console and logfile     Removing LS
    ${lss} =     Fusion Api Get LS
    :FOR    ${ls}    IN    @{lss['members']}
    \    ${resp} =    Fusion Api Delete LS        uri=${ls['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All LSGs
    [Documentation]    Querys the appliance for all LSGs and then removes them
    fusion_api_appliance_setup.Log to console and logfile      Removing LSGS
    ${lsgs} =     Fusion Api Get LSG
    :FOR    ${lsg}    IN    @{lsgs['members']}
    \    ${resp} =    Fusion Api Delete LSG    uri=${lsg['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Remove All Network Sets
    [Documentation]    Querys the appliance for all Network Sets and then removes them
    fusion_api_appliance_setup.Log to console and logfile      Removing NETWORK SETS
    ${networks} =     Fusion Api Get Network Set
    :FOR    ${net}    IN    @{networks['members']}
    \    ${resp} =    Fusion Api Delete Network Set    uri=${net['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    2s

Power OFF ALL Servers
    [Documentation]    Querys the appliance for all Servers and then Powers them off
    fusion_api_appliance_setup.Log to console and logfile      Powering off SERVERS
    ${body} =     Create Dictionary    powerState=Off
    ...                powerControl=PressAndHold
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${server}   IN    @{servers['members']}
    \    Continue For Loop If    '${server['powerState']}'!='On'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State    body=${body}    uri=${server['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    5s
    \    ${sh} =   fusion api get server hardware     uri=${server['uri']}
    \    Should Match    ${sh['powerState']}    Off

Power OFF Server Bay
    [Documentation]    Querys the appliance for a Server by bay and then Powers them off
    [Arguments]     ${bay}
    fusion_api_appliance_setup.Log to console and logfile      Powering off server bay :${bay}
    ${body} =   Create Dictionary   powerState=Off
    ...              powerControl=PressAndHold
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${server}   IN  @{servers['members']}
    \    Continue For Loop If    ${server['position']}!= ${bay}
    \    Exit For Loop If    '${server['powerState']}'=='Off'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State     body=${body}    uri=${server['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}     240s    5s

Power OFF server
	[Arguments]     ${server}
	[Documentation]	Querys the appliance for a server by name and then Powers it off
	Log to console and logfile  	Powering off ${server}
	${body} = 	Create Dictionary	powerState=Off
	...								powerControl=PressAndHold
	${servers} = 	Fusion Api Get Server Hardware
	:FOR	${s}	IN	@{servers['members']}
	\       Continue For Loop If	  '${s['name']}' != '${server}'
	\		${resp} = 	Fusion Api Edit Server Hardware Power State		body=${body}	uri=${s['uri']}
	\		${task} =	Wait For Task 	${resp} 	240s	10s

Power ON Server
    [Documentation]    Querys the appliance for a server by name and then Powers it on
    [Arguments]     ${server}
    fusion_api_appliance_setup.Log to console and logfile      Powering on ${server}
    ${body} =     Create Dictionary    powerState=On
    ...                powerControl=MomentaryPress
    ${servers} =     Fusion Api Get Server Hardware
    :FOR    ${s}    IN    @{servers['members']}
    \    Continue For Loop If    '${s['name']}' != '${server}'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State    body=${body}    uri=${s['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    10s

Power ON Server URI
    [Documentation]   Powers on a server for a given URI
    [Arguments]     ${server}
    fusion_api_appliance_setup.Log to console and logfile      Powering on ${server}
    ${body} =     Create Dictionary    powerState=On
    ...                powerControl=MomentaryPress
    ${resp} =    Fusion Api Edit Server Hardware Power State     body=${body}    uri=${server}
    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    10s

Power ON Server Bay
    [Documentation]    Querys the appliance for a server by bay and then Powers it on
    [Arguments]     ${bay}
    fusion_api_appliance_setup.Log to console and logfile     Powering on server bay :${bay}
    ${body} =    Create Dictionary    powerState=On
    ...                               powerControl=MomentaryPress
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${s}    IN    @{servers['members']}
    \     Continue For Loop If    ${s['position']} != ${bay}
    \     Exit For Loop If    '${s['powerState']}'=='On'
    \     ${resp} =   Fusion Api Edit Server Hardware Power State    body=${body}    uri=${s['uri']}
    \     ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    10s

Power ON ALL Servers
    [Documentation]    Querys the appliance for all Servers and then Powers them on
    fusion_api_appliance_setup.Log to console and logfile      Powering On SERVERS
    ${body} =     Create Dictionary    powerState=On
    ...                powerControl=MomentaryPress
    ${servers} =     Fusion Api Get Server Hardware
    :FOR    ${server}    IN    @{servers['members']}
    \    Continue For Loop If    '${server['powerState']}'!='Off'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State        body=${body}    uri=${server['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    5s

Wait For Server Power ON
    [Documentation]    Querys the appliance for a server by bay and waits for it untill power is on
    [Arguments]     ${bay}
    fusion_api_appliance_setup.Log to console and logfile     Verify power on status for server in bay :${bay}
    ${uri}=    Get Server HW URI    ${bay}
    : For    ${index}   In Range    1    24
    \     ${server_info}=    fusion api get server hardware    uri=${uri}
    \     Exit For Loop If    '${server_info['powerState']}'=='On'
    \     Sleep    10

Wait For Server Power OFF
    [Documentation]    Querys the appliance for a server by bay and waits for it untill power is off
    [Arguments]     ${bay}
    fusion_api_appliance_setup.Log to console and logfile     Verify power off status for server in bay :${bay}
    ${uri}=    Get Server HW URI    ${bay}
    : For    ${index}   In Range    1    24
    \     ${server_info}=    fusion api get server hardware    uri=${uri}
    \     Exit For Loop If    '${server_info['powerState']}'=='Off'
    \     Sleep    10

Remove All Server Profiles
    [Documentation]    Querys the appliance for all Server Profiles and then removes them
    fusion_api_appliance_setup.Log to console and logfile      Removing SERVER PROFILES
    ${profiles} =     Fusion Api Get Server Profiles    param=?sort=name:ascending
    :FOR    ${profile}    IN     @{profiles['members']}
    \    ${resp} =    Fusion Api Delete Server Profile        uri=${profile['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    10s

Remove Server Profile Bay
    [Documentation]    Querys the appliance for a particular bay Server Profiles and then removes it
    [Arguments]    ${bay}
    ${profile_uri}=    Get Server Profile URI    ${bay}
    ${resp} =    Fusion Api Delete Server Profile    uri=${profile_uri}
    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}    240s    10s

Remove Custom Range
    [Documentation]    Querys the appliance for all CUSTOM vmac, vwwn, vsn ranges and then removes them
    [Arguments]        ${uri}
    fusion_api_appliance_setup.Log to console and logfile      Removing CUSTOM RANGES
    ${pool} =         Fusion API Get Pool    uri=${uri}
    ${rangeUris} =     Get From Dictionary    ${pool}    rangeUris
    :FOR    ${rangeUri}    IN    @{rangeUris}
    \    ${poolType} =     Get From Dictionary     ${pool}    poolType
    \    ${resp} =    Run Keyword If     '${poolType}' == 'VWWN'     Remove VWWN Range    ${rangeUri}
    \    ...    ELSE IF    '${poolType}' == 'VMAC'     Remove VMAC Range    ${rangeUri}
    \    ...    ELSE IF    '${poolType}' == 'VSN'     Remove VMAC Range    ${rangeUri}

Remove VMAC Range
    [Documentation]    Removes a CUSTOM VMAC range
    [Arguments]        ${uri}
    ${range} =     Fusion Api Get VMAC Range    uri=${uri}
    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory
    ${resp} =     Run Keyword If     '${rangeCategory}'=='Custom'     Fusion Api Delete VMAC Range    uri=${uri}

Remove VWWN Range
    [Documentation]    Removes a CUSTOM VWWN range
    [Arguments]        ${uri}
    ${range} =     Fusion Api Get VWWN Range    uri=${uri}
    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory
    ${resp} =     Run Keyword If     '${rangeCategory}'=='Custom'     Fusion Api Delete VWWN Range    uri=${uri}

Remove VSN Range
    [Documentation]    Removes a CUSTOM VSN range
    [Arguments]        ${uri}
    ${range} =     Fusion Api Get VSN Range    uri=${uri}
    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory
    ${resp} =     Run Keyword If     '${rangeCategory}'=='Custom'     Fusion Api Delete VSN Range    uri=${uri}

Remove All Users
    [Documentation]    Querys the appliance for all Users and then removes them
    fusion_api_appliance_setup.Log to console and logfile      Removing USERS
    ${users} =     Fusion Api Get User
    :FOR    ${user}    IN    @{users['members']}
    \    Continue For Loop If    '${user['userName']}'=='Administrator'
    \    Continue For Loop If    '${user['userName']}'=='administrator'
    \    ${resp} =     Fusion Api Remove User        uri=${user['uri']}


