*** Settings ***
Library       BuiltIn
Library       Collections

*** Keywords ***
###################
# VALIDATION
###################
Validate Response
    [Documentation]	Validates data in a response body against expected values
    ...   Example:
    ...   ${rc} = 		Convert to Integer	400
	...   ${valDict} = 	Create Dictionary	status_code=${rc}
	...										errorCode=CRM_DUPLICATE_NETWORK_NAME
	...   Validate Response   ${respDict}	${valDict}
	[Arguments]    ${resp}	${validation}
	Set Log Level	TRACE
	${response} = 	fusion_api_appliance_setup.Copy Dictionary	${resp}
	@{vkeys} =	Get Dictionary Keys	${validation}
	${rkeys} =	Get Dictionary Keys	${response}
	@{keys} =	fusion_api_validation.Remove all the keys in response that are not in validation	${vkeys}	${rkeys}
	:FOR	${x}	IN	@{keys}
	\	Remove From Dictionary	${response}	${x}
	Dictionaries Should Be Equal	${validation}	${response}	msg=Response does not match validation dictionary	values=True

Validate Response Regex
    [Documentation]	Validates data in a response body against expected values using regex
    ...    Make sure to escape your pattern strings properly!
    ...    Example:
    ...    ${valDict} =    Create Dictionary    status_code=${200}
    ...                              taskState=Error
    ...                              taskStatus=Invalid uplink-set: Port: \\d+ for interconnect-type: .* is not an uplink port.
    ...    Validate Response Regex    ${respDict}    ${valDict}
    [Arguments]    ${resp}    ${validation}
    Set Log Level    TRACE
    ${response} =    fusion_api_appliance_setup.Copy Dictionary    ${resp}
    @{vkeys} =    Get Dictionary Keys    ${validation}
    :FOR    ${x}    IN    @{vkeys}
    \    ${r} =    Convert to string    ${resp['${x}']}
    \    ${v} =    Convert to string    ${validation['${x}']}
    \    Should Match Regexp    ${r}    ${v}

Remove all the keys in response that are not in validation
	[Arguments]	${vkeys}	${rkeys}
	:FOR	${x}	IN	@{vkeys}
	\	Remove Values From List	${rkeys}	${x}
	[Return]	${rkeys}

Match Value In List
    [Documentation]   Check if a value exists in list
    [Arguments]   ${val}   ${valList}
    :FOR   ${v}   IN   @{valList}
    \   Return From Keyword If   '${v}' == '${val}'   ${True}
    [Return]   ${False}
