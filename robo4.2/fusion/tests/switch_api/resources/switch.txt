*** Settings ***
Documentation     Keywords for operating on the CLI connection of the HP5900 switch. 
...    Optionally uses default parameters from resources\\variables.py. These defaults 
...    can be overridden by supplying the appropriate arguments to keywords.
...    = Usage =
...    | Library | resources/switch.txt |
...
Library          Collections
Library          SSHLibrary
Library          String
Library          RoboGalaxyLibrary         # DVTs Robot Framework extensions
Variables        resources/variables.py    # Comet-DVT default variables

#++
# TODO: Needs Minicom exit function repaired
#-- 

*** Variables ***

*** Keywords ***
Set Switch Version Metadata
    [Documentation]    Logs into switch using default arguments and gets ident string
    Login to Switch via SSH
    ${Output}=    Get Switch Current Configuration
    Logout of Switch via SSH
    ${Match}    ${Switch_Version}    Should Match Regexp    ${Output}    version (.*)\\r\\r
    Set Suite Metadata    Switch Version    ${Switch_Version}    top=True 

Login to Switch from Fusion
    [Arguments]    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}    
    ...            ${PROMPT}=${SWITCH_PROMPT}
    [Documentation]    Connect to 5900AF Switch from an existing  Fusion VM shell connection
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}
    Run Keyword and Ignore Error    Execute Command    rm -rf /root/.ssh
    Write    ssh ${IP} -l ${USERNAME}
    Sleep    1
    Write    yes
    Sleep    1
    Write    ${PASSWORD}
    ${Output}=    Read until    ${PROMPT}
    # Disable paging on command output
    Sleep    1
    Switch Execute Command    screen-length disable    ${PROMPT}
    [Return]    ${Output}

Logout of Switch to Fusion
    [Documentation]    Logout of the switch session and back to the Fusion VM SSH session
    Write    quit
    ${Output}=    Read Until Prompt
    [Return]    ${Output}

Switch Execute Command
    [Arguments]    ${Command}    ${PROMPT}=${SWITCH_PROMPT}
    Write    ${Command}
    ${Output}=    Read until    ${PROMPT}
    [Return]    ${Output}

#-------------------
Login to Switch via SSH
    [Documentation]    Connect to 5900AF Switch via SSH library
    [Arguments]    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}    
    ...            ${PROMPT}=${SWITCH_PROMPT}    ${TIMEOUT}=${SWITCH_TIMEOUT}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection    ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    # Disable paging on command output
    Write    screen-length disable
    Read Until Prompt
    [Return]    ${Id}

Logout of Switch via SSH
    [Documentation]    Exits the current SSH session
    Close Connection

#--------------------
Login to DL360 via SSH
    [Documentation]    Connect to DL360 Server via SSH
    [Arguments]    ${IP}=${SERIAL_DL_IP}    ${USERNAME}=${SERIAL_DL_USERNAME}    ${PASSWORD}=${SERIAL_DL_PASSWORD}
    ...            ${PROMPT}=${SERIAL_DL_PROMPT}    ${TIMEOUT}=${SERIAL_DL_TIMEOUT}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection    ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    [Return]    ${Id}

Minicom to Switch from DL360
    [Documentation]    Connect to the 5900AF switch command line using the minicom connection to the serial port.
    [Documentation]    Requires an existing connection to the DL360 server with a serial port connected to the desired switch.
    Write    minicom --color=off --attrib=off
    ${Output}=    Read until    ${SWITCH_PROMPT}
    # Clear STDOUT of any stray chatacters
    ${Output}=    Read until    ${SWITCH_PROMPT}
    # Clear STDIN of any stray characters
    Switch Execute Command    " "    ${SWITCH_PROMPT}
    # Disable paging on command output
    Switch Execute Command    screen-length disable    ${SWITCH_PROMPT}
    [Return]    ${Output}

Minicom Exit
    [Documentation]    Disconnects from the minicom utility and returns session back to the DL360 Server.
    [Documentation]    Currently non-functioning
    #
    # TODO: This doesn't actually work!!!
    # TODO: Needs to transmit a control_a character to get to minicom command level
    #
    ${CONTROL_A}    Set Variable    \X01
    Write    ${CONTROL_A}X
    Sleep    2
    Write    ""
    Read Until Prompt    # We should be back at the DL360 Server prompt now

Logout of DL360 via SSH
    [Documentation]    Exits the current SSH session
    Close Connection

#-----------------

Execute Switch Command
    [Documentation]    SSH connections to the switch don't work well with Robots' Execute Command keyword
    [Documentation]    Use this keyword only for indirect connections to simplify the read/write exchanges.
    [Documentation]    This keyword assumes screen-length prompting has been disabled.
    [Arguments]    ${COMMAND}    ${PROMPT}=${SWITCH_PROMPT}
    Write    ${COMMAND}
    Sleep    1
    ${Output}=    Read Until    ${PROMPT}
    [Return]    ${Output}

Get Switch Current Configuration
    [Documentation]    Return a bufer containing (raw) output from a 'display current-configuration' command.
    [Arguments]    ${PROMPT}=${SWITCH_PROMPT}
    Log    ${PROMPT}
    ${Output}=    Execute Switch Command    display current-configuration    ${PROMPT}
    [Return]    ${Output}

Get Switch Current Users
    [Documentation]    Return a buffer containing (raw) output from a 'display current-users' command.
    [Arguments]    ${PROMPT}=${SWITCH_PROMPT}
    Log    ${PROMPT}
    ${Output}=    Execute Switch Command    display local-user    ${PROMPT}
    [Return]    ${Output}

#-----------------

Verify OVuser is Not Present
	[Documentation]		Returns ${True} if OVuser account is not found in the switch configuration. ${False} if found.
    Login to Switch Via SSH
    ${Output}=   Get Switch Current Configuration
    Log    ${Output}
	${rc}=    Run Keyword and Return Status	Should not contain    ${Output}    OVuser    msg=Found OVuser account present
    Logout of Switch via SSH
    [Return]	${rc}

Verify OVuser is Present
	[Documentation]		Returns ${True} if OVuser account is found in the switch configuration. ${False} if not found.
    Login to Switch Via SSH
    ${Output}=   Get Switch Current Configuration
    Log    ${Output}
    ${rc}=    Run Keyword and Return Status	Should contain    ${Output}    OVuser    msg=Could not find OVuser account
    Logout of Switch via SSH
    [Return]	${rc}

Verify Unclaimed Switch Prompt
	[Documentation]		Returns ${True} if switch prompt is <HP>.
	Login to Switch Via SSH
    Write    ls
    Sleep    1
    ${Output}=    Read Until    >
    Log    ${Output}
    ${rc}=    Run Keyword and Return Status	Should contain    ${Output}    <HP>    msg=Failed to read until <HP> prompt
    Logout of Switch via SSH
    [Return]	${rc}

Verify Claimed Switch Prompt
	[Documentation]		Returns ${True} if switch prompt is <MiliSwitch_1>.
	Login to Switch Via SSH
    Write    ls
    Sleep    1
    ${Output}=    Read Until    >
    Log    ${Output}
    ${rc}=    Run Keyword and Return Status	Should contain    ${Output}    <MiliSwitch_1>    msg=Failed to read until <MiliSwitch_1> prompt
    Logout of Switch via SSH
    [Return]	${rc}
