*** Settings ***
Documentation		Configures an appliance with resources found in supplied data file. Pass in specific tags with pybot -i <tag(s)> to limit processing
...  TAGS:          [FTS, CONFIGURE],HWSETUP, USERS, ETHERNET, ETHERNET RANGES, NETWORK SETS, NETWORK SET RANGES, FC, FCOE, FCOE RANGES, LIGS, LICENSES, ENCLOSURES, ENCLOSURE GROUPS,
...                 LES, RANGES, POWER OFF SERVERS, SERVER PROFILES, SERVER PROFILE TEMPLATES, SET ENV, HWSETUP, SPTS
...	 FTS:           Performs FTS on the appliance.
...	 CONFIGURE:     Run all tags except FTS
	
Resource                ../../../../resource/fusion_api_all_resource_files.txt

Suite Setup			Get appliance IP and Login     	
#JRT Suite Setup			Get appliance IP and Login     	${VM}

Library				Collections

*** Variables ***
${X-API-VERSION}		300
${FUSION_PROMPT}		\#
${FUSION_TIMEOUT}		60


*** Test Cases ***
First Time Setup
	[Tags]    FTS
	Set Tbird Variables 
	First Time Setup    password=${admin_credentials['password']}

###################
Login
    [Tags]    CONFIGURE   HWSETUP    USERS    ETHERNET    ETHERNET RANGES    NETWORK SETS    NETWORK SET RANGES    FC    FCOE    FCOE RANGES    LES    LOGICAL ENCLOSURES    LIGS    LICENSES
    ...    ENCS    ENCLOSURES    EGS    ENCLOSURE GROUPS    RANGES    POWER OFF SERVERS    SPS    SERVER PROFILES    SPTS    SERVER PROFILE TEMPLATES   
	Set Tbird Variables
	${resp} =   Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
###################


 Configure Thunderbird Hardware
	[Tags]	  HWSETUP
	Log To Console And Logfile		X-API-Ver: ${X-API-VERSION}
	Invoke Hardware Setup 		timeout=720
	
 Add Users
 	[Tags]    CONFIGURE   USERS
 	${users} =	Get Variable Value	${users}
 	Run Keyword If	${users} is not ${null}					Add Users from variable				${users}
 
 Add Ethernet Networks
 	[Tags]    CONFIGURE   ETHERNET
 	${ethernet_networks} =	Get Variable Value	${ethernet_networks}
 	Run Keyword If	${ethernet_networks} is not ${null}		Add Ethernet Networks from variable	${ethernet_networks}
 
 Add Ethernet Ranges
 	[Tags]    CONFIGURE   ETHERNET RANGES
 	${ethernet_ranges} =	Get Variable Value	${ethernet_ranges}
 	Run Keyword If	${ethernet_ranges} is not ${null}		Run Keyword for List	${ethernet_ranges}	Create Ethernet Range
 
 Add Network Sets
 	[Tags]    CONFIGURE   NETWORK SETS
 	${network_sets} =	Get Variable Value	${network_sets}
 	Run Keyword If	${network_sets} is not ${null}			Add Network Sets from variable		${network_sets}
 
 Add Network Set Ranges
 	[Tags]    CONFIGURE   NETWORK SET RANGES
 	${network_set_ranges} =	Get Variable Value	${network_set_ranges}
 	Run Keyword If	${network_set_ranges} is not ${null}	Run Keyword for List	${network_set_ranges}	Create Network Set Range
 
 Add FC Networks
 	[Tags]    CONFIGURE   FC
 	${fc_networks} =	Get Variable Value	${fc_networks}
 	Run Keyword If	${fc_networks} is not ${null}			Add FC Networks from variable		${fc_networks}
 
 Add FCoE Networks
 	[Tags]    CONFIGURE   FCOE
 	${fcoe_networks} =	Get Variable Value	${fcoe_networks}
 	Run Keyword If	${fcoe_networks} is not ${null}	        Add FCoE Networks from variable		${fcoe_networks}
 
 Add FCoe Ranges
 	[Tags]    CONFIGURE   FCOE RANGES
 	${fcoe_ranges} =	Get Variable Value	${fcoe_ranges}
 	Run Keyword If	${fcoe_ranges} is not ${null}	Run Keyword for List	${fcoe_ranges}	Create FCoE Range
 
 Add LIGS
 	[Tags]    CONFIGURE   LIGS
	###> Need to figure out how to set the APPLIANCE_IP var universally.
	Set Tbird Variables
 	${ligs} =	Get Variable Value	${ligs}
 	Run Keyword If	${ligs} is not ${null}	Run Keyword for List	${ligs}	Add LIG from variable
 
 Add Enclosure Groups
 	[Tags]    CONFIGURE   ENCLOSURE GROUPS  EGS
 	${enc_groups} =	Get Variable Value	${enc_groups}
 	Run Keyword If	${enc_groups} is not ${null}	Run Keyword for List	${enc_groups}	Add Enclosure Group from variable
 
 Add Logical Enclosures
 	[Tags]    CONFIGURE   LOGICAL ENCLOSURES    LES
 	${les} =	Get Variable Value	${les}
 	Run Keyword If	${les} is not ${null}					Run Keyword for List    ${les}      Add Logical Enclosure from variable
 
 Add Licenses
 	[Tags]    CONFIGURE   LICENSES
 	${licenses} =	Get Variable Value	${licenses}
 	Run Keyword If	${licenses} is not ${null}		Add Licenses from variable		${licenses}
 
 Add Ranges
 	[Tags]    CONFIGURE   RANGES
 	${ranges} =	Get Variable Value	${ranges}
 	${pools} =  Run Keyword If	${ranges} is not ${null}	Create List		/rest/id-pools/vmac	/rest/id-pools/vwwn	/rest/id-pools/vsn
     Run Keyword If	${ranges} is not ${null}                Run Keyword for List	${pools}	Disable ALL Generated ID Ranges
 	Run Keyword If	${ranges} is not ${null}				Add Ranges From variable	${ranges}
 
 Power Off Servers
 	[Tags]    CONFIGURE   POWER OFF SERVERS
 	Power Off All Servers
 
 Add Server Profiles
 	[Tags]    CONFIGURE   SERVER PROFILES    SPS
 	${server_profiles} =	Get Variable Value	${server_profiles}
 	#JRT Run Keyword If	${server_profiles} is not ${null}		Add Server Profiles from variable 	${server_profiles}
 	Run Keyword If	${server_profiles} is not ${null}		Add Server Profiles from variable	${server_profiles}
 
 Add Server Profile Templates
 	[Tags]    CONFIGURE   SERVER PROFILE TEMPLATES    SPTS
 	${server_profile_templates} =	Get Variable Value	${server_profile_templates}
 	Run Keyword If	${server_profile_templates} is not ${null}		Add Server Profile Templates from variable	${server_profile_templates}

# SAN Managers
# Storage Systems
# Storage Pools
# Volumes
# Volume Templates


*** Keywords ***
# -----------------------------------------------------------------------------
#   Tbird Hardware Setup
# -----------------------------------------------------------------------------
Set Tbird Variables 
        [Documentation]   Set tbird variables.
	${FUSION_SSH_USERNAME} =		Set Variable	 ${ssh_credentials['userName']}
	${FUSION_SSH_PASSWORD} =		Set Variable	 ${ssh_credentials['password']}
	${APPLIANCE_IP} =		Set Variable 	${appliance['applianceNetworks'][0]['virtIpv4Addr']}
	Set Suite Variable		${APPLIANCE_IP}
	Set Suite Variable		${FUSION_IP} 	${APPLIANCE_IP}
	Set Suite Variable		${FUSION_SSH_USERNAME}
	Set Suite Variable		${FUSION_SSH_PASSWORD}

Invoke Hardware Setup
    [Documentation]  SSH to the Tbird appliance and invoke hardware setup via REST, only on Tbird platform
    ...              Example:
    ...                Invoke Hardware Setup
    ...                Invoke Hardware Setup  timeout=60  interval=2
    ...                Invoke Hardware Setup  api=300 timeout=60  interval=5
    ...              Data Varables Required:
    ...                ${X-API-VERSION}              300              # X-API-VERSION
    ...                ${FUSION_IP}                  ${APPLIANCE_IP}  # Fusion Appliance IP
    ...                ${FUSION_SSH_USERNAME}        root             # Fusion SSH Username
    ...                ${FUSION_SSH_PASSWORD}        hponeview        # Fusion SSH Password
    ...                ${FUSION_PROMPT}              \#               # Fusion Appliance Prompt
    ...
    [Arguments]  ${api}=${X-API-VERSION}  ${timeout}=60  ${interval}=5
    Log to console and logfile  ${\n}[Invoking Hardware Setup]
    Login to Fusion via SSH
    Log to console and logfile		api=${api}
    ${output} =   Execute SSH Command     curl -k -X POST -H "X-API-Version:${api}" https://localhost/rest/appliance/tech-setup
    ${task} =   Get Task By Param   param=?filter='name'='Discover hardware'&sort=created:descending&count=1
    Log to console and logfile  ${\n}The Discover Hardware task uri is ${task['uri']}  TRACE
    Wait For Task  ${task}  timeout=${timeout}  interval=${interval}

Get appliance IP and Login
        [Documentation]   Get appliance IP address from data variable file and set it.
        #[Arguments]             ${VM}
	${APPLIANCE_IP} =		Set Variable 	${appliance['applianceNetworks'][0]['virtIpv4Addr']}

Get Task By Param
            [Arguments]    ${param}
        [Documentation]    Get task by param
        ...    Examples:
        ...    Get Task By Param param=?filter='name'=='Discover hardware'&sort=created:descending&count=1
        ...    Get Task By Param param=?filter="'name'='Add' AND associatedResource.resourceName='${name}'"&sort=created:descending&count=1
        ${resp}=    Fusion Api Get Task    param=${param}
        Log to console and logfile    ${resp}    TRACE
        ${status} =    Run keyword and return status    Dictionary should contain key    ${resp}    'errorCode'
        Return from keyword if    ${status}==${True}    ${resp}
        ${count} =    Get From Dictionary    ${resp}    count
        Return from keyword if    ${count}==0    ${resp}
        [Return]    ${resp['members'][0]}


