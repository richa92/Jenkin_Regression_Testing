#!/bin/bash


#=============================================================================
# print_bond_param
#=============================================================================
print_bond_param()
{
	local param_name=$1
	local param_value=(`echo "$2"`)
	local bond=$3

	if [ -z "$param_value" ]; then
		echo "`date`: ERROR reading bonding $param_name for $bond so exiting..."  2>&1 | tee -a $LOG
		exit
	else
		echo "$param_name: ${param_value[@]}"  2>&1 | tee -a $LOG
	fi
}

#=============================================================================
# verify_param_value
#=============================================================================
verify_param_value()
{
	local param_value=$1
	
	if [ -z "$param_value" ]; then
		param_value="NULL"
	fi
	echo "$param_value"
}

#=============================================================================
# get_ip
#=============================================================================
get_ip()
{
	local inf=$1
	
	local ip=`ifconfig "$inf" | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' | sed -n '1p'`
	echo "$ip"
}

#=============================================================================
# wait_for_done
#=============================================================================
wait_for_done()
{
	local DONE=0
	while [ $DONE -eq 0 ]; do
		if [ -a done ]; then
			DONE=1
			rm -f done
		fi
	done

}

#=============================================================================
# get_bond_interfaces
#=============================================================================
get_bond_ips()
{
	local inf=$1
	local bond

	local BONDS=(`ifconfig | grep -w $inf | cut -d " " -f1`)
	for bond in ${BONDS[@]}
	do
		local ip=$(get_ip $bond)	
		if [ -z "$ip" ]; then
			continue
		else
			echo "$bond $ip" 2>&1 | tee -a $LOG
		fi
	done
}

#============================================================================e
# get_bond_param
#=============================================================================
get_bond_param()
{
	local BONDS=(`echo "$1"`)

	for bond in ${BONDS[@]}
	do
		echo "" | tee -a $LOG
		echo "`date`: $bond parameters"  2>&1 | tee -a $LOG
		get_bond_ips $bond
		mode=(`cat /sys/class/net/$bond/bonding/mode`)
		print_bond_param "mode" $mode $bond

		slaves=(`cat /sys/class/net/$bond/bonding/slaves`)
		slaves_array=`echo ${slaves[@]}`
		print_bond_param "slaves" "$slaves_array" $bond

		active_slave=(`cat /sys/class/net/$bond/bonding/active_slave`)
		print_bond_param "active_slave" $active_slave $bond

		mac=(`cat /sys/class/net/$bond/address`)
		print_bond_param "address" $mac $bond

		operstate=(`cat /sys/class/net/$bond/operstate`)
		print_bond_param "operstate" $operstate $bond

		miimon=(`cat /sys/class/net/$bond/bonding/miimon`)
		print_bond_param "miimon" $miimon $bond

		mii_status=(`cat /sys/class/net/$bond/bonding/mii_status`)
		print_bond_param "mii_status" $mii_status $bond

		downdelay=(`cat /sys/class/net/bond0/bonding/downdelay`)
		print_bond_param "downdelay" $downdelay $bond

		updelay=(`cat /sys/class/net/bond0/bonding/updelay`)
		print_bond_param "updelay" $updelay $bond

		primary=(`cat /sys/class/net/bond0/bonding/primary`)
		primary=$(verify_param_value $primary)
		print_bond_param "primary" $primary $bond

		num_grat_arp=(`cat /sys/class/net/bond0/bonding/num_grat_arp`)
		print_bond_param "num_grat_arp" $num_grat_arp $bond
	done

}

LOG=$0.log
if [ -f $LOG ]; then
        TMP=$(mktemp $LOG.XXXXXXXXXX)
        mv $LOG $TMP
fi

BONDS=(`cat /sys/class/net/bonding_masters`)
if [ ${#BONDS[@]} -eq 0 ]; then
	echo "`date`: No bonds found so exiting..." 2>&1 | tee -a $LOG
	exit
fi

BOND_ARRAY=`echo ${BONDS[@]}`
echo "`date`: Bonding parameters before the test"  2>&1 | tee -a $LOG
get_bond_param "$BOND_ARRAY"
MSG_START_LINE=`tail -1 /var/log/messages`
echo "`date`: Waiting to get the signal done"  2>&1 | tee -a $LOG
wait_for_done
echo "" 2>&1 | tee -a $LOG
echo "`date`: Bonding parameters after the test"  2>&1 | tee -a $LOG
get_bond_param "$BOND_ARRAY"
echo "" 2>&1 | tee -a $LOG
echo "`date`: /var/log/messages during the test"  2>&1 | tee -a $LOG
cat /var/log/messages | grep -A 99999999 "$MSG_START_LINE" 2>&1 | tee -a $LOG

