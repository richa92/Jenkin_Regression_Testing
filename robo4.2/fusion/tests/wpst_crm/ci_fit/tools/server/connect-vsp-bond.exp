#!/usr/bin/expect -f
set ilouser "dvt-auto"
set ilopw "dvt-auto"
set osuser "root"
set ospw "rootpwd"
set iloip [lrange $argv 0 0]
set timeout 20 

if {[llength $argv] != 1} {
	puts "usage: connect-vsp <iLO ipaddr>"
	exit 1
}

spawn ssh $ilouser@$iloip
expect {
	timeout {puts "Timed-out while trying to ssh to $iloip"; exit} 
	"password:"
}
send "$ilopw\r"
expect {
	timeout {puts "Timed-out while sending iLo password $ilopw"; exit} 
	"</>hpiLO->"
}
#TODO: iLo2 on some servers does not close the iLo session so the reset map1 command is 
#used as a workaround to reset iLO on first attempt. Need to add logic to check 
#for the this conditon and then reset if found, otherwise continue if not found.
send "reset map1\r"
expect "CLI session stopped"
sleep 65 
send "\r"
expect "Connection reset by peer"
spawn ssh $ilouser@$iloip
expect {
	timeout {puts "Timed-out while trying to ssh to $iloip after reset"; exit} 
	"password:"
}
send "$ilopw\r"
expect {
        timeout {puts "Timed-out while sending iLo password $ilopw after reset"; exit}
        "</>hpiLO->"
}
send "vsp\r"
#TODO: Add logic to detect if the port is active.  If it's not active then exit
# the script so that the configuration can continue for the other servers
expect "Virtual Serial Port active"
send "\r"
expect {
        timeout {puts "Timed-out waiting for login prompt"; exit 1}
        "login:"
}
send "$osuser\r"
expect {
	timeout {puts "Timed-out while attempting to log into OS with user $osuser"; return 1}
        "Password:";
}
send "$ospw\r"
 expect {
	timeout {puts "Timed-out while attempting to log into OS with password $ospw"; return 1}
        "#"
}
send "rmmod be2net\r"
expect "#"
send "modprobe -r bnx2x\r"
expect "#"
send "modprobe -r bnx2\r"
expect "#"
send "modprobe -r mlx4_en\r"
expect "#"
send "modprobe -r netxen_nic\r"
expect "#"
send "modprobe -r nx_nic\r"
expect "#"
send "modprobe -r igb\r"
expect "#"
send "modprobe -r tg3\r"
expect "#"
send "service network restart\r"
expect "#"
send "modprobe be2net\r"
expect "#"
send "modprobe bnx2x\r"
expect "#"
send "modprobe bnx2\r"
expect "#"
send "modprobe mlx4_en\r"
expect "#"
send "modprobe netxen_nic\r"
expect "#"
send "modprobe nx_nic\r"
expect "#"
send "modprobe igb\r"
expect "#"
send "modprobe tg3\r"
expect "#"
puts "Waiting for the drivers to finish loading"
sleep 20 
set timeout 120 
send "/root/create_bonds\r"
expect {
	timeout {puts "Timed-out while waiting for create_bonds to complete"}
        "#"
}
send "exit\r"
expect " login:"
send "\033Q"
expect oef


