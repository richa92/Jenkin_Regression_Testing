*** Settings ***
Documentation      Scope using FusionLibrary API keywords
Variables          ../F1290/data_variables.py
Resource	   ../F1290/resource.txt
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
Suite Teardown		Suite Teardown

*** Variables ***
${APPLIANCE_IP}    15.245.131.62
${SwitchIp}         15.199.203.171

*** Test Cases ***

1. Login and Create Scope
 
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp} =	Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials_TB}
	
	
    Log to console    \n-Creating Scopes
    
	:FOR   ${scope}   IN   @{scope_1}
    \   ${resp}        Fusion Api Create Scope    ${scope}
	\   Run Keyword If  '${resp['status_code']}' != '201'  Fail    ELSE  log to console  \nFC Network  Added to scope successfully
    
	
2. Create and Assign FC Network Resource to Scope
    
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    
    Log to console    \n-Creating FC Networks
    ${uriList} =   Create List
    :FOR   ${fcnet}   IN   @{fcnets}
    \   ${resp}        Fusion Api Create Fc Network   body=${fcnet}
	\	log to console	the body is:${resp} 
    \   ${fc_name} =	Get From Dictionary   ${fcnet}   name
    \   ${uri} =	Get FC URI    ${fc_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
	\	Log to console    \n-FC networks:${fc_name}  created successfully!
	
    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
	\   Append to List      ${Scope_Uris}  ${ScopeUri1}
	${body} =   Get Variable value  ${scope_resources}
	${assign_res} =	Copy Dictionary		${body}
	
	
	Log to console  \n ASSIGNING FC NETWORK RESOURCES TO SCOPE1 and SCOPE2 RESPECTIVELY
	${len} =    Get Length  ${Scope_Uris}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Create List     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res}    addedResourceUris=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}
	\   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nFC Network  added to scope successfully
	
	Log to console  \n Displaying Resources assigned to each scope.
	
	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	fc-networks		${x}

	
2.1 REMOVING FC NETWORK RESOURCE FROM SCOPE	
	
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
	
	Log to console	\n REMOVING FC NETWORK RESOURCE FROM SCOPE1
	${ScopeUri} =    Get Scope URI     S1
	${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
	${fcNetUri} =    Get FC URI     FC1
	${removelist} =	Create List		${fcNetUri}
	${body} =	Get Variable value		${scope_resources}
	${remove_res} =	Copy Dictionary		${body}
	
	@{scope_name} =   Create List   S1  S2
	
	Set to Dictionary	${remove_res}		removedResourceUris=${removelist}
	
	
	${resp}		fusion_api_patch_scope		body=${remove_res}		uri=${ScopeUri1}
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nFC Network  removed from scope successfully
	
	Log to console  \n FILTER- Displaying FC NETWORK Resources from each scope after removing a resource from scope1
	
	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	fc-networks		${x}

	
3. Create and Assign FCoE Network Resource to Scope
    
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log to console    \n-Creating FCoE Networks
	
    ${uriList} =   Create List
    :FOR   ${fcoenet}   IN   @{fcoenets}
    \   ${resp}        Fusion Api Create Fcoe Network   body=${fcoenet}
    \   ${fcoe_name}        Get From Dictionary   ${fcoenet}   name
    \   ${uri}        Get FCoE URI    ${fcoe_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    \	Log to console    \n-FCoE network-${fcoe_name}  created successfully!
	
    ${ScopeUri} =    Get Scope URI     S1
    ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
	${body} =	Get Variable value		${scope_resources}
	${assign_res} =   Copy Dictionary		${body}
	
	Log to console  \n ASSIGNING FCoE NETWORK RESOURCES TO SCOPES
	${len} =    Get Length  ${uriList}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Create List     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res}    addedResourceUris=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${ScopeUri1}
	\   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nFCoE Network  added to scope successfully
	
	Log to console  \n FILTER- FCoE NETWORK RESOURCES FROM SCOPE1
	${resp} =	Filter By	fcoe-networks		S1
	
	
3.1 REMOVING FCoE NETWORK FROM SCOPE
	
	[Tags]  add   POSITIVE
    Set Log Level    TRACE
	Log to console    \nRemoving FCoE Networks
	
	${scopeuri} =	Get Scope URI	S1
	${ScopeUri1} =  Catenate    SEPARATOR=/     ${scopeuri}     resource-assignments
	${fcoeuri} =	Get FCoE URI	FCoE1
	${templist} =		Create List		${fcoeuri}
	${body} =	Get Variable value		${scope_resources}
	${rm_body} =	Copy Dictionary		${body}
	
	Set to Dictionary		${rm_body}		removedResourceUris=${templist}
	
	${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${ScopeUri1}
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nFCoE Network  removed from scope successfully!
	
	Log to console	\n FILTER SCOPE AFTER REMOVING a FCoE RESOURCE FROM SCOPE1
	${resp} =	Filter By	fcoe-networks		S1
	Log to console	\nRemaining Resources Present in Scope1:${resp}
	
4. Create and Assign Ethernet Network to Scope
    
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    
    Log to console    \n-Creating Ethernet Networks
    ${uriList} =   Create List
    :FOR   ${ethnet}   IN   @{ethnets}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   ${eth_name}        Get From Dictionary   ${ethnet}   name
    \   ${uri}        Get Ethernet URI    ${eth_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    Log to console    \n-Ethernet networks  created successfully!
	
    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
	\   Append to List      ${Scope_Uris}  ${ScopeUri1}
	${body} =   Get Variable value  ${scope_resources}
	
	${assign_res} =		Copy Dictionary		${body}	
	
	Log to console  \n ASSIGNING ETHERNET NETWORK RESOURCES TO SCOPES
	${len} =    Get Length  ${Scope_Uris}
	${tempList} =   Create List 
	:FOR    ${x}    IN RANGE   0   ${len}
	\   Append to List	${tempList}		${uriList[${x}]}
	
	\   Set to Dictionary   ${assign_res}    addedResourceUris=${tempList}
	
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}
	\   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nEthernet Network  added to scope successfully
	
		
	Log to console  \n FILTER ETHERNET NETWORK RESOURCES FROM SCOPES (which is common to both the scopes will be displayed)
	${resp} =	Filter By All Scopes	ethernet-networks		S1		S2
	
	
	Log to console	\n Displaying the resources from each scope
	
	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	ethernet-networks	${x}	
	
4.1 REMOVING Ethernet Network FROM SCOPE


	[Tags]  add   POSITIVE
        Set Log Level    TRACE
	Log to console    \n-Removing Ethernet Networks
	
	${scopeuri} =	Get Scope URI	S1
	${ScopeUri1} =  Catenate    SEPARATOR=/     ${scopeuri}     resource-assignments
	${eneturi} =	Get Ethernet URI	Net1
	${templist} =		Create List		${eneturi}
	${body} =	Get Variable value		${scope_resources}
	${rm_body} =	Copy Dictionary		${body}
	
	Set to Dictionary		${rm_body}		removedResourceUris=${templist}
	
	${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${ScopeUri1}
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nEthernet Network  removed from scope successfully!
	
	Log to console	\n FILTER SCOPE AFTER REMOVING a Net1 RESOURCE FROM SCOPE1 and DISPLAYING ALL SCOPES
	${resp} =	Filter By All Scopes	ethernet-networks		S1		S2
	
	
	@{scope_name} =   Create List   S1  S2
	Log to console	\n After removing Net1 from Scope1 Displaying the resources from each scope
	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	ethernet-networks	${x}
	
5. Create and Assign Network Sets to Scope
    
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    
    Log to console    \n-Creating Network Sets

	${uriList} =   Create List
    :FOR   ${ethnetset}   IN   @{ethnetsets}
    \   ${resp}        Fusion Api Create Network Set   body=${ethnetset}
    \   ${ethset_name}        Get From Dictionary   ${ethnetset}   name
    \   ${uri}        Get Network Set URI    ${ethset_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    \	Log to console    \n-Ethernet NetworkSet-${ethset_name}  created successfully!

    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
	\   Append to List      ${Scope_Uris}  ${ScopeUri1}
	${body} =   Get Variable value  ${scope_resources}
	${assign_res} =		Copy Dictionary		${body}
	
	Log to console  \n ASSIGNING NETWORK SETS RESOURCES TO SCOPES
	${len} =    Get Length  ${Scope_Uris}

	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Create List     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res}    addedResourceUris=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}
	\   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nNetworkSet  added to scope successfully

	Log to console  \n FILTER NETWORK SET RESOURCE USING SCOPE1 OR SCOPE2
	${resp} =	Filter By Any Scopes	network-sets	S1	S2
	
5.1 REMOVING Network Set FROM SCOPE

	[Tags]  add   POSITIVE
        Set Log Level    TRACE
	Log to console    \nRemoving Network set
	
	${scopeuri} =	Get Scope URI	S1
	${ScopeUri1} =  Catenate    SEPARATOR=/     ${scopeuri}     resource-assignments
	${netseturi} =	Get Network Set URI		EthNetSet1
	${templist} =		Create List		${netseturi}
	${body} =	Get Variable value		${scope_resources}
	${rm_body} =	Copy Dictionary		${body}
	
	Set to Dictionary		${rm_body}		removedResourceUris=${templist}
	
	${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${ScopeUri1}
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nNetworkSet  removed from scope successfully!
	
	Log to console  \n FILTER AFTER REMOVING NETWORK SET RESOURCE FROM SCOPE1
	${resp} =	Filter By Any Scopes	network-sets	S1	S2
		
	Log to console	\nDisplaying the remaining resources which is assigned to the scopes
	
	@{scopename} =	Create List		S1	S2
	:FOR	${scope}	IN		@{scopename}
	\	${resp} =	Filter By	network-sets	${scope}

6. Create and Assign LSG to Scope

        Log to console    \n-Creating LSG
        ${LSGList1} =    Get lsgs Member     ${type_switch[0]}

        :FOR   ${LSG}   IN   @{LSGList1}
        \   ${resp}     Fusion Api Create Lsg     ${LSG}
	    \   Log to console   ${resp['status_code']}
	    \   Run Keyword If   '${resp['status_code']}' != '202'   fail    ELSE  log to console   \n-LSG  created successfully!



        log to console  \n Assigning LSG-56xx-1 to S1 and LSG-56xx-2 to S2
        @{LSG_name} =   Create List    LSG-56xx-1    LSG-56xx-2
        ${LSG_Uris} = 	Create List
        :FOR    ${x}    IN      @{LSG_name}
        \   ${LSGUri} =    Get LSG URI     ${x}
        \   Append to List      ${LSG_Uris}  ${LSGUri}
        @{scope_name} =   Create List   S1  S2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${LSG_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \n-LSG  assigned to scopes successfully


        log to console  \n-FILTERING LSG W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     S1  S2
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-switch-groups     ${x}


        log to console  \n-FILTERING LSG W.R.T ANY SCOPES
        ${NameList} =   Filter By Any Scopes   logical-switch-groups     S1      S2


6.1. Removing LSG from Scope

        Log to console  \n-Removing LSG-56xx-1 from S1
        ${LSGUri} =    Get LSG URI     LSG-56xx-1
        ${ScopeUri} =    Get Scope URI     S1
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${tempList} =   Create List     ${LSGUri}
        Set to Dictionary   ${body}    removedResourceUris=${tempList}
        ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \n- LSG-56xx-1  removed from scope succesfully

        log to console  \n-FILTERING LSG W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     S1  S2
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-switch-groups     ${x}

        log to console  \n-FILTERING LSG W.R.T ANY SCOPES
        ${NameList} =   Filter By Any Scopes   logical-switch-groups     S1      S2


7. Add and Assign LS to Scope

        ${ls} =     Get Variable value  ${ls[0]}
        ${resp} =   Add LS from variable    ${ls}
        Log to console  ${resp['status_code']}
	    Run Keyword If  '${resp['status_code']}' != '202'   fail    ELSE  log to console  \n-LS  created successfully!


        log to console  \n Assigning LS-56xx to S1 and S2
        ${LSUri} =    Get LS URI     LS-56xx

        @{scope_name} =   Create List   S1  S2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${LSUri}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \n-LS  assigned to scopes successfully


        log to console  \n-FILTERING LS W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     S1  S2
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-switches     ${x}

        log to console  \n-FILTERING W.R.T All SCOPES
        ${NameList} =   Filter By All Scopes   logical-switches     S1      S2

8. ASSIGNING SWITCHES TO S1 AND S2

        log to console  \n Assigning switchIP to S1 and S2
        ${SWUri} =    Get Switch URI    ${SwitchIp}     

        @{scope_name} =   Create List   S1  S2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =  Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${SWUri}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \n-Switch  assigned to scopes successfully


        log to console  \n-FILTERING LS W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     S1  S2
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   switches     ${x}

        log to console  \n-FILTERING W.R.T All SCOPES
        ${NameList} =   Filter By All Scopes   switches     S1      S2