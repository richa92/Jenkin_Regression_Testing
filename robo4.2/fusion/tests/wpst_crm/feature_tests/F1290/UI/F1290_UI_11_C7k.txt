*** Settings ***
Documentation      Continuous Integration Tests for RoboGalaxy dev Branch
Resource           F1290-OVAConfig.txt
Force Tags         Buildup
Suite Setup         Load Test Data and Open Browser
Suite Teardown      Cleanup Appliance and Logout And Close All Browsers

*** Test Cases ***

Scopes

    Set Log Level    TRACE
    Log Variables

    #PreRequisites: Import enc and create Network resources
    ${user} =  Get Data By Property  ${TestData.users}  name  Administrator
    Fusion UI Login to Appliance   ${user[0].name}

    Fusion UI Delete All Scopes
    Fusion UI Delete All Appliance Networks
    Fusion UI Remove User   @{TestData.users}
    Fusion UI Remove All Enclosures
    Fusion UI Remove All Enclosure Groups
    Fusion UI Remove All Logical Interconnect Groups
    Fusion UI Delete All Network Sets

Step1: Create less privileged users
    Fusion UI Create User   @{TestData.users}
    Log to console  \nUser Groups has been created.

Step2: Create 15 scopes with maximum characters in name and description

    :FOR    ${index}    IN RANGE    1   16
    \   ${scope_name}       Run Keyword If      ${index} < 10   Set Variable With Zero  ${index}    ${TestData.maxscopes[0].name}
    \   ...                 ELSE        Set Variable Without Zero       ${index}        ${TestData.maxscopes[0].name}
    \   ${scope_desc}       Run Keyword If      ${index} < 10       Set Variable With Zero      ${index}    ${TestData.maxscopes[0].description}
    \   ...                 ELSE                    Set Variable Without Zero          ${index}    ${TestData.maxscopes[0].description}
    \   ${scope_dict}       Create Dictionary   name=${scope_name}      description=${scope_desc}
    \   ${scopes_created}       Fusion UI Create Scope      ${scope_dict}
    \   Run Keyword If      '${scopes_created}' == 'True'       Log to Console  'Scope created sucessfully'     ELSE        fail
    \   ${scopes_name_val}      Fusion UI Get Scope Name
    \   Should Be Equal As Strings      ${scope_name}       ${scopes_name_val}
    \   ${scopes_desc_val}      Fusion UI Get Scope Description
    \   Should Be Equal As Strings      ${scope_desc}       ${scopes_desc_val}

Step : 2b Create a Scopes with 101 characters in Name and 1025 characters in Description to check the boundary values

    ${scope_name}       Set Variable Without Zero     ${val}    ${TestData.maxscopes[0].name}
    ${scope_desc}       Set Variable Without Zero     ${val}    ${TestData.maxscopes[0].description}
    ${scopes_created}   Fusion UI Create Scope Boundary Check    ${scope_name}     ${TestData.maxscopes[1]}
    Run Keyword If      '${scopes_created}' == 'True'     Log to Console  'Scope created sucessfully'          ELSE       fail
    ${scopes_name_val}      Fusion UI Get Scope Name
    Log to Console  \nScope Desc is ${scopes_name_val}
    Should Not Be Equal As Strings      ${TestData.maxscopes[1].name}   ${scopes_name_val}
    Should Be Equal As Strings      ${scope_name}   ${scopes_name_val}
    ${scopes_desc_val}      Fusion UI Get Scope Description
    Log to Console  \nScope Desc is ${scopes_desc_val}
    Should Not Be Equal As Strings      ${TestData.maxscopes[1].description}   ${scopes_desc_val}
    Should Be Equal As Strings      ${scope_desc}   ${scopes_desc_val}

Step3: Logging out Administrator user
    Fusion UI Logout of Appliance

Step4: Login as server Admin
    ${user} =  Get Data By Property  ${TestData.users}  name  ServerAdmin
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

Step5: Login as network admin
    ${user} =  Get Data By Property  ${TestData.users}  name  NetworkAdmin
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

Step6: Login as Backup Admin
    ${user} =  Get Data By Property  ${TestData.users}  name  BackupAdmin
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

Step7: Login as Storage Admin
    ${user} =  Get Data By Property  ${TestData.users}  name  StorageAdmin
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

Step8: Login as Software Admin
    ${user} =  Get Data By Property  ${TestData.users}  name  SoftwareAdmin
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

Step8: Login as Read only
    ${user} =  Get Data By Property  ${TestData.users}  name  ReadOnly
    Log to console  \n users: ${user}
    Fusion UI Login to Appliance   ${user[0].name}
    ${Return}       Fusion UI Validate Privilege For Users
    Run Keyword If      '${Return}' == 'True'   Log to console  \n user: ${user[0].name} has no privilege on scope
    ...         ELSE    FAIL

*** keywords ***

Set Variable With Zero

    [Arguments]     ${index}        ${var}
    ${scope_name}       set variable        ${var}${0}${index}
    [Return]    ${scope_name}

Set Variable Without Zero

    [Arguments]     ${index}        ${var}
    ${scope_name}       set variable        ${var}${index}
    [Return]    ${scope_name}




