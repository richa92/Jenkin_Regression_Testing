*** Settings ***
Documentation      Scope using FusionLibrary API keywords
Variables          data_variables.py
Resource			resource.txt
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
Library         String
Library         re
#Suite Teardown		Suite Teardown

*** Variables ***
${APPLIANCE_IP}     15.245.131.62
${scopename}    Scope1
${scopeuri}     /rest/scopes/c0246b64-e83c-4240-a2b8-5d01f64a930
${etag}     2016-01-29T06:12:38.695Z/2016-01-29T06:12:38.6
${scope1_name}  Scope1
${scope2_name}  Scope2

*** Test Cases ***

1. Login to the Appliance

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp} =	Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials_TB}


    Remove All Scopes
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

      

6. Enclosure Based Resource Assignment & Create Scope
	
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    
	${ligs} = 	Copy List	${LIGS_TB}
    
	:FOR	${lig}	IN	@{ligs}
	\   ${ligs} =   Get Variable Value    ${lig}
	\   ${resp} =   Add LIG from variable   ${ligs}
    \   ${task} =	Wait For Task	${resp} 	60s	2s
	\   Run Keyword If	'${resp['status_code']}' != '202'   FAIL    ELSE    Log to Console  \n-LIG got created successfully

6.1 EG creation
	
	${enc_group} =		Get Variable Value	${enc_group_TB}
	${resp} =   Add Enclosure Group TB from variable   ${enc_group}

	Run Keyword If	'${resp['status_code']}' != '201'	FAIL	ELSE 	Log to Console  \n-EG got created successfully

6.2 Adding LE	

	${LES}      Get Variable Value	${les}
    Log to Console  \n${LES} 
	${resp} =	Add Logical Enclosure from variable		${LES}
    Log to Console  \nresp is ${resp}
	${task}     Wait For Task1	${resp} 	45m 10s
    
	Run Keyword If  '${resp['status_code']}' != '202'	FAIL	ELSE 	Log to Console  \n-LE  created successfully


6.3 Creating Scope

   Log to console    \n-Creating Scopes
   ${scopes} =     Copy List   ${scopes}
   :FOR    ${scope}    IN  @{scopes}
   \   ${scope} =  Get Variable value  ${scope}
   \   ${resp} =   Fusion Api Create Scope     ${scope}

6.4 Assigning LIG Resource to Scopes

   Log to console  \n-2 different LIGs - LIG1 and LIG2 are added to the same scope - Scope1
   @{Lig_name} =   Create List     LIG1    LIG2
   ${LIG_Uris} = 	Create List
   :FOR    ${x}    IN      @{Lig_name}
   \   ${LIGUri} =    Get LIG URI     ${x}
   \   Append to List      ${LIG_Uris}  ${LIGUri}
   ${ScopeUri} =    Get Scope URI   Scope1
   ${body1} =   Get Variable value  ${scope_put}
   ${body} =   Copy Dictionary     ${body1}
   Set to Dictionary   ${body}    name=Scope1
   log to console   \n the body is:${body}
   ${len} =    Get Length  ${LIG_Uris}
   :FOR    ${x}    IN RANGE    0   ${len}
   \   ${tempList} =   Create List     ${LIG_Uris[${x}]}
   \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
   \   log to console    \n the body inside for loop is:${body}
   \   ${resp} =    fusion_api_edit_scope    body=${body}     uri=${ScopeUri}
   \   log to console  \n resp is :${resp}
   \   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-LIG got assigned to scopes successfully


6.5 Filtering LIG by Scopes

   log to console  \n-FILTERING LIG W.R.T ANY SCOPE
   ${NameList} =   Filter By Any Scopes   logical-interconnect-groups     ${scope1_name}      ${scope2_name}

   log to console  \n-FILTERING LIG W.R.T INDIVIDUAL SCOPE
   @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
   :FOR    ${x}    IN      @{scopename}
   \   ${resp} =   Filter by   logical-interconnect-groups     ${x}


6.6 Removing LIG from Scopes

   log to console  \n Removing LIG1 from Scope1
   ${LIGUri} =    Get LIG URI     LIG1
   ${ScopeUri} =    Get Scope URI   Scope1
   ${ScopeGet} =    fusion_api_get_scope
   ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers

   ${body1} =   Get Variable value  ${scope_removeresources}
   ${body} =   Copy List     ${body1}
   ${tempList} =   Create List     ${LIGUri}
   Set to Dictionary   ${body[0]}    value=${tempList}
   log to console   \n body is :${body}
   ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
   Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
   log to console  \n the new headers :${Temp_headers}
   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri}    headers=${Temp_headers}
   log to console  \n${resp}
   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \n-LIG got removed from scope successfully

6.7 Filtering LIG after removing the Resource

   log to console  \n-FILTERING LIG W.R TO ANY SCOPE
   ${NameList} =   Filter By Any Scopes   logical-interconnect-groups     ${scope1_name}      ${scope2_name}

   log to console  \n-FILTERING LIG W.R.T INDIVIDUAL SCOPE
   @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
   :FOR    ${x}    IN      @{scopename}
   \   ${resp} =   Filter by   logical-interconnect-groups     ${x}


6.8 Assigning LI Resources to single Scopes

    Log to console  \n Assigning LE_1-LIG1 to Scope1 
    ${LIUri} =    Get LI URI    LE1-LIG1
    @{scope_name} =   Create List   Scope1  
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    ${body1} =   Get Variable value  ${scope_assignresources}
    ${body} =   Copy List     ${body1}
    ${len} =    Get Length  ${Scope_Uris}
    :FOR    ${x}    IN RANGE   0   ${len}
    \   ${tempList} =   Get Variable Value     ${LIUri}
    \   Set to Dictionary   ${body[0]}    value=${tempList}
    \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}    headers=${Temp_headers}
    \   log to console  \n${resp}
    \   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-LI  assigned to scopes successfully


6.9 Assigning LI Resource to Scopes - LE1-LIG1 to both Scope1 and Scope2

    log to console  \n Assigning LE1LIG1 to both Scope1 and  to Scope2
    @{Li_name} =   Create List  LE1-LIG1    LE1-LIG1  	    
    ${LI_Uris} = 	Create List
    :FOR    ${x}    IN      @{Li_name}
    \   ${LIUri} =    Get LI URI     ${x}
    \   Append to List      ${LI_Uris}  ${LIUri}
    @{scope_name} =   Create List   Scope1      Scope2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}
    ${body1} =   Get Variable value  ${scope_put}
    ${body} =   Copy Dictionary     ${body1}
    ${len} =    Get Length  ${Scope_Uris}
    :FOR    ${x}    IN RANGE   0   ${len}
    \   ${tempList} =   Create List     ${LI_Uris[${x}]}
    \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
    \   Set to Dictionary   ${body}    name=${scope_name[${x}]}
    \   log to console  \n body is :${body}
    \   ${resp} =    fusion_api_edit_scope     body=${body}     uri=${Scope_Uris[${x}]}
    \   log to console  \n${resp}
    \   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-LI  assigned to scopes successfully


6.10 Filtering LI by Scopes

    log to console  \n-FILTERING LI W.R.T INDIVIDUAL SCOPE
    @{scopename} =  Create List     Scope1  Scope2
    :FOR    ${x}    IN      @{scopename}
    \   ${resp} =   Filter by   logical-interconnects     ${x}

    log to console  \n-FILTERING W.R.T ANY SCOPES
    ${NameList} =   Filter By Any Scopes   logical-interconnects     Scope1     Scope2

    log to console  \n-FILTERING W.R.T All SCOPES
    ${NameList} =   Filter By All Scopes   logical-interconnects     Scope1     Scope2


6.11 Assigning Interconnects Resource to Scopes

    Log to console  Assigning both the Interconnects to the Scope1

    @{IC_name} =   Create List    CN754404R2, interconnect 3    CN754404R2, interconnect 6
    ${IC_Uris} = 	Create List
    :FOR    ${x}    IN      @{IC_name}
    \   ${ICUri} =    Get IC URI     ${x}
    \   Append to List      ${IC_Uris}  ${ICUri}
    ${ScopeUri} =    Get Scope URI     Scope1
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    ${body1} =   Get Variable value  ${scope_assignresources}
    ${body} =   Copy List     ${body1}
    ${len} =    Get Length  ${IC_Uris}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${tempList} =   Get Variable Value     ${IC_Uris[${x}]}
    \   Set to Dictionary   ${body[0]}    value=${tempList}
    \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri}
    \   log to console  \n${resp}
    \   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-Interconnect  assigned to scopes successfully
    

6.12 Filtering Interconnects by Scopes

    log to console  \n-FILTERING Interconnects W.R.T SCOPES
    @{scopename} =  Create List     Scope1  Scope2
    :FOR    ${x}    IN      @{scopename}
    \   ${resp} =   Filter by   interconnects     ${x}


    log to console  \n-FILTERING IC W.R.T ANY SCOPE
    ${NameList} =   Filter By Any Scopes   interconnects     Scope1      Scope2


6.13 Assigning Server Hardware Resources to Scopes

    @{SH_name} =   Create List    CN754404R2, bay 1    CN754406W5, bay 3
    ${SH_Uris} = 	Create List
    :FOR    ${x}    IN      @{SH_name}
    \   ${SHUri} =     Get Server Hardware URI     ${x}
    \   Append to List      ${SH_Uris}  ${SHUri}
    @{scope_name} =   Create List   Scope1  Scope2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI   ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}
    ${body1} =   Get Variable Value  ${scope_put}
    ${body} =   Copy Dictionary     ${body1}
    ${len} =    Get Length  ${Scope_Uris}
    :FOR    ${x}    IN RANGE   0   ${len}
    \   ${tempList} =   Create List     ${SH_Uris[${x}]}
    \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
    \   Set to Dictionary   ${body}    name=${scope_name[${x}]}
    \   log to console  body is :${body}
    \   ${resp} =    fusion_api_edit_scope     body=${body}     uri=${Scope_Uris[${x}]}
    \   log to console  \n${resp}
    \   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-Server Hardware got assigned to scopes successfully

6.14 Filtering Server Hardware by Scopes

    log to console  \n-FILTERING SERVER HARDWARE W.R.T SCOPE
    @{scopename} =  Create List     Scope1  Scope2
    :FOR    ${x}    IN      @{scopename}
    \   ${resp} =   Filter by   server-hardware     ${x}


    log to console  \n-FILTERING SERVER HARDWARE W.R.T ANY SCOPE
    ${NameList} =   Filter By Any Scopes   server-hardware     Scope1      Scope2



6.15 Removing Server Hardware from Scope

    Log to console  \n-Removing CN754404R2, bay 1 from Scope1
    ${SHUri} =    Get Server Hardware URI     CN754404R2, bay 1
    ${ScopeUri} =    Get Scope URI   Scope1
    ${body1} =   Get Variable value  ${scope_removeresources}
    ${body} =   Copy List     ${body1}
    ${tempList} =   Create List     ${SHUri}
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    Set to Dictionary   ${body[0]}    value=${tempList}
    ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri}    headers=${Temp_headers}
    log to console  \n${resp}
    Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-Server Hardware got removed from scope successfully

6.16 Filtering Server Hardware by Scopes

    log to console  \n-FILTERING SERVER HARDWARE W.R.T SCOPE AFTER REMOVING
    ${NameList} =   Filter By Any Scopes   server-hardware     Scope1   Scope2

6.17 Appliance cleanup

    Remove All Scopes


2. Network Scenario 

    Remove All Scopes
    
	:FOR   ${scope}   IN   @{scope_1}
    \   ${resp}        Fusion Api Create Scope    ${scope}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nScope Created successfully

2.1 Create and Assign FC Network Resource to Scope

    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log to console    \n-Creating FC Networks
    ${uriList} =   Create List
    :FOR   ${fcnet}   IN   @{fcnets}
    \   ${resp}        Fusion Api Create Fc Network   body=${fcnet}
    \   log to console  \nthe resp for FC creation is:${resp}
    \   ${fc_name} =	Get From Dictionary   ${fcnet}   name
    \   ${uri} =	Get FC URI    ${fc_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}

    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}

    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}


	${body} =   Get Variable value  ${scope_assignresources}
	${assign_res} =	Copy List		${body}

	Log to console  \n ASSIGNING FC NETWORK RESOURCES TO SCOPE1 and SCOPE2 RESPECTIVELY
	${len} =    Get Length  ${Scope_Uris}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Get Variable Value     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}    headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFC Network got added to scope successfully

	Log to console  \n Displaying Resources assigned to each scope.

	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	fc-networks		${x}

2.2 REMOVING FC NETWORK RESOURCE FROM SCOPE

    [Tags]  add   POSITIVE
    Set Log Level    TRACE

	Log to console	\n REMOVING FC NETWORK RESOURCE FROM SCOPE1
	${ScopeUri} =    Get Scope URI     S1
	${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${fcNetUri} =    Get FC URI     FC1
	${removelist} =	Create List    ${fcNetUri}
	${body} =	Get Variable value  ${scope_removeresources}
	${remove_res}    Copy List    ${body}
    @{scope_name} =   Create List   S1  S2
    Set to Dictionary	${remove_res[0]}		value=${removelist}
	${resp}		fusion_api_patch_scope		body=${remove_res}		uri=${ScopeUri}    headers=${Temp_headers}
	Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFC Network got removed from scope successfully

	Log to console  \n FILTER- Displaying FC NETWORK Resources from each scope after removing a resource from scope1

	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	fc-networks		${x}

2.3 Create and Assign FCoE Network Resource to Scope

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log to console    \n-Creating FCoE Networks

    ${uriList} =   Create List
    :FOR   ${fcoenet}   IN   @{fcoenets}
    \   ${resp}        Fusion Api Create Fcoe Network   body=${fcoenet}
    \   ${fcoe_name}        Get From Dictionary   ${fcoenet}   name
    \   ${uri}        Get FCoE URI    ${fcoe_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    \	Log to console    \n-FCoE network-${fcoe_name} got created successfully!

    ${ScopeUri} =    Get Scope URI     S1
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${body} =	Get Variable value		${scope_assignresources}
	${assign_res} =   Copy list		${body}

	Log to console  \n ASSIGNING FCoE NETWORK RESOURCES TO SCOPES
	${len} =    Get Length  ${uriList}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Get Variable Value     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${ScopeUri}    headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFCoE Network got added to scope successfully

	Log to console  \n FILTER- FCoE NETWORK RESOURCES FROM SCOPE1
	${resp} =	Filter By	fcoe-networks		S1


2.4 REMOVING FCoE NETWORK FROM SCOPE

	[Tags]  add   POSITIVE
    Set Log Level    TRACE
	Log to console    \nRemoving FCoE Networks

	${scopeuri} =	Get Scope URI	S1
	${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${fcoeuri} =	Get FCoE URI	FCoE1
	${templist}    Create List    ${fcoeuri}
	${body} =	Get Variable value    ${scope_removeresources}
	${rm_body} =	Copy List    ${body}
    Set to Dictionary		${rm_body[0]}		value=${templist}
    ${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${scopeuri}    headers=${Temp_headers}
	Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFCoE Network got removed from scope successfully!

	Log to console	\n FILTER SCOPE AFTER REMOVING a FCoE RESOURCE FROM SCOPE1
	${resp} =	Filter By	fcoe-networks		S1
    Log to console	\nRemaining Resources Present in Scope1:${resp}

2.5 Create and Assign Ethernet Network to Scope

    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log to console    \n-Creating Ethernet Networks
    ${uriList} =   Create List
    :FOR   ${ethnet}   IN   @{ethnets}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   ${eth_name}        Get From Dictionary   ${ethnet}   name
    \   ${uri}        Get Ethernet URI    ${eth_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    Log to console    \n-Ethernet networks got created successfully!

    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}

    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${body} =   Get Variable value  ${scope_assignresources}
    ${assign_res} =		Copy List		${body}

	Log to console  \n ASSIGNING ETHERNET NETWORK RESOURCES TO SCOPES
	${len} =    Get Length  ${Scope_Uris}

	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList}    Get Variable Value		${uriList[${x}]}
	\   Log to console  ${tempList}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}    headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nEthernet Network got added to scope successfully


	Log to console  \n FILTER ETHERNET NETWORK RESOURCES FROM SCOPES (which is common to both the scopes will be displayed)
	${resp} =	Filter By All Scopes	ethernet-networks		S1		S2


	Log to console	\n Displaying the resources from each scope

	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	ethernet-networks	${x}


2.6 REMOVING Ethernet Network FROM SCOPE

	Log to console    \n-Removing Ethernet Networks

	${scopeuri} =	Get Scope URI	S1
	${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${eneturi} =	Get Ethernet URI	Net1
	${templist} =		Create List		${eneturi}
	${body} =	Get Variable value		${scope_removeresources}
	${rm_body} =	Copy List		${body}
	Set to Dictionary		${rm_body[0]}		value=${templist}

	${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${scopeuri}    headers=${Temp_headers}
	Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nEthernet Network got removed from scope successfully!

	Log to console	\n FILTER SCOPE AFTER REMOVING a Net1 RESOURCE FROM SCOPE1 and DISPLAYING ALL SCOPES
	${resp} =	Filter By All Scopes	ethernet-networks		S1		S2


	@{scope_name} =   Create List   S1  S2
	Log to console	\n After removing Net1 from Scope1 Displaying the resources from each scope
	:FOR	${x}	IN		@{scope_name}
	\	${resp} =	Filter By	ethernet-networks	${x}

2.7 Create and Assign Network Sets to Scope

    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log to console    \n-Creating Network Sets

	${uriList} =   Create List
    :FOR   ${ethnetset}   IN   @{ethnetsets}
    \   ${resp}        Fusion Api Create Network Set   body=${ethnetset}
    \   ${ethset_name}        Get From Dictionary   ${ethnetset}   name
    \   ${uri}        Get Network Set URI    ${ethset_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    \	Log to console    \n-Ethernet NetworkSet-${ethset_name} got created successfully!

    @{scope_name} =   Create List   S1  S2
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   Append to List      ${Scope_Uris}  ${ScopeUri}

    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${body} =   Get Variable value  ${scope_assignresources}
	${assign_res} =		Copy List		${body}

	Log to console  \n ASSIGNING NETWORK SETS RESOURCES TO SCOPES
	${len} =    Get Length  ${Scope_Uris}

	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Get Variable Value     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}    headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nNetworkSet got added to scope successfully

	Log to console  \n FILTER NETWORK SET RESOURCE USING SCOPE1 OR SCOPE2
	${resp} =	Filter By Any Scopes	network-sets	S1	S2

2.8 REMOVING Network Set FROM SCOPE

	[Tags]  add   POSITIVE
        Set Log Level    TRACE
	Log to console    \nRemoving Network set

	${scopeuri} =	Get Scope URI	S1
	${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}

	${netseturi} =	Get Network Set URI		EthNetSet1
	${templist} =		Create List		${netseturi}
	${body} =	Get Variable value		${scope_removeresources}
	${rm_body} =	Copy List		${body}
    Set to Dictionary		${rm_body[0]}		value=${templist}

	${resp}		fusion_api_patch_scope		body=${rm_body}		uri=${scopeuri}    headers=${Temp_headers}
	Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nNetworkSet got removed from scope successfully!

	Log to console  \n FILTER AFTER REMOVING NETWORK SET RESOURCE FROM SCOPE1
	${resp} =	Filter By Any Scopes	network-sets	S1	S2

	Log to console	\nDisplaying the remaining resources which is assigned to the scopes

	@{scopename} =	Create List		S1	S2
	:FOR	${scope}	IN		@{scopename}
	\	${resp} =	Filter By	network-sets	${scope}

*** Test Cases ***
2.9 Cleanup the Appliance

    Remove All Scopes
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

3. Activity Validation 

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log to console    \n-Creating Scopes
	${scope} =  Get Variable Value  ${scope_2}
	${resp} =   Fusion Api Create Scope     ${scope}
	Run Keyword If  '${resp['status_code']}' != '202'   FAIL ${resp}    ELSE  log to console  \n-Scopes got created successfully!
	${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
	log to console	task uri is :${task1}
   
    Sleep    5s
    
	${task} =   Fusion Api Get Task     uri=${task1}
	Log to console  \nThe task resp is :${task}
    
    ${msg} =    Get Variable value  ${task['taskStatus']}
    Log to console  \nThe task resp is :${msg}
    Should Match Regexp	${msg}	((?i)Create|Updated|Assigned)


3.1 Create and Assign FC Network Resource to Scope

    Log to console    \n-Creating FC Networks
    ${uriList} =   Create List
    :FOR   ${fcnet}   IN   @{fcnets}
    \   ${resp}        Fusion Api Create Fc Network   body=${fcnet}
    \   ${fc_name} =	Get From Dictionary   ${fcnet}   name
    \   ${uri} =	Get FC URI    ${fc_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    log to console  \nappended fc uris is:${uriList}
	@{scope_name} =   Create List   ScopeTest
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   ${ScopeGet} =    fusion_api_get_scope
    \   log to console  \nthe resp of get scope is:${ScopeGet}
    \   ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    \   Log to console  \n scope uri is:${ScopeUri}
    \   Log to console  \n scope headers is:${ScopeHeaders}
	\   Append to List      ${Scope_Uris}    ${ScopeUri}
	${body} =   Get Variable value  ${scope_assignresources}
	${assign_res} =	Copy List		${body}
	Log to console  \n ASSIGNING FC NETWORK RESOURCES TO SCOPE${assign_res}
	${len} =    Get Length  ${Scope_Uris}
    log to console  \n length is :${len}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =    Get Variable Value    ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
    \   ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    \   Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}  headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFC Network got added to scope successfully
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
	${str1} =	Convert To Lowercase	${task1}
	${task} =   Fusion Api Get Task     uri=${str1}
	${msg} =    Get Variable value  ${task['taskStatus']}
    Log to console  \n The activity message for the task is - ${msg}
	Should Match Regexp	${msg}	((?i)Created|Add|Update|Assigned)


3.2 Assigning FC again to the same scope

    Log to console    \n-Creating FC Networks
    ${uriList} =   Create List
    :FOR   ${fcnet}   IN   @{fcnets}
    \   ${resp}        Fusion Api Create Fc Network   body=${fcnet}
    \   ${fc_name} =	Get From Dictionary   ${fcnet}   name
    \   ${uri} =	Get FC URI    ${fc_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}

    @{scope_name} =   Create List   ScopeTest
    ${Scope_Uris} = 	Create List
    :FOR    ${x}    IN      @{scope_name}
    \   ${ScopeUri} =    Get Scope URI     ${x}
    \   ${ScopeGet} =    fusion_api_get_scope
    \   ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
	\   Append to List      ${Scope_Uris}  ${ScopeUri}
	${body} =   Get Variable value  ${scope_assignresources}
	${assign_res} =	Copy List		${body}

	Log to console  \n ASSIGNING FC NETWORK RESOURCES TO THE SCOPE FOR SECOND TIME
	${len} =    Get Length  ${Scope_Uris}
	:FOR    ${x}    IN RANGE   0   ${len}
	\   ${tempList} =   Get Variable Value     ${uriList[${x}]}
	\   Set to Dictionary   ${assign_res[0]}    value=${tempList}
    \   ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    \   Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
	\   ${resp} =    fusion_api_patch_scope     body=${assign_res}     uri=${Scope_Uris[${x}]}  headers=${Temp_headers}
	\   Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \nFC Network got added to scope successfully
    
    ${task} =	Wait For Task1	${resp}		60s
     
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
	${str1} =	Convert To Lowercase	${task1}
	${task} =   Fusion Api Get Task     uri=${str1}
	${msg} =    Get Variable value  ${task['taskStatus']}
    Log to console  \n The activity message for the task is - ${msg}
	Should Match Regexp	${msg}	((?i)Created|Add|Assigned)


3.3 REMOVING FC NETWORK RESOURCE FROM SCOPE

	log to console  \n Removing FC1 from ScopeTest
    ${fcNetUri} =    Get FC URI     FC1
    ${ScopeUri} =    Get Scope URI     ScopeTest
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    
    ${body1} =   Get Variable value  ${scope_removeresources}
    ${body} =   Copy List     ${body1}
    Log to console  \n scope body for remove is:${body}
    ${tempList} =   Create List     ${fcNetUri}
    Set to Dictionary   ${body[0]}    value=${tempList}
    Log to console  \n new scope body for remove is:${body}
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri}  headers=${Temp_headers}
    Log to console  \nresp for patch is${resp}
    Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console  \n-FC1 got removed from scope successfully
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
	${str1} =	Convert To Lowercase	${task1}
	${task} =   Fusion Api Get Task     uri=${str1}
	${msg} =    Get Variable value  ${task['taskStatus']}
    Log to console  \n The activity message for the task is - ${msg}
    Should Match Regexp	${msg}	((?i)Created|Add|Assigned|Remove)


3.4 Assigning and Removing LIG FCOE TO SCOPE

	${ligs} = 	Copy List	${LIGS_TB}
	:FOR	${lig}	IN	@{ligs}
	\   ${ligs} =   Get Variable Value    ${lig}
	\   ${resp} =   Add LIG from variable   ${ligs}
    \   ${task} =	Wait For Task	${resp} 	60s	2s
	\   Run Keyword If	'${resp['status_code']}' != '202'   FAIL    ELSE    Log to Console  \n-LIG got created successfully
    
    ${uriList} =   Create List
    :FOR   ${fcoenet}   IN   @{fcoenets}
    \   ${resp}        Fusion Api Create Fcoe Network   body=${fcoenet}
    \   ${fcoe_name}        Get From Dictionary   ${fcoenet}   name
    \   ${uri}        Get FCoE URI    ${fcoe_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${uriList}   ${uri}
    \	Log to console    \n-FCoE network-${fcoe_name} got created successfully!

    Log to console  \ Assigning LIG1 & FCOE  - ScopeTest

    ${list_Uris} = 	Create List
    ${FCoe_Uri} =   Get FCoE URI    ${fcoe_name}
    Append to List      ${list_Uris}  ${FCoe_uri}
    ${LIG_Uri} =    Get LIG URI     LIG1
    Append to List      ${list_Uris}  ${LIG_Uri}
    ${ScopeUri} =    Get Scope URI     ScopeTest
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${body1} =   Get Variable value  ${scope_put}
    ${body} =   Copy Dictionary     ${body1}
    
    Set to Dictionary   ${body}    addedResourceUris=${list_Uris}
    Set to Dictionary   ${body}    name=ScopeTest
    ${resp}     fusion_api_edit_scope      body=${body}    uri=${ScopeUri}
    Log to console  \nPut output is:${resp}
    Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-LIG and FCoE got assigned to scopes successfully
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
    log to console  \n the task uri is:${task1}
	${str1} =	Convert To Lowercase	${task1}
	${task} =   Fusion Api Get Task     uri=${str1}
	${msg} =    Get Variable value  ${task['taskStatus']}
    Log to console  \n The activity message for the task is - ${msg}
	Should Match Regexp	${msg}	((?i)Created|Add|Update|Assigned|Remove)
    
    Log to console  \Removing LIG1 & FCOE  - ScopeTest

    ${list_Uris} = 	Create List
    ${FCoe_Uri} =   Get FCoE URI    ${fcoe_name}
    Append to List      ${list_Uris}  ${FCoe_uri}
    ${LIG_Uri} =    Get LIG URI     LIG1
    Append to List      ${list_Uris}  ${LIG_Uri}
    ${ScopeUri} =    Get Scope URI     ScopeTest
    ${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    
	${body1} =   Get Variable value  ${scope_removeresources}
    ${body} =   Copy List     ${body1}
    Set to Dictionary   ${body[0]}    value=${list_Uris}
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
	Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    ${resp}     fusion_api_patch_scope      body=${body}    uri=${ScopeUri}    headers=${Temp_headers}

    Run Keyword If  '${resp['status_code']}' != '202'  FAIL    ELSE  log to console   \n-LIG and FCoE got removed from scopes successfully
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
	${str1} =	Convert To Lowercase	${task1}
	${task} =   Fusion Api Get Task     uri=${str1}
	${msg} =    Get Variable value  ${task['taskStatus']}
	Log to console  \n The activity message for the task is - ${msg}
	Should Match Regexp	${msg}	((?i)Created|Add|Update|Assigned|Remove)


3.5 Removing Scope

    log to console  REMOVING THE SCOPE
    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${Headers_temp}     Copy Dictionary     ${headers}
    :FOR	${scope}	IN	@{scopes['members']}
	\		Log to console	\nRemoving ${scope['name']}
    \       ${eTag}    Get From Dictionary     ${scope}  eTag
	\       ${headers_new}    Set To Dictionary	${Headers_temp}	If-Match=${eTag}
    \		${resp} =   Fusion Api Delete Scope     uri=${scope['uri']}     headers=${headers_new}


    ${task} =	Wait For Task1	${resp}		60s
    ${task1} =   Get Variable value     ${resp['headers']['x-task-uri']}
    ${task} =   Fusion Api Get Task     uri=${task1}
	${msg} =    Get Variable value  ${task['name']}
	Log to console  \n The activity message for the task is - ${msg}
	Should Match Regexp	${msg}	((?i)Created|Add|Assigned|Delete)

3.6 Cleanup the Appliance for Activity Validation

    Remove All Scopes
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL LIGs


4. Negative scenarios - Creating Duplicate Scope

    [Documentation]     NEGATIVE SCENARIO WITH DUPLICATE SCOPE NAME
    ${scope} =  Get Variable value  ${scopes[0]}
    
    # Creating a scope at initial stage
    ${resp}     Fusion Api Create Scope  ${scope}
    log to console  \nr is:${resp}
    ${task} =	Wait For Task1	${resp}		60s
    
    # Trying to create a scope with same name which is already exist
    ${resp}     Fusion Api Create Scope  ${scope}
    log to console  \nr2 is:${resp}
    Run Keyword If  '${resp['status_code']}' == '409'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL
    Run Keyword If  '${resp['errorCode']}' == 'DUPLICATE_SCOPE_NAME_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    ...             ELSE    FAIL

4.1 Create with Invalid Scope

    ${scope} =  Get Variable value  ${scopes[0]}
    Set to Dictionary   ${scope}    name=scope_test

    ${resp}     Fusion Api Create Scope     ${scope}

    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope created.

    Run Keyword If  '${resp['errorCode']}' == 'INVALID_SCOPE_NAME_ERROR'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    ...             ELSE    FAIL

Presetup for delete and edit

    ${resp} =   Remove All Scopes
    ${scope} =  Get Variable value  ${scopes[0]}
    ${resp}     Fusion Api Create Scope  ${scope}

Delete Scope with invalid URI

    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${Headers_temp}     Copy Dictionary     ${headers}
    :FOR	${scope}	IN	@{scopes['members']}
	\       ${eTag}    Get From Dictionary     ${scope}  eTag
	\       ${headers_new}    Set To Dictionary	${Headers_temp}	If-Match=${eTag}
    \		${resp} =   Fusion Api Delete Scope     uri=${scopeuri}     headers=${headers_new}
    \    Run Keyword If  '${resp['status_code']}' == '404'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope created.
    \    Run Keyword If  '${resp['errorCode']}' == 'RESOURCE_NOT_FOUND'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['details']}\n
    \    ...             ELSE    FAIL

Delete with Invalid eTag
    [Documentation]     Negative Scenario
    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${temp_headers}   Copy Dictionary   ${h
    aders}
    :FOR	${scope}	IN	@{scopes['members']}
	\		Log to console	\nRemoving ${scope['name']}
    \       ${headers_new}    Set To Dictionary	${temp_headers}	If-Match=${etag}
    \		${resp} =   Fusion Api Delete Scope     uri=${scope['uri']}     headers=${headers_new}

    \    Run Keyword If  '${resp['status_code']}' == '412'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope edited.
    \    Run Keyword If  '${resp['errorCode']}' == 'ETAG_MISMATCH'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    \    ...             ELSE    FAIL


Delete without eTag

    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    :FOR	${scope}	IN	@{scopes['members']}
	\		Log to console	\nRemoving ${scope['name']}
	\		${resp} =   Fusion Api Delete Scope     uri=${scope['uri']}     headers=${headers}
    \   Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    \   ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope edited.
    \   Run Keyword If  '${resp['errorCode']}' == 'SERVLET_REQUEST_BINDING_ERROR'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['details']}\n
    \   ...             ELSE    FAIL


Edit Scope
    [Documentation]     Negative scenario with invalid scope
    ${scope}    Get Variable Value  ${scope_2}
    ${resp}     Fusion Api Create Scope  ${scope}
    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${temp_headers}   Copy Dictionary   ${headers}

    ${body} =  Get Scope Member     ${scopename}
    ${eTag}    Get From Dictionary     ${body}  eTag

    ${headers_new}    Set To Dictionary	${temp_headers}	If-Match=${eTag}
    Set to Dictionary   ${body}    name=Scope_1
    ${resp}     fusion_api_edit_scope   body=${body}    uri=${body['uri']}  headers=${headers_new}

    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope created.

    Run Keyword If  '${resp['errorCode']}' == 'INVALID_SCOPE_NAME_ERROR'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    ...             ELSE    FAIL



Edit with Invalid eTag
    [Documentation]     Negative Scenario
    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${temp_headers}   Copy Dictionary   ${headers}

    ${body} =  Get Scope Member	${scopename}
    ${headers_new}    Set To Dictionary	${temp_headers}	If-Match=${etag}
    Set to Dictionary   ${body}     description=editing the scope
    ${resp}     fusion_api_edit_scope   body=${body}    uri=${body['uri']}  headers=${headers_new}


    Run Keyword If  '${resp['status_code']}' == '412'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope edited.

    Run Keyword If  '${resp['errorCode']}' == 'ETAG_MISMATCH'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    ...             ELSE    FAIL


Edit without eTag
    [Documentation]     Negative Scenario
    ${scopes} =     Fusion Api Get Scope
    ${headers}  Get From Dictionary     ${scopes}  headers
    ${body} =  Get Scope Member     ${scopename}
    Set to Dictionary   ${body}     description=editing the scope
    ${resp}     fusion_api_edit_scope   body=${body}    uri=${body['uri']}  headers=${headers}

    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope edited.
    Run Keyword If  '${resp['errorCode']}' == 'SERVLET_REQUEST_BINDING_ERROR'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['details']}\n
    ...             ELSE    FAIL

4.3 Get Invalid Scope
    [Documentation]     NEGATIVE SCENARIO WITH INVALID SCOPE Uri
    ${resp}    Fusion Api Get Scope    uri=${scopeuri}

    Run Keyword If  '${resp['status_code']}' == '404'    Log to console  \nExpected FAILure! \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL    Log to console  \nUnexpected Behaviour! scope created.
    Run Keyword If  '${resp['errorCode']}' == 'RESOURCE_NOT_FOUND'   Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['details']}\n
    ...             ELSE    FAIL

5. Negative Scenario by Creating other Users

	Remove All Users

	:FOR	${i}	IN	@{users}
	\	${resp}     Fusion Api Add User    ${i}
	${resp}		Fusion Api Logout Appliance

5.1 Logging in as Server admin and trying to create a scope

	${scope} =  Get Variable value  ${scopes[0]}
	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin_credentials}
	${resp}     Fusion Api Create Scope  ${scope}
	
	Run Keyword If  '${resp['status_code']}' == '401'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'AUTHORIZATION'    Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

5.2 Logging in as Network admin and trying to create a scope

	${scope} =  Get Variable value  ${scopes[0]}
	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${network_admin}
	${resp}     Fusion Api Create Scope  ${scope}
	
	Run Keyword If  '${resp['status_code']}' == '401'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'AUTHORIZATION'    Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

5.3 Logging in as Backup admin and trying to create a scope

	${scope} =  Get Variable value  ${scopes[0]}
	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${backup_admin}
	${resp}     Fusion Api Create Scope  ${scope}
	
	Run Keyword If  '${resp['status_code']}' == '401'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'AUTHORIZATION'    Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

5.4 Logging in as Read only user and trying to create a scope

	${scope} =  Get Variable value  ${scopes[0]}
	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${readonly_user}
	${resp}     Fusion Api Create Scope  ${scope}
	
	Run Keyword If  '${resp['status_code']}' == '401'    Log to console  \n Expected FAILure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'AUTHORIZATION'    Log to console  \n Expected FAILure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

5.5 Removing All the Users and scopes

	Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials_TB}
    Remove All Users
    Remove All Scopes
    

7. Creating Scopes with Maximum Characters and Login

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
	
	:FOR	${i}	IN RANGE	0	10
	\	Set to Dictionary	${scope_1[0]}	name=Scopewith90charactersScopewith90charactersScopewith90charactersScopewith90charactersScopeScopeScope${i}
	\	${resp}		Fusion Api Create Scope		body=${scope_1[0]}
	\	Run Keyword If  '${resp['status_code']}' != '202'	FAIL	\n\nFAILed to create scope:${resp['message']}
	\	...				ELSE 	Log to console  \nSuccessfully created the scope with max characters: Scope${i}
      
7.1 Create Scope with Max lines of description

	[Tags]  add   POSITIVE
    Set Log Level    TRACE
		
	Set to Dictionary	${scope_1[1]}	description=Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section- Creating scopes with maximum 
	
	${resp}		Fusion Api Create Scope		body=${scope_1[1]}
	Run Keyword If  '${resp['status_code']}' != '202'	FAIL	\n\nFAILed to create scope: ${resp['message']}
	...				ELSE 	Log to console  \nSuccessfully created the scope with max characters in description


7.2 Assigning Bulk no.of Resources to a scope

	[Tags]  add   POSITIVE
    Set Log Level    TRACE
	Remove ALL Ethernet Networks
	
	${UriList} =	Create List
	${body} =	Get Variable value	${Bulk_enet}
	Set to Dictionary	${body}	vlanIdRange=2-1000
	
	${resp}		Fusion Api Create Ethernet Bulk Networks	body=${body}
    #Log to console	\n${resp}

	${task} =	Wait For Task	${resp}		600s	60s
	Log to console	\n-Bulk network created successfully	
	${networks} = 	Fusion Api Get Ethernet Networks
	:FOR	${net}	IN	@{networks['members']}
	\		Append to List	${UriList}	${net['uri']}
	
	${Scopeuri} =	Get Scope URI	S2
	${ScopeGet} =    fusion_api_get_scope
    ${ScopeHeaders} =  Get From Dictionary    ${ScopeGet}    headers
    ${Temp_headers}     Get Variable Value      ${ScopeHeaders}
    Set To Dictionary   ${Temp_headers}     Content-Type=${patch_headers}
    ${body} =	Get Variable value	${scope_put}
    Set to Dictionary   ${body}    name=ScopeTest
	Set to Dictionary	${body}    addedResourceUris=${UriList}
	
	${resp}		fusion_api_edit_scope		body=${body}	uri=${Scopeuri}
	${task} =	Wait For Task1	${resp}		720s	60s
		
	Log to console	\n-Displaying the assigned resources from scope
	${resp} =	Filter By	ethernet-networks	S2
	
    Remove All Scopes
	Remove ALL Ethernet Networks
*** Test Cases ***
8. Create Scope with 100 characters

    Remove All Scopes

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
	
	:FOR	${i}	IN RANGE	10	20
	\	Set to Dictionary	${scope_1[0]}	name=Scopewith90charactersScopewith90charactersScopewith90charactersScopewith90charactersScopeScopeScop${i}
	\	${resp}		Fusion Api Create Scope		body=${scope_1[0]}
	\	Run Keyword If  '${resp['status_code']}' != '202'	FAIL	\n\nFAILed to create scope:${resp['message']}
	\	...				ELSE 	Log to console  \nSuccessfully created the scope with max characters: Scope${i}
    
    Remove All Scopes

9. Create Maximum number of scopes

    [Tags]  add   POSITIVE
    Set Log Level    TRACE
	
	:FOR	${i}	IN RANGE	1	1001
	\	Set to Dictionary	${scope_1[0]}	name=Scopewith100charactersScopewith100charactersScopewith100charactersScopewith100charactersScopeone${i}
    \   Set to Dictionary	${scope_1[0]}	description=Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section-Creating scopes with maximum of 1024 characters in description section- Creating scopes with maximum
	\	${resp}		Fusion Api Create Scope		body=${scope_1[0]}
	\	Run Keyword If  '${resp['status_code']}' != '202'	FAIL	\n\nFAILed to create scope:${resp['message']}
	\	...				ELSE 	Log to console  \nSuccessfully created the scope with max characters
    
    Remove All Scopes   

*** Keywords ***

Get Scope Member
    [Documentation]     Negative Scenario
    [Arguments]     ${scopename}
    ${resp1}    Fusion Api Get Scope
    ${l} =     Get Length    ${resp1['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${scope} =  copy Dictionary        ${resp1['members'][${x}]}
    \   Run Keyword If     '${scope['name']}' == '${scopename}'     Exit For Loop
    [Return]	${scope}
    
    