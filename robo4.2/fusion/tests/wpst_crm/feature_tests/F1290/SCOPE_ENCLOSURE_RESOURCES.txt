*** Settings ***
Documentation   Scopes using FusionLibrary API keywords
Variables       ../F1290/data_variables.py
Library			json
Library			FusionLibrary
Library			RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource        ../F1290/resource.txt

*** Variables ***
${APPLIANCE_IP}     15.199.237.197
${scope1_name}      Scope1
${scope2_name}      Scope2

*** Test Cases ***

1. Login to Appliance and Create LIG

     [Tags]  add   POSITIVE
     Set Log Level	TRACE

        Fusion Api Login Appliance	${APPLIANCE_IP}		${admin_credentials}

	    ${ligs} = 	Copy List	${ligs}

	    :FOR	${lig}	IN	@{ligs}
	    \   ${ligs} =   Get Variable Value    ${lig}
	    \   ${resp} =   Add LIG from variable   ${ligs}
	    \   ${task} =	Wait For Task	${resp} 	60s	2s
	    #\   Log to console  ${resp['status_code']}
        \   Run Keyword If	'${resp['status_code']}' != '202'   fail    ELSE    Log to Console  \n-LIG got Created successfully

2. Creating EG

        ${enc_group} = 	Copy List	${enc_group}
        :FOR	${eg}	IN	@{enc_group}
	    \   ${enc_group} =     Get Variable Value    ${eg}
	    \   ${resp} =   Add Enclosure Group from variable   ${enc_group}
        #\   Log to console  ${resp['status_code']}
	    \   Run Keyword If	'${resp['status_code']}' != '201'	fail	ELSE 	Log to Console  \n-EG got created successfully

3. Adding Enclosure

        Log to console  \n-Adding Enclosure
        ${encs} =    Copy List   ${encs}
        ${resp} =   Add Enclosures from variable    ${encs}
        #Log to console  ${resp['status_code']}
        Run Keyword If  '${resp['status_code']}' != '202'   fail    ELSE  log to console  \n-Enclosure got imported successfully!


4. Creating Scope

        Log to console    \n-Creating Scopes
        ${scopes} =     Copy List   ${scopes}
        :FOR    ${scope}    IN  @{scopes}
        \   ${scope} =  Get Variable value  ${scope}
        \   ${resp} =   Fusion Api Create Scope     ${scope}

        #\   Log to console  ${resp['status_code']}
	    \

5.1. Assigning LIG Resource to Scopes

        Log to console  \n-2 different LIGs - LIG1 and LIG2 are added to the same scope - Scope1
        @{Lig_name} =   Create List     LIG1    LIG2
        ${LIG_Uris} = 	Create List
        :FOR    ${x}    IN      @{Lig_name}
        \   ${LIGUri} =    Get LIG URI     ${x}
        \   Append to List      ${LIG_Uris}  ${LIGUri}
        ${ScopeUri} =    Get Scope URI     Scope1
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${LIG_Uris}
        :FOR    ${x}    IN RANGE    0   ${len}
        \   ${tempList} =   Create List     ${LIG_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG got assigned to scopes successfully

5.2. Filtering LIG by Scopes

        log to console  \n-FILTERING LIG W.R.T ANY SCOPE
        ${NameList} =   Filter By Any Scopes   logical-interconnect-groups     ${scope1_name}      ${scope2_name}

        log to console  \n-FILTERING LIG W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-interconnect-groups     ${x}


5.3. Removing LIG from Scopes

        log to console  \n Removing LIG1 from Scope1
        ${LIGUri} =    Get LIG URI     LIG1
        ${ScopeUri} =    Get Scope URI     Scope1
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${tempList} =   Create List     ${LIGUri}
        Set to Dictionary   ${body}    removedResourceUris=${tempList}
        ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \n-LIG got removed from scope successfully

5.4. Filtering LIG after removing the Resource

        log to console  \n-FILTERING LIG W.R TO ANY SCOPE
        ${NameList} =   Filter By Any Scopes   logical-interconnect-groups     ${scope1_name}      ${scope2_name}

        log to console  \n-FILTERING LIG W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-interconnect-groups     ${x}


6.1.1 Assigning LI Resources to Multiple Scopes

        Log to console  \n Assigning Enc-79-LIG2 to both Scope1 and Scope2
        ${LIUri} =    Get LI URI     Enc-79-LIG2
        @{scope_name} =   Create List   Scope1  Scope2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${LIUri}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LI got assigned to scopes successfully

6.1.2 Assigning LI Resource to Scopes - Enc-79-LIG2 to Scope1 and Enc-76-LIG1 to Scope2

        log to console  \n Assigning Enc-79-LIG2 to Scope1 and Enc-76-LIG1 to Scope2
        @{Li_name} =   Create List    Enc-79-LIG2    Enc-76-LIG1
        ${LI_Uris} = 	Create List
        :FOR    ${x}    IN      @{Li_name}
        \   ${LIUri} =    Get LI URI     ${x}
        \   Append to List      ${LI_Uris}  ${LIUri}
        @{scope_name} =   Create List   Scope1  Scope2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${LI_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LI got assigned to scopes successfully


6.1.3. Filtering LI by Scopes

        log to console  \n-FILTERING LI W.R.T INDIVIDUAL SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   logical-interconnects     ${x}

        log to console  \n-FILTERING W.R.T ANY SCOPES
        ${NameList} =   Filter By Any Scopes   logical-interconnects     ${scope1_name}     ${scope2_name}

        log to console  \n-FILTERING W.R.T All SCOPES
        ${NameList} =   Filter By All Scopes   logical-interconnects     ${scope1_name}     ${scope2_name}


7. Assigning Interconnects Resource to Scopes

        Log to console  Assigning both the Interconnects to the Scope1

        @{IC_name} =   Create List    Enc-76, interconnect 1    Enc-76, interconnect 2
        ${IC_Uris} = 	Create List
        :FOR    ${x}    IN      @{IC_name}
        \   ${ICUri} =    Get IC URI     ${x}
        \   Append to List      ${IC_Uris}  ${ICUri}
        ${ScopeUri} =    Get Scope URI     ${scope1_name}
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${IC_Uris}
        :FOR    ${x}    IN RANGE    0   ${len}
        \   ${tempList} =   Create List     ${IC_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Interconnect got assigned to scopes successfully

7.2. Filtering Interconnects by Scopes

        log to console  \n-FILTERING Interconnects W.R.T SCOPES
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   interconnects     ${x}


        log to console  \n-FILTERING IC W.R.T ANY SCOPE
        ${NameList} =   Filter By Any Scopes   interconnects     ${scope1_name}      ${scope2_name}



8.1. Assigning Server Hardware Resources to Scopes

        @{SH_name} =   Create List    Enc-76, bay 1    Enc-76, bay 2
        ${SH_Uris} = 	Create List
        :FOR    ${x}    IN      @{SH_name}
        \   ${SHUri} =     Get Server Hardware URI     ${x}
        \   Append to List      ${SH_Uris}  ${SHUri}
        @{scope_name} =   Create List   Scope1  Scope2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${SH_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Server Hardware got assigned to scopes successfully

8.2. Filtering Server Hardware by Scopes

        log to console  \n-FILTERING SERVER HARDWARE W.R.T SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   server-hardware     ${x}


        log to console  \n-FILTERING SERVER HARDWARE W.R.T ANY SCOPE
        ${NameList} =   Filter By Any Scopes   server-hardware     ${scope1_name}      ${scope2_name}


8.2. Removing Server Hardware from Scope

        Log to console  \n-Removing Enc-76, bay 1 from Scope1
        ${SHUri} =    Get Server Hardware URI     Enc-76, bay 1
        ${ScopeUri} =    Get Scope URI     Scope1
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${tempList} =   Create List     ${SHUri}
        Set to Dictionary   ${body}    removedResourceUris=${tempList}
        ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Server Hardware got removed from scope successfully

8.3. Filtering Server Hardware by Scopes

        log to console  \n-FILTERING SERVER HARDWARE W.R.T SCOPE AFTER REMOVING
        ${NameList} =   Filter By Any Scopes   server-hardware     ${scope1_name}   ${scope2_name}


9.1. Assigning Enclosure Resource to Scopes

        @{enc_name} =   Create List    Enc-76    Enc-79
        ${enc_Uris} = 	Create List
        :FOR    ${x}    IN      @{enc_name}
        \   ${encUri} =     Get Enclosure URI     ${x}
        \   Append to List      ${enc_Uris}  ${encUri}
        @{scope_name} =   Create List   Scope1  Scope2
        ${Scope_Uris} = 	Create List
        :FOR    ${x}    IN      @{scope_name}
        \   ${ScopeUri} =    Get Scope URI     ${x}
        \   ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        \   Append to List      ${Scope_Uris}  ${ScopeUri1}
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${len} =    Get Length  ${Scope_Uris}
        :FOR    ${x}    IN RANGE   0   ${len}
        \   ${tempList} =   Create List     ${enc_Uris[${x}]}
        \   Set to Dictionary   ${body}    addedResourceUris=${tempList}
        \   ${resp} =    fusion_api_patch_scope     body=${body}     uri=${Scope_Uris[${x}]}
        \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-ENCLOSURE got assigned to scope successfully

9.2. Filtering Enclosure Resources by Scopes

        log to console  \n-FILTERING ENCLOSURE W.R.T SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   enclosures     ${x}

        log to console  \n-FILTERING ENCLOSURE W.R.T ANY SCOPE
        ${NameList} =   Filter By Any Scopes   enclosures     ${scope1_name}      ${scope2_name}


9.2. Removing Enclosure Resource from Scopes

        log to console  \n-Removing Enc-79 from Scope2
        ${EncUri} =    Get Enclosure URI     Enc-79
        ${ScopeUri} =    Get Scope URI     Scope2
        ${ScopeUri1} =  Catenate    SEPARATOR=/     ${ScopeUri}     resource-assignments
        ${body1} =   Get Variable value  ${scope_resources}
        ${body} =   Copy Dictionary     ${body1}
        ${tempList} =   Create List     ${EncUri}
        Set to Dictionary   ${body}    removedResourceUris=${tempList}
        ${resp} =    fusion_api_patch_scope     body=${body}     uri=${ScopeUri1}
        Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Enclosure got removed from scope successfully

9.3. Filtering Enclosure after removing the Resource

        Log to console  \n-FILTERING ENCLOSURE W.R.T ANY SCOPE
        ${NameList} =   Filter By Any Scopes   enclosures     ${scope1_name}      ${scope2_name}

        log to console  \n-FILTERING ENCLOSURE W.R.T SCOPE
        @{scopename} =  Create List     ${scope1_name}  ${scope2_name}
        :FOR    ${x}    IN      @{scopename}
        \   ${resp} =   Filter by   enclosures     ${x}
