 *** Settings ***
Documentation       OVF3111 - SuiteName : carbon32_Telemetry
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         OperatingSystem
Library         Process
Library         ServerOperations
Library         local_keywords
Variables       data_variables.py
Resource         ../../../../../Resources/api/fusion_api_resource.txt
Resource        SETUP.txt



***Test cases***
1_Login to the appliance
    [Documentation]     Login into the appliance
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log    \nSuccessfully logged into the appliance.    console=True

2_Presetup
   [Documentation]    presetup for Telemetry
   Presetup
   Presetup for telemetry    ${lig_telemetry}    ${sp_telemetry}

3_Verify the number of samples configured for in the LIG,interconnect bay 4 and interconnect bay 1 in both the enclosures
    [Documentation]    Verify the number of samples configured for in the LIG,interconnect bay 4 and interconnect bay 1 in both the enclosures
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_10}     ${exp_samples}

4_Edit the LI and configure the utililzation samples count as 60 and sample interval as 60
    [Documentation]    Edit the LI and configure the utililzation samples count as 60 and sample interval as 60.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Set To Dictionary    ${telemetry_LI}    name    ${LI[${x}]}
    \    Set To Dictionary    ${telemetry_LI}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LI}    sampleCount    60
    \    Set To Dictionary    ${telemetry_LI}    sampleInterval    60
    \    ${resp}=    Edit Telemetry Configurations for LI    ${telemetry_LI}
    \    ${task}     Wait For Task2     ${resp}     10m     10
    Sleep    300s
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_60}     ${exp_samples}

5_Edit the LI and configure the utililzation samples count as 24 and sample interval as 3600
    [Documentation]    Edit the LI and configure the utililzation samples count as 24 and sample interval as 3600.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Set To Dictionary    ${telemetry_LI}    name    ${LI[${x}]}
    \    Set To Dictionary    ${telemetry_LI}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LI}    sampleCount    24
    \    Set To Dictionary    ${telemetry_LI}    sampleInterval    3600
    \    ${resp}=    Edit Telemetry Configurations for LI    ${telemetry_LI}
    \    ${task}     Wait For Task2     ${resp}     10m     10
    Sleep    300s
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_24}     ${exp_samples}


6_Edit the LIG and set the sample count as 24 and sample interval as 3600 and perform update from group
   [Documentation]    Edit the LIG and set the sample count as 24 and sample interval as 3600 and perform update from group.
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    24
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    3600
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    ${task}     Wait For Task2     ${resp}     10m     10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Sleep    300s
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_24}     ${exp_samples}

7_Edit the LIG and set the sample count as 10 and sample interval as 6 and perform update from group
   [Documentation]    Edit the LIG and set the sample count as 10 and sample interval as 6 and perform update from group.
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    10
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    6
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    ${task}     Wait For Task2     ${resp}     10m     10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Sleep    300s
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_10}     ${exp_samples}

8_Edit the LIG and set the sample count as 60 and sample interval as 60 and perform update from group
   [Documentation]    Edit the LIG and set the sample count as 60 and sample interval as  60 and perform update from group.
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    60
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    60
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    ${task}     Wait For Task2     ${resp}     10m     10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Sleep    600s
    ${length}=    Get Length    ${Interconnects_ENCS}
    :FOR    ${x}    IN RANGE   0    ${length}
    \     verify the sample count in interconnect     ${portno_for_statistics[0]}    ${Interconnects_ENCS[${x}]}   ${total_samples_60}     ${exp_samples}

9_Negative_Pass the sample count as 0 in LI and verify the error message from the LI page
    [Documentation]     Pass the sample count as 0 and verify the error message from the LI page.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Set To Dictionary    ${telemetry_LI}    name    ${LI[${x}]}
    \    Set To Dictionary    ${telemetry_LI}    sampleCount    0
    \    ${resp_error}=    Edit Telemetry Configurations for LI    ${telemetry_LI}
    \    Run Keyword If   ${resp_error['status_code']} !=400    fail    Warning !!! Unexpected behavior

10_Negative_Pass the sample interval as 0 in LI and verify the error message from the LI page
    [Documentation]    Pass the sample interval as 0 and verify the error message from the LI page.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Set To Dictionary    ${telemetry_LI}    name    ${LI[${x}]}
    \    Set To Dictionary    ${telemetry_LI}    sampleInterval    0
    \    ${resp_error}=    Edit Telemetry Configurations for LI    ${telemetry_LI}
    \    Run Keyword If   ${resp_error['status_code']} !=400    fail    Warning !!! Unexpected behavior

11_Negative_pass the telemetry enabled value as False in LI, verify the error message
    [Documentation]    pass the telemetry enabled value as False, verify the error message.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Set To Dictionary    ${telemetry_LI}    name    ${LI[${x}]}
    \    Set To Dictionary    ${telemetry_LI}    enableTelemetry    false
    \    ${resp_error}=    Edit Telemetry Configurations for LI    ${telemetry_LI}
    \    Run Keyword If   ${resp_error['status_code']} !=400    fail    Warning !!! Unexpected behavior

12_Negative_Pass the sample count as 0 and verify the error message from the LIG page
    [Documentation]    Pass the sample count as 0 and verify the error message from the LIG page
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    0
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    60
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    Run Keyword If  ${resp['status_code']} !=400    fail    Warning !!! Unexpected behavior - sample count is set to 0 in LIG

13_Negative_Pass the sample interval as 0 and verify the error message from the LIG page
    [Documentation]    Pass the sample interval as 0 and verify the error message from the LIG page
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    true
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    60
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    0
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    Run Keyword If  ${resp['status_code']} !=400    fail    Warning !!! Unexpected behavior - sample interval is set to 0 in LIG

14_Negative_Pass the enableTelemetry as False and verify the error message from the LIG page
    [Documentation]    Pass the enableTelemetry as False  and verify the error message from the LIG page
    ${length}=    Get Length    ${LIG}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${lig_mem}=    Get LIG member    ${LIG[${x}]}
    \    Set To Dictionary    ${telemetry_LIG}    enableTelemetry    false
    \    Set To Dictionary    ${telemetry_LIG}    sampleCount    60
    \    Set To Dictionary    ${telemetry_LIG}    sampleInterval    60
    \    Set To Dictionary    ${lig_mem}    telemetryConfiguration    ${telemetry_LIG}
    \    ${resp}=    Fusion Api Edit LIG     ${lig_mem}    ${liguri}
    \    Run Keyword If  ${resp['status_code']} !=400    fail    Warning !!! Unexpected behavior - telemetry is disabled in LIG

15_Verify poweroff/poweron works perfectly with utilization sampling
    [Documentation]    Verify poweroff/poweron works perfectly with utilization sampling.
    ${length}=    Get Length    ${LI}
    :FOR    ${x}   IN RANGE   0   ${length}
    \    Patch Interconnect    ${Interconnect_dto[${x}]}    op=replace  path=/powerState    value=Off   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     100s     20s    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Maintenance
    \    ${ic_uri}=    Get IC URI    ${Interconnects[${x}]}
    \    ${uri}=    catenate    ${ic_uri}/statistics/${portno_for_statistics[0]}
    \    ${out1}=       fusion_api_get_interconnect    ${uri}
    \    Run Keyword If  '${out1['status_code']}' != '400'    Fail    ELSE  Log   \nExpected behaviour-Cannot read or reset port statistics when interconnect state is Maintenance    console=True
    \    Patch Interconnect    ${Interconnect_dto[${x}]}    op=replace  path=/powerState    value=On   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect       ${Interconnect_dto[${x}]}     state=Configured
    \    ${out1}=       fusion_api_get_interconnect    ${uri}
    \    Run Keyword If  '${out1['status_code']}' != '200'    Fail    ELSE  Log    \nGetting port statistics when interconnect state is Configured    console=True
    \   verify the sample count in interconnect    ${portno_for_statistics[0]}    ${Interconnects[${x}]}   ${total_samples_60}     ${exp_samples}
***keywords***
Presetup for telemetry
    [Documentation]     Adding telemetry configuration in LIG and perform an UFG.
    [Arguments]    ${lig_telemetry}    ${sp_telemetry}
    ${length}=    Get Length    ${LIG}
    : FOR   ${x}    IN RANGE    0    ${Length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${body} =   Build LIG body      ${lig_telemetry[${x}]}
    \    ${resp} =  Fusion Api Edit Lig     ${body}     ${liguri}
    \    ${task}=   Wait For Task2   ${resp}   10m    10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    #####profiles#######

    ${resp}=   Add Server Profiles from variable   ${sp_telemetry}

    ${len}=    Get Length     ${sp_telemetry}
    :FOR   ${x}    IN RANGE    0    ${len}
    \    ${task}     Wait For Task2     ${resp[${x}]}     10m     10
    \    Power on server     ${sp_telemetry[${x}]['serverHardwareUri']}
EDIT LIG with different attributes
    [Documentation]     Editing LIG with different attributes
    [Arguments]    ${editlig_telemetry_value}   ${total_samples}
    ${resp}=    Edit LIG     ${editlig_telemetry_value}
    ${task} =   Wait For Task2  ${resp[0]}    10s   5s
    Update Logical Interconnect from Group    ${LI}


Verify the Throughput and utilization data
    [Documentation]     Verifying the Throughput and utilization data
    [Arguments]    ${ic_name}   ${port}     ${total_samples}    ${exp_samples}

    ${ic_uri}=    Get IC URI    ${ic_name}
    Log    "The interconnect URI is "${\n}    console=True
    Log    ${ic_uri}    console=True
    ${uri}= catenate    ${ic_uri}/statistics
    Log    ${uri}    console=True
    ${out1}=        fusion_api_get_interconnect    ${uri}
    ${output}=  vaildate_port_statistics    ${port}     ${out1}    ${total_samples}    ${exp_samples}
    [Return]                    ${output}

verify the sample count in interconnect
    [Documentation]    verifying the sample count in interconnect
    [Arguments]    ${portno_for_statistics}   ${ic_name}    ${total_samples}    ${exp_samples}
    ${flag}     ${out}=     Verify the Throughput and utilization data      ${ic_name}     ${portno_for_statistics}    ${total_samples}     ${exp_samples}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log    ${out}    console=True

