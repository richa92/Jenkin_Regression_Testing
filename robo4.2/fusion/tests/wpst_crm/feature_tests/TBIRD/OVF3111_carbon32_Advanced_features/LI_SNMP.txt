*** Settings ***
Documentation       OVF3111 - SuiteName : carbon32_SNMP

Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         OperatingSystem
Library         Process
Variables       data_variables.py
Resource         ../../../../../Resources/api/fusion_api_resource.txt

*** Variables ***
${pattern1}    SNMPv3 Trap Recipient
${pattern2}    STRING
${v1_cold_trap}        Cold Start Trap
${v3_cold_trap}        coldStart
${ICM_Scripts}      ${CURDIR}\\ICM_Scripts

***Test cases***
1.OVF292_API_TC_Configure SNMPv3 from LIG & LI
    [Documentation]     Add SNMP config in LI for single user with auth & priv protocols and trap details
    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \     Clear LI SNMP Config     ${LI[${x}]}
    \     ${LI_uri}    LI Uri for SNMP     ${LI[${x}]}
    \     ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_sha_aes}
    \     ${task} = Wait For Task2    ${resp}    3m   5

2.Edit LIG for SNMPV3 and Add SNMPV1 Trap with same Trap IP as SNMPV3 and verify the behavior for UFG and Interconnects are in proper state after LI Update
    [Documentation]    Verify LI edit for Adding snmp V1 Trap IP with same Trap IP as snmp V3

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    ${li_uri}=    Get LI URI     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Append To List    ${LI_edit['snmpConfiguration']['trapDestinations']}    ${v1_trap}
    \    Set To Dictionary    ${LI_edit_snmp}   enabled=${true}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    5m   5

3.Configure SNMPv3 by modifying the traps from LI
    [Documentation]    Verify behavior for Editing SNMPV3 Trap IP and VI Trap Ip

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    ${li_uri}=    Get LI URI     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Set To Dictionary    ${LI_edit_snmp['trapDestinations'][0]}   trapDestination    ${alternate_trap_ip}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    5m   5


4.Configure SNMPv3 by creating 6 snmp from LIG
    [Documentation]    Add SNMP Config in LI for 6 SNMPV3 users with diff auth & priv combinations and a valid trap destination for 1 user

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \     Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_all_users}
    \    ${task} =  Wait For Task2  ${resp}    5m   5

5.Verify behaviour for Editing SNMPV3 Username field for SNMPv3 users
    [Documentation]    Verify behaviour for Edit SNMPv3 Username field for users on LI

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${li_uri}=    Get LI URI     ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Set To Dictionary    ${LI_edit_snmp['snmpUsers'][0]}    snmpV3UserName=${li_usernames_edit[0]}
    \    Set To Dictionary    ${LI_edit_snmp['snmpUsers'][0]}    userCredentials=${SNMPV3_LI_body_sha_aes['snmpUsers'][0]['userCredentials']}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    5m   5

6.Verify behavior for payload with SNMPv3 users and no trap destinations
    [Documentation]    Verify behavior for payload with SNMPv3 users and no trap destinations

    ${list}    Create List
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${li_uri}=    Get LI URI     ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Set To Dictionary    ${LI_edit_snmp}    trapDestinations    ${list}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

7.Configure SNMP trap and informs from LIG & LI
    [Documentation]    Edit Snmpv3 on LI and set notification type to inform

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    Set To Dictionary    ${SNMPV3_LI_body_all_users['trapDestinations'][0]}    inform=true
    \    Set To Dictionary    ${SNMPV3_LI_body_all_users['trapDestinations'][0]}    engineId=${engine_id}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_all_users}
    \    ${task} =  Wait For Task2  ${resp}    5m   5

8,9.Configure SNMPv3 user with auth as SHA nopriv from LI and receive traps
    [Documentation]    TRAP SCENARIO Add SNMP config in LI for single user with Authentication protocol as MD5 with trap and verify Trap for poweroff/poweron

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${LI_uri}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    ${snmp_v3}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v3_cold_trap}    ${Interconnect_dto[${x}]}    ${Interconnects[${x}]}
    \    Run Keyword If  '${snmp_v3}' == 'True'    Log    \nThe cold trap is found for SNMPv3 IC Reboot operation\n    console=True
         ...    ELSE    FAIL

    #Clear LI SNMP Config
    \    ${li_uri}    Get LI URI   ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${v1_trap_list}
    \    Set To Dictionary    ${LI_edit_snmp}    enabled=true
    \    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false
    \    Set To Dictionary    ${LI_edit_snmp}    readCommunity=public
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    ${snmp_v1}=    Issue a Power Off followed by Power On from OV and verify the Trap    ${v1_cold_trap}    ${Interconnect_dto[${x}]}    ${Interconnects[${x}]}
    \    Run Keyword If  '${snmp_v1}' == 'True'    Log    \nThe cold trap is found for SNMPv3 IC Reboot operation\n    console=True
         ...    ELSE    FAIL

10.Send payload with 7 users
    [Documentation]    Negative Scenario verify the behavior for sending payload that exceeds 6 SNMPV3 users on LI
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_7_users}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USERS_EXCEEDS_MAX    VERBOSE=${True}



11.verify behaviour for adding same Trap IP for 2 snmpv3 users
    [Documentation]    Negative Scenario verify behaviour for adding same Trap IP for 2 snmpv3 users on LI

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_all_users}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    Log    \nPerform Get LI and edit 2nd user with same Trap IP as that of 1st user\n    console=True
    \    ${li_uri}    Get LI URI    ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    #\    Append To List    ${LI_edit_snmp['snmpUsers']}    ${SNMPV3_LI_body_all_users['snmpUsers'][0]}
    \    Append To List    ${LI_edit_snmp['trapDestinations']}    ${SNMPV3_LI_body_all_users['trapDestinations'][0]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE



13.Send payload with a trap having a user that does not exist in the set of users
    [Documentation]    Negative Scenario Verify response for payload having trap recepients with non existing snmpv3 usernames on LI
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_invalid_trap_user}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND

14.Verify response for payload having 6 different trap recepients with same user.
    [Documentation]    Verify response for payload having 6 different trap recepients with same user for all on LI.

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_6_trap}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

15.Send payload with 7 traps
    [Documentation]    Negative Scenario Verify Behaviour for payload with 7 SNMPV3 trap recepients on LI

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${snmpv3_li_body_6_users_7_traps}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX

16.Verify SNMPV1 can accept max of 5 traps
    [Documentation]    Negative Scenario Verify SNMPV1 can accept max of 5 traps on LI
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${snmpv1_li_body_6_traps}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX

17.Verify a max of 5 SNMPV1 traps and 6 SNMPV3 traps payload is accepted at once
    [Documentation]    Verify 5 SNMPV1 traps and 6 SNMPV3 traps payload is accepted at once on LI
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}  body=${snmpv1_li_body_6snmpv3traps_5snmpv1traps}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

18.verify behaviour for sending payload with 2 users of same name at once
    [Documentation]    Negative Scenario verify LI behaviour for creating a 2nd user with existing user name(duplicate user)

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${snmpv3_li_body_duplicate_user}
    ${task} =   Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME     VERBOSE=${True}

19.Create 1st user and then edit LIG again to add 2nd user with same name & verify behaviour
    [Documentation]    Negative Scenario Create a snmpv3 user and then edit LI again to add 2nd user with same name & verify behaviour

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${li_uri}    Get LI URI   ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Append To List    ${LI_edit['snmpConfiguration']['snmpUsers']}   ${SNMPV3_LI_body_sha_aes['snmpUsers'][0]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME

20. Verify the behaviour for giving same IP for both trap and inform despite having different users
    [Documentation]    Negative Scenario Verify the behaviour for giving same IP for both Trap and Inform despite having different users.

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${li_uri}    Get LI URI   ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_inform}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Append To List    ${LI_edit_snmp['snmpUsers']}   ${SNMPV3_LI_body_sha_inform_duplicate['snmpUsers'][0]}
    \    Append To List    ${LI_edit_snmp['trapDestinations']}    ${SNMPV3_LI_body_sha_inform_duplicate['trapDestinations'][0]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE


21. Delete a user who is assigned to trap and verify behaviour
    [Documentation]     Edit LI SNMPV3 for deleting a user who is assigned to a trap

    ${list}    Create List
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    ${li_uri}    Get LI URI   ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    \    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${list}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${LI_edit_snmp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND

23.Perform get request on LI for a user with Auth/Privacy Protocol enabled verify the passwords are displayed as none
    [Documentation]    Perform get request on LI for a user with Auth/Privacy Protocol enabled verify the passwords are displayed as none

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    \    ${li_uri}    Get LI URI   ${LI[${x}]}
    \    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    \    ${LI_get_user_creds}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers'][0]['userCredentials']}
    \    Run Keyword If    '${LI_get_user_creds}' != 'None'    FAIL    ELSE    Log to console    \n Successfully verified that the user creds are encrypted\n

24.verify snmpv3 username field textbox combinations.
    [Documentation]    Negative Scenario verify snmpv3 username field textbox combinations on LI
    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    Clear LI SNMP Config     ${LI[0]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[0]}
    ${len}    Get Length    ${inavlid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${inavlid_snmp_usernames[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_INVALID     VERBOSE=${True}

    Log     \nTrying with username exceeding 31 characters\n     console=True
    ${len}    Get Length    ${max_length_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_EXCEEDS_MAX     VERBOSE=${True}

    Log    \nPositive scenarios SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric, only alphabets (lower & uppercase), only numeric\n    console=True

    ${len}    Get Length    ${valid_snmp_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${valid_snmp_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

    Clear LI SNMP Config     ${LI[1]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[1]}
    ${len}    Get Length    ${inavlid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${inavlid_snmp_usernames[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_INVALID     VERBOSE=${True}

    Log     \nTrying with username exceeding 31 characters\n     console=True
    ${len}    Get Length    ${max_length_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_USER_NAME_EXCEEDS_MAX     VERBOSE=${True}

    Log    \nPositive scenarios SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric, only alphabets (lower & uppercase), only numeric\n    console=True

    ${len}    Get Length    ${valid_snmp_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${valid_snmp_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

25.verify snmpv3 Auth protocol's password field textbox combinations
    [Documentation]    Negative scenario verify snmpv3 Auth protocol field's password textbox combinations on LI


    Clear LI SNMP Config    ${LI[0]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[0]}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    Log    \nInvalid auth password containing 8 spaces\n    console=True
    ${len}=    Get Length    ${invalid_auth_passwords}
    :FOR    ${x}    IN RANGE   0   ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password exceeding 31 characters\n    console=True
    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password less than 8 characters\n    console=True
    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${min_length_auth_password[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nPositive scenarios validations of auth password field tesxbox\n    console=True
    #${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${valid_auth_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

    Clear LI SNMP Config    ${LI[1]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[1]}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    Log    \nInvalid auth password containing 8 spaces\n    console=True
    ${len}=    Get Length    ${invalid_auth_passwords}
    :FOR    ${x}    IN RANGE   0   ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password exceeding 31 characters\n    console=True
    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password less than 8 characters\n    console=True
    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${min_length_auth_password[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID     VERBOSE=${True}

    Log    \nPositive scenarios validations of auth password field tesxbox\n    console=True
    #${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${valid_auth_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

26.verify snmpv3 priv protocol's password field textbox combinations
    [Documentation]    Negative Scenario verify snmpv3 priv protocol's password field textbox combinations on LI
    Clear LI SNMP Config    ${LI[0]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[0]}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    Log    \nInvalid auth password containing 8 spaces\n    console=True
    ${len}    Get Length    ${invalid_auth_passwords}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password exceeding 31 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password less than 8 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${min_length_auth_password[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nPositive scenarios validations of auth password field tesxbox\n    console=True
    #${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${valid_auth_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

    Clear LI SNMP Config    ${LI[1]}
    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[1]}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_aes_duplicate}
    Log    \nInvalid auth password containing 8 spaces\n    console=True
    ${len}    Get Length    ${invalid_auth_passwords}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password exceeding 31 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nTrying with auth password less than 8 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${min_length_auth_password[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    ${task} =   Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID     VERBOSE=${True}

    Log    \nPositive scenarios validations of auth password field tesxbox\n    console=True
    #${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${valid_auth_username[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2  ${resp}    4m   5

27.Verify snmpv3 Trap IP's text box combinations and Engine ID's text box combination
    [Documentation]    Verify snmpv3 Trap IP's text box combinations and Engine ID's text box combination on LI

    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}
    \    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${invalid_engine_id}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_INVALID_ENGINEID
    \    Log    \nverifying invalid Trap IP\n    console=True
    \    Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${invalid_trap_ip}
    \    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    \    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${temp}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_IP_INVALID

28.Verify behaviour for other users to edit LIG for SNMPV3
    [Documentation]    Verify behaviour for other users to edit LI for SNMPV3
    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All Users
    ${resp}    Add Users from variable    ${users}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail    ELSE   Log    users created    console=True
    ${l} =  Get Length  ${users}

    ${resp}    Login all users    ${usercred}
    Log    \nLogging in as server admin and edit li for snmpv3\n    console=True
    ${resp}=   Fusion Api Switch Active User    Serveradmin
    ${Length}=    Get Length    ${LI}
    : FOR   ${x}    IN RANGE   0    ${Length}
    #\    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=ACTION_FORBIDDEN_BY_ROLE     VERBOSE=${True}

    Log    \nLogging in as Network admin and edit li for snmpv3\n    console=True
    ${resp}=   Fusion Api Switch Active User    Networkadmin
    : FOR   ${x}    IN RANGE   0    ${Length}
    #\    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2    ${resp}    3m   5

    Log    \nLogging in as Backup admin and edit li for snmpv3    console=True
    ${resp}=    Fusion Api Switch Active User    Backupadmin
    : FOR   ${x}    IN RANGE   0    ${Length}
    #\    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=ACTION_FORBIDDEN_BY_ROLE     VERBOSE=${True}

    Log    \nLogging in as Read only user and edit li for snmpv3    console=True
    ${resp}=   Fusion Api Switch Active User    readonly
    : FOR   ${x}    IN RANGE   0    ${Length}
    #\    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_sha_aes}
    \    ${task} =  Wait For Task2    ${resp}    errorMessage=ACTION_FORBIDDEN_BY_ROLE     VERBOSE=${True}
    ${resp}     Fusion Api Logout Appliance
    Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}
    Remove All Users


29.Add SNMP Config in LI for 6 Snmpv3 users with diff auth & priv combinations and verify them with Carbon IC's CLI
    [Documentation]    Add SNMP Config in LI for 6 Snmpv3 users with diff auth & priv combinations and verify them with Carbon IC's CLI
    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${Length}=    Get Length    ${LI}
    :FOR   ${x}    IN RANGE   0    ${Length}
    \    Clear LI SNMP Config     ${LI[${x}]}
    \    ${LI_URI_snmp}    LI Uri for SNMP     ${LI[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI_snmp}    body=${SNMPV3_LI_body_all_users}
    \    ${task} =  Wait For Task2  ${resp}    4m   5
    Validate All Users    ${Interconnects_ENC2}

***keywords***
Clear LI SNMP Config
    [Documentation]    Clear SNMP config
    [Arguments]    ${LI}
    ${list}    Create List
    ${LI_uri}    LI Uri for SNMP    ${LI}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary     ${temp}     trapDestinations=${list}
    Set To Dictionary     ${temp}     snmpUsers=${list}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${temp}
    ${task} =   Wait For Task2  ${resp}    3m

LI Uri for SNMP
    [Documentation]    Fetch LI Uri for SNMP
    [Arguments]    ${LI}
    ${li_uri}    Get LI URI   ${LI}
    ${li_uri}    Catenate    SEPARATOR=/    ${li_uri}    ${snmp_config}
    [Return]    ${li_uri}

Validate All Users
    [Documentation]    Validate All Users
    [Arguments]    ${ic_name}
    ${li_uri}    Get LI URI   ${LI[1]}
    ${response}    Fusion Api Get Li    ${li_uri}

    Set Global Variable    ${snmpUsers}     ${response['snmpConfiguration']['snmpUsers']}
    Set Global Variable    ${TrapDestinations}     ${response['snmpConfiguration']['trapDestinations']}
    ${len_trap}=    Get Length     ${response['snmpConfiguration']['trapDestinations']}
    Set Global Variable    ${LI_trap_length}     ${len_trap}
    ${len}=    Get Length    ${response['snmpConfiguration']['snmpUsers']}
    Set Global Variable    ${LI_Users_length}    ${len}
    Get Users details from Snmp machine to validate all users     ${ic_name}

Get interconnect ip
    [Documentation]    Fetch IC IPs
    [Arguments]       ${ic}
    ${resp}=    Get Interconnect     ${ic}

    ${interconnectIP} =    Get From Dictionary          ${resp}      ipAddressList
    ${len}    Get Length    ${interconnectIP}
    :For    ${x}    In Range    0    ${len}
    \    ${value}    Run Keyword If      '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
      #\    ${value}    Run Keyword If    '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    Log   \n the interconnect ip is :${value}\n    console=True
    [Return]    ${value}
Get Users details from Snmp machine to validate all users
    [Documentation]    Get Users details from Snmp machine to validate all users
    [Arguments]    ${ic_name}
    ${len_ic}=    Get Length    ${Interconnects}
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_ip}    Get interconnect ip    ${ic_name[${x}]}
    \    ${bay_no}    Fetch from right    ${ic_name[${x}]}    ${SPACE}
    \    Set Global Variable    ${IP}    ${ic_ip}
    \    ${Password}     Get Token     ${bay_no}
    \    Login Into ICs to validate all users     ${IP}    ${Password}
Split password
    [Documentation]        Split password
    [Arguments]    ${Password}
    ${z}    Fetch From Left     ${Password}    ${split_password}
    Set Global Variable    ${Password}    ${z}
    [Return]    ${Password}
Get Token
    [Documentation]    Connect to Fusion VM Bash via SSH and get IC password
    [Arguments]     ${IC_bay}
    Log    \n\nLogging into OneView SSH session    console=True

    Login to Fusion via SSH
    Log    \n\n Verify files are exists in appliance    console=True
    ${ls}=    Execute Command    ls
    ${string}=    Split String    \n${ls}
    ${len}=    Get Length    ${string}
    Log    \n-Length_is...${len}    console=True
    Run Keyword If  ${len} ==2    Log to console    \n${len} Files already exist in appliance
    ...         ELSE    Run Keywords
    ... Put File      ${ICM_Scripts}/${File_Names[0]}       /root   mode=0744   AND
    ... Put File      ${ICM_Scripts}/${File_Names[1]}       /root   mode=0744
    #${read}=   Run Keyword If  ${len} !=2  write    cd ${remove_dir}
    #SSHLibrary.Read Until    ${FUSION_PROMPT}
    #${Perm}=    Execute Command     chmod +x readMECanmic.sh writeMECanmic.sh
    ${read}=    write    ./${File_Names[0]} ${IC_bay} AQ==
    SSHLibrary.Read Until    ]${FUSION_PROMPT}
    ${write}=    write    ./${File_Names[1]} ${IC_bay} 191
    ${b}=    SSHLibrary.Read Until    ]${FUSION_PROMPT}
    Log    ${b}    console=True
    ${PASSWORD}=    Get Regexp Matches    ${b}    is:\\s+(.*)
    ${pwd}=     Fetch From Right    ${PASSWORD[0]}    is:
    Log    ${pwd}    console=True
    ${Password}=   Remove String Using Regexp    ${pwd.strip()}    \t
    Log    \n The Interconnect password is: ${Password}    console=True

    ${y}=     Get Length     ${Password}
    Run Keyword If     '${y}' == '16'      Log    \n!!..Valid Password..!!    console=True   ELSE     Split password     ${Password}
    [Return]    ${Password}

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${time}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}     timeout=${TIMEOUT}
    ${Id}=                      Open Connection      ${IP}    alias=${ALIAS}
    ${Output}=                  Login                ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}     timeout=${TIMEOUT}
    ${Id}=                      Open Connection      ${IP}    alias=${ALIAS}
    ${Output}=                  Login                ${USERNAME}     ${PASSWORD}    ${time}
    [Return]                    ${Id}

Login Into ICs to validate all users
    [Documentation]        Connect to Fusion VM Bash via SSH and get users and trap details
    [Arguments]            ${IP}    ${Password}
    Log    \n\nLogging into interconnect SSH session    console=True
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3
    ${snmp_Trap}=    Fetch From Right    ${show}    ${Users_details}
    Log    ${snmp_Trap}    console=True
    ${Usr}=    Fetch From Left    ${show}    ${Users_details}
    Log    ${Usr}    console=True

    Matching the users details from response of snmp machine      ${Usr}
    Matching the trap details of Snmp machine     ${snmp_Trap}

Matching the users details from response of snmp machine

    [Documentation]    Fetching user details from snmp machine and matching it with LI
    [Arguments]      ${Usr}
    ${str}    Convert To String    ${Usr}
    ${s}    Split String    ${str}    \nUser

    ${len}=    Get Length    ${s}
    ${aa}=    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${a} =    Create List
    \    Append To List    ${a}     ${s[${x}]}
    \    Log to Console    ${a}
    \    Append To List    ${aa}    ${a}
    Log    ${aa}    console=True
    ${snmp_users_length}    Get Length    ${aa}

    :For    ${x}    In Range    1    ${snmp_users_length}
    \    ${str}    Convert To String    ${aa[${x}]}
    \    ${temp}    Fetch From Right    ${str}     ${name[${x}]}
    \    ${Username}    Fetch From Left    ${temp}     ${user_left}
    \    ${match}    Get Regexp Matches    ${Username}     snmpuser(.+)
    \    Run Keyword If       ${match} != []    Continue For Loop
    \    ${auth}    ${Auth}    Should Match Regexp    ${str}    Auth\\s+Protocol:\\s+(\\w+)
    \    ${priv}    ${Privacy}    Should Match Regexp    ${str}    Priv\\s+Protocol:\\s+(\\w+)
    \    Match Username Auth and Privacy     ${LI_Users_length}     ${SNMPV3_LI_body_all_users['snmpUsers']}     ${Auth}     ${Privacy}      ${Username}

Match Username Auth and Privacy
    [Documentation]     Validating User details
    [Arguments]         ${LI_Users_length}     ${snmpUsers}     ${Auth}     ${Privacy}      ${Username}
    ${Index_list}    Create List
    :For    ${index}    In Range    0     ${LI_Users_length}
    \    Append to List    ${Index_list}   ${index}
    \    Run Keyword If     '${Username}' == '${snmpUsers[${index}]['snmpV3UserName']}'     Exit For Loop
    Log    ${Index_list}    console=True
    ${user_name}=     Get Variable Value    ${snmpUsers[${index}]['snmpV3UserName']}
    ${x}=    Get From List    ${Index_list}    -1
    Run Keyword If    '${Auth}' == 'noAuth'     Check Auth protocol     ${x}     ${snmpUsers}    ${user_name}
    ...   ELSE    Run Keyword If    '${Auth}' == '${snmpUsers[${x}]['v3AuthProtocol']}'    Log to Console    \nSuccessfully!!..Auth matches

    Run Keyword If    '${Privacy}' == 'noPriv'     Check privacy protocol     ${x}    ${snmpUsers}     ${user_name}
    ...   ELSE    Run Keyword If    '${Privacy}' == '${snmpUsers[${x}]['v3PrivacyProtocol']}'    Log to Console    \nSuccessfully!!..Privacy matches

Check Auth protocol
    [Documentation]    Validating Auth of LI Users
    [Arguments]     ${x}    ${snmpUsers}    ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3AuthProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'    Log    \nAuth Protocol Matches    console=True    ELSE    Fail


Check privacy protocol
    [Documentation]    Validating Privacy of LI Users
    [Arguments]     ${x}     ${snmpUsers}     ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3PrivacyProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'      Log    \nPrivacy Protocol Matches    console=True    ELSE    Fail


Matching the trap details of Snmp machine

    [Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
    [Arguments]         ${snmp_Trap}
    ${str}    Convert To String    ${snmp_Trap}
    @{words}    Split String    ${str}    ${split_trap}
    ${len}    Get Length    ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${len}
    \    ${list_temp}    Create List
    \    Append To List    ${list_temp}    ${words[${x}]}
    \    Append To List    ${list}    ${list_temp}

    ${trap_details}    Create List
    ${len1}     Evaluate    ${len}-1
    :For    ${x}    In Range    0    ${len1}
    \    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
    \    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
    \    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
    \    ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
    \    ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
    \    ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
    \    Log to Console    ${output_type[1]}
    \    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
    \    Append To List     ${trap_details}    ${list1}
    \    Log to Console    ${trap_details}
    \    Set Global Variable    ${trap_details_snmp}    ${list1}
    \    Match Trap for all users     ${TrapDestinations}    ${LI_trap_length}

Match Trap for all users
    [Documentation]    Match trap for all users
    [Arguments]     ${TrapDestinations}     ${LI_trap_length}
    :For    ${x}    In Range    0    ${LI_trap_length}
    \    Run Keyword If     '${TrapDestinations[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1     ELSE     Get Trap details and validate trap for all users     ${x}      ${TrapDestinations}
Validate Trap
    [Documentation]    Validate Trap
    [Arguments]     ${x}    ${trap_details_snmp}     ${trap_deatails_LI}
    Log to Console    ${trap_details_snmp}

     Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[0]}'    Log To Console     \nSuccessfully!!..Trap IP Matches
     ...    ELSE    Continue For Loop
     Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[1]}'    Log To Console     \nSuccessfully!!..Port number Matches
     ...    ELSE    Fail
     Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[2]}'    Log To Console     \nSuccessfully!!..Username Matches
     ...    ELSE    Fail
Get Trap details and validate trap for all users
    [Documentation]    Get Trap details and validate trap for all users
    [Arguments]     ${x}     ${TrapDestinations}
    ${engine_list}    Create List
    ${trap1}    Create List
    ${trap_ip}    Get From Dictionary    ${TrapDestinations[${x}]}    trapDestination
    ${port_no}     Get From Dictionary    ${TrapDestinations[${x}]}    port
    ${username}    Get From Dictionary    ${TrapDestinations[${x}]}   userName
    ${engine}     Get From Dictionary     ${TrapDestinations[${x}]}    engineId
    Append to List    ${trap1}    ${trap_ip}    ${port_no}    ${username}     ${engine}
    Append to List    ${engine_list}    ${trap1}
    Set Global Variable    ${trap_deatails_LI}    ${trap1}
    ${inform}     Get From Dictionary     ${TrapDestinations[${x}]}     inform
    Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username    ${engine_list}    ${trap_details_snmp}    ELSE     Validate Trap    ${x}     ${trap_details_snmp}    ${trap_deatails_LI}

fetch engine id and corresponding username
    [Documentation]     Fetch Engine ID from SNMP
    [Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}
    Set Log Level    TRACE
    ${str}    Convert To String    ${Usr}
    ${s}    Split String    ${str}    \nUser

    ${len}=    Get Length    ${s}
    ${aa}=    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${a} =    Create List
    \    Append To List    ${a}     ${s[${x}]}
    \    Log to Console    ${a}
    \    Append To List    ${aa}    ${a}
    Log to Console    ${aa}
    ${snmp_users_len}    Get Length    ${aa}

    :For    ${x}    In Range    1    ${snmp_users_len}
    \    ${str}    Convert To String    ${aa[${x}]}
    \    ${n}    Fetch From Right    ${str}     ${name[${x}]}
    \    ${uname}    Fetch From Left    ${n}     ${user_left}
    \    Run Keyword If     '${uname}' != '${trap_deatails_LI[2]}'     Continue For Loop    ELSE     Log to Console    \nSuccessfully!!.. Usernames Matches for Inform
    \    ${result}     ${result1}     Should Match Regexp    ${str}    Engine\\s+ID:\\s+(.*)
    \    ${Engine_id_SNMP}     Run Keyword If      '${x}' == '6'       Fetch From Left     ${result1}    ${match}     ELSE     Remove String     ${result1}    ']
    \    Run Keyword If     '${Engine_id_SNMP}' == '${temp_engine_id}'     Continue For Loop
    \    ${temp}=     Split String     ${Engine_id_SNMP}    :
    \    ${len_temp}=     Get Length     ${temp}
    \    ${output}=    Removing Space from Engine ID     ${temp}     ${len_temp}
    \    Run Keyword If      '${output}' == '${trap_deatails_LI[3]}' and '${uname}' == '${trap_deatails_LI[2]}'    Log to Console    \nSuccessfully!!..Engine ID Matches\n     ELSE    Exit For Loop
    \    Matching Inform     ${trap_deatails_LI}     ${trap_details_snmp}

Matching Inform
    [Documentation]    Match inform
    [Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}

    ${len}=     Get Length     ${trap_details_snmp}
    :For     ${x}    In Range     0     ${len}
    \    Run Keyword If     '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'     Log to Console     \nSuccessfully!!..username Matches      ELSE     Continue For Loop
    \    Run Keyword If     '${trap_details_snmp[${x}][3]}' == 'INFORM' or '${trap_details_snmp[${x}][3]}' == 'TRAP'     Exit For Loop
Removing Space from Engine ID
    [Documentation]    Removing Space from Engine ID
    [Arguments]     ${temp}     ${len_temp}
    :FOR     ${x}    IN RANGE    0     ${len_temp}
    \     ${t}=     Catenate     ${var}      ${temp[${x}]}
    ${output}=    Remove String Using Regexp    ${t.strip()}     ${SPACE}
    [Return]    ${output}


Get Trap details and validate for single trap
    [Documentation]    Get Trap details and validate for single trap
    [Arguments]      ${x}
    ${len_trap}=     Get Length     ${trap}
    :FOR    ${x}     IN RANGE    0     ${len_trap}
    \     ${trap_deatails_LI}    Create List
    \     ${trap_ip}    Get From Dictionary     ${trap[${x}]}    trapDestination
    \     ${port_no}     Get From Dictionary    ${trap[${x}]}    port
    \     ${username}    Get From Dictionary    ${trap[${x}]}   userName
    \     ${inform}     Get From Dictionary     ${trap[${x}]}     inform
    \     ${engine}     Get From Dictionary     ${trap[${x}]}    engineId
    \     ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    \     Append to List    ${trap_deatails_LI}    ${trap_ip}    ${port_no}    ${username}     ${engine}
    \     Get Trap details from Snmp machine

    \     Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${trap_deatails_LI}     ${trap_details_snmp}    ELSE     Match edited Trap     ${trap_details_snmp}     ${trap_deatails_LI}

convert engine id
    [Documentation]    convert engine id
    [Arguments]     ${engine}
    ${temp_en}=     Convert To Lowercase    ${engine}
    ${engine}=    Fetch From Right    ${temp_en}    0x
    Log to Console    ${engine}
    [Return]     ${engine}

Match edited Trap
    [Documentation]    Match edited Trap
    [Arguments]     ${trap_details_snmp}     ${trap_deatails_LI}
    ${len}=     Get Length     ${trap_details_snmp}
    ${y}=     Evaluate     ${len} - 1
    :For     ${x}    In Range     0     ${len}
    \   Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    \nSuccessfully!!..Trap IP's matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    \nSuccessfully!!..Ports matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    \nSuccessfully!!..Username matches
    \   ...    ELSE    Exit For Loop

Get Trap details from Snmp machine
    [Documentation]    Get Trap details from Snmp machine
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
    ...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n
    ${IC_IP_list}    Create List
    Set Global Variable    ${IC_IP_list}    ${IC_IP_list}
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
    \    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    Log to console    ${ic_ip}
    \    Set Global Variable    ${IP}    ${ic_ip}
    \    ${Password}     Get Token
    \    Login Into ICs snmpv3      ${IP}    ${Password}
    Lists Should Be Equal     ${IC_IP_list[0]}    ${IC_IP_list[1]}
    Set Global Variable     ${trap_details_snmp}    ${IC_IP_list[0]}

Login Into ICs snmpv3
    [Documentation]    Connect to Fusion VM Bash via SSH and get users and trap details
    [Arguments]      ${IP}    ${Password}
    Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3
    Close All Connections
    ${trap}=    Fetch From Right    ${show}    ${Users_details}
    ${usr}=    Fetch From Left    ${show}    ${Users_details}
    Set Global Variable    ${Trap}    ${trap}
    Set Global Variable    ${Usr}    ${usr}
    Matching the trap details from interconnect of Snmp machine

Matching the trap details from interconnect of Snmp machine
    [Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
    ${str}    Convert To String    ${Trap}
    ${words}    Split String    ${str}    ${split_trap}
    ${length}=    Get Length     ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${length}
    \    ${list_temp}    Create List
    \    Append To List    ${list_temp}    ${words[${x}]}
    \    Append To List    ${list}    ${list_temp}

    ${trap_details}    Create List
    ${len1}     Evaluate    ${length}-1
    :For    ${x}    In Range    0    ${len1}
    \    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
    \    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
    \    Log to Console    ${output_ip[1]}
    \    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
    \    ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
    \    Log to Console    ${output_port[1]}
    \    ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
    \    Log to Console    ${output_name[1]}
    \    ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
    \    Log to Console    ${output_type[1]}
    \    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
    \    Append To List     ${trap_details}    ${list1}
    Log to Console    ${trap_details}
    Append To List     ${IC_IP_list}     ${trap_details}


Get Trap details and validate for Snmpv3
    [Documentation]    Matching the trap details from interconnect of Snmp machine
    #[Arguments]     ${x}
    ${engine_list}    Create List
    ${trap1}    Create List
    ${trap_ip}    Get From Dictionary    ${trap[0]}    trapDestination
    ${port_no}     Get From Dictionary    ${trap[0]}    port
    ${username}    Get From Dictionary    ${trap[0]}   userName
    ${engine}     Get From Dictionary     ${trap[0]}    engineId
    ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    Append to List    ${trap1}    ${trap_ip}    ${port_no}    ${username}     ${engine}


    Append to List    ${engine_list}    ${trap1}
    Set Global Variable    ${trap_deatails_LI}    ${trap1}
    Set Global Variable    ${engine_id_list}     ${engine_list}
    ${inform}     Get From Dictionary     ${trap[0]}     inform
    Get Trap details from Snmp machine

# If it is INFORM, fetch Engine ID from snmp and compare it with LI Engine ID and valiudate.
    Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${engine_id_list}     ${engine_id_list}     ${trap_details_snmp}     ELSE    Match edited Trap details

Match edited Trap details
    [Documentation]    Match edited Trap details
    ${len}=     Get Length     ${trap_details_snmp}
    #${y}=     Evaluate     ${len} - 1
    :For     ${x}    In Range     0     ${len}
    \   Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    \nSuccessfully!!..Trap IP's matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    \nSuccessfully!!..Ports matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    \nSuccessfully!!..Username matches
    \   ...    ELSE    Exit For Loop

Validate LI Trap
    [Documentation]     Validate username
    [Arguments]         ${len_trap}     ${trap}
    :FOR     ${x}    IN RANGE     ${len_trap}
    \     Run Keyword If     '${trap[${x}]['trapFormat']}' == 'SNMPv3'    Get Trap details and validate for single trap     ${x}     ELSE     Fail
Clear Trap
    [Documentation]    clear old traps
    Open SNMP Client and Login    ${V3_host}
    Write    cd SNMP
   Write    > vcmtrap.log
    Close All Connections
    log to console    \n Cleared the trap messages

Open SNMP Client and Login
    [Documentation]    login to snmp linux machine
    [Arguments]         ${SNMP_IP}
    Open Connection     ${SNMP_IP}     timeout=180s
    Login               ${V3_user}     ${V3_pass}
    log to console    Logged into the Snmp client : ${SNMP_IP}
Get Trap
    [Documentation]    Opens the Trap receiver machine to verify the trap
    [Arguments]        ${OA_HOST}    ${OA_USER}     ${OA_PASS}
    Open Connection     ${OA_HOST}    timeout=120s
    Login               ${OA_USER}     ${OA_PASS}
    Write    cd SNMP
    Write    tail -f -n 20 vcmtrap.log
    Sleep    10s
    ${output}    Read
    Close All Connections
    [Return]    ${output}
Verify Trap for reboot
    [Documentation]    Verify Trap for IC reboot
    [Arguments]    ${ic_ip}    ${trap}
    Set Log Level    TRACE
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    Log to console    \nThe Trap Output contains the required IC IP for IC reboot\n
    ${lines1}    Should contain   ${IC_trap}    ${trap}
    Log to console    \nThe Trap Output contains Cold Trap for the given IC Operation\n
    [Return]    True

Issue a Power Off followed by Power On from OV and verify the Trap
    [Documentation]    Issue a Power Off followed by Power On from OV and verify the Trap
    [Arguments]    ${trap}     ${Interconnect_dto}    ${ic}
    Log to console    \n clearing old traps \n
    Open SNMP Client and Login    ${V3_host}
    Clear Trap
    Patch Interconnect     ${Interconnect_dto}    op=replace  path=/powerState  value=Off  timeout=60  interval=10

    Wait Until Keyword Succeeds     200s     20s    Verify Interconnect     ${Interconnect_dto}     state=Maintenance

    Patch Interconnect     ${Interconnect_dto}    op=replace  path=/powerState  value=On  timeout=300  interval=10
    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect        ${Interconnect_dto}     state=Configured

    Log to console    \n Verify the Traps from trap receiver \n
    ${ic_ip}=    Get interconnect ip    ${ic}
    ${output}    Wait Until Keyword Succeeds    300s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    [Return]    True