*** Settings ***
Documentation   Auto Login Redistribution
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         OAOperations
Library         c7000_login_redistribution
Library         Collections
Library         OperatingSystem
Library         Dialogs
Library          Process
Resource         ../../../../../Resources/api/fusion_api_resource.txt
Resource        SETUP.txt


****Test cases****

1_verify logins After server power on
    [Documentation]    verify logins After server power on
    Presetup
    Suite Setup Tasks
    ${length}=    Get Length    ${LI}
    : FOR   ${x}   IN RANGE    0     ${length}
    \    ${li_uri} =    Get LI URI   ${LI[${x}]}
    \    ${output_2}       ${logins}=   verify_login_count    ${APPLIANCE_IP}    ${Enclosure_Name[${x}]}    ${li_uri}    ${bay_port_detail_${x}}      ${Alr_serverpoweron[${x}]}
    \    Log    ${output_2}    console=True
    \    Log       Login count details after server power on ${logins}   console=True
    \    Run keyword unless '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


2_Disable uplink port and verify the logins
    [Documentation]    Disable uplink port and verify the logins

    ${length}=   Get Length    ${Interconnect_ENCS}
    : FOR    ${x}    IN RANGE   0    ${length}
    \    Disable/Enable ports in interconnect    ${US_details[${x}]['Act_ports'][0:1]}    ${US_details[${x}]['name']}    ${enabled_status[1]}    ${Interconnect_ENCS[${x}]}    ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}    ${status[1]}
    Sleep    60
    ${length}=    Get Length    ${LI}
    : FOR   ${x}   IN RANGE    0     ${length}
    \    ${li_uri} =    Get LI URI   ${LI[${x}]}
    \    ${output_2}       ${logins}=   verify_login_count    ${APPLIANCE_IP}    ${Enclosure_Name[${x}]}    ${li_uri}    ${bay_port_detail_${x}}      ${disable_ports[${x}]}
    \    Log    ${output_2}    console=True
    \    Log       Login count details after disabling the ports ${logins}   console=True
    \    Run keyword unless '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

3_Enable uplink ports and verify the logins
    [Documentation]    Enable uplink ports and verify the logins
    ${length}=   Get Length    ${Interconnect_ENCS}
    : FOR    ${x}    IN RANGE   0    ${length}
    \    Disable/Enable ports in interconnect    ${US_details[${x}]['Act_ports'][0:1]}    ${US_details[${x}]['name']}    ${enabled_status[0]}    ${Interconnect_ENCS[${x}]}    ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}    ${status[0]}
    Sleep    60
    ${length}=    Get Length    ${LI}
    : FOR   ${x}   IN RANGE    0     ${length}
    \    ${li_uri} =    Get LI URI   ${LI[${x}]}
    \    ${output_2}       ${logins}=   verify_login_count    ${APPLIANCE_IP}    ${Enclosure_Name[${x}]}    ${li_uri}    ${bay_port_detail_${x}}      ${enable_ports[${x}]}
    \    Log    ${output_2}    console=True
    \    Log       Login count details after server power on ${logins}   console=True
    \    Run keyword unless '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4_Remove uplinkport and verify the logins
    [Documentation]    Remove uplinkport and the  veify the logins
    : FOR   ${x}    IN RANGE   0   2
    \    Edit uplinkset    ${uplinkset_names[${x}]}    ${delete_uplinkport[${x}]}    ${LI[0]}
    \    Sleep    50
    : FOR   ${x}    IN RANGE   2   4
    \    Edit uplinkset    ${uplinkset_names[${x}]}    ${delete_uplinkport[${x}]}    ${LI[1]}
    \    Sleep    50
    Sleep    60
    ${length}=    Get Length    ${LI}
    : FOR   ${x}   IN RANGE    0     ${length}
    \    ${li_uri} =    Get LI URI   ${LI[${x}]}
    \    ${output_2}       ${logins}=   verify_login_count    ${APPLIANCE_IP}    ${Enclosure_Name[${x}]}    ${li_uri}    ${bay_port_detail_${x}}      ${remove_ports[${x}]}
    \    Log    ${output_2}    console=True
    \    Log       Login count details after server power on ${logins}   console=True
    \    Run keyword unless '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

5_Change the link stability time to 120
    [Documentation]    Change the link stability time to 120

    :FOR     ${name}   IN   @{fc_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log    resp111 is ${body[0]}    console=True
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[0]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

6_Add the uplinkport back and verify the logins after link stability
    [Documentation]    Add the uplinkport back and verify the logins after link stability

    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    \    Sleep    120
    \    Pause Execution
    \    ${li_uri} =    Get LI URI   ${LI[${x}]}
    \    ${output_2}    ${logins}=    verify_login_count      ${APPLIANCE_IP}    ${Enclosure_Name[${x}]}    ${li_uri}    ${bay_port_detail_${x}}      ${add_ports[${x}]}
    \    Log    ${output_2}    console=True
    \    Log       Login count details after adding the uplinkport back on ${logins}     console=True
    \    Run keyword unless '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"



*** Keywords ***

Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level    TRACE
    ${Login_response}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless    ${Login_response[0]['status_code']}== 200    Fail    ${Login_response[0]['message']}
    Log    Test Step-1 completed successfully    console=True
    ${length}=    Get Length    ${LIG}
    : FOR   ${x}    IN RANGE    0    ${Length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${body} =   Build LIG body      ${ligs[${x}]}
    \    ${resp} =  Fusion Api Edit Lig     ${body}     ${liguri}
    \    ${task}=   Wait For Task2   ${resp}   10m    10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    #######Creating server profiles#######

    ${resp}    Add Server Profiles from variable   ${server_profiles}
    ${len}=    Get Length     ${server_profiles}
    :FOR   ${x}    IN RANGE    0    ${len}
    \    ${task}     Wait For Task2     ${resp[${x}]}     20m     10
    \    Power on server     ${server_profiles[${x}]['serverHardwareUri']}
    Sleep     600s

Verify port status
    [Documentation]     Verifying port status
    [Arguments]    ${port}    ${Enclosure_Name}    ${US_bay}    ${status}
    ${portStatus}    Get port details     ${Enclosure_Name}     ${US_bay}     ${port}
    Run Keyword If    '${portStatus}'!='${status}'   Fail   ELSE  Log     \nports are ${status}    console=True

Get port details     [Arguments]     ${Enc_name}     ${bay_num}     ${Port_num}
    [Documentation]     Getting the port details of respective port number.
    ${resp}     Fusion Api Get Interconnect     param=?filter="'name'=='${Enc_name}, interconnect ${bay_num}'"
    ${ports}     Get Variable Value     ${resp['members'][0]['ports']}
    :FOR     ${port}     IN     @{ports}
    \     Run Keyword If     '${port['portName']}' != '${Port_num}'     Continue For Loop
    \     ${portStatus}     Set Variable     ${port['portStatus']}
    \     Exit For Loop
    [Return]     ${portStatus}

Disable/Enable ports in interconnect
    [Arguments]    ${ports}    ${up_name}    ${enabled_status}    ${Interconnects}    ${Enclosure_Name}    ${bay}    ${status}
    [Documentation]    Disable/Enable ports in interconnect
    :FOR     ${port}     IN     @{ports}
    \    Set To Dictionary     ${disable_uplink}     associatedUplinkSetUri     ${up_name}
    \    Set To Dictionary     ${disable_uplink}     enabled     ${enabled_status}
    \    Update IC Port     ${Interconnects}   ${port}   ${disable_uplink}
    \    Wait Until Keyword Succeeds    1000s    2s    Verify port status    ${port}    ${Enclosure_Name}    ${bay}    ${status}

