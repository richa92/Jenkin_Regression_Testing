*** Settings ***
Documentation     OVF3111 - Carbon trunking.
Library     json
Library     FusionLibrary
Library     RoboGalaxyLibrary
Library     Collections
Library     String
Library     BuiltIn
Library     Dialogs
Resource     ../../../../../Resources/api/fusion_api_resource.txt
Resource     SETUP.txt
Variables    data_variables.py


***Test cases****
step1(TC#1)Create 4 ULS with trunking enabled with 2 ports each and trunking enabled on 4 trunk groups on TOR in HW trunk groups
    [Documentation]     Create 5 ULS with trunking enabled with 4 ports each and trunking enabled on 5 trunk groups on TOR in HW trunk groups
    Set Log Level    Trace
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    #Presetup
    Get LIG names,uris and FC uris

    Log    Creating Trunk Groups    console=True
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment2']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment3']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment4']}
    Log    Creating uplinksets in LI    console=True
    : FOR  ${x}    IN RANGE   0    2
    \    Create uls in LI    ${LI[0]}    ${fcmodes[0]}      ${US_details[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details[${x}]['bay']}           ${US_details[${x}]['ENC']}    ${US_details[${x}]['Act_ports']}
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

    : FOR  ${x}    IN RANGE   2    4
    \    Create uls in LI   ${LI[1]}  ${fcmodes[0]}      ${US_details[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details[${x}]['bay']}     ${US_details[${x}]['ENC']}     ${US_details[${x}]['Act_ports']}
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}

    : FOR  ${x}    IN RANGE   0    2
    \   Create uls in LIG   ${LIG[0]}    ${fcmodes[0]}    ${FC_uris[${x}]}    ${US_details[${x}]['name']}          ${desiredSpeeds[0]}     ${US_details[${x}]['bay']}    ${US_details[${x}]['rel_ports']}

    : FOR  ${x}    IN RANGE   2    4
    \   Create uls in LIG   ${LIG[1]}    ${fcmodes[0]}    ${FC_uris[${x}]}    ${US_details[${x}]['name']}          ${desiredSpeeds[0]}     ${US_details[${x}]['bay']}    ${US_details[${x}]['rel_ports']}

    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}

    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}



step2(TC#2)Create 4 ULS with trunking enabled in ULS with 2 ports, each ULS ports set at 4GB/8GB/16GB, TOR set to Auto
    [Documentation]    Create 3 ULS with trunking enabled in ULS with 4 ports, each ULS ports set at 4GB/8GB/16GB, TOR set to Auto
    ${length}=    Get Length    ${desiredSpeeds}
    : FOR    ${x}   IN RANGE   0    ${length}
    \    Edit desired speed in LI    ${US_details[${x}]['name']}    ${US_details[${x}]['Act_ports']}    ${desiredSpeeds[${x}]}
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

step3(TC#3)Power off/on of carbons with trunked ports enabled and trunks formed
    [Documentation]    Power off/on of carbons with trunked ports enabled and trunks formed
    ${ic_len}=    Get Length   ${Interconnect_bays}
    : FOR   ${x}   IN RANGE   0   ${ic_len}
    \    Patch Interconnect    ${Interconnect_dto[${x}]}    op=replace  path=/powerState    value=Off   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     100s     20s    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Maintenance
    \    Patch Interconnect    ${Interconnect_dto[${x}]}    op=replace  path=/powerState    value=On   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect       ${Interconnect_dto[${x}]}     state=Configured

    : FOR   ${x}   IN RANGE   0   ${ic_len}
    \    Patch Interconnect    ${Interconnect_dto1[${x}]}    op=replace  path=/powerState    value=Off   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     100s     20s    Verify Interconnect        ${Interconnect_dto1[${x}]}     state=Maintenance
    \    Patch Interconnect    ${Interconnect_dto1[${x}]}    op=replace  path=/powerState    value=On   timeout=60    interval=5
    \    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect       ${Interconnect_dto1[${x}]}     state=Configured
    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

step4(TC#4)Remove/Insert carbons with trunked ports
    [Documentation]    Remove/Insert carbons with trunked ports

    EFuse ICMs   ${Enclosure_Name[0]}    ${Interconnectdto_ENC1}
    EFuse ICMs   ${Enclosure_Name[1]}    ${Interconnectdto_ENC2}

    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}


step5(TC#5)Backup/Restore configuration with trunked ports
    [Documentation]    Backup/Restore configuration with trunked ports.
    Create Backup
    Restore Appliance
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

Step6(TC#6)Disable/Enable all trunk ports in each trunk group
    [Documentation]    Disable/Enable all trunk ports in each trunk group
    Disable/Enable all trunk ports in each trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment1']}
    Disable/Enable all trunk ports in each trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment2']}
    Disable/Enable all trunk ports in each trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment3']}
    Disable/Enable all trunk ports in each trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment4']}

    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}

Step7(TC#7)Disable/Enable trunked ports
    [Documentation]   Disable/Enable trunked ports
    Log    disabling the trunked ports    console=True
    ${len}=    Get Length    ${Interconnects_ENCS}
    : FOR    ${x}    IN RANGE    0    ${len}
    \    Disable/Enable ports in interconnect    ${US_details[${x}]['Act_ports']}    ${US_details[${x}]['name']}    ${enabled_status[1]}    ${Interconnects_ENCS[${x}]}
    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is unlinked and no trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}
    Log    Enabling the trunked ports    console=True
    : FOR    ${x}    IN RANGE    0    ${len}
    \    Disable/Enable ports in interconnect    ${US_details[${x}]['Act_ports']}    ${US_details[${x}]['name']}    ${enabled_status[0]}    ${Interconnects_ENCS[${x}]}
    : FOR  ${x}    IN RANGE   0    4
    \    Check the status of port is linked and trunk formed    ${US_details[${x}]['Act_ports']}   ${US_details[${x}]['ENC']}    ${US_details[${x}]['bay']}
    ${len}=    Get Length    ${LIG}
    :FOR    ${x}   IN RANGE    0   ${len}
    \    Clear ULS in LIG & LI    ${LIG[${x}]}    ${LI_dto[${x}]}
    Clear the trunk group in switch


Step8(TC#8)Create 1 ULS with ports 1-4, with trunking disabled, and trunking disabled on TOR
    [Documentation]    Create 1 ULS with ports 1-4, with trunking disabled, and trunking disabled on TOR.
    ${len}=    Get Length    ${US_details_li1}
    : FOR   ${x}   IN RANGE   0   ${len}
    \    Create uls in LI      ${LI[${x}]}   ${fcmodes[1]}      ${US_details_li1[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details_li1[${x}]['bay']}     ${US_details_li1[${x}]['ENC']}     ${US_details_li1[${x}]['Act_ports']}
    \    Check the status of port is linked and no trunk formed    ${US_details_li1[${x}]['Act_ports']}    ${US_details_li1[${x}]['ENC']}    ${US_details_li1[${x}]['bay']}

Step9(TC#9)Create 1 ULS with ports 1-4, with trunking disabled, and trunking enabled on TOR
    [Documentation]    Create 1 ULS with ports 1-4, with trunking disabled, and trunking enabled on TOR.
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment3']}
    ${len}=    Get Length    ${US_details_li1}
    :FOR    ${x}   IN RANGE    0    ${len}
    \    Check the status of port is unlinked and no trunk formed   ${US_details_li1[${x}]['Act_ports']}    ${US_details_li1[${x}]['ENC']}    ${US_details_li1[${x}]['bay']}
    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Clear the trunk group in switch persistently

Step10(TC#10)Create 1 ULS with ports 1-4, with trunking enabled, and trunking disabled on TOR
    [Documentation]    Create 1 ULS with ports 1-4, with trunking disabled, and trunking disabled on TOR.
    ${len}=    Get Length    ${US_details_li1}
    :FOR    ${x}   IN RANGE    0    ${len}
    \    Create uls in LI      ${LI[${x}]}   ${fcmodes[0]}      ${US_details_li1[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details_li1[${x}]['bay']}     ${US_details_li1[${x}]['ENC']}     ${US_details_li1[${x}]['Act_ports']}
    \    Check the status of port is linked and no trunk formed    ${US_details_li1[${x}]['Act_ports']}    ${US_details_li1[${x}]['ENC']}    ${US_details_li1[${x}]['bay']}


Step11(TC#11)Create 1 ULS with ports 1-4, with trunking enabled, and trunking enabled on TOR but with no trunk group
    [Documentation]    Create 1 ULS with ports 1-4, with trunking enabled, and trunking enabled on TOR but with no trunk group
    Enable trunk ports but with no trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment1']}
    Enable trunk ports but with no trunk group    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment3']}
    ${len}=    Get Length    ${US_details_li1}
    :FOR    ${x}   IN RANGE    0    ${len}
    \    Check the status of port is linked and no trunk formed    ${US_details_li1[${x}]['Act_ports']}    ${US_details_li1[${x}]['ENC']}    ${US_details_li1[${x}]['bay']}
    \    Get Alert by Param    param=?filter=description like 'Trunking is enabled for uplink set ${US_details_li1[${x}]['name']} but no trunks have formed*'
    ${length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Clear the trunk group in switch

Step12(TC#12)Create 1 ULS with ports ports from different segment with trunking enabled, OV should throw error and ULS should not be created
    [Documentation]    Create 1 ULS with ports ports from different segment with trunking enabled, OV should throw error and ULS should not be created
    ${length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Neg uls in LI    ${LI[${x}]}    ${US_details_li1[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details_li1[${x}]['bay']}     ${US_details_li1[${x}]['ENC']}     ${neg_ports}


Step13(TC#13)Create 2 ULS, with trunking enabled in ULS, ports 1-2 in TG1 and ports 3-4 in TG2 with tor configured with tg1, port1-4
    [Documentation]    Create 2 ULS, with trunking enabled in ULS, ports 1-2 in TG1 and ports 3-4 in TG2 with tor configured with tg1, port1-4
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment5']}
    : FOR   ${x}   IN RANGE   0   2
    \    Create uls in LI      ${LI[${x}]}   ${fcmodes[0]}      ${US_details2_1[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details2_1[${x}]['bay']}     ${US_details2_1[${x}]['ENC']}     ${US_details2_1[${x}]['Act_ports'][0:2]}
    Create uls in LI      ${LI[0]}   ${fcmodes[0]}      ${US_details2_2[0]['name']}     ${FC_uris[2]}     ${desiredSpeeds[0]}     ${US_details2_2[0]['bay']}     ${US_details2_2[0]['ENC']}     ${US_details2_2[0]['Act_ports'][0:2]}
    Create uls in LI      ${LI[1]}   ${fcmodes[0]}      ${US_details2_2[1]['name']}     ${FC_uris[3]}     ${desiredSpeeds[0]}     ${US_details2_2[1]['bay']}     ${US_details2_2[1]['ENC']}     ${US_details2_2[1]['Act_ports'][0:2]}
    : FOR  ${x}    IN RANGE   0    2
    \    Check the status of port is linked and trunk formed    ${US_details2_1[${x}]['Act_ports'][0:2]}   ${US_details2_1[${x}]['ENC']}    ${US_details2_1[${x}]['bay']}
    : FOR  ${x}    IN RANGE   0    2
    \    Check the status of port is linked and no trunk formed    ${US_details2_2[${x}]['Act_ports'][0:2]}   ${US_details2_2[${x}]['ENC']}    ${US_details2_2[${x}]['bay']}

Step14 (TC#14): Create 2 ULS with ports 1-2 in TG1 and ports 3-4 in TG2, and trunking enabled on TOR for TG1 and trunking disabled for TG2
    [Documentation]    Create 2 ULS with ports 1-2 in TG1 and ports 3-4 in TG2, and trunking enabled on TOR for TG1 and trunking disabled for TG2
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment2']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment4']}
    Disable trunk group    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment2']}
    Disable trunk group    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment4']}
    : FOR  ${x}    IN RANGE   0    2
    \    Check the status of port is unlinked and no trunk formed    ${US_details2_2[${x}]['Act_ports']}   ${US_details2_2[${x}]['ENC']}    ${US_details2_2[${x}]['bay']}
    ${length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Clear the trunk group in switch persistently
    Enable the ports in switch    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment2']}
    Enable the ports in switch    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment4']}

Step15(TC#15)Create 2 ULS with ports 1-2 in TG1(trunk enabled) and ports 3-4 in TG2(trunk disabled), in TOR HW trunk area 1 for TG1 and HW trunk area 2 for TG2
    [Documentation]    Create 2 ULS with ports 1-2 in TG1(trunk enabled) and ports 3-4 in TG2(trunk disabled), in TOR HW trunk area 1 for TG1 and HW trunk area 2 for TG2
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][0:2]}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment2']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment3']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment4']}
    : FOR   ${x}   IN RANGE   0   2
    \    Create uls in LI      ${LI[0]}   ${fcmodes[${x}]}      ${US_details2[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details2[${x}]['bay']}     ${US_details2[${x}]['ENC']}     ${US_details2[${x}]['Act_ports'][0:2]}
    Create uls in LI      ${LI[1]}   ${fcmodes[0]}      ${US_details[2]['name']}     ${FC_uris[3]}     ${desiredSpeeds[0]}     ${US_details[2]['bay']}     ${US_details[2]['ENC']}     ${US_details[2]['Act_ports']}
    Create uls in LI      ${LI[1]}   ${fcmodes[1]}      ${US_details[3]['name']}     ${FC_uris[2]}     ${desiredSpeeds[0]}     ${US_details[3]['bay']}     ${US_details[3]['ENC']}     ${US_details[3]['Act_ports'][0:2]}
    : FOR  ${x}    IN RANGE   0    2
    \    Check the status of port is linked and trunk formed    ${US_details_li1[${x}]['Act_ports'][0:2]}   ${US_details_li1[${x}]['ENC']}    ${US_details_li1[${x}]['bay']}
    Check the status of port is unlinked and no trunk formed    ${US_details[1]['Act_ports'][0:2]}   ${US_details[1]['ENC']}    ${US_details[1]['bay']}
    Check the status of port is unlinked and no trunk formed    ${US_details[3]['Act_ports'][0:2]}   ${US_details[3]['ENC']}    ${US_details[3]['bay']}
    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Clear the trunk group in switch persistently

Step16(TC#16)Create 1 ULS with ports 1-4 with trunking enabled, and TOR create TG1 with port 1 and TG2 with port 2
    [Documentation]    Create 1 ULS with ports 1-4 with trunking enabled, and TOR create TG1 with port 1 and TG2 with port 2
    : FOR  ${x}  IN RANGE   0    2
    \    Create uls in LI      ${LI[${x}]}   ${fcmodes[0]}      ${US_details2_1[${x}]['name']}     ${FC_uris[${x}]}     ${desiredSpeeds[0]}     ${US_details2_1[${x}]['bay']}     ${US_details2_1[${x}]['ENC']}     ${US_details2_1[${x}]['Act_ports']}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][0:1]}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][1:2]}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment5'][1:2]}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment5'][2:3]}
    Sleep    100s
    Check the status of port is linked and trunk formed    ${US_details2_1[0]['Act_ports'][0:1]}   ${US_details2_1[0]['ENC']}    ${US_details2_1[0]['bay']}
    Check the status of port is unlinked and no trunk formed    ${US_details2_1[0]['Act_ports'][1:2]}   ${US_details2_1[0]['ENC']}    ${US_details2_1[0]['bay']}
    Check the status of port is linked and trunk formed    ${US_details2_1[1]['Act_ports'][2:3]}   ${US_details2_1[1]['ENC']}    ${US_details2_1[1]['bay']}
    Check the status of port is unlinked and no trunk formed    ${US_details2_1[1]['Act_ports'][0:1]}    ${US_details2_1[1]['ENC']}    ${US_details2_1[1]['bay']}
    ${length}=    Get Length    ${LI_dto}
    : FOR    ${x}   IN RANGE    0    ${length}
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}
    Delete trunk group and release ports persistently    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][0:1]}
    Delete trunk group and release ports persistently    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][1:2]}
    Delete trunk group and release ports persistently    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment5'][1:2]}
    Delete trunk group and release ports persistently    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment5'][2:3]}

Step17(TC#17)Create 1 ULS with ports 1-2 in TG1, with trunking enabled connected to ports 1-2 on TOR with trunking disabled in ports 1-4
    [Documentation]    Create 1 ULS with ports 1-2 in TG1, with trunking enabled connected to ports 1-2 on TOR with trunking disabled in ports 1-4
    Create uls in LI      ${LI[0]}   ${fcmodes[0]}      ${US_details2_1[0]['name']}     ${FC_uris[0]}     ${desiredSpeeds[0]}     ${US_details2_1[0]['bay']}     ${US_details2_1[0]['ENC']}     ${US_details2_1[0]['Act_ports'][0:2]}
    Create Trunk Group with ports     ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1'][0:2]}
    Check the status of port is linked and trunk formed    ${US_details2_1[0]['Act_ports'][0:2]}   ${US_details2_1[0]['ENC']}    ${US_details2_1[0]['bay']}
    Disable trunk group    ${FC_switch_details}     ${Trunk_Commands}     ${FC_switch_ports['segment1']}
    Sleep    100s
    Check the status of port is unlinked and no trunk formed    ${US_details2_1[0]['Act_ports'][0:2]}   ${US_details2_1[0]['ENC']}    ${US_details2_1[0]['bay']}

***Keywords****
EFuse ICMs
    [Documentation]    EFuse ICM
    [Arguments]    ${Enclosure_Name}     ${Interconnectdto}
    Get EM IP     ${Enclosure_Name}
    ${EM_TOKEN}=    Get EM Token    ${Enclosure_Name}
    EFuse ICM    ${Action[1]}    ${Interconnect_bays[0]}
    Wait Until Keyword Succeeds     200s     20s    Verify Interconnect     ${Interconnectdto[0]}     state=Absent
    EFuse ICM    ${Action[0]}    ${Interconnect_bays[0]}
    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect        ${Interconnectdto[0]}     state=Configured
    EFuse ICM    ${Action[1]}    ${Interconnect_bays[1]}
    Wait Until Keyword Succeeds     200s     20s    Verify Interconnect     ${Interconnectdto[1]}     state=Absent
    EFuse ICM    ${Action[0]}    ${Interconnect_bays[1]}
    Wait Until Keyword Succeeds     1000s     20s    Verify Interconnect        ${Interconnectdto[1]}     state=Configured

Get LIG names,uris and FC uris
    [Documentation]     This keyword will fetch exixting LIG and FC uris
    ${LIG_name_list}     Create List
    ${LIG_uri_list}     Create List
    ${FC_uris}     Create List
    ${resp}     Fusion Api Get Lig
    :FOR     ${member}     IN     @{resp['members']}
    \     Append To List     ${LIG_name_list}     ${member['name']}
    \     Append To List     ${LIG_uri_list}     ${member['uri']}
    Set Global Variable     ${LIG_name_list}     ${LIG_name_list}
    ${resp}     Fusion Api Get Fc Networks
    :FOR     ${member}     IN     @{resp['members']}
    \     Append To List     ${FC_uris}     ${member['uri']}
    Set Global Variable     ${FC_uris}     ${FC_uris}

Check the status of port is linked and trunk formed
    [Documentation]     Checking the status of port is linked and trunk formed
    [Arguments]    ${ports}    ${Enclosure_Name}    ${bay}
    :FOR     ${port}     IN     @{ports}
    \   ${trunk}=    Wait Until Keyword Succeeds    1000s    2s    Verify port status    ${port}    ${Enclosure_Name}    ${bay}    ${status[0]}
    \   Run Keyword Unless    '${trunk}'!='None'    FAIL
    [Return]    ${trunk}

Check the status of port is unlinked and no trunk formed.
    [Documentation]     Checking the status of port is unlinked and no trunk formed.
    [Arguments]    ${ports}    ${Enclosure_Name}    ${bay}
    :FOR     ${port}     IN     @{ports}
    \   ${trunk}=    Wait Until Keyword Succeeds    1000s    2s    Verify port status    ${port}    ${Enclosure_Name}    ${bay}    ${status[1]}
    \   Run Keyword Unless    '${trunk}'=='None'    FAIL

Check the status of port is linked and no trunk formed
    [Documentation]     Checking the status of port is linked and no trunk formed.
    [Arguments]    ${ports}    ${Enclosure_Name}    ${bay}
    :FOR     ${port}     IN     @{ports}
    \   ${trunk}=    Wait Until Keyword Succeeds    1000s    2s    Verify port status    ${port}    ${Enclosure_Name}    ${bay}    ${status[0]}
    \   Run Keyword Unless    '${trunk}'=='None'    FAIL

Create Trunk Group with ports    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_to_trunk}
    [Documentation]    Creating Trunk Group with ports on switch
    ${First_port}    Set Variable    ${Ports_to_trunk[0]}
    ${Last_port}    Set Variable    ${Ports_to_trunk[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    :FOR    ${y}    IN     @{Ports_to_trunk}
    \    Execute Command    ${Trunk_Commands[3]} ${y} 1
    \    Sleep    3s
    Execute Command    ${Trunk_Commands[5]} ${First_port}-${Last_port} -index ${First_port}
    Sleep    3s
    Execute Command    ${Trunk_Commands[4]} ${First_port}-${Last_port}
    Sleep    3s
   Close Connection

Check For Trunk Group in Brocade    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}
    [Documentation]    Checking for the trunk group existence in switch
    Log    Checking for trunk group details in the Brocade switch    console=True
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    ${stdout}    Execute Command    ${Trunk_Commands[0]}
    Log    Show command output is \n ${stdout}    console=True
    Close Connection
    [Return]    ${stdout}

Get the number of Trunk Group in switch    [Arguments]    ${show_command_output}
    [Documentation]    Getting the number of trunk groups in switch
    @{words}    Split String    ${show_command_output}    -------------------------------------
    Log    The output splitted with dots is \n ${words}    console=True
    Remove From List    ${words}    -1
    Remove From List    ${words}    0
    ${group_count}    Get Length    ${words}
    Log    The number of trunk groups present is ${group_count}    console=True
    [Return]    ${group_count}    ${words}

Check For Ports in Trunk Group    [Arguments]    ${Ports_data}    ${TG_number}
    [Documentation]    Checking for the master port and port count in the trunk group
    Log    Checking the ports present in each trunk group    console=True
    Remove From List    ${Ports_data}    -1
    Remove From List    ${Ports_data}    0
    ${Ports_count}    Get Length    ${Ports_data}
    Log    The number of ports present in TG${TG_number} is ${Ports_count}    console=True
    ${Ports_list}    Create List
    :FOR    ${y}    IN RANGE    0    ${Ports_count}
    \    ${data1}    Split String    ${Ports_data[${y}]}
    \    ${data2}    Get Length    ${data1}
    \    Append To List    ${Ports_list}    ${data1[-1]}
    ${Master_port}    Set Variable    ${data1[-2]}
    [Return]    ${Ports_count}    ${Master_port}    ${Ports_list}

Delete trunk group and release ports    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    [Documentation]    Deleting the trunk group
    ${First_port}    Set Variable    ${Ports_in_TG[0]}
    ${Last_port}    Set Variable    ${Ports_in_TG[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    Execute Command    ${Trunk_Commands[2]} ${First_port}-${Last_port}
    Sleep    3s
    :FOR    ${y}    IN     @{Ports_in_TG}
    \    Execute Command    ${Trunk_Commands[3]} ${y} 0
    \    Sleep    3s
    Execute Command    ${Trunk_Commands[4]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection

Delete trunk group and release ports persistently  [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    [Documentation]    Deleting the trunk group
    ${First_port}    Set Variable    ${Ports_in_TG[0]}
    ${Last_port}    Set Variable    ${Ports_in_TG[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    Execute Command    ${Trunk_Commands[2]} ${First_port}-${Last_port}
    Sleep    3s
    :FOR    ${y}    IN     @{Ports_in_TG}
    \    Execute Command    ${Trunk_Commands[3]} ${y} 0
    \    Sleep    3s
    Execute Command    ${Trunk_Commands[6]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection
Create uls in LI    [Arguments]    ${LI}    ${fcmode}    ${uls_name}    ${FC_uri}    ${desiredSpeed}    ${IC_bay_set}    ${ENC}    ${ports}
    [Documentation]    Creating uplinkset with network in LI through rest calls
    ${ENC_uri}=    Get Enclosure URI    ${ENC}
    ${LI_Uri}=    Get LI URI    ${LI}
    Set To Dictionary    ${li_upsbody[0]}    fcMode    ${fcMode}
    Set To Dictionary    ${li_upsbody[0]}    name    ${uls_name}
    Append To List    ${li_upsbody[0]['fcNetworkUris']}    ${FC_uri}
    ${port_list}    Create List
    ${ports_length}    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${ports_length}
    \    Set To Dictionary    ${portConfigInfos[${x}]}    desiredSpeed    ${desiredSpeed}
    \    Set To Dictionary    ${portConfigInfos[${x}]['location']['locationEntries'][1]}    value    ${IC_bay_set}
    \    Set To Dictionary    ${portConfigInfos[${x}]['location']['locationEntries'][2]}    value    ${ENC_uri}
    \    ${tmp_list}    Create List
    \    ${tmp_var}    Copy Dictionary    ${portConfigInfos[${x}]}
    \    Set To Dictionary    ${tmp_var['location']['locationEntries'][0]}    value    ${ports[${x}]}
    \    Append To List    ${port_list}    ${tmp_var}
    Set To Dictionary    ${li_upsbody[0]}    portConfigInfos    ${port_list}
    Set To Dictionary    ${li_upsbody[0]}    logicalInterconnectUri    ${LI_uri}
    ${resp_li}    Fusion Api Create Uplink Set    body=${li_upsbody[0]}
    ${task}    Wait For Task    ${resp_li}    240s    10s
    Remove From List    ${li_upsbody[0]['fcNetworkUris']}    0

Verify port status
    [Documentation]    Verify port status
    [Arguments]    ${port}    ${Enclosure_Name}    ${US_bay}    ${status}
    ${portStatus}     ${trunkMaster}     ${enabled}     Get port details     ${Enclosure_Name}     ${US_bay}     ${port}
    Run Keyword If    '${portStatus}'!='${status}'   Fail   ELSE  Log     \nports are ${status}    console=True
    [Return]    ${trunkMaster}

Get port details     [Arguments]     ${Enc_name}     ${bay_num}     ${Port_num}
    [Documentation]     Getting the port details of respective port number.
    ${resp}     Fusion Api Get Interconnect     param=?filter="'name'=='${Enc_name}, interconnect ${bay_num}'"
    ${ports}     Get Variable Value     ${resp['members'][0]['ports']}
    :FOR     ${port}     IN     @{ports}
    \     Run Keyword If     '${port['portName']}' != '${Port_num}'     Continue For Loop
    \     ${portStatus}     Set Variable     ${port['portStatus']}
    \     ${trunkMaster}     Set Variable     ${port['fcPortProperties']['trunkMaster']}
    \     ${enabled}     Set Variable     ${port['enabled']}
    \     Exit For Loop
    [Return]     ${portStatus}     ${trunkMaster}     ${enabled}

Create uls in LIG    [Arguments]    ${LIG}    ${fcmode}    ${FC_uri}    ${uls_name}    ${desiredSpeed}    ${IC_bay_set}    ${ports}
    [Documentation]    Creating Uplinkset with network in LIG through rest calls
    ${port_list}    Create List
    ${LIG_uri}=    Get LIG URI    ${LIG}
    ${resp}    fusion_api_get_lig    uri=${LIG_uri}
    Log    ${resp}    console=True
    Set To Dictionary    ${lig_uls_body1}    fcMode    ${fcMode}
    Set To Dictionary    ${lig_uls_body1}    name    ${uls_name}
    Append To List    ${lig_uls_body1['networkUris']}    ${FC_uri}
    ${ports_length}    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${ports_length}
    \    Set To Dictionary    ${logicalPortConfigInfos[${x}]}    desiredSpeed    ${desiredSpeed}
    \    Set To Dictionary    ${logicalPortConfigInfos[${x}]['logicalLocation']['locationEntries'][0]}    relativeValue    ${IC_bay_set}
    \    ${tmp_list}    Create List
    \    ${tmp_var}    Copy Dictionary    ${logicalPortConfigInfos[${x}]}
    \    Set To Dictionary    ${tmp_var['logicalLocation']['locationEntries'][1]}    relativeValue    ${ports[${x}]}
    \    Append To List    ${port_list}    ${tmp_var}
    Log    ${port_list}    console=True
    Set To Dictionary    ${lig_uls_body1}    logicalPortConfigInfos    ${port_list}
    Log    ${lig_uls_body1}    console=True
   Remove From Dictionary    ${resp}    headers
   Remove From Dictionary    ${resp}    status_code
   Append to List    ${resp['uplinkSets']}    ${lig_uls_body1}
   ${resp1}    Fusion Api Edit Lig    ${resp}    ${LIG_uri}
   ${task}    Wait For Task    ${resp1}    20s    2s
   Remove From List    ${lig_uls_body1['networkUris']}    0

Edit desired speed in LI     [Arguments]     ${uplinksetname}     ${ports}     ${desiredSpeed}
    [Documentation]    Editing desired speed to 4G/8G/16G in LI
    ${uplinksets}    Fusion Api Get Uplink Set    param=?filter="'name'=='${uplinksetname}'"
    ${us}    Get From List     ${uplinksets['members']}    0
    ${us_uri}    Get From Dictionary    ${us}    uri
    ${ports_length}    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${ports_length}
    \    Set To Dictionary    ${uplinksets['members'][0]['portConfigInfos'][${x}]}    desiredSpeed    ${desiredSpeed}
    ${resp}    Fusion Api Edit Uplink Set    body=${uplinksets['members'][0]}    uri=${us_uri}
    ${task}    Wait For Task2    ${resp}    10m    10

Disable/Enable all trunk ports in each trunk group    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_to_trunk}
    [Documentation]    Disable/Enable all trunk ports in each trunk group
    ${First_port}    Set Variable    ${Ports_to_trunk[0]}
    ${Last_port}    Set Variable    ${Ports_to_trunk[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    Execute Command    ${Trunk_Commands[4]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection

Disable/Enable ports in interconnect    [Arguments]    ${ports}    ${up_name}    ${enabled_status}    ${Interconnects}
    [Documentation]    Disable/Enable ports in interconnect
    :FOR     ${port}     IN     @{ports}
    \    Set To Dictionary     ${disable_uplink}     associatedUplinkSetUri     ${up_name}
    \    Set To Dictionary     ${disable_uplink}     enabled     ${enabled_status}
    \    Update IC Port     ${Interconnects}   ${port}   ${disable_uplink}

Clear ULS in LIG & LI    [Arguments]    ${LIG}    ${LI_dto}
    [Documentation]    This keyword will clear uplink sets in both LI and LIG
    ${LIG_uri}=    Get LIG URI    ${LIG}
    ${resp}    fusion_api_get_lig    uri=${LIG_uri}
    Remove From Dictionary    ${resp}    headers
    Remove From Dictionary    ${resp}    status_code
    Set To Dictionary    ${resp}    uplinkSets    ${empty_list}
    ${resp1}    Fusion Api Edit Lig    ${resp}    ${LIG_uri}
    ${task}    Wait For Task2    ${resp1}    20m    2
    Update Logical Interconnect from Group    ${LI_dto}

Clear the trunk group in switch
    [Documentation]    clearing the trunk group in switch
    ${show_command_output}    Check For Trunk Group in Brocade    ${FC_switch_details}    ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    No trunk groups available
    ${TG_count}    ${TG_data}    Get the number of Trunk Group in switch    ${show_command_output}
    :FOR    ${x}    IN RANGE    0    ${TG_count}
    \    @{lines}    Split String    ${TG_data[${x}]}    \n
    \    ${TG_number}    Evaluate    ${x}+1
    \    ${Ports_count}    ${Master_port}    ${Ports_in_TG}    Check For Ports in Trunk Group    ${lines}    ${TG_number}
    \    Delete trunk group and release ports    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    ${show_command_output}    Check For Trunk Group in Brocade    ${FC_switch_details}    ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    Trunk Groups deleted succeesfully    ELSE    FAIL

Clear the trunk group in switch persistently
    [Documentation]    clearing the trunk group in switch
    ${show_command_output}    Check For Trunk Group in Brocade    ${FC_switch_details}    ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    No trunk groups available
    ${TG_count}    ${TG_data}    Get the number of Trunk Group in switch    ${show_command_output}
    :FOR    ${x}    IN RANGE    0    ${TG_count}
    \    @{lines}    Split String    ${TG_data[${x}]}    \n
    \    ${TG_number}    Evaluate    ${x}+1
    \    ${Ports_count}    ${Master_port}    ${Ports_in_TG}    Check For Ports in Trunk Group    ${lines}    ${TG_number}
    \    Delete trunk group and release ports persistently    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    ${show_command_output}    Check For Trunk Group in Brocade    ${FC_switch_details}    ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    Trunk Groups deleted succeesfully    ELSE    FAIL

Enable trunk ports but with no trunk group    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_to_trunk}
    [Documentation]    Creating Trunk ports but without creating trunk group
    ${First_port}    Set Variable    ${Ports_to_trunk[0]}
    ${Last_port}    Set Variable    ${Ports_to_trunk[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    :FOR    ${y}    IN     @{Ports_to_trunk}
    \    Execute Command    ${Trunk_Commands[3]} ${y} 1
    \    Sleep    3s
    Execute Command    ${Trunk_Commands[6]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection

Neg uls in LI
    [Documentation]    Neg uls in LI
    [Arguments]    ${LI}   ${US_details[0]['name']}    ${FC_uri}     ${desiredSpeeds}   ${bay}   ${ENC}    ${ports}
    ${ENC_uri}=    Get Enclosure URI    ${ENC}
    ${LI_Uri}=    Get LI URI    ${LI}
    Set To Dictionary    ${li_upsbody[0]}    fcMode    ${fcmodes[0]}
    Set To Dictionary    ${li_upsbody[0]}    name    ${US_details[0]['name']}
    Append To List    ${li_upsbody[0]['fcNetworkUris']}    ${FC_uri}
    ${port_list}    Create List
    ${ports_length}    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${ports_length}
    \    Set To Dictionary    ${portConfigInfos[${x}]}    desiredSpeed    ${desiredSpeeds}
    \    Set To Dictionary    ${portConfigInfos[${x}]['location']['locationEntries'][1]}    value    ${bay}
    \    Set To Dictionary    ${portConfigInfos[${x}]['location']['locationEntries'][2]}    value    ${ENC_uri}
    \    ${tmp_list}    Create List
    \    ${tmp_var}    Copy Dictionary    ${portConfigInfos[${x}]}
    \    Set To Dictionary    ${tmp_var['location']['locationEntries'][0]}    value    ${ports[${x}]}
    \    Append To List    ${port_list}    ${tmp_var}
    Set To Dictionary    ${li_upsbody[0]}    portConfigInfos    ${port_list}
    Set To Dictionary    ${li_upsbody[0]}    logicalInterconnectUri    ${LI_uri}
    ${resp_li}    Fusion Api Create Uplink Set    body=${li_upsbody[0]}
    Run Keyword Unless    '${resp_li['errorCode']}'=='CRM_PORTS_NOT_IN_SAME_TRUNK_AREA'    FAIL
    Remove From List    ${li_upsbody[0]['fcNetworkUris']}    0

Disable trunk group    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    [Documentation]    Disabling the trunk group
    ${First_port}    Set Variable    ${Ports_in_TG[0]}
    ${Last_port}    Set Variable    ${Ports_in_TG[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[1]} ${First_port}-${Last_port}
    Sleep    3s
    Execute Command    ${Trunk_Commands[2]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection
Enable the ports in switch    [Arguments]    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    [Documentation]    Disabling the trunk group
    ${First_port}    Set Variable    ${Ports_in_TG[0]}
    ${Last_port}    Set Variable    ${Ports_in_TG[-1]}
    Open Connection    ${FC_switch_details['ip']}
    Login    ${FC_switch_details['userName']}    ${FC_switch_details['password']}
    Execute Command    ${Trunk_Commands[4]} ${First_port}-${Last_port}
    Sleep    3s
    Close Connection