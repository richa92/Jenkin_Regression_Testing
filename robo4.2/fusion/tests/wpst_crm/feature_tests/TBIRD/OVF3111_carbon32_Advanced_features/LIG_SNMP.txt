*** Settings ***
Documentation    LIG SNMPv3 SNMPv1 Configurations UFG on LI and Trap Verifications for Carbon Tbird
Library         RoboGalaxyLibrary
Library         FusionLibrary
Library         OperatingSystem
Library         BuiltIn
Library         Collections
Library         SSHLibrary
Library         String
Variables       data_variables.py
Resource            ../../../../../Resources/api/fusion_api_resource.txt
#Resource            SETUP.txt
#Suite Setup               Suite Setup Tasks

*** Variables ***
${pattern1}    SNMPv3 Trap Recipient
${pattern2}    STRING
${v1_cold_trap}        Cold Start Trap
${v3_cold_trap}        coldStart
${ICM_Scripts}  ${CURDIR}\\ICM_Scripts
*** Test Cases ***

### LIG SCENARIOS ###
1_Edit LIG for SNMPV3 and set 1 user with auth & priv protocols and trap details and verify UFG is successful and Interconnects state are in configured state after LI Update
    [Documentation]    Edit LIG for SNMPV3 and set 1 user with auth & priv protocols and trap details

    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    #Presetup

    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   ${lig_snmp}    Edit LIG body for SNMP    snmpusers=${SNMPV3_LI_body_md5_des['snmpUsers']}    trapdestination=${SNMPV3_LI_body_md5_des['trapDestinations']}  v3enabled=true  Lig=${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    eTag=
    \   Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}


2_Edit LIG for SNMPV3 and Add SNMPV1 Trap with same Trap IP as SNMPV3 and verify the behavior for UFG and Interconnects are in proper state after LI Update
    [Documentation]    Setting SNMP config in LIG for both snmpv1 and snmpv3 user having same trap ip
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${LIG_edit_snmp_trap}    ${v1_trap}
    ${lig_snmp}    Edit LIG body for SNMP    trapdestination=${LIG_edit_snmp_trap}  enabled=true      readCommunity=public  Lig=${LIG1}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

3_Verify LIG for editing SNMPV3 Trap IP and VI Trap IP and verify UFG is successful and IC's are in configured state after update
    [Documentation]    Verify LIG for editing SNMPV3 Trap IP and VI Trap IP and verify UFG is successful and IC's are in configured state after update
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}

    ${len}    Get Length   ${LIG_edit_snmp_trap}
    :For    ${x}    In Range    0    ${len}
    \    Log to console    \n Editing Trap Ip for ${LIG_edit_snmp_trap[${x}]['trapFormat']}\n
    \    Set To Dictionary    ${LIG_edit_snmp_trap[${x}]}    trapDestination=${alternate_trap_ip}
    \    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    \    Set To Dictionary    ${lig_edit}    eTag=
    \    Edit LIG and verify status lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

4_Add SNMP Config in LIG for 6 SNMPV3 users with diff auth & priv combinations and a valid trap destination for 1 user and verify UFG is successful and IC's are in configured state after the update
    [Documentation]    Edit LIG for snmpv3 users and diff auth priv combinations with trap ip and verify behaviour
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary   ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_all_users}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}


5_Verify behaviour for Editing SNMPV3 Username field for SNMPv3 users
    [Documentation]    Edit LIG for all snmpv3 usernames even for those assigned in trap destinations
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    Set To Dictionary    ${LIG_edit_snmp_user[0]}    snmpV3UserName=${li_usernames_edit[0]}
    Set To Dictionary    ${LIG_edit_snmp_user[0]}    userCredentials=${SNMPV3_LI_body_sha_aes['snmpUsers'][0]['userCredentials']}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${LIG_edit_snmp_user}
    Set To Dictionary    ${lig_edit}    eTag=
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

6_Verify behavior for payload with SNMPv3 users and no trap destinations
    [Documentation]    Edit LIG for all snmpv3 usernames without trapsdestinations
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${list}    Create List
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp}    trapDestinations=${list}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${temp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

7_Edit Snmpv3 on LIG and set notification type to inform
    [Documentation]    Edit LIG for snmpv3 and set notification type to inform
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${temp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

8_11_OF_LI_Verify response for payload having 6 different trap recepients with same user for all on LIG
    [Documentation]    Edit LIG for snmpv3 users and diff auth priv combinations with trap ip and verify behaviour
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary   ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_6_trap}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

9_1_TRAP SCENARIO Add SNMP config in LIG for SNMPv3 user with Authentication protocol as SHA with Trap notification and verify Trap for Poweroff/Poweron
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}
    \   Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${TRAPDESTINATION}
    \   Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    \   Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    \   Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${temp} Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}
    \   ${snmp_v3}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v3_cold_trap} ${LE1}-${LIG_ME[${x}]}-${y} ${Interconnect_dto[${x}]}
    \   Run Keyword If  '${snmp_v3}' == 'True'    Log to console  \nThe cold trap is found for SNMPv3 IC Reboot operation\n
    \   ...    ELSE    FAIL

9_2_TRAP SCENARIO Add SNMP config in LIG for SNMPv1 user with Authentication protocol as SHA with Trap notification and verify Trap for Poweroff/Poweron
    [Documentation]    Edit LIG for SNMPv1 config on LIg and perform UFG and verify IC's state and verify trap for IC Reboot

    Log to console    \n Trap Scenario Edit LIG for SNMPv1 Trap and verify the behavior for UFG and Interconnects are in proper state after LI Update
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    \   Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    trapFormat=SNMPv1
    \   Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    communityString=Public
    \   ${lig_snmp}    Edit LIG body for SNMP    enabled=true    v3enabled=false    readCommunity=public    Lig=${LIG_ME[${x}]}
    \   Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}
    \   ${snmp_v1}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v1_cold_trap} ${LE1}-${LIG_ME[${x}]}-${y} ${Interconnect_dto[${x}]}
    \   Run Keyword If  '${snmp_v1}' == 'True'    Log to console  \nThe cold trap is found for SNMPv1 IC Reboot operation\n
    \   ...    ELSE    FAIL

10_Negative Scenario Verify behavior for 7 snmpv3 users payload on LIG
    [Documentation]    verify the behaviour for sending payload that exceeds 6 maximum SNMPV3 users
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary   ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_7_users}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${user_exceeds_max_error}

11_Negative Scenario Verify behaviour for adding Trap IP for a user and then get LIG and edit and add 2nd user with same the same Trap IP as that of the 1st user
    [Documentation]    Edit LIG by setting a trap ip to 1st user and then get LIG and append 2nd user with same trap ip as the first and verify the behaviour
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_sha_aes}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    ${lig_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_md5['snmpUsers'][0]}
    Append To List    ${lig_edit_snmp_trap}    ${SNMPV3_LI_body_md5['trapDestinations'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${lig_edit_snmp_trap}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${trap_dest_duplicate_error}

12_Negative Scenario Verify response for payload having trap recepients with invalid snmpv3 users(non existing snmpv3 users) on LIG
    [Documentation]    Edit LIG for trap details with invalid usernames for snmpv3
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_invalid_trap_user}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}     flag=1    errorMessage=${username_not_found}

13_Negative Scenario Verify Behaviour for payload with 7 SNMPV3 Trap Recepients payload on LIG
    [Documentation]    Edit LIG for trap details with 7 SNMPV3 trap data
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv3_li_body_6_users_7_traps}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${trap_destination_max_error}

14_Negative Scenario Verify SNMPV1 can accept max of 5 traps on LIG
    [Documentation]    Edit LIG for SNMPV1 that can accept a max of 5 traps only
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv1_li_body_6_traps}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${trap_destination_max_error}

15_Verify a max of 5 SNMPV1 traps and 6 SNMPV3 traps payload is accepted at once on LIG
    [Documentation]    Edit LIG for SNMPV1 that can accept a max of 5 traps and SNMPV3 with max of 6 traps are accepted at once
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv1_li_body_6snmpv3traps_5snmpv1traps}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}

16_Negative Scenario verify behaviour for sending payload with 2 users of same name at once(duplicate user) on LIG
    [Documentation]    Edit LIG SNMPV3 for sending payload with 2 users of same name at once
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv3_li_body_duplicate_user}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}     flag=1    errorMessage=${duplicate_username_error}

17_Negative Scenario Create 1st user and then edit LIG again to add 2nd user with same name & verify behaviour on LIG
    [Documentation]    Edit LIG SNMPV3 for sending payload with 2 users of same name one by one
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_md5_des_duplicate['snmpUsers'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${duplicate_username_error}

18_Negative Scenario Verify the behaviour for giving same IP for both trap and inform despite having different users on LIG
    [Documentation]    Edit LIG SNMPV3 for giving same ip for trap and inform despite having different users

    log to console    \nconfigure a snmpv3 user with notification type as TRAP with a Trap Recepient IP\n
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    ${lig_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_sha_inform['snmpUsers'][0]}
    Append To List    ${lig_edit_snmp_trap}    ${SNMPV3_LI_body_sha_inform['trapDestinations'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${lig_edit_snmp_trap}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${trap_dest_duplicate_error}

19_Negative Scenario Delete a user who is assigned to trap and verify behaviour on LIG
    [Documentation]    Edit LIG SNMPV3 for deleting a user who is assigned to a trap
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${list}    Create List
    Set To Dictionary    ${lig_snmp}    snmpUsers=${list}
    Edit LIG and verify status  lig_body=${lig_edit}     lig_body_snmp=${lig_snmp}  Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${username_not_found}

20_Edit password of a snmpv3 user in LIG and verify LI is in Inconsistent state
    [Documentation]    Edit LIG SNMPV3 password for user and check whether LI is inconsistent

    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    Set To Dictionary    ${lig_edit_snmp_user[0]}    userCredentials=${invalid_userCredentials}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${lig_snmp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}


21_TRAP SCENARIO Add SNMP config in LIG for single user with Authentication & Privacy protocol as MD5/DES with Trap notification and verify Trap for EFUSE
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}
    \   EFUSE ICM EfuseReset and verify the SNMPV3 TRAP    ${v3_cold_trap}  ${LE1}-${LIG_ME[${x}]}-${y}


21_LI_PO_Perform get request on LIG for a user with Auth/Privacy Protocol enabled verify the passwords are displayed as none
	[Documentation]    Perform get request on LIG for a user with Auth/Privacy Protocol enabled verify the passwords are displayed as none
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_sha_aes}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${LI_get_user_creds}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers'][0]['userCredentials']}
    Run Keyword If    '${LI_get_user_creds}' != 'None'    FAIL    ELSE    Log to console    \n Successfully verified that the user creds are encrypted\n


22_LI_PO_Add SNMP Config in LIG for 6 Snmpv3 users with diff auth & priv combinations and verify them with Carbon IC's CLI
	[Documentation]    Add SNMP Config in LIG for 6 Snmpv3 users with diff auth & priv combinations and verify them with Carbon IC's CLI
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_all_users}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}
    Validate All Users  ${LE1}-${LIG1}-1

23_Negative Scenario verify snmpv3 username field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 username textbox validations on LIG

#Negative scenarios for all negative username/password fields "CRM_SNMP_CONFIGURATION_USER_NAME_INVALID" - same error code since pass 13
# SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric
    ${len}    Get Length    ${invalid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${lig_uri}    Get LIG URI    ${LIG1}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${invalid_snmp_usernames[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    Edit LIG and verify status lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${username_invalid}

    ${len}    Get Length    ${valid_snmp_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${valid_snmp_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    Edit LIG and verify status lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

24_Negative Scenario verify snmpv3 Auth protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Authentication protocol textbox validations on LIG

#Negative scenarios
    ${len}    Get Length    ${invalid_auth_passwords}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${lig_uri}    Get LIG URI    ${LIG1}
    :FOR    ${x}    In Range    0    ${len}
    \   Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords[${x}]}
    \   ${lig_edit}    Get LIG member    ${LIG1}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${Auth_pwd_invalid}

# Positive scenarios
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${valid_auth_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    Edit LIG and verify status lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

25_Negative Scenario verify snmpv3 priv protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Privacy protocol textbox validations on LIG

# Negative scenarios
# Trying with special characters , 8 spaces as usernames
    ${len}    Get Length    ${invalid_auth_passwords}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    ${lig_uri}    Get LIG URI    ${LIG1}
    :FOR    ${x}    In Range    0    ${len}
    \   Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords[${x}]}
    \   ${lig_edit}    Get LIG member    ${LIG1}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${Privacy_pwd_invalid}

# Positive scenarios
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${valid_auth_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    Edit LIG and verify status lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}


26_Negative Scenario verify snmpv3 Engine ID field text box combination and Trap IP text box combination on LIG
    [Documentation]    verify different SNMPV3 trap ip's and engine id's validation on LIG
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${invalid_engine_id}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  flag=1    errorMessage=${invalid_engine_id_msg}
    Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${invalid_trap_ip}
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${trap_dest_ip_invalid}

27_Negative Scenario Verify behaviour for other users to edit LIG for SNMPV3
    [Documentation]    verify other users are able to edit lig for SNMPV3
    ${lig_uri}    Get LIG URI    ${LIG1}
    Remove All Users
    Add Users from variable ${users_list}
    ${usercount}=   Get Length  ${users_list}
    :FOR    ${x}    IN RANGE    0   ${usercount}
    \   ${user_name}=   Get From Dictionary ${users_list[${x}]} userName
    \   ${password}=    Get From Dictionary ${users_list[${x}]} password
    \   ${credentials} =    Create Dictionary   userName=${user_name}   password=${password}
    \   ${login}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${credentials}
    \   ${lig_edit}    Get LIG member    ${LIG1}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    \   Run Keyword If  '${users_list[${x}]['permissions'][0]['roleName']}' == 'Network administrator'  Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  ELSE    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}  tot_neg_flag=1
    \   Fusion Api Logout Appliance

#pre req : SP
28_TRAP SCENARIO Add SNMP config in LIG for single user with Authentication & Privacy protocol as SHA/AES with trap notification and verify Trap for disable downlink port
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All Users
    Clear ULS in LIG & LI
    Create Uplinkset
    Power off ALL Servers
    Remove All Server Profiles
    ${profile_len}= Get Length  ${sp_snmp}
    ${resp}=   Add Server Profiles from variable   ${sp_snmp}
    :FOR    ${x}    IN RANGE    0   ${profile_len}
    \   ${task}     Wait For Task2     ${resp[${x}]}     20m     10
    \   Power on server     ${sp_snmp[${x}]['serverHardwareUri']}
    Log    \n Sleeping 300s for Poweron server    console=True
    sleep   300s
    ${lig_list} Create List
    ${Count}    Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${lig_uri}    Get LIG URI    ${LIG_ME[${x}]}
    \   Append to List  ${lig_list} ${lig_uri}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \   ${y}    Evaluate    ${x}+1
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_sha_aes}
    \   Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}
    \   ${output1}    ${output2}    Enable/Disable the linked Downlink ports and verify the resultant Traps ${LE1}-${LIG_ME[${x}]}-${y} ${Interconnects[${x}]}
    \   ${lig_edit}    Get LIG member    ${LIG_ME[${x}]}
    \   ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    \   Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    trapFormat=SNMPv1
    \   Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    communityString=Public
    \   ${lig_snmp}    Edit LIG body for SNMP    enabled=true   v3enabled=false readCommunity=public    Lig=${LIG_ME[${x}]}
    \   Edit LIG and verify status  lig_body=${lig_edit}   lig_body_snmp=${lig_snmp}    Li_name=${LE1}-${LIG_ME[${x}]}-${y} LIG_Uri=${lig_list[${x}]}
    \   ${output3}    ${output4}    Enable/Disable the linked Downlink ports and verify the resultant Traps ${LE1}-${LIG_ME[${x}]}-${y} ${Interconnects[${x}]}
    \   Run Keyword If  '${output2}' == '${output4}'    Log to console  \nSuccessfully!! verified the OIDs of SNMPv3 - SNMPv1 Traps for Port Enable/disable\n
    \   ...    ELSE    FAIL

29_Negative Scenario to verify duplicate IP payload on LIG
    [Documentation]    Verify Dupliacte IP's in payload is not accepted
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary   ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_all_users}
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}
    ${lig_edit_2}    Get LIG member    ${LIG1}
    ${lig_snmp_2}    Get Variable Value    ${lig_edit_2['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp_2}    trapDestinations=${lig_duplicate_trap_ip}
    Set To Dictionary    ${lig_edit_2}    snmpConfiguration=${lig_snmp_2}
    Edit LIG and verify status  lig_body=${lig_edit_2}  Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    flag=1    errorMessage=${trap_dest_duplicate_error}

30_SNMPv1 and SNMPv3 config on LIG
    [Documentation]    Set both SNMPv1 & SNMPv3 config on LIg-UFg and verify them on ICs
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${SNMPV3_LI_body_md5_des}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${LIG_edit_snmp_trap}    ${v1_trap}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_snmp}    enabled=true
    Edit LIG and verify status  lig_body=${lig_edit}    Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}    lig_body_snmp=${lig_snmp}

## Code to verify in IC
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${resp}    Fusion Api Get Li    ${li_uri}
    Set Global Variable    ${LI_Users}     ${resp['snmpConfiguration']['snmpUsers']}
    Set Global Variable    ${LI_trap}     ${resp['snmpConfiguration']['trapDestinations']}
    ${length}=    Get Length     ${LI_trap}
    Set Global Variable     ${Len_Trap}     ${length}
    :FOR     ${x}    IN RANGE     ${Len_Trap}
    \     Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1  ${LE1}-${LIG1}-1    ELSE      Get Trap details and validate for single trap    ${x} ${LE1}-${LIG1}-1

#SNMPv3 with 6 users and 1 trap destination. Modify trap user in loop and verify them on IC's
31_Edit LIG and set different configurations for SNMPV3 and verify them on Carbon IC's
    [Documentation]    Verify LIG edit operation for different trap users and check whether it's reflected on the Carbon IC's CLI

    ## Setting Inform
    ${lig_uri}    Get LIG URI    ${LIG1}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp['trapDestinations'][0]}    port=${port}
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id1}
    Edit LIG and verify status  lig_body=${lig_edit}      lig_body_snmp=${temp} Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

### Code to verify in IC
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${resp}    Fusion Api Get Li    ${li_uri}
    Set Global Variable    ${LI_trap}     ${resp['snmpConfiguration']['trapDestinations']}
    ${length}=    Get Length     ${LI_trap}
    Set Global Variable     ${Len_Trap}     ${length}

    :FOR     ${x}    IN RANGE     ${Len_Trap}
    \   Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv3'     Get Trap details and validate for single trap     ${x}  ${LE1}-${LIG1}-1     ELSE    Fail

### changing trap users

    ${lig_edit_2}    Get LIG member    ${LIG1}
    ${lig_snmp_2}    Get Variable Value    ${lig_edit_2['snmpConfiguration']}
    ${LIG_edit_snmp_trap_2}    Get Variable Value    ${lig_snmp_2['trapDestinations']}

### Here it will be inform for all users

    :FOR    ${x}    In Range    0    4
    \    Log to console    \n Editing Trap user for ${trap_users_list[${x}]}\n
    \    Set To Dictionary    ${lig_snmp_2['trapDestinations'][0]}    userName=${trap_users_list[${x}]}
    \    Set To Dictionary    ${lig_edit_2}    eTag=
    \    Edit LIG and verify status lig_body=${lig_edit_2}    lig_body_snmp=${lig_snmp_2}   Li_name=${LE1}-${LIG1}-1    LIG_Uri=${lig_uri}

    #\    ### Code to verify in IC
    \    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    \    ${resp}    Fusion Api Get Li   ${li_uri}
    \    Set Global Variable    ${LI_trap}     ${resp['snmpConfiguration']['trapDestinations']}
    \    ${len}=    Get Length     ${LI_trap}
    \    Validate LI Trap     ${len}     ${LI_trap} ${LE1}-${LIG1}-1

*** Keywords ***
Edit LIG and verify status
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${lig_body}  ${Li_name}  ${LIG_Uri}  ${lig_body_snmp}=   ${flag}=0   ${errorMessage}=${EMPTY}    ${tot_neg_flag}=0
    ${lig_body_snmp_length} Get Length  ${lig_body_snmp}
    #${lig_body_snmp}=  Set Variable If ${lig_body_snmp_length} != 0    ${lig_body_snmp}    ${lig_body}
    Run Keyword If  ${lig_body_snmp_length} != 0    Set To Dictionary    ${lig_body}    snmpConfiguration=${lig_body_snmp}
    ${resp}    Fusion Api Edit Lig    ${lig_body}   ${LIG_Uri}
    #Run Keyword If  '${resp['status_code']}' == '202' and ${tot_neg_flag} != 1 Run Keyword If  ${flag} == 1    Wait For Task2  ${resp}    errorMessage=${errorMessage} PASS=Error  ELSE    Run Keywords
    Run Keyword If  '${resp['status_code']}' == '202'   Run Keywords
    ... Wait For Task2  ${resp}    PASS=((?i)Completed) AND
    ... LI Update and IC state check for LIG SNMPV3    ${Li_name}
    #...    ELSE IF  ${flag} == 1 and '${resp['status_code']}' == '400' Should Match    ${resp['errorCode']}    ${errorMessage}
    ... ELSE IF  ${flag} == 1   Wait For Task2  ${resp}    errorMessage=${errorMessage} PASS=Error
    ... ELSE IF ${tot_neg_flag} == 1 and '${resp['status_code']}' == '403'  Should Match    ${resp['errorCode']}    ${Invalid_users_error}
    ... ELSE    FAIL

Edit LIG body for SNMP

    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${Lig}   ${snmpusers}=    ${trapdestination}=    ${v3enabled}=${EMPTY}   ${enabled}=${EMPTY} ${readCommunity}=${EMPTY}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${Lig}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    ${snmp_user_length} Get Length  ${snmpusers}
    ${trapdestination_length}   Get Length  ${trapdestination}
    ${v3enabled}=   Run Keyword If  '${v3enabled}' != '${EMPTY}'    Set Variable    ${v3enabled}    ELSE    Get From Dictionary ${lig_snmp} v3Enabled
    ${enabled}= Run Keyword If  '${enabled}' != '${EMPTY}'  Set Variable    ${enabled}  ELSE    Get From Dictionary ${lig_snmp} enabled
    ${readCommunity}=   Run Keyword If  '${readCommunity}' != '${EMPTY}'    Set Variable    ${readCommunity}    ELSE    Get From Dictionary ${lig_snmp} readCommunity
    ${trapdestination}= Run Keyword If  ${trapdestination_length} != 0  Set Variable    ${trapdestination}  ELSE    Get From Dictionary ${lig_snmp} trapDestinations
    ${snmpUsers}=   Run Keyword If  ${snmp_user_length} != 0    Set Variable    ${snmpUsers}    ELSE    Get From Dictionary ${lig_snmp} snmpUsers
    Set To Dictionary    ${lig_snmp}    v3Enabled=${v3enabled}
    Set To Dictionary    ${lig_snmp}    enabled=${enabled}
    Set To Dictionary    ${lig_snmp}    readCommunity=${readCommunity}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    [Return]    ${lig_snmp}

Check IC's State
    [Documentation]    Check IC's State
    [Arguments] ${li}
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    ${len}    Get Length    ${icuri}
    :For    ${x}    In Range    0    ${len}
    \    IC reached state   ${icuri[${x}]}  Configured

LI Update and IC state check for LIG SNMPV3
    [Documentation]    LI Update and IC state check for LIG SNMPV3
    [Arguments] ${li}
    ${li_uri}    Get LI URI    ${li}
    Check LI Status    ${li}    ${LI_Inconsistent}
    Check IC's State    ${li}
    ${LE_Dto}=  Create Dictionary   name=${li}
    Update Logical Interconnect from Group   ${LE_Dto}   timeout=900
    sleep   60s
    Check LI Status    ${li}    ${LI_consistent}
    Check IC's State    ${li}

Get Interconnect Bay
    [Documentation]    Gets Bay number for a given uri
    [Arguments] ${icuri}
    ${resp} Fusion Api Get Interconnect uri=${icuri}
    ${Bay_number}   Get From Dictionary ${resp['interconnectLocation']['locationEntries'][1]['value']}
    [Return]    ${Bay_number}

EFUSE ICM EfuseReset and verify the SNMPV3 TRAP
    [Documentation]    EFUSE ICM EfuseReset and verify the SNMPV3 TRAP
    [Arguments]    ${trap}  ${li}
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    Open SNMP Client and Login    ${V3_host}
    Clear Trap
    Get Interconnect Bay    ${ic_uri[0]}
    Efuse IC    ${ic_uri[0]}    ${ic_bay}
    ${ic_ip}    Get interconnect ip ${ic_uri[0]}
    Wait Until Keyword Succeeds    1000s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    [Return]    True

Efuse IC
    [Documentation]    perform IC efuse
    [Arguments]    ${ic_uri}    ${ic_bay}
    Get EM IP
    Get EM Token    ${ENC1}
    EFuse ICM    EFuseOn   ${ic_bay}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Absent
    sleep   60s
    EFuse ICM    EFuseOff   ${ic_bay}
    Wait Until Keyword Succeeds    15 min   15s     IC reached state    ${ic_uri}    Configured

Issue a Power Off followed by Power On from OV and verify the Trap
    [Documentation]    Issue a Power Off followed by Power On from OV and verify the Trap
    [Arguments]    ${trap}  ${li}   ${IC}
    Log to console    \n clearing old traps \n
    Clear Trap
    Patch Interconnect     ${IC}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    #${resp}    Get LI member   ${li}
    ${icname}   Get From Dictionary ${IC}   name
    ${ic_uri}   Get IC URI  ${icname}
    Wait Until Keyword Succeeds    25 min   15s     IC reached state    ${ic_uri}    Maintenance
    Patch Interconnect     ${IC}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    25 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console    \n Verify the Traps from trap receiver \n
    ${ic_ip}    Get interconnect ip ${ic_uri}
    ${output}    Wait Until Keyword Succeeds    300s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    [Return]    True

Clear Trap
    [Documentation]    Clear Old Traps
    Open Connection     ${SNMP_IP}     timeout=180s
    Login               ${V3_user}     ${V3_pass}
    log to console    Logged into the Snmp client : ${SNMP_IP}
    Write    cd /
    Write    cd var
    Write    cd log
    Write    > messages
    Close All Connections
    log to console    \n Cleared the trap messages

Get Trap
    [Documentation]    Opens the Trap receiver machine to verify the trap
    [Arguments]        ${OA_HOST}    ${OA_USER}     ${OA_PASS}
    Open Connection     ${OA_HOST}    timeout=120s
    Login               ${OA_USER}     ${OA_PASS}
    Write    cd /
    Write    cd var
    Write    cd log
    #Write    cat messages
    Write    tail -f -n 20 messages
    Sleep    10s
    ${output}    Read
    Close All Connections
    [Return]    ${output}

Verify Trap for reboot
    [Documentation]    Verify Trap for IC reboot
    [Arguments]    ${ic_ip}    ${trap}
    ${trap_output}    Get Trap    ${SNMP_IP}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    Log to console    \nThe Trap Output contains the required IC IP for IC reboot\n
    ${lines1}    Should contain   ${IC_trap}    ${trap}
    Log to console    \nThe Trap Output contains Cold Trap for the given IC Operation\n
    [Return]    True

Get interconnect ip
    [Documentation]    Fetch IC IPs
    [Arguments]     ${icuri}
    ${resp} Fusion Api Get Interconnect uri=${icuri}
    ${interconnectIP} =     Get From Dictionary     ${resp} ipAddressList
    :FOR    ${x}    IN RANGE    0   2
    \   ${type}=    Get From Dictionary ${resp['interconnectLocation']['locationEntries'][${x}]}    type
    \   ${Bay}= Run Keyword If  '${type}'=='Bay'    Get From Dictionary ${resp['interconnectLocation']['locationEntries'][${x}]}    value
    \   Exit For Loop If    ${Bay} != ${NONE}
    Set Global Variable ${IC_bay}   ${Bay}
    ${len}    Get Length    ${interconnectIP}
    :For    ${x}    In Range    0    ${len}
    \    ${value}    Run Keyword If   '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    Log to console    \n the interconnect ip is :${value}\n
    [Return]    ${value}

verify trap for oid
    [Documentation]    verify trap for enable/disable IC ports with port and OID
    [Arguments]    ${ic_ip}
    ${trap_output}    Get Trap    ${SNMP_IP}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    ${temp}    Convert To String    ${IC_trap}
    ${lines}    Get Lines Containing String   ${temp}    ${pattern2}
    ${str}    Convert To String    ${lines}
    ${match}    ${oid_value}    ${port}     Should Match Regexp    ${str}    INTEGER: .*SNMPv2-SMI::experimental(.*) = STRING:\\s+\\"port(\\d+)\\"
    log to console    \n The oid_value output is ${oid_value}\n
    log to console    \n The port output is ${port}\n
    log to console    \n The match output is ${match}\n
    [Return]    ${port}    ${oid_value}

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=300s    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}    30s
    [Return]                    ${Id}

Enable/Disable the linked Downlink ports and verify the resultant Traps
    [Documentation]    Perform port enable/disable and verify traps
    [Arguments] ${li}   ${IC}
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    ${len}    Get Length    ${icuri}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   Clear Trap
    \   ${ic_ip}=    Get interconnect ip    ${icuri[0]}
    \   Enable/disable Port ${Supported_port}   false   ${icuri[0]} ${IC}
    \   ${port}    ${oid}    Wait Until Keyword Succeeds    300s    10s    verify trap for oid    ${ic_ip}
    \   log to console     \n port output wait :${port}\n
    \   ${Linked_downlink_port_id}= Get Substring   ${Supported_port}   1
    \   Run Keyword If    '${port}' == '${Linked_downlink_port_id}'     Log to console    \n The Trap output contains the enabled/disabled port information\n   ELSE    FAIL
### Enabling the disabled downlink port
    \   Enable/disable Port ${Supported_port}   true    ${icuri[0]} ${IC}
    [Return]    ${port}    ${oid}

Enable/disable Port
    [Documentation]    Perform port enable/disable
    [Arguments]     ${Supported_port}   ${enabled}  ${ICM_uri}  ${ICM_name}

    ${Resp}    Get IC Port    ${ICM_uri}    ${Supported_port}
    Set to Dictionary   ${Resp}   enabled    ${enabled}
    ${Return}    Update IC Port    ${ICM_name}    ${Supported_port}    ${Resp}
    ${Resp_after_action}    Get IC Port    ${ICM_uri}    ${Supported_port}
    Run Keyword If  ${enabled} == false Should be Equal As Strings    ${Resp_after_action['portStatusReason']}    NotLoggedIn   ELSE    Should be Equal As Strings    ${Resp_after_action['portStatusReason']}    LoggedIn

Get IC Port
    [Documentation]    Returns the port info of the named port of specified interconnect uri
    [Arguments]        ${uri}    ${portName}
    ${return} =    Create List
    ${resp} =    fusion api get interconnect ports    uri=${uri}
    ${ports} =    Get From Dictionary    ${resp}    members
    :FOR    ${port}    IN    @{ports}
    \    ${return} =    Run Keyword If    '${port['portName']}' == '${portName}'    set variable    ${port}
    \    Exit for loop if    '${port['portName']}' == '${portName}'
    [Return]    ${return}

Validate LI Trap
    [Documentation]     Validate username
    [Arguments]         ${len}     ${LI_trap}   ${li}
    :FOR     ${x}    IN RANGE     ${len}
    \     Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv3'     Get Trap details and validate for single trap     ${x}    ${li}     ELSE    Fail

Get Trap details from Snmpv1
    [Documentation]     Getting IC bays and IP
    [Arguments] ${li}
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    ${len}    Get Length    ${icuri}
    :FOR    ${x}    IN RANGE    0  ${len}
    \    ${ic_ip}   Get interconnect ip    ${icuri[${x}]}
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Set Global Variable    ${IP}    ${ic_ip}
    \    ${Password}=   Run Keyword If  '${ic_ip}'!='${NONE}'   Get Token
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Login Into ICs To Validate SNMPV1      ${IP}    ${Password}

Login Into ICs To Validate SNMPV1
    [Documentation]        Connect to Fusion VM Bash via SSH and get trap details
    [Arguments]            ${IP}    ${Password}
    Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv1
    Log to console    \n The Ic output: ${show}
    Close All Connections
    Set Global Variable     ${snmpv1_trap}     ${show}
    Matching the trap details from interconnect to validate     ${snmpv1_trap}

Matching the trap details from interconnect to validate
    [Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
    [Arguments]         ${snmpv1_trap}
    ${str}    Convert To String    ${snmpv1_trap}
    @{words}    Split String    ${str}    ${snmpv1_trap_split}
    ${length}    Get Length    ${words}
    #Set Global Variable    ${length}    ${len}

    ${list}    Create List
    :For    ${x}    In Range    1    ${length}
    \    ${list_temp}    Create List
    \    Append To List    ${list_temp}    ${words[${x}]}
    \    Append To List    ${list}    ${list_temp}
    Log to Console     ${list}
    ${length}     Get Length     ${list}
    ${z}=     Evaluate    ${length}-1

    ${LIST_TRAP}     Create List
    :For    ${x}    In Range    0    ${z}
    \    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
    \    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}     Trap\\s+recipient:\\s+(\\d+.\\d+.\\d+.\\d+)
    \    ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+port:\\s+(\\d+)
    \    ${output2}     ${output_community}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\w+)
    \    Append To List      ${list1}     ${output_ip[1]}     ${output_port[1]}     ${output_community[1]}
    \    Append To List      ${LIST_TRAP}      ${list1}

    SNMPV1 TRAP VALIDATION FOR SINGLE USER      ${LIST_TRAP}

SNMPV1 TRAP VALIDATION FOR SINGLE USER
    [Documentation]     Getting LI Trap name, IP and port number for SNMPv1
    [Arguments]          ${LIST_TRAP}
    :FOR    ${x}     IN RANGE     0     ${Len_Trap}
    \    Run Keyword If     '${LI_trap[${x}]['trapFormat']}' != 'SNMPv1'    Continue For Loop
    \    ${trap_ip}    Get From Dictionary    ${LI_trap[${x}]}    trapDestination
    \    ${port_no}     Get From Dictionary    ${LI_trap[${x}]}    port
    \    ${community}     Get From Dictionary    ${LI_trap[${x}]}    communityString
    Match Trap Details for single trap      ${trap_ip}     ${port_no}     ${LIST_TRAP}     ${community}   ${Len_Trap}

Match Trap Details for single trap
    [Documentation]     Matching LI trap details with ICs Trap details for SNMPv1
    [Arguments]      ${trap_ip}     ${port_no}     ${LIST_TRAP}    ${community}    ${Len_Trap}
    :For     ${x}    In Range      0      ${Len_Trap}
    \    Run Keyword If     '${trap_ip}' == '${LIST_TRAP[${x}][0]}'     Log to Console    \nSuccessfully!!..Trap IP matches for snmpv1    ELSE     Continue For Loop
    \    Run Keyword If     '${port_no}' == '${LIST_TRAP[${x}][1]}'     Log to Console     \nSuccessfully!!..Port matches for snmpv1     ELSE     Exit For Loop
    \    Run Keyword If     '${community}' == '${LIST_TRAP[${x}][2]}'     Log to Console     \nSuccessfully!!..Community Matches for snmpv1    ELSE     Exit For Loop


Get Trap details and validate for single trap
    [Documentation]      Getting LI Trap details for SNMPv3
    [Arguments]     ${x}    ${li}

    ${trap_deatails_LI}    Create List
    ${trap_ip}    Get From Dictionary     ${LI_trap[${x}]}    trapDestination
    ${port_no}     Get From Dictionary    ${LI_trap[${x}]}    port
    ${username}    Get From Dictionary    ${LI_trap[${x}]}   userName
    ${inform}     Get From Dictionary     ${LI_trap[${x}]}     inform
    ${engine}     Get From Dictionary     ${LI_trap[${x}]}    engineId

    ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    Append to List    ${trap_deatails_LI}    ${trap_ip}    ${port_no}    ${username}     ${engine}
    Sleep     30s
    Get Trap details from Snmp machine  ${li}

    Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${trap_deatails_LI}    ${trap_details_snmp}    ELSE     Match edited Trap     ${trap_details_snmp}     ${trap_deatails_LI}

convert engine id
    [Documentation]     Convert the Engine ID in lower case
    [Arguments]     ${engine}
    ${temp_en}=     Convert To Lowercase    ${engine}
    ${engine}=    Fetch From Right    ${temp_en}    0x
    Log to Console    ${engine}
    [Return]     ${engine}

Match edited Trap
    [Documentation]     Match Trap for SNMPv3
    [Arguments]     ${trap_details_snmp}     ${trap_deatails_LI}
    ${len}=     Get Length     ${trap_details_snmp}
    ${y}=     Evaluate     ${len} - 1
    :For     ${x}    In Range     0     ${y}
    \   Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    trap IP's matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    Ports matches
    \   ...    ELSE    Continue For Loop
    \   Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    Username Matches
    \   ...    ELSE    Fail

Get Trap details from Snmp machine
    [Documentation]     Getting ICs bay and IP from LI to login into ICS
    [Arguments] ${li}
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    ${len}    Get Length    ${icuri}
    ${IC_IP_list}    Create List
    Set Global Variable    ${IC_IP_list}    ${IC_IP_list}
    Sleep    30s
    :FOR    ${x}    IN RANGE    0  ${len}
    \    ${ic_ip}   Get interconnect ip    ${icuri[${x}]}
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Set Global Variable    ${IP}    ${ic_ip}
    \    Sleep    5s
    \    ${Password}=   Run Keyword If  '${ic_ip}'!='${NONE}'   Get Token
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Login Into ICs snmpv3     ${IP}    ${Password}
    Lists Should Be Equal     ${IC_IP_list[0]}    ${IC_IP_list[1]}
    Set Global Variable     ${trap_details_snmp}    ${IC_IP_list[0]}

Get Token
    [Documentation]    Connect to Fusion VM Bash via SSH and get IC password
    Log to console    \n\nLogging into OneView SSH session
    #${Search_Dir}  ${remove_dir}=  Split Path  ${ICM_Scripts}
    Login to Fusion via SSH
    Log to console  \n\n Verify files are exists in appliance
    ${ls}=    Execute Command    ls
    ${string}=    Split String    \n${ls}
    ${len}=    Get Length    ${string}
    Log to Console    \n-Length_is...${len}
    Run Keyword If  ${len} ==2    Log to console    \n${len} Files already exist in appliance
    ...         ELSE    Run Keywords
    ... Put File      ${ICM_Scripts}/${File_Names[0]}       /root   mode=0744   AND
    ... Put File      ${ICM_Scripts}/${File_Names[1]}       /root   mode=0744
    #${read}=   Run Keyword If  ${len} !=2  write    cd ${remove_dir}
    #SSHLibrary.Read Until    ${FUSION_PROMPT}
    #${Perm}=    Execute Command     chmod +x readMECanmic.sh writeMECanmic.sh
    ${read}=    write    ./${File_Names[0]} ${IC_bay} AQ==
    SSHLibrary.Read Until    ]${FUSION_PROMPT}
    ${write}=    write    ./${File_Names[1]} ${IC_bay} 191
    ${b}=    SSHLibrary.Read Until    ]${FUSION_PROMPT}
    Log to Console     ${b}
    ${PASSWORD}=    Get Regexp Matches    ${b}    is:\\s+(.*)
    ${pwd}=     Fetch From Right    ${PASSWORD[1]}    is:
    Log to Console     ${pwd}
    ${Password}=   Remove String Using Regexp    ${pwd.strip()}    \t
    Log to Console      \n The Interconnect password is: ${Password}
    ${y}=     Get Length     ${Password}
    Run Keyword If     '${y}' == '16'      Log to Console    \n!!..Valid Password..!!     ELSE     Split password     ${Password}
    [Return]    ${Password}

Split password
    [Documentation]     Split password
    [Arguments]    ${Password}
    ${z}    Fetch From Left     ${Password}    ${split_password}
    Set Global Variable    ${Password}    ${z}
    [Return]    ${Password}


Login Into ICs snmpv3
    [Documentation]    Connect to Fusion VM Bash via SSH and get users and trap details
    [Arguments]      ${IP}    ${Password}
    Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3
    Sleep    2s
    Close All Connections
    ${trap}=    Fetch From Right    ${show}    ${Users_details}
    ${usr}=    Fetch From Left    ${show}    ${Users_details}
    Set Global Variable    ${Trap}    ${trap}
    Set Global Variable    ${User}    ${usr}
    Matching the trap details from interconnect of Snmp machine

Matching the trap details from interconnect of Snmp machine
    [Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
    ${str}    Convert To String    ${Trap}
    ${words}    Split String    ${str}    ${split_trap}
    ${length}=    Get Length     ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${length}
    \    ${list_temp}    Create List
    \    Append To List    ${list_temp}    ${words[${x}]}
    \    Append To List    ${list}    ${list_temp}

    ${trap_details}    Create List
    ${len1}     Evaluate    ${length}-1
    :For    ${x}    In Range    0    ${len1}
    \    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
    \    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
    \    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
    \    ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
    \    ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
    \    ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
    \    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
    \    Append To List     ${trap_details}    ${list1}
    Log to Console    ${trap_details}
    Append To List     ${IC_IP_list}     ${trap_details}


fetch engine id and corresponding username
    [Documentation]     Fetch Engine ID from SNMPv3
    [Arguments]     ${trap_deatails_LI}    ${trap_details_snmp}
    Set Log Level    TRACE
    ${str}    Convert To String    ${User}
    ${s}    Split String    ${str}    \nUser

    ${len}=    Get Length    ${s}
    ${aa}=    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${a} =    Create List
    \    Append To List    ${a}     ${s[${x}]}
    \    Log to Console    ${a}
    \    Append To List    ${aa}    ${a}
    Log to Console    ${aa}
    ${snmp_users_len}    Get Length    ${aa}

    :For    ${x}    In Range    1    ${snmp_users_len}
    \    ${str}    Convert To String    ${aa[${x}]}
    \    ${n}    Fetch From Right    ${str}     ${name[${x}]}
    \    ${uname}    Fetch From Left    ${n}     ${user_left}
    \    Run Keyword If     '${uname}' != '${trap_deatails_LI[2]}'     Continue For Loop    ELSE     Log to Console    \nSuccessfully!!.. Usernames Matches for Inform
    \    ${result}     ${result1}     Should Match Regexp    ${str}    Engine\\s+ID:\\s+(.*)
    \    ${Engine_id_SNMP}     Run Keyword If      '${x}' == '6'       Fetch From Left     ${result1}    ${match}     ELSE     Remove String     ${result1}    ']
    \    Run Keyword If     '${Engine_id_SNMP}' == '${temp_engine_id}'     Continue For Loop
    \    ${temp}=     Split String     ${Engine_id_SNMP}    :
    \    ${len_temp}=     Get Length     ${temp}
    \    ${output}=    Removing Space from Engine ID     ${temp}     ${len_temp}
    \    Run Keyword If      '${output}' == '${trap_deatails_LI[3]}' and '${uname}' == '${trap_deatails_LI[2]}'    Log to Console    Engine ID Matches     ELSE    Exit For Loop
    \    Matching Inform     ${trap_deatails_LI}     ${trap_details_snmp}

Removing Space from Engine ID
    [Documentation]     Removing Space in Engine ID
    [Arguments]     ${temp}     ${len_temp}
    :FOR     ${x}    IN RANGE    0     ${len_temp}
    \     ${t}=     Catenate     ${var}      ${temp[${x}]}
    ${output}=    Remove String Using Regexp    ${t.strip()}     ${SPACE}
    [Return]    ${output}

Matching Inform
    [Documentation]    Matching LI Engine ID with ICs Engine ID with its corresponding usernames
    [Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}
    ${len}=     Get Length     ${trap_details_snmp}
    ${y}=     Evaluate     ${len} - 1
    :For     ${x}    In Range     0     ${y}
    \    Run Keyword If     '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'     Log to Console    \nSuccessfully!! username      ELSE     Continue For Loop
    \    Run Keyword If     '${trap_details_snmp[${x}][3]}' == 'INFORM' or '${trap_details_snmp[${x}][3]}' == 'TRAP'     Exit For Loop

Validate All Users
    [Documentation]    Validate All Users
    [Arguments] ${li}
    ${li_uri}    Get LI URI   ${li}
    ${response}    Fusion Api Get Li    ${li_uri}
    Set Global Variable    ${snmpUsers}     ${response['snmpConfiguration']['snmpUsers']}
    Set Global Variable    ${TrapDestinations}     ${response['snmpConfiguration']['trapDestinations']}
    ${len_trap}=    Get Length     ${TrapDestinations}
    Set Global Variable    ${LI_trap_length}     ${len_trap}
    ${len}=    Get Length    ${snmpUsers}
    Set Global Variable    ${LI_Users_length}    ${len}
    Get Users details from Snmp machine to validate all users   ${li}

Get Users details from Snmp machine to validate all users
    [Documentation]    Get Users details from Snmp machine to validate all users
    [Arguments] ${li}
    ${ic_list}    Get IC
    ${resp} Get LI member   ${li}
    ${icuri}    Get From Dictionary ${resp} interconnects
    ${len}    Get Length    ${icuri}
    :FOR    ${x}    IN RANGE    0  ${len}
    \    ${ic_ip}   Get interconnect ip    ${icuri[${x}]}
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Set Global Variable    ${IP}    ${ic_ip}
    \    ${Password}=   Run Keyword If  '${ic_ip}'!='${NONE}'     Get Token
    \    Run Keyword If '${ic_ip}'!='${NONE}'   Login Into ICs to validate all users     ${IP}    ${Password}

Login Into ICs to validate all users
    [Documentation]        Connect to Fusion VM Bash via SSH and get users and trap details
    [Arguments]            ${IP}    ${Password}
    Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3

    ${snmp_Trap}=    Fetch From Right    ${show}    ${Users_details}
    Log to Console    ${snmp_Trap}
    ${Usr}=    Fetch From Left    ${show}    ${Users_details}
    Log to Console    ${Usr}
    Matching the users details from response of snmp machine      ${Usr}
    Matching the trap details of Snmp machine     ${snmp_Trap}

Matching the users details from response of snmp machine

    [Documentation]    Fetching user details from snmp machine and matching it with LI
    [Arguments]      ${Usr}
    ${str}    Convert To String    ${Usr}
    ${s}    Split String    ${str}    \nUser

    ${len}=    Get Length    ${s}
    ${aa}=    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${a} =    Create List
    \    Append To List    ${a}     ${s[${x}]}
    \    Log to Console    ${a}
    \    Append To List    ${aa}    ${a}
    Log to Console    ${aa}
    ${snmp_users_length}    Get Length    ${aa}

    :For    ${x}    In Range    1    ${snmp_users_length}
    \    ${str}    Convert To String    ${aa[${x}]}
    \    ${temp}    Fetch From Right    ${str}     ${name[${x}]}
    \    ${Username}    Fetch From Left    ${temp}     ${user_left}
    \    ${match}    Get Regexp Matches    ${Username}     snmpuser(.+)
    \    Run Keyword If       ${match} != []    Continue For Loop
    \    ${auth}    ${Auth}    Should Match Regexp    ${str}    Auth\\s+Protocol:\\s+(\\w+)
    \    ${priv}    ${Privacy}    Should Match Regexp    ${str}    Priv\\s+Protocol:\\s+(\\w+)
    \    Match Username Auth and Privacy     ${LI_Users_length}     ${snmpUsers}     ${Auth}     ${Privacy}      ${Username}

Match Username Auth and Privacy
    [Documentation]     Validating User details
    [Arguments]         ${LI_Users_length}     ${snmpUsers}     ${Auth}     ${Privacy}      ${Username}
    ${Index_list}    Create List
    :For    ${index}    In Range    0     ${LI_Users_length}
    \    Append to List    ${Index_list}   ${index}
    \    Run Keyword If     '${Username}' == '${snmpUsers[${index}]['snmpV3UserName']}'     Exit For Loop
    Log to Console   ${Index_list}
    ${user_name}=     Get Variable Value    ${snmpUsers[${index}]['snmpV3UserName']}
    ${x}=    Get From List    ${Index_list}    -1
    Run Keyword If    '${Auth}' == 'noAuth'     Check Auth protocol     ${x}     ${snmpUsers}    ${user_name}
    ...   ELSE    Run Keyword If    '${Auth}' == '${snmpUsers[${x}]['v3AuthProtocol']}'    Log to Console    \nSuccessfully!!..Auth matches

    Run Keyword If    '${Privacy}' == 'noPriv'     Check privacy protocol     ${x}    ${snmpUsers}     ${user_name}
    ...   ELSE    Run Keyword If    '${Privacy}' == '${snmpUsers[${x}]['v3PrivacyProtocol']}'    Log to Console    \nSuccessfully!!..Privacy matches

Check Auth protocol
    [Documentation]    Validating Auth of LI Users
    [Arguments]     ${x}    ${snmpUsers}    ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3AuthProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'    Log to Console     \nAuth Protocol Matches    ELSE    Fail
    [Return]

Check privacy protocol
    [Documentation]    Validating Privacy of LI Users
    [Arguments]     ${x}     ${snmpUsers}     ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3PrivacyProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'      Log to Console     \nPrivacy Protocol Matches    ELSE    Fail
    [Return]

Matching the trap details of Snmp machine

    [Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
    [Arguments]         ${snmp_Trap}
    ${str}    Convert To String    ${snmp_Trap}
    @{words}    Split String    ${str}    ${split_trap}
    ${len}    Get Length    ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${len}
    \    ${list_temp}    Create List
    \    Append To List    ${list_temp}    ${words[${x}]}
    \    Append To List    ${list}    ${list_temp}

    ${trap_details}    Create List
    ${len1}     Evaluate    ${len}-1
    :For    ${x}    In Range    0    ${len1}
    \    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
    \    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
    \    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
    \    ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
    \    ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
    \    ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
    \    Log to Console    ${output_type[1]}
    \    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
    \    Append To List     ${trap_details}    ${list1}
    \    Log to Console    ${trap_details}
    \    Set Global Variable    ${trap_details_snmp}    ${list1}
    \    Match Trap for all users     ${TrapDestinations}    ${LI_trap_length}

Match Trap for all users
    [Documentation]    Match trap for all users
    [Arguments]     ${TrapDestinations}     ${LI_trap_length}
    :For    ${x}    In Range    0    ${LI_trap_length}
    \    Run Keyword If     '${TrapDestinations[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1

Clear ULS in LIG & LI
    [Documentation]    This keyword will clear uplink sets in both LI and LIG
    ${length}=  Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0    ${length}
    \   ${resp}=    Get LIG member  ${LIG_ME[${x}]}
    \   ${liguri} = Get LIG URI ${LIG_ME[${x}]}
    \   ${empty_list}   Create List
    \   Remove From Dictionary    ${resp}    headers
    \   Remove From Dictionary    ${resp}    status_code
    \   Set To Dictionary    ${resp}    uplinkSets    ${empty_list}
    \   ${resp1}    Fusion Api Edit Lig    ${resp}    ${liguri}
    \   ${task}    Wait For Task2    ${resp1}    20m    2

Create Uplinkset
    [Documentation]    This keyword will create uplink sets in both LI and LIG
    ${length}=  Get Length  ${LIG_ME}
    :FOR    ${x}    IN RANGE    0    ${length}
    \   ${liguri} = Get LIG URI ${LIG_ME[${x}]}
    \   ${body} =   Build LIG body      ${ligs_pm[${x}]}
    \   ${resp} =   Fusion Api Edit Lig     ${body}     ${liguri}
    \   ${task}=    Wait For Task2  ${resp}   10m    10
    \   Update Logical Interconnect from Group    ${LI_dto[${x}]}