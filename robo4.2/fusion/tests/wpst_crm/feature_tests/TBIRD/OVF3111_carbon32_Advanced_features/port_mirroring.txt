*** Settings ***

Documentation       Carbon32_Portmirroring
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         port_monitor_support_module
Resource         ../../../../../Resources/api/fusion_api_resource.txt
Resource        SETUP.txt

*** Variables ***
${module_file_path1}      ${CURDIR}\\PerformIO.py
${module_file_path2}      ${CURDIR}\\FetchIO.py
${ICM_Scripts}      ${CURDIR}/ICM_Scripts/*.sh

****Test cases****

1_Enable Port Monitoring with Unauthorized User
    [Documentation]    Enable Port Monitoring with Unauthorized User
    ${Login_response}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Presetup
    Presetup for portmirroring    ${LIG}   ${ligs_pm}    ${sp_pm}
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${Login_response}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${usercred[1]}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}    ${Interconnects1[${x}]}    ${analyzer_port_bay4}      true        ${LI[${x}]}
    \    ${task} =  Wait For Task2  ${resp}    errorMessage=ACTION_FORBIDDEN_BY_ROLE    VERBOSE=${True}
    \    ${resp}=    Fusion Api Logout Appliance

2_Configure Port Monitoring with Analyzer port as 2 and Monitored port as d1 with direction as bi-directional
    [Documentation]    Configure Port Monitoring with Analyzer port as 2 and Monitored port as d1 with direction as bi-directional
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}  ${Interconnects[${x}]}    ${analyzer_port_bay1[${x}]}    true       ${LI[${x}]}
    \    ${task}=   Wait For Task2    ${resp}   5m    10
    \    Verify Interconnect     ${Interconnect_dto[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s    Verify Port Monitoring in IC     ${analyzer_port_bay1[${x}]}   ${analyzer_dport}     ${Interconnects[${x}]}      ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${Interconnects[${x}]}      ${Enclosure_Name[${x}]}   ${Interconnect_bays[0]}      ${analyzer_port_bay1[${x}]}

3_Negative_Create or edit an Uplinkset and try to use the analyzerPort 2 and verify the error message
    [Documentation]    Create or edit an Uplinkset and try to use the analyzerPort 4 and verify the error message

    ${li_uri} =     Get LI URI   ${LI[0]}
    ${resp}=    Edit uplinkset    ${uplink_sets['UplinkSet_1']['name']}   ${neg_uplink_sets[0]}    ${LI[0]}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_LOGICAL_UPLINK_UNAVAILABLE_PORT'   Log    \n Error Message is : ${resp['message']} \n    console=True
    ...    ELSE    FAIL
    Verify Interconnect    ${Interconnect_dto[0]}     state=Configured


    ${li_uri} =     Get LI URI   ${LI[1]}
    ${resp}=    Edit uplinkset    ${uplink_sets['UplinkSet_3']['name']}   ${neg_uplink_sets[1]}    ${LI[1]}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_LOGICAL_UPLINK_UNAVAILABLE_PORT'   Log    \n Error Message is : ${resp['message']} \n    console=True
    ...    ELSE    FAIL

    Verify Interconnect    ${Interconnect_dto1[0]}     state=Configured


4_Negative_Configure port monitoring with an uplink port which is already in the uplink set
    [Documentation]    Configure port monitoring with an uplink port which is already in the uplink set.

    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \   ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${Interconnects[${x}]}    ${used_uplink_port[${x}]}     true        ${LI[${x}]}
    \    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_ANALYZER_PORT_IS_UNAVAILABLE'   Log    \n Error Message is : ${resp['message']} \n    console=True
    ...    ELSE    FAIL
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured



5_Disable the analyzer port 2, and verify the port monitoring is disbaled
    [Documentation]    Disable the analyzer port 2, and verify the port monitoring is disbaled.
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}    ${interconnects[${x}]}    ${analyzer_port_bay1[${x}]}    false        ${LI[${x}]}
    \    ${task}=   Wait For Task2    ${resp}   5m    10
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured


6_Configure the Port monitoring by swapping from bay 1 port 2 to bay 4 port 2
    [Documentation]    Configure the Port monitoring by swapping from bay 1 port 2 to bay 4 port 2

    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}  ${Interconnects1[${x}]}    ${analyzer_port_bay4}    true        ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto1[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s    Verify Port Monitoring in IC     ${analyzer_port_bay4}      ${analyzer_dport}        ${Interconnects1[${x}]}     ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${interconnects1[${x}]}     ${Enclosure_Name[${x}]}    ${Interconnect_bays[1]}     ${analyzer_port_bay4}


7_Disable the Port monitoring on the analyzer port 2 of bay 4
    [Documentation]    Disable the Port monitoring on the analyzer port 2 of bay 4
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}    ${Interconnects1[${x}]}    ${analyzer_port_bay4}    false     ${LI[${x}]}
    \    ${task}=   Wait For Task2    ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto1[${x}]}     state=Configured

8_Configure Port monitoring by switching from the port 2 in bay 4 to port 2 in bay 1
    [Documentation]    Configure Port monitoring by switching from the port 4 in bay 4 to port 4 in bay 1
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}    ${Interconnects[${x}]}    ${analyzer_port_bay1[${x}]}    true     ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s    Verify Port Monitoring in IC     ${analyzer_port_bay1[${x}]}    ${analyzer_dport}        ${Interconnects[${x}]}      ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${interconnects[${x}]}     ${Enclosure_Name[${x}]}    ${Interconnect_bays[0]}     ${analyzer_port_bay1[${x}]}


9_Configure Port monitoring by switching from the port 2 to 3 in bay 1
    [Documentation]    Configure Port monitoring by switching from the port 4 to 3 in bay 1
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${Interconnects[${x}]}    ${analyzer_port_3_bay1[${x}]}    true        ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s     Verify Port Monitoring in IC        ${analyzer_port_3_bay1[${x}]}      ${analyzer_dport}        ${Interconnects[${x}]}      ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${Interconnects[${x}]}    ${Enclosure_Name[${x}]}       ${Interconnect_bays[0]}    ${analyzer_port_3_bay1[${x}]}

10_Disable the Port monitoring configuration on the Analyzer port 3
    [Documentation]    Disable the Port monitoring configuration on the Analyzer port 3
    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}    ${interconnects[${x}]}    ${analyzer_port_3_bay1[${x}]}    false      ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured

11_Configure Port monitoring by choosing the to server option for the Port 3 in bay 1
    [Documentation]     Configure Port monitoring by choosing the to server option for the Port Q1.3 in bay 1

    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor_to_server}        ${interconnects[${x}]}    ${analyzer_port_3_bay1[${x}]}    true     ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s    Verify Port Monitoring in IC     ${analyzer_port_3_bay1[${x}]}      ${analyzer_dport}        ${interconnects[${x}]}      ${li_portmonitor_to_server['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${interconnects[${x}]}    ${Enclosure_Name[${x}]}    ${Interconnect_bays[0]}    ${analyzer_port_3_bay1[${x}]}

12_Configure Port monitoring by choosing the from server option for the Port 4 in bay 4
    [Documentation]    Configure Port monitoring by choosing the from server option for the Port 4 in bay 4

    ${LI_length}=    Get Length    ${LI}
    : FOR    ${x}   IN RANGE    0     ${LI_length}
    \    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor_from_server}  ${interconnects1[${x}]}    ${analyzer_port_bay4}    true    ${LI[${x}]}
    \    ${task}=   Wait For Task2  ${resp}   10m    10
    \    Verify Interconnect        ${Interconnect_dto1[${x}]}     state=Configured
    \    Wait Until Keyword Succeeds    10min    2s    Verify Port Monitoring in IC     ${analyzer_port_bay4}     ${analyzer_dport}     ${interconnects1[${x}]}     ${li_portmonitor_from_server['monitoredPorts'][0]['portMonitorConfigInfo']}
    \    verify port mirroring in ICM CLI       ${interconnects1[${x}]}    ${Enclosure_Name[${x}]}    ${Interconnect_bays[1]}   ${analyzer_port_bay4}


***keywords***
Presetup for portmirroring
    [Documentation]    Presetup for port_mirroring
    [Arguments]   ${LIG}   ${ligs}    ${profiles}
    ${length}=    Get Length    ${LIG}
    : FOR   ${x}    IN RANGE    0    ${Length}
    \    ${liguri} =    Get LIG URI    ${LIG[${x}]}
    \    ${body} =   Build LIG body      ${ligs[${x}]}
    \    ${resp} =  Fusion Api Edit Lig     ${body}     ${liguri}
    \    ${task}=   Wait For Task2   ${resp}   10m    10
    \    Update Logical Interconnect from Group     ${LI_dto[${x}]}

    ${resp}=    Add Server Profiles from variable    ${profiles}
    ${len}=    Get Length     ${profiles}
    :FOR   ${x}    IN RANGE    0    ${len}
    \    ${task}     Wait For Task2     ${resp[${x}]}     20m     10
    \    Power on server     ${profiles[${x}]['serverHardwareUri']}
    Sleep    600s

    #####Creating users########

    ${resp}    Add Users from variable    ${users}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail    ELSE   Log    users created    console=True
    ${l} =  Get Length  ${users}
    ${resp}    Login all users    ${usercred}
    Log    \nLogging in as server admin and edit li for snmpv3\n    console=True

Configuring Port Monitoring in LI
    [Documentation]    Configuring Port Monitoring in LI
    [Arguments]         ${li_portmonitor1}    ${interconnects}    ${analyzer_port}    ${flag}     ${LI}=${LI}
    Set To Dictionary   ${li_portmonitor1}  enablePortMonitor    ${flag}
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${interconnects}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${analyzer_port}'
    Set To Dictionary   ${li_portmonitor1['analyzerPort']}  portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Set To Dictionary   ${li_portmonitor1['monitoredPorts'][0]} portUri    ${downlinkuri['uri']}
    ${uri} =    Get LI URI    ${LI}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor1}    uri=${uri}
    [Return]    ${resp}

Verify Port Monitoring in IC
    [Documentation]    Verify Port Monitoring in IC
    [Arguments]     ${ANALYZER_PORT}    ${d_port}   ${interconnects}    ${Monitored_status}
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${interconnects}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${z}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${z}]['portName']}' == '${ANALYZER_PORT}'
    ${u_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Log    ${u_port_info}   ${u_portinfo['portMonitorConfigInfo']}    console=True
    Run Keyword If    '${u_portinfo['portMonitorConfigInfo']}' != 'AnalyzerPort' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port -portMonitorConfigInfo in IC
    ...         ELSE    Log    \n Successfully verified the portMonitorConfigInfo and linked state for Analyzer port in IC !!    console=True
    :FOR    ${z}    IN RANGE    0  ${len}
    \   Log    ${ports[${z}]['portName']}  ${\n}    console=True
    \     Exit For Loop If    '${ports[${z}]['portName']}' == '${d_port}'
    ${d_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Run Keyword If    '${d_portinfo['portMonitorConfigInfo']}' != '${Monitored_status}' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Monitored ports-portMonitorConfigInfo in IC
    ...         ELSE    Log    \n Successfully verified the portMonitorConfigInfo and linked state for Monitored ports in IC !!    console=True

verify port mirroring in ICM CLI
    [Documentation]    verify port mirroring in ICM CLI
    [Arguments]    ${interc}    ${enc}   ${ic_bay}  ${analyzer_port}
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${interc}'"
    ${IC_IP}=      Get From Dictionary      ${resp['members'][0]['ipAddressList'][0]}    ipAddress
    Log    ${IC_IP}    console=True

    Log    \n\nLogging into OneView SSH session    console=True
    Login to Fusion via SSH
    Log    \n\nCopying the ICM scripts to the Fusion SSH    console=True
    Put File      ${ICM_Scripts}       /root
    Log   \n\nExecuting scripts to get the root password of ICM
    ${Perm}=    Execute Command     chmod +x readMECanmic.sh writeMECanmic.sh
    Sleep    5
    ${read}=    Execute Command    ./writeMECanmic.sh ${ic_bay} AQ==
    Sleep    10
    ${write}=   Execute Command    ./readMECanmic.sh ${ic_bay} 191
    Sleep    10
    ${op}=      Get Lines Containing String    ${write}    ICM Bay ${ic_bay}
    sleep    5
    ${out}=    Split String    ${op}    \n
    ${length}=    Get Length    ${out}
    :For    ${x}    IN RANGE    0     ${length}
    \    ${pwd}=     Run Keyword If    '${enc}'!='${Enclosure_Name[${x}]}'     Fetch From Right    ${out[${x}]}    :   ELSE    Continue For Loop

    ${Password}=   Remove String Using Regexp    ${pwd.strip()}    \t
    Log    ${password}    console=True
    Login to IC via SSH     ${IC_IP}    ${Password}
    ${show}=    Execute Command    switchshow
    Execute Command     \n
    ${show}=    Execute Command    switchshow
    Log    ${show}    console=True

    ${return_flag}=     validate_port_monitor_in_icm    ${port_map['${analyzer_port}']}   ${show}
    Log    ${return_flag}    console=True
    Run Keyword If  '${return_flag}' !='True'    fail    Log    "Failed to verify the configured Mirrored port in the ICM!!!"    console=True

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${FUSION_TIMEOUT}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

