***Settings***
Documentation    Regression Suite-Disable_Enable_downlink_port
#Variables       FC_FCoE_Common_Variables.py
#Variables       FC_FCoE_Data_Variable.py
Variables       data_variables_ethernet.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations.py
Library         data_variables_ethernet
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***

***Test cases***

Fetch ICM URI
    [Tags]    Common
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE

    ${resp}    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    Run Keyword If    ${resp[0]['status_code']} != 200    FAIL
    ...    ELSE    Log    Successfully logged in to the appliance    console=True

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

Get server IP and pass traffic for same physical port connections with same networks
    [TAGS]    Ethernet    critical
    [Documentation]    Get server IP and pass traffic for same physical port connections with same networks

    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}
    Set Suite Variable    ${ip}    ${ip}
    Set Suite Variable    ${server_details_same_phy_port}    ${server_details_same_phy_port}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${ENC1_SERVER_SAME_PHY_PORT}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC1_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[0]}
    Log    ${adapter_name_list}    console=True
    Set Suite Variable    ${adapter_name_list}    ${adapter_name_list}

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${delete_static_ip}    ${server_details_same_phy_port}    ${ip[0]}
    #Set Static ip
    Set_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${Powershell_set_static_enc1}    ${server_details_same_phy_port}    ${ip[0]}

1_Disable Aside ICM downlink port
    [Tags]    Common
    [Documentation]    Disable Aside ICM3 downlink port and verifies the state of ICM

    Disable Enable Ports    ${ASIDE_SERVER_DOWNLINKS}    ${ICM_uris[0]}    ${Interconnect_name[0]}    update=False    status=Critical    portStatus=Unlinked

    #Log    Verify servers Profile status Critical    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    Critical

Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable


    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

1_1_Validating FipSnooping Data Not Affected in Bside ICM
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

1_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

1_3_Validate FC DA Bside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information is not affected in Bside ICM


    Log    Verify ICM6 uplink WWN and name server information is not affected    console=True
    Verify Happy Bside Uplinks DA ports    ${ICM6_uri}

    Log    Verify if the servers Bside connection map is not affected    console=True
    Verify Happy Servers Bside DA Connections    ${ICM6_uri}


1_4_Validate FC FA Bside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Bside ports are not affected

    :FOR    ${ul}    IN    @{US_FA1_UPLINKS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM3_uri}    ${ul}    loginsCount=0

    Log    Verify login count for Bside ports are not affected    console=True
    Verify Happy Servers Bside FA Connections    ${ICM6_uri}

1_5_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

1_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${Bside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

1_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FCoE_ILO_details[${x}]}    ${Esxi_FCoE_servers_details[${x}]}

1_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic
    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FA_DA_ILO_details[${x}]}    ${Esxi_FA_DA_servers_details[${x}]}

Get Server IP For Ethernet Non LAG Servers and passing traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic

    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}   ${ping_type[1]}    ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

1_1_Verify Traffic in LAG Servers after disabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after disabling ASide ICM downlink ports

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

1_2_Verifying S-Channel common and advanced statistics vaules after disabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after disabling ASide ICM downlink ports

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${downlink_Aside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=constant    subport_no=1

    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${downlink_Bside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM6_uri}    ${downlink_Bside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

Kill Traffic Non LAG servers
    [TAGS]    Ethernet    non_critical
    [Documentation]    Kill Traffic for Non LAG servers

    Kill_traffic    ${Linux_servers_details_Non_LAG}

1_3_Verify Traffic for Same physical port connections after disabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after disabling ASide ICM downlink ports

    Ping_Server_ip_validate_packet_loss_neg    ${ip[0]}    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${file_name}    ${General_failure}    ${General_failure}

2_Enable Aside ICM downlink Ports
    [Tags]    Common
    [Documentation]    Enable back the A side ICM uplink ports and verifies the state of ICM and uplink and profile status

    Disable Enable Ports    ${ASIDE_SERVER_DOWNLINKS}    ${ICM_uris[0]}    ${Interconnect_name[0]}    update=True    portStatus=Linked

    Log to Console     ${\n}Verify servers Profile status OK
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

2_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

2_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

2_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information regained after enabling the Aside downlinkport

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}


2_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on ports are regained back

    Log    Verify login count for Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

2_5_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

2_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}

    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

2_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

2_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

Get Server IP For Ethernet Non LAG servers and starting traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic

    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}   ${ping_type[1]}    ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

2_1_Verify Traffic in LAG Servers after enabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after enabling ASide ICM downlink ports

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

2_2_Verifying S-Channel common and advanced statistics vaules after enabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after enabling ASide ICM downlink ports


    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${downlink_Aside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM3_uri}    ${downlink_Aside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

Kill Traffic for Non_LAG servers
    [TAGS]    Ethernet    non_critical
    [Documentation]    Kill Traffic for Non LAG servers

    Kill_traffic    ${Linux_servers_details_Non_LAG}

2_3_Verify Traffic for Same physical port connections after enabling ASide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after enabling ASide ICM downlink ports

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

3_Disable Bside ICM downlink Ports
    [Tags]    Common
    [Documentation]    Disable the B side ICM downlink ports

    Disable Enable Ports    ${BSIDE_SERVER_DOWNLINKS}    ${ICM_uris[1]}    ${Interconnect_name[1]}    update=False    status=Critical    portStatus=Unlinked

    Log    Verify servers Profile status Critical    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    Critical

3_Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable

    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

3_1_Validating FipSnooping Data Not Affected in Aside ICM
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Aside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

3_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

3_3_Validate FC DA Aside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information is not affected in Aside ICM

    Log    Verify ICM3 uplink WWN and name server information is not affected    console=True
    Verify Happy Aside Uplinks DA ports    ${ICM3_uri}

    Log    Verify if the servers Aside connection map is not affected    console=True
    Verify Happy Servers Aside DA Connections    ${ICM3_uri}

3_4_Validate FC FA Aside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside ports are not affected

    PASS EXECUTION IF    '${Function}' != 'Storage'    Skip Test If Not Storage Functionality

    :FOR    ${ul}    IN    @{US_FA2_UPLINKS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM6_uri}    ${ul}    loginsCount=0

    Log    Verify login count for Aside ports are not affected    console=True
    Verify Happy Servers Aside FA Connections    ${ICM3_uri}

3_5_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections
    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

3_6_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_6_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_6_2_FCoE Esxi BFS Verification
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count
    [TAGS]    Storage    BFS    critical
    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

3_6_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_6_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

3_1_Verify Traffic in LAG Servers after disabling BSide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after disabling BSide ICM downlink ports

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

4_Enable Bside ICM uplink Ports
    [Tags]    Common
    [Documentation]    Enable back the A side ICM uplink ports and verifies the state of ICM and uplink and profile status

    Disable Enable Ports    ${BSIDE_SERVER_DOWNLINKS}    ${ICM_uris[1]}    ${Interconnect_name[1]}    update=True    portStatus=Linked

    Log to Console     ${\n}Verify servers Profile status OK
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

4_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM


    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

4_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify Traffic for FCoE network

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

4_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information regained back for Bside ICM


    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

4_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside and Bside ports are regained back


    Log    Verify login count for Aside and Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

4_5_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections


    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

4_6_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

4_6_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

4_1_Verify Traffic in LAG Servers after enabling BSide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after enabling BSide ICM downlink ports


    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

4_2_Verify Traffic for Same physical port connections after enabling BSide ICM downlink ports
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after enabling BSide ICM downlink ports


    Ping_Server_ip_validate_packet_loss    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

Delete Static IP
    [TAGS]    Ethernet    non_critical
    [Documentation]    Delete Static IP
    PASS EXECUTION IF    '${Function}' != 'Ethernet'    Skip Test If Not Ethernet Functionality

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${delete_static_ip}    ${server_details_same_phy_port}    ${ip[0]}
