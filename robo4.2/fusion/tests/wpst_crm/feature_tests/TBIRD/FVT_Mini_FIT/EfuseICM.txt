***Settings***
Documentation    Mini FIT Regression Suite_EfuseICM
#Variables       FC_FCoE_Common_Variables.py
#Variables       FC_FCoE_Data_Variable.py
Variables       data_variables_ethernet.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations.py
Library         data_variables_ethernet
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***

***Test cases***

Fetch ICM URI
    [Tags]    Common
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

Kill Traffic in TCS
    [Tags]    Common
    [Documentation]    Kill Traffic
    execute_command_in_tcs    ${kill_paexec}

Get server IP and pass traffic for same physical port connections with same networks
    [TAGS]    Ethernet    non_critical
    [Documentation]    Get server IP and pass traffic for same physical port connections with same networks
    Set Log Level    TRACE

    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}
    Set Suite Variable    ${ip}    ${ip}
    Set Suite Variable    ${server_details_same_phy_port}    ${server_details_same_phy_port}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${ENC1_SERVER_SAME_PHY_PORT}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC1_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[0]}
    Log    ${adapter_name_list}    console=True
    Set Suite Variable    ${adapter_name_list}    ${adapter_name_list}

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${delete_static_ip1_same_networks}    ${server_details_same_phy_port}    ${ip[0]}
    #Set Static ip
    Set_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${Powershell_set_static_enc1}    ${server_details_same_phy_port}    ${ip[0]}

1_Perform Efuse on Aside ICM
    [Tags]    Common
    [Documentation]    Perform Efuse on and verifies the state of ICM

    Get EM IP    ${ENC_1}
    Get EM Token    ${ENC_1}
    Efuse ICM    EFuseOn    3
    Log    Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[0]}    Absent

Verify state for Storage Uplink Port
    [TAGS]    Storage    non-critical
    [Documentation]    Verify state for Storage Uplink Port

    Log    Verify Bside uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked


Verify state for Ethernet Uplink Set and uplink ports
    [TAGS]    Ethernet    non_critical
    [Documentation]    Verify state for Ethernet Uplink Set and uplink ports

    Log    Verify if Aside uplinkset is Warning    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Run Keyword And Continue On Failure    Wait Until Keyword Succeeds    10 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    Warning

    Log    Verify if Aside uplinkset is Critical    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SET_SFP}
    \    Run Keyword And Continue On Failure    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    Critical

    Log    Verify Bside uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked

1_Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable


    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

1_1_Validating FipSnooping Data Not Affected in Bside ICM
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

1_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

1_3_Validate FC DA Bside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information in Bside ICM after removing Aside ICM

    Log to Console    ${\n}Verify affected servers Aside connectionMap should be empty
    Wait Until Keyword Succeeds    5 min    20s    Validate If Namserver Info is Empty    ${ICM3_uri}

    Log    Verify ICM6 uplink WWN and name server information is not affected    console=True
    Verify Happy Bside Uplinks DA ports    ${ICM6_uri}

    Log    Verify if the servers Bside connection map is not affected    console=True
    Verify Happy Servers Bside DA Connections    ${ICM6_uri}

1_4_Validate FC FA Bside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Bside ports are not affected


    Log    Verify login count for Bside ports are not affected    console=True
    Verify Happy Servers Bside FA Connections    ${ICM6_uri}

1_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

1_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics
    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${Bside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

1_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FCoE_ILO_details[${x}]}    ${Esxi_FCoE_servers_details[${x}]}

1_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FA_DA_ILO_details[${x}]}    ${Esxi_FA_DA_servers_details[${x}]}

Get Server IP For Ethernet Servers and passing traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic
    Set Log Level    TRACE

    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}   ${ping_type[1]}    ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

1_1_Verify ping for MLAG server after A-side ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify ping for MLAG server after A-side ICM efuse(remove)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

1_2_Verifying S-Channel common and advanced statistics vaules after A-side ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after A-side ICM efuse(remove)

    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${downlink_Bside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM6_uri}    ${downlink_Bside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

1_3_Verify Traffic for Same physical port connections after A-side ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after A-side ICM efuse(remove)

    Ping_Server_ip_validate_packet_loss_neg    ${ip[0]}    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${file_name}    ${General_failure}    ${Host_unreachable_msg}

1_4_Verify that Digital Diagnostic info show up after Aside ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify that Digital Diagnostic info show up after Aside ICM efuse(remove)

    ${message}    Set Variable    Successfully verified if no digital diagnostic is available after removing ICM
    Validate Digital Diagnostics    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    False    ${DDMI_values_SFP_SR}

    ${message}    Set Variable    Successfully verified if connector info is not available after removing ICM
    validate connector informations    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    False

2_Power off server before Inserting ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers off the servers before inserting back the ICM for BFS connections

    Run Keyword for List    ${BFS_esxi_servers}    Power off Server    PressAndHold

2_Perform Efuse off Aside ICM
    [Tags]    Common
    [Documentation]    Perform Efuse on Aside ICM and verifies the state of ICM and uplink and profile status

    Get EM IP    ${ENC_1}
    Get EM Token    ${ENC_1}
    Efuse ICM    EFuseOff    3
    Log    Verifying if module is Configured    console=True
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM_uris[0]}    Configured
    Sleep    60sec
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master
    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify ICM6 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked
    Log to Console     ${\n}Verify servers Profile status OK

2_Power on servers after inserting ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers on the servers after inserting back the ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power on Server
    Sleep    ${SERVER_BOOT_WAIT}

    Wait Until Keyword Succeeds    10 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

2_Get Server IP For Storage Servers
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable

    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

2_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Aside ICM

    Log    Validate FIPS data in uplink    console=True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Log    Validate FIPS data in downlink    console=True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

2_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

2_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information in Aside ports are regained after inserting back the ICM

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

2_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are reagined back to Aside ports after inserting back the ICM

    Log    Verify login count for Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

2_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

2_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    Log    Validate traffic and counter values are increased in Aside ICM after power on Aside ICM    console=True

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

2_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

2_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic
    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

2_1_Verify Traffic in LAG Servers after A-side ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side ICM efuse(insert)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

2_2_Verifying S-Channel common and advanced statistics vaules after A-side ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after A-side ICM efuse(insert)


    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${downlink_Aside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM3_uri}    ${downlink_Aside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

2_3_Verify Traffic for Same physical port connections after A-side ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after A-side ICM efuse(insert)

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

2_4_Verify that Digital Diagnostic info show up after A-side ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify that Digital Diagnostic info show up after A-side ICM efuse(insert)

    ${message}    Set Variable    Successfully verified if digital diagnostic info is available after inserting back the icm
    Wait Until Keyword Succeeds     5 min   10s      Validate Digital Diagnostics    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    True    ${DDMI_values_SFP_SR}

    ${message}    Set Variable    Successfully verified if connector info is available
    Wait Until Keyword Succeeds     5 min   10s      validate connector informations    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    True

3_Perform Efuse on Bside ICM
    [Tags]    Common
    [Documentation]    Perform Efuse on Bside ICM and verifies the state of ICM

    Get EM IP    ${ENC_2}
    Get EM Token    ${ENC_2}
    Efuse ICM    EFuseOn    6
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[1]}    Absent
    Sleep    60sec

Verify Uplink port state for Storage
    [TAGS]    Storage    non-critical
    [Documentation]    Verify Uplink set state for Storage

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked


Verify Uplink set state for Ethernet
    [TAGS]    Ethernet    non_critical
    [Documentation]    Verify Uplink set state for Ethernet

    Log    Verify if Aside uplinkset is Warning    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Run Keyword And Continue On Failure    Wait Until Keyword Succeeds    10 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    Warning

    Log    Verify Bside uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

3_Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable

    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

3_1_Validating FipSnooping Data Not Affected in Aside ICM
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Aside ICM

    Wait Until Keyword Succeeds     1 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     1 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

3_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

3_3_Validate FC DA Aside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information not affected in Aside ICM

    PASS EXECUTION IF    '${Function}' != 'Storage'    Skip Test If Not Storage Functionality

    Log to Console    ${\n}Verify affected servers Aside connectionMap should be empty
    Validate If Namserver Info is Empty    ${ICM6_uri}

    Log    Verify ICM3 uplink WWN and name server information is not affected    console=True
    Verify Happy Aside Uplinks DA ports    ${ICM3_uri}

    Log    Verify if the servers Aside connection map is not affected    console=True
    Verify Happy Servers Aside DA Connections    ${ICM3_uri}

3_4_Validate FC FA Aside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside ports are not affected

    PASS EXECUTION IF    '${Function}' != 'Storage'    Skip Test If Not Storage Functionality

    Log    Verify login count for Aside ports are not affected    console=True
    Verify Happy Servers Aside FA Connections    ${ICM3_uri}

3_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

3_6_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_6_1FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_6_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

3_6_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic
    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_6_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

Get Valid Server IP For Ethernet Servers and passing traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic
    Set Log Level    TRACE

    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}   ${ping_type[1]}    ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

3_1_Verify ping for MLAG server after B-side ICM efuse(remove)
    [Documentation]    Verify ping for MLAG server after B-side ICM efuse(remove)
    [TAGS]    Ethernet    critical

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

3_2_Verifying S-Channel common and advanced statistics vaules after B-side ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after B-side ICM efuse(remove)


    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${downlink_Aside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM3_uri}    ${downlink_Aside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

Power off server before Inserting ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers off the servers before inserting back the ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power off Server    PressAndHold

4_Perform Efuse off Bside ICM
    [Tags]    Common
    [Documentation]    Perform Efuse off Bside ICM and verifies the state of ICM and uplink and profile status

    Get EM IP    ${ENC_2}
    Get EM Token    ${ENC_2}
    Efuse ICM    EFuseOff    6
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM_uris[1]}    Configured
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master
    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify ICM6 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked

4_Power on servers after inserting ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers on the servers after inserting back the ICM


    Run Keyword for List    ${BFS_esxi_servers}    Power on Server
    Sleep    ${SERVER_BOOT_WAIT}

    Wait Until Keyword Succeeds    10 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

4_Get Server IP For Storage Servers
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable

    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True


4_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

4_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

4_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information regained back after inserting the Bside ICM

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

4_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside and Bside ports are not affected    console=True

    Log    Verify login count for Aside and Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

4_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

4_6_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_1FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

4_6_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Wait Until Keyword Succeeds    5 min    20s      Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

4_1_Verify Traffic in LAG Servers after B-side ICM efuse(insert)
    [Documentation]    Verify Traffic in LAG Servers after B-side ICM efuse(insert)
    [TAGS]    Ethernet    critical

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

4_2_Verifying S-Channel common and advanced statistics vaules after B-side ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after B-side ICM efuse(insert)

    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${downlink_Bside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM6_uri}    ${downlink_Bside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

Fetch Chloride ICM URI
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetch Chloride ICM URI
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name_chloride}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name_chloride[0]}'    Set Suite Variable    ${ICM3_chloride_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name_chloride[1]}'   Set Suite Variable    ${ICM6_chloride_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM6_chloride_uri}    console=True
    Log     ${ICM3_chloride_uri}    console=True
    Set Suite Variable    ${ICM_uris_chloride}    ${ic_uris}

Perform Efuse on Aside Chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse on chloride ICM and verifies the state of ICM
    Get EM IP    ${ENC_2}
    Get EM Token    ${ENC_2}
    Efuse ICM    EFuseOn    3
    Log    Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[0]}    Absent
    Sleep    60sec

    #Verify Alerts    ${alertstate_cl_ICM_poweroff}    ${alertType_cl_ICM6_poweroff}    ${alert_msg_cl_ICM_poweroff}       ${alert_msg_cl_ICM_poweroff1}

1_Verify Traffic in LAG Servers after A-side Chloride ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side Chloride ICM efuse(remove)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

6_Perform Efuse off Aside Chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse off chloride ICM and verifies the state of ICM
    Get EM IP    ${ENC_2}
    Get EM Token    ${ENC_2}
    Efuse ICM    EFuseOff    3
    Log    Verifying if module is configured    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[0]}    Configured
    Sleep    60sec

6_1_Verify Traffic in LAG Servers after A-side Chloride ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side Chloride ICM efuse(insert)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

7_Perform Efuse on Bside Chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse on chloride ICM and verifies the state of ICM
    Get EM IP    ${ENC_1}
    Get EM Token    ${ENC_1}
    Efuse ICM    EFuseOn    6
    Log    Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[1]}    Absent
    Sleep    60sec

    #Get Alert by Param    ${cl6_efuse_msg}

7_1_Verify Traffic in LAG Servers after B-side Chloride ICM efuse(remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after B-side Chloride ICM efuse(remove)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

8_Perform Efuse off Bside Chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse off chloride ICM and verifies the state of ICM
    Get EM IP    ${ENC_1}
    Get EM Token    ${ENC_1}
    Efuse ICM    EFuseOff    6
    Log    Verifying if module is configured    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[1]}    Configured
    Sleep    60sec

8_1_Verify Traffic in LAG Servers after B-side Chloride ICM efuse(insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after B-side Chloride ICM efuse(insert)

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

kill traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    kill traffic

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[1]}    ${adapter_name_list}    ${delete_static_ip1_diff_networks}    ${server_details_same_phy_port}    ${ip[0]}

    Kill_traffic    ${Linux_servers_details_Non_LAG}

Getting Server ip for LAG servers
    [TAGS]    Ethernet    non_critical
    [Documentation]    Verify Traffic for LAG servers

    ${server_ip}    Create List
    ${len}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${server_details}    Get IP For All Servers    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}
    \    ${ip}    Get From Dictionary    ${server_details}    ip
    \    Append To List    ${server_ip}    ${ip}
    Set Suite Variable    ${server_ip}    ${server_ip}

9_Perform Efuse blade server (remove)
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse blade server (remove)

    ${length}    Get Length    ${ENCs}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Get EM IP    ${ENCs[${x}]}
    \    Get EM Token    ${ENCs[${x}]}
    \    EFuse Blade    ${efuse_action[0]}    ${LAG_server_bay[${x}]}
    \    Sleep    60sec

9_1_Verify Traffic in LAG Servers after removing servers
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after removing servers

    ${iplength}    Get Length    ${server_ip[0]}
    Run Keyword If    '${iplength}' != '4'    FAIL    ELSE    Log    Successfully fetched Valid ip's    console=True
    ${len}    Get Length    ${server_ip}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Ping Server Ips    ${number}    ${server_ip[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[1]}
    \    Log     Ips are not reachable because server is powerd off    console=True

10_Perform Efuse blade (insert)
    [TAGS]    Ethernet    critical
    [Documentation]    Perform Efuse blade (insert)

    ${length}    Get Length    ${ENCs}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Get EM IP    ${ENCs[${x}]}
    \    Get EM Token    ${ENCs[${x}]}
    \    EFuse Blade    ${efuse_action[1]}    ${LAG_server_bay[${x}]}
    Sleep    ${SERVER_BOOT_WAIT}

10_1_Verify Traffic in LAG Servers after A-side inserting server blades
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side inserting server blades

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}