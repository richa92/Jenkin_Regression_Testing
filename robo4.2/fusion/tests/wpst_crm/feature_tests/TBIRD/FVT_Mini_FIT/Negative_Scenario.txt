***Settings***
Documentation    Mini FIT Regression Suite_Negative Scenarios
#Variables        ./data_common.py
#Variables       FC_FCoE_Common_Variables.py
#Variables       FC_FCoE_Data_Variable.py
Variables       data_variables_ethernet.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations.py
Library         data_variables_ethernet
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***

***Test cases***

Fetch ICM URI
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE
    [TAGS]    non-critical

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

1_FC DA Negative Case For LIG Uplinkset
    [Tags]    Storage    critical
    [Documentation]    The following are tested: limitations for FC DA uplinkset defined on LIG
    ...                CRM_INVALID_UPLINK_SET_PORT
    ...                    case - IRF split port
    ...                    case - IRF unsplit port
    ...                CRM_LOGICAL_UPLINK_TEMPLATE_FIBRE_CHANNEL_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH
    ...                CRM_LOGICAL_UPLINK_CAN_ONLY_CONTAIN_MAX_ONE_FC_NETWORK
    ...                CRM_INVALID_UPLINK_SET_PORT_FC
    ...                    case - Q1 to Q6 Unsplit port not allowed


    Log    FC DA uplinkset on LIG negative test    console=True
    :FOR    ${ligtest}    IN    @{err_ligs_DA}
    \    ${body}    Build LIG body    ${ligtest['ligBody']}
    \    ${resp}    Fusion Api Create LIG    ${body}
    \    ${task}    Wait For Task    ${resp}    120s    2s
    \    Verify ErrorCode in taskError  ${task['taskErrors']}    ${ligtest['errorCode']}

2_FC DA Negative Case For LI Uplinkset
    [Tags]    Storage    critical
    [Documentation]    The following are tested: limitations for FC DA uplinkset on LI
    ...                CRM_PORT_CONFIG_INFO_LOCATION_IS_NOT_FC_UPLINK_CAPABLE
    ...                    case - Q1 to Q6 Unsplit port not allowed
    ...                    case - IRF split port
    ...                    case - IRF unsplit port
    ...                CRM_PORTS_IN_DIFFERENT_SWITCH
    ...                CRM_LOGICAL_UPLINK_CAN_ONLY_CONTAIN_MAX_ONE_FC_NETWORK
    ...                CRM_PORT_ALREADY_ASSIGNED
    ...                CRM_PORT_NUMBER_UNKNOWN_FORMAT
    ...                    case - Invalid port



    ${li_uri} =    Get LI URI    ${LIs[0]}

    :FOR    ${li_us}    IN    @{err_li_us_list_DA}
    \    ${us} =     Copy Dictionary    ${li_us['usBody']}
    \    ${body} =    Build US body    ${us}    ${li_uri}
    \    ${resp} =    Fusion Api Create Uplink Set    body=${body}
    \    Should Be Equal As Integers    ${resp['status_code']}    ${400}
    \    Should Be Equal As Strings    ${resp['errorCode']}    ${li_us['errorCode']}

3_FC FA Negative Case For LIG Uplinkset
    [Tags]    Storage    critical
    [Documentation]    The following are tested: limitations for FC FA uplinkset defined on LIG
    ...                CRM_INVALID_UPLINK_SET_PORT
    ...                    case - IRF split port
    ...                    case - IRF unsplit port
    ...                CRM_LOGICAL_UPLINK_TEMPLATE_FIBRE_CHANNEL_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH
    ...                CRM_LOGICAL_UPLINK_CAN_ONLY_CONTAIN_MAX_ONE_FC_NETWORK
    ...                CRM_INVALID_UPLINK_SET_PORT_FC
    ...                    case - Q1 to Q6 Unsplit port not allowed



    Log    FC FA uplinkset on LIG negative test    console=True
    :FOR    ${ligtest}    IN    @{err_ligs_FA}
    \    ${body}    Build LIG body    ${ligtest['ligBody']}
    \    ${resp}    Fusion Api Create LIG    ${body}
    \    ${task}    Wait For Task    ${resp}    120s    2s
    \    Verify ErrorCode in taskError  ${task['taskErrors']}    ${ligtest['errorCode']}

4_FC FA Negative Case For LI Uplinkset
    [Tags]    Storage    critical
    [Documentation]    The following are tested: limitations for FC FA uplinkset on LI
    ...                CRM_PORT_CONFIG_INFO_LOCATION_IS_NOT_FC_UPLINK_CAPABLE
    ...                    case - Q1 to Q6 Unsplit port not allowed
    ...                    case - IRF split port
    ...                    case - IRF unsplit port
    ...                CRM_PORTS_IN_DIFFERENT_SWITCH
    ...                CRM_LOGICAL_UPLINK_CAN_ONLY_CONTAIN_MAX_ONE_FC_NETWORK
    ...                CRM_PORT_ALREADY_ASSIGNED
    ...                CRM_PORT_NUMBER_UNKNOWN_FORMAT
    ...                    case - Invalid port



    ${li_uri} =    Get LI URI    ${LIs[0]}

    :FOR    ${li_us}    IN    @{err_li_us_list_FA}
    \    ${us} =     Copy Dictionary    ${li_us['usBody']}
    \    ${body} =    Build US body    ${us}    ${li_uri}
    \    ${resp} =    Fusion Api Create Uplink Set    body=${body}
    \    Should Be Equal As Integers    ${resp['status_code']}    ${400}
    \    Should Be Equal As Strings    ${resp['errorCode']}    ${li_us['errorCode']}

5_Create FCoE network using VLAN 1
    [Tags]    Storage    critical
    [Documentation]    This test will create fcoe network with vlan 1 and verify that the network could not be created
    ...    as the Vlan does not fall under the range 2 and 4094



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-1']}
    ${valDict}    Create Dictionary status_code=${400}
    ...                                 errorCode=CRM_NETWORK_VLAN_ID_NOT_VALID_RANGE_EXISTS
    ...                                 message=The VLAN ID must be between 2 and 4094, excluding internally reserved VLAN IDs 3967-4094.
    Validate Response    ${resp}    ${valDict}

6_Create 257th FCoE networks (max is 256)
    [Tags]    Storage    critical

    [Documentation]    This test will create fcoe network that exceeds the maximum number. 256 networks are created
    ...    already. Test case will create 257th network and validates the error code "CRM_MAX_FCOE_NETWORKS_REACHED"



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-100']}
    # Task is not created in this case - Wait For Task  ${resp}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_MAX_FCOE_NETWORKS_REACHED
    ...                                 message=FCoE network fcoe-100 cannot be created because the maximum number of FCoE networks (256) exists.
    Validate Response    ${resp}    ${valDict}

7_Delete 20 FCoE Networks
    [Tags]    Storage    critical

    [Documentation]    This test will create delete fcoe netwroks that fall under specified vlan range



    Delete Fcoe Range    ${fcoe_ranges['fcoe-range-delete-20']}

8_Create a new FCoE network (name+vlan doesn't already exist)
    [Tags]    Storage    critical

    [Documentation]    This test will create new fcoe network whose vlan and name does not exist already



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-100']}
    Wait For Task    ${resp}

9_Create a new FCoE network (fcoe network with same vlan already exists, but name is different)
    [Tags]    Storage    critical

    [Documentation]    This test will create a fcoe network with same vlan that already exists but with different name
    ...    and verifies that the network could be created



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-100b']}
    Wait For Task    ${resp}

10_Create a new FCoE network (name+vlan already exists)
    [Tags]    Storage    critical

    [Documentation]    This test will create a fcoe network with same vlan and name that already exists
    ...    and verifies that the network could not be created and displays the error code "CRM_DUPLICATE_NETWORK_NAME"



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-100b']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_NETWORK_NAME
    Validate Response    ${resp}    ${valDict}


11_Create a new FCoE network without supplying a vlanId
    [Tags]    Storage    critical

    [Documentation]    This test will create a fcoe network without specifying vlan ID and verifies that the
    ...    network could not be created and displays the error code "CRM_MISSING_VLAN_ID_IN_NETWORK"



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['no-vlanId']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_MISSING_VLAN_ID_IN_NETWORK
    Validate Response    ${resp}    ${valDict}

12_Create a new FCoE network with same name as existing ETHERNET and FibreChannel network
    [Tags]    Storage    critical

    [Documentation]    This test will create a fcoe network with same name as existing Ethernet and FC network
    ...    and verifies that the could not be created and displays the error code "CRM_DUPLICATE_NETWORK_NAME"



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['wpstnetwork1']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_NETWORK_NAME
    Validate Response    ${resp}    ${valDict}

    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['FA1']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_NETWORK_NAME
    Validate Response    ${resp}    ${valDict}

13_Create a new FCoE network with vlanId 4095 (max is 4094)
    [Tags]    Storage    critical
    [Documentation]    This test will create a fcoe network with vlan 4095 and verifies that the network
    ...    could not be created and displays the error code "CRM_NETWORK_VLAN_ID_NOT_VALID_RANGE_EXISTS"



    ${resp}    Fusion Api Create Fcoe Network    body=${fcoe_networks['fcoe-4095']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_NETWORK_VLAN_ID_NOT_VALID_RANGE_EXISTS
    ...                                 message=The VLAN ID must be between 2 and 4094, excluding internally reserved VLAN IDs 3967-4094.
    Validate Response    ${resp}    ${valDict}

14_Try to change the vlanId of an FCoE network
    [Tags]    Storage    critical
    [Documentation]    This test will edit a fcoe network and try to change the vlan ID, and verifies that the network
    ...    could not be edited to change the vlan id with error code "CRM_CHANGING_VLAN_ID"



    ${net}    Fusion Api Get Fcoe Networks    param=?filter="'name'=='fcoe-100b'"
    ${body}    Get From Dictionary    ${net}    members
    Set to Dictionary    ${body[0]}    vlanId    2999
    ${resp}    Fusion Api Edit Fcoe Network    body=${body[0]}    uri=${body[0]['uri']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_CHANGING_VLAN_ID
    ...                                 message=VLAN ID can NOT be changed.
    Validate Response    ${resp}    ${valDict}

15_Try to add an FCoE network to a Network Set
    [Tags]    Storage    critical
    [Documentation]    This test will edit a ethernet network set and try to add a fcoe network to it
    ...    and verifies that the network could not be added with error code "CRM_INVALID_NETWORK_URI"



    ${net}    Fusion Api Get Fcoe Networks    param=?filter="'name'=='fcoe-100'"
    ${fcoe_uri}    Get From Dictionary    ${net['members'][0]}    uri
    ${networkUris}    Create List
    Append To List    ${networkUris}    ${fcoe_uri}
    Set to Dictionary    ${network_sets[0]}    networkUris    ${networkUris}
    ${resp}    Fusion Api Create Network Set    body=${network_sets[0]}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_INVALID_NETWORK_URI
    ...                                 message=The type of the network URI passed is not valid. This call requires ethernet-networks URI. Please provide a valid ethernet-networks URI.
    Validate Response    ${resp}    ${valDict}

16_Try to change Default Connection Template to Max BW of 21gb (20gb is max supported)
    [Tags]    Storage    critical
    [Documentation]    This test will edit the default connection template as 21gb crossing maximum bandwidh of 20Gb
    ...    and verifies the error code "CRM_DEFAULT_INVALID_ARGUMENT"



    ${dct}    Fusion Api Get Default Connection Template
    ${bw}    Create Dictionary    maximumBandwidth=21000    typicalBandwidth=2500
    Set to Dictionary    ${dct}    bandwidth=${bw}
    Remove From Dictionary    ${dct}    status_code    headers

    ${resp}    Fusion Api Update Default Connection Template    ${dct}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DEFAULT_INVALID_ARGUMENT
    ...                                 message=Updating connection-template: Invalid bandwidth: Maximum bandwidth exceeds 20 GBits/s
    Validate Response    ${resp}    ${valDict}

17_Try to change FCoE networks Connection Template to Max BW of 21gb (20gb is max supported)
    [Tags]    Storage    critical
    [Documentation]    This test will edit the FCoE networks Connection Template as 21gb crossing maximum bandwidh of 20Gb
    ...    and verifies the error code "CRM_DEFAULT_INVALID_ARGUMENT"



    ${nets}    Fusion Api Get Fcoe Networks    param=?filter="'name'=='fcoe-100'"
    ${net}    Get From Dictionary    ${nets}    members
    ${ct}    Fusion Api Get Connection Templates    ${net[0]['connectionTemplateUri']}
    ${bw}    Create Dictionary    maximumBandwidth=21000    typicalBandwidth=2500
    Set to Dictionary    ${ct}    bandwidth=${bw}
    Remove From Dictionary    ${ct}    status_code    headers

    ${resp}    Fusion Api Update Connection Template    ${ct}    ${net[0]['connectionTemplateUri']}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DEFAULT_INVALID_ARGUMENT
    ...                                 message=Updating connection-template: Invalid bandwidth: Maximum bandwidth exceeds 20 GBits/s
    Validate Response    ${resp}    ${valDict}

18_Edit LIG and try to add a new US with 33 FCoE networks (max is 32)
    [Tags]    Storage    critical
    [Documentation]    This test will edit LIG and adds a new uplinkset with 33 fcoe network, which is not allowed as
    ...    already maximum allowed fcoe network are available in uplinksets.
    ...    test verifies if the edit operation is not successful with error code
    ...    "CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET"



    ${edit_lig_body} =    Create List    ${edit_fcoe_lig['fcoe_lig_max_us']}
    ${resp}    Edit LIG    ${edit_lig_body}
    #${task}    Wait For Task    ${resp}    120s    2s
    #Verify ErrorCode in taskError  ${task['taskErrors']}    CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ...                                 message=Too many FCoE networks have been specified for the uplink set.
    Validate Response    ${resp[0]}    ${valDict}

19_Try to create an LIG with more than 64 FCoE in US
    [Tags]    Storage    critical
    [Documentation]    This test will create LIG and adds a uplinkset with more than 64 fcoe network which is not allowed
    ...    test will validate if the operation is not successful with error code "CRM_MAX_FCOE_NETWORKS_EXCEEDED"



    ${body}    Build LIG body    ${create_fcoelig_neg_case['fcoe_lig_max_us']}
    ${resp}    Fusion Api Create LIG    ${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_MAX_FCOE_NETWORKS_EXCEEDED
    ...                                 message=The number of FCoE networks has exceeded the maximum limit of 64.
    Validate Response    ${resp}    ${valDict}

20_Try to create a new LIG with an US with a 2 FCoE networks with the same vlanId
    [Tags]    Storage    critical

    [Documentation]    This test will create LIG with an uplinkset with two fcoe network of same vlan which is not allowed
    ...    test case will validate the same with error code "CRM_DUPLICATE_VLAN_IDS_LOGICAL_INTERCONNECT_GROUP"



    ${body}    Build LIG body    ${create_fcoelig_neg_case['US_duplicate_vlans']}
    ${resp}    Fusion Api Create LIG    ${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_VLAN_IDS_LOGICAL_INTERCONNECT_GROUP
    ...                                 message=Duplicate VLAN IDs are not allowed in this logical interconnect group.
    Validate Response    ${resp}    ${valDict}

21_Try to create a new LIG with an US with an ETHERNET network vlanId 100 and FCoE network vlanId 100
    [Tags]    Storage    critical
    [Documentation]    This test will create LIG with an ethernet uplinkset with ethernet network of 100 and fcoe network
    ...    with same vlan which is not allowed. test case will validate the same with
    ...    error code "CRM_DUPLICATE_VLAN_IDS_LOGICAL_INTERCONNECT_GROUP"



    ${body}    Build LIG body    ${create_fcoelig_neg_case['US_duplicate_vlans_eth']}
    ${resp}    Fusion Api Create LIG    ${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_VLAN_IDS_LOGICAL_INTERCONNECT_GROUP
    ...                                 message=Duplicate VLAN IDs are not allowed in this logical interconnect group.
    Validate Response    ${resp}    ${valDict}

22_Try to edit LIG and edit a US that has 32 FCoE networks with 33 FCoE networks (max is 32)
    [Tags]    Storage    critical
    [Documentation]    Test case will edit the LIG and uplinkset that has 32 fcoe network with 33 fcoe network
    ...    which exceeds the maximum connection and verifies the error code "CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET"



    # first, Edit LIG to have one US with 32 networks
    ${edit_lig_body} =    Create List    ${edit_fcoe_lig['edit_lig_with_32_fcoe']}
    ${resp}    Edit LIG    ${edit_lig_body}
    Run Keyword If     '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    10min    10
    ...    ELSE    Fail    Log    failed to edit LIG    console=True

    # Edit the US with 33 fcoe network
    ${edit_lig_body1} =    Create List    ${edit_fcoe_lig['lig_more_than_32_fcoe']}
    ${resp1}    Edit LIG    ${edit_lig_body1}
    #${task}    Wait For Task    ${resp1}    120s    2s
    #Verify ErrorCode in taskError  ${task['taskErrors']}    CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ...                                 message=Too many FCoE networks have been specified for the uplink set.
    Log    ${resp1}    console=True
    Validate Response    ${resp1[0]}    ${valDict}

23_Edit the LIG from the previous test, and add an ETHERNET network to all of the existing US
    [Tags]    Storage    critical
    [Documentation]    Test case will edit the LIG fro previous step and adds ethernet and fcoe networks in all the uplinkset



    # first, revert LIG to original

    ${edit_lig_body}    Create List    ${ligs[0]}
    ${resp}    Edit LIG    ${edit_lig_body}
    Run Keyword If     '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    10min    10
    ...    ELSE    Fail    Log    failed to edit LIG    console=True

    # Add ethernet and fcoe network in uplinkset
    ${edit_lig_body1}    Create List    ${edit_fcoe_lig['lig_with_enet_fcoe_us']}
    ${resp}    Edit LIG    ${edit_lig_body}
    Run Keyword If     '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    10min    10
    ...    ELSE    Fail    Log    failed to edit LIG    console=True

24_Edit the LIG from the previous test and add a new ETHERNET ONLY US
    [Tags]    Storage    critical
    [Documentation]    Test case will edit the LIG fro previous step and adds a new ethernet US with ethernet networks only



    ${edit_lig_body}    Create List    ${edit_fcoe_lig['lig_with_new_enet_net_us']}
    ${resp}    Edit LIG    ${edit_lig_body}
    Run Keyword If     '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    10min    10
    ...    ELSE    Fail    Log    failed to edit LIG    console=True

25_Try to create a new LIG with an FCoE US that spans multiple interconnects
    [Tags]    Storage    critical
    [Documentation]    Test case will try to create a new LIG with a fcoe uplinkset that spans multiple interconnects.
    ...    The test will validate the error code "CRM_FCOE_MLAG_DISABLED_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH" as fcoe
    ...    uplink port cannot be given from teo different interconnects



    ${body}    Build LIG body    ${create_fcoelig_neg_case['fcoe_lig_spans_multiple_icm']}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task}    Wait For Task    ${resp}    120s    2s

    ${valDict}    Create Dictionary    errorCode=CRM_FCOE_MLAG_DISABLED_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH
    ...                                message=When FCoE networks are present in an uplink set and FCoE MLAG is disabled, the uplink ports must be selected from a single interconnect module.
    Validate Response    ${task['taskErrors'][0]}    ${valDict}

26_Try to remove LE with active server profile
    [Tags]    Storage    critical
    [Documentation]    Test case will try to create a new LIG with a fcoe uplinkset that spans multiple interconnects.
    ...    The test will validate the error code "CRM_FCOE_MLAG_DISABLED_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH" as fcoe
    ...    uplink port cannot be given from teo different interconnects



    #Power off ALL servers    PressAndHold
    ${resp}    Fusion Api Delete Logical Enclosure    name=${LE}
    ${task}    Wait For Task    ${resp}    120s    2s
    ${valDict}    Create Dictionary    errorCode=LE_DELETE_ACTIVE_PROFILE_ERROR
    ...                                message=Unable to delete this logical enclosure because it is hosting active server profiles.
    Validate Response    ${task['taskErrors'][0]}    ${valDict}

27_Try to Exercise GET and PUT for fcoeSettings API
    [Tags]    Storage    critical
    [Documentation]    Test case will do get and put operations for fcoe settings value in API



    ${li_uri}    Get LI URI    ${LIs[0]}
    ${resp}    Fusion API Get li fcoe settings    ${li_uri}
    ${valDict}    Create Dictionary    status_code=${404}
    Validate Response    ${resp}    ${valDict}

    # try to use the same value
    ${body}    Create Dictionary    fcoeMode=FcfNpv
    ${resp}     fusion api update li fcoe settings    ${body}    ${li_uri}
    ${valDict}    Create Dictionary    status_code=${404}
    Validate Response    ${resp}    ${valDict}

28_Try to add a new US with 1 FCoE on Potash that already has max FCoE networks (max is 32)
    [Tags]    Storage    critical
    [Documentation]    Test case will add a new uplinkset with one fcoe network in LI which already has an uplinkset
    ...    with maximum of 32 networks. Test will validate the error code "CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_BAY"



    Remove All Uplinksets

    Log    Create an uplinkset with maximum 32 fcoe networks    console=True
    ${li_uri}    Get LI URI      ${LIs[0]}
    Set Suite Variable    ${li_uri}    ${li_uri}
    ${us_body}    Copy Dictionary    ${li_fcoe_us['us1-32fcoe']}
    ${body}    Build US body    ${us_body}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${task}    Wait For Task    ${resp}    5min    15s
    ${valDict}    Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Log    Create a new uplinkset that will add 33rd fcoe network    console=True
    ${us}    Copy Dictionary    ${li_fcoe_us['us-1-fcoe']}
    ${body}    Build US body    ${us}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_BAY
    ...                                 message=The interconnect in bay 3 has exceeded the maximum number of allowed FCoE networks.
    Validate Response    ${resp}    ${valDict}

29_Try to add 1 FCoE network to an existing US that already has 32 FCoE networks
    [Tags]    Storage    critical
    [Documentation]    Test case will add a fcoe network to the uplinkset that already has 32 fcoe networks in LI
    ...    Test will validate the error code "CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET"



    ${resp}    Edit uplinkset    ${li_fcoe_us['us1_33fcoe']['name']}    ${li_fcoe_us['us1_33fcoe']}    ${LIs[0]}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                         errorCode=CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ...                                         message=Too many FCoE networks have been specified for the uplink set.
    Validate Response    ${resp}    ${valDict}

30_Remove an uplink port from US that has 32 FCoE networks
    [Tags]    Storage    critical
    [Documentation]    Removes an uplink port from the existing uplinkset with 32 fcoe network



    ${resp}    Edit uplinkset    ${li_fcoe_us['us1-remove-uplink-port']['name']}
    ...    ${li_fcoe_us['us1-remove-uplink-port']}    ${LIs[0]}
    Run Keyword If     '${resp['status_code']}' == '202'    Wait For Task2    ${resp}    15min    10
    ...    ELSE    Fail    Log    Failed to Remove an uplink port    console=True

31_Try to create a new FCoE US that spans multiple interconnects
    [Tags]    Storage    critical
    [Documentation]    This test case will create a new uplinkset in LI that spans upink ports from multiple interconnects



    ${li_uri}    Get LI URI    ${LIs[0]}
    ${us}    Copy Dictionary    ${li_fcoe_us['us-spans-2-ics']}
    ${body}    Build US body    ${us}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_FCOE_MLAG_DISABLED_PORTS_DO_NOT_ALL_BELONG_TO_SAME_SWITCH
    ...                                 message=When FCoE networks are present in an uplink set and FCoE MLAG is disabled, the uplink ports must be selected from a single interconnect module.
    Validate Response    ${resp}    ${valDict}

32_Try to create a new US with an ETHERNET network vlanId 100 and FCoE network vlanId 100
    [Tags]    Storage    critical
    [Documentation]    This test case will create a new uplinkset with ethernet network of vlan id 100 and fcoe network of vlan
    ...    ID 100. The test will validate the error code "CRM_DUPLICATE_VLAN_IDS_UPLINK_SET"



    ${li_uri}    Get LI URI    ${LIs[0]}
    ${us}    Copy Dictionary    ${li_fcoe_us['us_dup_eth_fcoe_vlanId']}
    ${body}    Build US body    ${us}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_DUPLICATE_VLAN_IDS_UPLINK_SET
    ...                                 message=Duplicate VLAN IDs are not allowed in the same uplink set.
    Validate Response    ${resp}    ${valDict}

33_Update from Group LI to bring back to initial setup
    [Tags]    Storage    critical
    [Documentation]    Update from Group LI to bring back to initial setup



    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    Update Logical Interconnect from Group    ${LI_dtos[0]}

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    Log    Verify Aside Uplinks portStatus
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM3_uri}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify Bside Uplinks portStatus    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM6_uri}    ${uplink}    status=OK    portStatus=Linked

34_Edit the LI from the previous test, and add an ETHERNET networks to all of the existing US
    [Tags]    Storage    critical
    [Documentation]    Edits LI from previous test case and adds an ethernet network to all fcoe uplinkset



    ${resp}    Edit uplinkset    ${li_fcoe_us['us1_enet_fcoe']['name']}
    ...    ${li_fcoe_us['us1_enet_fcoe']}    ${LIs[0]}
    Run Keyword If     '${resp['status_code']}' == '202'    Wait For Task2    ${resp}    15min    10
    ...    ELSE    Fail    Log    Failed to add an uplink port    console=True

    ${resp}    Edit uplinkset    ${li_fcoe_us['us2_enet_fcoe']['name']}
    ...    ${li_fcoe_us['us2_enet_fcoe']}    ${LIs[0]}
    Run Keyword If     '${resp['status_code']}' == '202'    Wait For Task2    ${resp}    15min    10
    ...    ELSE    Fail    Log    Failed to add an uplink port    console=True

35_Add a new ETHERNET US on Potash that already has an FCoE US
    [Tags]    Storage    critical
    [Documentation]    Edits LI and adds a new ethernet uplinkset which already has an fcoe uplinkset



    ${li_uri}    Get LI URI    ${LIs[0]}
    ${us}    Copy Dictionary    ${li_fcoe_us['us-eth']}
    ${body}    Build US body    ${us}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${task}     Wait For Task    ${resp}    5 min    5s
    Run Keyword If    '${resp['status_code']}' == '202'    Wait For Task2    ${resp}    12min    10
    ...    ELSE    Fail    Log    Failed to add uplinkset    console=True

36_Try to create an Uplinkset with more than 33 FCoE
    [Tags]    Storage    critical
    [Documentation]    Edits LI and adds a new fcoe uplinkset with more than 33 fcoe networks. test will validate the
    ...    error code "CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET"



    ${li_uri}    Get LI URI    ${LIs[0]}
    ${us}    Copy Dictionary    ${li_fcoe_us['us-33-fcoe']}
    ${body}    Build US body    ${us}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    ${valDict}    Create Dictionary    status_code=${400}
    ...                                 errorCode=CRM_EXCEEDS_MAX_ALLOWED_FCOE_NETWORKS_PER_UPLINKSET
    ...                                 message=Too many FCoE networks have been specified for the uplink set.
    Validate Response    ${resp}    ${valDict}

37_Delete an FCoE network that is used in an US but not a SP
    [Tags]    Storage    critical
    [Documentation]    Test case will add a fcoe network in LIG and LI but not in server profile.
    ...    This case will delete a network that is present in US but not in server profile.



    Log    Edits the uplink set and adds fcoe-1032b network    console=True
    ${edit_lig_body} =    Create List    ${edit_fcoe_lig['A-side_Enet_Fcoe_lig']}
    ${resp}    Edit LIG    ${edit_lig_body}
    Run Keyword If     '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    10min    10
    ...    ELSE    Fail    Log    failed to edit LIG    console=True

    Update Logical Interconnect from Group    ${LI_dtos[0]}

    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    Log    Deletes the Fcoe network that is not present in SP    console=True
    ${resp}     Fusion Api Delete Fcoe network    name=fcoe-1032b
    ${task}    Wait For Task    ${resp}
    ${valDict}    Create Dictionary    status_code=${200}
    Validate Response    ${task}    ${valDict}
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

38_Change Bandwidth settings for an existing FCoE network that is used in an active SP
    [Tags]    Storage    critical
    [Documentation]    Test case will change the bandwidth setting of existing fcoe network that is used in a server profile



    ${net}    Fusion Api Get FCoE Networks    param=?filter="'name'=='fcoe-1003'"
    ${fcoe_uri}    Get From Dictionary    ${net['members'][0]}    uri
    ${ct_uri}    Get From Dictionary    ${net['members'][0]}    connectionTemplateUri
    ${ct}    Fusion Api Get connection templates    uri=${ct_uri}
    # change max bandwidth from 10000 to 8000
    ${body}    Create dictionary    type=connection-template
    Set to Dictionary    ${body}    name    ${ct['name']}
    Set to Dictionary    ${body}    bandwidth    ${ct['bandwidth']}
    Set to Dictionary    ${body['bandwidth']}    maximumBandwidth  ${8000}
    ${resp}    Fusion Api Update connection template    body=${body}    uri=${ct_uri}
    Sleep   1min
    ${resp}    Fusion Api Get Connections
    # check that the bandwidth is updated in the connection
    ${l}    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${networkResourceUri}    Get From Dictionary    ${resp['members'][${x}]}    networkResourceUri
    \    ${conn}    Run Keyword If    '${networkResourceUri}' == '${fcoe_uri}'    Get From List    ${resp['members']}    ${x}
    \    Exit For Loop If    ${conn} is not ${null}
    ${max}    Get From dictionary    ${conn['connectionBandwidth']}    maximum
    ${result}     Should Be Equal As Integers    ${max}    ${8000}
    Log    Sleeping 5 min to allow profile update to complete - should not have to do this!    WARN
    Sleep    5 min

    # Reverting back the Max bandwidth
    ${net}    Fusion Api Get FCoE Networks    param=?filter="'name'=='fcoe-1003'"
    ${fcoe_uri}    Get From Dictionary    ${net['members'][0]}    uri
    ${ct_uri}    Get From Dictionary    ${net['members'][0]}    connectionTemplateUri
    ${ct}    Fusion Api Get connection templates    uri=${ct_uri}
    # change max bandwidth from 8000 to 10000
    ${body}    Create dictionary    type=connection-template
    Set to Dictionary    ${body}    name    ${ct['name']}
    Set to Dictionary    ${body}    bandwidth    ${ct['bandwidth']}
    Set to Dictionary    ${body['bandwidth']}    maximumBandwidth    ${10000}
    ${resp}    Fusion Api Update connection template    body=${body}    uri=${ct_uri}
    Sleep    1min
    ${resp}    Fusion Api Get Connections
    # check that the bandwidth is updated in the connection
    ${l}    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${networkResourceUri}    Get From Dictionary    ${resp['members'][${x}]}    networkResourceUri
    \    ${conn}    Run Keyword If    '${networkResourceUri}' == '${fcoe_uri}'    Get From List    ${resp['members']}    ${x}
    \    Exit For Loop If    ${conn} is not ${null}
    ${max}    Get From dictionary    ${conn['connectionBandwidth']}    maximum
    ${result}    Should Be Equal As Integers    ${max}    ${10000}
    #Log    Sleeping 5 min to allow profile update to complete - should not have to do this!    WARN
    Sleep    5 min

39_Try to create a new LIG with an US that uses Q7, Q8 (invalid, and unrelated to FCoE!)
    [Tags]    Storage    critical
    [Documentation]    Test case will create a new LIG with an US that uses Q7 and Q8 invalid ports
    ...    Test will validate the error



    ${body}    Build LIG body    ${create_fcoelig_neg_case['q1-q8']}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task}    Wait For Task    ${resp}    120s 2s
    ${valDict}    Create Dictionary    status_code=${200}
    ...                                 taskState=Error
    ...                                 taskStatus=Invalid uplink set: Port: \\d+ for interconnect-type: .* is not an uplink port.
    Validate Response Regex    ${task}    ${valDict}

40_Verify If All Users Are Able To Get Fipsnooping Data
    [Tags]    Storage    critical
    [Documentation]    This test case will login as Serveradmin, Networkadmin, and Storageadmin and verifies if these users are able to fetch fipsnooping data



    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    ${l}    Get Length    ${users}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Log    Login as ${usercred[${x}]['userName']}    console=True
    \    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${usercred[${x}]}
    \    Wait Until Keyword Succeeds    5 min    20s      Verify Fipsnooping data with validation     ${ICM3_uri}    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True
    \    Wait Until Keyword Succeeds    5 min    20s      Verify Fipsnooping data with validation     ${ICM3_uri}    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

    \    Log    Logout and Login as Administrator to proceed further    console=True
    \    ${resp}    Fusion Api Logout Appliance
    \    Run Keyword If    '${resp['status_code']}' != '204'    Fail    ELSE    Log    \n-Logged out successfully    console=True
    ${resp}    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    Run Keyword If    ${resp[0]['status_code']} != 200    FAIL
    ...    ELSE    Log    Successfully logged in to the appliance    console=True

41_Edit Fcoe Server Profile With Incorrect Mac Address
    [Tags]    Storage    critical
    [Documentation]    Edits a server profile with fcoe connection with incorrect mac address replacing the correct mac address
    ...    and validates if fipsnooping data is not available for incorrect mac address



    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    Power off Server    ${ENC1_SERVER_FcoE}
    Log    Remove the connections from server profile    console=True

    :FOR    ${pro}    IN    @{server_profiles_edit_remove_cnx}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}

    ${resp}    Edit Server Profiles from variable    ${server_profiles_edit_remove_cnx}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m
    ...    ELSE    Fail    Log    failed to remove the connection    console=True

    Log    Edit server profile with incorrect mac    console=True
    :FOR    ${pro}    IN    @{edit_sp_incorrect_mac}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}

    ${resp}    Edit Server Profiles from variable    ${edit_sp_incorrect_mac}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m
    ...    ELSE    Fail    Log    failed to remove the connection    console=True

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    Power on server    ${ENC1_SERVER_FcoE}

    Sleep    ${SERVER_BOOT_WAIT}

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    ${ICM3_Fcoe_dowlink_list}    Create List
    Append To List    ${ICM3_Fcoe_dowlink_list}    ${ENC1_SERVER_FcoE_DL_ICM3}
    Verify Fipsnooping data with validation     ${ICM3_uri}    ${ICM3_Fcoe_dowlink_list}    fips_data_input=None    port_flag=downlink    resp_flag=False

42_Edit Fcoe Server Profile With Correct Mac Address
    [Tags]    Storage    critical
    [Documentation]    Edits a server profile with fcoe connection with incorrect mac address replacing the correct mac address
    ...    and validates if fipsnooping data is not available for incorrect mac address



    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    Power off Server    ${ENC1_SERVER_FcoE}
    Log    Remove the connections from server profile    console=True
    :FOR    ${pro}    IN    @{server_profiles_edit_remove_cnx}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}

    ${resp}    Edit Server Profiles from variable    ${server_profiles_edit_remove_cnx}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m
    ...    ELSE    Fail    Log    failed to remove the connection    console=True

    Log    Edit server profile with correct mac    console=True
    ${sp_body} =    Create List    ${server_profiles[0]}
    :FOR    ${pro}    IN    @{sp_body}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}
    ${resp}    Edit Server Profiles from variable    ${sp_body}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m
    ...    ELSE    Fail    Log    failed to add back the connection    console=True

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    Power on server    ${ENC1_SERVER_FcoE}

    Sleep    ${SERVER_BOOT_WAIT}

     Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

1_Verify error message while trying to create or Edit LAG connections with different requested bandwidth
    [Tags]    Ethernet    critical
    [Documentation]    Verify when trying to create/edit LAG , with both the connections having different requested bandwidth,Server profile create/edit should throw an error message



    ${resp}    Add Server Profiles from variable    ${sp_diff_bandwidth}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_BANDWIDTH_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    # Creating profile with two LAG connections
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m    ELSE    Fail    Log    failed    console=True

    #Editing LAG with both the connections having different requested bandwidth
    ${resp}    Edit Server Profiles from variable    ${sp_diff_bandwidth}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_BANDWIDTH_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

2_Verify error message while trying to create or Edit LAG connections with different adapters
    [Tags]    Ethernet    critical
    [Documentation]    Verify when trying to create/edit LAG , with both the connections having different adapters,Server profile create/edit should throw an error message


    ${task}    Remove Server Profile    ${sp_diff_bandwidth[0]}
    Wait For Task2    ${task}    240  5
    ${resp}    Add Server Profiles from variable    ${sp_diff_adapters}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_SUBPORT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    # Creating profile with two LAG connections
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m    ELSE    Fail    Log    failed    console=True

    #Editing LAG with both the connections having different requested bandwidth
    ${resp}    Edit Server Profiles from variable    ${sp_diff_adapters}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_SUBPORT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    ${task}    Remove Server Profile    ${sp_diff_bandwidth[0]}
    Wait For Task2    ${task}    240  5

3_1_Verify error message while trying to create or Edit LAG connections with different networks
    [Tags]    Ethernet    critical
    [Documentation]    Verify when trying to create/edit LAG , with both the connections having different networks,Server profile create/edit should throw an error message



    ${resp}    Add Server Profiles from variable    ${sp_diff_networks}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    # Creating profile with two LAG connections
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m    ELSE    Fail    Log    failed    console=True

    #Editing LAG with both the connections having different requested bandwidth
    ${resp}    Edit Server Profiles from variable    ${sp_diff_networks}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    ${task}    Remove Server Profile    ${sp_diff_bandwidth[0]}
    Wait For Task2    ${task}    240  5

3_2_Verify error message while trying to create or Edit LAG connections with different network set
    [Tags]    Ethernet    critical
    [Documentation]    Verify when trying to create/edit LAG , with both the connections having different network set,Server profile create/edit should throw an error message



    ${resp}    Add Server Profiles from variable    ${sp_diff_networks_sets}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    # Creating profile with two LAG connections
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m    ELSE    Fail    Log    failed    console=True

    #Editing LAG with both the connections having different requested bandwidth
    ${resp}    Edit Server Profiles from variable    ${sp_diff_networks_sets}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    ${task}    Remove Server Profile    ${sp_diff_bandwidth[0]}
    Wait For Task2    ${task}    240  5

4_Verify when only one connection is used in a LAG by POST method, Server profile create should throw an error message
    [Tags]    Ethernet    critical
    [Documentation]    Verify when only one connection is used in a LAG by POST method, Server profile create should throw an error message



    ${resp}    Add Server Profiles from variable    ${sp_one_lag}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CONNECTIONS_PER_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL


5_Verify when server profile is edited and only one connection is used in a LAG by PUT method,Server profile Edit should throw an error message
    [Tags]    Ethernet    critical
    [Documentation]    Verify when server profile is edited and only one connection is used in a LAG by PUT method,Server profile Edit should throw an error message



    # Creating profile with two LAG connections
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If    '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    20m    1m    ELSE    Fail    Log    failed    console=True

    #Editing LAG with both the connections having different requested bandwidth
    ${resp}    Edit Server Profiles from variable    ${sp_one_lag}
    ${task}    Wait For Task    ${resp[0]}     5 min      20s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CONNECTIONS_PER_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    ${task}    Remove Server Profile    ${sp_diff_bandwidth[0]}
    Wait For Task2    ${task}    240  5

6_Neg_Create LIG with Invalid Sample Values
    [Tags]    Ethernet    critical
    [Documentation]    Create LIG with Invalid sample values



    Log    Creating LIG    console=True

    :FOR    ${lig}    IN    @{ligs_negative}
    \    ${body}    Build LIG body    ${lig}
    \    ${resp}    Fusion Api Create Lig    ${body}
    \    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  Fail
    \    ...    ELSE    Log to Console    \nCould not Create LIG with Invalid sample values - ${resp['details']} \nError: ${resp['errorCode']} \n Error message : ${resp['message']}

7_1_Neg_Edit LIG with Invalid Sample Count
    [Tags]    Ethernet    critical
    [Documentation]    Edit LIG with Invalid sample Count

    ${lig_uri}    Get LIG URI    ${LIG}
    ${lig_edit}    Get LIG member    ${LIG}
    Set to Dictionary    ${lig_edit['telemetryConfiguration']}    sampleCount    400
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  Fail
    ...    ELSE    Log to Console    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}

7_2_Neg_Edit LIG with Invalid Sample Interval
    [Documentation]    Edit LIG with Invalid sample Interval
    [Tags]    Ethernet    critical



    ${lig_uri}    Get LIG URI    ${LIG}
    ${lig_edit}    Get LIG member    ${LIG}
    Set to Dictionary    ${lig_edit['telemetryConfiguration']}    sampleInterval    3700
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    Log to Console    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}

7_3_Neg_Edit LI with Invalid Sample Count
    [Documentation]    Edit LI with Invalid sample Count
    [Tags]    Ethernet    critical



    ${Telemetry_uri}    ${body}    Get LI Telemetry Configuration    ${LE}-${LIG}
    Set to Dictionary    ${body}    sampleCount    11
    ${resp}    fusion_api_update_li_telemetry_configuration    body=${body}    uri=${Telemetry_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    Log to Console    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}

7_4_Neg_Edit LI with Invalid Sample Interval
    [Documentation]    Edit LI with Invalid sample Interval
    [Tags]    Ethernet    critical



    ${Telemetry_uri}    ${body}    Get LI Telemetry Configuration    ${LE}-${LIG}
    Set to Dictionary    ${body}    sampleInterval    59
    ${resp}    fusion_api_update_li_telemetry_configuration    body=${body}    uri=${Telemetry_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    Log to Console    \nCould not Edit LIG with Invalid sample Interval - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}

8_1_Neg_Adding different users and verifying authentication
    [Documentation]    Adding different users and verifying authentication
    [Tags]    Ethernet    critical



    Remove ALL Users
    :FOR    ${user}    IN    @{users}
    \    ${resp} =  Fusion Api Add User     body=${user}
    \    Run Keyword If  ${resp['status_code']} != 200    Fail
    \    ...    ELSE    log to console    \n-Created ${user['userName']} user successfully

    ${resp}     Fusion Api Logout Appliance
    Run Keyword If    ${resp['status_code']} != 204    Fail    ELSE    log to console    \n-Logged out successfully

8_2_Verify Only Network Users is authorized to Create LIG
    [Documentation]    Verify Only Network Users is authorized
    [Tags]    Ethernet    critical



    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[0]}
    ${body}    Build LIG body    ${ligs[0]}
    ${resp}    Fusion Api Create Lig    ${body}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    Log to Console    \nonly ${usercred[0]['userName']} can be able to create LIG

    ${len}    Get Length    ${users}
    :FOR    ${x}    IN RANGE    1    ${len}
    \    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[${x}]}
    \    ${body}    Build LIG body    ${ligs[0]}
    \    ${resp} =    Fusion Api Create Lig    ${body}
    \    Run Keyword If  ${resp['status_code']} != 403 or '${resp['errorCode']}' != 'ACTION_FORBIDDEN_BY_ROLE'    Fail    ELSE    Log to Console    \n ${usercred[${x}]['userName']} cannot create LIG \n Error: ${resp['errorCode']}

8_3_Verify Only Network Users is authorized to Edit LIG
    [Documentation]    Verify Only Network Users is authorized
    [Tags]    Ethernet    critical



    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[0]}
    ${lig_uri}    Get LIG URI    ${ligs_negative[1]['name']}
    ${lig_edit}    Get LIG member    ${ligs_negative[1]['name']}
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    Log to Console    \nonly ${usercred[0]['userName']} can be able to edit LIG

    ${len}    Get Length    ${users}
    :FOR    ${x}    IN RANGE    1    ${len}
    \    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[${x}]}
    \    ${lig_uri}    Get LIG URI    ${ligs_negative[1]['name']}
    \    ${lig_edit}    Get LIG member    ${ligs_negative[1]['name']}
    \    ${resp} =  Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    \    Run Keyword If  ${resp['status_code']} != 403 or '${resp['errorCode']}' != 'ACTION_FORBIDDEN_BY_ROLE'    Fail    ELSE    Log to Console    \n ${usercred[${x}]['userName']} cannot edit LIG \n Error: ${resp['errorCode']}
