***Settings***
Documentation   Mini FIT Regression Suite - Changing different FC port speed
Variables       FC_FCoE_Common_Variables.py
Variables       FC_FCoE_Data_Variable.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations.py
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***

***Test cases***

Fetch ICM URI
    [Tags]    Common
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable


    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

1_Change Aside FC FA Port Speed from Auto to 2Gb
    [Tags]    Storage    non-critical
    [Documentation]    This test case changes the FC FA port speed from Auto to 2 Gb

    Log    Edit LI uplinkset Aside FA uplinks from Auto to 2Gb    console=True

    ${US_name}   Create List    ${US_name_For_Speed[0]}
    ${US_Speed_key}   Create List    ${Uplink_speed_2G[0]}

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[0]}

    :FOR    ${uplink}    IN    @{US_FA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed2G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    OK

1_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

1_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

1_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

1_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

2_Change Aside FC FA speed from 2Gb to 4Gb, DA Port Speed from Auto to 4Gb
    [Tags]    Storage    non-critical
    [Documentation]    This test case changes the FC FA port speed from 2gb to 4Gb and DA speed from Auto to 4Gb
    ${US_name}   Create List    ${US_name_For_Speed[0]}    ${US_name_For_Speed[2]}
    ${US_Speed_key}   Create List    ${Uplink_speed_4G[0]}    ${Uplink_speed_4G[2]}
    Log    change the Aside FC FA port speed from 2gb to 4Gb and DA speed from Auto to 4Gb    console=True

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[0]}

    :FOR    ${uplink}    IN    @{US_FA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed4G

    :FOR    ${uplink}    IN    @{US_DA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed4G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    OK

2_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected
    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

2_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

2_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

2_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

2_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

3_Change Aside FC FA and DA port speed from 4Gb to 8Gb
    [TAGS]    Storage    non-critical
    [Documentation]    This test case changes the FC FA and DA port speed from 4Gb to 8Gb
    ${US_name}   Create List    ${US_name_For_Speed[0]}    ${US_name_For_Speed[2]}
    ${US_Speed_key}   Create List    ${Uplink_speed_8G[0]}    ${Uplink_speed_8G[2]}

    Log    Edit LI Aside uplinkset FA and DA uplinks from 4Gb to 8Gb    console=True

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[0]}

    :FOR    ${uplink}    IN    @{US_FA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    :FOR    ${uplink}    IN    @{US_DA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    OK

3_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected


    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

3_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

3_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

3_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

3_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

4_Change Aside FC FA and DA port speed from 8Gb to Auto
    [Documentation]    This test case changes the FC FA and DA port speed from 8Gb to Auto
    [TAGS]    Storage    non-critical

    Log    Edit Aside LI uplinkset FA and DA uplinks from 8Gb to Auto    console=True

    Update Logical Interconnect from Group    ${LI_dtos[0]}

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    :FOR    ${uplink}    IN    @{US_FA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    :FOR    ${uplink}    IN    @{US_DA1_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[0]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    OK

4_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected


    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

4_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected


    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

4_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

4_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

4_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

5_Change Bside FC FA Port Speed from Auto to 2Gb
    [Documentation]    This test case changes the FC FA port speed from Auto to 2 Gb
    [TAGS]    Storage    non-critical
    Log    Edit LI uplinkset Bside FA uplinks from Auto to 2Gb    console=True

    ${US_name}   Create List    ${US_name_For_Speed[1]}
    ${US_Speed_key}   Create List    ${Uplink_speed_2G[1]}

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[1]}

    :FOR    ${uplink}    IN    @{US_FA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed2G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[1]}    ${us}    OK

5_1_Validate FC FA Login informations
    [Documentation]    Verify if the logins are not affected
    [Tags]    Storage    critical

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

5_2_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

5_3_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

5_4_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

5_4_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

5_4_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

6_Change Bside FC FA speed from 2Gb to 4Gb, DA Port Speed from Auto to 4Gb
    [TAGS]    Storage    non-critical
    [Documentation]    This test case changes the FC FA port speed from 2gb to 4Gb and DA speed from Auto to 4Gb
    ${US_name}   Create List    ${US_name_For_Speed[1]}    ${US_name_For_Speed[3]}
    ${US_Speed_key}   Create List    ${Uplink_speed_4G[1]}    ${Uplink_speed_4G[3]}
    Log    change the Bside FC FA port speed from 2gb to 4Gb and DA speed from Auto to 4Gb    console=True

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[1]}

    :FOR    ${uplink}    IN    @{US_FA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed4G

    :FOR    ${uplink}    IN    @{US_DA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed4G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[1]}    ${us}    OK

6_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected


    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

6_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

6_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

6_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

6_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

6_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

6_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

7_Change Bside FC FA and DA port speed from 4Gb to 8Gb
    [TAGS]    Storage    non-critical
    [Documentation]    This test case changes the FC FA and DA port speed from 4Gb to 8Gb
    ${US_name}   Create List    ${US_name_For_Speed[1]}    ${US_name_For_Speed[3]}
    ${US_Speed_key}   Create List    ${Uplink_speed_8G[1]}    ${Uplink_speed_8G[3]}

    Log    Edit LI Bside uplinkset FA and DA uplinks from 4Gb to 8Gb    console=True

    Update Port Speed    ${li_uplinksets}    ${US_Speed_key}    ${US_name}    ${LIs[1]}

    :FOR    ${uplink}    IN    @{US_FA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    :FOR    ${uplink}    IN    @{US_DA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[1]}    ${us}    OK

7_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

7_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

7_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

7_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

7_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

7_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

7_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

8_Change Bside FC FA and DA port speed from 8Gb to Auto
    [Tags]    Storage    non-critical
    [Documentation]    This test case changes the FC FA and DA port speed from 8Gb to Auto

    Log    Edit Bside LI uplinkset FA and DA uplinks from 8Gb to Auto    console=True

    Update Logical Interconnect from Group    ${LI_dtos[1]}

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Configured

    :FOR    ${uplink}    IN    @{US_FA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    :FOR    ${uplink}    IN    @{US_DA2_UPLINKS}
    \    Wait Until Keyword Succeeds     10 min   10s     Verify Port    ${ICM_uris[1]}    ${uplink}
    \    ...    status=OK    portStatus=Linked    opSpeed=Speed8G

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[1]}    ${us}    OK

8_1_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information are not affected

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

8_2_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins are not affected

    Log    Verify login count for FC ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

8_3_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

8_4_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

8_5_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

8_5_1_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

8_5_2_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}