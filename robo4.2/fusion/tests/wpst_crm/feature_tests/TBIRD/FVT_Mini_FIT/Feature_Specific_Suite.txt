***Settings***
Documentation    Mini FIT Regression Suite_Feature Specific Suite
#Variables       FC_FCoE_Common_Variables.py
#Variables       FC_FCoE_Data_Variable.py
Variables       data_variables_ethernet.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations
Library         data_variables_ethernet
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***

***Test cases***

Fetch ICM URI
    [Tags]    Common
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

Create Server profiles
    [TAGS]    Ethernet    non_critical
    [Documentation]    Create server profiles

    Power off ALL servers    PressAndHold
    Remove All Server Profiles

    :FOR    ${pro}    IN    @{SP_same_phy_port}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}

    ${resp}    Add Server Profiles from variable    ${SP_same_phy_port}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If    '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m
    \    ...    ELSE    Fail    Log    failed    console=True
    Power on Servers in Profiles    ${SP_same_phy_port}
    Sleep    ${SERVER_BOOT_WAIT}

1_Create Server profile with same network set having network vlan401 for both the connections and verify the traffic flow between the connections
    [TAGS]    Ethernet    critical
    [Documentation]    Create Server profile with same network set having network vlan401 for both the connections and verify the traffic flow between the connections


    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${SP_same_phy_port[0]['name']}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC1_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[1]}
    Log    ${adapter_name_list}    console=True

    Create Teaming And Tagging Windows    ${adapter_name_list[0]}    ${Powershell_switchIndependent_team_1}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_1}
    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_2}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_2}

    :FOR    ${x}    IN RANGE    0   2
    \    Set Static ip interface    ${adapter_name_list[${x}]}    ${Powershell_set_static_ip[${x}]}    ${server_details_same_phy_port}    ${ip[0]}

    Run Keyword And Continue On Failure    Ping_Server_ip_validate_packet_loss    ${ping_cmd_same_netset}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

    ###Delete Teaming
    ${l}    Get Length    ${delete_team_cmds}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Delete Windows Teaming    ${ip[0]}    ${server_details_same_phy_port}    ${delete_team_cmds[${x}]}
    Sleep    2min

2_Create Server profile with different network set for both the connections and verify the traffic flow between the connections
    [TAGS]    Ethernet    critical
    [Documentation]    Create Server profile with different network set for both the connections and verify the traffic flow between the connections

    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC2_SERVER_SAME_PHY_PORT_ILO}    ${ENC2_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC2_SERVER_SAME_PHY_PORT_ILO}    ${ENC2_SERVER_SAME_PHY_PORT_win_cred}    ${SP_same_phy_port[1]['name']}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC2_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[1]}
    Log    ${adapter_name_list}    console=True

    Create Teaming And Tagging Windows    ${adapter_name_list[0]}    ${Powershell_switchIndependent_team_1}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_1}
    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_2}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_2}
    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_2}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_3}

    :FOR    ${x}    IN RANGE    0   2
    \    Set Static ip interface    ${adapter_name_list[${x}]}    ${Powershell_set_static_ip[${x}]}    ${server_details_same_phy_port}    ${ip[0]}
    Set Static ip interface    ${adapter_name_list[1]}    ${Powershell_set_static_ip2}    ${server_details_same_phy_port}    ${ip[0]}

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_diff_netset}    ${ENC2_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

    ${Count}    Get Length    ${ping_cmd_diff_netset_diff_vlan}
    :FOR    ${x}    IN RANGE    0   ${Count}
    \    ${output}    execute_windows_commands    ${ip[0]}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${ping_cmd_diff_netset_diff_vlan[${x}]}
    \    Sleep    30
    \    ${contents}    OperatingSystem.Get File    ${file_name}
    \    Should Contain    ${contents}    ${Host_unreachable_msg}

    ###Delete Teaming
    ${l}    Get Length    ${delete_team_cmds}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Delete Windows Teaming    ${ip[0]}    ${server_details_same_phy_port}    ${delete_team_cmds[${x}]}
    Sleep    2min

2_1_Edit networkset and add VLAN 410 to it
    [TAGS]    Ethernet    critical
    [Documentation]    Edit networkset and add VLAN 410 to it

    Update Network Set    ${update_network_sets}

    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC2_SERVER_SAME_PHY_PORT_ILO}    ${ENC2_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC2_SERVER_SAME_PHY_PORT_ILO}    ${ENC2_SERVER_SAME_PHY_PORT_win_cred}    ${SP_same_phy_port[1]['name']}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC2_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[1]}
    Log    ${adapter_name_list}    console=True

    Create Teaming And Tagging Windows    ${adapter_name_list[0]}    ${Powershell_switchIndependent_team_1}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_1}
    Create Teaming And Tagging Windows    ${adapter_name_list[0]}    ${Powershell_switchIndependent_team_1}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_4}
    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_2}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_2}
    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_2}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_3}

    ${l}    Get Length    ${Powershell_set_static_ip_neset1}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Set Static ip interface    ${adapter_name_list[0]}    ${Powershell_set_static_ip_neset1[${x}]}    ${server_details_same_phy_port}    ${IP[0]}

    ${l}    Get Length    ${Powershell_set_static_ip_neset2}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Set Static ip interface    ${adapter_name_list[1]}    ${Powershell_set_static_ip_neset2[${x}]}    ${server_details_same_phy_port}    ${IP[0]}

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_diff_netset_between_con}    ${server_details_same_phy_port}   ${ip[0]}    ${file_name}

    ###Delete Teaming
    ${l}    Get Length    ${delete_team_cmds}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Delete Windows Teaming    ${ip[0]}    ${server_details_same_phy_port}    ${delete_team_cmds[${x}]}
    Sleep    2min

3_Create Server profile with single network and network set having the same network and verify the traffic flow between the connections
    [TAGS]    Ethernet    critical
    [Documentation]    Create Server profile with single network and network set having the same network and verify the traffic flow between the connections


    Update Network Set    ${update_network_sets1}

    :FOR    ${pro}    IN    @{SP_same_phy_port_single_nw_ns}
    \    Set To Dictionary    ${pro}    enclosureGroupUri    EG:${EG}

    ${resp}    Add Server Profiles from variable    ${SP_same_phy_port_single_nw_ns}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If    '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m
    \    ...    ELSE    Fail    Log    failed    console=True
    Power on Servers in Profiles    ${SP_same_phy_port_single_nw_ns}
    Sleep    ${SERVER_BOOT_WAIT}

    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC2_SERVER_NON_LAG_NS_ILO}    ${ENC2_SERVER_NON_LAG_NS_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC2_SERVER_NON_LAG_NS_ILO}    ${ENC2_SERVER_NON_LAG_NS_win_cred}    ${SP_same_phy_port_single_nw_ns[0]['name']}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC2_SERVER_NON_LAG_NS_ILO['type']}    mac_length=${mac_len_same_phy_port[1]}
    Log    ${adapter_name_list}    console=True

    ${tmp}    Strip String    ${adapter_name_list[0]}
    ${replaced_cmd1}    Replace String Using Regexp    ${Powershell_set_static_ip4}    xxxx    ${tmp}
    Log    \nstrafter strip is ${tmp}    console=true
    Log    \nreplaced_cmd1 is ${replaced_cmd1}    console=true
    Set Static ip interface    ${adapter_name_list[0]}    ${replaced_cmd1}    ${server_details_same_phy_port}    ${ip[0]}

    Create Teaming And Tagging Windows    ${adapter_name_list[1]}    ${Powershell_switchIndependent_team_1}    ${server_details_same_phy_port}    ${ip[0]}    ${Powershell_tagging_1}
    Set Static ip interface    ${adapter_name_list[1]}    ${Powershell_set_static_ip[0]}    ${server_details_same_phy_port}    ${ip[0]}

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_single_nw_ns}    ${server_details_same_phy_port}   ${ip[0]}    ${file_name}

    #Delete teaming
    Delete Windows Teaming    ${ip[0]}    ${server_details_same_phy_port}    ${delete_team_cmd0}

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[1]}    ${adapter_name_list}    ${delete_static_ip}    ${server_details_same_phy_port}    ${ip[0]}

##################################################################### Port Monitoring ################################################################################
Editing LIG uplink sets for Port monitoring
    [TAGS]    Ethernet    critical
    [Documentation]    Editing LIG uplink sets for Port monitoring

    Power off ALL servers    PressAndHold
    Remove All Server Profiles

    Log    Editing LIG to add tunnel and untagged uplink sets    console=True
    ${resp}    Edit LIG    ${lig_portMonitoring}
    ${len}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    '${resp[0]['status_code']}' == '202'
    \    ...    Wait For Task2    ${resp}    5min    10    ELSE    Fail    Log    failed    console=True

    Update Logical Interconnect from Group    ${LI_dtos[0]}

    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[0]}    Configured
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[1]}    Configured

    :FOR    ${us}    IN    @{Tunnel_Untagged_US}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    OK

Creating Server Profiles
    [TAGS]    Ethernet    non_critical
    [Documentation]    Creating Server Profiles
    ${resp}    Add Server Profiles from variable    ${SP_port_monitoring}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If    '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m
    \    ...    ELSE    Fail    Log    failed    console=True
    Power on Servers in Profiles    ${SP_port_monitoring}
    Sleep    ${SERVER_BOOT_WAIT}

4_Log-in as Server Admin and Enable Port Monitoring with Unauthorized User
    [TAGS]    Ethernet    critical
    [Documentation]    Log-in as Server Admin Enable Port Monitoring with Unauthorized User

    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login"

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port}    ${analyzer_dport}    true
    Log    ${resp}    console=True
    Run Keyword If  ${resp['status_code']} !=403    Fail    Warning !!! Unauthorized user have access for Port Monitor ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}

    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']}== 204    Fail    "Unable to Logout"
    Log    \n\nLogged_Out from Appliance as serveradmin    console=True


5_Positive : Enable Port Monitoring with Authorized User using port Q5
    [TAGS]    Ethernet    critical
    [Documentation]    Positive : Enable Port Monitoring with Authorized User using port Q5

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port}    ${analyzer_dport}    true
    Run Keyword If  ${resp['status_code']} !=202    Fail    Port Monitoring failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}     500s    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!    console=True

    Verify Port Monitoring in IC     ${analyzer_port}    ${analyzer_dport}    ${Interconnect_name[0]}

6_Negative : Create Uplinkset using the analyzerPort Q5
    [TAGS]    Ethernet    critical
    [Documentation]    Negative : Create Uplinkset using the analyzerPort Q5

    ${li_uri}    Get LI URI    ${LI}
    ${us1}    Copy Dictionary    ${li_uplink_sets['US_analyzer_port']}
    ${body}    Build US body    ${us1}    ${li_uri}
    ${resp}    Fusion Api Create Uplink Set    body=${body}
    Run Keyword If  ${resp['status_code']} != 400    Fail    ELSE    Log    As expected Uplink set is not able to created using analyzer port    console=True

7_Negative : Enable Port Monitoring with uplink port in the Uplinkset
    [TAGS]    Ethernet    critical
    [Documentation]    Negative : Enable Port Monitoring with uplink port in the Uplinkset

    ${resp}    Configuring Port Monitoring in LI   ${Interconnect_name[0]}    ${IC3_Tagged_NON_LAG}    ${analyzer_dport}     true
    Run Keyword If  ${resp['status_code']} == 202    Fail    ELSE    Log    Enabling Port Monitor is Failed for Uplinkport for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}    console=True

8_Negative : Enable Port Monitoring with an uplink port that is an Fiber channel US using port "Q3_1"
    [TAGS]    Ethernet    critical
    [Documentation]    Negative : Enable Port Monitoring with an uplink port that is an Fiber channel US using port "Q3_1"

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${IC3_FC}    ${analyzer_dport}   true
    Log    ${resp}    console=True
    Run Keyword If  ${resp['status_code']} != 400    Fail    ELSE    Log    Enabling Port Monitor is Success for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}    console=True

9_Negative : Enable Port Monitoring with a stacking port as the analyzerPort
    [TAGS]    Ethernet    critical
    [Documentation]    Negative : Enable Port Monitoring with an uplink port that is an Fiber channel US using port "Q7"

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${IC3_Stacking_Q7}    ${analyzer_dport}    true
    Run Keyword If  ${resp['status_code']} == 202    Fail    ELSE    Log    As Expected Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}    console=True


10_Positive : Disable Port Monitoring with Authorized Users
    [TAGS]    Ethernet    critical
    [Documentation]    Positive : Disable Port Monitoring with Authorized Users

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port}    ${analyzer_dport}    false
    Run Keyword If  ${resp['status_code']} != 202    Fail    Failed to Disable Port Monitor for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Log    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}    console=True
    ...    ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

11_Switch from ports Q5 to Q6
    [TAGS]    Ethernet    critical
    [Documentation]    Switch from ports Q5 to Q1_1

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port_2}    ${analyzer_dport}    true
    Run Keyword If  ${resp['status_code']} != 202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...    ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

    Wait Until Keyword Succeeds    5 min    20s   Verify Port Monitoring in IC    ${analyzer_port_2}    ${analyzer_dport}    ${Interconnect_name[0]}

12_Disable Port Monitoring with the port Q1_1
    [TAGS]    Ethernet    critical
    [Documentation]    Disable Port Monitoring with the port Q1_1

    ${resp}    Configuring Port Monitoring in LI   ${Interconnect_name[0]}    ${analyzer_port_2}    ${analyzer_dport}    false
    Run Keyword If  ${resp['status_code']} !=202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

13_Switch the ports from Port Q1_1 to Q4_1
    [TAGS]    Ethernet    critical
    [Documentation]    Switch the ports from Port Q1_1 to Q4_1

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port_3}    ${analyzer_dport}    true
    Run Keyword If  ${resp['status_code']} != 202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

    Wait Until Keyword Succeeds    5 min    20s    Verify Port Monitoring in IC    ${analyzer_port_3}    ${analyzer_dport}    ${Interconnect_name[0]}

14_Disable the port monitoring with port Q4_1
    [TAGS]    Ethernet    critical
    [Documentation]    Disable the port monitoring with port Q4_1

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port_3}    ${analyzer_dport}    false
    Run Keyword If  ${resp['status_code']} != 202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    ${pm_timer_q5}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

15_Switch the ports from Port Q4_1 to Q5
    [TAGS]    Ethernet    critical
    [Documentation]    Switch the ports from Port Q4_1 to Q5

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port}    ${analyzer_dport}    true
    Run Keyword If  ${resp['status_code']} != 202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task    ${resp}    ${pm_timer_q5}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!!    console=True

    Wait Until Keyword Succeeds    5 min    20s    Verify Port Monitoring in IC     ${analyzer_port}  ${analyzer_dport}    ${Interconnect_name[0]}

16_Disable the port monitoring with port Q5
    [TAGS]    Ethernet    critical
    [Documentation]    Disable the port monitoring with port Q5

    ${resp}    Configuring Port Monitoring in LI    ${Interconnect_name[0]}    ${analyzer_port}    ${analyzer_dport}    false
    Run Keyword If  ${resp['status_code']} != 202    Fail    Swirching to port & Enabling Port Monitor is failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task}    Wait For Task   ${resp}     ${pm_timer_q5}    2s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200    Fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log    \n Successfully configured the port monitoring !!    console=True

Brining back the setup
    [TAGS]    Ethernet    non_critical
    [Documentation]    Brining back the setup

    ${resp}    Remove Server Profile    ${SP_internal_netset[0]}
    Run Keyword If    '${resp['status_code']}' == '202'    Wait For Task2    ${resp}    20m    1m    ELSE    Fail    Log    failed    console=True

    ${lig_uri}    Get LIG URI    ${ligs_update[0]['name']}
    ${body}    Build LIG body    ${ligs_update[0]}
    ${resp}    Fusion Api Edit LIG      body=${body}    uri=${lig_uri}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    Log to Console    \nSuccessfully edited LIG

    Update Logical Interconnect from Group    ${LI_dtos[0]}
    Sleep    2min

    Update Network Set    ${update_network_sets2}