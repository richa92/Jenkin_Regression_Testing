***Settings***
Documentation    Mini FIT Regression Suite_PowerICM
#Variables       FC_FCoE_Common_Variables.py
#Variables       FC_FCoE_Data_Variable.py
Variables       data_variables_ethernet.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         server_operations.py
Library         data_variables_ethernet
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           common_keywords.txt
Library         Telnet

***Variables***


***Test cases***

Fetch ICM URI
    [Tags]    Common
    [Documentation]    fetches the interconnect's uri and server ip's
    Set Log Level    TRACE
    ${resp_list}    Create List
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}

    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM3_uri}    console=True
    Log     ${ICM6_uri}    console=True
    Set Suite Variable    ${ICM_uris}    ${ic_uris}

Kill Traffic in TCS
    [Tags]    Common
    [Documentation]    Verify traffic flows correctly form Non-LAG to LAG server and vice-versa
    execute_command_in_tcs    ${kill_paexec}

Get server IP and pass traffic for same physical port connections with same networks
    [TAGS]    Ethernet    critical
    [Documentation]    Get server IP and pass traffic for same physical port connections with same networks
    ${server_details_same_phy_port}    Get IP For All Servers    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}
    ${ip}    Get From Dictionary    ${server_details_same_phy_port}    ip
    Sort List    ${ip}
    Set Suite Variable    ${ip}    ${ip}
    Set Suite Variable    ${server_details_same_phy_port}    ${server_details_same_phy_port}

    ${adapter_name_list}    Getting Server Adapter Names    ${ENC1_SERVER_SAME_PHY_PORT_ILO}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${ENC1_SERVER_SAME_PHY_PORT}    ${Powershell_get_mac}    ${server_details_same_phy_port['username']}    ${server_details_same_phy_port['password']}    ${file1}    ${ENC1_SERVER_SAME_PHY_PORT_ILO['type']}    mac_length=${mac_len_same_phy_port[0]}
    Log    ${adapter_name_list}    console=True
    Set Suite Variable    ${adapter_name_list}    ${adapter_name_list}

    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${delete_static_ip}    ${server_details_same_phy_port}    ${ip[0]}
    #Set Static ip
    Set_Static_ip    ${mac_len_same_phy_port[0]}    ${adapter_name_list}    ${Powershell_set_static_enc1}    ${server_details_same_phy_port}    ${ip[0]}


1_Perform Power off Aside ICM
    [Tags]    Common
    [Documentation]    Perform ICM power off and verifies the state of ICM

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[0]}    Maintenance
    Sleep    60sec

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=Critical    portStatus=Unlinked

    Log    Verify ICM3 downlink port status    console=True
    :FOR    ${downlink}    IN    @{ASIDE_SERVER_DOWNLINKS}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[0]}    ${downlink}    status=Critical    portStatus=Unlinked

Verify state for Storage Bside Uplink Set
    [TAGS]    Storage    non-critical
    [Documentation]    Verify state for Storage Uplink Set

    Log    verify ICM6 uplinkset status is ok    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Verify Uplinkset Status    ${LIs[1]}    ${us}    OK

Verify state for Ethernet Uplink Set
    [TAGS]    Ethernet    non_critical
    [Documentation]    Verify state for Ethernet Uplink Set

    Log    Verify if Aside uplinkset is Warning    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SETS}
    \    Run Keyword And Continue On Failure    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    Warning

    Log    Verify if Aside uplinkset is Critical    console=True
    :FOR    ${us}    IN    @{ASIDE_UPLINK_SET_SFP}
    \    Run Keyword And Continue On Failure    Wait Until Keyword Succeeds    5 min    20s    Verify Uplinkset Status    ${LIs[0]}    ${us}    Critical

    Log    Verify Bside uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked

Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable


    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

1_1_Validating FipSnooping Data Not Affected in Bside ICM
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

1_2_Verify Traffic for FCoE network
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

1_3_Validate FC DA Bside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information in Bside after power off Aside ICM

    Log    Verify the uplink wwn and name server information    console=True
    Verify Happy Bside Uplinks DA ports    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Verify Happy Servers Bside DA Connections    ${ICM6_uri}

1_4_Validate FC FA Bside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on ports are not affected

    Log    Verify if login count is not affected on both ICM    console=True
    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

1_5_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

1_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    : FOR    ${port}    IN    @{Aside_FC_ports}
    \    ${value}    ${out}    get_interconnect_statistics    ${ICM3_uri}    ${port}
    \    Run Keyword If    '${out['errorCode']}' == 'CRM_INVALID_SWITCH_STATE_PORT_STATS_REQUEST'    Log    Successfully verified that stats data is emtpy \n ${out}    console=True
    \    ...    ELSE    FAIL    msg=${out}

    Run Keyword If    '${Config}' == 'AB'    execute_command_in_tcs    ${kill_paexec}
    Run Keyword If    '${Config}' == 'AB'    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Run Keyword If    '${Config}' == 'AB'    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Run Keyword If    '${Config}' == 'AB'    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${Bside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1
    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

1_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic
    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FCoE_ILO_details[${x}]}    ${Esxi_FCoE_servers_details[${x}]}

1_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic
    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

1_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic
    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

1_7_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count
    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    PASS EXECUTION IF    ${esxi_server_len} == 0    Skip Test If Not Esxi Server
    :FOR    ${x}    IN RANGE    0    ${esxi_server_len}
    \    Run Keyword And Continue On Failure    Get Esxi Volume Through ILO    ${Esxi_FA_DA_ILO_details[${x}]}    ${Esxi_FA_DA_servers_details[${x}]}

1_1_Verify ping for MLAG server after A-side ICM power off
    [TAGS]    Ethernet    critical
    [Documentation]    Verify ping for MLAG server after A-side ICM power off

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}     ${percentage_loss[0]}

1_2_Verify Traffic for Same physical port connections
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections

    Ping_Server_ip_validate_packet_loss_neg    ${ip[0]}    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}    ${file_name}    ${General_failure}    ${General_failure}

1_3_Verify that Digital Diagnostic info show up after Aside ICM Power off
    [TAGS]    Ethernet    critical
    [Documentation]    Verify that Digital Diagnostic info show up after Aside ICM Power off

    ${message}    Set Variable    Successfully verified digital diagnostic is not available after power off ICM
    Validate Digital Diagnostics    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    False    ${DDMI_values_SFP_SR}

    ${message}    Set Variable    Successfully verified connector info is not available after power off ICM
    validate connector informations    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    False

2_Power off BFS server before power on ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers off BFS server before power on ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power off Server    PressAndHold

2_Perform Power on Aside ICM
    [Tags]    Common
    [Documentation]    Perform Aside ICM power on and verifies the state of ICM and uplink and profile status

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM_uris[0]}    Configured
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify ICM6 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked

    Log to Console     ${\n}Verify servers Profile status OK
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

2_Power on BFS server after power on ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers on BFS server after power on ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power on Server
    Sleep    ${SERVER_BOOT_WAIT}

    Wait Until Keyword Succeeds    10 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

2_Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical

    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable


    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

2_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Aside ICM

    Log    Validate FIPS data in uplink    console=True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ICM3_Fcoe_uplink_list}    ${Aside_Uplink_FIPS_Data_List}    uplink    True

    Log    Validate FIPS data in downlink    console=True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM3_uri}
    ...    ${ASIDE_Fcoe_SERVER_DOWNLINKS}    ${Aside_Downlink_FIPS_Data_List}    downlink    True

2_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True
    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

2_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information after power on ICM for both Aside and Bside ICM

    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

2_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside and Bside ports are regained

    Log    Verify login count for Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

2_5_Verify traffic for FC FA and DA servers
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

2_6_Verify FC Port statistics
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Pass the traffic for both FA and DA networks and verify the fc port statistics

    Log    Validate traffic and counter values are increased in Aside ICM after power on Aside ICM    console=True

    execute_command_in_tcs    ${kill_paexec}
    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd}
    Execute Traffic In Thread    ${Windows_FA_DA_server_details}

    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${Aside_FC_ports}    ${FC_counters_Keys}    ${fc_counters_to_validate}    Packet_Interval=200    stats_flag=fc_stats   check_flag=increase    subport_no=1
    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

2_7_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

2_7_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

2_7_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

2_7_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

Get Server IP For Ethernet Servers and passing traffic
    [TAGS]    Ethernet    critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic


    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}    ${ping_type[1]}   ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

2_1_Verify Traffic in LAG Servers after A-side ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side ICM power on


    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

2_2_Verifying S-Channel common and advanced statistics vaules after A-side ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after A-side ICM power on

    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM3_uri}    ${downlink_Aside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM3_uri}    ${downlink_Aside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

2_3_Verify Traffic for Same physical port connections after A-side ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic for Same physical port connections after A-side ICM power on

    Ping_Server_ip_validate_packet_loss    ${ping_cmd_enc1_same_phy_port}    ${ENC1_SERVER_SAME_PHY_PORT_win_cred}   ${ip[0]}    ${file_name}

2_4_Verify that Digital Diagnostic info show up after Aside ICM Power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify that Digital Diagnostic info show up after Aside ICM Power on

    ${message}    Set Variable    Successfully verified if digital diagnostic info is available
    Wait Until Keyword Succeeds    5 min    20s      Validate Digital Diagnostics    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    True    ${DDMI_values_SFP_SR}

    ${message}    Set Variable    Successfully verified if connector info is available
    Wait Until Keyword Succeeds    5 min    20s      validate connector informations    ${ICM3_uri}    ${Supported_transreceiver_SFP}    ${message}    True

3_Perform Power off Bside ICM
    [Tags]    Common
    [Documentation]    Perform ICM power off and verifies the state of ICM

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris[1]}    Maintenance
    Sleep    60sec

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=Critical    portStatus=Unlinked

Verify Uplink set status for Ethernet
    [TAGS]    Ethernet    non_critical
    [Documentation]    Verify Uplink set status for Ethernet


    Log    verify ICM6 uplinkset status is Warning    console=True
    :FOR    ${us}    IN    @{BSIDE_UPLINK_SETS}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Uplinkset Status    ${LIs[1]}    ${us}    Warning

3_Get Server IP For Storage Servers
    [TAGS]    Storage    non-critical
    [Documentation]    Fetches the IP for all the FC and FcoE servers and sets suite variable

    ${Windows_FA_DA_server_details}    ${Linux_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}    ${Windows_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}    Set Server Details For Storage Servers    ${FA_DA_server_ilo_list}    ${FA_DA_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}
    Set Suite Variable    ${FA_DA_server_details}    ${FA_DA_server_details}
    Set Suite Variable    ${Windows_FA_DA_server_details}    ${Windows_FA_DA_server_details}
    Set Suite Variable    ${Linux_FA_DA_servers_details}    ${Linux_FA_DA_servers_details}
    Set Suite Variable    ${Esxi_FA_DA_servers_details}    ${Esxi_FA_DA_servers_details}
    Set Suite Variable    ${Windows_FA_DA_ILO_details}    ${Windows_FA_DA_ILO_details}
    Set Suite Variable    ${Linux_FA_DA_ILO_details}    ${Linux_FA_DA_ILO_details}
    Set Suite Variable    ${Esxi_FA_DA_ILO_details}    ${Esxi_FA_DA_ILO_details}

    Log    \nFA DA server details\n ${Windows_FA_DA_server_details}    console=True
    Log    \nFA DA server details\n ${Linux_FA_DA_servers_details}    console=True
    Log    \nFA DA server details\n ${Esxi_FA_DA_servers_details}    console=True

    Log    \nFetch FCoE server details    console=True

    ${Windows_FCoE_servers_details}    ${Linux_FCoE_servers_details}    ${Esxi_FCoE_servers_details}        ${Windows_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}    Set Server Details For Storage Servers    ${Fcoe_server_ilo_list}    ${Fcoe_server_details}    ${linux_cmd}    ${esxi_cmd}    ${kill_diskspd}

    Set Suite Variable    ${Fcoe_server_details}    ${Fcoe_server_details}
    Set Suite Variable    ${Windows_FCoE_servers_details}    ${Windows_FCoE_servers_details}
    Set Suite Variable    ${Linux_FCoE_servers_details}    ${Linux_FCoE_servers_details}
    Set Suite Variable    ${Esxi_FCoE_servers_details}    ${Esxi_FCoE_servers_details}
    Set Suite Variable    ${Windows_FCoE_ILO_details}    ${Windows_FCoE_ILO_details}
    Set Suite Variable    ${Linux_FCoE_ILO_details}    ${Linux_FCoE_ILO_details}
    Set Suite Variable    ${Esxi_FCoE_ILO_details}    ${Esxi_FCoE_ILO_details}


    Log    \nFCoE server details\n ${Windows_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Linux_FCoE_servers_details}    console=True
    Log    \nFCoE server details\n ${Esxi_FCoE_servers_details}    console=True

3_1_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections
    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

3_2_Validate FC DA Aside nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information on Aside ICM after power off Bside ICM


    Log    Verify the uplink wwn and name server information    console=True
    Verify Happy Aside Uplinks DA ports    ${ICM3_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Verify Happy Servers Aside DA Connections    ${ICM3_uri}

3_3_Validate FC FA Aside Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on ports are not affected


    Log    Verify if login count is not affected on both ICM    console=True
    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

3_4_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

3_5_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_5_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_5_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

3_5_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

3_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

3_5_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

3_1_Verify ping for MLAG server after B-side ICM power off
    [Documentation]    Verify ping for MLAG server after A-side ICM power off

    PASS EXECUTION IF    '${Function}' != 'Ethernet'    Skip Test If Not Storage Functionality

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

4_Power off BFS server before power on ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers off BFS server before power on ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power off Server    PressAndHold

4_Perform Power on Bside ICM
    [Tags]    Common
    [Documentation]    Perform Bside ICM power on and verifies the state of ICM and uplink and profile status

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM_uris[1]}    Configured
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master
    Run Keyword If    '${Config}' == 'HA'    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Log    Verify ICM3 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Aside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[0]}    ${uplink}    status=OK    portStatus=Linked

    Log    Verify ICM6 uplink port status    console=True
    :FOR    ${uplink}    IN    @{Bside_uplink_ports}
    \    Wait Until Keyword Succeeds    10 min    20s    Verify Port    ${ICM_uris[1]}    ${uplink}    status=OK    portStatus=Linked

    Log to Console     ${\n}Verify servers Profile status OK
    Wait Until Keyword Succeeds    5 min    20s    Verify Server Profiles status    ${server_profile_names}    OK

4_Power on BFS server after power on ICM
    [TAGS]    Storage    BFS    non-critical
    [Documentation]    powers on BFS server after power on ICM

    Run Keyword for List    ${BFS_esxi_servers}    Power on Server
    Sleep    ${SERVER_BOOT_WAIT}

    Wait Until Keyword Succeeds    10 min    20s    Verify Server Profiles status    ${server_profile_names}    OK


4_1_Validating FipSnooping Data Regained back
    [Tags]    Storage    critical
    [Documentation]    validates the fipsnooping data for fcoe connections in uplink and downlink port of Bside ICM

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${ICM6_Fcoe_uplink_list}    ${Bside_Uplink_FIPS_Data_List}    uplink    True

    Wait Until Keyword Succeeds     10 min   10s     Verify Fipsnooping data with validation     ${ICM6_uri}
    ...    ${BSIDE_Fcoe_SERVER_DOWNLINKS}    ${Bside_Downlink_FIPS_Data_List}    downlink    True

4_2_Verify Traffic for FCoE network
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fcoe server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FCoE_servers_details}

    ${return}    execute_traffic    ${Windows_FCoE_servers_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    Fcoe network Traffic failed    console=True
    \    ...    ELSE    Log    Fcoe network Traffic is successful    console=True

4_3_Validate FC DA nameserver information
    [Tags]    Storage    critical
    [Documentation]    verifies the nameserver information after power on Bside ICM


    Log    Verify the uplink wwn and name server information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Uplinks DA ports    ${ICM3_uri}    ${ICM6_uri}

    Log    Verify the servers dowlink connection mp information    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers DA Connections    ${ICM3_uri}    ${ICM6_uri}

4_4_Validate FC FA Login informations
    [Tags]    Storage    critical
    [Documentation]    Verify if the logins on Aside and Bside ports are not affected    console=True


    Log    Verify login count for Aside and Bside ports are not affected    console=True
    Wait Until Keyword Succeeds    5 min    20s    Verify Happy Servers FA Connections    ${ICM3_uri}    ${ICM6_uri}

4_5_Execute traffic for DA and FA connections
    [TAGS]    Storage    Non_BFS    critical
    [Documentation]    Verify traffic for Fc FA and DA server. This test will be skipped for BFS connections

    execute_command_in_tcs    ${kill_paexec}
    Kill_traffic    ${Windows_FA_DA_server_details}

    ${Windows_FA_DA_server_details}    Set Diskspd Command    ${Windows_FA_DA_server_details}    ${diskspd_cmd_fc_60s}

    ${return}    execute_traffic    ${Windows_FA_DA_server_details}
    ${len}    Get Length    ${return}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    ${return[${x}]} != 0    fail    Log    FC network Traffic failed    console=True
    \    ...    ELSE    Log    FC network Traffic is successful    console=True

4_6_FCoE Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for windows servers and passes traffic

    ${win_server_len}    Get Length    ${Windows_FCoE_servers_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FCoE_servers_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_1_FCoE Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FCoE_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FCoE_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_2_FCoE Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FCoE BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FCoE_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FCoE_servers_details}

4_6_3_FA DA Windows BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for windows servers and validates the LUN count and traffic

    ${win_server_len}    Get Length    ${Windows_FA_DA_server_details}
    Run Keyword If    ${win_server_len} != 0    Execute FC FCoE Traffic in Windows    ${kill_paexec}    ${Windows_FA_DA_server_details}    ${BFS_diskspd_cmd}
    ...    ELSE    Log    There are No Windows server    console=True

4_6_4_FA DA Linux BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Linux servers and validates the LUN count and traffic

    ${linux_server_len}    Get Length    ${Linux_FA_DA_servers_details}
    Run Keyword If    ${linux_server_len} != 0    Get_Linux_Lun_Count    ${Linux_FA_DA_servers_details}
    ...    ELSE    Log    There are No Linux server    console=True

4_6_5_FA DA Esxi BFS Verification
    [TAGS]    Storage    BFS    critical
    [Documentation]    Verifies the FA and DA BFS for Esxi servers and validates the LUN count

    ${esxi_server_len}    Get Length    ${Esxi_FA_DA_servers_details}
    Run Keyword If    ${esxi_server_len} != 0    Esxi_fc_fcoe_volume_validation    ${Esxi_FA_DA_servers_details}

4_Get Server IP For Ethernet Servers and passing traffic
    [TAGS]    Ethernet    critical
    [Documentation]    Fetches the IP for the Ethernet servers and starting traffic


    ${Windows_server_details}    ${Linux_servers_details}    ${Esxi_servers_details}    Set Server Details    ${ILO_List_NON_LAG}    ${NON_LAG_server_details}    ${ping_type[1]}   ${ping_windows}    ${ping_linux}    ${ping_esxi}    ${gateway_ping_cmd_windows}    ${gateway_ping_cmd_linux}    ${gateway_ping_cmd_esxi}    ${kill_cmd_ping_windows}    ${kill_cmd_ping_linux}    ${kill_cmd_ping_esxi}
    Set Suite Variable    ${Linux_servers_details_Non_LAG}    ${Linux_servers_details}

    Execute Traffic In Thread    ${Linux_servers_details_Non_LAG}

4_1_Verify Traffic in LAG Servers after B-side ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after B-side ICM power on

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

4_2_Verifying S-Channel common and advanced statistics vaules after B-side ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verifying S-Channel common and advanced statistics vaules after B-side ICM power on


    :FOR     ${x}   IN RANGE   0   3
    \    Wait Until Keyword Succeeds    15 min    60 sec    Verify Port statistics    ${ICM6_uri}    ${downlink_Bside}    ${schannel_counters_Keys}    ${schannel_counters_Keys}    Packet_Interval=250    stats_flag=s_channel    check_flag=increase    subport_no=1

    Wait Until Keyword Succeeds    12 min    60 sec    Validate Sample Values    ${ICM6_uri}    ${downlink_Bside}    ${samples_key_list}    total_samples=12    check_flag=increase    stats_flag=s_channel    subport_no=1

4_3_kill traffic
    [TAGS]    Ethernet    non_critical
    [Documentation]    kill traffic


    #Delete Static ip
    Delete_Static_ip    ${mac_len_same_phy_port[1]}    ${adapter_name_list}    ${delete_static_ip}    ${server_details_same_phy_port}    ${ip[0]}

    Kill_traffic    ${Linux_servers_details_Non_LAG}

Fetch Chloride ICM URI
    [TAGS]    Ethernet    non_critical
    [Documentation]    Fetch Chloride ICM URI


    Log    Fetching ICM URI    console=True
    ${ic_uris}    Create List
    :FOR    ${icm}    IN    @{Interconnect_name_chloride}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name_chloride[0]}'    Set Suite Variable    ${ICM3_chloride_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name_chloride[1]}'   Set Suite Variable    ${ICM6_chloride_uri}    ${uri}
    \    Append To List    ${ic_uris}    ${uri}
    Log     ${ICM6_chloride_uri}    console=True
    Log     ${ICM3_chloride_uri}    console=True
    Set Suite Variable    ${ICM_uris_chloride}    ${ic_uris}

5_Perform Power off Aside chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform ICM power off and verifies the state of chloride ICM


    Patch Interconnect     ${Interconnect_dto_cl[0]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[0]}    Maintenance
    Sleep    60sec

    #Get Alert by Param    param=?filter='The connected port L1 is on an interconnect CN7545084V, interconnect 3 that is powered off.'

    Verify Alerts    ${alertstate_cl_ICM_poweroff}    ${alertType_cl_ICM3_poweroff}    ${alert_msg_cl_ICM_poweroff}    ${alert_msg_cl_ICM_poweroff1}

5_1_Verify ping for MLAG server after A-side chloride ICM power off
    [TAGS]    Ethernet    critical
    [Documentation]    Verify ping for MLAG server after A-side chloride ICM power off

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}     ${percentage_loss[0]}

6_Perform Power on Aside chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform ICM power on and verifies the state of chloride ICM and uplink and profile status


    Patch Interconnect     ${Interconnect_dto_cl[0]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM_uris_chloride[0]}    Configured

6_1_Verify Traffic in LAG Servers after A-side chloride ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after A-side chloride ICM power on


    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

7_Perform Power off Bside chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform ICM power off and verifies the state of chloride ICM


    Patch Interconnect     ${Interconnect_dto_cl[1]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uris_chloride[1]}    Maintenance
    Sleep    60sec

    #Get Alert by Param    ${cl6_poweroff_msg}
    Verify Alerts    ${alertstate_cl_ICM_poweroff}    ${alertType_cl_ICM6_poweroff}    ${alert_msg_cl_ICM_poweroff}    ${alert_msg_cl_ICM_poweroff1}

7_1_Verify ping for MLAG server after B-side chloride ICM power off
    [TAGS]    Ethernet    critical
    [Documentation]    Verify ping for MLAG server after A-side chloride ICM power off


    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}

8_Perform Power on Bside chloride ICM
    [TAGS]    Ethernet    critical
    [Documentation]    Perform ICM power on and verifies the state of chloride ICM and uplink and profile status


    Patch Interconnect     ${Interconnect_dto_cl[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM_uris_chloride[1]}    Configured

8_1_Verify Traffic in LAG Servers after B-side chloride ICM power on
    [TAGS]    Ethernet    critical
    [Documentation]    Verify Traffic in LAG Servers after B-side chloride ICM power on

    ${length}    Get Length    ${ILO_List_LAG_8_con}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Getting Server Ip And Verifying Traffic    ${ILO_List_LAG_8_con[${x}]}    ${server_details_LAG_8_con[${x}]}    ${ping_file}    ${server_details_LAG_8_con[${x}]['OS']}    ${Ping_Lost}    ${percentage_loss[0]}