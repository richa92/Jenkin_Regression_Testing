***Settings***
Documentation    OVF7667_keywords
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             SSHLibrary
Library             String
Library             Telnet
Resource            ../../../../../Resources/api/fusion_api_resource.txt

***Keywords***
Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    Log to Console    \nstdout is ${ilo_details}
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log to Console    \nstdout is ${stdout}
    ${cmd_output}=    Get Regexp Matches    ${stdout}    Ip=10\\.\\d+\\.\\d+\\.\\d+
    Log to Console    \nstdout is ${cmd_output}
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    Log to console    ip is ${ip_lists}
    \    Append To List   ${ip_list_new}    ${ip_lists}
    Log to Console    \n IP's are is ${ip_list_new}

    ${cmd_output1}=    Get Regexp Matches    ${stdout}    Gateway=10\\.\\d+\\.\\d+\\.\\d+
    Log to Console    \nstdout is ${cmd_output1}
    ${len}    Get Length    ${cmd_output1}
    ${gateway_ip_list}    Create List
    :FOR    ${x}    IN RANGE    ${len}
    \    ${gateway_ip}    Remove String    ${cmd_output1[${x}]}    Gateway=
    \    Log to console    ip is ${gateway_ip}
    \    Append To List   ${gateway_ip_list}    ${gateway_ip}
    Log to Console    \n IP's are is ${gateway_ip_list}
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}    ${gateway_ip_list}

Validating no IP
    [Documentation]    Validating no IP
    [Arguments]         ${ilo_details}    ${IP_Series}
    Log to Console    \nstdout is ${ilo_details}
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log    \nstdout is ${stdout}    console=True
    ${out}    Split To Lines    ${stdout}
    Log    ${out}    console=True
    ${l}    Get Length    ${out}
    Log    ${l}    console=True
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${str}    Get Lines Containing String    ${out[${x}]}    Net:
    \    Should Not Match Regexp    ${str}    ${IP_Series}
    #Should Contain    ${stdout}    Disconnected

Clean OV
    [Documentation]    Cleaning up the appliance
    ${Login_response}    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${appliance_credentials}
    Run keyword unless    ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login Appliance"

    Log    \n\n Cleaning up the appliance     console=True
    Power off ALL servers    PressAndHold
    Remove All Server Profiles
    Remove All LEs
    Remove All Enclosure Groups
    Remove All LIGs
    Remove All FCoE Networks
    Remove All Ethernet Networks
    Remove All FC Networks
    Remove All LS
    Remove All LSGs

Get IC Port
    [Documentation]    Returns the port info of the named port of specified interconnect uri
    [Arguments]     ${uri}    ${portName}

    ${return} =    Create List
    ${resp} =    fusion api get interconnect ports    uri=${uri}
    ${ports} =    Get From Dictionary    ${resp}    members
    :FOR    ${port}    IN    @{ports}
    \    ${return} =    Run Keyword If    '${port['portName']}' == '${portName}'    set variable    ${port}
    \    Exit for loop if    '${port['portName']}' == '${portName}'
    [Return]    ${return}


Verify Port
    [Documentation]    Verify the named port of specified interconnect uri has the optional expected attribute values
    [Arguments]    ${uri}    ${portName}    ${status}=${None}    ${portStatus}=${None}
    ...            ${portStatusReason}=${None}    ${opSpeed}=${None}    ${enabled}=${None}
    ...            ${loginsCount}=${None}    ${connectedTo}=${None}

    ${resp} =    Get IC Port    ${uri}    ${portName}
    Should Not Be Empty    ${resp}

    # for optional kw arguments. If not specified, do not check
    Run Keyword IF    '${status}' != '${None}'
    ...               Should be Equal As Strings    ${resp['status']}    ${status}
    Run Keyword IF    '${portStatus}' != '${None}'
    ...               Should be Equal As Strings    ${resp['portStatus']}    ${portStatus}
    Run Keyword IF    '${portStatusReason}' != '${None}'
    ...               Should be Equal As Strings    ${resp['portStatusReason']}    ${portStatusReason}
    Run Keyword IF    '${opSpeed}' != '${None}'
    ...               Should be Equal As Strings    ${resp['operationalSpeed']}    ${opSpeed}
    Run Keyword IF    '${enabled}' != '${None}'
    ...               Should be Equal As Strings    ${resp['enabled']}    ${enabled}
    Run Keyword IF    '${loginsCount}' != '${None}'
    ...               should be equal as Integers    ${resp['fcPortProperties']['loginsCount']}    ${loginsCount}
    Run Keyword IF    '${connectedTo}' != '${None}'
    ...               Should be Equal As Strings    ${resp['fcPortProperties']['principleInterconnectName']}
    ...                                             ${connectedTo}

Verify switch per id and role
    [Documentation]    Validating switch per id and role
    [Arguments]    ${SWITCH_IP}    ${mem_id}    ${roles}
    ${resp}    Fusion Api Get Ls
    ${stacking_info}    Get From Dictionary    ${resp['members'][0]}    logicalSwitchDomainInfo
    ${peerswitch}     Get From Dictionary    ${stacking_info}    perSwitchDomain
    Log    \n\n${peerswitch}    console=True
    ${l}     Get Length    ${peerswitch}
    :FOR    ${x}    IN RANGE    0    ${l}
    \     Run Keyword If     '${peerswitch[${x}]['ipAddress']}' != '${SWITCH_IP}'     CONTINUE FOR LOOP     ELSE
    \     ...    Run keyword If     '${peerswitch[${x}]['memberId']}' == '${mem_id}'     Log    \n Verifying member id    console=True   ELSE    FAIL
    \    Run Keyword If    '${peerswitch[${x}]['vpcRole']}' == '${roles}'    Log    \nVerifying roles of switch    console=True    ELSE    FAIL
    \    Exit For Loop If    '${peerswitch[${x}]['ipAddress']}' == '${SWITCH_IP}'

Validating stacking member id of switch
    [Documentation]    Validating stacking member id of switch
    [Arguments]    ${role_name}
    Set Log Level    TRACE

    ${resp}    Fusion Api Get Ls
    ${switch_map}    Get From Dictionary    ${resp['members'][0]}    switchMap
    ${l}     Get Length    ${switch_map['switchMapEntries']}
    :FOR     ${x}    IN RANGE    0    ${l}
    \    ${map}    Get From Dictionary    ${switch_map['switchMapEntries'][${x}]['location']}      locationEntries
    \    Log    \n\n${map}    console=True
    \    Validating stacking name    ${map}    ${role_name}

Add Logical Switch
    [Documentation]    Adds a Logical Switch to an appliance from a variable which contains a list of dicts with the entire payload
    ...              scope process example:
    ...                 'initialScopeUris': ['Scope:Test', 'Scope:Production']
    [Arguments]        ${ls}
    Log    Adding LOGICAL SWITCH    console=true
    ${lsguri} =     Get From Dictionary       ${ls['logicalSwitch']}    logicalSwitchGroupUri
    ${lsguri} =     Common URI Lookup by name   ${lsguri}
    Set to dictionary   ${ls['logicalSwitch']}  logicalSwitchGroupUri   ${lsguri}

    # -Initial Scope process.
    ${initialScopeUris}=  Pop From Dictionary  ${ls}  initialScopeUris  default=${None}
    ${scopeUris}=       Run Keyword If    ${initialScopeUris} != ${None}
    ...                 Run Keyword for List  ${initialScopeUris}  Common URI lookup by name
    Run Keyword If      ${initialScopeUris} != ${None}
    ...                 Set To Dictionary    ${ls}  initialScopeUris  ${scopeUris}

    ${resp} =    Fusion Api Create LS      ${ls}
    ${task} =    Wait For Task    ${resp}     3min    5s


Validating stacking name
    [Documentation]     Validating stacking name
    [Arguments]    ${map}    ${role_name}
    ${l}     Get Length    ${map}
    Log    \n\n${l}    console=True
    :FOR     ${x}    IN RANGE    0    ${l}
    \     ${value}   Run Keyword If     '${map[${x}]['type']}' == '${role_name}'     Run Keyword                             Get From Dictionary         ${map[${x}]}    value     ELSE    CONTINUE FOR LOOP
    \    Should Not Contain    ${value}      0

Verify Domain Id of switch
    [Documentation]    Verify Domain Id of switch
    Set Log Level    TRACE
    [Arguments]    ${domainid}
    ${resp}    Fusion Api Get Ls
    Log    \n\n${resp}    console=True
    ${stacking_info}    Get From Dictionary    ${resp['members'][0]}    logicalSwitchDomainInfo
    Log    \nValidating Domain Id     console=True
    ${domainId}     Get From Dictionary    ${stacking_info}    domainId
    Should Be Equal    ${domainId}    ${domainid}

Verify Stacking state of LS
    [Documentation]     Validating stacking state of LS
    Set Log Level    TRACE

    ${resp}    Fusion Api Get Ls
    Log    \n\n${resp}    console=True
    ${l}    Get Length      ${resp['members'][0]['logicalSwitchDomainInfo']['perSwitchDomain']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${stacking_state}    Get From Dictionary    ${resp['members'][0]['logicalSwitchDomainInfo']['perSwitchDomain'][${x}]}    state
    \    Log    \n${stacking_state}    console=True
    \    Should Be Equal    ${stacking_state}    Configured

Validate Neighbor Information
    [Documentation]    Validate Neighbor Information
    [Arguments]     ${switchip}     ${switch_PORT}   ${uplinkport}
    ${res}    Fusion Api Get Switch
    ${l}    Get Length    ${res['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Run Keyword If      '${res['members'][${x}]['name']}' != '${switchip}'    CONTINUE FOR LOOP    ELSE    Validate Port Name    ${res['members'][${x}]}    ${switch_PORT}   ${uplinkport}

Validate Port Name
    [Documentation]    Validate port name
    [Arguments]    ${res}    ${PORT}    ${uplinkport}
    Set Log Level     TRACE

    ${port_len}    Get Length   ${res['ports']}
    :FOR    ${y}    IN RANGE    0    ${port_len}
    \    Run Keyword If    '${res['ports'][${y}]['name']}' != '${PORT}'    CONTINUE FOR LOOP     ELSE     Run Keyword   Verify Neighbor    ${res['ports'][${y}]}      ${PORT}    ${uplinkport}
    \    Exit For Loop If    '${res['ports'][${y}]['name']}' == '${PORT}'

Verify Neighbor
    [Documentation]     verify Neighbor
    [Arguments]    ${res}      ${PORT}    ${uplinkport}
    Set Log Level    TRACE

    ${keys_neighbor}    Get From Dictionary    ${res}     neighbor
    Log    \n\n${keys_neighbor}    console=True
    Should Not Contain    ${keys_neighbor}    None
    ${up_port}    Get From Dictionary    ${res['neighbor']}     remotePortId
    Should Be Equal    ${up_port}    ${uplinkport}

Edit LS
    [Documentation]    Editing LS from Monitored mode to Managed Mode
    [Arguments]    ${LSG}    ${LS1_edit}
    Set Log Level    TRACE

    ${resp}    Fusion Api Get Ls
    Log    \n\n${resp['members'][0]['uri']}    console=True
    ${ls_uri}    Get From Dictionary       ${resp['members'][0]}    uri
    ${res}    Fusion Api Get Lsg     param=?filter="'name'=='${LSG}'"
    ${lsg_uri}    Get From Dictionary       ${res['members'][0]}    uri
    Set To Dictionary     ${LS1_edit['logicalSwitch']}    logicalSwitchGroupUri     ${lsg_uri}
    Set To Dictionary     ${LS1_edit['logicalSwitch']}    uri     ${ls_uri}
    ${len}    Get Length    ${LS1_edit['logicalSwitch']['switchCredentialConfiguration']}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}    Get switch uri    ${LS1_edit['logicalSwitch']['switchCredentialConfiguration'][${x}]['logicalSwitchManagementHost']}
    \    Set To Dictionary    ${LS1_edit['logicalSwitch']['switchCredentialConfiguration'][${x}]}   switchUri    ${switch_uri}
    \    Append To List    ${LS1_edit['logicalSwitch']['switchUris']}    ${switch_uri}
    ${resp}    Fusion Api Update LS    body=${LS1_edit}    uri=${ls_uri}
    Log    \n\n${resp}    console=True
    [Return]    ${resp}

Get switch uri
    [Documentation]    Get switch uri
    [Arguments]      ${SWITCH_IP}
    Set Log Level    TRACE

    ${res}    Fusion Api Get Switch
    ${len}    Get Length    ${res['members']}
    Log    ${len}    console=True
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}     Run Keyword If      '${res['members'][${x}]['name']}' != '${SWITCH_IP}'     CONTINUE FOR LOOP       ELSE       Get From Dictionary    ${res['members'][${x}]}    uri
    [Return]     ${switch_uri}

Fetch PortID value
    [Documentation]    Fetch PortID value
    [Arguments]    ${res}    ${port_name}
    Set Log Level    TRACE

    ${ports_info}    Get Variable Value    ${res['ports']}
    ${l}    Get Length      ${ports_info}
    :FOR    ${y}    IN RANGE    0    ${l}
    \    ${portid}    Run Keyword If    '${res['ports'][${y}]['portName']}' != '${port_name}'    CONTINUE FOR LOOP    ELSE    Run Keyword    Get From Dictionary    ${res['ports'][${y}]}     portId
    Log    ${portid}    console=True
    [Return]    ${portid}

Disabling or Enabling switch port
    [Documentation]    Disabling or Enabling switch port
    Set Log Level    TRACE
    [Arguments]    ${SWITCH1}    ${sw1_uri}    ${port_no}    ${switch_body}     ${enabled_status}

    ${len}     Get Length    ${port_no}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${portid}    Match switch name     ${port_no[${x}]}     ${SWITCH1}
    \    Log    \n\nDisabling ARISTA switch1 port    console=True
    \    Set To Dictionary    ${switch_body[${x}]}    portId     ${portid}
    \    Set To Dictionary    ${switch_body[${x}]}    enabled    ${enabled_status}
    ${resp}     Fusion Api Edit Switch     body=${switch_body}     uri=${sw1_uri}
    Wait For Task2    ${resp}    20min    1min

Match switch name
    [Documentation]     switch
    [Arguments]     ${port_no}    ${SWITCH1}
    ${res}    Fusion Api Get Switch
    ${l}    Get Length      ${res['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${portid}     Run Keyword If      '${res['members'][${x}]['name']}' != '${SWITCH1}'     CONTINUE FOR LOOP       ELSE      Run keyword     Fetch PortID value    ${res['members'][${x}]}    ${port_no}
    [Return]    ${portid}

Verify switch port status
    [Documentation]    Verify switch port status
    [Arguments]    ${switchip}    ${port_name}    ${status}=None
    Set Log Level    TRACE
    ${res}    Fusion Api Get Switch
    ${l}    Get Length      ${res['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${port_mem}     Run Keyword If      '${res['members'][${x}]['name']}' != '${switchip}'     CONTINUE FOR LOOP       ELSE      Run keyword    Get Variable Value    ${res['members'][${x}]['ports']}
    \    EXIT FOR LOOP

    ${len}     Get Length    ${port_mem}
    :FOR    ${y}    IN RANGE    0    ${len}
    \    ${port_status}    Run Keyword If    '${port_mem[${y}]['portName']}' != '${port_name}'    CONTINUE FOR LOOP    ELSE    Run Keyword    Get From Dictionary    ${port_mem[${y}]}     portStatus
    \    Should Be Equal As Strings    ${port_status}    ${status}

Ping IP Continuously
    [Documentation]    Ping IP Continuously
    Set Log Level    TRACE
    [Arguments]     ${server_ip}     ${server_username}    ${server_password}    ${IP}    ${ping_cmd}

    ${len}    Get Length    ${IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${ping}    Replace String Using Regexp    ${ping_cmd[${x}]}    server_ip    ${IP[${x}]}
    \    Log    \n\n${ping}    console=True
    \    ${file}    execute_traffic    ${server_ip}    ${server_username}     ${server_password}     ${ping}
    \    Log    \n\n${file}    console=True
    Sleep    3min

Kill Traffic
    [Documentation]    Kill Traffic
    Set Log Level    TRACE
    [Arguments]     ${server_ip}     ${server_username}    ${server_password}    ${kill_cmd}

    execute_traffic    ${server_ip}    ${server_username}     ${server_password}     ${kill_cmd}
    Sleep    1min

Verifying packet loss
    [Documentation]    Verifying packet loss
    [Arguments]    ${filename_list}
    ${l}    Get Length    ${filename_list}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Log    \n\nVerifying packet loss     console=True
    \    ${read}    OperatingSystem.GetFile    ${filename_list[${x}]}
    \    Log    \n${read}    console=True
    \    ${lines}    Get Lines Containing String    ${read}    Request timed out
    \    Log    \n${lines}    console=True
    \    ${split}     Split String    ${lines}    \n
    \    Log    \n${split}    console=True
    \    ${len}    Get Length    ${split}
    \    Log    \n\n${len}     console=True
    \    Run Keyword If    '${len}' < '5'   Log    \nNo packet Loss is observed    ELSE    FAIL    Log    \nPacket loss is observed    console=True

Get Interconnect StackingDomainRole
    [Documentation]    Fetches PLUGGABLE MODULE INFORMATION
    [Arguments]     ${ic_name}    ${expected_role}
    ${resp} =   Get Interconnect    ${ic_name}
    ${Role}    Get From Dictionary    ${resp}    stackingDomainRole
    Should Be Equal As Strings    ${Role}    ${expected_role}
    [Return]    ${Role}

Verify Packet Loss for all IP
    [Documentation]    Verify Packet Loss for all IP
    Set Log Level    TRACE
    [Arguments]     ${filename_list}

    ${l}    Get Length    ${filename_list}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Log    \n\nVerifying packet loss     console=True
    \    ${read}    OperatingSystem.GetFile    ${filename_list[${x}]}
    \    Log    \n${read}    console=True
    \    ${line}    Get Lines Containing String    ${filename_list[${x}]}     Lost
    \    Log    \n${line}    console=True
    \    ${percent}     Should Match Regexp      ${line}      Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log    \n${percent}    console=True
    \    Run Keyword If    ${percent} == '0%'    FAIL    ELSE    Log    \n\n No packet loss is observed    console=True

Ping IP and Verify packet loss
    [Documentation]    Ping IP and Verify packet loss
    Set Log Level    TRACE
    [Arguments]     ${server_ip}     ${server_username}    ${server_password}    ${IP}    ${ping_cmd}    ${name}

    ${len}    Get Length    ${IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${IP[${x}]}
    \    Log    \n\n${ping}    console=True
    \    ${file}    execute_traffic    ${server_ip}    ${server_username}     ${server_password}     ${ping}
    \    Log    \n\n${file}    console=True
    \    Sleep    1min
    \    Log    \n\nVerifying packet loss     console=True
    \    ${read}    OperatingSystem.GetFile    ${name}
    \    Log    \n${read}    console=True
    \    ${line}    Get Lines Containing String    ${read}     Lost
    \    Log    \n${line}    console=True
    \    ${percent}     Should Match Regexp      ${line}      Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log    \n${percent}    console=True
    \    Run Keyword If    ${percent} == '0%'    FAIL    ELSE    Log    \n\n No packet loss is observed    console=True






