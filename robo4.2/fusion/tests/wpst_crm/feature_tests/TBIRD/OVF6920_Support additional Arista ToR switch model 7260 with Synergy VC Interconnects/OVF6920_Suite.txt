***Settings***
Documentation   OVF6920
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           OVF6920_keywords.txt
Library         Telnet
Library         backping.py
Library             Dialogs
Variables       datavariables_potash.py
Variables       datavariables_nitro.py
Suite Setup          Clean OV

***Test cases***
1 Login to Appliance
    [Documentation]    Login to Appliance
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${appliance_credentials}

2 Creating Networks,LIG,EG,LE
    [Documentation]    Creating Networks,LIG,EG,LE
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n Creating setup for single potash with one switch     console=True
    Log    \n\n Creating Ethernet network    console=True
    Add Ethernet Networks from variable    ${ethernet_networks}

    Log   \n\n Creating LIG     console=True
    Add LIG from variable    ${lig}

    Log     \n\nCreating EG    console=True
    ${resp} =    Add Enclosure Group from variable    ${enc_group['EG']}
    Run Keyword If  ${resp['status_code']} != 201    fail    msg=\nUnable to create EG
    ...         ELSE    Log    \nsuccessfully created EG    console=True

    Log     \n\n Creating LE     console=True
    Add Logical Enclosure from variable    ${LE['LE']}

3 Verifying Interconnect state and port status after creating LE
    [Documentation]    Verifying Interconnect state and port status after creating LE
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    2 min    60s    Verify Interconnect    ${x}    state=Configured
    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

3_ Verifying Interconnect state and port status after creating LE
    [Documentation]    Verifying Interconnect state and port status after creating LE
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    2 min    60s    Verify Interconnect    ${x}    state=Configured
    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

4 Creating LSG
    [Documentation]    creating LSG
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\nCreating LSG    console=True
    Add Logical Switch Group from variable    ${LSG1}

5 Creating LS in Monitored mode
    [Documentation]    Creating LS in Monitored mode
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\nCreating LS in Monitored mode     console=True
    Add Logical Switch    ${LS1}

6 Edit LS to change from Monitored mode to Managed Mode
    [Documentation]    Editing LS to change from Monitored mode to Managed Mode
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    #Log    \n\nEditing LS to Managed mode    console=True
    ${resp}    Edit LS    ${LSG}    ${LS1_edit}
    Wait For Task2    ${resp}    20min    1min

7 Verifying Interconnect state and port status after creating LS
    [Documentation]    Verifying Interconnect state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    2 min    60s    Verify Interconnect    ${x}    state=Configured
    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

7_ Verifying Interconnect state and port status after creating LS
    [Documentation]    Verifying Interconnect state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    2 min    60s    Verify Interconnect    ${x}    state=Configured
    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

8 Validating stacking state of ls after creating LS
    [Documentation]     Validating stacking state of ls after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS     console=True
    Wait Until Keyword Succeeds    3 min    20s    Verify Stacking state of LS

9 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\Validating domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

10 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

11 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

12 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    20s    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC1[${x}]}    ${UP_Ports_TC1[${x}]}


13 Creating server profile
    [Documentation]    creating server profile
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Creating server profile    console=True
    ${resp}    Add Server Profiles from variable   ${server_profiles}

    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${server_profiles[${x}]['serverHardwareUri']}
    Sleep    10min

14 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP Continuously    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cont_server1}

    Log    \n\n server1 toGatewayping    console=True
    Ping IP Continuously    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${gate_ip1}    ${ping_gateway_cont_server1}

15 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    Log    \n\nserver2toserver1 ping     console=True
    Ping IP Continuously    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cont_server2}

    Log    \n\nserver2toGatewayping    console=True

    Ping IP Continuously    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gate_ip2}    ${ping_gateway_cont_server2}

16 Edit LS to change from Managedmode to MonitoredMode
    [Documentation]    Edit LS to change from  Managed mode to Monitored Mode
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    #Log    \n\nEditing LSfromManagedmode toMonitoredmode    console=True
    ${resp}    Edit LS    ${LSG}    ${LS2_edit}
    Wait For Task2    ${resp}    20min    1min

17 Stop Traffic and Validate Packet Loss
    [Documentation]    Kill Traffic and Validate Packet Loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Kill Traffic   ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${kill_cmd}
    Kill Traffic   ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${kill_cmd}

    Log    \n\nVerifying packet loss     console=True
    Verifying packet loss    ${text_names}

18 Edit LS to change from Monitored mode to Managed Mode
    [Documentation]    Editing LS to change from Monitored mode to Managed Mode
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nEditing LS to Managed mode    console=True
    ${resp}    Edit LS    ${LSG}    ${LS1_edit}
    Wait For Task2    ${resp}    20min    1min


###### Power on/off Interconnect in single homed configuration ##########
2_1 Powering off the potash modules in single homed configuration
    [Documentation]    Powering off the potash modules in single homed configuration
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace    path=/powerState    value=Off    timeout=60   interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM5_uri}    Maintenance
    Sleep    60sec

2_2 Powering on the master ICM
    [Documentation]    Powering on the master ICM
    [Tags]    Nitro
    [Tags]    Potash

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master

2_3 Verifying Interconnect state and Port status after poweron
    [Documentation]    Verifying IC state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

2_4 Verifying Interconnect state and Port status after poweron
    [Documentation]    Verifying IC state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

2_5 Verifying switch port status
    [Documentation]    Verifying switch port status
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    :FOR    ${icm}    IN       @{Switch_ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${SWITCH1}    ${icm}    status=Linked

2_6 Validating stacking state of ls after creating LS
    [Documentation]     Validating stacking state of ls after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\nValidating stacking state of LS     console=True
    Wait Until Keyword Succeeds    3 min    20s    Verify Stacking state of LS

2_7 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\Validating domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

2_8 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

2_9 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

2_10 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    20s    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC1[${x}]}    ${UP_Ports_TC1[${x}]}

2_11 Powering on/off the subordinate icm
    [Documentation]    Powering on/off the subordinate icm
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=Off   timeout=60   interval=10
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM2_uri}    Maintenance

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=On    timeout=60   interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate

####Test Case-3 EfuseOn/Off interconnect modules with single homed configuration ######

3_1 Efuse remove the interconnect modules in single homed configuration
    [Documentation]    Efuse remove the interconnect modules in single homed configuration
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}
    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOn    ${Bay_Number[1]}
    Log    \n\n Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Absent

3_2 Efuse insert the interconnect modules in single homed configuration
    [Documentation]    Efuse insert the interconnect modules in single homed configuration
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOff    ${Bay_Number[1]}
    Log    \n\n Verifying if module is present    console=True
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master

3_3 Verifying Interconnect state and Port status after poweron
    [Documentation]    Verifying IC state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

3_4 Verifying Interconnect state and Port status after poweron
    [Documentation]    Verifying IC state and port status after creating LS
    Set Log Level    TRACE
    [Tags]    Potash
    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

3_5 Verifying switch port status
    [Documentation]    Verifying switch port status
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \nVerifying switch port status    console=True
    :FOR    ${icm}    IN       @{Switch_ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${SWITCH1}    ${icm}    status=Linked

3_6 Validating stacking state of ls after creating LS
    [Documentation]     Validating stacking state of ls after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS     console=True
    Wait Until Keyword Succeeds    3 min    20s    Verify Stacking state of LS

3_7 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\Validating domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

3_8 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

3_9 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

3_10 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    20s    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC1[${x}]}    ${UP_Ports_TC1[${x}]}

3_11 Powering on/off the subordinate icm
    [Documentation]    Powering on/off the subordinate icm
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=Off   timeout=60   interval=10
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM2_uri}    Maintenance

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=On    timeout=60   interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate

######### Test case 4  All ULS ports are on a single Potash/Nitro with at least 1 port connected to each Arista ToR switch in a 2 switch configuration (Dual-homed from single Potash/Nitro) ############

4_1 Editing uplinkset to change uplinkports from single Potash connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from single potash connected to two Arista switches
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[0]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

4_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

4_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    [Tags]    Nitro
    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

4_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nverifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

4_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

4_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

4_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC2[${x}]}    ${UP_Ports_TC2_SW1[${x}]}

    #Log    \Validating from singlepotash to arista2 as neighbor    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC2[${x}]}    ${UP_Ports_TC2_SW2[${x}]}

4_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1[0]}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}

    Log    \n\n server1 toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}    ${gate_ip1}     ${ping_gateway_server1}    ${file2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cmd_server1}    ${file1}

4_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2[0]}

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gate_ip2}    ${ping_gateway_server2}    ${file3}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cmd_server2}    ${file4}


###### Test case 5 ULS ports span both Potash/Nitro and all ports are connected to a single Arista ToR switch in a 2 switch configuration (Single-homed from both Potash/Nitro)  ##################

5_1 Editing uplinkset to change uplinkports from both Nitro or potash connected to single Arista switches
    [Documentation]    Editing uplinkset to change uplinkports from both nitro connected to single Arista switches
    Set Log Level    TRACE
    [Tags]    Nitro
    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[1]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

5_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \     Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured
    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{Uplink_bay2}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

5_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

5_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nverifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

5_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

5_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

5_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC3}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC3[${x}]}    ${UP_Ports_TC3[${x}]}

5_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1[0]}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}    ${gate_ip1}     ${ping_gateway_server1}    ${file2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cmd_server1}    ${file1}

5_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2[0]}

    Log    \n\nserver2toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gate_ip2}    ${ping_gateway_server2}    ${file3}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cmd_server2}    ${file4}


######## Test case-6 ULS ports span both Potash with at least 2 ports from each Potash connected a different Arista ToR switch in a 2 switch configuration (Dual-homed from each Potash/Nitro) ##########

6_1 Editing uplinkset to change uplinkports from both potash or nitro connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from both potash connected to two Arista switches
    Set Log Level    TRACE
    [Tags]    Nitro

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[2]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

6_1_ Editing uplinkset to change uplinkports from both potash connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from both potash connected to two Arista switches
    Set Log Level    TRACE
    [Tags]    Potash

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[0]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

6_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

6_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

6_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nVerifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

6_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

6_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

6_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}

6_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1[0]}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}    ${gate_ip1}     ${ping_gateway_server1}    ${file2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cmd_server1}    ${file1}

6_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2[0]}
    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gate_ip2}    ${ping_gateway_server2}    ${file3}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cmd_server2}    ${file4}


###### Power on/off potash/nitro Interconnect in dual homed configuration ##########
7_1 Powering off the potash modules in dual homed configuration
    [Documentation]    Powering off the potash/nitro modules in dual homed configuration
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace    path=/powerState    value=Off    timeout=60   interval=10
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM5_uri}    Maintenance

7_2 Powering on the master ICM
    [Documentation]    Powering on the master ICM
    [Tags]    Nitro
    [Tags]    Potash

    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10

    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master

7_3 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \     Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked


7_4 Verifying switch port status
    [Documentation]    Verifying switch port status
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    :FOR    ${icm}    IN       @{Switch1_ports_TC4}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify switch port status    ${SWITCH1}    ${icm}    status=Linked

    :FOR    ${icm}    IN       @{Switch2_ports_TC4}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify switch port status    ${SWITCH2}    ${icm}    status=Linked


7_5 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

7_6 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nVerifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

7_7 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

7_8 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

7_9 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash/nitro connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}

7_10 Powering on/off the subordinate icm
    [Documentation]    Powering on/off the subordinate icm
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=Off   timeout=60   interval=10
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM2_uri}    Maintenance

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace    path=/powerState    value=On    timeout=60   interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate

####Test Case-8 EfuseOn/Off interconnect modules with dual homed configuration ######

8_1 Efuse remove the interconnect modules in dual homed configuration
    [Documentation]    Efuse remove the interconnect modules in dual homed configuration
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}
    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOn    ${Bay_Number[1]}
    Log    \n\n Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM5_uri}    Absent

8_2 Efuse insert the interconnect modules in dual homed configuration
    [Documentation]    Efuse insert the interconnect modules in dual homed configuration
    [Tags]    Nitro
    [Tags]    Potash

    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOff    ${Bay_Number[1]}
    Log    \n\n Verifying if module is present    console=True
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master

8_3 Verifying Interconnect state and Port status after efuse
    [Documentation]    Verifying IC state and port status after efuse
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \     Wait Until Keyword Succeeds    10 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after efuse insert    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

8_4 Verifying switch port status after efuse
    [Documentation]    Verifying switch port status after efuse
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    :FOR    ${icm}    IN       @{Switch1_ports_TC4}
    \    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${SWITCH1}    ${icm}    status=Linked

    :FOR    ${icm}    IN       @{Switch2_ports_TC4}
    \    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${SWITCH2}    ${icm}    status=Linked

8_5 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

8_6 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nVerifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

8_7 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

8_8 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

8_9 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash/nitro connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}

8_10 Efuse remove/insert the subordinate interconnect modules
    [Documentation]    Efuse remove/insert the subordinate potash modules
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse ICM    EFuseOn    ${Bay_Number[0]}
    Log    \n\n Verifying if module is Absent    console=True
    Wait Until Keyword Succeeds    10 min    20s      IC reached state    ${ICM2_uri}    Absent

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse ICM    EFuseOff    ${Bay_Number[0]}
    Log    \n\n Verifying if module is present    console=True
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM2_uri}    Configured
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM5_uri}    Configured

    Wait Until Keyword Succeeds     15 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Wait Until Keyword Succeeds     15 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate

############ Test case 9 - Disable/Enable ARISTA1 switch port1 and verify traffic flow #############
9_1 Editing uplinkset to change uplinkports from both potash/Nitro connected to single Arista switches
    [Documentation]    Editing uplinkset to change uplinkports from both potash/Nitro connected to single Arista switches
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[1]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

9_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{Uplink_bay2}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

9_2_ Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked


9_4 Editing switch port to disable
    [Documentation]    Editing switch port to disable
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    ${switchuri_list}    Create List
    Log    \n\nFetching Switch uri      console=True
    ${len}    Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}     Get switch uri   ${SWITCH_IP[${x}]}
    \    Append To List     ${switchuri_list}     ${switch_uri}
    Set Global variable    ${switchuri_list}

    Log    \n\nFetching uri of ARISTA1 from list     console=True
    ${sw1_uri}     Catenate    ${switchuri_list[0]}/update-ports
    Log    \n\n uri of switch1${sw1_uri}    console=True

    Disabling or Enabling switch port    ${SWITCH1}    ${sw1_uri}    ${port_no}    ${switch_body}     False

    Log    \n\nVerifying ARISTA1 switch port is disabled     console=True
    ${l}    Get Length    ${port_no}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    30 min    60s    Verify switch port status    ${SWITCH1}    ${port_no[${x}]}    status=Unlinked

9_5 Verifying uplink port is disabled
    [Documentation]    Verifying uplink port is disabled
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{Uplink_bay2}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=Critical     portStatus=Unlinked

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=Critical     portStatus=Unlinked

9_5_ Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    25 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=Critical    portStatus=Unlinked

9_6 Verifying uplinkset status after disabling switch port
    [Documentation]    verifying uplinkset status after disabling switch port
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    ${resp}   Fusion Api Get Uplink Set    param=?filter="'name'=='${US_name}'"
    Log    \n${resp}    console=True
    Log    ${resp['members'][0]['status']}    console=True
    ${us_status}     Get From Dictionary    ${resp['members'][0]}    status
    Should Be Equal    ${us_status}    Critical

9_7 Validating no IP in servers after disabling switch port
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss after disabling switch port
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Validating no IP    ${ilo_details_enc1_bay1}    ${IP_series}
    Validating no IP    ${ilo_details_enc2_bay1}    ${IP_series}

9_8 Editing switch port to enable
    [Documentation]    Editing switch port to enable
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    ${switchuri_list}    Create List
    Log    \n\nFetching Switch uri      console=True
    ${len}    Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}     Get switch uri   ${SWITCH_IP[${x}]}
    \    Append To List     ${switchuri_list}     ${switch_uri}
    Set Global variable    ${switchuri_list}

    Log    \n\nFetching uri of ARISTA1 from list     console=True
    ${sw1_uri}     Catenate    ${switchuri_list[0]}/update-ports
    Log    \n\n uri of switch1${sw1_uri}    console=True

    Disabling or Enabling switch port    ${SWITCH1}    ${sw1_uri}    ${port_no}    ${switch_body}     True

    ${l}    Get Length    ${port_no}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    25 min    60s    Verify switch port status    ${SWITCH1}    ${port_no[${x}]}    status=Linked

9_10 Verifying uplink port is enabled
    [Documentation]    Verifying uplink port is enabled
    Set Log Level    TRACE
    [Tags]    Nitro

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{Uplink_bay2}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

9_10_Verifying Interconnect state and Port status after enabling swtchport
    [Documentation]    Verifying IC state and port status after enabling swtchport
    Set Log Level    TRACE
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

9_11 Verifying uplinkset status after enabling switch port
    [Documentation]    verifying uplinkset status after enabling switch port
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    ${resp}    Fusion Api Get Uplink Set    param=?filter="'name'=='${US_name}'"
    Log    \n${resp}    console=True
    Log    ${resp['members'][0]['status']}    console=True
    ${us_status}     Get From Dictionary    ${resp['members'][0]}    status
    Should Be Equal    ${us_status}    OK

9_12 Validating Stacking state of LS
    [Documentation]    Validating Stacking state of LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

9_13 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\n verifying domain id of switch    console=True
    Verify Domain Id of switch    ${Domain_ID}

9_14 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

9_15 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

9_16 Validating uplinkports from potash/Nitro connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC3}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC3[${x}]}    ${UP_Ports_TC3[${x}]}

9_15 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1[0]}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}    ${gate_ip1}     ${ping_gateway_server1}    ${file2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cmd_server1}    ${file1}

9_16 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2[0]}

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gate_ip2}    ${ping_gateway_server2}    ${file3}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cmd_server2}    ${file4}

########Test case-10 Create LIG-A,B Side with both potash connected to 2 Arista and verifying server to server ping #########

10 Cleaning up the appliance
    [Documentation]     Cleanup OV
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash
    Log    \n\n Cleaning up the appliance     console=True
    Clean OV

10_1 Creating LIG with A Side & B Side,EG,LE
    [Documentation]    Creating LIG with A Side & B Side,EG,LE
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Creating Ethernet network    console=True
    Add Ethernet Networks from variable    ${ethernet_networks}
    Log   \n\n Creating LIG-A    console=True
    Log    ${ligA}    console=True
    Add LIG from variable    ${ligA}
    Log   \n\n Creating LIG-B    console=True
    Add LIG from variable     ${ligB}

    Log     \n\nCreating EG    console=True
    ${resp} =    Add Enclosure Group from variable    ${enc_grp_AB['EG_AB']}
    Run Keyword If  ${resp['status_code']} != 201    fail    msg=\nUnable to create EG
    ...         ELSE    log    \nsuccessfully created EG

    Log     \n\n Creating LE     console=True
    Add Logical Enclosure from variable    ${LE_AB['LE_AB']}

10_2 Verifying Interconnect state and Port status after creating LE
    [Documentation]    Verifying IC state and port status status after creating LE
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    Verifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

10_3 Creating LSG
    [Documentation]    creating LSG
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nCreating LSG    console=True
    Add Logical Switch Group from variable    ${LSG1}

10_4 Creating LS in Managed mode
    [Documentation]    creating LS in Managed mode
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nCreating LS     console=True
    Add Logical Switch    ${LS3}

10_5 Verifying Interconnect state and Port status after creating LS
    [Documentation]    Verifying IC state and port status status after creating LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked

10_6 Verifying two LI are created
    [Documentation]    Verifying two LI are created
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating two LI are created    console=True
    ${resp}    Fusion Api Get Li
    ${LI_name}    Create List
    Log    \n\n${resp}    console=True
    Log    \n\n${resp['members'][0]['name']}    console=True
    Log    \n\n${resp['members'][1]['name']}    console=True
    :FOR    ${x}    IN RANGE     ${No_of_LI}
    \    ${name}  Get From Dictionary    ${resp['members'][${x}]}    name
    \    Append To List    ${LI_name}    ${name}
    ${l}    Get Length    ${LI_name}
    Log    \n\n${l}     console=True
    Run Keyword If     '${l}' != '${No_of_LI}'    Fail    ELSE    Log    \nTwo LI's are created    console=True

10_7 Validating Stacking state of LS
    [Documentation]    Validating Stacking state of LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    3 min    20s     Verify Stacking state of LS

10_8 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n verifying domain id of switch    console=True
    Verify Domain Id of switch     ${Domain_ID}

10_9 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

10_10 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of LS
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}


10_11 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    #Log    \n\nValidating uplinkports from potash connected to arista1 as neighbor    console=True
    Log    \nvalidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Wait Until Keyword Succeeds    5 min    60s    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}

10_12 Creating server profile
    [Documentation]    creating server profile
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Powering off servers    console=True
    Power off ALL Servers
    Log    \n\n Creating server profile    console=True
    ${resp}    Add Server Profiles from variable   ${server_profiles_AB}

    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${server_profiles_AB[${x}]['serverHardwareUri']}
    Sleep    10min

10_13 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}    ${gateway_ip}     ${ping_gateway_server1}    ${file2}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${IP2}    ${ping_cmd_server1}    ${file1}


10_14 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    [Tags]    Nitro
    [Tags]    Potash

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${gateway_ip2}    ${ping_gateway_server2}    ${file3}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server2_details['username']}     ${server2_details['password']}     ${IP1}    ${ping_cmd_server2}    ${file4}




