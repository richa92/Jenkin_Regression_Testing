*** Settings ***
*** Settings ***
Documentation   Feature Test: OVF268

Resource        C:/latest/fusion/tests/resource/fusion_api_all_resource_files.txt
Resource        ../FVT/fvt-keywords.txt
Resource		../FVT/Resources/fvt_resource.txt

Variables       ./enclosure_map.py
Variables       ./data_variables.py
Variables       ./vlan1_data.py

Library			FusionLibrary
Library			../FVT/fvt_api.py


*** Variables ***
${LI}    LE-LIG1
${frame}    3

*** Keywords ***
Initialize Globals
	[Arguments]	${frame}
	Set Global Variable	${LIG}	enc${frame}-LIG
	Set Global Variable	${EG}	enc${frame}-EG
	Set Global Variable	${LE}	enc${frame}-LE
	Set Global Variable	${LI}	enc${frame}-LI

Create LIG
	[Documentation]	Create LIG
	[Arguments]		${lig}	${timeout}=3 m	${interval}=1 m

	${variables} =     Get Variables      no_decoration=Yes
    Set to dictionary	${lig}	interconnectMapTemplate	${variables['Enc${frame}Map']}
    log     Updated Enc Map
    Log     ${lig}


	${resp} =	Add LIG from variable	${lig}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	${timeout}	${interval}

	${resp}	Fvt Api Get Logical Interconnect Group By Name	${lig['name']}
	Should Be Equal As Strings	${resp['name']}	${lig['name']}

Create EG
	[Documentation]	Create EG
	[Arguments]		${eg}	${timeout}=3 m	${interval}=1 m
	${resp} =	Add Enclosure Group from variable	${eg}

	${resp}	Fvt Api Get Enclosure Group By Name	${eg['name']}

	Should Be Equal As Strings	${resp['status']}	OK
	Should Be Equal As Strings	${resp['name']}	${eg['name']}

Create LE
	[Documentation]	Create LE
	[Arguments]		${le}	${timeout}=30 m	${interval}=1 m
	${resp} =	Add Logical Enclosure from variable	${le}

	${resp}	Fvt Api Get Logical Enclosure By Name	${le['name']}

	Should Be Equal As Strings	${resp['name']}	${le['name']}
	Should Match Regexp	${resp['status']}	((?i)Warning|OK)

Create Profile
	[Documentation]	Create Profile
	[Arguments]		${profile}	${timeout}=30 m	${interval}=1 m

	Power off ALL servers
	${resp}	fvt-keywords.Add Server Profile	${profile}
	Wait For Task	${resp}	timeout=600m	interval=1m
	Wait For Task	${resp}	timeout=600m	interval=1m
	${resp}	Fvt Api Get Server Profile By Name	${profile['name']}
	Should Be Equal As Strings	${resp['status']}	OK

Check LI State
	[Documentation]    Check LI State
	[Arguments]    ${li}   ${state}    ${timeout}=30 m    ${interval}=1 m
	${resp}	Fvt Api Get Logical Interconnect By Name	${li}
	Should Be Equal As Strings	${resp['consistencyStatus']}	${state}

Add Networks To Internal Networks
	[Documentation]    Add Networks To Internal Networks
	[Arguments]    ${li}    ${networks}    ${timeout}=30 m    ${interval}=1 m

	${uris} =	Fvt Api Convert Resources To Uris	${networks}
	${resp} =	Fvt Api Update Internal Networks	${uris}	${LI_URI}
	Sleep	5m
Clean
	[Documentation]	Create LE
	[Arguments]		${profile}    ${le}	${eg}	${lig}	${timeout}=30 m	${interval}=1 m

	#Pass Execution    "Clean LE Skipped"

	Fusion Api Delete Server Profile	${profile}
	Sleep	2m

	${resp}	Fvt Api Get Logical Enclosure By Name	${le}
	Should Be Equal As Strings	${resp['name']}	${le}
	${resp}	Fusion Api Delete Logical Enclosure	uri=${resp['uri']}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=600m	interval=1m
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp}	None

	${resp}	Fusion Api Delete Enclosure Group	${eg}
	Should Be Equal As Integers	${resp['status_code']}	204
	${resp}	Fvt Api Get Enclosure Group BY Name	${eg}
	Should Be Equal As Strings	${resp}	None

	${resp}	Fusion Api Delete LIG	${lig}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=5m	interval=1s

Check Interconnect State
	[Arguments]	${frame}	${bay}	${state}
	:FOR	${x}	IN RANGE	1 	${frame}+1
    \   ${icm} =	Set Variable	${enc${x}_bay${bay}_icm}
    \   ${resp} =	Fvt Api Get Interconnect By Name	${icm}
    \   ${icm_uri} =	Set Variable	${resp['uri']}
    \   Wait Until Keyword Succeeds	3 min	30s	IC reached state	${icm_uri}	${state}


*** Variables ***
${LIG}	None
${EG}	None
${LE}	None
${LI}	None
${LI_uri}	None

${frame}	3

*** Test Cases ***
Login In User
	Set Log Level	TRACE
	Fusion Api Login Appliance	${APPLIANCE_IP}	${admin_credentials}
	Initialize Globals	${frame}


OVF267 Create Tagged Vlan 1 Network
	#Pass Execution     "Skipped OVF267 Create Tagged Vlan 1 Network"
    Create Ethernet Networks    ${tagged_networks}
	
OVF267 Create FCoE Vlan 1 Network
	#Pass Execution    "Skipped OVF267 Create FCoE Vlan 1 Network"
	Add FCoE Networks from variable     ${fcoe_networks}
	${resp}	FVT Api Get Fcoe Network By Name	${fcoe_networks[0]['name']}
	Should Be Equal As Strings     ${resp}    None

OVF267 Create Bulk Network With Vlan 1 Tagged Network
	#Pass Execution     "Skipped OVF267 Create Bulk Network With Vlan 1 Tagged Network"
	Create Bulk Ethernet Networks    ${bulk_networks}
	Delete Ethernet Networks    ${bulk_network_list}
	
OVF267 Create Network Set
    #Pass Execution     "Skipped OVF267 Create Network Set With Vlan 1 Tagged Network"
    Create Network Set    ${network_sets[0]}

OVF267 Edit Out Vlan 1 Tagged Network From Network Set 
	#Pass Execution     "Skipped OVF267 Edit Out Vlan 1 Tagged Network From Network Set"
	${net_resp}	Fvt Api Get Ethernet Network By Name	ether_1
	Edit Network Set    ${network_sets[2]}

OVF267 Edit In Vlan 1 Tagged Network From Network Set 
	#Pass Execution     "Skipped OVF267 Edit In Vlan 1 Tagged Network From Network Set"
	Edit Network Set    ${network_sets[0]}
	Remove All Network Sets
	
OVF267 Test Network Set No Native Uplink Set Native Network
	#Pass Execution     "Skipped OVF267 Test Native Tagged Network"
	# Network set native network = False (tagged traffic)  and uplink has native network  = True
	Create Network Set    ${network_sets[1]}
	Create LIG    ${lig1}
	Create EG     ${eg1}
	Create LE     ${les[0]}

	Power off ALL servers
	Create Profile    ${profile}
	Clean    profile1    LE    Enc-EG    LIG
	Remove All Network Sets

OVF267 Test Network Set No Native Uplink Set No Native Network
	#Pass Execution      "Skipped OVF267 Test Not Native Tagged Network"
	# Network set native network = False (tagged traffic)  and uplink has native network  = False
	# Ping tagged vlan1 interface
	Create Network Set    ${network_sets[1]}
	Create LIG    ${lig2}
	Create EG    ${eg2}
	Create LE     ${les[1]}

	Create Profile    ${profile}

	Clean    profile1    LE    Enc-EG    LIG
	Remove All Network Sets

OVF267 Test Network Set With Native Uplink Set No Native Network
	#Pass Execution     "Skipped OVF267 Test Native Tagged Network Set As Untagged In Network Set"
	# Network set native network = True (untagged traffic)  and uplink has native network  = True
	# Ping untagged interface
	Create Network Set    ${network_sets[0]}
	Create LIG    ${lig2}
	Create EG    ${eg3}
	Create LE     ${les[2]}
	Power off ALL servers
	Create Profile    ${profile}

	Clean    profile1    LE    Enc-EG    LIG
	Remove All Network Sets

OVF267 Test Network Set With Native Uplink Set With Native Network
	#Pass Execution      "Skipped OVF267 Test Not Native Tagged Network Set As Untagged In Network Set"
	# Network set native network = True (tagged traffic)  and uplink has native network  = False
	# Ping untagged interface
	Create Network Set    ${network_sets[0]}
	Create LIG    ${lig1}
	Create EG    ${eg4}
	Create LE     ${les[3]}
	Power off ALL servers
	Create Profile    ${profile}

	Clean    profile1    LE    Enc-EG    LIG
	Remove All Network Sets

OVF267 Test Add Vlan 1 Thru Internal Network
	#Pass Execution      "Skipped OVF267 Test Add Vlan 1 Thru Internal Network"
	Create LIG    ${lig2}
	Create EG    ${eg5}
	Create LE     ${les[4]}

	${uris} =	Fvt Api Convert Resources To Uris	${network_list}
	${resp} =	Fvt Api Update Internal Networks	${uris}	${LI_URI}

	Clean    profile1    LE    Enc-EG    LIG