*** Settings ***
Documentation       OVF2760 Storm control nitro feature testing with B-Side configuration

Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Resource        resource.txt
Library         Collections
Library         ServerOperations

Resource        ../../../../../Resources/api/fusion_api_resource.txt


Suite Setup        Suite Setup Tasks
Suite Teardown    Suite Teardown Tasks

*** Variables ***
@{ILO_IPS}
${LIGB}    Enc${enc_count}-LIG_BSide
${LE}   Enc${enc_count}-LE
${SP}   Enc${enc_count}_server_profiles_BSide
${interconn}    Enc${enc_count}-interconnect
${module_file_path}    ${CURDIR}\\GetServerIPs.py

***Test Cases***

1 OVF2760_API_TC_BSIDE - VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LIG
    [Documentation]     VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LIG

    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_disable_storm['enableStormControl']}


2 OVF2760_API_TC_BSIDE - VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LI AFTER THE LE CREATION
    [Documentation]     VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LI AFTER THE LE CREATION

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_disable_storm['enableStormControl']}
    Log    Storm control is verified as disabled!!!    console=True


3 OVF2760_API_TC_BSIDE - VERIFY ENABLING/DISABLING STORM CONTROL AND STORM THRESHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    [Documentation]     VERIFY ENABLING/DISABLING STORM CONTROL AND STORM THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED

    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[0]}
    ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    ${lig_body}=    Create List    ${dict}
    ${resp}    Edit LIG    ${lig_body}
    sleep   60s
    Log    LIG edited successfully    console=True

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${li_name}     Create Dictionary   name=${les['${LE}']['name']}-${LIGB}
    Update Logical Interconnect from Group    ${li_name}

    sleep   60
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    CONSISTENT
    sleep   30

    Log    \n Verifying Interconnects In LI ${les['${LE}']['name']}-${LIGB}    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIG}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured

4 OVF2760_API_TC_BSIDE - ENABLE STORM CONTROL in LIG with THRESHOLD VALUES (1 and 262143)
    [Documentation]     ENABLE STORM CONTROL in LIG with THRESHOLD VALUES (1 and 262143)

    ${len}=    Get Length    ${Threshold}
    :FOR    ${threshold}    IN  ${len}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold}
    \   ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    \   ${lig_body}=    Create List    ${dict}
    \   ${resp}    Edit LIG    ${lig_body}
    \   ${task} =   Wait For Task   ${resp[0]}    5m    15s
    \   Log    ${Edit_ligs1['${LIGB}']}    console=True
    \   ${resp}    Get LIG member    ${LIGB}
    \   ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    \   Log    ${resp}    console=True
    \   sleep    60s
    \   Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    \   Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}
    \   Log    STORM CONTROL WITH THERSHOLD VALUE ${ethernet_setting_enable_storm['stormControlThreshold']} is verified successfully!!   console=True


5 OVF2760_API_TC_BSIDE -PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LIG and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    [Documentation]     PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LIG and VALIDATE ALL THE VALUES SHOULD BE REJECTED

    :FOR    ${neg_threshold}    IN  @{negative_storm_threshold}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${neg_threshold}
    \   ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    \   ${lig_body}=    Create List    ${dict}
    \   ${resp}    Edit LIG    ${lig_body}
    \   Run Keyword If  '${resp[0]['status_code']}' != '400'    Verify Error state    ${resp[0]}    ${error_msg}
    \   ...    ELSE    Fail    msg=Invalid storm threshold value is rejected


6 OVF2760_API_TC_BSIDE -PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LI and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    [Documentation]     PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LI and VALIDATE ALL THE VALUES SHOULD BE REJECTED

    :FOR    ${neg_threshold}    IN  @{negative_storm_threshold}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${neg_threshold}
    \   ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    \   ${LI_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    '/${LI} does not exist'
    \   ${resp}    Fusion Api Update Li Ethernet Settings      ${ethernet_setting_enable_storm}    ${LI_URI}
    \   Log    ${neg_threshold}    console=True
    \   Log    ${resp['status_code']}    console=True
    \   Should Be Equal As Integers    ${resp['status_code']}    400
    \   Log    Negative values are rejected!!!    console=True


7 OVF2760_API_TC_BSIDE - VERIFY CHANGING STORM CONTROL THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    [Documentation]     VERIFY CHANGING STORM CONTROL THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED

    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[1]}
    ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    ${lig_body}=    Create List    ${dict}
    ${resp}    Edit LIG    ${lig_body}
    ${task} =   Wait For Task   ${resp[0]}    5m    15s
    Log    \nLIG Edited!!!    console=True
    Sleep    60

    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${li_name}    Create Dictionary    name=${les['${LE}']['name']}-${LIGB}
    ${resp}    Update Logical Interconnect from Group    ${li_name}
    sleep   60
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Log    \n Verifying Interconnects In LI ${les['${LE}']['name']}-${LIGB}    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured

8_1 OVF2760_API_TC_BSIDE - CREATE BACKUP AND RESTORE OF THE APPLIANCE
    [Documentation]     CREATE BACKUP OF THE APPLIANCE

    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_storm_enable_resp_li}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}=    Create Backup
    Log    \n\nBackup Created Succesfully !!    console=True

8_2 OVF2760_API_TC_BSIDE - ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 150 in LIG and LI
   [Documentation]     ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 150 in LIG and LI

    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[2]}
    ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    ${lig_body}=    Create List    ${dict}
    ${resp}    Edit LIG    ${lig_body}
    sleep    60s
    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${li_name}     Create Dictionary   name=${les['${LE}']['name']}-${LIGB}
    Update Logical Interconnect from Group    ${li_name}
    sleep   60

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Log    \n Verifying Interconnects In LI ${les['${LE}']['name']}-${LIGB}    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured

8_3 OVF2760_API_TC_BSIDE - RESTORE THE BACKUP FROM THE RECENT BACK-UP
    [Documentation]     RESTORE THE BACKUP FROM THE RECENT BACK-UP

    Restore Appliance
    sleep    500s

8_4 OVF2760_API_TC_BSIDE - VERIFY VALUES IN LIG AND LI WILL BE RESTORED
    [Documentation]     VERIFY VALUES IN LIG AND LI WILL BE RESTORED

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True

    Set Global Variable    ${after_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${after_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}

    Set Global Variable    ${after_storm_enable_resp_li}   ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${after_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    Should Be Equal     ${before_storm_enable_resp_lig}     ${after_storm_enable_resp_lig}
    Should Be Equal     ${before_storm_threshold_resp_lig}  ${after_storm_threshold_resp_lig}
    Should Be Equal     ${before_storm_enable_resp_li}      ${after_storm_enable_resp_li}
    Should Be Equal     ${before_storm_threshold_resp_li}   ${after_storm_threshold_resp_li}

9 OVF2760_API_TC_BSIDE - ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 3 in LIG and LI
    [Documentation]     ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 3 in LIG and LI

    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[3]}
    ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    ${lig_body}=    Create List    ${dict}
    ${resp}    Edit LIG    ${lig_body}
    sleep   60
    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${li_name}     Create Dictionary   name=${les['${LE}']['name']}-${LIGB}
    Update Logical Interconnect from Group    ${li_name}
    sleep   60

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Log    \n Verifying Interconnects In LI ${les['${LE}']['name']}-${LIGB}    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured


10 OVF2760_API_TC_BSIDE SEND BROADCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN DOWNLINK PORT
    [Documentation]     SEND BROADCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN DOWNLINK PORT

    ${resp}    Get LIG member    ${LIGB}
    ${resp}    Fusion Api Delete Alert
    Log    "GET ILO IP ADDRESS OF THE SERVERS ..."    console=True

    :FOR    ${server}   IN  @{Server_profiles['${SP}']}
    \   ${iloip} =     Get Server Hardware iLO IP    ${server['serverHardwareUri']}
    \   Log    ${iloip}    console=True
    \   Append to List    ${ILO_IPS}    ${iloip}

    Log    "ILO IP DETAILS OF THE SERVER BLADES ARE AS FOLLOWS"    console=True
    Log    ${ILO_IPS}    console=True

    # LOGIN TO THE ILO, GET THE VLAN-NETWORKS IP ADDRESS, LOGIN TO THE SERVER WITH VLAN-NETWORK IP AND LISTEN TO THE INTERFACE IS RECEIVING THE MULITCAST TRAFFIC

    :FOR    ${ilo_ip}   IN  @{ILO_IPS}
    \   Set To Dictionary    ${Ilo_details}    ilo_ip    ${ilo_ip}
    \   Log    ${Ilo_details}    console=True
    \   ${index}=   Get Index From List    ${ILO_IPS}    ${ilo_ip}
    \   Log    ${index}    console=True
    \   ${output}   ${IP}=      get_server_vlan_ip      ${linux_details}    ${Ilo_details}    ${module_file_path}     ${mcast_cmds['${index}']}   ${windows_server_cred}
    \   Set To Dictionary    ${Server_network_ips}    ${index+1}    ${IP}

    Log    "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"    console=True
    Log    ${Server_network_ips}    console=True

    Log    "Broadcast Storm Control Drop counter value before Starting Broadcast Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Log    ${ic_uri}    console=True
    ${resp} =    Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log    "Downlink port stormControlBCASTDropCounters value before starting the Bcast Traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlBCASTDropCounters']}

    Set To Dictionary   ${windows_server}   win_ip    ${Server_network_ips[1][0]}

    ${output}=  start_traffic_in_blade    ${windows_server}    ${broadcast_command_B_Side}
    Log    ${output}    console=True
    Sleep   200

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${y}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${y}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${y}]}

    ${len}=     Get Length  ${Alert_msg}
    :FOR    ${x}    IN Range    0   ${len}
    \   Log    ${Alert_msg[${x}]['description']}    console=True
    \   ${out}=    Split String    ${Alert_msg[${x}]['description']}    port
    \   ${port}=    Split String    ${out[1]}
    \   Log to Console and logfile  ${port[0]}
    \   Run Keyword If  '${port[0]}' == '${bcast_blade_downlinkport}'       Exit For Loop
    Run Keyword If  '${port[0]}' != '${bcast_blade_downlinkport}'   Fail    msg="Activity message for storm Control for the port ${bcast_blade_downlinkport} is not available"
    Should Contain  ${Alert_msg[${x}]['description']}   A packet storm has been detected
    Should Contain  ${Alert_msg[${x}]['description']}   port ${bcast_blade_downlinkport}
    sleep    120s
    Log    "Broadcast Storm Control Drop counter value After Broadcast Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log    " Downlink port stormControlBCASTDropCounters value After the Bcast Traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} <= ${old_bcast_storm_value}    fail    msg=Brodcast Storm Drop Counter is not increased after the Broadcast Storm traffic


11 OVF2760_API_TC_BSIDE SEND BROADCAST TRAFFIC FROM DL SERVER AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN UPLINK PORT
    [Documentation]     SEND BROADCAST TRAFFIC FROM DL SERVER AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN UPLINK PORT

    ${resp}    Fusion Api Delete Alert
    Log    "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"    console=True
    Log    ${Server_network_ips}    console=True

    Log    ${Server_network_ips}    console=True
    Log    "Broadcast Storm Control Drop counter value before Starting Broadcast Traffic"    console=True

    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Log    ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    " Uplink port stormControlBCASTDropCounters value before starting the Bcast Traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlBCASTDropCounters']}

    # The below command is not executed in blade it is in DL server, re-using the same function
    execute_command_in_blade    ${broadcast_command_B_Side}
    Sleep   200

    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =   Get From Dictionary     ${resp}     members
    ${len} =    Get Length  ${mem_resp}
    ${Alert_msg} =  Create List
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${desc_alert} =     Get From Dictionary     ${mem_resp[${x}]}       description
    \   Log to console    ${desc_alert} is alert msg
    \   ${replaced_msg}    Replace String Using Regexp    ${Alert_Message_Port_Bside}    IC_uri    ${ic_uri}
    \   Run Keyword If    '${desc_alert}' == '${replaced_msg}'  Exit For Loop
    Append To List    ${Alert_msg}    ${desc_alert}
    ${len} =    Get Length    ${Alert_msg}
    Run Keyword If      ${len} != 0      Log to console and logfile   \n${Alert_Message_Port_Bside} is observed
    ...         ELSE    Log to console and logfile   \nNo Critical Alert Message Observed

    Log    "Broadcast Storm Control Drop counter value After Broadcast Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    " Uplink port stormControlBCASTDropCounters value After the Bcast Traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} <= ${old_bcast_storm_value}    fail    msg=Broadcast Storm Drop Counter is not increased after the Broadcast Storm traffic


12 OVF2760_API_TC_BSIDE SEND MULITCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE MULITCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN DOWNLINK PORT
    [Documentation]     SEND MULITCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE MULITCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN DOWNLINK PORT

    Log    ${Server_network_ips}    console=True
    Log    "Multicast Storm Control Drop counter value before Starting Multicast Traffic"    console=True

    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Log    ${ic_uri}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log    " Downlink port stormControlMCASTDropCounters value before starting the Mcast Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True
    ${old_mcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Set To Dictionary   ${windows_server}    win_ip    ${Server_network_ips[1][1]}

    ${output}=    start_traffic_in_blade    ${windows_server}   -s ${delete_route_command}

    ${output}=    start_traffic_in_blade    ${windows_server}    -s ${set_route_command1}

    ${output}=    start_traffic_in_blade    ${windows_server}    ${multicast_command}
    Log    ${output}    console=True
    Sleep   200

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${x}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${x}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${x}]}
    Log    ${Alert_msg[0]['description']}    console=True
    Should Contain    ${Alert_msg[0]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[0]['description']}    port ${bcast_blade_downlinkport}

    Log    "Multicast Storm Control Drop counter value After Multicast Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log    " Downlink port stormControlMCASTDropCounters value After the Mcast Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} <= ${old_mcast_storm_value}    fail    msg=Multicast Storm Drop Counter is not increased after the Multicast Storm traffic


13 OVF2760_API_TC_BSIDE SEND MULITCAST TRAFFIC FROM DL SERVER AND VERIFY THE MULTICAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN UPLINK PORT
    [Documentation]     SEND MULITCAST TRAFFIC FROM DL SERVER AND VERIFY THE MULTICAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN UPLINK PORT

    ${resp}    Fusion Api Delete Alert
    Log    "MULITCAST Storm Control Drop counter value before Starting MULITCAST Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Log    ${ic_uri}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    " Uplink port stormControlMCASTDropCounters value before starting the Mcast Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    # The below command is not executed in blade it is in DL server, re-using the same function
    execute_command_in_blade    ${multicast_command}
    Sleep   200

    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =   Get From Dictionary     ${resp}     members
    ${len} =    Get Length  ${mem_resp}
    ${Alert_msg} =  Create List
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${desc_alert} =     Get From Dictionary     ${mem_resp[${x}]}       description
    \   Log to console    ${desc_alert} is alert msg
    \   ${replaced_msg}    Replace String Using Regexp    ${Alert_Message_Port_Bside}    IC_uri    ${ic_uri}
    \   Run Keyword If    '${desc_alert}' == '${replaced_msg}'  Exit For Loop
    Append To List    ${Alert_msg}    ${desc_alert}
    ${len} =    Get Length    ${Alert_msg}
    Run Keyword If      ${len} != 0      Log to console and logfile   \n${Alert_Message_Port_Bside} is observed
    ...         ELSE    Log to console and logfile   \nNo Critical Alert Message Observed
    sleep    120
    Log    "MULITCAST Storm Control Drop counter value After MULITCAST Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    " Uplink port stormControlMCASTDropCounters value After the Mcast Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} <= ${old_bcast_storm_value}    fail    msg=Multicast Storm Drop Counter is not increased after the MULITCAST Storm traffic

14 OVF2760_API_TC_BSIDE SEND DLF TRAFFIC FROM THE BLADE SERVER AND VERIFY THE STORM IS DETECTED ON THE DOWNLINK PORT D8 AND VERIFY THE VALUES OF THE DLF STORM COUNTERS IN DOWNLINK PORT
    [Documentation]     SEND DLF TRAFFIC FROM THE BLADE SERVER AND VERIFY THE STORM IS DETECTED ON THE DOWNLINK PORT D8 AND VERIFY THE VALUES OF THE DLF STORM COUNTERS IN DOWNLINK PORT

    ${resp}    Fusion Api Delete Alert
    Log    "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"    console=True
    Log    ${Server_network_ips}    console=True

    Log    "DLF Storm Control Drop counter value before Starting DLF Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Log     {ic_uri}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_downlinkport}
    Log    "Downlink port StormControlDLFDropCounters value Before sending the DLF traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    ${old_dlf_storm_value}=    Set Variable    ${resp['commonStatistics']['stormControlDLFDropCounters']}

    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[1][1]}
    Log    ${windows_server}    console=True

    # Get the mac address of the blade server 1
    execute_command_in_blade    getmac /s ${windows_server['win_ip']} /u ${windows_server['username']} /p ${windows_server['password']} > mac_blade1.txt
    ${mac_output}=      extract_mac_address     mac_blade1.txt
    Log    ${mac_output}    console=True

    # Disable the Ethernet interface in the blade server 1
    start_traffic_in_blade    ${windows_server}    ${disable_interface_B_Side}
    Log    Wait for 6 Minutes to automatically delete the mac address of blade 1 in the hafnium   console=True
    sleep    360

    # Set the Static ARP entry for the disabled ethernet interface to verify DLF traffic
    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[3][2]}
    start_traffic_in_blade    ${windows_server}   -s arp -s ${Server_network_ips[1][1]} ${mac_output[1]}
    sleep    30

    # Start the DLF traffic from the blade server
    start_traffic_in_blade  ${windows_server}   "C:\\Program Files (x86)\\Nmap\\start_dlf_traffic_B_Side.bat"
    sleep   600

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${y}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${y}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${y}]}

    ${len}=     Get Length  ${Alert_msg}
    :FOR    ${x}    IN Range    0   ${len}
    \   Log    ${Alert_msg[${x}]['description']}    console=True
    \   ${out}=    Split String    ${Alert_msg[${x}]['description']}   port
    \   ${port}=    Split String    ${out[1]}
    \   Log    ${port[0]}    console=True
    \   Run Keyword If  '${port[0]}' == '${dlf_test_blade_downlinkport}'        Exit For Loop
    Run Keyword If  '${port[0]}' != '${dlf_test_blade_downlinkport}'    Fail    "Activity message for storm Control for the port d8 is not available"
    Should Contain    ${Alert_msg[${x}]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[${x}]['description']}    port ${dlf_test_blade_downlinkport}

    Log    "DLF Storm Control Drop counter value After DLF Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_downlinkport}
    Log    "Downlink port StormControlDLFDropCounters value After the DLF traffic"    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} <= ${old_dlf_storm_value}    fail    DLF Storm Drop Counter is not increased after the DLF Storm traffic

    # Remove the Static ARP entry for the disabled ethernet interface to verify DLF traffic
    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[3][2]}
    start_traffic_in_blade    ${windows_server}   -s arp -d ${Server_network_ips[1][1]}

15 OVF2760_API_TC_BSIDE SEND DLF TRAFFIC FROM DL SERVER AND VERIFY THE DLF STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF DLF GET INCREASED IN UPNLINK PORT
    [Documentation]     SEND DLF TRAFFIC FROM DL SERVER AND VERIFY THE DLF STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF DLF GET INCREASED IN UPNLINK PORT

    Log    "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"    console=True

    Log    ${Server_network_ips}    console=True

    Log    "DLF Storm Control Drop counter value before Starting DLF Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}

    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    "Uplink port StormControlDLFDropCounters value before starting the DLF Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    ${old_bcast_storm_value}=    Set Variable    ${resp['commonStatistics']['stormControlDLFDropCounters']}

    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[2][0]}
    Log    ${windows_server}    console=True

    ${mac_details}=     extract_mac_address     mac_blade1.txt
    Set Suite Variable  ${mac_output}   ${mac_details}
    Log    ${mac_output}    console=True
    # The below command is not executed in blade it is in DL server, re-using the same function

    execute_command_in_blade    arp -s ${Server_network_ips[2][0]} ${mac_output[1]}

    execute_command_in_blade    "C:\\Program Files (x86)\\Nmap\\start_dlf_traffic_B_Side.bat"

    # Sleep For 10 mins  complete the DLF traffic to be transmitted
    sleep   600

    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =   Get From Dictionary     ${resp}     members
    ${len} =    Get Length  ${mem_resp}
    ${Alert_msg} =  Create List
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${desc_alert} =     Get From Dictionary     ${mem_resp[${x}]}       description
    \   Log to console    ${desc_alert} is alert msg
    \   ${replaced_msg}    Replace String Using Regexp    ${Alert_Message_Port_Bside}    IC_uri    ${ic_uri}
    \   Run Keyword If    '${desc_alert}' == '${replaced_msg}'  Exit For Loop
    Append To List    ${Alert_msg}    ${desc_alert}
    ${len} =    Get Length    ${Alert_msg}
    Run Keyword If      ${len} != 0      Log to console and logfile   \n${Alert_Message_Port_Bside} is observed
    ...         ELSE    Log to console and logfile   \nNo Critical Alert Message Observed
    sleep    200s
    Log    "DLF Storm Control Drop counter value After DLF Traffic"    console=True
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport1}
    Log    " Uplink port StormControlDLFDropCounters value After the DLF Traffic "    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} <= ${old_bcast_storm_value}    fail  DLF Storm Drop Counter is not increased after the DLF Storm traffic

    # Enable the ethernet interface on the blade server 1
    Set To Dictionary   ${windows_server}   win_ip    ${Server_network_ips[2][0]}
    start_traffic_in_blade    ${windows_server}  ${enable_interface_B_Side}

    # Delete the Mac address from the DL server
    execute_command_in_blade    arp -d ${Server_network_ips[1][1]}

16 OVF2760_API_TC_BSIDE Verify ICM Clear Port counters clears Storm counter statistics
    [Documentation]     VERIFY ICM CLEAR PORT COUNTERS DOESN'T CLEARS STORM COUNTER STATISCTICS

    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    ${body} =   Create Dictionary
    Log    \nResetting Interconnect Port Counters\n    console=True
    ${resp} =   Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 202    fail    msg=Clearing Interconnect Ports of ${Interconnects['${interconn}'][1]} Failed
    ...         ELSE    Log    \n Interconnect Ports of ${Interconnects['${interconn}'][1]} cleared successfully    console=True
    Sleep   60s
    ${ic_resp} =    Get Interconnect    ${Interconnects['${interconn}'][1]}
    ${ports} =    Get from Dictionary    ${ic_resp}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${dlf_test_blade_uplinkport1}'
    Log    ${ports[${x}]['portName']}    console=True
    Log    ${ports[${x}]}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True

    Run Keyword If    ${resp['commonStatistics']['stormControlBCASTDropCounters']} == 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If    ${resp['commonStatistics']['stormControlDLFDropCounters']} == 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If    ${resp['commonStatistics']['stormControlMCASTDropCounters']} == 0    fail    msg=MCAST Drop counter got cleared which is not expected

    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${dlf_test_blade_downlinkport}'
    Log    ${ports[${x}]['portName']}    console=True
    Log    ${ports[${x}]}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} != 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} == 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} == 0    fail    msg=MCAST Drop counter got cleared which is not expected

17_1 OVF2760_API_TC_BSIDE_VERFY THE INTERCONNECT IS GOING INTO MAINTENANCE STATE AFTER THE INTERCONNECT IS POWERED OFF
    [Documentation]     VERIFY THE INTERCONNECT IS GOING INTO MAINTENANCE STATE AFTER THE INTERCONNECT IS POWERED OFF

    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[2]}
    ${dict} =    Get From Dictionary     ${Edit_ligs1}     ${LIGB}
    ${lig_body}=    Create List    ${dict}
    ${resp}    Edit LIG    ${lig_body}
    ${task} =   Wait For Task   ${resp[0]}    5m    15s
    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${li_name}     Create Dictionary   name=${les['${LE}']['name']}-${LIGB}
    Update Logical Interconnect from Group    ${li_name}
    sleep   60

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Set Global Variable    ${before_storm_enable_resp_li}   ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    Log    \n Verifying Interconnects In LI ${les['${LE}']['name']}-${LIGB}    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured

    ##Poweroff the interconnect
    Patch Interconnect    ${dto[1]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Maintenance
    log    \n\nThe IC module ${Interconnects['${interconn}'][1]} is in Maintenance state    console=True

17_2 OVF2760_API_TC_BSIDE_VERIFY STORM DROP COUNTERS VALUES ARE RESET TO 0 AFTER THE INTERCONNECT IS POWERED ON
    [Documentation]     VERIFY STORM DROP COUNTERS VALUES ARE RESET TO 0 AFTER THE INTERCONNECT IS POWERED ON

    ${resp}    Get LIG member    ${LIGB}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log    ${resp}    console=True

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_storm_enable_resp_li}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    ##Poweron the interconnect
    Patch Interconnect    ${dto[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][1]}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Configured
    log    \n\nThe IC module ${Interconnects['${interconn}'][1]} is in Configured state    console=True

    ${ic_resp} =    Get Interconnect    ${Interconnects['${interconn}'][1]}
    ${ports} =    Get from Dictionary    ${ic_resp}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${dlf_test_blade_uplinkport1}'
    Log    ${ports[${x}]['portName']}    console=True
    Log    ${ports[${x}]}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} != 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} != 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} != 0    fail    msg=MCAST Drop counter got cleared which is not expected

    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${dlf_test_blade_downlinkport}'
    Log    ${ports[${x}]['portName']}    console=True
    Log    ${ports[${x}]}    console=True
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log    ${resp['commonStatistics']['stormControlBCASTDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlDLFDropCounters']}    console=True
    Log    ${resp['commonStatistics']['stormControlMCASTDropCounters']}    console=True

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} != 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} != 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} != 0    fail    msg=MCAST Drop counter got cleared which is not expected

****Keywords*****
Verify Error state
    [Documentation]    Verify Error state
    [Arguments]     ${resp}     ${error_msg}
    ${task} =   Wait For Task   ${resp}    5 min    15s
    Run Keyword If  '${task['taskState']}' == 'Error' and '${task['taskErrors'][0]['errorCode']}' == '${error_msg}'     Log    Invalid storm threshold value is rejected    console=True
    ...    ELSE    Fail

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log    [TEARDOWN]    console=True
    Stop Multicast Sender
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users


Suite Setup tasks
    [Documentation]   This Suite contains the BSide Configuration
    Set Log Level   TRACE
    ${Login_response} =    Fusion Api Login Appliance    ${appliance_ip}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200   Fail    "Unable to Login"

    #Initial Cleanup
    Clean OV

    Log    Create Ethernet Networks    console=True

    ${Response}     Add Ethernet Networks from variable    ${ethernet_network}
    Log    ${Response}    console=True
    Run keyword unless  ${Response[0]['status_code']}== 202    Fail    "Unable to Create Ethernet network"
    Log    Ethernet Networks created successfully!!    console=True

    Set Suite Variable  ${LIG}  Enc${enc_count}-LIG_ASide
    Log    ${ligs['${LIG}']}    console=True
    Add LIG from variable    ${ligs['${LIG}']}

    Set Suite Variable  ${LIGB}    Enc${enc_count}-LIG_BSide
    Log    ${ligs['${LIGB}']}    console=True
    Add LIG from variable    ${ligs['${LIGB}']}

    Set Suite Variable  ${EG}   Enc${enc_count}-EG_BSide
    Log    ${EG}    console=True
    ${resp}    Add Enclosure Group from variable    ${enc_group['${EG}']}
    ${task} =   Wait For Task   ${resp}    5 min    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    FAIL    ELSE    Log    EG Created Successfully!!    console=True

    Set Suite Variable  ${LE}   Enc${enc_count}-LE
    Log    ${LE}    console=True
    Set Suite Variable  ${eg}   EG:Enc${enc_count}-EG_BSide
    Set To Dictionary   ${les['${LE}']}    enclosureGroupUri   ${EG}
    Log    ${les['${LE}']}    console=True
    Add Logical Enclosure from variable    ${les['${LE}']}

    Log    \n Verify Interconnects    console=True
    ${resp}    Get LI member    ${les['${LE}']['name']}-${LIGB}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   Log    ${interconnect}    console=True
    \   IC reached state    ${interconnect}   Configured

    Log    ${Server_profiles['${SP}']}    console=True
    ${resp}    Add Server Profiles from variable    ${Server_profiles['${SP}']}

    ${l} =  Get Length  ${resp}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Log    ${resp[${x}]}    console=True
    \    ${task} =   Wait For Task   ${resp[${x}]}    10 min    15s
    \    Run Keyword If  '${task['taskState']}' != 'Completed'    FAIL    ELSE    Log    Server profiles Created Successfully!!    console=True

    Log    "Powering on the Server bays..."    console=True

    :FOR    ${server}   IN    @{Server_profiles['${SP}']}
    \   Log    ${server['serverHardwareUri']}    console=True
    \   Power on server    ${server['serverHardwareUri']}
    Sleep   300    #Wait for the servers get powered on

Clean OV
    [Documentation]  Clean OV
    Power off ALL servers
    Remove All Server Profiles
    Remove All LEs
    Remove All Enclosure Groups
    Remove All LIGs
    Remove All Ethernet Networks
    Remove ALL FCoE Networks
    Remove All FC Networks