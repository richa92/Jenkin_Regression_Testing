*** Settings ***
Documentation   OVF586_Suite4
Variables       data_variables_72.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         Telnet
Library         String
Resource        ../../../../resource/fusion_api_all_resource_files.txt
Library         data_variables_72
Library         backping.py
Library         Dialogs
Suite Teardown   Clean OV


*** Variables ***
${number}                    5
${flag}                      Windows
${Ping_Lost}                 Lost
${name0}                     serverip0.txt
${name1}                     serverip1.txt

${team0}                     teamip.txt
${ICM_MODEL}                 Virtual Connect SE 40Gb F8 Module for Synergy

${ping_enable_uplink0}       pingfile_enable_uplink1.txt
${ping_enable_uplink1}       pingfile_enable_uplink2.txt

${ping_disable_uplink1}      pingfile_disable_uplink1.txt
${ping_disable_uplink2}      pingfile_disable_uplink2.txt

${ping_disable_downlink1}    pingfile_disable_downlink1.txt
${ping_disable_downlink2}    pingfile_disable_downlink2.txt

${ping_enable_downlink0}     pingfile_enable_downlink1.txt
${ping_enable_downlink1}     pingfile_enable_downlink2.txt

${serverip_serverpoweron}    serverip_serverpoweron.txt
${Serverip_Serverpower_Off}  Serverip_Serverpower_Off.txt

${bladeserverefuseoff}       bladeserverefuseoff.txt
${bladeserverefuseon}        bladeserverefuseon.txt

${eth}    Ethernet

*** Test Cases ***

Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

    Clean OV
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task    ${resp}    260s    20s

Create ethernet network
    [Documentation]    Create ethernet network
    Add ethernet Networks       @{ethnets}

Create LIG, EG and LE
    [Documentation]    Create LIG, EG and LE
    Log to console  \n Creating LIG
    Log to console    ${LIGS_TB[1]}
    ${lig_resp}    Add LIG from variable   ${LIGS_TB[1]}
    Run Keyword If  '${lig_resp['status_code']}' != '200'   fail    ELSE    Log to Console  \n-LIG Got created successfully

    Log to console  \n Creating EG
    ${Resp}    Add Enclosure Group from variable        ${enc_group}
    Log to console  \n Creating LE ${Resp}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully

    Log to console  \n Creating LE
    ${Resp}    Add Logical Enclosure from variable     ${les}
    Run Keyword If  '${Resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-created LE successfully

############################### Verify LAG creation without teaming configured on OS #######################
Create server Profiles
    [Documentation]    Create server Profiles
    Add Server Profiles from variable    ${Server_profile1}
    Log to console  \n Server profiles created successfully
    Power on server     ${Server_profile1[0]['serverHardwareUri']}
    Log to console    \n Power on servers
    Log to console    \n Waiting 10 minutes for the server to boot
    Sleep   10min

Verifying alert message on server profile page
    [Documentation]    Verifying alert message on server profile page
    ${Alert_msg}    Get Server profile Alerts
    ${Count_2}=    Get Length    ${Alert_msg}
    Run Keyword If  '${Count_2}' != '1'  Fail    ELSE  log to console   \n-Verified the alerts msg of server profiles

Geting server ip and checking if IP's are pinging
    [Documentation]    Geting server ip and checking if IP's are pinging
    ${IP}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${l} =    Get Length    ${serverip_List1_global}
    Set Global Variable    ${iplength}    ${l}
    log to console  \n pinging started ${serverip_List1_global}
    log to console  \n pinging started
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \    startthread    ${number}    ${serverip_List1_global[${x}]}    ${name${x}}    ${flag}
    \    Sleep    20
    \    ${contents}=    OperatingSystem.Get File    ${name${x}}
    \    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log to Console    \ncontents are ${Lines}
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log to Console     ${ret1}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \n 0 percent packet loss is observed
    Log to Console     All the IP's are reachable

Get MAC Address of the server
    [Documentation]    Get MAC Address of the server
    ${IP}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${resp} =    Fusion Api Get Server Profiles
    ${mac_addr_list}=   Create List
    ${mac} =    Get Profile Details    ${resp}    ${Server_profile1[0]['name']}
    ${mac_length} =    Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address} =    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    ${ip_length} =    Get Length    ${serverip_List1_global}
    Log to Console    \n mac address ${mac_addr_list}

    #Compare mac address with server
    ${adapter_name_list}=   Create List
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${replaced_cmd} =   Replace String Using Regexp    ${Powershell_get_mac}    pppppppp    ${mac_addr_list[${x}]}
    \   Log to console  \n the string is step2 ${replaced_cmd}
    \   #calling Get Mac Address from server
    \   Log to console  \n the server details is ${windows_server_details}
    \   Log to console  \n the ip is ${serverip_List1_global[0]}
    \   ${output}    Get Mac Address from server    ${serverip_List1_global[0]}    ${replaced_cmd}
    \   Log to console  \n the string is step3
    \   ${string}    Convert To String    ${output}
    \   ${match}    ${port}     Should Match Regexp    ${string}    .*Ethernet\\s+(\\d+).*
    \   ${adapter_name}    Catenate    ${eth}   ${port}
    \   Append to List   ${adapter_name_list}   ${adapter_name}
    Log to console  \nadapter names lsit${adapter_name_list}
    Create Teaming windows     ${adapter_name_list[0]}    ${adapter_name_list[1]}   ${Powershell_get_mac1}    ${windows_server_details}    ${serverip_List1_global[0]}


Verify if IP is pinging after teaming
    [Documentation]    Verify if IP is pinging after teaming
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${Team_Ip}    ${ip[0]}
    log to console  \n pinging started
    startthread    ${number}    ${Team_Ip}    ${team0}    ${flag}
    Sleep    20
    ${contents}=    OperatingSystem.Get File    ${team0}
    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with loss percentage
    Log to Console     successfully pinged  ip's
    Sleep    5min

Verifying alert message on server profile page after teaming
    [Documentation]    Verifying alert message on server profile page after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count2}=    Get Length    ${Alert_msg}
    Run Keyword If  '${Count_2}' != '0'  Fail    ELSE  log to console   \n-Verified the alerts msg of server profiles

############################################### Disable/enable uplinkports ################################################
Disable uplink ports & Verify traffic
    [Documentation]    Disable uplink ports & Verify traffic
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${Team_Ip}    ${ip[0]}
    #Disable uplink port from one interconnect & verify failover
    ${resp}    Enable Disable uplink ports    ${interconnect_potash[0]}    ${uplink_ports[0]}    ${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${uplink_ports}    ${disable_status}
    Sleep    3min

    startthread    ${number}    ${Team_Ip}    ${ping_disable_uplink1}    ${flag}
    Log to console  \n pinging started
    Sleep    30sec

    ${contents}    OperatingSystem.Get File    ${ping_disable_uplink1}
    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    Log to Console     successfully pinged  ip

    #Disable uplink port from two interconnect & verify traffic
    ${resp}    Enable Disable uplink ports    ${interconnect_potash[1]}    ${uplink_ports[1]}    ${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${uplink_ports}    ${disable_status}
    Sleep   3min

    startthread    ${number}    ${Team_Ip}    ${ping_disable_uplink2}    ${flag}
    Log to console  \n pinging started
    Sleep    40sec

    ${contents}    OperatingSystem.Get File    ${ping_disable_uplink2}
    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '100%'  Fail   ELSE  Log to console  \npinging happend with 100loss percentage
    Log to Console     Ip is not pinging

Enable uplink ports & Verify traffic
    [Documentation]    Enable uplink ports & Verify traffic
    ${ic_len} =    Get Length    ${interconnect}
    :FOR    ${x}    IN RANGE    ${ic_len}
    \    ${resp}    Enable Disable uplink ports    ${interconnect_potash[${x}]}    ${uplink_ports[${x}]}    ${ic_enable_body}
    \    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    \    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${uplink_ports}    ${enable_status}
    \    Sleep   3min

    \    startthread    ${number}    ${Team_Ip}    ${ping_enable_uplink${x}}    ${flag}
    \    Log to console  \n pinging started
    \    Sleep    40sec

    \    ${contents}    OperatingSystem.Get File    ${ping_enable_uplink${x}}
    \    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log to Console    \ncontents are ${Lines}
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log to Console     ${ret1}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    \    Log to Console     successfully pinged  ip

#################################################### Disable/enable Downlinkport ##############################################

Disable downlink ports & Verify traffic
    [Documentation]    Disable downlink ports & Verify traffic
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${Team_Ip}    ${ip[0]}
    #Disable uplink port from one interconnect & verify failover
    ${resp}    Enable Disable uplink ports    ${interconnect_potash[0]}    ${downlink_ports[0]}    ${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${downlink_ports}    ${disable_status}
    Sleep    3min

    startthread    ${number}    ${Team_Ip}    ${ping_disable_downlink1}    ${flag}
    Log to console  \n pinging started
    Sleep    40sec

    ${contents}    OperatingSystem.Get File    ${ping_disable_downlink1}
    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    Log to Console     successfully pinged  ip

    #Disable uplink port from two interconnect & verify traffic
    ${resp}    Enable Disable uplink ports    ${interconnect_potash[1]}    ${downlink_ports[1]}    ${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${downlink_ports}    ${disable_status}
    Sleep   3min

    startthread    ${number}    ${Team_Ip}    ${ping_disable_downlink2}    ${flag}
    Log to console  \n pinging started
    Sleep    40sec

    ${contents}    OperatingSystem.Get File    ${ping_disable_downlink2}
    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '100%'  Fail   ELSE  Log to console  \npinging happend with 100loss percentage
    Log to Console     Ip is not pinging

Enable downlink ports & Verify traffic
    [Documentation]    Enable downlink ports & Verify traffic
    ${ic_len} =    Get Length    ${interconnect}
    :FOR    ${x}    IN RANGE    ${ic_len}
    \    ${resp}    Enable Disable uplink ports    ${interconnect_potash[${x}]}    ${downlink_ports[${x}]}    ${ic_enable_body}
    \    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    \    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_potash}    ${downlink_ports}    ${enable_status}
    \    Sleep   3min

    \    startthread    ${number}    ${Team_Ip}    ${ping_enable_downlink${x}}    ${flag}
    \    Log to console  \n pinging started
    \    Sleep    40sec

    \    ${contents}    OperatingSystem.Get File    ${ping_enable_downlink${x}}
    \    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log to Console    \ncontents are ${Lines}
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log to Console     ${ret1}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    \    Log to Console     successfully pinged  ip

################################################ Poweroff/on Bladeserver  ###########################################
Poweroff blade server and verify traffic
    [Documentation]    Poweroff blade server and verify traffic
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Power off server     ${Server_profile1[0]['serverHardwareUri']}
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${s}    IN  @{servers['members']}
    \       Continue For Loop If      '${s['name']}' != '${server}'
    \       Log to Console    ${s['powerState']}
    \       Run Keyword If  '${s['powerState']}' != 'Off'  Fail    ELSE  Log to console  \nServer powered off
    Sleep    10
    startthread    ${number}    ${ip[0]}    ${Serverip_Serverpower_Off}    ${flag}
    Sleep    40
    ${contents}=    OperatingSystem.Get File    ${Serverip_Serverpower_Off}
    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' == '0%'  Fail    ELSE  Log to console  \npinging happend with '${ret1}' loss percentage
    Log to Console     successfully pinged  ip's

Poweron blade server and verify traffic
    [Documentation]    Poweron blade server and verify traffic
    Power on server     ${Server_profile1[0]['serverHardwareUri']}
    Log to console and logfile      Waiting 10 minutes ...
    Sleep   15min
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${s}    IN  @{servers['members']}
    \       Continue For Loop If      '${s['name']}' != '${server}'
    \       Log to Console    ${s['powerState']}
    \       Run Keyword If  '${s['powerState']}' != 'On'  Fail  ELSE  Log to console  \nServer powered on
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    startthread    ${number}    ${ip[0]}    ${Serverip_Serverpoweron}   ${flag}
    Sleep    40
    ${contents}=    OperatingSystem.Get File    ${Serverip_Serverpoweron}
    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Log to Console     ${ret1}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    Log to Console     successfully pinged  ip's
    Sleep    200

######################################################## Blade server Efuse  #################################################

EfuseOn Blade servers
    [Documentation]    EfuseOn Blade servers
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${Team_Ip}    ${ip[0]}
    Log to console and logfile  \n\nEfussing Blade servers
    ${ret1}    Efuse Blade server    ${Enc[0]}  ${Bladeserver[0]}   ${Action[0]}    ${Bladebay[0]}   ${bladeserverefuseon}    ${Team_Ip}
    Log to console and logfile  \n\n completed
    Run Keyword If  '${ret1}' != '100%'  Fail   ELSE  Log to console  \n 0 percent packet loss is observed during Blade server Effuseon

EfuseOff Blade server
    [Documentation]    EfuseOff Blade server
    Log to console and logfile  \n\nEfussingoff Blade servers
    ${ret1}    Efuse Blade server    ${Enc[0]}  ${Bladeserver[0]}   ${Action[1]}    ${Bladebay[0]}   ${bladeserverefuseoff}    ${Team_Ip}
    Log to console and logfile  \n\n completed
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \n 0 percent packet loss is observed during Blade server Effuseoff
    Sleep    200

Delete Teaming
    [Documentation]    Delete Teaming
    ${ip}    Get Server Ip Windows    ${ilo_details_1}
    Set Global Variable    ${Team_Ip}    ${ip[0]}
    Delete Windows Teaming    ${Team_ip}    ${windows_server_details}    ${detlete_team_cmd0}
    Sleep    5min
    ${output}    Verify Team Status    ${Team_ip[${x}]}    ${server_details_enc1_bay1}    ${team_status_cmd${x}}
    Log to Console    \nstat is ${output}
    ${match}   ${status}    Should Match Regexp    ${output}    (FullyQualifiedErrorId\\s+:\\s+CmdletizationQuery_NotFound_Name)


***Keywords***
Add ethernet Networks
    [Documentation]    Add ethernet Networks
    [Arguments]     @{enets}
    Log to console and logfile    \n-Adding enet Networks
    :FOR   ${enet}   IN   @{enets}
    \       ${resp} =    fusion api create ethernet network   body=${enet}
    \       ${task} =   Wait For Task   ${resp}     60s    2s

Get Server profile Alerts
    [Documentation]    Get Server profile Alerts
    ${y} =    Set Variable    0
    ${Alert_msg} =    Create List
    ${resp} =    Fusion Api Get Alerts   /rest/alerts?filter="alertState EQ 'Active'"
    ${mem_resp} =    Get From Dictionary    ${resp}    members
    ${len} =     Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0    ${len}
    \   Run Keyword If  '${mem_resp[${x}]['alertTypeID']}' !='crm.connectionStateChange'    Continue For Loop
    \   ${desc}=    Get From Dictionary    ${mem_resp[${x}]}    description
    \   Log to console and logfile  description'${desc}'
    \    ${match}   ${status}    Should Match Regexp    ${desc}    (Connection\\s+on\\s+downlink\\s+port\\s+\\d+\\,.*LAG\\d+.)
    \  Append To List    ${Alert_msg}    ${desc}
    \  ${y} =    Evaluate    ${y} + 1
    \   Log to console    ${status}
    Log to console and logfile   ${Alert_msg}
    [Return]    ${Alert_msg}

Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    Log to Console    \nstdout is ${ilo_details}
    ${serverip_List}=   Create List
    ${serverip_List1}=   Create List
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log to Console    \nstdout is ${stdout}
    ${cmd_output}=    Get Regexp Matches    ${stdout}    Ip=10\\.\\d+\\.\\d+\\.\\d+
    Log to Console    \nstdout is ${cmd_output}
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    Log to console    ip is ${ip_lists}
    \    Append To List   ${ip_list_new}    ${ip_lists}
    Log to Console    \n IP's are is ${ip_list_new}
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}

Get Mac address Of Server Profile
    [Documentation]    Get Mac address Of Server Profile
    [Arguments]                  ${connections}
    ${mac_address} =    Create List
    ${connection_length} =    Get Length    ${connections}
    :FOR    ${x}    IN RANGE    ${connection_length}
    \   Append To List   ${mac_address}    ${connections[${x}]['mac']}
    [return]            ${mac_address}

Get Profile Details
    [Documentation]    Get Profile Details
    [Arguments]                  ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${y} =    Set Variable    ${resp['members'][${x}]['connectionSettings']}
    \   ${mac_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get Mac address Of Server Profile    ${y['connections']}
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]            ${mac_address}

Get Mac Address from server
    [Documentation]    Get Mac Address from server
    [Arguments]         ${IP}    ${Powershell_get_mac}
    Log to console  \nLogged in to serverssss ${IP} ${Powershell_get_mac}
    Telnet.Open Connection     ${IP}     prompt=>     timeout=30s
    Sleep    5sec
    Telnet.Write    a
    ${login}    Telnet.Login               ${windows_server_details['username']}    ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nLogged in to serverssss
    Log to console  \nLogged in to server
    Sleep    10sec
    ${out}    Telnet.Read
    Telnet.Write    Powershell
    Sleep    5sec
    Telnet.Write    ${Powershell_get_mac}
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}

Create Windows Teaming
    [Documentation]    Create Windows Teaming
    [Arguments]         ${server_ip}    ${windows_server_details}    ${team_cmd}
    Telnet.Open Connection     ${server_ip}     prompt=>     timeout=20s
    Log to console  \nSuccessfully opened connection to the server
    Sleep    10sec
    Telnet.Write    a
    Sleep    5sec
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nSuccessfully logged into the server
    Sleep    10sec
    Telnet.Write    powershell
    Log to console  \n${team_cmd}
    Telnet.Write    ${team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    Log to Console    \nteaming completed

Create Teaming windows
    [Documentation]    Create Teaming windows
    [Arguments]         ${adapter_name_1}   ${adapter_name_2}    ${Powershell_get_mac1}    ${windows_server_details}    ${serverip_List1_global[0]}
    ${tmp}    Remove Whitespace   ${adapter_name_1}
    ${tmp1}    Remove Whitespace   ${adapter_name_2}
    ${replaced_cmd1} =  Replace String Using Regexp    ${Powershell_get_mac1}    pppp    ${tmp}
    Log to Console  \nstrafter strip is${tmp}
    Log to Console  \nreplaced_cmd1 is${replaced_cmd1}
    ${replaced_cmd2} =  Replace String Using Regexp    ${replaced_cmd1}    qqq    ${tmp1}
    Log to Console  \nstr is${replaced_cmd2}
    Create Windows Teaming   ${serverip_List1_global[0]}    ${windows_server_details}    ${replaced_cmd2}

Enable Disable uplink ports
    [Documentation]    Enable Disable uplink ports
    [Arguments]     ${interconnects}    ${uplink_ports}    ${ic_uplink_port_body}
    ${IC_uri}    Get IC URI    ${interconnects}
    ${ic_resp}    Fusion Api Get Interconnect    ${IC_uri}
    #Log to console    ${ic_resp}
    ${len}    Get Length    ${ic_resp['ports']}
    Log to console and logfile    ${len}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword If  '${ic_resp['ports'][${x}]['name']}'=='${uplink_ports}'    Set Global Variable    ${port1_uri}    ${ic_resp['ports'][${x}]['uri']}
    ${ic_port_resp}    Fusion Api Get Interconnect    uri=${port1_uri}
    Set To Dictionary    ${ic_uplink_port_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_uplink_port_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_uplink_port_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_uplink_port_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp}    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_uplink_port_body}
    [Return]    ${resp}

Get Port Status
    [Documentation]    Get Port Status
    [Arguments]     ${interconnects}    ${uplink_preferred_port}    ${Linked_Unlinked}
    ${ic_ports} =    Create List
    ${len}    Get Length    ${interconnects}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${ic}    Get IC URI    ${interconnects[${x}]}
    \    ${ic_resp}    Fusion Api Get Interconnect Ports    ${ic}
    \    Append To List    ${ic_ports}    ${ic_resp}
    #Log to console    ${ic_resp}
    ${variable}=    set variable    ${empty}
    ${y} =    Set Variable    0
    ${len} =    Get Length  ${ic_resp['members']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ic_ports[${y}]['members'][${x}]['portName']}' == '${uplink_preferred_port[${y}]}' and '${ic_ports[${y}]['members'][${x}]['portStatus']}' == '${Linked_Unlinked}'    Set Global Variable    ${variable}    True
    Log to console    ${variable}
    Run Keyword unless  '${variable}' == 'True'   Fail    Conditions didn't match
    ${y} =    Evaluate    ${y} + 1

Efuse blade server command
     [Documentation]    Efuse blade server command
     [Arguments]     ${Enc1}    ${bladebay}    ${Action}
     SSHLibrary.Open Connection     ${Host}
     ${login}    SSHLibrary.Login    root    hpvse1
     ${EM1}=  SSHLibrary.Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enc1}
     Log to Console   \n em1 ${EM1}
     ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
     Log to Console   \n em ${EM}
     ${XAUTH}=  SSHLibrary.Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enc1} -o t
     Log to Console   \n XAUTH ${XAUTH}
     ${efuse_operation}=   SSHLibrary.Execute Command    curl -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://[${EM}]/rest/v1/BladeBays/${bladebay} -d '{"Action":"${Action}"}'
     Log To Console   efuseresponce\n-${efuse_operation}
     SSHLibrary.Close All Connections

Efuse Blade server
    [Documentation]    Efuse Blade server
    [Arguments]     ${Enc1}    ${bladeserver}    ${Action}    ${Bladebay}    ${file}    ${Team_Ips}
    Log to console and logfile  \n\nEfussing blade server
    Efuse blade server command    ${Enc1}    ${bladeserver}    ${Action}
    Log to console and logfile  \n\n completed
    Sleep    700
    Log to console and logfile  \n\nThe Blade server ${Bladebay} is Effused
    startthread    ${number}    ${Team_Ips}    ${file}    ${flag}
    Sleep    40
    ${contents}=    OperatingSystem.Get File    ${file}
    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    Log to Console    \ncontents are ${Lines}
    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    [Return]    ${ret1}

Delete Windows Teaming
    [Documentation]    Delete Windows Teaming
    [Arguments]         ${team_ip}    ${windows_server_details}    ${detlete_team_cmd}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Log to console  \nSuccessfully opened connection to the server
    Sleep    10sec
    Telnet.Write    a
    Sleep    5sec
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nSuccessfully logged into the server
    Sleep    10sec
    Telnet.Write    powershell
    Log to console  \n${detlete_team_cmd}
    Telnet.Write    ${detlete_team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Log to Console   \nout is ${stdout}
    Telnet.Close Connection
    Telnet.Close All Connections
    Log to Console    \nteaming deleted

Clean OV
    [Documentation]         Cleans the appliance
    Log to console and logfile    \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets