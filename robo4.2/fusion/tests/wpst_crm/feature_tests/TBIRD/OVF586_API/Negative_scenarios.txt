*** Settings ***
Documentation       OVF586_Negative_Scenarios
Variables       data_variables_72.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource        ../../../../resource/fusion_api_all_resource_files.txt
Library         Collections
Library         Telnet
Suite Teardown  Clean OV


*** Test Cases ***
Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Clean OV

Create Networks
    [Documentation]    Create ethernet Networks
    Log to console    \n-Creating Ethernet Networks
    :FOR   ${ethnet}   IN   @{ethnets}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nEthernet Network got created successfully

Create Network Sets
    [Documentation]    Create Network Sets
    ${nw_sets_resp}    Add Network Sets from variable    ${network_sets}
    Run Keyword If  '${nw_sets_resp['status_code']}' != '202'  Fail    ELSE  log to console  \nNetwork set got created successfully

Create LIG, EG and LE
    [Documentation]    Create LIG, EG and LE
    Log to console  \n Creating LIG
    ${lig_resp}    Add LIG from variable   ${LIGS_TB[0]}
    Run Keyword If  '${lig_resp['status_code']}' != '200'   fail    ELSE    Log to Console  \n-LIG Got created successfully

    Log to console  \n Creating EG
    ${Resp}    Add Enclosure Group from variable        ${enc_group}
    Log to console  \n Creating LE ${Resp}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully

    Log to console  \n Creating LE
    ${Resp}    Add Logical Enclosure from variable     ${les}
    Run Keyword If  '${Resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-created LE successfully

Scenario_1:
    [Documentation]    Verify when trying to create/edit LAG , with both the connections having different requested bandwidth,Server profile create/edit should throw an error message

    Log to console    \n Creating server profile with LAG both the connections having different requested bandwidth
    ${task}    Add Server Profiles from variable    ${sp_diff_bandwidth}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_BANDWIDTH_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    Editing LAG with both the connections having different requested bandwidth
    ${task}    Edit Server Profiles from variable    ${sp_diff_bandwidth}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_BANDWIDTH_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    Remove All Server Profiles

Scenario_2:
    [Documentation]    Verify when the connections in a LAG are on different adapters ,Server profile create/edit should  throw an error message

    Log to console    \n Creating server profile with LAG both the connections having different requested bandwidth
    ${task}    Add Server Profiles from variable    ${sp_diff_adapters}
    Run Keyword If  '${task['taskErrors'][1]['errorCode']}' == 'MISMATCH_SUBPORT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][1]['errorCode']} \nDetails: ${task['taskErrors'][1]['message']}\n
    ...             ELSE    FAIL


    # Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    #Editing LAG with  both the connections having different requested bandwidth
    ${task}    Edit Server Profiles from variable    ${sp_diff_adapters}
    Run Keyword If  '${task['taskErrors'][1]['errorCode']}' == 'MISMATCH_SUBPORT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][1]['errorCode']} \nDetails: ${task['taskErrors'][1]['message']}\n
    ...             ELSE    FAIL

    Remove All Server Profiles

Scenario_3.1:
    [Documentation]    Verify  when different network are used in the same LAG by POST/PUT method, Server profile create/edit should throw an error message

    Log to console    \n Creating server profile with LAG both the connections having different requested bandwidth
    ${task}    Add Server Profiles from variable    ${sp_diff_networks}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL


    # Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    #Editing LAG with  both the connections having different requested bandwidth
    ${task}    Edit Server Profiles from variable    ${sp_diff_networks}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    Remove All Server Profiles

Scenario_3.2:
    [Documentation]    Verify  when different network sets are used in the same LAG by POST/PUT method, Server profile create/edit should throw an error message

    Log to console    \n Creating server profile with LAG both the connections having different requested bandwidth
    ${task}    Add Server Profiles from variable    ${sp_diff_networks_sets[0]}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL


    # Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${sp_diff_networks_sets[1]}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    #Editing LAG with  both the connections having different requested bandwidth
    ${task}    Edit Server Profiles from variable    ${sp_diff_networks_sets[0]}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'MISMATCH_NETWORK_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    Remove All Server Profiles

Scenario_4:
    [Documentation]    Verify when only one connection is used in a LAG by POST method, Server profile create should throw an error message

    #Creating server profile with only one connection in a LAG
    ${task}    Add Server Profiles from variable    ${sp_one_lag}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CONNECTIONS_PER_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

Scenario_5:
    [Documentation]    Verify when server profile is edited and only one connection is used in a LAG by PUT method,Server profile Edit should throw an error message

    # Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    #Editing server profile with one lag
    ${task}    Edit Server Profiles from variable    ${sp_one_lag}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CONNECTIONS_PER_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

Scenario_6:
    [Documentation]    Verify creating a LAG using uplinkports from 2 different LIGs by POST/PUT method
    Clean OV
    Log to console    \n-Creating Ethernet Networks
    :FOR   ${ethnet}   IN   @{ethnets}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nEthernet Network got created successfully

    :FOR   ${LIGs}   IN   @{LIGS_Aside_Bside}
    \   Log to console  \n Creating LIG
    \   ${lig_resp}    Add LIG from variable   ${LIGs}
    \   Run Keyword If  '${lig_resp['status_code']}' != '200'   fail    ELSE    Log to Console  \n-LIG Got created successfully

    Log to console  \n Creating EG
    ${Resp}    Add Enclosure Group from variable        ${enc_group1}
    Log to console  \n Creating LE ${Resp}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully

    Log to console  \n Creating LE
    ${Resp}    Add Logical Enclosure from variable     ${LE}
    Run Keyword If  '${Resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-created LE successfully

    #Creating server profile using uplinkports from 2 different LIGs  by POST method
    ${task}    Add Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'NOT_SAME_LOGICAL_INTERCONNECT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL


    # Creating profile with two LAG connections
    ${task}    Add Server Profiles from variable    ${sp_1}
    Run Keyword If  '${task['status_code']}' == '200'    Log to console  \n Server profile created successfully. \nStatus Code: ${task['status_code']}
    ...             ELSE    FAIL

    #Editing server profile using uplinkports from 2 different LIGs by POST method
    ${task}    Edit Server Profiles from variable    ${Server_profile1}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'NOT_SAME_LOGICAL_INTERCONNECT_LAG_VIOLATION_ERROR'    Log to console  \n Expected FAILure! \n\nError: ${task['taskErrors'][0]['errorCode']} \nDetails: ${task['taskErrors'][0]['message']}\n
    ...             ELSE    FAIL

    Remove All Server Profiles

***Keywords***
Add Server Profiles from variable
    [Documentation]    Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}   ${timeout}=15m    ${interval}=10s   ${endstate}=((?i)Warning|Completed|Error)    ${param}=?force=ignoreServerHealth
    fusion_api_appliance_setup.Log to console and logfile   Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    fusion_api_appliance_setup.Copy Dictionary     ${profile}
        \       ${space} =   Check For Whitespace From String   ${profile['name']}
        \       Run Keyword If   ${space} is ${True}   Fail   msg=Profile name contains whitespace. This is not allowed in CI-FIT naming convention.
    \   ${shuri} =  Get from Dictionary    ${profile}    serverHardwareUri
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   ${eg} =     Get from Dictionary    ${profile}    enclosureGroupUri
    \   @{words} =  Split String    ${eg}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${uri} =    Get Enclosure Group URI    ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    \   @{words} =  Split String    ${enc}  :
    \   ${type} =   Get From List   ${words}    0
    \   ${enc} =    Get From List   ${words}    1
    \   ${uri} =    Get Enclosure URI   ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${profile} =    Update connections in profile    ${profile}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}
    \   ${task} =   fusion_api_appliance_setup.Wait For Task    ${resp}     timeout=${timeout}      interval=${interval}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   Should Match Regexp    ${task_state}    ${endstate}
    [Return]    ${task}

Edit Server Profiles from variable

    [Documentation]    Edits Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}
    Log to console and logfile      Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   Log to console  \n${profile}
    \   ${shuri} =  Get from Dictionary    ${profile}    serverHardwareUri
    \   Log to console  \nshuri ${shuri}
    \   ${uri_harware} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri_harware}
    \   Log to console  \nuri_harware ${uri_harware}
    \   Log to console  \nprofile ${profile}
    \   ${eg} =     Get from Dictionary    ${profile}    enclosureGroupUri
    \   @{words} =  Split String    ${eg}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${uri} =    Get Enclosure Group URI    ${eg}
    \   Log to console  \neguri ${uri}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    \   @{words} =  Split String    ${enc}  :
    \   ${type} =   Get From List   ${words}    0
    \   ${enc} =    Get From List   ${words}    1
    \   ${uri} =    Get Enclosure URI   ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${profile} =    Update connections in profile    ${profile}
    \   ${profiles} =     Fusion Api Get Server Profiles    param=?filter="'name'=='${profile['name']}'"
    \   ${uri}      Get From Dictionary      ${profiles['members'][0]}    uri
    \   Set to Dictionary   ${profile}  uri     ${uri}
    \   Log to console  \nprofile ${profiles}
    \   ${etag} =   Get From Dictionary    ${profiles['members'][0]}   eTag
    \   Log to console  \netag ${etag}
    \   Set to Dictionary   ${profile}    eTag     ${etag}
    \   Log to console  \nprof ${profile}
    \   ${resp} =   Fusion Api Edit Server Profile      body=${profile}     uri=${uri}
    \   Log to console and logfile  ${resp}
    \   ${task} =   Wait For Task   ${resp}     timeout=13 mins     interval=10s
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   Log to console and logfile  ${task}
    \   Should Match Regexp    ${task_state}   ((?i)Warning|Completed|Error)
    [Return]    ${task}


Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users