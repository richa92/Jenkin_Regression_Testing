*** Settings ***
Documentation   Verify Power off/on the potash modules
Variables       data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         Telnet
Library         String
Resource        ../../../../resource/fusion_api_all_resource_files.txt
Library         data_variables
Library         backping.py
Library         Dialogs
Suite Teardown   Clean OV

*** Variables ***
${APPLIANCE_IP}              15.245.131.62
${number1}                   2
${number}                    5
${flag}                      Windows
${Port_status_trap_name}     Lost
${ping_file0}    ping_serverip0.txt
${ping_file1}    ping_serverip1.txt
${ping_file2}    ping_serverip2.txt
${ping_file3}    ping_serverip3.txt
${ping_file4}    ping_serverip4.txt
${Ping_Lost}    Lost
${team0}    ping_teamip0.txt
${team1}    ping_teamip1.txt

*** Test Cases ***

Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

    Clean OV
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task    ${resp}    60s    20s

Create ethernet network
    [Documentation]    Create ethernet network
    Add ethernet Networks       @{Enet}

Create LIG, EG and LE
    [Documentation]    Create LIG, EG and LE
    Log to console  \n Creating LIG
    ${lig_resp}    Add LIG from variable   ${LIGS_TB[2]}
    Run Keyword If  '${lig_resp['status_code']}' != '200'   fail    ELSE    Log to Console  \n-LIG Got created successfully

    Log to console  \n Creating EG
    ${Resp}    Add Enclosure Group from variable        ${enc_group}
    Log to console  \n Creating LE ${Resp}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully

    Log to console  \n Creating LE
    ${Resp}    Add Logical Enclosure from variable     ${les}
    Run Keyword If  '${Resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-created LE successfully

Create server Profiles Template
    [Documentation]    Create server Profiles
    Add Server Profile Templates from variable    ${SP_template}
    Add Server Profiles with server template    ${Server_profile1_temp}
    Log to console  \n Server profiles created successfully
    Power on server     ${Server_profile1_temp[0]['serverHardwareUri']}
    Log to console    \n Power on servers
    Log to console    \n Waiting 10 minutes for the server to boot
    Sleep   10min

Verifying alert message on server profile page
    [Documentation]    Verifying alert message on server profile page
    ${Alert_msg}    Get Server profile Alerts
    ${Count_2}=    Get Length    ${Alert_msg}
    Run Keyword If  '${Count_2}' != '2'  Fail    ELSE  log to console   \n-Verified the alerts msg of server profiles

Geting server ip's and checking if IP's are pinging
    [Documentation]    Geting server ip's and checking if IP's are pinging
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${l} =    Get Length    ${serverip_List1_global}
    Set Global Variable    ${iplength}    ${l}
    Log to console    \n pinging started
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \    startthread    ${number}    ${serverip_List1_global[${x}]}    ${ping_file${x}}    ${flag}
    \    Sleep    30
    \    ${contents}=    OperatingSystem.Get File    ${ping_file${x}}
    \    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log to Console    \ncontents are ${Lines}
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log to Console     ${ret1}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \n 0 percent packet loss is observed
    Log to Console     All the IP's are reachable

Get MAC Address of the server & Windows Teaming
    [Documentation]    Get MAC Address of the server & Windows Teaming
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${resp} =    Fusion Api Get Server Profiles
    ${mac_addr_list}=   Create List
    ${mac} =    Get Profile Details    ${resp}    ${Server_profile1_temp[0]['name']}
    ${mac_length} =    Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address} =    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    ${ip_length} =    Get Length    ${serverip_List1_global}
    Log to Console    \n mac address ${mac_addr_list}

    #Compare mac address with server
    ${adapter_name_list}=   Create List
    :FOR    ${x}    IN RANGE    ${ip_length}
    \   ${replaced_cmd} =   Replace String Using Regexp    ${Powershell_get_mac}    pppppppp      ${mac_addr_list[${x}]}
    \   #calling Get Mac Address from server
    \   Log to console  \n the server details is ${server_details_enc1_bay1}
    \   Log to console  \n the ip is ${serverip_List1_global[${x}]}
    \   ${output}    Get Mac Address from server    ${server_details_enc1_bay1}    ${serverip_List1_global[${x}]}    ${replaced_cmd}
    \   ${string}    Convert To String    ${output}
    \   ${match}   ${adapter_name}    Should Match Regexp    ${string}   ----\\s+(.*)\\s+PS
    \   Append to List   ${adapter_name_list}   ${adapter_name}
    Log to console  \nadapter names lsit${adapter_name_list}
    Create Teaming windows     ${adapter_name_list[0]}    ${adapter_name_list[1]}   ${Powershell_get_mac1}    ${server_details_enc1_bay1}    ${serverip_List1_global[1]}
    Create Teaming windows     ${adapter_name_list[2]}    ${adapter_name_list[3]}   ${Powershell_get_mac2}    ${server_details_enc1_bay1}    ${serverip_List1_global[1]}

Verify if IP is pinging after teaming
    [Documentation]    Verify if IP is pinging after teaming
    ${ip_team}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_ip}    ${ip_team}
    ${iplength} =    Get Length    ${Team_ip}
    log to console  \n pinging started
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \    startthread    ${number}    ${Team_ip[${x}]}    ${team${x}}    ${flag}
    \    Sleep    30sec
    \    ${contents}=    OperatingSystem.Get File    ${team${x}}
    \    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log to Console    \ncontents are ${Lines}
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log to Console     ${ret1}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log to console  \npinging happend with 0loss percentage
    Log to Console     successfully pinged  ip's

Verifying alert message on server profile page after teaming
    [Documentation]    Verifying alert message on server profile page after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '0'  Fail    ELSE  log to console   \n-Verified the alerts msg of server profiles

Removing Teaming on server profile1
    [Documentation]    Removing Teaming on server profile1 and deleting the profile
    ${iplength} =    Get Length    ${Team_ip}
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \   Log to console  \n deleting teaming${Team_ip[${x}]}
    \   Delete Windows Teaming    ${Team_ip[${x}]}    ${server_details_enc1_bay1}    ${detlete_team_cmd${x}}
    \   Sleep    120sec
    \   ${output}    Verify Team Status    ${Team_ip[${x}]}    ${server_details_enc1_bay1}    ${team_status_cmd${x}}
    \   Log to Console    \nstat is ${output}
    \   ${match}   ${status}    Should Match Regexp    ${output}    (FullyQualifiedErrorId\\s+:\\s+CmdletizationQuery_NotFound_Name)

***Keywords***
Add Server Profile Templates
    [Documentation]    Adds Server Profile Templates to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}
    fusion_api_appliance_setup.Log to console and logfile   Adding SERVER PROFILE TEMPLATES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    fusion_api_appliance_setup.Copy Dictionary     ${profile}
    \   ${sht} =    Get from Dictionary ${profile}  serverHardwareTypeUri
    \   @{words} =  Split String    ${sht}  :
    \   ${type} =   Get From List   ${words}    0
    \   ${sht} =    Get From List   ${words}    1
    \   ${uri} =    Get Server Hardware Type URI        ${sht}
    \   Set to Dictionary   ${profile}  serverHardwareTypeUri   ${uri}
    \   ${eg} =     Get from Dictionary ${profile}  enclosureGroupUri
    \   @{words} =  Split String    ${eg}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${uri} =    Get Enclosure Group URI ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${profile_body}    Get Variable Value    ${profile}
    \   ${connection1}     Get From Dictionary    ${profile_body}    connections
    \   Remove From Dictionary              ${profile}        connections
    \   ${connections} =    Lookup Connection Uris  ${connection1}
    \   ${Con_dictionary} =    Create Dictionary    connections=${connections}
    \   Set To Dictionary    ${profile}    connectionSettings=${Con_dictionary}
    \   log to console    \n the body1111111 is :${profile}\n
    \   ${resp} =   Fusion Api Create Server Profile template       body=${profile}
    \   # TODO: Change timeout!
    \   ${task} =   fusion_api_appliance_setup.Wait For Task    ${resp}     timeout=1 mins      interval=10s
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   Should Match Regexp ${task_state}   ((?i)Warning|Completed)


Get Server Profile Template URI
    [Documentation]    Get Server Profile Template URI
    [Arguments]     ${sp_temp}
    ${resp} =    fusion_api_get_server_profile_templates    param=?filter="'name'=='${sp_temp}'"
    ${uri} =    Get From dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Add Server Profiles with server template
    [Documentation]    Add Server Profiles with server template
    [Arguments]     ${profiles}
    Log to console and logfile      Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   Log to console and logfile  ${profile}
    \   ${shuri} =  Get from Dictionary ${profile}  serverHardwareUri
    \   Log to console and logfile  ${shuri}
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   ${STuri} =  Get from Dictionary ${profile}  serverProfileTemplateUri
    \   Log to console and logfile  ${STuri}
    \   ${uri} =    Get Server Profile Template URI     ${STuri}
    \   Set to Dictionary   ${profile}  serverProfileTemplateUri    ${uri}
    \   Log to console and logfile  ${uri}
    \   ${eg} =     Get from Dictionary ${profile}  enclosureGroupUri
    \   @{words} =  Split String    ${eg}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${uri} =    Get Enclosure Group URI ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${profile} =    Update connections in profile    ${profile}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}
    \   Log to console and logfile  ${resp}
    \   ${task} =   Wait For Task   ${resp}     timeout=13 mins     interval=10s
    \   Log to console and logfile  ${task}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   Log to console and logfile  ${task}
    \   Should Match Regexp ${task_state}   ((?i)Warning|Completed)

Add ethernet Networks
    [Documentation]    Add ethernet Networks
    [Arguments]     @{enets}
    Log to console and logfile    \n-Adding enet Networks
    :FOR   ${enet}   IN   @{enets}
    \       ${resp} =    fusion api create ethernet network   body=${enet}
    \       ${task} =   Wait For Task   ${resp}     60s    2s

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile    \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Delete Windows Teaming
    [Documentation]    Delete Windows Teaming
    [Arguments]         ${team_ip}    ${windows_server_details}    ${detlete_team_cmd}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Log to console  \nSuccessfully opened connection to the server
    Telnet.Write    a
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nSuccessfully logged into the server
    Sleep    10sec
    Telnet.Write    powershell
    Log to console  \n${detlete_team_cmd}
    Telnet.Write    ${detlete_team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Log to Console   \nout is ${stdout}
    Telnet.Close Connection
    Telnet.Close All Connections
    Log to Console    \nteaming deleted

Get Server profile Alerts
    [Documentation]    Get Server profile Alerts
    ${y} =    Set Variable    0
    ${Alert_msg} =    Create List
    ${resp} =    Fusion Api Get Alerts   /rest/alerts?filter="alertState EQ 'Active'"
    ${mem_resp} =    Get From Dictionary    ${resp}    members
    ${len} =     Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0    ${len}
    \   Run Keyword If  '${mem_resp[${x}]['alertTypeID']}' !='crm.connectionStateChange'    Continue For Loop
    \   ${desc}=    Get From Dictionary    ${mem_resp[${x}]}    description
    \   Log to console and logfile  description'${desc}'
    \    ${match}   ${status}    Should Match Regexp    ${desc}    (Connection\\s+on\\s+downlink\\s+port\\s+\\d+\\,.*LAG\\d+.)
    \  Append To List    ${Alert_msg}    ${desc}
    \  ${y} =    Evaluate    ${y} + 1
    \   Log to console    ${status}
    Log to console and logfile   ${Alert_msg}
    [Return]    ${Alert_msg}

Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    Log to Console    \nstdout is ${ilo_details}
    ${serverip_List}=   Create List
    ${serverip_List1}=   Create List
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log to Console    \nstdout is ${stdout}
    ${cmd_output}=    Get Regexp Matches    ${stdout}    Ip=10\\.\\d+\\.\\d+\\.\\d+
    Log to Console    \nstdout is ${cmd_output}
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    Log to console    ip is ${ip_lists}
    \    Append To List   ${ip_list_new}    ${ip_lists}
    Log to Console    \n IP's are is ${ip_list_new}
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}


Telnet And Ping External Host From Server
    [Documentation]    Pinging the external host ip from server
    [Arguments]         ${windows_server_details}    ${host_ip}
    Telnet.Open Connection     ${windows_server_details['windows_ip']}     prompt=>     timeout=20s
    ${login}    Telnet.Login    ${windows_server_details['username']}    ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Telnet.Write    ping -t ${host_ip}
    Sleep    10sec
    ${out}    Telnet.Read
    Log to Console    \nout is ${out}
    Should Contain    ${out}    TTL=
    Telnet.Close Connection
    Telnet.Close All Connections

Get Profile Details
    [Documentation]    Get Profile Details
    [Arguments]                  ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${y} =    Set Variable    ${resp['members'][${x}]['connectionSettings']}
    \   ${mac_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get Mac address Of Server Profile    ${y['connections']}
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]            ${mac_address}

Get Mac address Of Server Profile
    [Documentation]    Get Mac address Of Server Profile
    [Arguments]                  ${connections}
    ${mac_address} =    Create List
    ${connection_length} =    Get Length    ${connections}
    :FOR    ${x}    IN RANGE    ${connection_length}
    \   Append To List   ${mac_address}    ${connections[${x}]['mac']}
    [return]            ${mac_address}

Get Mac Address from server
    [Documentation]    Get Mac Address from server
    [Arguments]         ${server_details}    ${IP}    ${Powershell_get_mac}
    Telnet.Open Connection     ${IP}     prompt=>     timeout=30s
    Sleep    5sec
    Telnet.Write    a
    ${login}    Telnet.Login               ${server_details['username']}    ${server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nLogged in to server
    Sleep    10sec
    ${out}    Telnet.Read
    Telnet.Write    Powershell
    Sleep    5sec
    Telnet.Write    ${Powershell_get_mac}
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}

Create Windows Teaming
    [Documentation]    Create Windows Teaming
    [Arguments]         ${server_ip}    ${server_details}    ${team_cmd}
    Telnet.Open Connection     ${server_ip}     prompt=>     timeout=20s
    Log to console  \nSuccessfully opened connection to the server
    Telnet.Write    a
    ${login}    Telnet.Login               ${server_details['username']}     ${server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nSuccessfully logged into the server
    Sleep    10sec
    Telnet.Write    powershell
    Log to console  \n${team_cmd}
    Telnet.Write    ${team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    Log to Console    \nteaming completed

Create Teaming windows
    [Documentation]    Create Teaming windows
    [Arguments]         ${adapter_name_1}   ${adapter_name_2}    ${Powershell_get_mac1}    ${windows_server_details}    ${serverip_List1_global[1]}
    ${tmp}    Remove Whitespace   ${adapter_name_1}
    ${tmp1}    Remove Whitespace   ${adapter_name_2}
    ${replaced_cmd1} =  Replace String Using Regexp    ${Powershell_get_mac1}    pppp    ${tmp}
    Log to Console  \nstrafter strip is${tmp}
    Log to Console  \nreplaced_cmd1 is${replaced_cmd1}
    ${replaced_cmd2} =  Replace String Using Regexp    ${replaced_cmd1}    qqq    ${tmp1}
    Log to Console  \nstr is${replaced_cmd2}
    Create Windows Teaming   ${serverip_List1_global[1]}    ${windows_server_details}    ${replaced_cmd2}

Verify Team Status
    [Documentation]    Verify Team Status
    [Arguments]         ${team_ip}    ${server_details}    ${team_status_cmd}
    Log to console  \nSuccessfully opened connection to the server ${team_ip}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Log to console  \nSuccessfully opened connection to the server
    Telnet.Write    a
    ${login}    Telnet.Login               ${server_details['username']}     ${server_details['password']}    login_prompt=login:    password_prompt=password:
    Log to console  \nSuccessfully logged into the server
    Sleep    10sec
    Telnet.Write    powershell
    Log to console  \n${team_status_cmd}
    Telnet.Write    ${team_status_cmd}
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Log to Console   \nout is ${stdout}
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}