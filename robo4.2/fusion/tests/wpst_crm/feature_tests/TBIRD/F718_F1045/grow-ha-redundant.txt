*** Settings ***
Documentation		Feature Test: Grow User Story Test
Variables 			./data_common.py
Resource            ../../../../../resources/api/fusion_api_resource.txt
Resource            ../FVT/fvt-keywords.txt
Resource			../FVT/Resources/fvt_resource.txt	

Library				FusionLibrary
Library				../FVT/fvt_api.py

*** Variables ***
${LIG1}					Enc1-LIG
${LIG2}					Enc2-LIG
${LIG3}					Enc3-LIG
${LIG4}					Enc4-LIG
${LIG5}					Enc5-LIG
${EG1}					Enc1-EG
${EG2}					Enc2-EG
${EG3}					Enc3-EG
${EG4}					Enc4-EG
${EG5}					Enc5-EG
${LE}					Grow-LE

*** Keywords ***
Perform Basic Functions
	[Arguments]	${LI}	${FROM}
	#FVT Edit Telemetry Configurations Of LI	${LE}	${LI}	${telemetry}	${FROM}
	FVT Edit Ethernet Settings Of LI	${LE}	${LI}	${ethernet_setting}	${FROM}
	FVT Add Uplink Set To LI	${LE}	${LI}	${add_uplink_set}	${FROM}
	#FVT Edit Uplink Set Of LI	${LE}	${LI}	${edit_uplink_set}	${FROM}
	#FVT Delete Uplink Set From LI	${LE}	${LI}	${uplink_set}	${FROM}
	Log To Console	Finished Perform Basic Functions
	[Return]
	
*** Test Cases ***
Login In User
	Set Log Level	TRACE
	Should Not Be Equal As Strings	${CONFIG}	NonRedundant 
	Fusion Api Login Appliance	${appliance_ip}	${admin_credentials}
	Pass Execution	Finished Login User
	
Create Ethernet Networks
	Pass Execution	Skip Create Ethernet Networks
	Create Ethernet Networks	${ethernet_networks}
	Pass Execution	Finished Create Ethernet Networks

Create Logical Enclosure
	#Pass Execution	Skip Create Logical Enclosure
	${LIG} =	Set Variable if	'${CONFIG}' == 'HA'	${LIG2}	${LIG1}
	Add Logical Interconnect Group	${ligs['${LIG}']}	timeout=10m	interval=1s
	${EG} =	Set Variable if	'${CONFIG}' == 'HA'	${EG2}	${EG1}	
	FVT Add Enclosure Group	${enc_group['${EG}']}
	Add Logical Enclosure	${les['${LE}']}	timeout=90m	interval=1m
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['name']}	${LE}
	Should Be Equal As Strings	${resp['status']}	OK
	Should Be Equal As Strings	${resp['state']}	Consistent
	${LI} =	Set Variable if	'${CONFIG}' == 'HA'	${LE}-${LIG2}	${LE}-${LIG1}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${EncMap} =	Set Variable if	'${CONFIG}' == 'HA'	Enc2Map	Enc1Map	
	FVT Verify Interconnects	${EncMap}
	Perform Basic Functions	${LI}	LI	
	Pass Execution	"Finished Create Logical Enclosure ${LE}"

Grow Ligical Enclosure From 1 To 2 Enclosures
	Pass Execution if	'${CONFIG}' == 'HA'	Skip HA Grow From 1 To 2 Enclosures
	#Pass Execution	Skip Grow From 1 To 2 Enclosures
	Add Logical Interconnect Group	${ligs['${LIG2}']}	timeout=10m	interval=1s
	FVT Add Enclosure Group		${enc_group['${EG2}']}
	
	fvt-keywords.Edit Logical Enclosure	${les['Grow-LE-1-To-2']}	10min	1sec
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	Pause Execution		### Waiting for cabling
	${resp}=	Update From Group On Logical Enclosure	${resp['uri']}	${logical_enclosure_grow['Grow-1-To-2']}	timeout=60 m	interval=5 s
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent

	${LI} =	Set Variable	${LE}-${LIG2}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	FVT Verify Interconnects	Enc2Map
	Perform Basic Functions	${LI}	LI
	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-${LIG1}
	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted ###
	FVT Delete Enclosure Group	${EG1}
	FVT Delete Logical Interconnect Group	${LIG1}
	Pass Execution	Finished Grow From 1 To 2 Enclosures
	
Grow Ligical Enclosure From 2 To 3 Enclosures
	Pass Execution if	'${CONFIG}' == 'Redundant_To_HA'	Skip RD To HA Grow From 2 To 3 Enclosures
	#Pass Execution	Skip Grow From 2 To 3 Enclosures
	Add Logical Interconnect Group	${ligs['${LIG3}']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['${EG3}']}

	fvt-keywords.Edit Logical Enclosure	${les['Grow-LE-2-To-3']}	10min	1sec
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	Pause Execution		### Waiting for cabling
	${resp}=	Update From Group On Logical Enclosure	${resp['uri']}	${logical_enclosure_grow['Grow-2-To-3']}	timeout=60 m	interval=5 s
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent

	${LI} =	Set Variable	${LE}-${LIG3}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	FVT Verify Interconnects	Enc3Map
	Perform Basic Functions	${LI}	LI

	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-${LIG2}
	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted ###	
	FVT Delete Enclosure Group	${EG2}
	FVT Delete Logical Interconnect Group	${LIG2}
	Pass Execution	Finished Grow From 2 To 3 Enclosures"
	
Grow Ligical Enclosure From 3 To 4 Enclosures
	Pass Execution if	'${CONFIG}' == 'Redundant_To_HA'	Skip RD To HA Grow From 3 To 4 Enclosures
	Pass Execution if	'${CXP}' == 'CL20'	Skip CL20 Grow From 3 To 4 Enclosures
	#Pass Execution	Skip Grow From 3 To 4 Enclosures
	Add Logical Interconnect Group	${ligs['${LIG4}']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['${EG4}']}

	fvt-keywords.Edit Logical Enclosure	${les['Grow-LE-3-To-4']}	10min	2sec
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	Pause Execution
	${resp} =	Update From Group On Logical Enclosure	${resp['uri']}	${logical_enclosure_grow['Grow-3-To-4']}	timeout=60 m	interval=5 s
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent

	${LI} =	Set Variable	${LE}-${LIG4}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	FVT Verify Interconnects	Enc4Map
	Perform Basic Functions	${LI}	LI
	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-${LIG3}	
	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted ###
	FVT Delete Enclosure Group	${EG3}
	FVT Delete Logical Interconnect Group	${LIG3}
	Pass Execution	Finished Grow From 3 To 4 Enclosures

Grow Ligical Enclosure From 4 To 5 Enclosures
	Pass Execution if	'${CONFIG}' == 'Redundant_To_HA'	Skip RD To HA Grow From 4 To 5 Enclosures
	Pass Execution if	'${CXP}' == 'CL20'	Skip CL20 Grow From 4 To 5 Enclosures
	#Pass Execution	Skip Grow rom 4 To 5 Enclosures
	Add Logical Interconnect Group	${ligs['${LIG5}']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['${EG5}']}

	fvt-keywords.Edit Logical Enclosure	${les['Grow-LE-4-To-5']}	10min	2sec
	Sleep	1s
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	Pause Execution
	${resp} =	Update From Group On Logical Enclosure	${resp['uri']}	${logical_enclosure_grow['Grow-4-To-5']}	timeout=60 m	interval=5 s
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent

	${LI} =	Set Variable	${LE}-${LIG5}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	FVT Verify Interconnects	Enc5Map
	Perform Basic Functions	${LI}	LI
	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-${LIG4}
	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted ###
	FVT Delete Enclosure Group	${EG4}	
	FVT Delete Logical Interconnect Group	${LIG4}
	Pass Execution	Finished Grow From 4 To 5 Enclosures
	
Clean Up
	Pass Execution	Skip Clean Up
	Fvt Delete Logical Enclosure	${LE}

	### Ensure Logical Interconnect is Deleted ###
	${LI} =	Set Variable if	'${CXP}' == 'CL10'	${LE}-${LIG5}	${LE}-${LIG3}
	${LI} =	Set Variable if	'${CONFIG}' == 'Redundant_To_HA'	${LE}-${LIG2}	${LI}	
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LI}
	Should Be Equal As Strings	${resp}	None

	### Delete Enclosure Groups ###
	${EG} =	Set Variable if	'${CXP}' == 'CL10'	${EG5}	${EG3}	
	${EG} =	Set Variable if	'${CONFIG}' == 'Redundant_To_HA'	${EG2}	${EG}	
	FVT Delete Enclosure Group	${EG}

	### Delete Logical Interconnect Groups ###
	${LIG} =	Set Variable if	'${CXP}' == 'CL10'	${LIG5}	${LIG3}	
	${LIG} =	Set Variable if	'${CONFIG}' == 'Redundant_To_HA'	${LIG2}	${LIG}	
	FVT Delete Logical Interconnect Group	${LIG}
	Pass Execution	Finished Clean Up
