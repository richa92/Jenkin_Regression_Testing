*** Settings ***
Documentation		Grow Features Negative Tests - SuiteName: Grow Negative
Resource            ../../../../../resources/api/fusion_api_resource.txt
Resource            ../FVT/fvt-keywords.txt
Resource			../FVT/Resources/fvt_resource.txt	

Library				FusionLibrary
Library				../FVT/fvt_api.py

Suite Setup			Login User

*** Keywords ***
Login User
	[Documentation]	Login User Administrator
 	Set Log Level	TRACE
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	Pass Execution	Finished Login User
	
*** Test Cases ***
Create Ethernet Networks
	#Pass Execution	Skip Create Ethernet Networks
	Create Ethernet Networks	${ethernet_networks}
	Pass Execution	Finished Create Ethernet Networks
	
Create Logical Enclosure
	#Pass Execution	Skip Create Logical Enclosure
	Add Logical Interconnect Group	${ligs['Enc2-LIG']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['Enc2-EG']}
	Add Logical Enclosure	${les_neg['Grow-LE']}	timeout=90m	interval=1m
	${resp}	Fvt Api Get Logical Enclosure By Name	Grow-LE
	Should Be Equal As Strings	${resp['name']}	Grow-LE
	Should Be Equal As Strings	${resp['status']}	OK
	Should Be Equal As Strings	${resp['state']}	Consistent
	
	${resp}	Fvt Api Get Logical Interconnect BY Name	Grow-LE-Enc2-LIG
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	Pass Execution	Finished Create Logical Enclosure Grow-LE
	
HA To Non Redundant 
	#Pass Execution	Skip HA To Non Redundant
	Pass Execution if	'${CONFIG}' != 'HA'	Skip Test If Not HA Configuration
	Add Logical Interconnect Group	${ligs['Enc3A-LIG']}	timeout=10m	interval=1s
	Add Logical Interconnect Group	${ligs['Enc3B-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-NonRedundant-EG']}		
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3A-LIG
	FVT Delete Logical Interconnect Group	Enc3B-LIG
	Pass Execution	Finished HA To Non Redundant

HA To Redundant 
	#Pass Execution	Skip HA To Redundant
	Pass Execution if	'${CONFIG}' != 'HA'	Skip Test If Not HA Configuration
	Add Logical Interconnect Group	${ligs['Enc3-Redundant-LIG']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}		
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished HA To Redundant
	
Redundant To Non Redundant
	#Pass Execution	Skip Redundant To HA
	Pass Execution if	'${CONFIG}' != 'Redundant'	Skip Test If Not Redundant Configuration
	Add Logical Interconnect Group	${ligs['Enc3A-LIG']}	timeout=10m	interval=1s
	Add Logical Interconnect Group	${ligs['Enc3B-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-NonRedundant-EG']}		
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3A-LIG
	FVT Delete Logical Interconnect Group	Enc3B-LIG
	Pass Execution	Finished Redundant To Non Redundant

Redundant To HA
	#Pass Execution	Skip Redundant To Non Redundant
	Pass Execution if	'${CONFIG}' != 'Redundant'	Skip Test If Not Redundant Configuration
	Add Logical Interconnect Group	${ligs['Enc3-HA-LIG']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}		
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Redundant To HA
	
Enclosure Type Mismatch
	#Pass Execution	Skip Enclosure Type Mismatch
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-Enclosure-Type-Mismatch-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	Should Be Equal As Strings	${resp['errorCode']}	CRM_INVALID_EMBEDDED_APPLIANCE
	Should Be Equal As Strings	${resp['message']}	The logical interconnect group enclosure type is invalid in an embedded appliance.
	Pass Execution	Finished Enclosure Type Mismatch
	
Interconnect Bay Set Mismatch
	#Pass Execution	Skip Interconnect Bay Set Mismatch
	Add Logical Interconnect Group	${ligs['Enc32-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc32-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3-Wrong-IBS']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	

	FVT Delete Enclosure Group	Enc32-EG
	FVT Delete Logical Interconnect Group	Enc32-LIG
	Pass Execution	Finished Interconnect Bay Set Mismatch

Chloride Type Mismatch
	#Pass Execution	Skip Chloride Type Mismatch
	Add Logical Interconnect Group	${ligs['Enc3-CL20-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	

	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	

	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Chloride Type Mismatch

Chloride Type 40
	#Pass Execution	Skip Chloride Type 40
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-CL40-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	Should Be Equal As Strings	${resp['errorCode']}	CRM_BADLY_FORMED_URI
	Should Be Equal As Strings	${resp['message']}	Badly formed URI: '/permittedInterconnectTypeNotFound'
	Pass Execution	Finished Chloride Type 40

Missing Chloride 
	#Pass Execution	Skip Missing Chloride
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-Missing-CL10-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	Should Be Equal As Strings	${resp['errorCode']}	CRM_IBS_NOT_FULLY_POPULATED
	Should Be Equal As Strings	${resp['message']}	The bay location 3 of enclosure 3 does not contain an interconnect type.
	Pass Execution	Finished Missing Chloride

Extra Potash 
	#Pass Execution	Skip Extra Potash
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-Extra-Potash-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	Should Be Equal As Strings	${resp['errorCode']}	CRM_INTERCONNECT_TYPES_OVER_LIMIT
	Should Be Equal As Strings	${resp['message']}	The logical interconnect group contains 3 Virtual Connect SE 40Gb F8 Module for Synergy interconnect type.
	Pass Execution	Finished Extra Potash

Missing Potash 
	#Pass Execution	Skip Missing Potash
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-Missing-Potash-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	Should Be Equal As Strings	${resp['errorCode']}	CRM_IBS_NOT_FULLY_POPULATED
	${enc} =	Set Variable If	'${CONFIG}' == 'HA'	2	1
	Should Be Equal As Strings	${resp['message']}	The bay location 6 of enclosure ${enc} does not contain an interconnect type.
	Pass Execution	Finished Missing Potash

Potash In Different Location
	#Pass Execution	Skip Potash In Different Location
	${resp} =	Add Logical Interconnect Group	${ligs['Enc3-Potash-In-Different-Location-LIG']}
	Should Be Equal As Integers	${resp['status_code']}	400
	${errorCode} =	Set Variable If	'${CONFIG}' == 'HA'	CRM_HIGHLY_AVAILABLE_EXPECTED_INTERCONNECT_TYPE_MISSING_VIOLATION	CRM_INVALID_DUAL_SIDE_INTERCONNECT_COUNT	
	Should Be Equal As Strings	${resp['errorCode']}	${errorCode}
	${errorMsg} =	Set Variable If	'${CONFIG}' == 'HA'	A Virtual Connect SE 40Gb F8 Module for Synergy in bay 3 of enclosure 1 must be paired with the same interconnect type in bay 6 on enclosure 2 when redundancy type is Highly Available.	A Redundant logical interconnect group with more than 1 Virtual Connect SE 40Gb F8 Module for Synergy per side is invalid
	Should Be Equal As Strings	${resp['message']}	${errorMsg}
	Pass Execution	Finished Potash In Different Location
	
Missing Internal Networks
	#Pass Execution	Skip Missing Internal Networks
	Add Logical Interconnect Group	${ligs['Enc3-Missing-Internal-Network-LIG']}	timeout=10m	interval=1s		
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Missing Internal Networks

Uplink Set Missing
	#Pass Execution	Skip Uplink Set Missing
	Add Logical Interconnect Group	${ligs['Enc3-Missing-Uplinkset-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Uplink Set Missing

Uplink Set Name Change
	#Pass Execution	Skip Uplink Set Name Change
	Add Logical Interconnect Group	${ligs['Enc3-Uplinkset-Name-Change-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Uplink Set Name Change

Uplink Set Network Missing
	#Pass Execution	Skip Uplink Set Network Missing
	Add Logical Interconnect Group	${ligs['Enc3-Uplinkset-Network-Missing-LIG']}	timeout=10m	interval=1s	
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Uplink Set Network Missing

Uplink Set Port Missing
	#Pass Execution	Skip Uplink Set Port Missing
	Add Logical Interconnect Group	${ligs['Enc3-Uplinkset-Port-Missing-LIG']}	timeout=10m	interval=1s
	FVT Add Enclosure Group	${enc_group['Enc3-EG']}	
	${resp} =	fvt-keywords.Edit Logical Enclosure	${les_neg['Grow-LE-2-To-3']}	10min	1s
	:FOR	${taskerror}	IN	@{resp['taskErrors']}
	\	${errorCode} =	Get From Dictionary	${taskError}	errorCode
	\	Exit For Loop If	'${errorCode}' == 'VALIDATE_LE_REPARENT_FAIL'
	Should Be Equal As Strings	${errorCode}	VALIDATE_LE_REPARENT_FAIL	
	FVT Delete Enclosure Group	Enc3-EG
	FVT Delete Logical Interconnect Group	Enc3-LIG
	Pass Execution	Finished Uplink Set Port Missing

Clean Up
	#Pass Execution	Skip Clean Up
	### Delet Logical Enclosure ###
	Fvt Delete Logical Enclosure	Grow-LE

	### Ensure Logical Interconnect is Deleted ###
	${resp}	Fvt Api Get Logical Interconnect BY Name	Grow-LE-Enc2-LIG
	Should Be Equal As Strings	${resp}	None

	### Delete Enclosure Groups ###
	FVT Delete Enclosure Group	Enc2-EG
	
	### Delete Logical Interconnect Groups ###
	FVT Delete Logical Interconnect Group	Enc2-LIG
	Pass Execution	Finished Clean Up

