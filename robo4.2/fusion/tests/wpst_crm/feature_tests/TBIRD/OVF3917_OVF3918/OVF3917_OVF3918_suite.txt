*** Settings ***
Documentation    Carbon32 Eagle136 Interconnects Utilization SE
...              Carbon16 Eagle20 Interconnects Utilization SE
Library    json
Library    FusionLibrary
Library    RoboGalaxyLibrary
Library    Collections
Library    String
Library    BuiltIn
Library    Dialogs
Library    ic_utilization_module.py
#Variables    Eagle136_carbon32_data_variables.py
Variables    Eagle20_carbon16_data_variables.py
Resource         ../../../../../Resources/api/fusion_api_resource.txt
Suite Setup    Presetup

***Test Cases***
Fetch Interconnect Utilization values
    [Documentation]    Fetch Utilization values for Carbon Interconnects
    [Tags]    Utilization_values_carbon
    Log    \n Get Interconnects and isolate carbon IC's\n    console=True
    ${IC_uris}    Get IC uri Carbon ICM
    Set Global Variable    ${IC_uri_list}    ${IC_uris}

    :For    ${IC}    IN     @{IC_uri_list}
    \    ${output}    fetch_utilization_values    ${IC}
    \    Run Keyword Unless    '${output}' != 'False'    Fail    msg=Utilization values not obtained as expected

    :For    ${IC}    IN     @{IC_uri_list}
    \    ${resp}    Fusion Api Get Interconnect    uri=${IC}
    \    log    ${resp['interconnectHardwareHealth']}    console=True
    \    Run keyword unless  '${resp['interconnectHardwareHealth']}' == '${state}'    fail


ICM Poweroff/Poweron and verify Utilization and Health
    [Documentation]    Negative scenario Utilization values for Carbon Interconnects
    [Tags]    Neg_Utilization_Values_carbon
    Log    \n Get Interconnects and isolate carbon IC's\n    console=True

    :For    ${ICM}    IN    @{INTERCONNECTS_dto}
    \    Patch Interconnect    ${ICM}  op=replace  path=/powerState  value=Off  timeout=60
    \    Patch Interconnect    ${ICM}  op=replace  path=/powerState  value=On  timeout=60
    sleep    500s
    #Pause Execution

    :For    ${IC}    IN     @{IC_uri_list}
    \    ${resp}    Fusion Api Get Interconnect    uri=${IC}
    \    log    ${resp['interconnectHardwareHealth']}    console=True
    \    Run keyword unless  '${resp['interconnectHardwareHealth']}' == '${state}'    fail

    :For    ${IC}    IN     @{IC_uri_list}
    \    ${output}    fetch_utilization_values    ${IC}
    \    Run Keyword Unless    '${output}' != 'False'    Fail    msg=Utilization values not obtained as expected

Delete LE and verify Utilization and Health in Monitored mode
    [Documentation]    Negative scenario Utilization values for Carbon Interconnects
    [Tags]    Neg_Utilization_Values_carbon
    Log    \n Get Interconnects and isolate carbon IC's\n    console=True

    ${resp}    fusion_api_delete_logical_enclosure    name=${LES_name}
    log     ${resp}    console=True
    #Pause Execution


    :For    ${IC}    IN     @{IC_uri_list}
    \    ${resp}    Fusion Api Get Interconnect    uri=${IC}
    \    log    ${resp['interconnectHardwareHealth']}    console=True
    \    Run keyword unless  '${resp['interconnectHardwareHealth']}' == '${state}'    fail


    log    \n\n In monitored mode only Health should be available and other Utilization values should be null\n\n    console=True

    :For    ${IC}    IN     @{IC_uri_list}
    \    ${resp}    Fusion Api Get Interconnect    uri=${IC}    param=/utilization
    \    Verify monitored mode utilization    ${resp}



*** Keywords ***
Presetup
    [Documentation]    Creating presetup for LIG EG LE

    Set Log Level    TRACE
    ${Login_response}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless    ${Login_response[0]['status_code']}== 200    Fail    ${Login_response[0]['message']}

#Creating LIG,EG,LE
    ${lig_resp}    Add LIG from variable   ${LIG_new}
    ${Resp}    Add Enclosure Group from variable        ${enc_groups}
    ${Resp}    Add Logical Enclosure from variable     ${les}
    Log    Test Step-1 completed successfully    console=True


Get IC uri Carbon ICM
    [Documentation]    Fetch the Carbon ICM's uri for carbon 16, carbon32 and carbon TAA modules
    ${IC_uri_list}    Create List
    ${resp}    Fusion Api Get Interconnect
    :For    ${IC}    IN     @{resp['members']}
    \    Run Keyword If    '${IC['model']}' != '${IC_models[0]}' and '${IC['model']}' != '${IC_models[1]}' and '${IC['model']}' != '${IC_models[2]}'     Continue For Loop
    \    Run Keyword If    '${IC['name']}' != '${IC_NAMES[0]}' and '${IC['name']}' != '${IC_NAMES[1]}'     Continue For Loop
    \    Append to list    ${IC_uri_list}    ${IC['uri']}
    \    log    \nIC's :${IC_uri_list}\n    console=true
    [Return]    ${IC_uri_list}


Verify monitored mode utilization
    [Documentation]    Verify in monitored mode cpu memory values are absent
    [Arguments]    ${resp}
    log    ${resp['metricList']}    console=True
    ${length} =    Get Length     ${resp['metricList']}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    Run Keyword If    '${resp['metricList'][${z}]['metricName']}' == 'Cpu' or '${resp['metricList'][${z}]['metricName']}' == 'Memory'    Fail
    Log    \n\n cpu and memory Values Validated successfully when interconnects are in monitored mode\n    console=True