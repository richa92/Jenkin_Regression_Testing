*** Settings ***
Resource            ../fvt-keywords.txt
Library				FusionLibrary

*** Keywords ***
FVT Verify Interconnects
	[Documentation]	Verify Interconnects In Interconnect Mapping
	[Arguments]		${EncMap}
	Log	\n Verifying Interconnects In ${EncMap}	console=True
	:FOR	${ibmap}	in	@{${EncMap}}
	\	${enclosure} =	Get From Dictionary	${ibmap}	enclosure
	\	${bay} =	Get From Dictionary	${ibmap}	bay
	\	${resp}	FVT Api Get Interconnect By Name	${ENC_${enclosure}}, interconnect ${bay}
	\	Should Be Equal As Strings	${resp['name']}	${ENC_${enclosure}}, interconnect ${bay}
	\	Should Be Equal As Strings	${resp['state']}	Configured
	[Return]
	
FVT Verify Interconnects In LI
	[Documentation]	Verify Interconnects In LI
	[Arguments]		${LI}	
	Log	\n Verifying Interconnects In LI ${LI}	console=True	
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	:FOR	${interconnect}	IN	@{resp['interconnects']}
	\	${resp}	FVT Api Get Interconnect By Uri	${interconnect}
	\	Should Be Equal As Strings	${resp['state']}	Configured	
	[Return]
	
FVT Delete Logical Interconnect Group
	[Documentation]	Delete Logical Interconnect Group
	[Arguments]		${LIG}
	Log	\n Deleting Logical Interconnect Group ${LIG}	console=True	
	${resp}	Fusion Api Delete LIG	${LIG}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=5m	interval=1s	
	${resp}	Fvt Api Get Enclosure Group BY Name	${LIG}
	Should Be Equal As Strings	${resp}	None
	[Return]
	
FVT Add Enclosure Group	
	[Documentation]	Add Enclosure Group
	[Arguments]		${EG_IN}	${validate}=True	
	Log	\n Adding Enclosure Group ${EG_IN['name']}	console=True
	${EG}	FVT Copy Dictionary	${EG_IN}
	# For OV v4.00 onwards, type, stackingMode, and configurationScript are not required to create EG
	#Set To Dictionary	${EG}	type	EnclosureGroupV400
	#${etu} =	Get Variable Value	${EG_IN['enclosureTypeUri']}
	#Run Keyword If	'${etu}' == 'None'	Set To Dictionary	${EG}	enclosureTypeUri	/rest/enclosure-types/SY12000
	#${sm} =	Get Variable Value	${EG_IN['stackingMode']}
	#Run Keyword If	'${sm}' == 'None'	Set To Dictionary	${EG}	stackingMode	Enclosure
	#Set To Dictionary	${EG}	interconnectBayMappingCount	6
	#${cs} =	Get Variable Value	${EG_IN['configurationScript']}
	#Run Keyword If	'${cs}' == 'None'	Set To Dictionary	${EG}	configurationScript	None
	${iam} =	Get Variable Value	${EG_IN['ipAddressingMode']}
	Run Keyword If	'${iam}' == 'None'	Set To Dictionary	${EG}	ipAddressingMode	External
	${iru} =	Get Variable Value	${EG_IN['ipRangeUris']}
	${default_iru} =	Create List
	Run Keyword If	'${iru}' == 'None'	Set To Dictionary	${EG}	ipRangeUris	${default_iru}
	${pm} =	Get Variable Value	${EG_IN['powerMode']}
	Run Keyword If	'${pm}' == 'None'	Set To Dictionary	${EG}	powerMode	RedundantPowerFeed
	${resp} =	Add Enclosure Group from variable		${EG}
	Return From Keyword If	'${validate}' != 'True'	${resp}
	Should Be Equal As Integers	${resp['status_code']}	201
	${resp} = 	Fvt Api Get Enclosure Group By Name	${EG['name']}
	Should Be Equal As Strings	${resp['status']}	OK
	Should Be Equal As Strings	${resp['name']}	${EG['name']}
	[Return]
	
FVT Delete Enclosure Group
	[Documentation]	Delete Enclosure Group
	[Arguments]		${EG}	
	Log	\n Deleting Enclosure Group ${EG}	console=True
	${resp}	Fusion Api Delete Enclosure Group	${EG}
	${resp}	Fvt Api Get Enclosure Group BY Name	${EG}
	Should Be Equal As Strings	${resp}	None
	[Return]

FVT Delete Logical Enclosure
	[Documentation]	Delete Logical Enclosure
	[Arguments]		${LE}	${timeout}=600m	${interval}=1m
	Log	\n Deleting Logical Enclosure ${LE}	console=True
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	${resp}	Fusion Api Delete Logical Enclosure	uri=${resp['uri']}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	${timeout}	${interval}	
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp}	None
	[Return]
	
FVT Edit Telemetry Configurations Of LI
	[Documentation]	Edit Telemetry Configurations Of LI
	[Arguments]		${LE}	${LI}	${telemetry}	${FROM}
	Log	\n Edit Telemetry Configurations Of LI ${LI}	console=True
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	${resp}	Fusion Api Update Li Telemetry Configuration	${telemetry}	${resp['telemetryConfiguration']['uri']}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=1 s
	${resp}	Fusion Api Get Li	${LI_URI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	Should Be Equal	${resp['telemetryConfiguration']['enableTelemetry']}	${telemetry['enableTelemetry']}
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleCount']}	${telemetry['sampleCount']}
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleInterval']}	${telemetry['sampleInterval']}
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleInterval']}	300
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleCount']}	12
	Should Be Equal	${resp['consistencyStatus']}	CONSISTENT
	Should Be Equal	${resp['telemetryConfiguration']['enableTelemetry']}	${TRUE}
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Edit Ethernet Settings Of LI
	[Documentation]	Edit Ethernet Settings Of LI
	[Arguments]		${LE}	${LI}	${ethernet_setting}	${FROM}
	Log	\n Edit Ethernet Settings Of LI ${LI}	console=True
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Set To Dictionary	${ethernet_setting}	id	${resp['ethernetSettings']['id']}	
	${resp}	Fusion Api Update Li Ethernet Settings		${ethernet_setting}	${LI_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s		
	${resp}	Fusion Api Get Li	${LI_URI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	Should Be Equal	${resp['ethernetSettings']['enableFastMacCacheFailover']}	${ethernet_setting['enableFastMacCacheFailover']}
	Should Be Equal	${resp['ethernetSettings']['enableIgmpSnooping']}	${ethernet_setting['enableIgmpSnooping']}
	Should Be Equal	${resp['ethernetSettings']['enableNetworkLoopProtection']}	${ethernet_setting['enableNetworkLoopProtection']}
	Should Be Equal As Integers	${resp['ethernetSettings']['igmpIdleTimeoutInterval']}	${ethernet_setting['igmpIdleTimeoutInterval']}
	Should Be Equal As Integers	${resp['ethernetSettings']['macRefreshInterval']}	${ethernet_setting['macRefreshInterval']}
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	Should Be Equal	${resp['ethernetSettings']['enableFastMacCacheFailover']}	${TRUE}
	Should Be Equal	${resp['ethernetSettings']['enableIgmpSnooping']}	${FALSE}
	Should Be Equal	${resp['ethernetSettings']['enableNetworkLoopProtection']}	${TRUE}
	Should Be Equal As Integers	${resp['ethernetSettings']['igmpIdleTimeoutInterval']}	260
	Should Be Equal As Integers	${resp['ethernetSettings']['macRefreshInterval']}	5
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Add Uplink Set To LI
	[Documentation]	Add Uplink Set To LI
	[Arguments]		${LE}	${LI}	${New_Uplink_Set}	${FROM}
	Log	\n Add Uplink Set ${New_Uplink_Set['name']} To LI ${LI}	console=True
	${uplinkset}	Fvt Copy Dictionary	${New_Uplink_Set}
	${uplinkset_name} =	Get From Dictionary	${uplinkset}	name
	Set To Dictionary	${uplinkset}	logicalInterconnectUri	${LI}	
	${resp} =	Add Uplink Set	${uplinkset}	timeout=30 m	interval=2 s
	${resp} =	Get Uplink Set By Name	${LI}	${uplinkset_name}
	Should Be Equal As Strings	${resp['name']}	${uplinkset_name}
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp} =	Get Uplink Set By Name	${LI}	${uplinkset_name}
	Should Be Equal As Strings	${resp}	None
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Edit Uplink Set Of LI
	[Documentation]	Edit Uplink Set Of LI
	[Arguments]		${LE}	${LI}	${Uplink_Set}	${FROM}
	Log	\n Edit Uplink Set ${Uplink_Set['name']} Of LI ${LI}	console=True
	${uplinkset}	FVT Copy Dictionary	${Uplink_Set}
	Set To Dictionary	${uplinkset}	logicalInterconnectUri	${LI}	
	${resp} = 	fvt-keywords.Edit Uplink Set	${uplinkset}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'		
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Delete Uplink Set From LI
	[Documentation]	Delete Uplink Set From LI
	[Arguments]		${LE}	${LI}	${Uplink_Set}	${FROM}
	Log	\n Delete Uplink Set ${Uplink_Set['name']} From LI ${LI}	console=True
	${uplinkset_name} =	Get From Dictionary	${Uplink_Set}	name
	${resp} = 	Get Uplink Set By Name	${LI}	${uplinkset_name}
	${Uri} =	Set Variable if	${resp} != None	${resp['uri']}	'${uplinkset_name} does not exist'
	${resp}	Fusion Api Delete Uplink Set	uri=${Uri}
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp} = 	Get Uplink Set By Name	${LI}	${uplinkset_name}
	Should Be Equal As Strings	${resp}	None	
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'		
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp} = 	Get Uplink Set By Name	${LI}	${uplinkset_name}
	Should Not Be Equal As Strings	${resp}	None	
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Edit Telemetry Configurations Of LIG
	[Documentation]	Edit Telemetry Configurations Of LIG
	[Arguments]		${LE}	${LI}	${LIG_IN}	${FROM}
	Log	\n Edit Telemetry Configurations Of LIG ${LIG_IN['name']}	console=True
	${LIG}	FVT Copy Dictionary	${LIG_IN}
	${resp}	Edit Logical Interconnect Group	${LIG}	timeout=10m	interval=1s
	# LE compliance status is not updated after LIG edit. Need to wait couple of seconds more...
	# Sleep    3 secs
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	Should Be Equal	${resp['telemetryConfiguration']['enableTelemetry']}	${LIG['telemetryConfiguration']['enableTelemetry']}
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleCount']}	${LIG['telemetryConfiguration']['sampleCount']}
	Should Be Equal As Integers	${resp['telemetryConfiguration']['sampleInterval']}	${LIG['telemetryConfiguration']['sampleInterval']}
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Edit Edit Ethernet Settings Of LIG
	[Documentation]	Edit Edit Ethernet Settings Of LIG
	[Arguments]		${LE}	${LI}	${LIG_IN}	${FROM}
	Log	\n Edit Edit Ethernet Settings Of LIG ${LIG_IN['name']}	console=True
	${LIG}	FVT Copy Dictionary	${LIG_IN}
	${resp}	Edit Logical Interconnect Group	${LIG}	timeout=10m	interval=1s
	# LE compliance status is not updated after LIG edit. Need to wait couple of seconds more...
	# Sleep    3 secs
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	Should Be Equal	${resp['ethernetSettings']['enableFastMacCacheFailover']}	${LIG['ethernetSettings']['enableFastMacCacheFailover']}
	Should Be Equal	${resp['ethernetSettings']['enableIgmpSnooping']}	${LIG['ethernetSettings']['enableIgmpSnooping']}
	Should Be Equal	${resp['ethernetSettings']['enableNetworkLoopProtection']}	${LIG['ethernetSettings']['enableNetworkLoopProtection']}
	Should Be Equal As Integers	${resp['ethernetSettings']['igmpIdleTimeoutInterval']}	${LIG['ethernetSettings']['igmpIdleTimeoutInterval']}
	Should Be Equal As Integers	${resp['ethernetSettings']['macRefreshInterval']}	${LIG['ethernetSettings']['macRefreshInterval']}
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]

FVT Add Uplink Set To LIG
	[Documentation]	Add Uplink Set To LIG
	[Arguments]		${LE}	${LI}	${LIG_IN}	${FROM}
	Log	\n Add Uplink Set To LIG ${LIG_IN['name']}	console=True
	${LIG}	FVT Copy Dictionary	${LIG_IN}
	${resp}	Edit Logical Interconnect Group	${LIG}	timeout=10m	interval=1s
	# LE compliance status is not updated after LIG edit. Need to wait couple of seconds more...
	# Sleep    3 secs
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp} =	Get Uplink Set By Name	${LI}	${lig_add_uplinkset['name']}
	Should Not Be Equal As Strings	${resp}	None
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Edit Uplink Set Of LIG
	[Documentation]	Edit Uplink Set Of LIG
	[Arguments]		${LE}	${LI}	${LIG_IN}	${FROM}
	Log	\n Edit Uplink Set Of LIG ${LIG_IN['name']}	console=True
	${LIG}	FVT Copy Dictionary	${LIG_IN}
	${resp}	Edit Logical Interconnect Group	${LIG}	timeout=10m	interval=1s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	FVT Verify Interconnects In LI	${LI}
	[Return]
	
FVT Delete Uplink Set From LIG
	[Documentation]	Delete Uplink Set From LIG
	[Arguments]		${LE}	${LI}	${LIG_IN}	${FROM}
	Log	\n Delete Uplink Set From LIG ${LIG_IN['name']}	console=True
	${LIG}	FVT Copy Dictionary	${LIG_IN}
	${resp}	Edit Logical Interconnect Group	${LIG}	timeout=10m	interval=1s
	# LE compliance status is not updated after LIG edit. Need to wait couple of seconds more...
	# Sleep    3 secs
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	${LI_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LI} does not exist'
	Should Be Equal As Strings	${resp['consistencyStatus']}	NOT_CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Inconsistent
	${LE_URI} =	Set Variable if	${resp} != None	${resp['uri']}	'/${LE} does not exist'	
	${resp} =	Run Keyword if	'${FROM}' == 'LI'	Fusion Api Update From Group	uri=${LI_URI}	ELSE	Fusion Api Update Logical Enclosure From Group	uri=${LE_URI}
	Should Be Equal As Integers	${resp['status_code']}	202
	Wait For Task	${resp}	timeout=30 m	interval=2 s
	${resp}	Fvt Api Get Logical Interconnect By Name	${LI}
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['state']}	Consistent
	${resp} =	Get Uplink Set By Name	${LI}	${lig_add_uplinkset['name']}
	Should Be Equal As Strings	${resp}	None
	FVT Verify Interconnects In LI	${LI}
	[Return]

FVT Add Server Profile
	[Documentation]	Add Server Profile
	[Arguments]	${profile}	${timeout}=0	${interval}=0
	${resp}	Fvt Api Get Server Hardware By Name	${profile['serverHardwareUri']}
	${uri} =	Set Variable	${resp['uri']}
	${payload} =	Create Dictionary	powerState=Off	powerControl=PressAndHold	
	${resp}	Fusion Api Edit Server Hardware Power State	uri=${uri}	body=${payload}
	Should Be Equal As Integers	${resp['status_code']}	202
	${task} =	Wait For Task	${resp} 	5m	1
	${resp}	Fvt Api Get Server Hardware By Name	${profile['serverHardwareUri']}
	Should Be Equal As Strings	${resp['powerState']}	Off
	fvt-keywords.Add Server Profile	${profile}	${timeout}	${interval}
	sleep	10s
	${resp}	Fvt Api Get Server Profile By Name	${profile['name']}
	Should Be Equal As Strings	${resp['status']}	OK
	${payload} =	Create Dictionary	powerState=On	powerControl=MomentaryPress	
	${task}	Fusion Api Edit Server Hardware Power State	uri=${uri}	body=${payload}
	Should Be Equal As Integers	${task['status_code']}	202
	Return From Keyword If	'${timeout}' == '0'	${task}
	${task} =	Wait For Task	${task}	${timeout}	${interval}	
	[Return]