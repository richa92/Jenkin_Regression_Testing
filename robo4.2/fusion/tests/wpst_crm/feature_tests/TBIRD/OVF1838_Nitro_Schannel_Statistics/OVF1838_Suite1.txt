*** Settings ***
Documentation   OVF1838
Variables       data_variables_porting.py
#Variables       data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource        OVF1838_keywords.txt
Library         Telnet
Library         background_ping.py


*** Variables ***
${APPLIANCE_IP}     15.245.131.251
${stat}         statistics
${name}    sample.txt
${Ping_Lost}                 Lost

*** Test Cases ***

Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Initial OV cleanup
    [Documentation]    Performs a initial cleanup
    [Tags]  cleanup    setup
    Set Log Level    TRACE
    Cleanup

Create ethernet network
    [Documentation]    Create ethernet Networks
    Log    \n-Creating Ethernet Networks    console=True
    ${resp}    Fusion Api Create Ethernet Network    ${ethernet_networks[0]}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log  \nEthernet Network created successfully    console=True
    ${uri}    Get From Dictionary    ${resp['associatedResource']}    resourceUri
    Set Global Variable    ${enet_uri}    ${uri}

Create FC network
    [Documentation]    Create FC Networks
    log    \n-Creating FC Networks
    ${resp}    Fusion Api Create FC Network    ${fc_network[0]}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log  \FC Network created successfully

Create FcoE network
    [Documentation]    Create FcoE Networks
    log    \n-Creating FcoE Networks    console=True
    ${resp}    Fusion Api Create Fcoe Network   body=${fcoe_networks}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log  \FcoE Network created successfully    console=True

Creating LIG
    [Documentation]    Creating LIG through rest calls
    [Tags]  LIG    setup
    Set Log Level    TRACE

    log  Creating LIG    console=True
    :FOR    ${lig}    IN    @{ligs_Nitro}
    \    Add LIG from variable    ${lig}
    \    log    \nsuccessfully created LIG    console=True

################################################# Test case 1 ########################################################

TC_1_1_Verify sampling values are reflected properly in LIG
    [Documentation]    Verify sampling values are reflected properly in LIG
    [Tags]  VerifySamplingvaluesLIG
    Set Log Level    TRACE

    ${sCount}    ${sInterval}   Check Sampling value in LIG    ${ligs_Nitro[0]['name']}
    Set Global Variable    ${sampleCount}    ${sCount}
    Set Global Variable    ${sampleInterval}    ${sInterval}
    log    \n Verifying the sample count value is reflected properly in LIG    console=True
    ${sampleCount_lig}    Get From Dictionary    ${ligs_Nitro[0]['telemetryConfiguration']}    sampleCount
    Should Be Equal    ${sampleCount}    ${sampleCount_lig}

    log    \n Verifying the sample interval value is reflected properly in LIG    console=True
    ${sampleInterval_lig}    Get From Dictionary    ${ligs_Nitro[0]['telemetryConfiguration']}    sampleInterval
    Should Be Equal    ${sampleInterval}    ${sampleInterval_lig}

Creating EG
    [Documentation]    Creating EG through rest calls
    [Tags]  EG    setup
    Set Log Level    TRACE

    log  Creating EG    console=True
    ${resp}    Add Enclosure Group from variable    ${enc_group1}
    Run Keyword If  ${resp['status_code']} != 201    fail    msg=\nUnable to create EG
    ...         ELSE    log    \nsuccessfully created EG

Creating LE
    [Documentation]    Creating LE through rest calls
    [Tags]  LE    setup
    Set Log Level    TRACE

    ${Resp}    Add Logical Enclosure from variable    ${LE_Nitro['LE']}
    log  \n  Successfully Created LE !!    console=True

TC_1_4_Verifying Sampling values reflected properly in LI
    [Documentation]    Verifying Sampling values reflected properly in LI
    [Tags]  VerifySamplingvaluesLI
    Set Log Level    TRACE

    ${sampleCount_li}    ${sampleInterval_li}   Check Sampling value in LI    ${LI}

    log    \n Verifying the sample count value is reflected properly in LI    console=True
    Should Be Equal    ${sampleCount_li}    ${sampleCount}

    log    \n Verifying the sample interval value is reflected properly in LI    console=True
    Should Be Equal    ${sampleInterval_li}    ${sampleInterval}


TC_1_5_Creating Server Profile
    [Documentation]  Creating Server profile through rest calls
    [Tags]  ServerProfile    setup
    Set Log Level    TRACE

    ${resp}    Add Server Profiles from variable    ${SP_1}
    ${task}    Wait For Task   ${resp}     600s    60s
    log  \n Server profiles created successfully    console=True
    Power on server     ${SP_1[0]['serverHardwareUri']}
    log    \n Power on servers    console=True
    log    \n Waiting 10 minutes for the server to boot    console=True
    Sleep   12min

    ${IP}    ${gate_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip}    ${IP[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip}


TC_1_6_Get gateway ip of the server and passing traffic
    [Documentation]    Get gateway ip of the server and passing traffic
    [Tags]  PassingTraffic
    Set Log Level    TRACE

    Get gateway ip of the server and passing traffic    ${gateway_ip}    ${server_ip}    ${ping_cmd1}    ${server_details}    ${name}


TC_1_7_Verifying S-Channel common and advanced statistics vaules
    [Documentation]    Verifying S-Channel common and advanced statistics vaules
    [Tags]  VerifyS-channelstatistics
    Set Log Level    TRACE

    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    12 min    10 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}


################################################ Test case 2 - Disble/Enable sampling collection & Verify S-channel statistics  ##################################################
TC_2_1_Edit LIG to disable the sampling collection
    [Documentation]    Edit LIG to disable/enable the sampling collection and UFG to reflect the change in LI. Verify the s-channel statistics and historical data after passing IO traffic.
    [Tags]  Disablesamplingcollection
    Set Log Level    TRACE

    ${uri} =    Get LIG Uri     ${ligs_Nitro[0]['name']}
    Set Global Variable    ${lig_uri}    ${uri}
    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    log    ${lig_member}    console=True
    Remove From Dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry
    set to dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry    false
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    LIG edited & Disabled the utilization sampling collection successfully    console=True

TC_2_2_Update from group in LI
    [Documentation]    Update from group in LI
    [Tags]  UFGLI
    Set Log Level    TRACE

    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True

TC_2_3_Verifying s-channel common and advanced statistics vaules after disabling utilization sampling collection
    [Documentation]    Verifying common and advanced statistics vaules after disabling utilization sampling collection
    [Tags]  VerifyS-channelStatistics    DisableSamplingCollection
    Set Log Level    TRACE

    ${subportStatistics}    ${subport_commonstat}    ${subport_advancedstat}    Get s-channel statistics    ${IC[0]}    ${stat}    ${downlink_ports[0]}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    3 min    1 sec     Validating statictis for None values    ${IC[0]}    ${stat}    ${downlink_ports[0]}    ${sub_port_number[0]}    ${subportCommon_stats_counters}

TC_2_4_Edit LIG - Enable the sampling collection
    [Documentation]    Edit LIG - Enable the sampling collection
    [Tags]  EnableSamplingCollection
    Set Log Level    TRACE

    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    Remove From Dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry
    set to dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry    true
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    LIG edited & Enabled the utilization sampling collection successfully    console=True

TC_2_5_Update from group
    [Documentation]    Update from group
    [Tags]  UFGLI
    Set Log Level    TRACE

    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True

TC_2_6_Verifying s-channel common and advanced statistics after enabling utilization sampling collection
    [Documentation]    Verifying common and advanced statistics after enabling utilization sampling collection
    [Tags]  VerifyS-channelStatistic    EnableSamplingCollection
    Set Log Level    TRACE
    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    12 min    10 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}


#################################### Test Case 3 - Disble/Enable sampling collection and reapply configuartion & Verify S-channel statistics ######################################
TC_3_1_Edit LIG - Disable the sampling collection
    [Documentation]    Verify s-channel statistics and historical data by disabling sample collection in LIG and UFG in LI followed by  "Reapply configuration" in LI.
    [Tags]  DisableSampleCollection
    Set Log Level    TRACE

    ${uri}    Get LIG Uri     ${ligs_Nitro[0]['name']}
    Set Global Variable    ${lig_uri}    ${uri}
    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    Remove From Dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry
    set to dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry    false
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    LIG edited & Disabled the utilization sampling collection successfully    console=True

TC_3_2_Update from group - LI
    [Documentation]    Update from group - LI
    [Tags]  UpdateFromGroup    LI
    Set Log Level    TRACE

    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True

TC_3_3_Reapply Configuration in LI
    [Documentation]    Reapply Configuration in LI
    [Tags]  ReapplyConfiguration    LI
    Set Log Level    TRACE

    Re-apply LI configuration    ${LI}


TC_3_4_Verifying s-channel common and advanced statistics after disabling utilization sampling collection
    [Documentation]    Verifying common and advanced statistics after disabling utilization sampling collection
    [Tags]  VerifyStatistics    Disable
    Set Log Level    TRACE
    Wait Until Keyword Succeeds    2 min    1 sec     Validating statictis for None values    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${subportCommon_stats_counters}

TC_3_5_Edit LIG & Enable the sampling collection
    [Documentation]    Edit LIG & Enable the sampling collection
    [Tags]  EnableSampleCollection    LIG
    Set Log Level    TRACE

    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    Remove From Dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry
    set to dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry    true
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    LIG edited & Enabled the utilization sampling collection successfully    console=True

TC_3_6_LI Update from group
    [Documentation]    LI Update from group
    [Tags]  UpdateFromGroup    LI
    Set Log Level    TRACE

    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True

TC_3_7_Reapply Configuration - LI
    [Documentation]    Reapply Configuration - LI
    [Tags]  ReapplyConfigurationLI
    Set Log Level    TRACE

    Re-apply LI configuration    ${LI}

TC_3_8_Verifying s-channel common statistics and advanced statistics after enabling utilization sampling collection
    [Documentation]    Verifying common statistics and advanced statistics after enabling utilization sampling collection
    [Tags]  VerifyStatistics    EnableSampleCollection
    Set Log Level    TRACE

    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    12 min    10 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}

    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    Clear Port Counters    ${IC[1]}

########################################### Test Case 4 - Edit LI with diff sampling interval & sample count-Verify S-channel statistics ###########################################

TC_4_Edit LI with diff sampling interval & sample count
    [Documentation]    Edit LI with different sampling interval (60-3600sec) and total number of samples (12-50).Verify the s-channel statistics and historic data for all samples by passing IO traffic
    [Tags]  EditLIDiffSampleCountAndSampleInterval
    Set Log Level    TRACE

    ${IP}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip}    ${IP[0]}
    Get gateway ip of the server and passing traffic    ${gateway_ip}    ${server_ip}    ${ping_cmd1}    ${server_details}    ${name}

    ${li_uri}    Get LI URI    ${LI}
    log    ${li_uri}    console=True

    ${li_resp}    Fusion Api Get Li   ${li_uri}
    log    ${li_resp}    console=True
    ${telemetry_1_uri1}    Get From Dictionary    ${li_resp}    telemetryConfiguration
    ${telemetry_1_uri}    Get From Dictionary    ${telemetry_1_uri1}    uri
    ${telemetry_1_name}    Get From Dictionary    ${telemetry_1_uri1}    name
    Set To Dictionary     ${Li_body}     uri   ${telemetry_1_uri}
    Set To Dictionary     ${Li_body}   name    ${telemetry_1_name}
    set to dictionary    ${Li_body}    sampleCount    ${diff_sample_count[1]}
    set to dictionary    ${Li_body}    sampleInterval    ${diff_sample_interval[1]}
    ${resp}    Fusion Api Update LI Telemetry Configuration    ${Li_body}    ${telemetry_1_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    Telemetry configuration edited in LI successfully    console=True

    Verifying Subport Common Statistics vaules    ${IC[0]}    ${stat}    ${downlink_ports[0]}    ${time_interval_5min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    80 min    5 min    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${diff_sample_count[1]}
    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    ${lig_uri}    Get LIG URI    ${ligs_Nitro[0]['name']}
    ${body}    Build LIG body    ${ligs_Nitro[0]}
    ${resp}    Fusion Api Edit LIG      body=${body}    uri=${lig_uri}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    log    \nSuccessfully edited LIG    console=True

    ${li_uri}    Get LI URI    ${li_name}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True


##################################################### Test Case 5 - Backup & Restore & Verify S-channel statistics #######################################################
TC_5_1_Create Backup
    [Documentation]    Create Backup
    [Tags]  CreateBackup
    Set Log Level    TRACE

    log    \n-Creating the backup in OV    console=True
    Power off ALL Servers
    ${resp}=    Fusion Api Create Backup
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nBackup failed. \n ErrorCode:${resp['errorCode']}\n ${resp['message']}
    ${task} =   Wait For Task   ${resp}     10 min    20s
    Run Keyword If  '${task['taskState']}' !='Completed'   or   ${task['status_code']} !=200   fail    msg=\nBackup failed. \n ErrorCode:${task['taskErrors']}\n ${task['taskStatus']}
    ...         ELSE    log  \n\nBackup Created Succesfully !! \n ${task['taskStatus']}    console=True

TC_5_2_Edit LIG with sampling interval 100 and Update from group in LI
    [Documentation]    Edit LIG with sampling interval 100 and Update from group in LI
    [Tags]  EditLIGInterval100UPGLI
    Set Log Level    TRACE

    ${uri} =    Get LIG Uri     ${ligs_Nitro[0]['name']}
    Set Global Variable    ${lig_uri}    ${uri}
    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    set to dictionary    ${lig_member['telemetryConfiguration']}    sampleInterval    ${sample_interval_100}
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    Telemetry configuration edited in LIg successfully    console=True
    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True

TC_5_3_Verifying the sampling interval value is reflected properly in LIG & LI
    [Documentation]    Verifying the sampling interval value is reflected properly in LIG & LI
    [Tags]  CheckSampleValuesInLIGAndLI
    Set Log Level    TRACE
    ${sampleCount}    ${sampleInterval}   Check Sampling value in LIG    ${ligs_Nitro[0]['name']}
    Should Be Equal    '${sampleInterval}'    '${sample_interval_100}'

    ${sampleCount_li}    ${sampleInterval_li}   Check Sampling value in LI    ${LI}
    Should Be Equal    '${sampleInterval_li}'    '${sample_interval_100}'


TC_5_4_Restore From backup
    [Documentation]    Restore From backup
    [Tags]  RestoreFromBackup
    Set Log Level    TRACE

    log     \n\nRestoring from the backup in the appliance    console=True
    Restore From Backup
    Sleep   5 min
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

TC_5_5_Verifying the sampling interval value in LIG & LI after backup
    [Documentation]    Verifying the sampling interval value is reflected properly in LIG & LI
    [Tags]  VerifySampleValues
    Set Log Level    TRACE

    ${sampleCount}    ${sampleInterval}   Check Sampling value in LIG    ${ligs_Nitro[0]['name']}
    ${sampleInterval_lig}    Get From Dictionary    ${ligs_Nitro[0]['telemetryConfiguration']}    sampleInterval
    Should Be Equal    ${sampleInterval}    ${sampleInterval_lig}

    ${sampleCount_li}    ${sampleInterval_li}   Check Sampling value in LI    ${LI}
    Should Be Equal    ${sampleInterval_li}    ${sampleInterval_lig}

    Power on server     ${SP_1[0]['serverHardwareUri']}
    log    \n Power on servers    console=True
    log    \n Waiting 10 minutes for the server to boot    console=True
    Sleep   10min
    ${IP}    ${gate_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip}    ${IP[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip}

TC_5_6_Get gateway ip of server and passing traffic
    [Documentation]    Get gateway ip of server and passing traffic
    [Tags]  PassTraffic    AfterRestore
    Set Log Level    TRACE

    Get gateway ip of the server and passing traffic    ${gateway_ip}    ${server_ip}    ${ping_cmd1}    ${server_details}    ${name}

TC_5_7_Verifying s-channel common statistics and advanced statistics vaules after restore
    [Documentation]    Verifying common statistics and advanced statistics vaules after enabling utilization sampling collection
    [Tags]  VerifyS-channelStatistics    AfterRestore
    Set Log Level    TRACE

    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    12 min    10 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}

    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    Clear Port Counters    ${IC[1]}

####################################### Test Case 6 - Edit LIG with diff sampling interval & sample count-Verify S-channel statistics ##########################################

TC_6_Edit LIG with diff sampling interval & sample count
    [Documentation]    Edit LIG followed by LI update from group with different sampling interval (60-3600sec) and total number of samples (12-50).Verify the s-channel statistics and historic data for all samples by passing IO traffic
    [Tags]  EditLIGDiffSampleCountAndSampleInterval
    Set Log Level    TRACE

    ${IP}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip}    ${IP[0]}
    Get gateway ip of the server and passing traffic    ${gateway_ip}    ${server_ip}    ${ping_cmd1}    ${server_details}    ${name}
    ${uri}    Get LIG Uri     ${ligs_Nitro[0]['name']}
    Set Global Variable    ${lig_uri}    ${uri}
    ${lig_member}    Get LIG member    ${ligs_Nitro[0]['name']}
    set to dictionary    ${lig_member["telemetryConfiguration"]}    sampleCount    ${diff_sample_count[0]}
    set to dictionary    ${lig_member["telemetryConfiguration"]}    sampleInterval    ${diff_sample_interval[0]}
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    ${task}    Wait For Task   ${resp}     200s    2s
    log    Telemetry configuration edited in LIg successfully    console=True
    ${li_uri}    Get LI URI    ${LI}
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log    \nSuccessfully UFG    console=True


    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${min_octets}    ${min_pkts}    ${sub_port_number[0]}
    Wait Until Keyword Succeeds    40 min    2 min     Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${diff_sample_count[0]}

    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    Clear Port Counters    ${IC[0]}


######################################################### Test Case 7 - Happy Path & Verify S-channel statistics###################################################################

TC_7_1_Creating Server Profiles
    [Documentation]    Creating Server profiles through rest call
    [Tags]  ServerProfile
    Set Log Level    TRACE

    Power off ALL Servers
    Remove All Server Profiles
    ${resp}    Add Server Profiles from variable    ${SP_3}
    ${task}    Wait For Task   ${resp}     600s    60s
    log  \n Server  profiles created successfully    console=True
    ${len}    Get Length    ${SP_3}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Power on server     ${SP_3[${x}]['serverHardwareUri']}
    \    log    \n Power on servers    console=True
    \    log    \n Waiting 10 minutes for the server to boot    console=True
    \    Sleep   10min

TC_7_2_Verifying s-channel statistics values for Ethernet connection with different packet size - Unicast Traffic
    [Documentation]    Verifying s-channel statistics values for Ethernet connection with different packet size - Unicast Traffic
    [Tags]  VerifyStatisticsEthernet    Unicast
    Set Log Level    TRACE

    ${IP}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay2}
    Set Global Variable    ${server_ip}    ${IP[0]}
    ${len}    Get Length    ${ping_cmds}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Clear Port Counters    ${IC[1]}
    \    Get gateway ip of the server and passing traffic    ${gateway_ip}    ${server_ip}    ${ping_cmds[${x}]}    ${server_details1}    ${name}
    \    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports1[1]}    ${time_interval_2min}    ${diff_octets[${x}]}    ${diff_pkts[0]}    ${sub_port_number[0]}
    \    Wait Until Keyword Succeeds    12 min    60 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports1[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}
    \    execute_traffic    ${server_ip}    ${server_details1['username']}    ${server_details1['password']}    ${kill_cmd}


TC_7_3_Verifying s-channel statistics values for FC connection with different packet size - Unicast Traffic
    [Documentation]    Verifying s-channel statistics values for FC connection with different packet size - Unicast Traffic
    [Tags]  VerifyStatisticsFC    Unicast
    Set Log Level    TRACE

    ${server_ip}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc2_bay2}
    ${len}    Get Length    ${diskspd_cmd1}
    log  \n length ${len}    console=True
    :FOR    ${x}    IN RANGE    0   ${len}

    \    Clear Port Counters    ${IC_IBS2[0]}
    \    execute_traffic    ${server_ip}    ${server_details1['username']}    ${server_details1['password']}    ${diskspd_cmd1[${x}]}
    \    Verifying common statistics and advanced statistics vaules    ${IC_IBS2[0]}    ${stat}    ${downlink_ports1[1]}    ${time_interval_2min}    ${sub_port_number[1]}
    \    execute_traffic    ${server_ip}    ${server_details1['username']}    ${server_details1['password']}    ${kill_diskspd}

TC_7_4_Verifying s-channel statistics values for FcoE connection with different packet size - Unicast Traffic
    [Documentation]    Verifying s-channel statistics values for FcoE connection with different packet size - Unicast Traffic
    [Tags]  VerifyStatisticsFcoE    Unicast
    Set Log Level    TRACE

    ${server_ip}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc3_bay3}
    ${len}    Get Length    ${diskspd_cmd}
    log  \n length ${len}    console=True
    :FOR    ${x}    IN RANGE    0   ${len}

    \    Clear Port Counters    ${IC[1]}
    \    execute_traffic    ${server_ip[0]}    ${server_details['username']}    ${server_details['password']}    ${diskspd_cmd[${x}]}
    \    Verifying common statistics and advanced statistics vaules    ${IC[1]}    ${stat}    ${downlink_fcoe[0]}    ${time_interval_2min}    ${sub_port_number[1]}
    \    execute_traffic    ${server_ip[0]}    ${server_details['username']}    ${server_details['password']}    ${kill_diskspd}

TC_7_5_Verifying s-channel statistics values for Ethernet connection with different packet size - Broadcast Traffic
    [Documentation]    Verifying s-channel statistics values for Ethernet connection with different packet size - Broadcast Traffic
    [Tags]  VerifyStatisticsEthernet    Broadcast
    Set Log Level    TRACE

    ${server_ip}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details_enc3_bay3}
    ${len}    Get Length    ${ping_cmds}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Clear Port Counters    ${IC[1]}
    \    ${ping_cmd}    Replace String Using Regexp    ${ping_cmds[${x}]}    'gateway_ip'      ${broadcast_ip}
    \    ${out}    execute_traffic    ${server_ip[0]}    ${server_details['username']}    ${server_details['password']}    ${ping_cmd}
    \    Verifying Subport Common Statistics vaules    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${time_interval_2min}    ${diff_octets_bc[${x}]}    ${diff_pkts_bc[0]}    ${sub_port_number[0]}
    \    Wait Until Keyword Succeeds    12 min    10 sec    Verifying sample count in subport Advanced statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[0]}    ${ligs_Nitro[0]['telemetryConfiguration']['sampleCount']}
    \    execute_traffic    ${server_ip[0]}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}

################################################ Test Case 8 - Delete Server Profile and verify the statistics ###########################################################
TC_8_Remove Server Profile and verify the statistic and historical collection
    [Documentation]    Remove Server Profile and verify the statistic and historical collection
    [Tags]  RemoveProfile    Unicast
    Set Log Level    TRACE

    Power off ALL Servers
    Remove All Server Profiles
    Verify Deleted connection displays subport statistics    ${IC[1]}    ${stat}    ${downlink_ports[1]}    ${sub_port_number[1]}

#################################################### Test Case 9 - Negative Scenarios ############################################################
TC_9_1_Neg_Create LIG with Invalid Sample Values
    [Documentation]    Create LIG with Invalid sample values
    [Tags]    Negative    CreateLIGInvalidSampleValues
    Set Log Level    TRACE

    log  Creating LIG    console=True

    :FOR    ${lig}    IN    @{ligs_negative}
    \    ${body}    Build LIG body    ${lig}
    \    ${resp}    Fusion Api Create Lig    ${body}
    \    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  Fail
    \    ...    ELSE    log    \nCould not Create LIG with Invalid sample values - ${resp['details']} \nError: ${resp['errorCode']} \n Error message : ${resp['message']}    console=True

TC_9_2_Neg_Edit LIG with Invalid Sample Count
    [Documentation]    Edit LIG with Invalid sample Count
    [Tags]    Negative    EditLIGInvalidSampleCount
    Set Log Level    TRACE

    ${lig_uri}    Get LIG URI    ${LIG}
    ${lig_edit}    Get LIG member    ${LIG}
    Set to Dictionary    ${lig_edit['telemetryConfiguration']}    sampleCount    400
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  Fail
    ...    ELSE    log    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}    console=True

TC_9_3_Neg_Edit LIG with Invalid Sample Interval
    [Documentation]    Edit LIG with Invalid sample Interval
    [Tags]    Negative    EditLIGInvalidSampleInterval
    Set Log Level    TRACE

    ${lig_uri}    Get LIG URI    ${LIG}
    ${lig_edit}    Get LIG member    ${LIG}
    Set to Dictionary    ${lig_edit['telemetryConfiguration']}    sampleInterval    3700
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    log    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}    console=True

TC_9_4_Neg_Edit LI with Invalid Sample Count
    [Documentation]    Edit LI with Invalid sample Count
    [Tags]    Negative    EditLIInvalidSampleCount
    Set Log Level    TRACE

    ${Telemetry_uri}    ${body}    Get LI Telemetry Configuration    ${LI}
    #${Telemetry_uri}    ${body}    Get LI Telemetry Configuration    ${LE}-${LIG}
    Set to Dictionary    ${body}    sampleCount    11
    ${resp}    fusion_api_update_li_telemetry_configuration    body=${body}    uri=${Telemetry_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    log    \nCould not Edit LIG with Invalid sample count - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}    console=True

TC_9_5_Neg_Edit LI with Invalid Sample Interval
    [Documentation]    Edit LI with Invalid sample Interval
    [Tags]    Negative    EditLIInvalidSampleInterval
    Set Log Level    TRACE

    ${Telemetry_uri}    ${body}    Get LI Telemetry Configuration    ${LI}
    Set to Dictionary    ${body}    sampleInterval    59
    ${resp}    fusion_api_update_li_telemetry_configuration    body=${body}    uri=${Telemetry_uri}
    Run Keyword If  ${resp['status_code']} != 400 or '${resp['errorCode']}' != 'CRM_INVALID_ARGUMENT'  fail
    ...    ELSE    log    \nCould not Edit LIG with Invalid sample Interval - ${resp['details']} \n Error: ${resp['errorCode']} \n Error message : ${resp['message']}

TC_9_6_Neg_Adding different users and verifying authentication
    [Documentation]    Adding different users and verifying authentication
    [Tags]    AddUser
    Set Log Level    TRACE

    Remove ALL Users
    :FOR    ${user}    IN    @{users}
    \    ${resp} =  Fusion Api Add User     body=${user}
    \    Run Keyword If  ${resp['status_code']} != 200    Fail
    \    ...    ELSE    log    \n-Created ${user['userName']} user successfully    console=True

    ${resp}     Fusion Api Logout Appliance
    Run Keyword If    ${resp['status_code']} != 204    Fail    ELSE    log    \n-Logged out successfully    console=True

TC_9_7_Verify Only Network Users is authorized to Create LIG
    [Documentation]    Verify Only Network Users is authorized
    [Tags]    Negative    NetworkUserAuthorizedCreateLIG
    Set Log Level    TRACE

    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[0]}
    ${body}    Build LIG body    ${lig_neg[0]}
    ${resp}    Fusion Api Create Lig    ${body}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    log    \nonly ${usercred[0]['userName']} can be able to create LIG

    ${len}    Get Length    ${users}
    :FOR    ${x}    IN RANGE    1    ${len}
    \    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[${x}]}
    \    ${body}    Build LIG body    ${lig_neg[0]}
    \    ${resp} =    Fusion Api Create Lig    ${body}
    \    Run Keyword If  ${resp['status_code']} != 403 or '${resp['errorCode']}' != 'ACTION_FORBIDDEN_BY_ROLE'    Fail    ELSE    log    \n ${usercred[${x}]['userName']} cannot create LIG \n Error: ${resp['errorCode']}

TC_9_8_Verify Only Network Users is authorized to Edit LIG
    [Documentation]    Verify Only Network Users is authorized
    [Tags]    Negative    NetworkUserAuthorizedEditLIG
    Set Log Level    TRACE

    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[0]}
    ${lig_uri}    Get LIG URI    ${lig_neg[1]['name']}
    ${lig_edit}    Get LIG member    ${lig_neg[1]['name']}
    ${resp} =   Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    Run Keyword If    ${resp['status_code']} != 202    Fail    ELSE    log    \nonly ${usercred[0]['userName']} can be able to edit LIG    console=True

    ${len}    Get Length    ${users}
    :FOR    ${x}    IN RANGE    1    ${len}
    \    ${Resp}    Fusion Api Login Appliance    ${appliance_ip}    ${usercred[${x}]}
    \    ${lig_uri}    Get LIG URI    ${lig_neg[1]['name']}
    \    ${lig_edit}    Get LIG member    ${lig_neg[1]['name']}
    \    ${resp} =  Fusion Api Edit LIG     body=${lig_edit}    uri=${lig_uri}
    \    Run Keyword If  ${resp['status_code']} != 403 or '${resp['errorCode']}' != 'ACTION_FORBIDDEN_BY_ROLE'    Fail    ELSE    log    \n ${usercred[${x}]['userName']} cannot edit LIG \n Error: ${resp['errorCode']}

Final OV cleanup
    [Documentation]    Performs a final cleanup
    [Tags]  cleanup    setup
    Set Log Level    TRACE
    Cleanup
