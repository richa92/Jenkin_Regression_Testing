*** Settings ***
Documentation    LI SNMPv3 SNMPv1 Configurations on LI and Trap Verifications for Carbon Tbird
Library			RoboGalaxyLibrary
Library			FusionLibrary
Library			OperatingSystem
Library			BuiltIn
Library			Collections
Library		    SSHLibrary
Library			String
Variables		data_variables.py
Resource        ../../../../resource/fusion_api_all_resource_files.txt
Suite Setup               Suite Setup Tasks

*** Variables ***
${pattern1}    SNMPv3 Trap Recipient
${pattern2}    STRING
${v1_cold_trap}        Cold Start Trap
${v3_cold_trap}        coldStart

*** Test Cases ***

### Editing the LI for SNMP config
1_Add SNMP config in LI for single user with auth & priv protocols and trap details
    [Documentation]    Setting SNMP config in LI for 1 user with auth & priv protocols and trap details

    Set Log Level    Trace
    Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}

    Clear LI SNMP Config
    ${LI_uri}    LI Uri for SNMP
    Set Global Variable    ${LI_URI}    ${LI_uri}

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3 with single user auth/priv protocols\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


2_Verify LI edit for Adding snmp V1 Trap IP with same Trap IP as snmp V3
    [Documentation]    Setting SNMP config in LI for both snmpv1 and snmpv3 user having same trap ip

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_URI}    LI Uri for SNMP
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    ${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}
    Append To List    ${LI_edit_snmp_trap}    ${v1_trap}
    #log to console    \n the old snmp is : ${LI_edit_snmp_trap}\n
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
    Set To Dictionary    ${LI_edit_snmp}    enabled=${true}
    log to console    \n the old snmp is : ${LI_edit_snmp}\n
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


3_Verify behavior for Editing SNMPV3 Trap IP and VI Trap Ip
    [Documentation]    Edit LI for both snmpv1 and snmpv3 trap ip and verify behaviour

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}


    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}
    ${len}    Get Length   ${LI_edit_snmp_trap}
    :For    ${x}    In Range    0    ${len}
    \    Log to console    \n Editing Trap Ip for ${LI_edit_snmp_trap[${x}]['trapFormat']}\n
    \    Set To Dictionary    ${LI_edit_snmp_trap[${x}]}    trapDestination=${alternate_trap_ip}
    \    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
    \    ${LI_URI}    LI Uri for SNMP
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3 and snmp V1 trap IP's\n
    \    ...    ELSE    FAIL
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    Log to console    \n successfully edited Trap IP for ${LI_edit_snmp_trap[${x}]['trapFormat']}\n



4_Add SNMP Config in LI for 6 SNMPV3 users with diff auth & priv combinations and a valid trap destination for 1 user
    [Documentation]    Edit LI for snmpv3 with 6 users and diff auth & priv settings, trap ip and verify behaviour

    Clear LI SNMP Config
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_all_users}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True



5_Verify behaviour for Edit SNMPv3 Username field for users on LI
    [Documentation]    Edit LI for all snmpv3 usernames even for those assigned in trap destinations

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    ${LI_edit_snmp_user}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers']}
    ${len}    Get Length    ${li_usernames_edit}
    ${valDict} =    Create Dictionary    taskState=Completed

    Set To Dictionary    ${LI_edit_snmp_user[0]}    snmpV3UserName=${li_usernames_edit[0]}
    Set To Dictionary    ${LI_edit_snmp_user[0]}    userCredentials=${SNMPV3_LI_body_sha_aes['snmpUsers'][0]['userCredentials']}
    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${LI_edit_snmp_user}
    ${LI_URI}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    log to console   \nSuccessfully verified the behaviour for editing userrname that is assigned to trap\n



6_Edit Snmpv3 on LI and set notification type to inform
    [Documentation]    Edit LI for snmpv3 and set notification type to inform

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id}
    #log to console    \n the new dict is : ${temp}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the response is : ${resp}\n
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3 and changed notification type to trap\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


7_1_TRAP SCENARIO Add SNMP config in LI for single user with Authentication protocol as MD5 with trap and verify Trap for poweroff/poweron
    [Documentation]    Add a user with MD5 Authentication protocol - with Inform notification and verify the trap for IC operation

    Set Log Level    Trace
    Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}

    Clear LI SNMP Config
    ${LI_uri}    LI Uri for SNMP
    Set Global Variable    ${LI_URI}    ${LI_uri}

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3 with single user and auth protocol\n
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${snmp_v3}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v3_cold_trap}

    Run Keyword If  '${snmp_v3}' == 'True'    Log to console  \nThe cold trap is found for SNMPv3 IC Reboot operation\n
    ...    ELSE    FAIL

7_2_TRAP SCENARIO Add SNMPv1 config in LI for and verify Trap for poweroff/poweron
    [Documentation]    Add a SNMPv1 configuration and verify the trap for IC operation

    ### Code for edit LI to v1 trap

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${v1_trap_list}
    Set To Dictionary    ${LI_edit_snmp}    enabled=true
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false
    Set To Dictionary    ${LI_edit_snmp}    readCommunity=public
    ${LI_uri}    LI Uri for SNMP

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${snmp_v1}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v1_cold_trap}

    Run Keyword If  '${snmp_v1}' == 'True'    Log to console  \nThe cold trap is found for SNMPv3 IC Reboot operation\n
    ...    ELSE    FAIL



8_Negative Scenario verify the behavior for sending payload that exceeds 6 SNMPV3 users on LI
    [Documentation]    verify the error for sending payload that exceeds 6 maximum SNMPV3 users

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_7_users}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USERS_EXCEEDS_MAX'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified that carbon LI accepts only a maximum of 6 users at a time \n


9_Negative Scenario verify behaviour for adding same Trap IP for 2 snmpv3 users on LI
    [Documentation]    Edit LI by setting a trap ip to 1st user and then get LI and append 2nd user with same trap ip as the first and verify the behaviour

    log to console    \n Add a snmpv3 user with a Trap Ip\n
    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_sha_aes}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    log to console    \nPerform Get LI and edit 2nd user with same Trap IP as that of 1st user\n


    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    log to console    \n the old snmp is : ${LI_edit_snmp}\n
    ${LI_edit_snmp_user}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers']}
    ${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}
    Append To List    ${LI_edit_snmp_user}    ${SNMPV3_LI_body_md5['snmpUsers'][0]}
    Append To List    ${LI_edit_snmp_trap}    ${SNMPV3_LI_body_md5['trapDestinations'][0]}
    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${LI_edit_snmp_user}
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
    log to console    \n new snmp is :${LI_edit_snmp}\n
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}

    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE'   Log to console  \n Error Message is : ${resp['details']} \n
    ...    ELSE    FAIL
    #log to console    \n Verified the error for sending payload with same trap for 2 users at once \n


10_Disable SNMPV3 on LI
    [Documentation]    Disable SNMPV3 on LI


    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_URI}    LI Uri for SNMP
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    log to console   \n the resp is : ${LI_edit_snmp}\n
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for disabling snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    #Disable SNMPV3 and verify no Trap

11_Verify response for payload having 6 different trap recepients with same user for all on LI
    [Documentation]    Edit LI for 6 trap destination with same users for all

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_6_trap}

    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    log to console    \n Successfully verified the response for sending payload response  having 6 different traps with same user for all \n


12_Negative Scenario Verify response for payload having trap recepients with non existing snmpv3 usernames on LI
    [Documentation]    Edit LI for trap details with invalid usernames for snmpv3

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    log to console    \n The name in SNMPV3 Username is : ${SNMPV3_LI_body_invalid_trap_user['snmpUsers'][0]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    log to console    \n The name in SNMPV3 Trap Recepient Username is :${SNMPV3_LI_body_invalid_trap_user['trapDestinations'][0]['userName']}\n
    log to console     \n ---------------------------------------- \n
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_invalid_trap_user}
    #log to console    \n the resp is : ${resp} \n
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified error response for payload having trap recepients with invalid username \n


13_Negative Scenario Verify Behaviour for payload with 7 SNMPV3 trap recepients on LI
    [Documentation]    Edit LI for trap details with 7 SNMPV3 trap data

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${snmpv3_li_body_6_users_7_traps}
    #log to console    \n the resp is : ${resp} \n
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_FC_TRAP_DESTINATION_EXCEEDS_MAX'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully Verified error for SNMPV3 payload with 7 trap recepients \n


14_Negative Scenario Verify SNMPV1 can accept max of 5 traps on LI
    [Documentation]    Edit LI for SNMPV1 that can accept a max of 5 traps only

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${snmpv1_li_body_6_traps}
    log to console    \n the resp is : ${resp} \n
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully Verified error for SNMPV1 payload with 6 trap recepients \n


15_Verify 5 SNMPV1 traps and 6 SNMPV3 traps payload is accepted at once on LI
    [Documentation]    Edit LI for SNMPV1 that can accept a max of 5 traps and SNMPV3 with max of 6 traps are accepted at once

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${snmpv1_li_body_6snmpv3traps_5snmpv1traps}
    #log to console    \n The resp is :${resp}\n
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    log to console    \n Successfully verified the response for sending payload response  having 6 different traps with same user for all \n


16_Negative Scenario verify LI behaviour for creating a 2nd user with existing user name(duplicate user)
    [Documentation]    Edit LI SNMPV3 for sending payload with 2 users of same name at once

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    log to console    \n The name in SNMPV3 Username 1st index is : ${snmpv3_li_body_duplicate_user['snmpUsers'][0]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    log to console    \n The name in SNMPV3 Username 2nd index is : ${snmpv3_li_body_duplicate_user['snmpUsers'][1]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${snmpv3_li_body_duplicate_user}
    #log to console    \n the resp is : ${resp} \n
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified error for sending payload with 2 users of same name at once \n


17_Negative Scenario Create a snmpv3 user and then edit LI again to add 2nd user with same name & verify behaviour
    [Documentation]    Edit LI SNMPV3 for sending payload with 2 users of same name one by one

    Log to console    \n Create a snmpv3 user\n
    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    log to console    \n Perform Get LI body and edit the Li and append 2nd user details with same name n verify behaviour\n

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    ${LI_edit_snmp_user}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers']}
    Append To List    ${LI_edit_snmp_user}    ${SNMPV3_LI_body_md5_des_duplicate['snmpUsers'][0]}
    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${LI_edit_snmp_user}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    #log to console    \n the resp err is : ${resp} \n
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified error for editing LI with 2nd user of same name as the 1st user \n


18_Negative Scenario Verify the behaviour for giving same IP for both Trap and Inform despite having different users
    [Documentation]    Edit LI SNMPV3 for giving same ip for trap and inform despite having different users

    log to console    \nconfigure a snmpv3 user with trap type as TRAP with a Trap Recepient\n

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    ${LI_edit_snmp_user}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers']}
    ${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}

    log to console    \ntrying to configure inform for a user with same trap ip as the 1st user by editing the get snmp details\n

    Append To List    ${LI_edit_snmp_user}    ${SNMPV3_LI_body_sha_inform['snmpUsers'][0]}
    Append To List    ${LI_edit_snmp_trap}    ${SNMPV3_LI_body_sha_inform['trapDestinations'][0]}
    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${LI_edit_snmp_user}
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified error for giving same ip for trap and inform despite having different users\n


19_Negative Scenario verify behaviour to delete a snmpv3 user who is assigned to trap and verify error
    [Documentation]    Edit LI SNMPV3 for deleting a user who is assigned to a trap

    #${LI_uri}    LI Uri for SNMP
    ${list}    Create List
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    #${LI_edit_snmp_user}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers']}
    Set To Dictionary    ${LI_edit_snmp}    snmpUsers=${list}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    #log to console    \n the resp err is : ${resp}\n

    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL


20_Perform get request on LI for a user with Auth/Privacy Protocol enabled verify the passwords are displayed as none
    [Documentation]    Perform a GET request on LI and check whether the password values are visible

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${LI_set_snmp_user_creds}    Get Variable Value    ${SNMPV3_LI_body_sha_aes['snmpUsers'][0]['userCredentials']}
    #log to console    \n The snmp user creds to be set are : ${LI_set_snmp_user_creds}\n
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_sha_aes}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    Log to Console    \n Perform a get request on LI and verify whether the passwords for AUTH/PRIVACY are visible\n
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_get_user_creds}    Get Variable Value    ${LI_edit['snmpConfiguration']['snmpUsers'][0]['userCredentials']}
    Log to console    \n The value in get snmp user creds are : ${LI_get_user_creds}\n
    Run Keyword If    '${LI_get_user_creds}' != 'None'    FAIL    ELSE    Log to console    \n Successfully verified that the user creds are encrypted\n


21_Negative Scenario verify snmpv3 username field textbox combinations on LI
    [Documentation]    verify different SNMPV3 username textbox validations on LI


    log to console    \nTrying with special characters , 8 spaces as usernames\n

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${len}    Get Length    ${inavlid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${inavlid_snmp_usernames[${x}]}
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID_FORMAT'   Log to console  \n Error Message is : ${resp['message']} \n
    \    ...    ELSE    FAIL
    log to console    \n Successfully verified the username text box validations for invalid string formats\n

    log to console    \nTrying with username exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_EXCEEDS_MAX'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the username text box supports a maximum of 31 characters only\n

    log to console    \nTrying with username null\n

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[1]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_LESS_THAN_MIN_LENGTH'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the username text box requires a minimum of 1 character\n


    log to console    \nPositive scenarios SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric, only alphabets (lower & uppercase), only numeric\n

    ${len}    Get Length    ${valid_snmp_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${valid_snmp_username[${x}]}
    \    ${LI_URI}    LI Uri for SNMP
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The username ${valid_snmp_username[${x}]} is accepted\n


22_Negative scenario verify snmpv3 Auth protocol field's password textbox combinations on LI
    [Documentation]    verify different SNMPV3 Authentication protocol textbox validations on LI


    Clear LI SNMP Config
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}

    log to console    \nInvalid auth password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    log to console    \n the resp is :${resp}

    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the Auth Password text box validations for 8 spaces as input\n


    log to console    \nTrying with auth password exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the Auth password text box supports a maximum of 31 characters only\n


    log to console    \nTrying with auth password less than 8 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${min_length_auth_password}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the Auth password text box requires a minimum of 8 character\n

    log to console    \nPositive scenarios validations of auth password field tesxbox\n
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${valid_auth_username[${x}]}
    \    ${LI_URI}    LI Uri for SNMP
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The password ${valid_auth_username[${x}]} is accepted\n
    Log to console    \n Successfully verified different password combinations for auth protocol\n


23_Negative Scenario verify snmpv3 priv protocol's password textbox combinations on LI
    [Documentation]    verify different SNMPV3 Privacy protocol textbox validations on LI

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${len}    Get Length    ${invalid_auth_passwords}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}

    log to console    \nInvalid privacy password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the resp is :${resp}


    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the privacy Password text box validations for 8 spaces as input\n


    log to console    \nTrying with privacy password exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${max_length_username[0]}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the privacy password text box supports a maximum of 31 characters only\n


    log to console    \nTrying with privacy password less than 8 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${min_length_auth_password}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_LENGTH_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the privacy password text box requires a minimum of 8 character\n

    log to console    \nPositive scenario validations of priv password field textbox\n
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${valid_auth_username[${x}]}
    \    ${LI_URI}    LI Uri for SNMP
    \    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The password ${valid_auth_username[${x}]} is accepted\n
    Log to console    \n Successfully verified different password combinations for privacy protocol\n


24_Verify snmpv3 Trap IP's text box combinations and Engine ID's text box combination on LI
    [Documentation]    verify different SNMPV3 trap ip's and engine id's validation on LI

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}

    log to console    \nverifying Invalid Engine ID\n
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${invalid_engine_id}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    #log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_INVALID_ENGINEID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n successfully verified the error for engineId validations\n


    Log to console    \nverifying invalid Trap IP\n
    Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${invalid_trap_ip}
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
    log to console    \n the resp is :${resp}
    Run Keyword If  '${resp['status_code']}' == '400' or '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_IP_INVALID'   Log to console  \n Error Message is : ${resp['message']} \n
    ...    ELSE    FAIL
    log to console    \n successfully verified the error for Trap Ip validations\n



25_Verify behaviour for other users to edit LI for SNMPV3
    [Documentation]    verify other users are able to edit li for SNMPV3

    Remove All Users
    Clear LI SNMP Config
    ${valDict} =    Create Dictionary    taskState=Completed
    :FOR    ${user}    IN    @{users_list}
	\    ${resp}    Fusion Api Add User    ${user}
	\    Run Keyword If  '${resp['status_code']}' == '200'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Created the user \n
    \    ...    ELSE    FAIL
    Sleep    30s

    Log to console    \nLogging in as Server admin and edit li for snmpv3\n

	${login}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin_credentials}
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}

	Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance


    Log to console    \nLogging in as Network admin and edit li for snmpv3\n

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${network_admin}
	#${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}

    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${resp}    Fusion Api Logout Appliance

    Log to console    \nLogging in as Backup admin and edit li for snmpv3

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${backup_admin}
    #${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}


	Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

    Log to console    \nLogging in as Read only user and edit li for snmpv3

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${readonly_user}
	#${LI_uri}    LI Uri for SNMP
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}


	Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

	Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}

	Remove All Users


26_Trap Scenario for Edit LI - SNMPv3 and SNMPv1 enable/disable uplink ports
    [Documentation]    LI SNMP configurations for v1 & v3 for enable/disable ports traps
    Clear LI SNMP Config
    ${LI_uri}    LI Uri for SNMP
    Set Global Variable    ${LI_URI}    ${LI_uri}

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${output1}    ${output2}    Enable/Disable the linked uplink ports and verify the resultant Traps
    log to console    \n Outoput1 ret is :${output1}\n
    log to console    \n output2 ret is :${output2}\n

    Sleep    1800s

### Code for edit LI to v1 trap

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${v1_trap_list}
    Set To Dictionary    ${LI_edit_snmp}    enabled=true
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false
    Set To Dictionary    ${LI_edit_snmp}    readCommunity=public
    ${LI_uri}    LI Uri for SNMP

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${output3}    ${output4}    Enable/Disable the linked uplink ports and verify the resultant Traps
    log to console    \n Outoput3 ret is :${output3}\n
    log to console    \n output4 ret is :${output4}\n

    Run Keyword If  '${output2}' == '${output4}'    Log to console  \nSuccessfully!! verified the OIDs of SNMPv3 - SNMPv1 Traps for Port Enable/disable\n
    ...    ELSE    FAIL


27_Add SNMP Config in LI for 6 Snmpv3 users with diff auth & priv combinations and verify them with Carbon IC's CLI
    [Documentation]    Edit LI for snmpv3 with 6 users and diff auth & priv settings, trap ip and verify behaviour

    Clear LI SNMP Config
    ${LI_uri}    LI Uri for SNMP
	Set Global Variable    ${LI_URI}    ${LI_uri}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_all_users}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

### Code to verify in IC
    Validate All Users

28_Add V1 Trap and V3 Trap IP on LI and verify them with Carbon IC's CLI
    [Documentation]    Setting SNMP config in LI for both snmpv1 and snmpv3 user having same trap ip
	Set Log Level    Trace
    Clear LI SNMP Config
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_uri}    LI Uri for SNMP
    Set Global Variable    ${LI_URI}    ${LI_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}

    ${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}
    Append To List    ${LI_edit_snmp_trap}    ${v1_trap}
    #log to console    \n the old snmp is : ${LI_edit_snmp_trap}\n
    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
    Set To Dictionary    ${LI_edit_snmp}    enabled=${true}

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

### Code to verify in IC

   	${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
	${resp}    Fusion Api Get Li    ${li_uri}
	${trapDestinations}     Set Variable     ${resp['snmpConfiguration']['trapDestinations']}
	Set Global Variable     ${trap}    ${trapDestinations}
	${len_trap}     Get Length     ${trap}
	:FOR     ${x}     IN RANGE     ${len_trap}
	\     Run Keyword If     '${trap[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1     ELSE      Get Trap details and validate for single trap     ${x}


29_Edit LI and set different configurations for SNMPV3 and verify them on Carbon IC's
	[Documentation]    Verify LI edit operation for different trap users and check whether it's reflected on the Carbon IC's CLI

    Clear LI SNMP Config
    #${LI_uri}    LI Uri for SNMP

	${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
	#Set To Dictionary    ${temp['trapDestinations'][0]}    port=${port}
	Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
	Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id1}

	${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${temp}
	Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
	...             ELSE    FAIL
	${valDict} =    Create Dictionary    taskState=Completed
	${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

	## code to verify trap data on IC's side

	${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
	${resp}    Fusion Api Get Li    ${li_uri}
    Set Global Variable     ${trap}    ${resp['snmpConfiguration']['trapDestinations']}
	${len_trap}     Get Length     ${trap}
	:FOR     ${x}     IN RANGE     ${len_trap}
    \     Run Keyword If     '${trap[0]['trapFormat']}' == 'SNMPv3'    Get Trap details and validate for single trap     ${x}     ELSE     Fail

    # edit trap users and verify them on IC's side
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
	${LI_edit}    Fusion Api Get Li    ${li_uri}

	${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
	${LI_edit_snmp_trap}    Get Variable Value    ${LI_edit['snmpConfiguration']['trapDestinations']}
	Set To Dictionary    ${LI_edit_snmp_trap[0]}    engineId=
	Set To Dictionary    ${LI_edit_snmp_trap[0]}    inform=false
	log to console   \n Trapdata is : ${LI_edit_snmp_trap}\n

	${len}    Get Length    ${SNMPV3_LI_body_all_users['snmpUsers']}
	#Since Max remote sessions for login into interconnect : root is 4
	#:For    ${x}    In Range    0    ${len}
	:For    ${x}    In Range    0    4
	\    Set To Dictionary    ${LI_edit_snmp_trap[0]}    userName=${SNMPV3_LI_body_all_users['snmpUsers'][${x}]['snmpV3UserName']}
	\    Set To Dictionary    ${LI_edit_snmp}    trapDestinations=${LI_edit_snmp_trap}
	\    Log to console   \n edited trap username is :${LI_edit_snmp}\n
	\    ${LI_URI}    LI Uri for SNMP
	\    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${LI_edit_snmp}
	\    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3

	\    ...             ELSE    FAIL
	\    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

### Code to verify in IC
	\    Set Global Variable     ${trap}     ${LI_edit_snmp_trap}
	\	${len_trap}     Get Length     ${trap}
	\    Validate LI Trap     ${len_trap}     ${trap}



## Make this as last step
30_Backup Restore scenario Add SNMP config in LI for single user with Authentication & Privacy protocol as MD5/DES and backup the setup, disable SNMPV3 on LI and restore the configuration
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation during BACKUP RESTORE

    Clear LI SNMP Config
    ${LI_uri}    LI Uri for SNMP
    Set Global Variable    ${LI_URI}    ${LI_uri}

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_URI}    body=${SNMPV3_LI_body_md5_des}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    Log to console and logfile    \n-Creating the backup in OV
    ${resp}    Fusion Api Create Backup
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nBackup failed. \n ErrorCode:${resp['errorCode']}\n ${resp['message']}
    ${task}    Wait For Task   ${resp}     20 min    20s
    Run Keyword If  '${task['taskState']}' !='Completed'   or   ${task['status_code']} !=200   fail    msg=\nBackup failed. \n ErrorCode:${task['taskErrors']}\n ${task['taskStatus']}
    ...         ELSE    Log to console and logfile  \n\nBackup Created Succesfully !! \n ${task['taskStatus']}

    Log to console    \n DISABLE SNMPV3 on OV\n
    Disable SNMPV3


    Log to console and logfile     \n\nRestoring from the backup in the appliance
    Restore From Backup
    Sleep   15 min
    Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}

    Log to console and logfile     \nVerifying whether snmpv3 is enabled after restore\n
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Log to console    \nSNMPv3 configuration after restore is ${LI_edit_snmp['v3Enabled']}\n
    Run Keyword If  '${LI_edit_snmp['v3Enabled']}' == 'true'    Log to console  \nverified snmpv3 configuration after restore Successfully!!\n


*** Keywords ***
#######################################
# SETUP WORFLOWS - Variables
#######################################
#######################################
Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level      TRACE
    ${TEST_NAME}    Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile    [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Clean OV
    ${fc_networks}    Get Variable Value    ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    ${body}    Build LIG body    ${LIG_new}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    Add Enclosure Group from variable    ${enc_groups}
    Sleep    10s
    Add Logical Enclosure from variable    ${les}
   :FOR     ${IC}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${IC}
    \   Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
    \   ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \  ${state}=     Get From Dictionary     ${resp['members'][0]}   state
    \  Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
    \   ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Clear LI SNMP Config
    [Documentation]    Clear SNMP config
    ${list}    Create List
    ${LI_uri}    LI Uri for SNMP
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary     ${temp}     trapDestinations=${list}
    Set To Dictionary     ${temp}     snmpUsers=${list}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${temp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Cleared the snmpV3config on LI\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

LI Uri for SNMP
    [Documentation]    Fetch LI Uri for SNMP
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI}    Fusion Api Get Li    ${li_uri}
    ${uri}    Get From Dictionary    ${LI}    uri
    ${LI_uri}    Catenate    SEPARATOR=/    ${uri}    ${snmp_config}
    [Return]    ${LI_uri}


EFUSE ICM EfuseReset and verify the SNMPV3 TRAP
    [Documentation]    EFuse IC and verify Trap
    [Arguments]    ${trap}
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n

### Performing efuse reset for all the Carbon IC's

    #:FOR    ${x}    IN RANGE    0  ${len_ic}
    :FOR    ${x}    IN RANGE    1   2
    \    log to console    \n clearing old traps \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${IC_IP_list}    Create List
    \    Append To List     ${IC_IP_list}    ${ic_ip}    ${V3_host}
    \    log to console      \n ic_ip is: ${IC_IP_list}\n
    \    Efuse IC    ${ic_uri}    ${ic_bay}    ${ic_name}
    \    log to console    \n Verify the Traps from trap receiver \n
    \    ${output}    Wait Until Keyword Succeeds    500s    20s    Verify Trap for reboot    ${ic_ip}    ${trap}
    \    log to console    \n The Traps for the efuse reset for the carbon interconnect ${ic_name} have been verified successfully !!! \n
    #\    Sleep    1000s
    [Return]    True

Issue a Power Off followed by Power On from OV and verify the Trap
    [Documentation]    poweroff/poweron IC and verify trap
    [Arguments]    ${trap}
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n


### Performing poweroff from OV for Carbon IC

    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    1    2
    \    log to console    \n clearing old traps \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${IC_IP_list}    Create List
    \    Append To List     ${IC_IP_list}    ${ic_ip}    ${V3_host}
    \    log to console      \n ic_ip is: ${IC_IP_list}\n
    \    Log to console    \n Performing poweroff from OV for Carbon IC ${ic_bay} \n
	\    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[0]}    ${ic_name}
	\    Log to console and logfile    \n -Verify it's off \n
	\    Should Be Equal As Strings    ${ic_state}    Off



### Performing poweron from OV for Carbon IC
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    Log to console    \n Performing poweron from OV for Carbon IC ${ic_bay} \n
    \    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[1]}    ${ic_name}
    \    Log to console and logfile    \n-Verify it's on\n
	\    Should Be Equal As Strings    ${ic_state}    On
	\    Wait Until Keyword Succeeds    25 min   15s     IC reached state    ${ic_uri}    Configured
    \    log to console    \n Verify the Traps from trap receiver \n
    \    ${output}    Wait Until Keyword Succeeds    1000s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    [Return]    True





Open SNMP Client and Login
    [Documentation]    login to snmp linux machine
	[Arguments]         ${SNMP_IP}
    Open Connection     ${SNMP_IP}     timeout=180s
    Login               ${V3_user}     ${V3_pass}
	log to console    Logged into the Snmp client : ${SNMP_IP}

Clear Trap
    [Documentation]    clear old traps
    Open SNMP Client and Login    ${V3_host}
	Write	 cd /
	Write	 cd var
	Write	 cd log
	Write    > messages
	Close All Connections
	log to console    \n Cleared the trap messages

Restart SNMP service
    [Documentation]    restart snmp service on linux
    Open SNMP Client and Login    ${V3_host}
    Write	 cd /
	Write	 cd etc
	Write	 cd snmp
	Write	 service snmpd restart
	Close All Connections
	log to console    \n restarted snmp\n

Get Trap
    [Documentation]    Opens the Trap receiver machine to verify the trap
	[Arguments]	       ${OA_HOST}    ${OA_USER}		${OA_PASS}
	Open Connection     ${OA_HOST}    timeout=120s
	Login               ${OA_USER}     ${OA_PASS}
	Write    cd /
    Write    cd var
    Write    cd log
    #Write    cat messages
    Write    tail -f -n 20 messages
    Sleep    10s
    ${output}    Read
    Close All Connections
    [Return]    ${output}


verify trap for oid
    [Documentation]    verify trap for enable/disable IC ports with port and OID
    [Arguments]    ${ic_ip}
    Set Log Level    TRACE
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    ${temp}    Convert To String    ${IC_trap}
    ${lines}    Get Lines Containing String   ${temp}    ${pattern2}
    ${str}    Convert To String    ${lines}
    ${match}    ${oid_value}    ${port}     Should Match Regexp    ${str}    INTEGER: .*SNMPv2-SMI::experimental(.*) = STRING:\\s+\\"port(\\d+)\\"
    log to console    \n The oid_value output is ${oid_value}\n
    log to console    \n The port output is ${port}\n
    log to console    \n The match output is ${match}\n
    [Return]    ${port}    ${oid_value}


Verify Trap for reboot
    [Documentation]    Verify Trap for IC reboot
    [Arguments]    ${ic_ip}    ${trap}
    Set Log Level    TRACE
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    Log to console    \nThe Trap Output contains the required IC IP for IC reboot\n
    ${lines1}    Should contain   ${IC_trap}    ${trap}
    Log to console    \nThe Trap Output contains Cold Trap for the given IC Operation\n
    [Return]    True


Verify Trap for efuse
    [Documentation]    verify trap for IC efuse reset
    Set Log Level    TRACE
    #Sleep    100s
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    #${string1}    Should contain    ${trap_output}    ${MIB}
    #${string2}    Should contain    ${trap_output}    ${OID}
    ${lines}    Get Lines Containing String   ${trap_output}    ${pattern1}
    ${str}    Convert To String    ${lines}
    #log to console    \n str is :${str}
    @{words}    Split String    ${str}    \n
    ${len}    Get Length    ${words}
    ${list}    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${match}    ${return1}    ${return2}    Should Match Regexp     ${words[${x}]}    UDP: \\[(\\d+.\\d+.\\d+.\\d+).*\\[(\\d+.\\d+.\\d+.\\d+)\\]
    \    Append To List    ${list}    ${return1}    ${return2}
    #log to console    \n The output from Trap Receiver is :${list}\n
    [Return]    ${list}


Traps IP validation
    [Documentation]    verify Trap IPs with IC IPs
    [Arguments]    ${output}    ${IC_IP_list}
    ${len1}    Get Length    ${IC_IP_list}
    :For    ${x}    In Range    0    ${len1}
    \    Log to console     \n the IP's to verify are: ${IC_IP_list[${x}]}
    \    List Should Contain Value    ${output}    ${IC_IP_list[${x}]}
    \    Log to console    \n Successfully verified that the SNMPV3 Traps are present for the given Interconnect's operation \n



Get interconnect ip
    [Documentation]    Fetch IC IPs
	[Arguments]		${ic}
	${resp} = 	Fusion Api Get Interconnect  		param=?filter="'name'=='${ic}'"
	${interconnectIP} = 	Get From Dictionary		${resp['members'][0]}	ipAddressList
	${len}    Get Length    ${interconnectIP}
	:For    ${x}    In Range    0    ${len}
	\    ${value}    Run Keyword If	  '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
	#\    ${value}    Run Keyword If	  '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
	Log to console    \n the interconnect ip is :${value}\n
	[Return]	${value}


Get ICs
    [Documentation]    Fetch Carbon ICs
    ${resp} =    fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary    ${resp}    members
    ${l} = 	Get Length	${ics}
    :FOR    ${x}    IN RANGE	0	${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL1}' and '${ic['model']}' != '${ICM_MODEL2}'     Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}


Get Linked Ports
    [Documentation]    Fetch linked ports
    [Arguments]    ${ic_ports}    ${port_len}
    ${link_list}    Create List
    :For    ${x}    In Range    0    ${port_len}
    \    Run Keyword If    '${ic_ports[${x}]['portType']}' != '${Port_uplink}' or '${ic_ports[${x}]['portStatus']}' != '${Port_linked}'     Continue For Loop
    \    Append To List    ${link_list}    ${ic_ports[${x}]['portName']}
    \    log to console    \n linklist of ports is:${link_list}\n
    [Return]    ${link_list}

Change Uplink Port Status
    [Documentation]   Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${ic_name}     ${status}

    ${ic_uri} =     Get IC URI      ${ic_name}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    #Log to console \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  interconnectName     ${ic_name}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    log to console     \n the edit uplink port is :${Edit_Uplink_Port} \n

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${ic_name} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     180s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${ic_name} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${ic_name} Successfully !!

Change Downlink Port Status
    [Documentation]   Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${Linked_Downlink_port}      ${ic_name}     ${status}

    ${ic_uri} =     Get IC URI      ${ic_name}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${Linked_Downlink_port}' or '${resp['members'][${y}]['portType']}' != 'Downlink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${Linked_Downlink_port}
    Log to console    \nport id ${portid}\n
    Set to Dictionary   ${downlink_port_disable}  portId     ${portid}
    Set to Dictionary   ${downlink_port_disable}  interconnectName     ${ic_name}
    Set to Dictionary   ${downlink_port_disable}  enabled     ${status}
    Set to Dictionary   ${downlink_port_disable}  portName     ${Linked_Downlink_port}
    Set to Dictionary   ${downlink_port_disable}  portStatus     ${port_info[0]['portStatus']}


    log to console     \n the edit downlink port is :${downlink_port_disable} \n

    ${edit_body} =  Create List     ${downlink_port_disable}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Downlinkport ${Linked_Downlink_port} in ${ic_name} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     180s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${Linked_Downlink_port} in ${ic_name} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${Linked_Downlink_port} in ${ic_name} Successfully !!

Efuse IC
    [Documentation]    Perform IC Efuse
    [Arguments]    ${ic_uri}    ${ic_bay}    ${ic_name}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${ic_uri} is in Configured state
    Log to console and logfile  \n\nRemoving and adding back Carbon ${ic_name} module
    Get EM IP
    Get EM Token    ${ENC1}
    EFuse ICM    EFuseReset   ${ic_bay}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Absent
    Log to console and logfile  \n\nThe IC module ${ic_name} is in Absent state
    Wait Until Keyword Succeeds    25 min   10s     IC reached state    ${ic_uri}    Adding
    Log to console and logfile  \n\nThe IC module ${ic_name} is in Adding state
    Wait Until Keyword Succeeds    15 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${ic_name} Removed and Added back Successfully!! and is in Configured state

Poweroff/poweron IC from OV
    [Documentation]    Perform IC reboot from OV
    [Arguments]    ${ic_uri}    ${power_value}    ${ic_name}
    ${body}    Set To Dictionary    ${edit_power_body}    value=${power_value}
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect    body=${body}    uri=${ic_uri}
    #Log to console	\nresp after power off is ${resp}
    ${task} =   Wait for Task    ${resp}
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    60 s    2 s    True
    #Log to console and logfile		\nSleeping for 2 mins\n
    Sleep   2min
    ${resp} = 	Fusion Api Get Interconnect  		param=?filter="'name'=='${ic_name}'"
    ${ic_state} =     Get From Dictionary     ${resp['members'][0]}     powerState
    log to console    \n the ic state is:${ic_state}\n
    [Return]    ${ic_state}


Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${time}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}     timeout=${TIMEOUT}
    ${Id}=                      Open Connection      ${IP}    alias=${ALIAS}
    ${Output}=                  Login                ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}     timeout=${TIMEOUT}
    ${Id}=                      Open Connection      ${IP}    alias=${ALIAS}
    ${Output}=                  Login                ${USERNAME}     ${PASSWORD}    ${tm}
    [Return]                    ${Id}


Login Into ICs and send traps through CLI
    [Documentation]    Login Into ICs and send traps through CLI
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${command}    Execute Command    snmptraps  --send  -ip_address 15.186.13.8
    ${output}    Read
    log to console    \n The output is : ${output}
    [Return]    ${output}

Verify Interconnect State
    [Documentation]    Verify Interconnect State
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}


Enable/Disable the linked uplink ports and verify the resultant Traps
    [Documentation]    Enable/Disable the linked uplink ports and verify the resultant Traps
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n


    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    1    2
    \    log to console    \n clearing old traps before disabling the linked uplink port \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    ${ic_ip}    Get interconnect ip    ${ic_name}

### Disabling the linked uplink port
    \    Change Uplink Port Status    ${Linked_Uplink_port[${x}]}      ${ic_name}     false
    \    ${port}    ${oid}    Wait Until Keyword Succeeds    1000s    10s    verify trap for oid    ${ic_ip}
    \    Run Keyword If    '${port}' == '${Linked_Uplink_port_id[${x}]}'     Log to console    \n The Trap output contains the enabled/disabled port information\n
    \    ...    ELSE    FAIL

### Enabling the disabled uplink port
    \    log to console    \n clearing old traps before enabling the disabled uplink port \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    Change Uplink Port Status    ${Linked_Uplink_port[${x}]}      ${ic_name}     true
    \    Sleep    500s
    [Return]    ${port}    ${oid}


Disable SNMPV3
    [Documentation]    Disable snmpv3
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false
    ${LI_uri}    LI Uri for SNMP


    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

Enable SNMPV3
    [Documentation]    Edit LI and enable SNMPV3

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=true
    ${LI_uri}    LI Uri for SNMP

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

Verify no Trap
    [Documentation]    Verify no Trap
    Set Log Level    TRACE
    #Sleep    100s
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    [Return]    ${trap_output}


Disable SNMPV3 and verify no Trap
    [Documentation]    Verify no Trap
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n


Restore From Backup
    [Documentation]    Restore From Backup
    ${status}=    Set Variable    ${EMPTY}
	${Response}=    Fusion Api Get Backup
	Run keyword If    ${Response['status_code']} != 200    Fail     msg="Failed to Get the latest backup"
	${restore_body}=   Create Dictionary    type=RESTORE
	...                                     uriOfBackupToRestore=${Response['members'][0]['uri']}
	${output}=    Fusion Api Restore Backup    ${restore_body}
	Run keyword If    ${output['status_code']} != 202    Fail      msg="Failed to perform the restore from backup operation"
	Sleep    10min
	${restore_resp}=     Fusion Api Get Restore Status
	Run keyword If    ${restore_resp['status_code']} != 200    fail    msg="Failed to get the restore details"
	:FOR   ${index}   IN RANGE   ${restore_resp['count']}
	\   Run Keyword If    '${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'   Continue For Loop
	\   ${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
	:FOR   ${index}   IN RANGE   50
	\	sleep	30sec
	\	Log to console and logfile		"Restoring is in Progress..."
	\	${resp}=    Fusion Api Get Restore Status    param=?filter="'id'=='${restore_id}'"
	\	Run keyword If     ${resp['status_code']}!= 200     Fail      msg="Unable to get the restore id details"
	\	Run Keyword If     '${resp['members'][0]['progressStep']}' != 'COMPLETED'    Continue For Loop
	\	${status} =    Set Variable    ${resp['members'][0]['status']}
	\	Run Keyword If   '${resp['members'][0]['progressStep']}' == 'COMPLETED'    Exit For Loop
	Should Be Equal    ${status}    SUCCEEDED
	Log to console and logfile     \nRestore process got succeeded


Edit LIG body for SNMP
    [Documentation]     LIG snmpv3 body
    [Arguments]    ${LIG1}    ${snmpusers}    ${trapdestination}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=true
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}


Check LI State
    [Documentation]     Check LI state
    [Arguments]    ${state}    ${li_uri}
	${resp}    Fusion Api Get Li    ${li_uri}
    ${LI_state}    Get From Dictionary    ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_state}    ${state}
    log to console and logfile    \n\LI state Is: ${LI_state}

Get LIG member
    [Documentation]     Get LIG body
    [Arguments]    ${LIG1}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}

Check IC's State
    [Documentation]     Verify ICs state
    ${ic_list}    Get ICs
    ${len}    Get Length    ${ic_list}
    :For    ${x}    In Range    0    ${len}
    \    ${state}    Get From Dictionary    ${ic_list[${x}]}    state
    \    log to console    \n The iC's state are : ${state}\n
    \    Should Be Equal As Strings    ${state}    ${IC_state}
    \    log to console    \n The IC: ${ic_list[${x}]['productName']} is in Configured State\n

Perform an Update From Group LI
    [Documentation]     Perform UFG
	[Arguments]    ${liuri}    ${timeout}=5 min    ${interval}=15s
	${resp}    Fusion Api Update From Group    uri=${li_uri}
	Run Keyword If    ${resp['status_code']} !=202    fail    Update from group
	${task}    Wait For Task    ${resp}    ${timeout}    ${interval}


LI Update and IC state check for LIG SNMPV3
    [Documentation]     LI Update and IC state check for LIG SNMPV3
    [Arguments]    ${li}
    ${li_uri}    Get LI URI    ${li}
    Check LI State    ${LI_Inconsistent}    ${li_uri}
    Check IC's State

    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Check LI State    ${LI_consistent}    ${li_uri}
    Check IC's State

Wait For Task1
	[Documentation]    Waits for a task to reach an end-state
	[Arguments]		${resp}	${timeout}=160 s	${interval}=40 s
	Log to console	\n
	${task} = 	Wait Until Keyword Succeeds		${timeout}	${interval}	Task Reached Endstate1	${resp}
	[Return]	${task}

Task Reached Endstate1
    [Documentation]     Task Reached Endstate1
	[Arguments]	${resp}
	Set Log Level	TRACE
	#Should Contain	${resp}	uri
	${location} =       Get Variable Value      ${resp['headers']['location']}
	${task_uri} =		Run Keyword If          '${location}' is 'None'      Get From Dictionary		${resp}	uri
	...                 ELSE                    Get Variable Value          ${location}
	#${task_uri} =		Get From Dictionary		${resp}	uri
	${task} = 			Fusion Api Get Task		uri=${task_uri}
	${task_state} = 	Get From Dictionary		${task}		taskState
	${task_category} = 	Get From Dictionary		${task}		category
	${task_name} = 		Get From Dictionary		${task}		name
	${resource} = 		Get From Dictionary		${task['associatedResource']}	resourceName
	${resource_uri} = 	Get From Dictionary		${task['associatedResource']}	resourceUri
	#Log to console and logfile  	\t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
	Should Match Regexp	${task_state}	((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
	[Return]	${task}

Validate All Users
    [Documentation]    Validate All Users
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
	${response}    Fusion Api Get Li    ${li_uri}

	Set Global Variable    ${snmpUsers}     ${response['snmpConfiguration']['snmpUsers']}
	Set Global Variable    ${TrapDestinations}     ${response['snmpConfiguration']['trapDestinations']}
	${len_trap}=    Get Length     ${TrapDestinations}
	Set Global Variable    ${LI_trap_length}     ${len_trap}
	${len}=    Get Length    ${snmpUsers}
	Set Global Variable    ${LI_Users_length}    ${len}
	Get Users details from Snmp machine to validate all users

Get Users details from Snmp machine to validate all users
    [Documentation]    Get Users details from Snmp machine to validate all users
	${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
	...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n

    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
	\    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
	\    Set Global Variable    ${IP}    ${ic_ip}
	\    ${Password}     Get Token
	\    Login Into ICs to validate all users     ${IP}    ${Password}

Get Token
	[Documentation]    Connect to Fusion VM Bash via SSH and get IC password
    Log to console    \n\nLogging into OneView SSH session
   	Login to Fusion via SSH
	Log to console  \n\n Verify files are exists in appliance
	${ls}=    Execute Command    ls
	${string}=    Split String    \n${ls}
	${len}=    Get Length    ${string}
	Log to Console    \n-Length_is...${len}
	Run Keyword If  ${len} ==2    Log to console    \n${len} Files already exist in appliance
    ...         ELSE    Put File      ${ICM_Scripts}       /root

    ${Perm}=    Execute Command     chmod +x readCanmic.sh writeCanmic.sh
    ${read}=    write    ./writeCanmic.sh ${IC_bay} AQ==
    SSHLibrary.Read Until    ${FUSION_PROMPT}
    ${write}=    write    ./readCanmic.sh ${IC_bay} 191
    ${b}=    SSHLibrary.Read Until    ${FUSION_PROMPT}
	Log to Console     ${b}
    ${PASSWORD}=    Get Regexp Matches    ${b}    is:\\s+(.*)
    ${pwd}=     Fetch From Right    ${PASSWORD[0]}    is:
	Log to Console     ${pwd}
    ${Password}=   Remove String Using Regexp    ${pwd.strip()}    \t
	Log to Console		\n The Interconnect password is: ${Password}

	${y}=     Get Length     ${Password}
	Run Keyword If     '${y}' == '16'      Log to Console    \n!!..Valid Password..!!     ELSE     Split password     ${Password}
	[Return]	${Password}

Split password
    [Documentation]        Split password
	[Arguments]    ${Password}
	${z}    Fetch From Left     ${Password}    ${split_password}
	Set Global Variable    ${Password}    ${z}
	[Return]	${Password}

Login Into ICs to validate all users
	[Documentation]        Connect to Fusion VM Bash via SSH and get users and trap details
	[Arguments]            ${IP}    ${Password}
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3

	${snmp_Trap}=    Fetch From Right    ${show}    ${Users_details}
	Log to Console    ${snmp_Trap}
    ${Usr}=    Fetch From Left    ${show}    ${Users_details}
	Log to Console    ${Usr}
	Matching the users details from response of snmp machine      ${Usr}
	Matching the trap details of Snmp machine     ${snmp_Trap}

Matching the users details from response of snmp machine

	[Documentation]    Fetching user details from snmp machine and matching it with LI
	[Arguments]      ${Usr}
	${str}    Convert To String    ${Usr}
	${s}    Split String    ${str}    \nUser

   	${len}=    Get Length    ${s}
	${aa}=    Create List
	:For    ${x}    In Range    0    ${len}
	\    ${a} =    Create List
	\    Append To List    ${a}     ${s[${x}]}
	\    Log to Console    ${a}
	\    Append To List    ${aa}    ${a}
	Log to Console    ${aa}
	${snmp_users_length}    Get Length    ${aa}

	:For    ${x}    In Range    1    ${snmp_users_length}
	\    ${str}    Convert To String    ${aa[${x}]}
	\    ${temp}    Fetch From Right    ${str}     ${name[${x}]}
	\    ${Username}    Fetch From Left    ${temp}     ${user_left}
	\    ${match}    Get Regexp Matches    ${Username}     snmpuser(.+)
	\    Run Keyword If       ${match} != []    Continue For Loop
	\    ${auth}    ${Auth}    Should Match Regexp    ${str}    Auth\\s+Protocol:\\s+(\\w+)
	\    ${priv}    ${Privacy}    Should Match Regexp    ${str}    Priv\\s+Protocol:\\s+(\\w+)
	\    Match Username Auth and Privacy     ${LI_Users_length}     ${snmpUsers}     ${Auth}     ${Privacy}      ${Username}

Match Username Auth and Privacy
	[Documentation]     Validating User details
	[Arguments]         ${LI_Users_length}     ${snmpUsers}     ${Auth}     ${Privacy}      ${Username}
    ${Index_list}    Create List
    :For    ${index}    In Range    0     ${LI_Users_length}
	\    Append to List    ${Index_list}   ${index}
	\    Run Keyword If     '${Username}' == '${snmpUsers[${index}]['snmpV3UserName']}'     Exit For Loop
    Log to Console   ${Index_list}
	${user_name}=     Get Variable Value    ${snmpUsers[${index}]['snmpV3UserName']}
	${x}=    Get From List    ${Index_list}    -1
	Run Keyword If    '${Auth}' == 'noAuth'     Check Auth protocol     ${x}     ${snmpUsers}    ${user_name}
	...   ELSE    Run Keyword If    '${Auth}' == '${snmpUsers[${x}]['v3AuthProtocol']}'    Log to Console    \nSuccessfully!!..Auth matches

	Run Keyword If    '${Privacy}' == 'noPriv'     Check privacy protocol     ${x}    ${snmpUsers}     ${user_name}
	...   ELSE    Run Keyword If    '${Privacy}' == '${snmpUsers[${x}]['v3PrivacyProtocol']}'    Log to Console    \nSuccessfully!!..Privacy matches

Check Auth protocol
	[Documentation]    Validating Auth of LI Users
    [Arguments]     ${x}    ${snmpUsers}    ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3AuthProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'    Log to Console     \nAuth Protocol Matches    ELSE    Fail
	[Return]

Check privacy protocol
	[Documentation]    Validating Privacy of LI Users
    [Arguments]     ${x}     ${snmpUsers}     ${user_name}
    Run Keyword If     '${snmpUsers[${x}]['v3PrivacyProtocol']}' == 'NA' and '${snmpUsers[${x}]['snmpV3UserName']}' == '${user_name}'      Log to Console     \nPrivacy Protocol Matches    ELSE    Fail
	[Return]

Matching the trap details of Snmp machine

	[Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
	[Arguments]         ${snmp_Trap}
	${str}    Convert To String    ${snmp_Trap}
	@{words}    Split String    ${str}    ${split_trap}
    ${len}    Get Length    ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${len}
	\    ${list_temp}    Create List
	\    Append To List    ${list_temp}    ${words[${x}]}
	\    Append To List    ${list}    ${list_temp}

	${trap_details}    Create List
    ${len1}     Evaluate    ${len}-1
	:For    ${x}    In Range    0    ${len1}
	\    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
	\    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
	\    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
	\	 ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
	\	 ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
	\	 ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
	\    Log to Console    ${output_type[1]}
	\    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
	\    Append To List     ${trap_details}    ${list1}
	\    Log to Console    ${trap_details}
	\    Set Global Variable    ${trap_details_snmp}    ${list1}
	\    Match Trap for all users     ${TrapDestinations}    ${LI_trap_length}

Match Trap for all users
    [Documentation]    Match trap for all users
	[Arguments]     ${TrapDestinations}     ${LI_trap_length}
	:For    ${x}    In Range    0    ${LI_trap_length}
	\    Run Keyword If     '${TrapDestinations[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1     ELSE     Get Trap details and validate trap for all users     ${x}      ${TrapDestinations}

Get Trap details from Snmpv1
    [Documentation]        Get Trap details from Snmpv1
	${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
	...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n
	${IC_IP_list}    Create List
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
	\    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
	\    Log to console    \nThe interconnect IP : ${ic_ip}
	\    Set Global Variable    ${IP}    ${ic_ip}
    \    ${Password}     Get Token
	\    Login Into ICs To Validate SNMPV1      ${IP}    ${Password}


Login Into ICs To Validate SNMPV1
	[Documentation]        Connect to Fusion VM Bash via SSH and get users and trap details
	[Arguments]            ${IP}    ${Password}
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${snmpv1_trap}=    Execute Command    snmpconfig --show snmpv1
	Close All Connections
	Matching the trap details from interconnect to validate     ${snmpv1_trap}

Matching the trap details from interconnect to validate
	[Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
	[Arguments]         ${snmpv1_trap}
	${str}    Convert To String    ${snmpv1_trap}
	@{words}    Split String    ${str}    ${snmpv1_trap_split}
    ${length}    Get Length    ${words}
	${list}    Create List
    :For    ${x}    In Range    1    ${length}
	\    ${list_temp}    Create List
	\    Append To List    ${list_temp}    ${words[${x}]}
	\    Append To List    ${list}    ${list_temp}
	Log to Console     ${list}
	${length}     Get Length     ${list}
	${z}=     Evaluate    ${length}-1
	${list_trap}     Create List
	:For    ${x}    In Range    0    ${z}
	\    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
	\    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}     Trap\\s+recipient:\\s+(\\d+.\\d+.\\d+.\\d+)
	\	 ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+port:\\s+(\\d+)
	\	 ${output2}     ${output_community}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\w+)
	\    Append To List      ${list1}     ${output_ip[1]}     ${output_port[1]}     ${output_community[1]}
	\    Append To List      ${list_trap}      ${list1}
	Log to Console     ${list_trap}
	SNMPV1 TRAP VALIDATION FOR SINGLE USER	    ${list_trap}

SNMPV1 TRAP VALIDATION FOR SINGLE USER
    [Documentation]    SNMPv1 Trap Validation
    [Arguments]       ${list_trap}
	${len2}=     Get Length     ${trap}
	:FOR    ${x}     IN RANGE     0     ${len2}
	\    Run Keyword If     '${trap[${x}]['trapFormat']}' != 'SNMPv1'    Continue For Loop
 	\    ${trap_ip}    Get From Dictionary    ${trap[${x}]}    trapDestination
    \    ${port_no}     Get From Dictionary    ${trap[${x}]}    port
    \    ${community}     Get From Dictionary    ${trap[${x}]}    communityString
	Match Trap Details for single trap      ${trap_ip}     ${port_no}     ${list_trap}     ${community}	  ${len2}

Match Trap Details for single trap
    [Documentation]    Match Trap Details for single trap
	[Arguments]      ${trap_ip}     ${port_no}     ${list_trap}    ${community}    ${len2}
	:For     ${x}    In Range      0      ${len2}
	\    Run Keyword If     '${trap_ip}' == '${list_trap[${x}][0]}'     Log to Console    \nSuccessfully!!..Trap IP matches    ELSE     Continue For Loop
	\    Run Keyword If     '${port_no}' == '${list_trap[${x}][1]}'     Log to Console     \nSuccessfully!!..Port matches     ELSE     Exit For Loop
	\    Run Keyword If     '${community}' == '${list_trap[${x}][2]}'     Log to Console     \nSuccessfully!!..Community Matches     ELSE     Exit For Loop

Get Trap details and validate trap for all users
    [Documentation]    Get Trap details and validate trap for all users
	[Arguments]     ${x}     ${TrapDestinations}
	${engine_list}    Create List
    ${trap1}    Create List
    ${trap_ip}    Get From Dictionary    ${TrapDestinations[${x}]}    trapDestination
    ${port_no}     Get From Dictionary    ${TrapDestinations[${x}]}    port
    ${username}    Get From Dictionary    ${TrapDestinations[${x}]}   userName
    ${engine}     Get From Dictionary     ${TrapDestinations[${x}]}    engineId
    Append to List    ${trap1}    ${trap_ip}    ${port_no}    ${username}     ${engine}
    Append to List    ${engine_list}    ${trap1}
    Set Global Variable    ${trap_deatails_LI}    ${trap1}
    ${inform}     Get From Dictionary     ${TrapDestinations[${x}]}     inform
	Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username    ${engine_list}    ${trap_details_snmp}    ELSE     Validate Trap    ${x}     ${trap_details_snmp}    ${trap_deatails_LI}


Validate Trap
    [Documentation]    Validate Trap
	[Arguments]     ${x}    ${trap_details_snmp}     ${trap_deatails_LI}
	Log to Console    ${trap_details_snmp}

     Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[0]}'    Log To Console     \nSuccessfully!!..Trap IP Matches
     ...    ELSE    Continue For Loop
     Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[1]}'    Log To Console     \nSuccessfully!!..Port number Matches
     ...    ELSE    Fail
     Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[2]}'    Log To Console     \nSuccessfully!!..Username Matches
     ...    ELSE    Fail

fetch engine id and corresponding username
	[Documentation]     Fetch Engine ID from SNMP
	[Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}
	Set Log Level    TRACE
	${str}    Convert To String    ${Usr}
	${s}    Split String    ${str}    \nUser

   	${len}=    Get Length    ${s}
	${aa}=    Create List
	:For    ${x}    In Range    0    ${len}
	\    ${a} =    Create List
	\    Append To List    ${a}     ${s[${x}]}
	\    Log to Console    ${a}
	\    Append To List    ${aa}    ${a}
	Log to Console    ${aa}
	${snmp_users_len}    Get Length    ${aa}

	:For    ${x}    In Range    1    ${snmp_users_len}
	\    ${str}    Convert To String    ${aa[${x}]}
	\    ${n}    Fetch From Right    ${str}     ${name[${x}]}
	\    ${uname}    Fetch From Left    ${n}     ${user_left}
	\    Run Keyword If     '${uname}' != '${trap_deatails_LI[2]}'     Continue For Loop    ELSE     Log to Console    \nSuccessfully!!.. Usernames Matches for Inform
	\    ${result}     ${result1}     Should Match Regexp    ${str}    Engine\\s+ID:\\s+(.*)
	\    ${Engine_id_SNMP}     Run Keyword If      '${x}' == '6'       Fetch From Left     ${result1}    ${match}     ELSE     Remove String     ${result1}    ']
    \    Run Keyword If     '${Engine_id_SNMP}' == '${temp_engine_id}'     Continue For Loop
	\    ${temp}=     Split String     ${Engine_id_SNMP}    :
	\    ${len_temp}=     Get Length     ${temp}
	\    ${output}=    Removing Space from Engine ID     ${temp}     ${len_temp}
    \    Run Keyword If      '${output}' == '${trap_deatails_LI[3]}' and '${uname}' == '${trap_deatails_LI[2]}'    Log to Console    \nSuccessfully!!..Engine ID Matches\n     ELSE    Exit For Loop
	\    Matching Inform     ${trap_deatails_LI}     ${trap_details_snmp}


Matching Inform
    [Documentation]    Match inform
	[Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}

	${len}=     Get Length     ${trap_details_snmp}
	:For     ${x}    In Range     0     ${len}
    \    Run Keyword If     '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'     Log to Console     \nSuccessfully!!..username Matches      ELSE     Continue For Loop
    \    Run Keyword If     '${trap_details_snmp[${x}][3]}' == 'INFORM' or '${trap_details_snmp[${x}][3]}' == 'TRAP'     Exit For Loop

Removing Space from Engine ID
    [Documentation]    Removing Space from Engine ID
    [Arguments]     ${temp}     ${len_temp}
	:FOR     ${x}    IN RANGE    0     ${len_temp}
    \     ${t}=     Catenate     ${var}      ${temp[${x}]}
	${output}=    Remove String Using Regexp    ${t.strip()}     ${SPACE}
	[Return]    ${output}


Get Trap details and validate for single trap
    [Documentation]    Get Trap details and validate for single trap
    [Arguments]      ${x}
	${len_trap}=     Get Length     ${trap}
	:FOR    ${x}     IN RANGE    0     ${len_trap}
    \     ${trap_deatails_LI}    Create List
    \     ${trap_ip}    Get From Dictionary     ${trap[${x}]}    trapDestination
    \     ${port_no}     Get From Dictionary    ${trap[${x}]}    port
    \     ${username}    Get From Dictionary    ${trap[${x}]}   userName
	\     ${inform}     Get From Dictionary     ${trap[${x}]}     inform
    \     ${engine}     Get From Dictionary     ${trap[${x}]}    engineId
	\     ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    \     Append to List    ${trap_deatails_LI}    ${trap_ip}    ${port_no}    ${username}     ${engine}
	\     Get Trap details from Snmp machine

    \     Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${trap_deatails_LI}     ${trap_details_snmp}    ELSE     Match edited Trap     ${trap_details_snmp}     ${trap_deatails_LI}

convert engine id
    [Documentation]    convert engine id
	[Arguments]     ${engine}
	${temp_en}=     Convert To Lowercase    ${engine}
	${engine}=    Fetch From Right    ${temp_en}    0x
	Log to Console    ${engine}
	[Return]     ${engine}

Match edited Trap
    [Documentation]    Match edited Trap
	[Arguments]     ${trap_details_snmp}     ${trap_deatails_LI}
    ${len}=     Get Length     ${trap_details_snmp}
	${y}=     Evaluate     ${len} - 1
	:For     ${x}    In Range     0     ${len}
    \	Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    \nSuccessfully!!..Trap IP's matches
    \	...    ELSE    Continue For Loop
	\	Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    \nSuccessfully!!..Ports matches
	\	...    ELSE    Continue For Loop
    \	Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    \nSuccessfully!!..Username matches
	\	...    ELSE    Exit For Loop

Get Trap details from Snmp machine
    [Documentation]    Get Trap details from Snmp machine
	${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
	...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n
	${IC_IP_list}    Create List
	Set Global Variable    ${IC_IP_list}    ${IC_IP_list}
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
	\    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
	\    Log to console    ${ic_ip}
	\    Set Global Variable    ${IP}    ${ic_ip}
	\    ${Password}     Get Token
	\    Login Into ICs snmpv3      ${IP}    ${Password}
	Lists Should Be Equal     ${IC_IP_list[0]}    ${IC_IP_list[1]}
	Set Global Variable 	${trap_details_snmp}    ${IC_IP_list[0]}

Login Into ICs snmpv3
	[Documentation]    Connect to Fusion VM Bash via SSH and get users and trap details
	[Arguments]      ${IP}    ${Password}
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3
	Close All Connections
    ${trap}=    Fetch From Right    ${show}    ${Users_details}
    ${usr}=    Fetch From Left    ${show}    ${Users_details}
	Set Global Variable    ${Trap}    ${trap}
	Set Global Variable    ${Usr}    ${usr}
	Matching the trap details from interconnect of Snmp machine

Matching the trap details from interconnect of Snmp machine
	[Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
	${str}    Convert To String    ${Trap}
	${words}    Split String    ${str}    ${split_trap}
	${length}=    Get Length     ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${length}
	\    ${list_temp}    Create List
	\    Append To List    ${list_temp}    ${words[${x}]}
	\    Append To List    ${list}    ${list_temp}

	${trap_details}    Create List
    ${len1}     Evaluate    ${length}-1
	:For    ${x}    In Range    0    ${len1}
	\    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
	\    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
	\    Log to Console    ${output_ip[1]}
	\    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
	\	 ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
	\    Log to Console    ${output_port[1]}
	\	 ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
	\    Log to Console    ${output_name[1]}
	\	 ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
	\    Log to Console    ${output_type[1]}
	\    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
	\    Append To List     ${trap_details}    ${list1}
	Log to Console    ${trap_details}
	Append To List     ${IC_IP_list}     ${trap_details}


Get Trap details and validate for Snmpv3
    [Documentation]    Matching the trap details from interconnect of Snmp machine
	#[Arguments]     ${x}
	${engine_list}    Create List
    ${trap1}    Create List
    ${trap_ip}    Get From Dictionary    ${trap[0]}    trapDestination
    ${port_no}     Get From Dictionary    ${trap[0]}    port
    ${username}    Get From Dictionary    ${trap[0]}   userName
	${engine}     Get From Dictionary     ${trap[0]}    engineId
    ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    Append to List    ${trap1}    ${trap_ip}    ${port_no}    ${username}     ${engine}


    Append to List    ${engine_list}    ${trap1}
    Set Global Variable    ${trap_deatails_LI}    ${trap1}
    Set Global Variable    ${engine_id_list}     ${engine_list}
    ${inform}     Get From Dictionary     ${trap[0]}     inform
	Get Trap details from Snmp machine

# If it is INFORM, fetch Engine ID from snmp and compare it with LI Engine ID and valiudate.
    Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${engine_id_list}     ${engine_id_list}     ${trap_details_snmp}     ELSE    Match edited Trap details

Match edited Trap details
    [Documentation]    Match edited Trap details
    ${len}=     Get Length     ${trap_details_snmp}
	#${y}=     Evaluate     ${len} - 1
	:For     ${x}    In Range     0     ${len}
    \	Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    \nSuccessfully!!..Trap IP's matches
    \	...    ELSE    Continue For Loop
	\	Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    \nSuccessfully!!..Ports matches
	\	...    ELSE    Continue For Loop
    \	Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    \nSuccessfully!!..Username matches
	\	...    ELSE    Exit For Loop

Validate LI Trap
	[Documentation]     Validate username
	[Arguments]         ${len_trap}     ${trap}
	:FOR     ${x}    IN RANGE     ${len_trap}
    \     Run Keyword If     '${trap[${x}]['trapFormat']}' == 'SNMPv3'    Get Trap details and validate for single trap     ${x}     ELSE     Fail