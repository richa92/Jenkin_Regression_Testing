*** Settings ***
Documentation    LIG SNMPv3 SNMPv1 Configurations UFG on LI and Trap Verifications for Carbon Tbird
Library			RoboGalaxyLibrary
Library			FusionLibrary
Library			OperatingSystem
Library			BuiltIn
Library			Collections
Library		    SSHLibrary
Library			String
Variables		data_variables.py
Resource            ../../../../../resource/fusion_api_all_resource_files.txt
Suite Setup               Suite Setup Tasks

*** Variables ***
${pattern1}    SNMPv3 Trap Recipient
${pattern2}    STRING
${v1_cold_trap}        Cold Start Trap
${v3_cold_trap}        coldStart

*** Test Cases ***

### LIG SCENARIOS ###
1_Edit LIG for SNMPV3 and set 1 user with auth & priv protocols and trap details and verify UFG is successful and Interconnects state are in configured state after LI Update
    [Documentation]    Edit LIG for SNMPV3 and set 1 user with auth & priv protocols and trap details

    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}


    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_LI_body_md5_des['snmpUsers']}    ${SNMPV3_LI_body_md5_des['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

2_Edit LIG for SNMPV3 and Add SNMPV1 Trap with same Trap IP as SNMPV3 and verify the behavior for UFG and Interconnects are in proper state after LI Update
    [Documentation]    Setting SNMP config in LIG for both snmpv1 and snmpv3 user having same trap ip

    ${lig_edit}    Get LIG member    ${LIG1}

    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${LIG_edit_snmp_trap}    ${v1_trap}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    Set To Dictionary    ${lig_snmp}    enabled=true
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 - SNMPV1 Trap IP with same Trap IP as SNMPV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


3_Verify LIG for editing SNMPV3 Trap IP and VI Trap IP and verify UFG is successful and IC's are in configured state after update
    [Documentation]    Verify LIG for editing SNMPV3 Trap IP and VI Trap IP and verify UFG is successful and IC's are in configured state after update
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}


    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}

    ${len}    Get Length   ${LIG_edit_snmp_trap}
    :For    ${x}    In Range    0    ${len}
    \    Log to console    \n Editing Trap Ip for ${LIG_edit_snmp_trap[${x}]['trapFormat']}\n
    \    Set To Dictionary    ${LIG_edit_snmp_trap[${x}]}    trapDestination=${alternate_trap_ip}
    \    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    \    Set To Dictionary    ${lig_edit}    eTag=
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for editing SNMPV3 Trap IP and VI Trap IP\n
    \    ...    ELSE    FAIL
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    Log to console    \n successfully edited Trap IP for ${LIG_edit_snmp_trap[${x}]['trapFormat']}\n

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


4_Add SNMP Config in LIG for 6 SNMPV3 users with diff auth & priv combinations and a valid trap destination for 1 user and verify UFG is successful and IC's are in configured state after the update
    [Documentation]    Edit LIG for snmpv3 users and diff auth priv combinations with trap ip and verify behaviour


    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_all_users}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for 6 SNMPV3 users with diff auth & priv combinations\n
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


5_Verify behaviour for Editing SNMPV3 Username field for SNMPv3 users
    [Documentation]    Edit LIG for all snmpv3 usernames even for those assigned in trap destinations


    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}

    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    log to console    \n snmpusers:${LIG_edit_snmp_user}
    ${valDict} =    Create Dictionary    taskState=Completed


    Set To Dictionary    ${LIG_edit_snmp_user[0]}    snmpV3UserName=${li_usernames_edit[0]}
    Set To Dictionary    ${LIG_edit_snmp_user[0]}    userCredentials=${SNMPV3_LI_body_sha_aes['snmpUsers'][0]['userCredentials']}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${LIG_edit_snmp_user}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    Log to console    \n Successfully edited ${li_usernames_edit[0]}\n

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


6_Verify behavior for payload with SNMPv3 users and no trap destinations
    [Documentation]    Edit LIG for all snmpv3 usernames without trapsdestinations

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}

    ${list}    Create List
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp}    trapDestinations=${list}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


7_Edit Snmpv3 on LIG and set notification type to inform
    [Documentation]    Edit LIG for snmpv3 and set notification type to inform

    ${lig_edit}    Get LIG member    ${LIG1}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for changing notifictaion type to Inform for snmpV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


8_1_TRAP SCENARIO Add SNMP config in LIG for SNMPv3 user with Authentication protocol as SHA with Trap notification and verify Trap for Poweroff/Poweron
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}
    Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${valid_trap_ip[0]}
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 user with auth protocol\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

    ${snmp_v3}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v3_cold_trap}

    Run Keyword If  '${snmp_v3}' == 'True'    Log to console  \nThe cold trap is found for SNMPv3 IC Reboot operation\n
    ...    ELSE    FAIL



8_2_TRAP SCENARIO Add SNMP config in LIG for SNMPv1 user with Authentication protocol as SHA with Trap notification and verify Trap for Poweroff/Poweron
    [Documentation]    Edit LIG for SNMPv1 config on LIg and perform UFG and verify IC's state and verify trap for IC Reboot

    log to console    \n Trap Scenario Edit LIG for SNMPv1 Trap and verify the behavior for UFG and Interconnects are in proper state after LI Update

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}

    Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    trapFormat=SNMPv1
    Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    communityString=Public
    Set To Dictionary    ${lig_snmp}    enabled=true
    Set To Dictionary    ${lig_snmp}    v3Enabled=false
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 - SNMPV1 Trap IP with same Trap IP as SNMPV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

    ${snmp_v1}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v1_cold_trap}

    Run Keyword If  '${snmp_v1}' == 'True'    Log to console  \nThe cold trap is found for SNMPv1 IC Reboot operation\n
    ...    ELSE    FAIL



9_Negative Scenario Verify behavior for 7 snmpv3 users payload on LIG
    [Documentation]    verify the behaviour for sending payload that exceeds 6 maximum SNMPV3 users

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_7_users}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USERS_EXCEEDS_MAX'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL

    log to console    \n Successfully verified that carbon LIG accepts only a maximum of 6 users at a time \n



10_Negative Scenario Verify behaviour for adding Trap IP for a user and then get LIG and edit and add 2nd user with same the same Trap IP as that of the 1st user
    [Documentation]    Edit LIG by setting a trap ip to 1st user and then get LIG and append 2nd user with same trap ip as the first and verify the behaviour

    log to console    \nEdit LIG 1st time for a user with particular trap ip\n

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_sha_aes}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 for a single user with Trap ip\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    log to console    \nEdit LIG again and append 2nd user trap ip with same as 1st user\n

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}

    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    ${lig_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_md5['snmpUsers'][0]}
    Append To List    ${lig_edit_snmp_trap}    ${SNMPV3_LI_body_md5['trapDestinations'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${lig_edit_snmp_trap}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL

    log to console    \n Successfully verified that carbon LIG does not allow duplicate trap ip's in payload\n


11_Negative Scenario Verify response for payload having trap recepients with invalid snmpv3 users(non existing snmpv3 users) on LIG
    [Documentation]    Edit LIG for trap details with invalid usernames for snmpv3

    log to console    \n The name in SNMPV3 Username is : ${SNMPV3_LI_body_invalid_trap_user['snmpUsers'][0]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    log to console    \n The name in SNMPV3 Trap Recepient Username is :${SNMPV3_LI_body_invalid_trap_user['trapDestinations'][0]['userName']}\n
    log to console     \n ---------------------------------------- \n
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_invalid_trap_user}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    log to console    \n the resp is :${task}\n
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified that carbon LIG does not allow trap details with non existing snmpv3users for snmpv3\n

12_Negative Scenario Verify Behaviour for payload with 7 SNMPV3 Trap Recepients payload on LIG
    [Documentation]    Edit LIG for trap details with 7 SNMPV3 trap data

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv3_li_body_6_users_7_traps}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully Verified error for SNMPV3 payload with 7 trap recepients \n


13_Negative Scenario Verify SNMPV1 can accept max of 5 traps on LIG
    [Documentation]    Edit LIG for SNMPV1 that can accept a max of 5 traps only

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv1_li_body_6_traps}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully Verified error for SNMPV1 payload with 6 trap recepients \n


14_Verify a max of 5 SNMPV1 traps and 6 SNMPV3 traps payload is accepted at once on LIG
    [Documentation]    Edit LIG for SNMPV1 that can accept a max of 5 traps and SNMPV3 with max of 6 traps are accepted at once

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv1_li_body_6snmpv3traps_5snmpv1traps}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 with 5 SNMPv1 traps and 6 SNMPv3 traps\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1


15_Negative Scenario verify behaviour for sending payload with 2 users of same name at once(duplicate user) on LIG
    [Documentation]    Edit LIG SNMPV3 for sending payload with 2 users of same name at once

    log to console    \n The name in SNMPV3 Username 1st index is : ${snmpv3_li_body_duplicate_user['snmpUsers'][0]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    log to console    \n The name in SNMPV3 Username 2nd index is : ${snmpv3_li_body_duplicate_user['snmpUsers'][1]['snmpV3UserName']}\n
    log to console     \n ---------------------------------------- \n
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${snmpv3_li_body_duplicate_user}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified the error for 2 SNMPV3 users with same names\n


16_Negative Scenario Create 1st user and then edit LIG again to add 2nd user with same name & verify behaviour on LIG
    [Documentation]    Edit LIG SNMPV3 for sending payload with 2 users of same name one by one

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for single snmpV3 user\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    log to console    \n After creatin single V3 user, perform Get LIG and edit the LIG and append 2nd user details with same name and verify error ##

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_md5_des_duplicate['snmpUsers'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_DUPLICATE_USER_NAME'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified the error for 2 SNMPV3 users with same names\n


17_Negative Scenario Verify the behaviour for giving same IP for both trap and inform despite having different users on LIG
    [Documentation]    Edit LIG SNMPV3 for giving same ip for trap and inform despite having different users

    log to console    \nconfigure a snmpv3 user with notification type as TRAP with a Trap Recepient IP\n

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for a user with Trap IP for snmpV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    log to console    \nTry to configure Inform for a second user with same Trap IP as the 1st user by editing the Get LIG details\n

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    ${lig_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}

    Append To List    ${lig_edit_snmp_user}    ${SNMPV3_LI_body_sha_inform['snmpUsers'][0]}
    Append To List    ${lig_edit_snmp_trap}    ${SNMPV3_LI_body_sha_inform['trapDestinations'][0]}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${lig_edit_snmp_trap}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified the error for duplicate trap ip's\n

18_Negative Scenario Delete a user who is assigned to trap and verify behaviour on LIG
    [Documentation]    Edit LIG SNMPV3 for deleting a user who is assigned to a trap

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    
    ${list}    Create List
    Set To Dictionary    ${lig_snmp}    snmpUsers=${list}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    Log to console    \n Successfully verified the behaviour for deleting a non existing user\n


19_Edit password of a snmpv3 user in LIG and verify LI is in Inconsistent state
    [Documentation]    Edit LIG SNMPV3 password for user and check whether LI is inconsistent

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG snmpV3 user password\n
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${lig_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}

    Set To Dictionary    ${lig_edit_snmp_user[0]}    userCredentials=${invalid_userCredentials}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${lig_edit_snmp_user}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

## Verify LI is inconsistent

    ${li_uri}    Get LI URI    ${LE1}-${LIG1}-1
    Check LI State    ${LI_Inconsistent}    ${li_uri}
    Check IC's State

    Log to console    \n Successfully verified the behaviour for editing LIG snmpv3 Auth/Priv passwords and verified LI is inconsistent for the same\n


20_TRAP SCENARIO Add SNMP config in LIG for single user with Authentication & Privacy protocol as MD5/DES with Trap notification and verify Trap for EFUSE
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG snmpv3 for single user with Authentication & Privacy protocol as MD5/DES\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

###  ${snmp_v3}    Issue a Power Off followed by Power On from OV and verify the Trap    ${v3_cold_trap}
    #EFUSE ICM EfuseReset and verify the SNMPV3 TRAP


21_Negative Scenario verify snmpv3 username field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 username textbox validations on LIG

#Negative scenarios for all negative username/password fields "CRM_SNMP_CONFIGURATION_USER_NAME_INVALID" - same error code since pass 13
# SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric

    log to console    \nSNMPV3 Username field with special characters , 8 spaces as usernames\n

    ${len}    Get Length    ${inavlid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${inavlid_snmp_usernames[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    ${task}    Wait For Task1    ${resp}    60s
    \    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    \    ...    ELSE    FAIL

    log to console    \nSNMPV3 username field with username exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the username text box supports a maximum of 31 characters only\n

    log to console    \nSNMPV3 username field with username as null\n

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[1]}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified the username text box requires a minimum of 1 character\n


    log to console    \nPositive scenarios on snmpv3 username field with different valid usernames on LIG\n
    log to console    \n SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric, only alphabets (lower & uppercase), only numeric\n

    ${len}    Get Length    ${valid_snmp_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${valid_snmp_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LIG\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The username ${valid_snmp_username[${x}]} is accepted\n


22_Negative Scenario verify snmpv3 Auth protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Authentication protocol textbox validations on LIG

#Negative scenarios
    log to console    \nTrying with special characters , 8 spaces as usernames\n

    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}

    log to console    \nInvalid auth password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support spaces as inputs\n

    log to console    \nTrying with auth password exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support more than 31 characters\n


    log to console    \nTrying with auth password less than 8 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${min_length_auth_password}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support less than 8 characters\n

    log to console    \nverifying valid password combinations\n
# Positive scenarios
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${valid_auth_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LIG\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The username ${valid_snmp_username[${x}]} is accepted\n


23_Negative Scenario verify snmpv3 priv protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Privacy protocol textbox validations on LIG

    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}

#Negative scenarios
# Trying with special characters , 8 spaces as usernames


    ${len}    Get Length    ${invalid_auth_passwords}
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_md5_des_duplicate}

    log to console    \nInvalid privacy password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support spaces as inputs\n

    log to console    \nTrying with privacy password exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support more than 31 characters\n


    log to console    \nTrying with privacy password less than 8 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${min_length_auth_password}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n Successfully verified Auth password field does not support less than 8 characters\n


# Positive scenarios
    log to console    \nVerifying valid passwords\n
    ${len}    Get Length    ${valid_auth_username}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${valid_auth_username[${x}]}
    \    ${lig_edit}    Get LIG member    ${LIG1}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LIG\n
    \    ...    ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    log to console    \n The username ${valid_snmp_username[${x}]} is accepted\n


24_Negative Scenario verify snmpv3 Engine ID field text box combination and Trap IP text box combination on LIG
    [Documentation]    verify different SNMPV3 trap ip's and engine id's validation on LIG

    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_sha_inform}

    log to console    \nverifying invalid Engine ID\n
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${invalid_engine_id}
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_INVALID_ENGINEID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n successfully verified the error for engineId validations\n

    log to console    \nverifying invalid Trap Ip\n
    Set To Dictionary    ${temp['trapDestinations'][0]}    trapDestination=${invalid_trap_ip}
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=false
    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_IP_INVALID'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log to console    \n successfully verified the error for Trap Ip validations\n


25_Negative Scenario Verify behaviour for other users to edit LIG for SNMPV3
    [Documentation]    verify other users are able to edit lig for SNMPV3

    Remove All Users
    ${valDict} =    Create Dictionary    taskState=Completed
    :FOR    ${user}    IN    @{users_list}
	\    ${resp}    Fusion Api Add User    ${user}
	\    Run Keyword If  '${resp['status_code']}' == '200'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Created the user \n
    \    ...    ELSE    FAIL
    Sleep    30s

    log to console    \nLogging in as Server admin and edit lig for snmpv3\n

	${login}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin_credentials}

    ${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

    log to console    \nLogging in as Network admin and edit lig for snmpv3\n

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${network_admin}

	${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the snmpV3config on LI\n
    ...    ELSE    FAIL
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    ${resp}    Fusion Api Logout Appliance

    log to console    \nLogging in as Backup admin and edit lig for snmpv3\n

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${backup_admin}

	${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

    log to console    \nLogging in as Read only user and edit lig for snmpv3\n

	${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${readonly_user}

	${lig_edit}    Get LIG member    ${LIG1}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_md5_des}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '403'    Log to console  \n Expected failure! \nStatus Code: ${resp['status_code']}
	...             ELSE    FAIL
	Run Keyword If  '${resp['errorCode']}' == 'ACTION_FORBIDDEN_BY_ROLE'    Log to console  \n Expected failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
	...             ELSE    FAIL
	${resp}		Fusion Api Logout Appliance

	Fusion Api Login Appliance     ${APPLIANCE_IP}    ${admin_credentials}

	Remove All Users

#pre req : SP
26_TRAP SCENARIO Add SNMP config in LIG for single user with Authentication & Privacy protocol as SHA/AES with trap notification and verify Trap for disable downlink port
    [Documentation]    Add a user with SHA Authentication protocol - with Trap notification and verify the trap for IC operation


    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_sha_aes}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

    ${output1}    ${output2}    Enable/Disable the linked Downlink ports and verify the resultant Traps
    log to console    \n Outoput1 ret is :${output1}\n
    log to console    \n output2 ret is :${output2}\n

    Sleep    1800s

### Adding v1 Trap and verifying Trap for port enable/disable
    log to console    \n Trap Scenario Edit LIG for SNMPv1 Trap and verify the behavior for UFG and Interconnects are in proper state after LI Update

    log to console    \n v1 enable disable scenario\n
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}

    Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    trapFormat=SNMPv1
    Set To Dictionary    ${lig_snmp['trapDestinations'][0]}    communityString=Public
    Set To Dictionary    ${lig_snmp}    enabled=true
    Set To Dictionary    ${lig_snmp}    v3Enabled=false
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}


    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 - SNMPV1 Trap IP with same Trap IP as SNMPV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

    ${output3}    ${output4}    Enable/Disable the linked Downlink ports and verify the resultant Traps
    log to console    \n Outoput3 ret is :${output3}\n
    log to console    \n output4 ret is :${output4}\n

    Run Keyword If  '${output2}' == '${output4}'    Log to console  \nSuccessfully!! verified the OIDs of SNMPv3 - SNMPv1 Traps for Port Enable/disable\n
    ...    ELSE    FAIL


27_Negative Scenario to verify duplicate IP payload on LIG
    [Documentation]    Verify Dupliacte IP's in payload is not accepted
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LI_body_all_users}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True


    ${lig_edit_2}    Get LIG member    ${LIG1}
    ${lig_snmp_2}    Get Variable Value    ${lig_edit_2['snmpConfiguration']}

    Set To Dictionary    ${lig_snmp_2}    trapDestinations=${lig_duplicate_trap_ip}
    Set To Dictionary    ${lig_edit_2}    snmpConfiguration=${lig_snmp_2}


    ${resp}    fusion_api_edit_lig    body=${lig_edit_2}    uri=${LIG_URI}
    ${task}    Wait For Task1    ${resp}    60s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_DUPLICATE'    Log to console  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    ...    ELSE    FAIL


28_SNMPv1 and SNMPv3 config on LIG
    [Documentation]    Set both SNMPv1 & SNMPv3 config on LIg-UFg and verify them on ICs
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

## Here adding both v1 and v3 trap

    ${lig_snmp}    Get Variable Value    ${SNMPV3_LI_body_md5_des}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}

    Append To List    ${LIG_edit_snmp_trap}    ${v1_trap}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    log to console    \n the body is :${lig_snmp}\n
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_snmp}    enabled=true

    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 - SNMPV1 Trap IP with same Trap IP as SNMPV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

## Code to verify in IC
   	${resp}    Fusion Api Get Li
	Set Global Variable    ${LI_Users}     ${resp['members'][0]['snmpConfiguration']['snmpUsers']}
	Set Global Variable    ${LI_trap}     ${resp['members'][0]['snmpConfiguration']['trapDestinations']}
	${length}=    Get Length     ${LI_trap}
	Set Global Variable     ${Len_Trap}     ${length}
	:FOR     ${x}    IN RANGE     ${Len_Trap}
	\     Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv1'     Get Trap details from Snmpv1    ELSE      Get Trap details and validate for single trap    ${x}


#SNMPv3 with 6 users and 1 trap destination. Modify trap user in loop and verify them on IC's
29_Edit LIG and set different configurations for SNMPV3 and verify them on Carbon IC's
	[Documentation]    Verify LIG edit operation for different trap users and check whether it's reflected on the Carbon IC's CLI

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

### Setting Inform

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}

	${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
	Set To Dictionary    ${temp['trapDestinations'][0]}    port=${port}
	Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
	Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id1}

	Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

### Code to verify in IC
	${resp}    Fusion Api Get Li
	Set Global Variable    ${LI_trap}     ${resp['members'][0]['snmpConfiguration']['trapDestinations']}
	${length}=    Get Length     ${LI_trap}
	Set Global Variable     ${Len_Trap}     ${length}

	:FOR     ${x}    IN RANGE     ${Len_Trap}
    \ 	Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv3'     Get Trap details and validate for single trap     ${x}     ELSE    Fail

### changing trap users

    ${lig_edit_2}    Get LIG member    ${LIG1}
    ${lig_snmp_2}    Get Variable Value    ${lig_edit_2['snmpConfiguration']}
    ${LIG_edit_snmp_trap_2}    Get Variable Value    ${lig_snmp_2['trapDestinations']}

### Here it will be inform for all users

    :For    ${x}    In Range    0    4
    \    Log to console    \n Editing Trap user for ${trap_users_list[${x}]}\n
    \    Set To Dictionary    ${lig_snmp_2['trapDestinations'][0]}    userName=${trap_users_list[${x}]}
    \    Set To Dictionary    ${lig_edit_2}    eTag=
    \    Set To Dictionary    ${lig_edit_2}    snmpConfiguration=${lig_snmp_2}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit_2}    uri=${LIG_URI}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for editing SNMPV3 Trap IP user\n
    \    ...    ELSE    FAIL
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True
    \    Log to console    \n successfully edited Trap user for ${trap_users_list[${x}]}\n
    \    LI Update and IC state check for LIG SNMPV3    ${LE1}-${LIG1}-1

    #\    ### Code to verify in IC
   	\    ${resp}    Fusion Api Get Li
	\    Set Global Variable    ${LI_trap}     ${resp['members'][0]['snmpConfiguration']['trapDestinations']}
	\    ${len}=    Get Length     ${LI_trap}
	\    Validate LI Trap     ${len}     ${LI_trap}


*** Keywords ***
#######################################
# SETUP WORFLOWS - Variables
#######################################
#######################################
Suite Setup Tasks
    [Documentation]    Suite Setup Tasks
    Set Log Level      TRACE
    ${TEST_NAME}    Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile    [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Clean OV
    ${fc_networks}    Get Variable Value    ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    ${body}    Build LIG body    ${LIG_new}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    Add Enclosure Group from variable    ${enc_groups}
    Sleep    10s
    Add Logical Enclosure from variable    ${les}
   :FOR     ${IC}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${IC}
    \   Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
    \   ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \  ${state}=     Get From Dictionary     ${resp['members'][0]}   state
    \  Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
    \   ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state

    Add Server Profiles from variable     ${server_profiles1}
    Power on server    ${server_profiles1[0]['serverHardwareUri']}
    sleep   240s

Add Server Profiles from variable
	[Documentation]	Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]		${profiles}   ${timeout}=15m    ${interval}=10s   ${endstate}=((?i)Warning|Completed)
	fusion_api_appliance_setup.Log to console and logfile  	Adding SERVER PROFILES
	:FOR	${profile}	IN	@{profiles}
	\   ${profile} =    fusion_api_appliance_setup.Copy Dictionary     ${profile}
        \       ${space} =   Check For Whitespace From String   ${profile['name']}
        \       Run Keyword If   ${space} is ${True}   Fail   msg=Profile name contains whitespace. This is not allowed in CI-FIT naming convention.
	\	${shuri} = 	Get from Dictionary	${profile}	serverHardwareUri
	\	${uri} = 	Get Server Hardware URI		${shuri}
	\	Set to Dictionary	${profile}	serverHardwareUri	${uri}
	\	${eg} = 	Get from Dictionary	${profile}	enclosureGroupUri
	\	@{words} = 	Split String	${eg}	:
	\	${type} = 	Get From List	${words}	0
	\	${eg} = 	Get From List	${words}	1
	\	${uri} = 	Get Enclosure Group URI	${eg}
	\	Set to Dictionary	${profile}	enclosureGroupUri	${uri}
	\	${enc} = 	Get from Dictionary	${profile}	enclosureUri
	\	@{words} = 	Split String	${enc}	:
	\	${type} = 	Get From List	${words}	0
	\	${enc} = 	Get From List	${words}	1
	\	${uri} = 	Get Enclosure URI	${enc}
	\	Set to Dictionary	${profile}	enclosureUri	${uri}
	\	${connections} = 	Get From Dictionary	${profile}	connections
	\	${connections} = 	Lookup Connection Uris	${connections}
	\   Set to Dictionary   ${profile}  connections     ${connections}
	\	${resp} = 	Fusion Api Create Server Profile		body=${profile}    param=?ignoreServerHealth=true
	\	${task} =   fusion_api_appliance_setup.Wait For Task	${resp}		timeout=${timeout}		interval=${interval}
	\   ${task_state} = 	Get From dictionary 	${task}     taskState
	\   Should Match Regexp	${task_state}	 ${endstate}


Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Clear LI SNMP Config
    [Documentation]    Clear LI SNMP Config
    ${list}    Create List
    ${LI_uri}    LI Uri for SNMP
    ${temp}    Copy Dictionary    ${SNMPV3_LI_body_all_users}
    Set To Dictionary     ${temp}     trapDestinations=${list}
    Set To Dictionary     ${temp}     snmpUsers=${list}
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${temp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Cleared the snmpV3config on LI\n
    ...    ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

LI Uri for SNMP
    [Documentation]    LI Uri for SNMP
    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI}    Fusion Api Get Li    ${li_uri}
    ${uri}    Get From Dictionary    ${LI}    uri
    ${LI_uri}    Catenate    SEPARATOR=/    ${uri}    ${snmp_config}
    [Return]    ${LI_uri}


EFUSE ICM EfuseReset and verify the SNMPV3 TRAP
    [Documentation]    EFUSE ICM EfuseReset and verify the SNMPV3 TRAP
    [Arguments]    ${trap}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n

### Performing efuse reset for  the Carbon IC's

    #:FOR    ${x}    IN RANGE    0  ${len_ic}
    :FOR    ${x}    IN RANGE    1   2
    \    log to console    \n clearing old traps \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${IC_IP_list}    Create List
    \    Append To List     ${IC_IP_list}    ${ic_ip}    ${V3_host}
    \    log to console      \n ic_ip is: ${IC_IP_list}\n
    \    Efuse IC    ${ic_uri}    ${ic_bay}    ${ic_name}
    \    log to console    \n Verify the Traps from trap receiver \n
    \    ${output}    Wait Until Keyword Succeeds    1000s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    \    log to console    \n The Traps for the efuse reset for the carbon interconnect ${ic_name} have been verified successfully !!! \n
    #\    Sleep    1000s
    [Return]    True


Issue a Power Off followed by Power On from OV and verify the Trap
    [Documentation]    Issue a Power Off followed by Power On from OV and verify the Trap
    [Arguments]    ${trap}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n


### Performing poweroff from OV for Carbon IC

    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    0    1
    \    log to console    \n clearing old traps \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${IC_IP_list}    Create List
    \    Append To List     ${IC_IP_list}    ${ic_ip}    ${V3_host}
    \    log to console      \n ic_ip is: ${IC_IP_list}\n
    \    Log to console    \n Performing poweroff from OV for Carbon IC ${ic_bay} \n
	\    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[0]}    ${ic_name}
	\    Log to console and logfile    \n -Verify it's off \n
	\    Should Be Equal As Strings    ${ic_state}    Off



### Performing poweron from OV for Carbon IC
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    Log to console    \n Performing poweron from OV for Carbon IC ${ic_bay} \n
    \    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[1]}    ${ic_name}
    \    Log to console and logfile    \n-Verify it's on\n
	\    Should Be Equal As Strings    ${ic_state}    On
	\    Wait Until Keyword Succeeds    25 min   15s     IC reached state    ${ic_uri}    Configured
    \    log to console    \n Verify the Traps from trap receiver \n
    \    ${output}    Wait Until Keyword Succeeds    1000s    10s    Verify Trap for reboot    ${ic_ip}    ${trap}
    [Return]    True



Open SNMP Client and Login
    [Documentation]    Open SNMP Client and Login
	[Arguments]         ${SNMP_IP}
    Open Connection     ${SNMP_IP}     timeout=180s
    Login               ${V3_user}     ${V3_pass}
	log to console    Logged into the Snmp client : ${SNMP_IP}

Clear Trap
    [Documentation]    Clear Old Traps
    Open SNMP Client and Login    ${V3_host}
	Write	 cd /
	Write	 cd var
	Write	 cd log
	Write    > messages
	Close All Connections
	log to console    \n Cleared the trap messages

Restart SNMP service
    [Documentation]    Restart snmp service
    Open SNMP Client and Login    ${V3_host}
    Write	 cd /
	Write	 cd etc
	Write	 cd snmp
	Write	 service snmpd restart
	Close All Connections
	log to console    \n restarted snmp\n

Get Trap
    [Documentation]    Opens the Trap receiver machine to verify the trap
	[Arguments]	       ${OA_HOST}    ${OA_USER}		${OA_PASS}
	Open Connection     ${OA_HOST}    timeout=120s
	Login               ${OA_USER}     ${OA_PASS}
	Write    cd /
    Write    cd var
    Write    cd log
    #Write    cat messages
    Write    tail -f -n 20 messages
    Sleep    10s
    ${output}    Read
    Close All Connections
    [Return]    ${output}



Verify Trap for reboot 
    [Documentation]    Verify Trap for IC reboot
    [Arguments]    ${ic_ip}    ${trap}
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    Log to console    \nThe Trap Output contains the required IC IP for IC reboot\n
    ${lines1}    Should contain   ${IC_trap}    ${trap}
    Log to console    \nThe Trap Output contains Cold Trap for the given IC Operation\n
    [Return]    True

Traps IP validation
    [Documentation]    Verify Trap IP with IC IP
    [Arguments]    ${output}    ${IC_IP_list}
    ${len1}    Get Length    ${IC_IP_list}
    :For    ${x}    In Range    0    ${len1}
    \    Log to console     \n the IP's to verify are: ${IC_IP_list[${x}]}
    \    List Should Contain Value    ${output}    ${IC_IP_list[${x}]}
    \    Log to console    \n Successfully verified that the SNMPV3 Traps are present for the given Interconnect's operation \n


Get interconnect ip
    [Documentation]    Fetch IC IPs
	[Arguments]		${ic}
	${resp} = 	Fusion Api Get Interconnect  		param=?filter="'name'=='${ic}'"
	${interconnectIP} = 	Get From Dictionary		${resp['members'][0]}	ipAddressList
	${len}    Get Length    ${interconnectIP}
	:For    ${x}    In Range    0    ${len}
	\    ${value}    Run Keyword If	  '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
	Log to console    \n the interconnect ip is :${value}\n
	[Return]	${value}


Get ICs
    [Documentation]    Fetch Carbon ICs
    ${resp} =    fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary    ${resp}    members
    ${l} = 	Get Length	${ics}
    :FOR    ${x}    IN RANGE	0	${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL1}' and '${ic['model']}' != '${ICM_MODEL2}'     Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}


Get Linked Ports
    [Documentation]    Fetch linked ports
    [Arguments]    ${ic_ports}    ${port_len}
    ${link_list}    Create List
    :For    ${x}    In Range    0    ${port_len}
    \    Run Keyword If    '${ic_ports[${x}]['portType']}' != '${Port_uplink}' or '${ic_ports[${x}]['portStatus']}' != '${Port_linked}'     Continue For Loop
    \    Append To List    ${link_list}    ${ic_ports[${x}]['portName']}
    \    log to console    \n linklist of ports is:${link_list}\n
    [Return]    ${link_list}

Change Uplink Port Status
    [Documentation]    Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${ic_name}     ${status}

    ${ic_uri} =     Get IC URI      ${ic_name}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    #Log to console \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  interconnectName     ${ic_name}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    log to console     \n the edit uplink port is :${Edit_Uplink_Port} \n

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${ic_name} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     180s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${ic_name} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${ic_name} Successfully !!

Change Downlink Port Status
    [Documentation]    Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${Linked_Downlink_port}      ${ic_name}     ${status}

    ${ic_uri} =     Get IC URI      ${ic_name}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${Linked_Downlink_port}' or '${resp['members'][${y}]['portType']}' != 'Downlink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${Linked_Downlink_port}
    Log to console    \nport id ${portid}\n
    Set to Dictionary   ${downlink_port_disable}  portId     ${portid}
    Set to Dictionary   ${downlink_port_disable}  interconnectName     ${ic_name}
    Set to Dictionary   ${downlink_port_disable}  enabled     ${status}
    Set to Dictionary   ${downlink_port_disable}  portName     ${Linked_Downlink_port}
    Set to Dictionary   ${downlink_port_disable}  portStatus     ${port_info[0]['portStatus']}


    log to console     \n the edit downlink port is :${downlink_port_disable} \n

    ${edit_body} =  Create List     ${downlink_port_disable}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Downlinkport ${Linked_Downlink_port} in ${ic_name} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     180s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${Linked_Downlink_port} in ${ic_name} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${Linked_Downlink_port} in ${ic_name} Successfully !!


verify trap for oid
    [Documentation]    verify trap for enable/disable IC ports with port and OID
    [Arguments]    ${ic_ip}
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    ${IC_trap}    Get Lines Containing String    ${trap_output}    ${ic_ip}
    ${temp}    Convert To String    ${IC_trap}
    ${lines}    Get Lines Containing String   ${temp}    ${pattern2}
    ${str}    Convert To String    ${lines}
    ${match}    ${oid_value}    ${port}     Should Match Regexp    ${str}    INTEGER: .*SNMPv2-SMI::experimental(.*) = STRING:\\s+\\"port(\\d+)\\"
    log to console    \n The oid_value output is ${oid_value}\n
    log to console    \n The port output is ${port}\n
    log to console    \n The match output is ${match}\n
    [Return]    ${port}    ${oid_value}



Efuse IC
    [Documentation]    perform IC efuse
    [Arguments]    ${ic_uri}    ${ic_bay}    ${ic_name}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${ic_uri} is in Configured state
    Log to console and logfile  \n\nRemoving and adding back Carbon ${ic_name} module
    Get EM IP
    Get EM Token    ${ENC1}
    EFuse ICM    EFuseReset   ${ic_bay}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Absent
    Log to console and logfile  \n\nThe IC module ${ic_name} is in Absent state
    Wait Until Keyword Succeeds    25 min   10s     IC reached state    ${ic_uri}    Adding
    Log to console and logfile  \n\nThe IC module ${ic_name} is in Adding state
    Wait Until Keyword Succeeds    15 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${ic_name} Removed and Added back Successfully!! and is in Configured state

Poweroff/poweron IC from OV
    [Documentation]    Perform IC reboot from OV
    [Arguments]    ${ic_uri}    ${power_value}    ${ic_name}
    ${body}    Set To Dictionary    ${edit_power_body}    value=${power_value}
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect    body=${body}    uri=${ic_uri}
    #Log to console	\nresp after power off is ${resp}
    ${task} =   Wait for Task    ${resp}
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    60 s    2 s    True
    #Log to console and logfile		\nSleeping for 2 mins\n
    Sleep   2min
    ${resp} = 	Fusion Api Get Interconnect  		param=?filter="'name'=='${ic_name}'"
    ${ic_state} =     Get From Dictionary     ${resp['members'][0]}     powerState
    log to console    \n the ic state is:${ic_state}\n
    [Return]    ${ic_state}


Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=300s    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}    30s
    [Return]                    ${Id}

Login Into ICs and send traps through CLI
    [Documentation]    Login to IC's via CLI
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${command}    Execute Command    snmptraps  --send  -ip_address 15.186.13.8
    ${output}    Read
    log to console    \n The output is : ${output}


Verify Interconnect State
    [Documentation]    Verify IC state

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}


Enable/Disable the linked Downlink ports and verify the resultant Traps
    [Documentation]    Perform port enable/disable and verify traps

    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Sleep    500s
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n

    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    1    2
    \    log to console    \n clearing old traps before disabling the linked uplink port \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    ${ic_ip}    Get interconnect ip    ${ic_name}

### Disabling the linked downlink port
    \    Change Downlink Port Status    ${Linked_downlink_port[${x}]}      ${ic_name}     false
    \    ${port}    ${oid}    Wait Until Keyword Succeeds    1000s    10s    verify trap for oid    ${ic_ip}
    \    log to console     \n port output wait :${port}\n
    \    Run Keyword If    '${port}' == '${Linked_downlink_port_id[${x}]}'     Log to console    \n The Trap output contains the enabled/disabled port information\n
    \    ...    ELSE    FAIL


### Enabling the disabled downlink port
    \    log to console    \n clearing old traps before enabling the disabled uplink port\n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    Change Downlink Port Status    ${Linked_downlink_port[${x}]}      ${ic_name}     true
    #\    Sleep    500s
    [Return]    ${port}    ${oid}


Disable SNMPV3
    [Documentation]    Disable SNMPv3 on LI

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    log to console   \n the resp is : ${LI_edit_snmp}\n
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=false
    ${LI_uri}    LI Uri for SNMP


    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

Enable SNMPV3
    [Documentation]    Edit LI and enable SNMPV3

    ${li_uri}    Get LI URI   ${LE1}-${LIG1}-1
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Set To Dictionary    ${LI_edit_snmp}    v3Enabled=true
    ${LI_uri}    LI Uri for SNMP

    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${LI_uri}    body=${LI_edit_snmp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LI for snmpV3
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    180 s    10 s    True

Verify no Trap
    [Documentation]    Verify no Trap
    Set Log Level    TRACE
    ${trap_output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    [Return]    ${trap_output}


Disable SNMPV3 and verify no Trap

    [Documentation]    Disable SNMPV3 and verify no Trap
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n


    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    0    1
    \    log to console    \n clearing old traps \n
    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    Run Keyword If    '${ic_bay}' != '${icm_bays[0]}' and '${ic_bay}' != '${icm_bays[1]}'    FAIL        ELSE    log to console    \n Fetched Bay number Successfully \n
    \    log to console    \n ic_bay number is : ${ic_bay}\n
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${IC_IP_list}    Create List
    \    Append To List     ${IC_IP_list}    ${ic_ip}    ${V3_host}
    \    log to console      \n ic_ip is: ${IC_IP_list}\n
    \    Log to console    \n Performing poweroff from OV for Carbon IC ${ic_bay} \n
	\    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[0]}    ${ic_name}
	\    Log to console and logfile    \n -Verify it's off \n
	\    Should Be Equal As Strings    ${ic_state}    Off


    \    Open SNMP Client and Login    ${V3_host}
    \    Clear Trap
    \    Log to console    \n Performing poweron from OV for Carbon IC ${ic_bay} \n
    \    ${ic_state}    Poweroff/poweron IC from OV    ${ic_uri}    ${power_value[1]}    ${ic_name}
    \    Log to console and logfile    \n-Verify it's on\n
	\    Should Be Equal As Strings    ${ic_state}    On
	\    Wait Until Keyword Succeeds    25 min   15s     IC reached state    ${ic_uri}    Configured
    \    log to console    \n Verify the Traps from trap receiver \n
    #\    Sleep    10s

    \    ${output}    Get Trap    ${V3_host}    ${V3_user}    ${V3_pass}
    \    log to console    \n the trap is:${output}\n
    \    Should Not Contain    ${output}    ${ic_ip}
    \    log to console    \n successfully verified that after disabling snmpv3, no trap passes for any operation on IC's\n

Restore From Backup

    [Documentation]    Restore From Backup
    ${status}=    Set Variable    ${EMPTY}
	${Response}=    Fusion Api Get Backup
	Run keyword If    ${Response['status_code']} != 200    Fail     msg="Failed to Get the latest backup"
	${restore_body}=   Create Dictionary    type=RESTORE
	...                                     uriOfBackupToRestore=${Response['members'][0]['uri']}
	${output}=    Fusion Api Restore Backup    ${restore_body}
	Run keyword If    ${output['status_code']} != 202    Fail      msg="Failed to perform the restore from backup operation"
	Sleep    10min
	${restore_resp}=     Fusion Api Get Restore Status
	Run keyword If    ${restore_resp['status_code']} != 200    fail    msg="Failed to get the restore details"
	:FOR   ${index}   IN RANGE   ${restore_resp['count']}
	\   Run Keyword If    '${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'   Continue For Loop
	\   ${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
	:FOR   ${index}   IN RANGE   50
	\	sleep	30sec
	\	Log to console and logfile		"Restoring is in Progress..."
	\	${resp}=    Fusion Api Get Restore Status    param=?filter="'id'=='${restore_id}'"
	\	Run keyword If     ${resp['status_code']}!= 200     Fail      msg="Unable to get the restore id details"
	\	Run Keyword If     '${resp['members'][0]['progressStep']}' != 'COMPLETED'    Continue For Loop
	\	${status} =    Set Variable    ${resp['members'][0]['status']}
	\	Run Keyword If   '${resp['members'][0]['progressStep']}' == 'COMPLETED'    Exit For Loop
	Should Be Equal    ${status}    SUCCEEDED
	Log to console and logfile     \nRestore process got succeeded


Edit LIG body for SNMP

    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG1}    ${snmpusers}    ${trapdestination}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=true
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}


Check LI State
    [Documentation]    Check LI State
    [Arguments]    ${state}    ${li_uri}
	${resp}    Fusion Api Get Li    ${li_uri}
    ${LI_state}    Get From Dictionary    ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_state}    ${state}
    log to console and logfile    \n\LI state Is: ${LI_state}

Get LIG member
    [Documentation]    Get LIG member
    [Arguments]    ${LIG1}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}

Check IC's State
    [Documentation]    Check IC's State
    ${ic_list}    Get ICs
    ${len}    Get Length    ${ic_list}
    :For    ${x}    In Range    0    ${len}
    \    ${state}    Get From Dictionary    ${ic_list[${x}]}    state
    \    log to console    \n The iC's state are : ${state}\n
    \    Should Be Equal As Strings    ${state}    ${IC_state}
    \    log to console    \n The IC: ${ic_list[${x}]['productName']} is in Configured State\n

Perform an Update From Group LI
    [Documentation]    Perform an Update From Group LI
	[Arguments]    ${liuri}    ${timeout}=5 min    ${interval}=15s
	${resp}    Fusion Api Update From Group    uri=${li_uri}
	Run Keyword If    ${resp['status_code']} !=202    fail    Update from group
	${task}    Wait For Task    ${resp}    ${timeout}    ${interval}


LI Update and IC state check for LIG SNMPV3
    [Documentation]    LI Update and IC state check for LIG SNMPV3
    [Arguments]    ${li}
    ${li_uri}    Get LI URI    ${li}
    Check LI State    ${LI_Inconsistent}    ${li_uri}
    Check IC's State

    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Check LI State    ${LI_consistent}    ${li_uri}
    Check IC's State

Wait For Task1
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${resp}	${timeout}=160 s	${interval}=40 s
	Log to console	\n
	${task} = 	Wait Until Keyword Succeeds		${timeout}	${interval}	Task Reached Endstate1	${resp}
	[Return]	${task}

Task Reached Endstate1
    [Documentation]    Task Reached Endstate1
	[Arguments]	${resp}
	Set Log Level	TRACE
	#Should Contain	${resp}	uri
	${location} =       Get Variable Value      ${resp['headers']['location']}
	${task_uri} =		Run Keyword If          '${location}' is 'None'      Get From Dictionary		${resp}	uri
	...                 ELSE                    Get Variable Value          ${location}
	#${task_uri} =		Get From Dictionary		${resp}	uri
	${task} = 			Fusion Api Get Task		uri=${task_uri}
	${task_state} = 	Get From Dictionary		${task}		taskState
	${task_category} = 	Get From Dictionary		${task}		category
	${task_name} = 		Get From Dictionary		${task}		name
	${resource} = 		Get From Dictionary		${task['associatedResource']}	resourceName
	${resource_uri} = 	Get From Dictionary		${task['associatedResource']}	resourceUri
	#Log to console and logfile  	\t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
	Should Match Regexp	${task_state}	((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
	[Return]	${task}

Clear Profile Configurations
    [Documentation]    Cleans Server Profile configurations
    Log to console and logfile  \nCleaning the Server Profile configurations
    Power off ALL Servers
    Remove All Server Profiles


Validate LI Trap
	[Documentation]     Validate username
	[Arguments]         ${len}     ${LI_trap}
	:FOR     ${x}    IN RANGE     ${len}
	\     Run Keyword If     '${LI_trap[${x}]['trapFormat']}' == 'SNMPv3'     Get Trap details and validate for single trap     ${x}     ELSE    Fail


Get Trap details from Snmpv1
	[Documentation]     Getting IC bays and IP
	${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
	...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n
	${IC_IP_list}    Create List
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
	\    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}=    Get interconnect ip    ${ic_name}
	\    Log to console    ${ic_ip}
	\    Set Global Variable    ${IP}    ${ic_ip}
	\    ${Password}     Get Token
	\    Login Into ICs To Validate SNMPV1      ${IP}    ${Password}

Login Into ICs To Validate SNMPV1
	[Documentation]        Connect to Fusion VM Bash via SSH and get trap details
	[Arguments]            ${IP}    ${Password}
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv1
	Log to console    \n The Ic output: ${show}
	Close All Connections
	Set Global Variable		${snmpv1_trap}     ${show}
	Matching the trap details from interconnect to validate     ${snmpv1_trap}

Matching the trap details from interconnect to validate
	[Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
	[Arguments]         ${snmpv1_trap}
	${str}    Convert To String    ${snmpv1_trap}
	@{words}    Split String    ${str}    ${snmpv1_trap_split}
    ${length}    Get Length    ${words}
	#Set Global Variable    ${length}    ${len}

	${list}    Create List
    :For    ${x}    In Range    1    ${length}
	\    ${list_temp}    Create List
	\    Append To List    ${list_temp}    ${words[${x}]}
	\    Append To List    ${list}    ${list_temp}
	Log to Console     ${list}
	${length}     Get Length     ${list}
	${z}=     Evaluate    ${length}-1

	${LIST_TRAP}     Create List
	:For    ${x}    In Range    0    ${z}
	\    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
	\    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}     Trap\\s+recipient:\\s+(\\d+.\\d+.\\d+.\\d+)
	\	 ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+port:\\s+(\\d+)
	\	 ${output2}     ${output_community}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\w+)
	\    Append To List      ${list1}     ${output_ip[1]}     ${output_port[1]}     ${output_community[1]}
	\    Append To List      ${LIST_TRAP}      ${list1}

	SNMPV1 TRAP VALIDATION FOR SINGLE USER	    ${LIST_TRAP}

SNMPV1 TRAP VALIDATION FOR SINGLE USER
    [Documentation]     Getting LI Trap name, IP and port number for SNMPv1
	[Arguments]          ${LIST_TRAP}
	:FOR    ${x}     IN RANGE     0     ${Len_Trap}
	\    Run Keyword If     '${LI_trap[${x}]['trapFormat']}' != 'SNMPv1'    Continue For Loop
 	\    ${trap_ip}    Get From Dictionary    ${LI_trap[${x}]}    trapDestination
    \    ${port_no}     Get From Dictionary    ${LI_trap[${x}]}    port
    \    ${community}     Get From Dictionary    ${LI_trap[${x}]}    communityString
	Match Trap Details for single trap      ${trap_ip}     ${port_no}     ${LIST_TRAP}     ${community}	  ${Len_Trap}

Match Trap Details for single trap
	[Documentation]     Matching LI trap details with ICs Trap details for SNMPv1
	[Arguments]      ${trap_ip}     ${port_no}     ${LIST_TRAP}    ${community}    ${Len_Trap}
	:For     ${x}    In Range      0      ${Len_Trap}
	\    Run Keyword If     '${trap_ip}' == '${LIST_TRAP[${x}][0]}'     Log to Console    \nSuccessfully!!..Trap IP matches for snmpv1    ELSE     Continue For Loop
	\    Run Keyword If     '${port_no}' == '${LIST_TRAP[${x}][1]}'     Log to Console     \nSuccessfully!!..Port matches for snmpv1     ELSE     Exit For Loop
	\    Run Keyword If     '${community}' == '${LIST_TRAP[${x}][2]}'     Log to Console     \nSuccessfully!!..Community Matches for snmpv1    ELSE     Exit For Loop


Get Trap details and validate for single trap
	[Documentation]      Getting LI Trap details for SNMPv3
	[Arguments]     ${x}

    ${trap_deatails_LI}    Create List
    ${trap_ip}    Get From Dictionary     ${LI_trap[${x}]}    trapDestination
    ${port_no}     Get From Dictionary    ${LI_trap[${x}]}    port
    ${username}    Get From Dictionary    ${LI_trap[${x}]}   userName
    ${inform}     Get From Dictionary     ${LI_trap[${x}]}     inform
    ${engine}     Get From Dictionary     ${LI_trap[${x}]}    engineId

    ${engine}     Run Keyword If      '${engine}' != 'None'    convert engine id     ${engine}
    Append to List    ${trap_deatails_LI}    ${trap_ip}    ${port_no}    ${username}     ${engine}
	Sleep     30s
    Get Trap details from Snmp machine

    Run Keyword If      '${inform}' == 'True'     fetch engine id and corresponding username     ${trap_deatails_LI}    ${trap_details_snmp}    ELSE     Match edited Trap     ${trap_details_snmp}     ${trap_deatails_LI}

convert engine id
	[Documentation]     Convert the Engine ID in lower case
	[Arguments]     ${engine}
	${temp_en}=     Convert To Lowercase    ${engine}
	${engine}=    Fetch From Right    ${temp_en}    0x
	Log to Console    ${engine}
	[Return]     ${engine}

Match edited Trap
	[Documentation]     Match Trap for SNMPv3
	[Arguments]     ${trap_details_snmp}     ${trap_deatails_LI}
    ${len}=     Get Length     ${trap_details_snmp}
	${y}=     Evaluate     ${len} - 1
	:For     ${x}    In Range     0     ${y}
    \	Run Keyword If    '${trap_deatails_LI[0]}' == '${trap_details_snmp[${x}][0]}'    Log to Console    trap IP's matches
    \	...    ELSE    Continue For Loop
	\	Run Keyword If    '${trap_deatails_LI[1]}' == '${trap_details_snmp[${x}][1]}'    Log to Console    Ports matches
	\	...    ELSE    Continue For Loop
    \	Run Keyword If    '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'    Log to Console    Username Matches
	\	...    ELSE    Fail

Get Trap details from Snmp machine
	[Documentation]     Getting ICs bay and IP from LI to login into ICS
	${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL
	...    ELSE    \nLog to console    \n\n${len_ic} Carbon Interconnect modules are available\n
	${IC_IP_list}    Create List
	Set Global Variable    ${IC_IP_list}    ${IC_IP_list}
	Sleep    30s
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    log to console    \n ic bay no is : ${ic_bay} \n
	\    Set Global Variable    ${IC_bay}    ${ic_bay}

    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}     name
    \    log to console    \n the IC uri is :${ic_uri} \n
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
	\    Log to console    ${ic_ip}
	\    Set Global Variable    ${IP}    ${ic_ip}
	\    Sleep    5s
	\    ${Password}     Get Token
	\    Login Into ICs snmpv3     ${IP}    ${Password}
	Lists Should Be Equal     ${IC_IP_list[0]}    ${IC_IP_list[1]}
	Set Global Variable 	${trap_details_snmp}    ${IC_IP_list[0]}

Get Token
	[Documentation]    Connect to Fusion VM Bash via SSH and get IC password
    Log to console    \n\nLogging into OneView SSH session
   	Login to Fusion via SSH
	Log to console  \n\n Verify files are exists in appliance
	${ls}=    Execute Command    ls
	${string}=    Split String    \n${ls}
	${len}=    Get Length    ${string}
	Log to Console    \n-Length_is...${len}
	Run Keyword If  ${len} ==2    Log to console    \n${len} Files already exist in appliance
    ...         ELSE    Put File      ${ICM_Scripts}       /root

    ${Perm}=    Execute Command     chmod +x readCanmic.sh writeCanmic.sh
    ${read}=    write    ./writeCanmic.sh ${IC_bay} AQ==
    SSHLibrary.Read Until    ${FUSION_PROMPT}
    ${write}=    write    ./readCanmic.sh ${IC_bay} 191
    ${b}=    SSHLibrary.Read Until    ${FUSION_PROMPT}
	Log to Console     ${b}
    ${PASSWORD}=    Get Regexp Matches    ${b}    is:\\s+(.*)
    ${pwd}=     Fetch From Right    ${PASSWORD[0]}    is:
	Log to Console     ${pwd}
    ${Password}=   Remove String Using Regexp    ${pwd.strip()}    \t
	Log to Console		\n The Interconnect password is: ${Password}

	${y}=     Get Length     ${Password}
	Run Keyword If     '${y}' == '16'      Log to Console    \n!!..Valid Password..!!     ELSE     Split password     ${Password}
	[Return]	${Password}

Split password
    [Documentation]     Split password
	[Arguments]    ${Password}
	${z}    Fetch From Left     ${Password}    ${split_password}
	Set Global Variable    ${Password}    ${z}
	[Return]	${Password}


Login Into ICs snmpv3
	[Documentation]    Connect to Fusion VM Bash via SSH and get users and trap details
	[Arguments]      ${IP}    ${Password}
	Log to console    \n\nLogging into interconnect SSH session
    Login to IC via SSH     ${IP}    ${Password}
    ${show}=    Execute Command    snmpconfig --show snmpv3
	Sleep    2s
	Close All Connections
    ${trap}=    Fetch From Right    ${show}    ${Users_details}
    ${usr}=    Fetch From Left    ${show}    ${Users_details}
	Set Global Variable    ${Trap}    ${trap}
	Set Global Variable    ${User}    ${usr}
	Matching the trap details from interconnect of Snmp machine

Matching the trap details from interconnect of Snmp machine
	[Documentation]     Fetching trap IP,Name and Port number and stroring it into a list
	${str}    Convert To String    ${Trap}
	${words}    Split String    ${str}    ${split_trap}
	${length}=    Get Length     ${words}

    ${list}    Create List
    :For    ${x}    In Range    1    ${length}
	\    ${list_temp}    Create List
	\    Append To List    ${list_temp}    ${words[${x}]}
	\    Append To List    ${list}    ${list_temp}

	${trap_details}    Create List
    ${len1}     Evaluate    ${length}-1
	:For    ${x}    In Range    0    ${len1}
	\    ${list1}=    Create List
    \    ${y}=     Evaluate    ${x}+1
    \    ${convert_str}=    Convert To String    ${list[${x}]}
	\    ${output}     ${output_ip}=     Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    ${y}:\\s+(\\d+.\\d+.\\d+.\\d+)
	\    Run Keyword If     '${output_ip[1]}' != '${trap_ip1}'     Continue For Loop
	\	 ${output1}     ${output_port}=    Run Keyword And Ignore Error     Should Match Regexp    ${convert_str}    Trap\\s+Port:\\s+(\\d+)
	\	 ${output2}     ${output_name}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Trap\\s+User:\\s+(\\w+)
	\	 ${output3}     ${output_type}=    Run Keyword And Ignore Error    Should Match Regexp    ${convert_str}    Notify\\s+Type:\\s+(\\w+)
	\    Append to List    ${list1}    ${output_ip[1]}    ${output_port[1]}    ${output_name[1]}     ${output_type[1]}
	\    Append To List     ${trap_details}    ${list1}
	Log to Console    ${trap_details}
	Append To List     ${IC_IP_list}     ${trap_details}


fetch engine id and corresponding username
	[Documentation]     Fetch Engine ID from SNMPv3
	[Arguments]     ${trap_deatails_LI}    ${trap_details_snmp}
	Set Log Level    TRACE
	${str}    Convert To String    ${User}
	${s}    Split String    ${str}    \nUser

   	${len}=    Get Length    ${s}
	${aa}=    Create List
	:For    ${x}    In Range    0    ${len}
	\    ${a} =    Create List
	\    Append To List    ${a}     ${s[${x}]}
	\    Log to Console    ${a}
	\    Append To List    ${aa}    ${a}
	Log to Console    ${aa}
	${snmp_users_len}    Get Length    ${aa}

	:For    ${x}    In Range    1    ${snmp_users_len}
	\    ${str}    Convert To String    ${aa[${x}]}
	\    ${n}    Fetch From Right    ${str}     ${name[${x}]}
	\    ${uname}    Fetch From Left    ${n}     ${user_left}
	\    Run Keyword If     '${uname}' != '${trap_deatails_LI[2]}'     Continue For Loop    ELSE     Log to Console    \nSuccessfully!!.. Usernames Matches for Inform
	\    ${result}     ${result1}     Should Match Regexp    ${str}    Engine\\s+ID:\\s+(.*)
	\    ${Engine_id_SNMP}     Run Keyword If      '${x}' == '6'       Fetch From Left     ${result1}    ${match}     ELSE     Remove String     ${result1}    ']
    \    Run Keyword If     '${Engine_id_SNMP}' == '${temp_engine_id}'     Continue For Loop
	\    ${temp}=     Split String     ${Engine_id_SNMP}    :
	\    ${len_temp}=     Get Length     ${temp}
	\    ${output}=    Removing Space from Engine ID     ${temp}     ${len_temp}
    \    Run Keyword If      '${output}' == '${trap_deatails_LI[3]}' and '${uname}' == '${trap_deatails_LI[2]}'    Log to Console    Engine ID Matches     ELSE    Exit For Loop
	\    Matching Inform     ${trap_deatails_LI}     ${trap_details_snmp}

Removing Space from Engine ID
	[Documentation]     Removing Space in Engine ID
    [Arguments]     ${temp}     ${len_temp}
	:FOR     ${x}    IN RANGE    0     ${len_temp}
    \     ${t}=     Catenate     ${var}      ${temp[${x}]}
	${output}=    Remove String Using Regexp    ${t.strip()}     ${SPACE}
	[Return]    ${output}

Matching Inform
	[Documentation]    Matching LI Engine ID with ICs Engine ID with its corresponding usernames
	[Arguments]     ${trap_deatails_LI}     ${trap_details_snmp}
	${len}=     Get Length     ${trap_details_snmp}
	${y}=     Evaluate     ${len} - 1
	:For     ${x}    In Range     0     ${y}
    \    Run Keyword If     '${trap_deatails_LI[2]}' == '${trap_details_snmp[${x}][2]}'     Log to Console    \nSuccessfully!! username      ELSE     Continue For Loop
    \    Run Keyword If     '${trap_details_snmp[${x}][3]}' == 'INFORM' or '${trap_details_snmp[${x}][3]}' == 'TRAP'     Exit For Loop
