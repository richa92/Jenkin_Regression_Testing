*** Settings ***
Documentation   OVF1816_Suite1
#Variables       data_variables.py
Variables       data_variables_Nitro_Porting.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource        ../../../../../Resources/api/fusion_api_resource.txt
Library         Telnet
Library         data_variables
Library         backping.py
Library         Dialogs
Suite Teardown  Clean OV


*** Variables ***
${APPLIANCE_IP}     15.245.131.251
${number}    5
${flag}    Windows
${Ping_Lost}    Lost
${ping_sp_without_network}    pingfile_sp_without_network.txt
${ping_sp_with_network}    pingfile_sp_with_network.txt
${ping_team_ip}    pingfile_team_ip.txt
${eth}    Ethernet

*** Test Cases ***

Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response} =    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']} == 200    Fail    "Unable to Login"

    Clean OV
    Remove All Alerts

Create ethernet network
    [Documentation]    Create ethernet Networks
    ${resp}        Add Ethernet Networks from variable   ${ethnets}
    Wait For Task2    ${resp}    200    20
    Log    Ethernet Network got created successfully    console=True

Create Network Sets
    [Documentation]    Create Network Sets
    Add Network Sets from variable    ${network_sets}

Create LIG, EG and LE
    [Documentation]    Create LIG, EG and LE
    Log    Creating LIG    console=True
    Add LIG from variable   ${LIGS_TB[0]}
    Log    created LIG successfully    console=True

    Log    Creating EG    console=True
    ${Resp}    Add Enclosure Group from variable        ${enc_group}
    Wait For Task2    ${Resp}    180    20
    Log    created EG successfully    console=True

    Log    Creating LE    console=True
    Add Logical Enclosure from variable     ${les}
    Log    created LE successfully    console=True

##################### Verify all S-Channels on a downlink can pass user traffic as part of VP-LAG connections for a single pair of server downlink ports ##########################
Creating Server Profile with 8 connections(4 VP - LAG) and Powering on server
    [Documentation]    Creating Server Profile with 8 connections(4 VP - LAG) and Powering on server
    Log      Creating Server Profile    console=True
    ${resp}    Add Server Profiles from variable    ${sp_enc1_bay1}
    Wait For Task2    ${resp[0]}    300
    Log    Server profile created successfully.    console=True

    Power on server     ${server6}
    Log    Waiting 10 minutes for server to boot...    console=True
    Sleep   10min

Verifying alert message on server profile page
    [Documentation]    Verifying alert message on server profile page
    ${Alert_msg}    Get Server profile Alerts
    ${Count}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '4'  Fail    ELSE  Log    Verified the alerts msg of server profiles    console=True
    ${resp}    Login to OV & verify LAG is displayed under connections    ${sp_enc1_bay1[0]['name']}

Geting server ip's and checking if IP's are pinging
    [Documentation]    Geting server ip's and checking if IP's are pinging
    ${IP}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Convert to String    ${IP}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${ret}    Ping Server IP    ${number}    ${serverip_List1_global}    ${ping_file}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    0 percent packet loss is observed    console=True
    Log    All the IP's are reachable    console=True

Get MAC Address of the server & Windows Teaming
    [Documentation]    Get MAC Address of the server & Windows Teaming
    ${IP}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Convert to String    ${IP}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${resp}    Fusion Api Get Server Profiles
    ${mac_addr_list}    Create List
    ${mac}    Get Profile Details    ${resp}    ${sp_enc1_bay1[0]['name']}
    ${mac_length}    Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address}    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    ${ip_length}    Get Length    ${serverip_List1_global}
    Log    mac address ${mac_addr_list}    console=True
    ${mac_addr_len}    Get Length    ${mac_addr_list}
    # Compare mac address with server
    ${adapter_name_list}    Create List

    :FOR    ${x}    IN RANGE    ${mac_addr_len}
    \   ${replaced_cmd}    Replace String Using Regexp    ${Powershell_get_mac}    pppppppp      ${mac_addr_list[${x}]}
    \  # calling Get Mac Address from server
    \   Log    the server details is ${server_details_enc2_bay6}    console=True
    \   Log     the ip is ${serverip_List1_global[0]}    console=True
    \   ${output}    Get Mac Address from server    ${server_details_enc2_bay6}    ${serverip_List1_global[0]}    ${replaced_cmd}
    \   ${string}    Convert To String    ${output}
    \   ${match}    ${port}     Should Match Regexp    ${string}    (.*PCIe Slot\\s+\\d+.*)
    #\   ${adapter_name}    Catenate    ${eth}   ${port}
    \   Append to List   ${adapter_name_list}   ${port}
    Log    adapter names list${adapter_name_list}    console=True
    Create Teaming windows     ${adapter_name_list[0]}    ${adapter_name_list[1]}   ${Powershell_get_mac1}    ${server_details_enc2_bay6}    ${serverip_List1_global[0]}
    ${IP}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Create Teaming windows     ${adapter_name_list[2]}    ${adapter_name_list[3]}   ${Powershell_get_mac2}    ${server_details_enc2_bay6}    ${IP[0]}
    ${IP}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Create Teaming windows     ${adapter_name_list[4]}    ${adapter_name_list[5]}   ${Powershell_get_mac3}    ${server_details_enc2_bay6}    ${IP[0]}
    ${IP}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Create Teaming windows     ${adapter_name_list[6]}    ${adapter_name_list[7]}   ${Powershell_get_mac4}    ${server_details_enc2_bay6}    ${IP[0]}

Verify IP is pinging after teaming
    [Documentation]    Verify IP is pinging after teaming
    ${ip_team}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Convert to String    ${ip_team}
    Set Global Variable    ${Team_ip}    ${ip_team}
    ${ret}    Ping Server IP    ${number}    ${Team_ip}    ${team}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    0 percent packet loss is observed    console=True
    Log    successfully pinged ip's    console=True
    Sleep    60s

Verifying alert message on server profile page teaming
    [Documentation]    Verifying alert message on server profile after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '0'  Fail    ELSE  log   Verified the alerts msg of server profiles    console=True

######################################### HappyPath ######################################################################

Creating Server Profile with 4 connections(Non - LAG) and Powering on server
    [Documentation]    Creating Server Profile with 4 connections(Non - LAG) and Powering on server
    ${resp}    Add Server Profiles from variable    ${sp_enc2_bay6}
    Wait For Task2    ${resp}    200

    ${lcon}    Get Length    ${sp_enc2_bay6}
    Log    ${lcon}    console=True
    :FOR     ${x}   IN RANGE   0   ${lcon}
    \    Power on server     ${server}
    \    Log    Power on servers    console=True
    \    Log    Waiting 10 minutes for the server to boot    console=True
    \    Sleep   10min

Geting server ip and checking if IP's are pingable
    [Documentation]    Geting server ip and checking if IP's are pingable
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Convert to String    ${IP}
    Set Global Variable    ${serverip_List_global}    ${IP}
    ${ret}    Ping Server IP    ${number}    ${serverip_List_global}    ${server2file}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed    console=True
    Log    successfully pinged ip's    console=True

Server to server Ping
    [Documentation]    Server to server Ping
    Log    \n Pinging from MLAG server to Non - MLAG server    console=True
    ${ip_team}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Convert to String    ${ip_team}
    Set Global Variable    ${Team_ip}    ${ip_team}
    ${ip_length}    Get Length    ${serverip_List_global}
    :FOR    ${x}    IN RANGE    0   ${ip_length}
    \   ${Output}    Ping from windows server    ${serverip_List_global[${x}]}    ${server_details_enc2_bay6}    ${Team_ip[${x}]}
    \   Should Contain    ${Output}    0% loss
    \   Log    \n Successfully pinged    console=True
    \   Log    \n Pinging from Non - MLAG server to MLAG server    console=True
    \   ${Output}    Ping from windows server    ${Team_ip[${x}]}    ${server_details_enc1_bay1}     ${serverip_List_global[${x}]}
    \   Should Contain    ${Output}     0% loss
    \   Log    \n Successfully pinged    console=True

Removing Teaming on server profile1 and deleting the profile
    [Documentation]    Removing Teaming on server profile1 and deleting the profile
    Convert to String    ${Team_ip}
    ${iplength}    Get Length    ${Team_ip}
    ${IP1}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Set Global Variable    ${win_ip}    ${IP1}
    :FOR    ${x}    IN RANGE    0   ${iplength}
    #\   ${IP1}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    \   Delete Windows Teaming    ${win_ip[0]}    ${server_details_enc2_bay6}    ${detlete_team_cmd${x}}
    \   Sleep    120sec


################## Verify if existing non-LAG'd connections can be edited by PUT method to LAG the connections ################

Verify if existing non - LAG'd connections can be edited by PUT method to LAG the connections
    [Documentation]    Verify if existing non - LAG'd connections can be edited by PUT method to LAG the connections
    Power off Server    ${server6}
    Power off Server    ${server}
    Remove All Server Profiles
    # Creating profile with non LAG connections
    ${resp}    Add Server Profiles from variable    ${SP_non_lag}
    Wait For Task2    ${resp}    200

    # Editing server profile and add LAG in connections
    ${resp}    Edit Server Profiles from variable    ${sp_lag}
    ${task}    Wait For Task    ${resp[0]}    120
    Run Keyword If  '${task['status_code']}' == '200'    Log      \n Server profile updated successfully \nStatus Code:${task['status_code']}    console=True
    ...             ELSE    FAIL

Power on server profile
    [Documentation]    Power on server profile
    Power on server     ${server}
    Log        \n Power on servers    console=True
    Log        \n Waiting 10 minutes for the server to boot    console=True
    Sleep   10min

Verifying alert message on server profile
    [Documentation]    Verifying alert message on server profile
    ${Alert_msg}    Get Server profile Alerts
    ${Count}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '1'  Fail    ELSE  Log       \n - Verified the alerts msg of server profiles    console=True

Get server ip & verify if ip is pinging
    [Documentation]    Get server ip & verify if ip is pinging
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${win_ip}    ${ip}

    ${ret}    Ping Server IP    ${number}    ${win_ip}    ${ping_file}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log      \n 0 percent packet loss is observed    console=True
    Log    All the IP's are reachable    console=True


Get Server Ip & Windows teaming
    [Documentation]    Get Server Ip & Windows teaming
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Log        \n${IP}    console=True
    ${resp} =    Fusion Api Get Server Profiles
    ${mac_addr_list} =    Create List
    ${mac} =    Get Profile Details    ${resp}    ${sp_lag[0]['name']}
    ${mac_length}    Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address}    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    ${ip_length}    Get Length    ${IP}
    Log        \n mac address ${mac_addr_list}    console=True
    ${mac_addr_len}    Get Length    ${mac_addr_list}
    # Compare mac address with server
    ${adapter_name_list} =    Create List
    :FOR    ${x}    IN RANGE    ${mac_addr_len}
    \   ${replaced_cmd} =    Replace String Using Regexp    ${Powershell_get_mac}    pppppppp    ${mac_addr_list[${x}]}
    \   Log      \n the string is step2 ${replaced_cmd}    console=True
    \  # calling Get Mac Address from server
    \   Log      \n the server details is ${server_details_enc1_bay1}    console=True
    \   ${output}    Get Mac Address from server    ${server_details_enc1_bay1}    ${IP[0]}    ${replaced_cmd}
    \   ${string}    Convert To String    ${output}
    \   ${match}    ${port}     Should Match Regexp    ${string}    (.*PCIe Slot\\s+\\d+.*)
    #\   ${adapter_name}    Catenate    ${eth}   ${port}
    \   Log      \nadapter names${port}    console=True
    \   Append to List   ${adapter_name_list}   ${port}
    Log      \nadapter names list ${adapter_name_list}    console=True

    ${tmp}    Remove Whitespace    ${adapter_name_list[0]}
    ${tmp1}    Remove Whitespace    ${adapter_name_list[1]}
    ${replaced_cmd1} =    Replace String Using Regexp    ${Powershell_get_mac1}    pppp    ${tmp}
    ${replaced_cmd2} =    Replace String Using Regexp    ${replaced_cmd1}    qqq    ${tmp1}
    Log      \nstr is${replaced_cmd2}    console=True
    Create Windows Teaming   ${IP[0]}    ${server_details_enc1_bay1}    ${replaced_cmd2}
    Sleep    4min

Verifying alert message on server profile page after teaming
    [Documentation]    Verifying alert message on server profile page after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '0'  Fail    ELSE  Log       \n - Verified the alerts msg of server profiles    console=True

Verify if IP is pinging after teaming
    [Documentation]    Verify if IP is pinging after teaming
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_ip}    ${ip}
    ${ret}    Ping Server IP    ${number}    ${Team_ip}    ${ping_team_ip}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log      \n 0 percent packet loss is observed    console=True
    Log         All the IP's are reachable    console=True


####################### Edit the server profile and Delete/add the networks #########################

Edit the server profile to Delete networks and verify traffic
    [Documentation]    Edit the server profile to Delete networks and verify traffic

    Remove ALL Ethernet Networks
    Sleep    30sec

    ${ret1}    Ping Server IP    ${number}    ${Team_ip}    ${ping_team_ip}    ${flag}    ${Ping_Lost}
    Should Not Contain    ${ret1}    TTL

Edit the server profile to add networks and verify traffic
    [Documentation]    Edit the server profile to add networks and verify traffic
    # Create network
    ${resp}        Add Ethernet Networks from variable   ${ethnets}
    Wait For Task2    ${resp}    200
    Log    Ethernet Network got created successfully    console=True

    # Edit LIG and add network to the uplinkset
    ${resp} =    Edit LIG     ${Edit_LIG}
    Wait For Task2   ${resp}     120

    # Update from group in LI
    ${resp}    Fusion API Get LI
    Update Logical Interconnect from Group    ${resp['members'][0]}

    Power off server     ${server}
    # Edit profile and add networks
    ${resp}    Edit Server Profiles from variable    ${sp_edit_network}
    Wait For Task2    ${resp}    200
    Power on server     ${server}
    Sleep    500s
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_ip}    ${ip}
    ${ret1}    Ping Server IP    ${number}    ${Team_ip}    ${ping_sp_with_network}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail ELSE  Log      \n Pinging happend with 0 loss percentage    console=True

    Power off ALL Servers


########################## Backup & Restore ########################

Create Backup
    [Documentation]    Create Backup
    Log     \n-Creating the backup in OV    console=True
    Create Backup

Delete Server Profile
    [Documentation]    Delete Server Profile
    Remove All Server Profiles

Restore From backup
    [Documentation]    Restore From backup
    Log     \n\nRestoring from the backup in the appliance    console=True
    Restore Appliance
    Sleep    5min
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

Verify Server profile with LAG connections are displayed
    [Documentation]    Verify Server profile with LAG connections are displayed
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${uprofiles} =    Get Profiles
    Unassign profiles      ${uprofiles}
    Re-assign profiles     ${uprofiles}
    Power on server     ${server}
    Log        Waiting 10 minutes for server to boot...    console=True
    Sleep   8min
    ${resp}    Login to OV & verify LAG is displayed under connections    ${sp_lag[0]['name']}
    Log        ${resp}    console=True
    Lists Should Be Equal    ${resp}    ${lag_list}

Verify team ip is pinging after restore
    [Documentation]    Verify if IP is pinging after teaming
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_ip}    ${ip}
    ${ret1} = Ping Server IP    ${number}    ${Team_ip[0]}    ${team0}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail ELSE  Log      \npinging happend with 0loss percentage    console=True
    Log         successfully pinged  ip's    console=True

Delete Teaming
    [Documentation]    Delete Teaming
    Delete Windows Teaming    ${Team_ip[0]}    ${windows_server_details}    ${detlete_team_cmd0}
    Sleep    5min


####################### Edit the server profile and add a networks to the network sets #########################

Edit the server profile with newly added networks to the network sets and verify Traffic
    [Documentation]    Edit the server profile with newly added networks to the network set and verify Traffic

    # Edit profile and add networks
    ${resp}    Edit Server Profiles from variable    ${sp_ns}
    Wait For Task2    ${resp}    200
    Power on server     ${server}
    sleep    600

Verifying alert message on server profile page before Tagging
    [Documentation]    Verifying alert message on server profile page
    ${Alert_msg}    Get Server profile Alerts
    ${Count} =    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '1'  Fail    ELSE  Log    Verified the alerts msg of server profiles    console=True

Create Tagging inside server
    [Documentation]    Create Tagging inside server
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Convert to String    ${IP}
    Set Global Variable    ${server_ip}    ${IP[0]}
    ${resp} =     Fusion Api Get Server Profiles
    ${mac_addr_list} =    Create List
    ${mac} =    Get Profile Details    ${resp}    ${sp_ns[0]['name']}
    ${mac_length} =     Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address} =    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    ${mac_addr_len}    Get Length    ${mac_addr_list}

    # Compare mac address with server
    ${adapter_name_list} =    Create List
    :FOR    ${x}    IN RANGE    ${mac_addr_len}
    \   ${replaced_cmd} =    Replace String Using Regexp    ${Powershell_get_mac}    pppppppp    ${mac_addr_list[${x}]}
    \   Log    \n the string is step2 ${replaced_cmd}    console=True
    \  # calling Get Mac Address from server
    \   Log    \n the server details is ${windows_server_details}    console=True
    \   Log    \n the ip is ${server_ip}    console=True
    \   ${output}    Get Mac Address from server    ${server_details_enc1_bay1}    ${server_ip}    ${replaced_cmd}
    \   Log    \n the string is step3    console=True
    \   ${string}    Convert To String    ${output}
    \   ${match}    ${port}     Should Match Regexp    ${string}    (.*PCIe Slot\\s+\\d+.*)
    #\   ${adapter_name}    Catenate    ${eth}   ${port}
    \   Append to List   ${adapter_name_list}   ${port}
    Log    \nadapter names list ${adapter_name_list}    console=True
    Create Teaming windows     ${adapter_name_list[0]}    ${adapter_name_list[1]}   ${Powershell_get_mac1}    ${windows_server_details}    ${server_ip}
    ${tagging_cmd1}    Replace String Using Regexp    ${tagging_cmd}    vlan_id    401
    ${output}    Execute Powershell Command    ${server_ip}    ${windows_server_details}    ${tagging_cmd1}
    Log    \n${output}    console=True
    Log    \nTagging completed successfully    console=True


Get server ip & verify if ip is pinging after Tagging
    [Documentation]    Get server ip & verify if ip is pinging after Tagging
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    #${team_len}    Get Length    ${team_ip}
    Set Global Variable    ${Team_Ip}    ${ip[1]}
    ${ret}    Ping Server IP    ${number}    ${ip}    ${ping_file}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log      \n 0 percent packet loss is observed    console=True
    Log    All the IP's are reachable    console=True

Verifying alert message on server profile page after teaming and Tagging
    [Documentation]    Verifying alert message on server profile page after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count} =    Get Length    ${Alert_msg}
    Run Keyword If  '${Count}' != '0'  Fail    ELSE  Log       \n-Verified the alerts msg of server profiles    console=True

Delete Team
    [Documentation]    Delete Team
    ${tagging_cmd2}    Replace String Using Regexp    ${remove_tagging_cmd}    vlan_id    401
    ${output}    Execute Powershell Command    ${Team_Ip}    ${windows_server_details}    ${tagging_cmd2}
    ${ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Sleep    5min


***Keywords ***
Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    Log        \nstdout is ${ilo_details}    console=True
    ${serverip_List}    Create List
    ${serverip_List1}    Create List
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop/system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log        \nstdout is ${stdout}    console=True
    ${cmd_output}    Get Regexp Matches    ${stdout}    Ip=172\\.\\d+\\.\\d+\\.\\d+
    Log        \nstdout is ${cmd_output}    console=True
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    Log    ip is ${ip_lists}    console=True
    \    Append To List   ${ip_list_new}    ${ip_lists}
    Log        \n IP's are is ${ip_list_new}    console=True
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}


Get Profile Details
    [Documentation]    Get Profile Details
    [Arguments]        ${resp}    ${profile_name}
    ${profile_len}    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${y}    Set Variable    ${resp['members'][${x}]['connectionSettings']}
    \   ${mac_address}    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get Mac address Of Server Profile    ${y['connections']}
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]            ${mac_address}

Get Mac address Of Server Profile
    [Documentation]    Get Mac address Of Server Profile
    [Arguments]                  ${connections}
    ${mac_address}    Create List
    ${connection_length}    Get Length    ${connections}
    :FOR    ${x}    IN RANGE    ${connection_length}
    \   Append To List   ${mac_address}    ${connections[${x}]['mac']}
    [return]            ${mac_address}

Get Mac Address from server
    [Documentation]    Get Mac Address from server
    [Arguments]         ${server_details}    ${IP}    ${Powershell_get_mac}
    Telnet.Open Connection     ${IP}     prompt=>     timeout=30s
    Sleep    5sec
    Telnet.Write    a
    ${login}    Telnet.Login    ${server_details['username']}    ${server_details['password']}    login_prompt=login:      password_prompt=password:
    Log      \nLogged in to server    console=True
    Sleep    30sec
    ${out}    Telnet.Read
    Sleep    30sec
    Telnet.Write    Powershell
    Sleep    30sec
    Telnet.Write    ${Powershell_get_mac}
    Sleep    60sec
    ${stdout}    Telnet.Read
    Sleep    60sec
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}

Create Windows Teaming
    [Documentation]    Create Windows Teaming
    [Arguments]         ${server_ip}    ${server_details}    ${team_cmd}
    Telnet.Open Connection     ${server_ip}     prompt=>     timeout=20s
    Log      \nSuccessfully opened connection to the server    console=True
    Telnet.Write    a
    ${login}    Telnet.Login    ${server_details['username']}     ${server_details['password']}    login_prompt=login:    password_prompt=password:
    Log      \nSuccessfully logged into the server    console=True
    Sleep    10sec
    Telnet.Write    powershell
    Log      \n${team_cmd}    console=True
    Telnet.Write    ${team_cmd}
    Sleep    10sec
    Telnet.Write    y
    Sleep    10sec
    Telnet.Close Connection
    Telnet.Close All Connections
    Log        \nteaming completed    console=True

Create Teaming windows
    [Documentation]    Create Teaming windows
    [Arguments]         ${adapter_name_1}   ${adapter_name_2}    ${Powershell_get_mac1}    ${server_details}    ${serverip_List1_global[1]}
    ${tmp}    Remove Whitespace    ${adapter_name_1}
    ${tmp1}    Remove Whitespace    ${adapter_name_2}
    ${replaced_cmd1}    Replace String Using Regexp    ${Powershell_get_mac1}    pppp    ${tmp}
    Log      \nstrafter strip is${tmp}    console=True
    Log      \nreplaced_cmd1 is${replaced_cmd1}    console=True
    ${replaced_cmd2}    Replace String Using Regexp    ${replaced_cmd1}    qqq    ${tmp1}
    Log      \nstr is${replaced_cmd2}    console=True
    Create Windows Teaming   ${serverip_List1_global[1]}    ${server_details}    ${replaced_cmd2}

Delete Windows Teaming
    [Documentation]    Delete Windows Teaming
    [Arguments]         ${team_ip}    ${server_details}    ${detlete_team_cmd}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Log      \nSuccessfully opened connection to the server    console=True
    Telnet.Write    a
    ${login}    Telnet.Login    ${server_details['username']}     ${server_details['password']}    login_prompt=login:    password_prompt=password:
    Log      \nSuccessfully logged into the server    console=True
    Sleep    10sec
    Telnet.Write    powershell
    Sleep    10sec
    Telnet.Write    ${detlete_team_cmd}
    Log      \n${detlete_team_cmd}    console=True
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    ${stdout}    Telnet.Read
    Log       \nout is ${stdout}    console=True
    Telnet.Close Connection
    Telnet.Close All Connections
    Log        \nteaming deleted    console=True

Get Server profile Alerts
    [Documentation]    Get Server profile Alerts
    ${y}    Set Variable    0
    ${Alert_msg}    Create List
    #${delete_alert_resp}    Fusion Api Delete Alert
    ${resp}    Fusion Api Get Alerts     /rest/alerts?filter="alertState EQ 'Active'"
    ${mem_resp}    Get From Dictionary    ${resp}    members
    ${len}    Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0    ${len}
    \   Run Keyword If  '${mem_resp[${x}]['alertTypeID']}' != 'crm.connectionStateChange'    Continue For Loop
    \   ${desc}    Get From Dictionary    ${mem_resp[${x}]}    description
    \   Log    description'${desc}'    console=True
    \   ${match}   ${status}    Should Match Regexp    ${desc}    (Connection\\s+on\\s+downlink\\s+port\\s+\\d+\\,.*LAG\\d+.)
    \   Append To List    ${Alert_msg}    ${desc}
    \   ${y}    Evaluate    ${y} + 1
    \   Log        ${status}    console=True
    Log    ${Alert_msg}    console=True
    [Return]    ${Alert_msg}


Ping from windows server
    [Documentation]    Ping from windows server
    [Arguments]    ${windows_server_ip}    ${windows_server_cred}    ${linux_server_ip}
    Telnet.Open Connection    ${windows_server_ip}     prompt=>     timeout=20s
    Log      \nSuccessfully opened connection to the server    console=True
    sleep    10sec
    Telnet.Write    a
    Sleep    5sec
    ${login}    Telnet.Login    ${windows_server_cred['username']}     ${windows_server_cred['password']}    login_prompt=login:    password_prompt=password:
    Log      \nSuccessfully logged into the server    console=True
    Sleep    15sec
    Telnet.Write    ping ${linux_server_ip}
    Sleep    15s
    ${Output}    Telnet.Read
    Log    ${Output}    console=True
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${Output}

Clean OV
    [Documentation]         Cleans the appliance
    Log    nCleaning the OV    console=True
    Power off ALL Servers    PressAndHold
    Remove All Server Profiles
    Remove All LEs
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Login to OV & verify LAG is displayed under connections
    [Documentation]    Login to OV & verify server profile connection is present with LAG
    [Arguments]     ${Profile_name}
    ${sp_resp}    Fusion Api Get Server Profiles    param=?filter="'name'=='${Profile_name}'"
    Log        ${sp_resp}    console=True
    ${Lag_list}    Create List
    ${con_resp}    Get From Dictionary     ${sp_resp['members'][0]}     connectionSettings
    ${connection_resp}    Get From Dictionary     ${con_resp}     connections
    Log        ${connection_resp}    console=True
    ${len}    Get Length    ${connection_resp}
    :FOR    ${x}    IN RANGE    0  ${len}
    \    ${Lag}    Get From Dictionary     ${connection_resp[${x}]}     lagName
    \    Log        ${Lag}    console=True
    \    Append To List   ${Lag_list}    ${Lag}
    [Return]    ${Lag_list}

Get Profiles
    [Documentation]    Get Profiles
    ${resp}    fusion api get server profiles
    ${profiles}    Create List
    ${profile_list}    Get From Dictionary     ${resp}    members
    ${l}    Get Length  ${profile_list}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${profile}    Get From List   ${profile_list}    ${x}
    \   ${profile_details}    Create Dictionary     name =${profile['name']}
    \   ...                                           uri =${profile['uri']}
    \   ...                                           state =${profile['state']}
    \   ...                                           status =${profile['status']}
    \   ...                                           serverHardwareUri =${profile['serverHardwareUri']}
    \   append to list    ${profiles}   ${profile_details}
    [Return]    ${profiles}

Unassign profiles
    [Documentation]    Unassign profiles
    [Arguments]     ${profiles}
    Log       \nUnassigning profiles....    console=True
    :FOR    ${p}    IN    @{profiles}
    \   ${profile} =    Fusion Api Get Resource    uri =${p['uri']}
    \   set to dictionary    ${profile}   serverHardwareUri =${None}
    \   set to dictionary    ${profile}   enclosureBay =${None}
    \   set to dictionary    ${profile}   enclosureUri =${None}
    \   remove from dictionary    ${profile}   status_code    headers
    \   ${resp}    fusion api edit server profile    uri =${p['uri']}   body =${profile}
    \   ${task}    Wait For Task2   ${resp}     6m   15s
    ${valDict}     Create Dictionary   status_code =${200}
    ...                                     taskState = Completed
    Validate Response   ${task}    ${valDict}

Re-assign profiles
    [Documentation]    Re-assign profiles
    [Arguments]     ${profiles}
    Set Log Level   TRACE
    Log       \nRe-assigning profiles....    console=True
    :FOR    ${p}    IN    @{profiles}
    \   ${profile}    Fusion Api Get Resource    uri =${p['uri']}
    \   set to dictionary    ${profile}   serverHardwareUri=${p['serverHardwareUri']}
    \   remove from dictionary    ${profile}   status_code    headers
    \   ${resp}    fusion api edit server profile    uri =${p['uri']}   body =${profile}
    \   ${task}    Wait For Task2   ${resp}     6m   15s
    ${valDict}    Create Dictionary   status_code =${200}
    ...                                     taskState = Completed
    Validate Response   ${task}    ${valDict}

Ping Server IP
    [Documentation]    Pinging Server IP
    [Arguments]         ${number}    ${serverip_List1_global}    ${ping_file}    ${flag}    ${Ping_Lost}
    ${l}    Get Length    ${serverip_List1_global}
    Set Global Variable    ${iplength}    ${l}
    Log        \n pinging started    console=True
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \    startthread    ${number}    ${serverip_List1_global[${x}]}    ${ping_file[${x}]}    ${flag}
    \    Sleep    30
    \    ${contents}    OperatingSystem.Get File    ${ping_file[${x}]}
    \    ${Lines}    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log    \ncontents are ${Lines}    console=True
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log    ${ret1}    console=True
    [Return]    ${ret1}

Create Tagging
    [Documentation]    Create Tagging
    [Arguments]         ${server_ip}    ${windows_server_details}    ${tagging_cmd}
    Telnet.Open Connection     ${server_ip}     prompt=>     timeout=20s
    Log    \nSuccessfully opened connection to the server    console=True
    Telnet.Write    a
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log    \nSuccessfully logged into the server    console=True
    Sleep    90sec
    Telnet.Write    powershell
    Log    \n${tagging_cmd}    console=True
    Telnet.Write    ${tagging_cmd}
    Sleep    60sec
    Telnet.Write    y
    Sleep    60sec
    Telnet.Close Connection
    Telnet.Close All Connections
    Log    \nteaming completed    console=True

Get Adapter Name
    [Documentation]    Get Adapter Name
    [Arguments]    ${port}    ${server_ip}    ${Powershell_get_mac}    ${windows_server_details}
    ${resp}    Fusion Api Get Server Profiles
    ${connectionsSetting}    Get From Dictionary    ${resp['members'][0]}    connectionSettings
    ${connections}    Get From Dictionary    ${connectionsSetting}    connections
    ${length}    Get Length    ${connections}
    :FOR     ${x}   IN RANGE   0   ${length}
    \    ${portIds}    Get From Dictionary    ${connections[${x}]}    portId
    \    Run Keyword If    '${portIds}' != '${port}'    Continue For Loop
    \    ...    ELSE    Run Keywords    Set Global Variable    ${mac}    ${connections[${x}]['mac']}    AND    Exit For Loop
    ${mac_address}    Replace String Using Regexp    ${mac}    :    -
    Log    ${mac_address}    console=True
    ${replaced_cmd}    Replace String Using Regexp    ${Powershell_get_mac}    pppppppp    ${mac_address}
    ${output}    Execute Powershell Command    ${server_ip}    ${windows_server_details}    ${replaced_cmd}
    ${string}    Convert To String    ${output}
    ${match}    ${port}     Should Match Regexp    ${string}    (.*PCIe Slot\\s+\\d+.*)
    #${adapter_name}    Catenate    ${eth}   ${port}
    [Return]    ${port}

Execute Powershell Command
    [Documentation]    Execute Powershell Command
    [Arguments]         ${team_ip}    ${windows_server_details}    ${powershell_cmd}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Sleep    5sec
    Log    \nSuccessfully opened connection to the server    console=True
    Telnet.Write    a
    Sleep    5sec
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log    \nSuccessfully logged into the server    console=True
    Sleep    30sec
    Telnet.Write    \r
    Telnet.Write    \r
    Telnet.Write    powershell
    Sleep    30sec
    Telnet.Write    \r
    Telnet.Write    \r
    Log    \n${powershell_cmd}    console=True
    Telnet.Write    ${powershell_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    ${stdout}    Telnet.Read
    Log    \nout is ${stdout}    console=True
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}
