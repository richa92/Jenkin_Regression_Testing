*** Settings ***
Documentation   Verify Power off/on the Nitro modules
#Variables       data_variables.py
Variables       data_variables_Nitro_Porting.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         Telnet
Library         String
Resource        ../../../../../Resources/api/fusion_api_resource.txt
Library         data_variables
Library         backping.py
Library         Dialogs
Suite Teardown   Clean OV


*** Variables ***
${APPLIANCE_IP}              15.245.131.251
${Host}                      15.245.131.251
${number1}                   2
${number}                    5
${flag}                      Windows
${Ping_Lost}                 Lost
${ICMmethaneabsent0}        ICMmethaneabsent0.txt
${ICMmethaneabsent1}        ICMmethaneabsent1.txt
${ICMmethaneconfigured0}    ICMmethaneconfigured0.txt
${ICMmethaneconfigured1}    ICMmethaneconfigured1.txt
${bladeserverefuseoff}       bladeserverefuseoff.txt
${bladeserverefuseon}        bladeserverefuseon.txt
${Resetfile}                 Resetfile.txt
${team1}                     teamips.txt
${ICM_MODEL}                 Virtual Connect SE 40Gb F8 Module for Synergy
${ping_team_ip}              pingfile_team_ip.txt

${ping_disable_uplink1}      pingfile_disable_uplink1.txt
${ping_disable_uplink2}      pingfile_disable_uplink2.txt

${ping_disable_downlink1}    pingfile_disable_downlink1.txt
${ping_disable_downlink2}    pingfile_disable_downlink2.txt

${ping_sp_without_network}   pingfile_sp_without_network.txt
${ping_sp_with_network}      pingfile_sp_with_network.txt
${serverip_serverpoweron}    serverip_serverpoweron.txt
${Serverip_Serverpower_Off}  Serverip_Serverpower_Off.txt
${ping_file1}                ping_file_during_poweroff_Nitro1.txt
${ping_file2}                ping_file_during_poweroff_Nitro2.txt
${ping_file3}                ping_file_during_poweron_Nitro1.txt
${ping_file4}                ping_file_during_poweron_Nitro2.txt
${ping_file5}                ping_file_during_poweroff_methane1.txt
${ping_file6}                ping_file_during_poweroff_methane2.txt
${ping_file7}                ping_file_during_poweron_methane1.txt
${ping_file8}                ping_file_during_poweron_methane2.txt
${server0}                   ping_server2.txt
${eth}    Ethernet

*** Test Cases ***

Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response} =    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login"

    Clean OV
    Remove All Alerts


Create ethernet network
    [Documentation]    Create ethernet Networks
    Log    \n-Creating Ethernet Networks    console=True
    ${resp}    Add Ethernet Networks from variable   ${ethnets}
    Wait For Task2    ${resp}    200    20
    log    \nEthernet Network got created successfully    console=True

Create Network Sets
    [Documentation]    Create Network Sets
    Add Network Sets from variable    ${network_sets}

Create LIG, EG and LE
    [Documentation]    Create LIG, EG and LE
    Log    \n Creating LIG    console=True
    Add LIG from variable   ${LIGS_TB[0]}

    Log    \n Creating EG    console=True
    ${resp}    Add Enclosure Group from variable    ${enc_group}
    Wait For Task2    ${resp}    180    20
    log    \n-created EG successfully    console=True

    Log    \n Creating LE    console=True
    Add Logical Enclosure from variable     ${les}

############################### Verify LAG creation without teaming configured on OS #######################
Create server Profiles
    [Documentation]    Create server Profiles
    ${resp}    Add Server Profiles from variable    ${Server_profile1}
    Wait For Task2    ${resp[0]}    200

    Log    \n Server profiles created successfully    console=True
    Power on server     ${server}
    Log    \n Power on servers    console=True
    Log    \n Waiting 10 minutes for the server to boot    console=True
    Sleep   10min


Verifying alert message on server profile page
    [Documentation]    Verifying alert message on server profile page
    ${Alert_msg}    Get Server profile Alerts
    ${Count_2}    Get Length    ${Alert_msg}
    Run Keyword If  '${Count_2}' != '1'  Fail    ELSE  log    \n-Verified the alerts msg of server profiles    console=True

Geting server ip and checking if IP's are pinging
    [Documentation]    Geting server ip and checking if IP's are pinging
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${ret} =    Ping Server IP    ${number}    ${serverip_List1_global}    ${name}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed    console=True
    Log    All the IP's are reachable   console=True

Get MAC Address of the server
    [Documentation]    Get MAC Address of the server
    ${IP}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${serverip_List1_global}    ${IP}
    ${resp} =    Fusion Api Get Server Profiles
    ${mac_addr_list}=   Create List
    ${mac} =    Get Profile Details    ${resp}    ${Server_profile1[0]['name']}
    ${mac_length} =    Get Length    ${mac}
    :FOR    ${x}    IN RANGE    ${mac_length}
    \   ${mac_address} =    Replace String Using Regexp    ${mac[${x}]}    :    -
    \   Append To List   ${mac_addr_list}    ${mac_address}
    Log    \n mac address ${mac_addr_list}    console=True
    ${mac_addr_len}    Get Length    ${mac_addr_list}
    #Compare mac address with server
    ${adapter_name_list}=   Create List
    :FOR    ${x}    IN RANGE    ${mac_addr_len}
    \   ${replaced_cmd} =   Replace String Using Regexp    ${Powershell_get_mac}    pppppppp    ${mac_addr_list[${x}]}
    \   Log    \n the string is step2 ${replaced_cmd}    console=True
    \   Log    \n the server details is ${windows_server_details}    console=True
    \   Log    \n the ip is ${serverip_List1_global[0]}    console=True
    \   ${output}    Get Mac Address from server    ${serverip_List1_global[0]}    ${replaced_cmd}
    \   Log    \n the string is step3    console=True
    \   ${string}    Convert To String    ${output}
    \   ${match}    ${port}     Should Match Regexp    ${string}    (.*PCIe Slot\\s+\\d+.*)
    #\   ${adapter_name}    Catenate    ${eth}   ${port}
    \   Append to List   ${adapter_name_list}   ${port}
    Log    \nadapter names lsit${adapter_name_list}    console=True
    Create Teaming windows     ${adapter_name_list[0]}    ${adapter_name_list[1]}   ${Powershell_get_mac1}    ${windows_server_details}    ${serverip_List1_global[0]}

Verify if IP is pinging after teaming
    [Documentation]    Verify if IP is pinging after teaming
    ${team_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_Ip}    ${team_ip}
    ${ret} =    Ping Server IP    ${number}    ${Team_Ip}    ${team0}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed    console=True
    Log    All the IP's are reachable    console=True
    Sleep    200

Verifying alert message on server profile page after teaming
    [Documentation]    Verifying alert message on server profile page after teaming
    ${Alert_msg}    Get Server profile Alerts
    ${Count2}=    Get Length    ${Alert_msg}
    Run Keyword If  '${Count_2}' != '0'  Fail    ELSE  log    \n-Verified the alerts msg of server profiles    console=True


############################################### Nitro ICM Efuse #######################################################
EfuseOn Nitro ICM/EfuseOff Nitro ICM
    [Documentation]    EfuseOn Nitro ICM/EfuseOff Nitro ICM
    Log    \n\nEfussing Nitro ICM    console=True
    ${icbay} =    Get Length    ${Nitro_icbays}
    :FOR    ${x}    IN RANGE    0   ${icbay}
    \    Get EM IP    ${Enc[${x}]}
    \    Get EM Token     ${Enc[${x}]}
    \    Efuse ICM    ${Action[0]}     ${Nitro_icbays[${x}]}
    \    ${ICM_uri}    Get IC URI    ${interconnect_nitro[${x}]}
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM_uri}    ${state[0]}
    \    Log    \n\n completed    console=True
    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ICMabsent[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE    Log    \n 0 percent packet loss is observed during ${INTERCONNECTS[${x}]} ICM Effuseon    console=True
    \    Sleep    60
    \    Log    \n\nEfusingoff Nitro ICMS    console=True
    \    Efuse ICM    ${Action[1]}     ${Nitro_icbays[${x}]}
    \    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ICM_uri}    ${state[1]}
    \    Log    \n\n completed    console=True
    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ICMconfigured_ips[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE    Log    \n 0 percent packet loss is observed during ${INTERCONNECTS[${x}]} ICM Effuseoff    console=True
    Sleep    200

############################################### Methane ICM Efuse ###########################################################

EfuseOn methane ICM
    [Documentation]    EfuseOn methane ICM
    Log    \n\nEfusingon methane ICMS    console=True
    ${icbay} =    Get Length    ${methane_icbays}
    ${team_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_Ip}    ${team_ip}
    :FOR    ${x}    IN RANGE    0   ${icbay}
    \    Get EM IP    ${Enc[${x}]}
    \    Get EM Token    ${Enc[${x}]}
    \    Efuse ICM    ${Action[0]}     ${methane_icbays[${x}]}
    \    ${ICM_uri}    Get IC URI    ${interconnect_support[${x}]}
    \    Wait Until Keyword Succeeds    5 min    20s    IC reached state    ${ICM_uri}    ${state[0]}
    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ICMabsent[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed during methane ICM Effuse    console=True
    \    Sleep    60
    \    Log    \n\nEfusingoff methane ICMS    console=True
    \    Efuse ICM    ${Action[1]}     ${methane_icbays[${x}]}
    \    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ICM_uri}    ${state[1]}
    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ICMconfigured_ips[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed during methane ICM Effuse    console=True
    Sleep    200


################################################ Poweroff/on Bladeserver  ###########################################
Poweroff blade server and verify traffic
    [Documentation]    Poweroff blade server and verify traffic
    Power off server     ${server}
    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${Serverip_Serverpower_Off}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' == '0%'  Fail    ELSE  Log    \npinging happend with '${ret1}' loss percentage    console=True
    Log    successfully pinged ip's    console=True


Poweron blade server and verify traffic
    [Documentation]    Poweron blade server and verify traffic
    Power on server     ${server}
    Log    Waiting 10 minutes ...    console=True
    Sleep   10min
    ${team_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_Ip}    ${team_ip}
    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${Serverip_Serverpoweron}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail     ELSE  Log    \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip's    console=True
    Sleep    200

################################################### Nitro ICM Reset #####################################################

ICM Reset
    [Documentation]    Nitro ICM Reset
    Log    -Issue Reset    console=True
    ${resp1}    Fusion Api Get Interconnect
    ${resp}    Patch Interconnect     ${resp1['members'][0]}    op=replace  path=/deviceResetState  value=Reset  timeout=600  interval=10
    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${Resetfile}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \npinging happend with 0 loss percentage    console=True
    Sleep    200


############################################# Nitro ICM Poweroff/on ##########################################################
Create server Profile2
    [Documentation]    Create server Profiles
    ${resp}    Add Server Profiles from variable    ${server_profile2}
    ${task}    Wait For Task2    ${resp[0]}    200

    Power on server     ${server6}
    Log    \n Power on servers    console=True
    Log    \n Waiting 10 minutes for the server to boot    console=True
    Sleep   10min


Verify if IP of server2 are pinging
    [Documentation]    Verify if IP is pinging after teaming
    ${ip}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Set Global Variable    ${server_ip_list1}    ${ip}
    ${team_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_Ip}    ${team_ip}
    ${ret} =    Ping Server IP    ${number}    ${server_ip_list1}    ${server_ip_list1}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed    console=True
    Log    All the IP's are reachable    console=True

Power off Nitro module & verify no traffic loss observerd during ping
    [Documentation]    Power off Nitro module & verify no traffic loss observerd during ping
    #Power off Enc1, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=Off
    Sleep    2min

    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_file1}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 0 loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[1]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)

    ${Output}    Server to server ping    ${server_ip_list1[1]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss

    #Power off Enc2, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=Off
    Sleep    2min
    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_file2}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '100%'  Fail   ELSE  Log    npinging happend with 100loss percentage    console=True
    Log    IP is not reachable    console=True


Power on Nitro module & verify traffic loss observerd during ping
    [Documentation]    Power on Nitro module & verify traffic loss observerd during ping

    #Power on Enc1, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=On
    Sleep    10min
    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_file3}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss


    #Power on Enc2, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=On
    Sleep    10min
    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_file4}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Ping from windows server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)
    ${Output}    Server to server ping    ${server_ip_list1[0]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss
    Sleep    200


################################################# Poweron/off Methane module ##################################################

Power off methane module & verify traffic loss observerd during ping
    [Documentation]    Power off methane module & verify traffic loss observerd during ping
    #Power off Enc1, methane module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto_Methane[0]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10


    #Gateway Ping
    ${ip}    Get Server Ip Windows    ${ilo_details_enc2_bay6}
    Set Global Variable    ${server_ip_list1}    ${ip}
    ${ret} =    Ping Server IP    ${number}    ${server_ip_list1}    ${ping_file5}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)
    ${Output}    Server to server ping    ${server_ip_list1[0]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss

    #Power off Enc2, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto_Methane[1]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Sleep    10min

    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${server_ip_list1}    ${ping_file6}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 100loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)
    ${Output}    Server to server ping    ${server_ip_list1[0]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss
    Sleep    200

Power on methane module & verify traffic loss observerd during ping
    [Documentation]    Power on methane module & verify traffic loss observerd during ping

    #Power on Enc1, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto_Methane[0]}    op=replace  path=/powerState  value=On  timeout=60  interval=10


    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${server_ip_list1}    ${ping_file7}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log   \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)
    ${Output}    Server to server ping    ${server_ip_list1[0]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss

    ##Power on Enc2, Nitro module & verify traffic
    ${resp}    Patch Interconnect     ${Interconnect_dto_Methane[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10


    #Gateway Ping
    ${ret} =    Ping Server IP    ${number}    ${server_ip_list1}    ${ping_file8}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    Log    \nServer to server ping    console=True
    #Server to server ping server1(Enc1,bay1) to server2(Enc2,bay6)
    ${Output}    Server to server ping    ${Team_Ip[0]}    ${windows_server_details}    ${server_ip_list1[0]}
    Should Contain    ${Output}    0% loss

    #Server to server ping server2(Enc2,bay6) to server1(Enc1,bay1)
    ${Output}    Server to server ping    ${server_ip_list1[0]}    ${windows_server_details1}    ${Team_Ip[0]}
    Should Contain    ${Output}    0% loss
    Sleep    200

############################################### Disable/enable uplinkports ################################################
Disable uplink ports & Verify traffic
    [Documentation]    Disable uplink ports & Verify traffic
    #Disable uplink port from one interconnect & verify failover
    ${resp}    Update IC Port    ${interconnect_nitro[0]}    ${uplink_ports[0]}    ${ic_disable_body[0]}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${uplink_ports}    ${disable_status}
    Sleep    3min

    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_disable_uplink1}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \npinging happend with 0 loss percentage    console=True
    Log    successfully pinged ip    console=True

    #Disable uplink port from two interconnect & verify traffic
    ${resp}    Update IC Port    ${interconnect_nitro[1]}    ${uplink_ports[1]}    ${ic_disable_body[1]}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${uplink_ports}    ${disable_status}
    Sleep   3min

    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_disable_uplink2}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '100%'  Fail   ELSE  Log    \npinging happend with 100 loss percentage    console=True
    Log    Ip is not pinging    console=True


Enable uplink ports & Verify traffic
    [Documentation]    Enable uplink ports & Verify traffic
    ${ic_len} =    Get Length    ${interconnect_nitro}
    :FOR    ${x}    IN RANGE    ${ic_len}
    \    ${resp}    Update IC Port    ${interconnect_nitro[${x}]}    ${uplink_ports[${x}]}    ${ic_enable_body[${x}]}
    \    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${uplink_ports}    ${enable_status}
    \    Sleep   3min

    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_enable_uplink[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    \    Log    successfully pinged ip    console=True


#################################################### Disable/enable Downlinkport ##############################################

Disable downlink ports & Verify traffic
    [Documentation]    Disable downlink ports & Verify traffic
    #Disable uplink port from one interconnect & verify failover
    ${resp}    Update IC Port    ${interconnect_nitro[0]}    ${downlink_ports[0]}    ${ic_disable_body_downlink[0]}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${downlink_ports}    ${disable_status}
    Sleep    3min

    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_disable_downlink1}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log      \npinging happend with 0loss percentage    console=True
    Log    successfully pinged ip    console=True

    #Disable uplink port from two interconnect & verify traffic
    ${resp}    Update IC Port    ${interconnect_nitro[1]}    ${downlink_ports[1]}    ${ic_disable_body_downlink[1]}
    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${downlink_ports}    ${disable_status}
    Sleep   10min

    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_disable_downlink2}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '100%'  Fail    ELSE  Log    \npinging happend with 100loss percentage    console=True
    Log    Ip is not pinging    console=True

Enable downlink ports & Verify traffic
    [Documentation]    Enable downlink ports & Verify traffic
    Convert to String    ${interconnect_nitro}
    ${ic_len} =    Get Length    ${interconnect_nitro}
    :FOR    ${x}    IN RANGE    ${ic_len}
    \    ${resp}    Update IC Port    ${interconnect_nitro[${x}]}    ${downlink_ports[${x}]}    ${ic_enable_body_downlink[${x}]}
    \    Wait Until Keyword Succeeds   10 min    10s    Get Port Status    ${interconnect_nitro}    ${downlink_ports}    ${enable_status}
    \    Sleep   3min

    \    ${ret1} =    Ping Server IP    ${number}    ${Team_Ip}    ${ping_enable_downlink[${x}]}    ${flag}    ${Ping_Lost}
    \    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \npinging happend with 0loss percentage    console=True
    \    Log    successfully pinged ip    console=True



######################################################## Blade server Efuse  #################################################
EfuseOn Blade servers
    [Documentation]    EfuseOn Blade servers
    Log    \n\nEfussing Blade servers    console=True
    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse Blade   ${Action[0]}     ${Bladeserver[0]}
    Sleep    500
    Log    \n\nThe Blade server ${Bladebay} is Effused    console=True
    ${ret1} =    Ping Server IP    ${number}    ${Team_ip}    ${bladeserverefuseon}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '100%'  Fail   ELSE  Log    \n 0 percent packet loss is observed during Blade server Effuseon    console=True

EfuseOff Blade server
    [Documentation]    EfuseOff Blade server
    Log    \n\nEfussingoff Blade servers    console=True
    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse Blade   ${Action[1]}     ${Bladeserver[0]}
    Sleep    600
    Log    \n\nThe Blade server ${Bladebay} is Effused    console=True
    ${team_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${Team_Ip}    ${team_ip}
    log    \n pinging started    console=True
    ${ret1} =    Ping Server IP    ${number}    ${Team_ip}    ${bladeserverefuseoff}    ${flag}    ${Ping_Lost}
    Run Keyword If  '${ret1}' != '0%'  Fail    ELSE  Log    \n 0 percent packet loss is observed during Blade server Efuseoff    console=True
    Sleep    300

Delete Teaming
    [Documentation]    Delete Teaming
    Delete Windows Teaming    ${Team_ip[0]}    ${windows_server_details}    ${detlete_team_cmd0}
    Sleep    5min

Delete Server profile
    [Documentation]    Delete Server profile
    Power off ALL Servers
    Remove All Server Profiles

###############################################################################################################################
***Keywords***
Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    Log    \nstdout is ${ilo_details}    console=True
    ${serverip_List}=   Create List
    ${serverip_List1}=   Create List
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log    \nstdout is ${stdout}    console=True
    ${cmd_output}=    Get Regexp Matches    ${stdout}    Ip=172\\.\\d+\\.\\d+\\.\\d+
    Log    \nstdout is ${cmd_output}    console=True
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    Log    ip is ${ip_lists}    console=True
    \    Append To List   ${ip_list_new}    ${ip_lists}
    Log    \n IP's are is ${ip_list_new}    console=True
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}

Ping Server IP
    [Documentation]    Pinging Server IP
    [Arguments]         ${number}    ${serverip_List1_global}    ${ping_file}    ${flag}    ${Ping_Lost}
    ${l} =    Get Length    ${serverip_List1_global}
    Set Global Variable    ${iplength}    ${l}
    Log    \n pinging started    console=True
    :FOR    ${x}    IN RANGE    0   ${iplength}
    \    startthread    ${number}    ${serverip_List1_global[${x}]}    ${ping_file[${x}]}    ${flag}
    \    Sleep    30
    \    ${contents}=    OperatingSystem.Get File    ${ping_file[${x}]}
    \    ${Lines}=    Get Lines Containing String    ${contents}    ${Ping_Lost}
    \    Log    \ncontents are ${Lines}    console=True
    \    ${match}   ${ret1}    Should Match Regexp    ${Lines}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    \    Log    ${ret1}    console=True
    [Return]    ${ret1}

Get Profile Details
    [Documentation]    Get Profile Details
    [Arguments]                  ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${y} =    Set Variable    ${resp['members'][${x}]['connectionSettings']}
    \   ${mac_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get Mac address Of Server Profile    ${y['connections']}
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]            ${mac_address}

Get Mac address Of Server Profile
    [Documentation]    Get Mac address Of Server Profile
    [Arguments]                  ${connections}
    ${mac_address} =    Create List
    ${connection_length} =    Get Length    ${connections}
    :FOR    ${x}    IN RANGE    ${connection_length}
    \   Append To List   ${mac_address}    ${connections[${x}]['mac']}
    [return]            ${mac_address}

Get Mac Address from server
    [Documentation]    Get Mac Address from server
    [Arguments]         ${IP}    ${Powershell_get_mac}
    Log    \nLogged in to serverssss ${IP} ${Powershell_get_mac}    console=True
    Telnet.Open Connection     ${IP}     prompt=>     timeout=30s
    Sleep    5sec
    Telnet.Write    a
    ${login}    Telnet.Login               ${windows_server_details['username']}    ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log    \nLogged in to serverssss    console=True
    Log    \nLogged in to server    console=True
    Sleep    10sec
    ${out}    Telnet.Read
    Telnet.Write    Powershell
    Sleep    5sec
    Telnet.Write    ${Powershell_get_mac}
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${stdout}

Create Windows Teaming
    [Documentation]    Create Windows Teaming
    [Arguments]         ${server_ip}    ${windows_server_details}    ${team_cmd}
    Telnet.Open Connection     ${server_ip}     prompt=>     timeout=20s
    Log      \nSuccessfully opened connection to the server    console=True
    Telnet.Write    a
    ${login}    Telnet.Login               ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log    \nSuccessfully logged into the server    console=True
    Sleep    10sec
    Telnet.Write    powershell
    Log      \n${team_cmd}    console=True
    Telnet.Write    ${team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    Telnet.Close Connection
    Telnet.Close All Connections
    Log    \nteaming completed    console=True

Create Teaming windows
    [Documentation]    Create Teaming windows
    [Arguments]         ${adapter_name_1}   ${adapter_name_2}    ${Powershell_get_mac1}    ${windows_server_details}    ${serverip_List1_global[1]}
    ${tmp}    Remove Whitespace   ${adapter_name_1}
    ${tmp1}    Remove Whitespace   ${adapter_name_2}
    ${replaced_cmd1} =  Replace String Using Regexp    ${Powershell_get_mac1}    pppp    ${tmp}
    Log    \nstrafter strip is${tmp}    console=True
    Log    \nreplaced_cmd1 is${replaced_cmd1}    console=True
    ${replaced_cmd2} =  Replace String Using Regexp    ${replaced_cmd1}    qqq    ${tmp1}
    Log    \nstr is${replaced_cmd2}    console=True
    Create Windows Teaming   ${serverip_List1_global[1]}    ${windows_server_details}    ${replaced_cmd2}

Get Server profile Alerts
    [Documentation]    Get Server profile Alerts
    ${y} =    Set Variable    0
    ${Alert_msg} =    Create List
    ${resp} =    Fusion Api Get Alerts   /rest/alerts?filter="alertState EQ 'Active'"
    ${mem_resp} =    Get From Dictionary    ${resp}    members
    ${len} =     Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0    ${len}
    \   Run Keyword If  '${mem_resp[${x}]['alertTypeID']}' !='crm.connectionStateChange'    Continue For Loop
    \   ${desc}=    Get From Dictionary    ${mem_resp[${x}]}    description
    \   Log    description'${desc}'    console=True
    \   ${match}   ${status}    Should Match Regexp    ${desc}    (Connection\\s+on\\s+downlink\\s+port\\s+\\d+\\,.*LAG\\d+.)
    \  Append To List    ${Alert_msg}    ${desc}
    \  ${y} =    Evaluate    ${y} + 1
    \   Log    ${status}    console=True
    Log    ${Alert_msg}    console=True
    [Return]    ${Alert_msg}

Delete Windows Teaming
    [Documentation]    Delete Windows Teaming
    [Arguments]         ${team_ip}    ${windows_server_details}    ${detlete_team_cmd}
    Telnet.Open Connection     ${team_ip}     prompt=>     timeout=20s
    Log    \nSuccessfully opened connection to the server   console=True
    Telnet.Write    a
    ${login}    Telnet.Login    ${windows_server_details['username']}     ${windows_server_details['password']}    login_prompt=login:    password_prompt=password:
    Log    \nSuccessfully logged into the server    console=True
    Sleep    10sec
    Telnet.Write    powershell
    Log    \n${detlete_team_cmd}    console=True
    Telnet.Write    ${detlete_team_cmd}
    Sleep    30sec
    Telnet.Write    y
    Sleep    30sec
    ${stdout} =  Telnet.Read
    Log    \nout is ${stdout}    console=True
    Telnet.Close Connection
    Telnet.Close All Connections
    Log    \nteaming deleted    console=True

Clean OV
    [Documentation]         Cleans the appliance
    Log    \nCleaning the OV    console=True
    Power off ALL Servers
    Remove All Server Profiles
    Remove All LEs
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Server to server ping
    [Documentation]    Server to server ping
    [Arguments]    ${windows_server_ip}    ${windows_server_cred}    ${linux_server_ip}
    Telnet.Open Connection     ${windows_server_ip}     prompt=>     timeout=20s
    Log    \nSuccessfully opened connection to the server    console=True
    sleep    10sec
    Telnet.Write    a
    Sleep    5sec
    ${login}    Telnet.Login    ${windows_server_cred['username']}     ${windows_server_cred['password']}    login_prompt=login:    password_prompt=password:
    Log    \nSuccessfully logged into the server    console=True
    Sleep    15sec
    Telnet.Write    ping ${linux_server_ip}
    Sleep    15s
    ${Output}=    Telnet.Read
    Log    ${Output}    console=True
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${Output}

Get Port Status
    [Documentation]    Get Port Status
    [Arguments]     ${interconnects}    ${uplink_preferred_port}    ${Linked_Unlinked}
    ${ic_ports} =    Create List
    ${len}    Get Length    ${interconnects}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${ic}    Get IC URI    ${interconnects[${x}]}
    \    ${ic_resp}    Fusion Api Get Interconnect Ports    ${ic}
    \    Append To List    ${ic_ports}    ${ic_resp}
    #Log    ${ic_resp}    console=True
    ${variable}=    set variable    ${empty}
    ${y} =    Set Variable    0
    ${len} =    Get Length  ${ic_resp['members']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ic_ports[${y}]['members'][${x}]['portName']}' == '${uplink_preferred_port[${y}]}' and '${ic_ports[${y}]['members'][${x}]['portStatus']}' == '${Linked_Unlinked}'    Set Global Variable    ${variable}    True
    Log    ${variable}    console=True
    Run Keyword unless  '${variable}' == 'True'   Fail    Conditions didn't match
    ${y} =    Evaluate    ${y} + 1
