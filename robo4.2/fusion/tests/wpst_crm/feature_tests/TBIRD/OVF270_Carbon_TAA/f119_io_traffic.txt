*** Settings ***
Documentation        Feature Tests: IO Traffic Cases

Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Library                   OperatingSystem
Library                   Process
Library                   ServerOperations
Library                   Dialogs
Variables                 data_variables.py

Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt

*** Variables ***

${module_file_path1}      ${CURDIR}\\PerformIO.py
${module_file_path2}      ${CURDIR}\\FetchIO.py

*** Test Cases ***

F119_IO03_20513 IO3 Verify IO traffic is not interrupted during failover
    [Documentation]    IO.03 Verify IO traffic is not interrupted during failover
	Set Log Level    TRACE
    Fusion api login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable     ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   360s
    Log to Console and Logfile   \nVerifying IO traffic\n
    #Running IO Traffic

    Run IO Traffic
    sleep   160

    #Poweroff IC1
    ${ic_uri} =    Get IC URI    ${INTERCONNECTS[0]}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}

    ${resp}     fusion_api_patch_interconnect   body=${body}    uri=${ic_uri}
    ${task} =   Wait for Task   ${resp}   1min    10s
    Validate Response    ${task}    ${valDict}
    sleep   120s
    Log to console and logfile  \nVerify ${INTERCONNECTS[0]}} is off
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${powerState} =     Get From Dictionary     ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    Off   msg=Unable to Power off ${INTERCONNECTS[0]}
    Log to console and logfile   \n Powered off ${INTERCONNECTS[0]}
    Sleep   60s

    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic
    Run IO Traffic
    Sleep   120s

    #PowerON IC1
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    ${task} =   Wait for Task   ${resp}   1min    10s
    Validate Response    ${task}    ${valDict}
    sleep   120s
    Log to console and logfile  \nVerify ${INTERCONNECTS[0]} is On
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${powerState} =     Get From Dictionary     ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    On   msg=Unable to Power On ${INTERCONNECTS[0]}
    Log to console and logfile   \n Powered On ${INTERCONNECTS[0]}

    Sleep   60s

    #Check IC1 configured
    Wait Until Keyword Succeeds    10 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${INTERCONNECTS[0]} is in Configured state.

    Sleep   120s

    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic

    Run IO Traffic

    Sleep   160s


    #Disable Uplink of IC4
    Log to Console and Logfile   \nDisabling Uplink ${Linked_Uplink_port[0]} of ${INTERCONNECTS[0]}\n
    Change Uplink Port Status   ${Linked_Uplink_port[0]}    ${INTERCONNECTS[0]}     false
    Sleep   60s
    Sleep   60s

    Log to Console and Logfile   \nVerifying IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60


    Log to Console and Logfile   \nReverting back the port status\n
    Change Uplink Port Status   ${Linked_Uplink_port[0]}    ${INTERCONNECTS[0]}     true
    sleep    120s

F119_IO_20520_20521 Verify port statistics on the uplink and downlink ports are incrementing while passing IO traffic
    [Documentation]    Port statistics on counters
    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable     ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}

    sleep   400s

    ${ic_uri} =    Get IC URI    ${INTERCONNECTS[0]}
    Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Uplink_port[0]}    ${INTERCONNECTS[0]}     Uplink
    Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Downlink_port[2]}  ${INTERCONNECTS[0]}     Downlink


    ## F119_IO_20521_IO.8 ##
    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic
    Log to console    \n running IO traffic \n
    Run IO Traffic

    Sleep   60s

    ${body} =   Create Dictionary
    Log to Console and Logfile    \nResetting Interconnect Port Counters\n
    ${resp} =   Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg=Clearing Interconnect Ports of ${INTERCONNECTS[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS[0]} cleared successfully
    Sleep   60s
    ${ports} =    Fusion Api Get Interconnect Ports    ${ic_uri}

    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${UpTxBytes}    ${UpRxBytes}    Get Tx Rx Bytes for a port    ${ic_uri}    ${resp['members'][0]['ports'][12]['portName']}
    Log to console and logfile    \nUpTx-${UpTxBytes}\nUpRx-${UpRxBytes}\n
    ${DownTxBytes}    ${DownRxBytes}    Get Tx Rx Bytes for a port     ${ic_uri}    ${resp['members'][0]['ports'][0]['portName']}
    Log to console and logfile    \nDownTx-${DownTxBytes}\nDownRx-${DownRxBytes}\n

    Log to console and logfile    \nChecking whether Counters are Reset\n
    Should be True    ${UpTxBytes} < 2000 or ${UpRxBytes} < 2000    msg=\nUplink port counters didn't Reset Properly\n
    Should be True    ${DownTxBytes} < 1000 or ${DownRxBytes} < 1000    msg=\nDownlink port counters didn't Reset Properly\n
    Log to console and logfile    \nUplink and Downlink Port counters Reset successfully\n

    ## F119_IO_20520_IO.7 ##
    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic
    Log to console    \n running IO traffic \n
    Run IO Traffic

    Sleep   160s

F119_LINK05_20470 LINK05 Verify failover operates as expected with disable ports
    [Documentation]    Verify failover for disabled ports

    Clear Profile Configurations

    ${lig_body}    Build LIG body    ${ligs['lig_failover']}
    Edit LIG and Perform an Update From Group    ${lig_body}

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable    ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   260s


    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60

    Log to Console and Logfile   \nDisabling Uplink ${Linked_Uplink_port[0]} of ${interconnects[0]}\n
    Change Uplink Port Status   ${Linked_Uplink_port[0]}    ${interconnects[0]}     false
    sleep   5 min

    Log to Console and Logfile   \nVerifying IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60


    Log to Console and Logfile   \nReverting back the port status\n
    Change Uplink Port Status   ${Linked_Uplink_port[0]}    ${interconnects[0]}     true



F119_IO09_20523 IO9 Verify no errors are reported while passing IO traffic with 16Gb Electron mezz card in bladeserver
    [Documentation]    Verify no errors are reported while passing IO traffic with 16Gb Electron mezz card in bladeserver
    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable    ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   260s

    Sleep   60s

    Log to Console and Logfile   \nVerifying IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60



F119_IO11 _20516 IO11 Verify IO traffic is not interrupted when Oneview is restarted
    [Documentation]    Verify IO traffic is not interrupted when Oneview is restarted

    Set Log Level      TRACE
    Fusion api login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable    ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   260s


    Log to Console and Logfile   \nStarting IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60


    ${resp}    Fusion Api Appliance Shutdown    REBOOT
    Log to console and logfile    ${resp}
    sleep   90s
    Wait For Appliance To Become Pingable    ${APPLIANCE_IP}    30 minutes    30 s

	Wait For Appliance To Be Ready    ${APPLIANCE_IP}    40 min    30 s


    sleep    2 min

	Sleep   560s

    Log to Console and Logfile   \nVerifying IO traffic\n
    # Running IO Traffic

    Run IO Traffic
    sleep   60

    Sleep  5 min


F119_IO4_20515 IO4 Verify IO traffic is not interrupted with hotplug of Carbon module
    [Documentation]    Verify IO traffic is not interrupted when Oneview is restarted

    Fusion api login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable     ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   300s


    Log to Console and Logfile   \nStarting IO traffic\n
    Run IO Traffic

    Sleep   120s



    Log to Console and Logfile   \nDisabling Uplink of ${INTERCONNECTS[1]}\n
    Change Uplink Port Status    ${Linked_Uplink_port[1]}    ${INTERCONNECTS[1]}     false

    Sleep   60s

    #Efuseoff IC1
    Log to console and logfile  \n\nRemoving and adding back Carbon ${INTERCONNECTS[0]} module
    Get EM IP
    Get EM Token    ${ENC1}
    EFuse ICM    EFuseReset    ${icbays[0]}
    ${ic_uri}    Get IC URI    ${INTERCONNECTS[0]}
    #Check IC1 is Configured
    Wait Until Keyword Succeeds    5 min   15s    IC reached state    ${ic_uri}    Absent
    Log to console and logfile  \n\nThe IC module ${INTERCONNECTS[0]} is in Absent state
    Sleep   300s

    Sleep   1000s
    Wait Until Keyword Succeeds    5 min   15s    IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${INTERCONNECTS[0]} Removed and Added back Successfully!! and is in Configured state

    Sleep   120s

    Log to Console and Logfile   \nStarting IO traffic\n
    Run IO Traffic

    Sleep   160s

    Log to Console and Logfile   \nReverting back the Uplink port status of ${INTERCONNECTS[1]}\n
    Change Uplink Port Status   ${Linked_Uplink_port[1]}    ${INTERCONNECTS[1]}     true

F119_LINK52_20472 Verify failover operates as expected when Carbon module is removed
    [Documentation]    Verify IO traffic is not interrupted when Carbon module is removed

    Clear Profile Configurations

    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable     ${server_profiles3}
    Power on server    ${server_profiles3[0]['serverHardwareUri']}
    sleep   300s


    Log to Console and Logfile   \nStarting IO traffic\n
    Run IO Traffic

    Sleep   60s

    Log to Console and Logfile   \nVerifying IO traffic\n
    Run IO Traffic
    #Efuseoff IC1
    Log to console and logfile  \n\nRemoving and adding back Carbon ${interconnects[0]} module
    Get EM IP
    Get EM Token    ${ENC1}
    EFuse ICM    EFuseReset    ${icbays[0]}
    #Check if IC1 is Absent
    ${ic_uri}    Get IC URI    ${interconnects[0]}
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Absent
    Log to console and logfile  \n\nThe IC module ${interconnects[0]} is in Absent state

    Log to Console and Logfile   \nStarting IO traffic\n
    Run IO Traffic

    Sleep   600s

    Log to Console and Logfile   \nVerifying IO traffic\n
    Run IO Traffic
    Sleep    1300s
    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Configured
    Log to console and logfile  \n\nThe IC module ${interconnects[0]} is in Configured state



*** Keywords ***
Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level      TRACE
    ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Clean OV
    Run Keyword If  ${ranges} is not ${null}                Add Ranges From variable    ${ranges}
    ${fc_networks} =    Get Variable Value  ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    ${body} =   Build LIG body      ${ligs['lig1']}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    Add Enclosure Group from variable   ${enc_groups['enc_group1']}
    Sleep   10s
    Add Logical Enclosure from variable   ${les['le1']}
   :FOR     ${IC}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${IC}
    \   Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
     \   ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
     \  ${state}=     Get From Dictionary     ${resp['members'][0]}   state
     \  Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
     \   ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users


Clear Profile Configurations
    [Documentation]    Cleans Server Profile configurations
    Log to console and logfile  \nCleaning the Server Profile configurations
    Power off ALL Servers
    Remove All Server Profiles

Edit LIG and Perform an Update From Group
    [Documentation]    Edit LIG and Perform an Update From Group
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}
    # Get info from the current LIG to apply edits to
    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group   ${le_uri}    15 min      15 s

Get LE URI
    [Documentation]    Edit LIG and Perform an Update From Group
    [Arguments]     ${le}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${le}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Perform an Update From Group
    [Documentation]    Perform an Update From Group
    [Arguments]     ${leuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update Logical Enclosure from Group   uri=${le_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    Validate Response    ${task}    ${valDict}

Get Server iLO IP
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${bay}
    ${server_info}=    Get Server Info    ${bay}
    ${ilo_ip}=    Get Server iLO Address    ${server_info}
    [Return]    ${ilo_ip}

Get Server iLO Address
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${server_bay_info}
    ${mpHostInfo}=    Get From Dictionary    ${server_bay_info}    mpHostInfo
    ${mpIpAddresses} =    Get From Dictionary    ${mpHostInfo}    mpIpAddresses
    ${l} =  Get Length  ${mpIpAddresses}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${mpIpAddresses}    ${x}
    \    ${type}=    Get From Dictionary    ${enc}    type
    \    Run Keyword If    '${type}'!='DHCP'    Continue For Loop
    \    ${address}=    Get From Dictionary     ${enc}    address
    [Return]    ${address}

Verify Status of Ports from IC
    [Documentation]    Verify Status of Ports from IC
    [Arguments]    ${port_no}   ${IC}   ${portType}
    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${y}    IN RANGE    0  ${len}
    \   Run Keyword If    '${ports[${y}]['portName']}' != '${port_no}' or '${ports[${y}]['portType']}' != '${portType}'     Continue For Loop
    \   Should Match Regexp     ${ports[${y}]['portStatus']}    Linked

Change Uplink Port Status
    [Documentation]    Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} =     Get IC URI      ${interconnect}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} =     Get IC URI      ${interconnect}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    Log to console    \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
    Log to console  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     500s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!

Get Tx Rx Bytes for a port
    [Documentation]    Get Tx Rx Bytes for a port
    [Arguments]    ${ic_uri}     ${portname}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${portname}
    ${TxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesTx
    ${RxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesRx
    [Return]    ${TxBytes}    ${RxBytes}

Wait For Appliance To Be Ready
    [Documentation]    Waits for an appliance reach a the ready state
    [Arguments]     ${appliance}    ${timeout}=20 min   ${interval}=30s
    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Appliance Reached Ready State    ${appliance}

Run IO Traffic
    [Documentation]    Get Tx Rx Bytes for a port

    # Getting the ILO IP of the  server

    ${iloip} =     Get Server iLO IP    ${server_bay_3}
    Log to Console      ${iloip}
    Set To Dictionary    ${ilo_details}    ilo_ip   ${iloip}

    # Starting the IO traffic for 60sec

    Log to Console and Logfile   \nStarting IO traffic\n
    ${cmd}    ${out_file}    ${msg}    executes    ${linux_details}    ${ilo_details}    ${server_details}    ${module_file_path1}    "${diskspd_cmd_60s}"
    Run keyword unless  '${msg}'== 'PASS'   Fail    "Unable to Start the IO Traffic"    Log To Console   \nThe IO Traffic Details are as follows:\n
    Log to Console and Logfile   \nStarted IO traffic\nCommand--${cmd}\nOutputFile--${out_file}\n

    Sleep   60s

    Log to Console and Logfile   \nVerifying IO traffic\n
    ${cmd}    ${exeout}    ${msg}    ioresults    ${linux_details}    ${ilo_details}    ${server_details}    ${module_file_path2}    "${out_file}"
    Run keyword unless  '${msg}'== 'PASS'   Fail    "Unable to Finish the IO Traffic"   Log To Console   \nThe IO Traffic Details are as follows:\n
    Log to Console and Logfile   \nIO traffic Success!!\nCommand--${cmd}\nOutput--${exeout}\n

Appliance Reached Ready State
    [Documentation]    Appliance Reached Ready State
    [Arguments]     ${appliance}
    ${state} =  Fusion Api Get Resource     /controller-state.json
    Log to console and logfile  -Appliance state: ${state['state']}
    Should Match Regexp    ${state['state']}    ((?i)OK)

Get Profiles
    [Documentation]    Get Profiles
    ${resp} =             fusion api get server profiles
    ${profiles} =         Create List
    ${profile_list} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${profile_list}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${profile} =     Get From List   ${profile_list}    ${x}
    \   ${profile_details} =    Create Dictionary     name=${profile['name']}
    \   ...                                           uri=${profile['uri']}
    \   ...                                           state=${profile['state']}
    \   ...                                           status=${profile['status']}
    \   ...                                           serverHardwareUri=${profile['serverHardwareUri']}
    \   append to list    ${profiles}   ${profile_details}
    [Return]    ${profiles}

Unassign profiles
    [Documentation]    Unassign profiles
    [Arguments]     ${profiles}
    Set Log Level   TRACE
    Log to console   \nUnassigning profiles....
    :FOR    ${p}    IN    @{profiles}
    \   ${profile} =    Fusion Api Get Resource    uri=${p['uri']}
    \   set to dictionary    ${profile}   serverHardwareUri=${None}
    \   set to dictionary    ${profile}   enclosureBay=${None}
    \   set to dictionary    ${profile}   enclosureUri=${None}
    \   remove from dictionary    ${profile}   status_code    headers
    \   ${resp} =   fusion api edit server profile    uri=${p['uri']}   body=${profile}
    \   ${task} =   Wait For Task   ${resp}     6m   15s
    ${valDict} =        Create Dictionary   status_code=${200}
    ...                                     taskState=Completed
    Validate Response   ${task} ${valDict}

Re-assign profiles
    [Documentation]    Re-assign profiles
    [Arguments]     ${profiles}
    Set Log Level   TRACE
    Log to console   \nRe-assigning profiles....
    :FOR    ${p}    IN    @{profiles}
    \   ${profile} =    Fusion Api Get Resource    uri=${p['uri']}
    \   set to dictionary    ${profile}   serverHardwareUri=${p['serverHardwareUri']}
    \   remove from dictionary    ${profile}   status_code    headers
    \   ${resp} =   fusion api edit server profile    uri=${p['uri']}   body=${profile}
    \   ${task} =   Wait For Task   ${resp}     6m   15s
    ${valDict} =        Create Dictionary   status_code=${200}
    ...                                     taskState=Completed
    Validate Response   ${task} ${valDict}


Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]

    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users