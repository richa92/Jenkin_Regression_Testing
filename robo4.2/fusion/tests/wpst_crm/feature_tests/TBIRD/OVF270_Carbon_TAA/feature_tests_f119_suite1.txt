*** Settings ***
Documentation        Feature Tests: Suite1
Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Library                   OperatingSystem
Library                   Process
Library                   Dialogs
Library                   ServerOperations
Library                   decrypt_dump.py
Variables                 data_variables.py

Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt

*** Variables ***
${SWITCH_IP}                  15.186.24.76          # FC Switch IP Address
${LE_DUMP_FILE}            ${CURDIR}\\support_dump\\fusion_le_supportdump.sdmp
${dump_file_path}          ${CURDIR}\\support_dump
${decryptor_path}          ${CURDIR}\\Decryptor

***Test cases***
F119_Misc1_20987 - MISC1 Verify the Carbon module shows up in support dump for LE, LI
    [Documentation]    MISC.1 Verify the Carbon module shows up in support dump for LE, LI
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}


    Log to console and logfile    \n Checking if the ICs are in configured state and getting each ICs serial Numbers
    Create Directory    ${dump_file_path}
    ${SNlist}=    Create List
    :FOR    ${name}    IN    @{INTERCONNECTS}
    \    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${name}'"
    \    ${state}=    Get From Dictionary    ${IC['members'][0]}    state
    \    Run Keyword If    '${state}' != 'Configured'    fail    msg="The IC module ${name} is not in configured state"
    \    ...     ELSE   Log to console and logfile    \n The IC modules ${name} is in configured state
    \    Run Keyword If    '${IC['members'][0]['name']}' != '${name}'    Log to console and logfile    "Name of IC is not equal"
    \    ${sn}=     Get From Dictionary    ${IC['members'][0]}    serialNumber
    \    Append To List    ${SNlist}    ${sn}
    ${IC1}=    Get From List    ${SNlist}    0
    ${IC4}=    Get From List    ${SNlist}    1
    Log to console and logfile    \n-Getting the LE id
    ${LI_name}=    Get Variable Value    ${LI}
    ${le_uri}=    Get LE URI    ${LE1}
    ${logicalEnclosureId}=    Fetch From Right    ${le_uri}    /

    Log to console and logfile    \n-Creating support dump for the LE
    ${Response}=    Fusion Api Get Logical Enclosure Support Dump    body=${LE_SupportDump_Payload}    id=${logicalEnclosureId}
    Should Be Equal as Strings    ${Response['status_code']}    202    msg=Failed to initiate Create Enclosure Support Dump.
    Log to console and logfile    \n-Waiting for dump creation task to complete
    ${task} =    Wait For Task    ${Response}    15min    1min
    Should Be Equal as Strings    ${task['status_code']}    200    msg=Failed to Create Enclosure Support Dump.
    Log to console and logfile    \n-Support dump created successfully
    Empty Directory    ${dump_file_path}
    ${supportDumpUri}=    Get From Dictionary    ${task['associatedResource']}    resourceUri
    ${Response1}=    Fusion Api Download Support Dump    uri=${supportDumpUri}    localfile=${LE_DUMP_FILE}
    Should Be Equal as Strings    ${Response1['status_code']}    200    msg=Failed to Download Enclosure Support Dump.
    Log to console and logfile    \n-Support Dump downloaded successfully

    Log to console and logfile    \n-Decrypting ,extracting the downloaded dump file and verifying if the Carbon module is present
    Decrypt and extract the dump file    ${dump_file_path}    ${decryptor_path}
    :FOR    ${x}    IN    @{icbays}
    \    OperatingSystem.File Should Exist    ${CURDIR}/support_dump/logical-enclosure/var/tmp/le-support-dumps/li-0/${LI_name}/encl000000${ENC1}/bay${x}/VCFC4${IC${x}}*
    ...    msg=The Carbon module VCFC4${IC${x}} is not found in LE Dump
    \    Log to console and logfile    \n- Verified Carbon Module VCFC4${IC${x}} is showing up in LE support dump


F119_SP3_20634 -Create Server Profile with 2 FC networks, each port speed set to Auto
    [Documentation]    SP.3 Create Server Profile with 2 FC networks,each port speed set to Auto.
    Clear Profile Configurations
    Log to console and logfile    \n-Creating 2 Server Profiles
    :FOR    ${SP}    IN   @{server_profile_20634}
    \    Add Server Profiles from variable     ${SP}
    ${connlist}=    Create List
    :FOR    ${name}    IN    @{PROFILES}
    \   ${resp} =    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \   Run Keyword If    ${resp['count']} != 1    fail    msg="Not found server profile ${name} after creation"
    \   ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    ${resp1}=    Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2}=    Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"
    ${connections_list}=    Get From Dictionary    ${resp1['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR    ${x}    IN RANGE   0   ${len}
    \    Run Keyword If     '${connections_list[${x}]['requestedMbps']}' != 'Auto'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE1}"
    ${connections_list}=    Get From Dictionary    ${resp2['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['requestedMbps']}' != 'Auto'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE2}"
    Log to console and logfile    \nVerified each downlink is having Auto speed in both SPs

F119_SP4_20545 -Create Server Profile with 2 FC networks, each port speed set to 16Gb
    [Documentation]    SP.4 Create Server Profile with 2 FC networks,each port speed set to 16Gb.
	Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profile
    :FOR    ${SP}  IN   @{multi_profile}
    \    Add Server Profiles from variable    ${SP}
    ${connlist}=    Create List
    :FOR    ${name}   IN    @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \   Run Keyword If    ${resp['count']} != 1    fail    msg="Not found server profile ${name} after creation"
    \   ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    ${resp1}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE1}'"
    ${resp2}=   Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE2}'"
    ${connections_list}=    Get From Dictionary    ${resp1['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If     '${connections_list[${x}]['requestedMbps']}' != '16000'    fail    msg="Downlinks are not having 16G speed in ${PROFILE1}"
    ${connections_list}=    Get From Dictionary    ${resp2['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['requestedMbps']}' != '16000'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE2}"
    Log to console and logfile    \nVerified each downlink is having 16G speed in both SPs


F119_SP1_20635 -Create Server Profile with FC network & Checking the error message in SP on deletion of Fc Network
    [Documentation]    SP.1 Create Server Profile with FC network.
    Set Log Level    TRACE
    Clear Profile Configurations
    Log to console and logfile    \nCreating an FC network
    ${fc_networks}=    Get Variable Value    ${fc_20635}
    Run Keyword If    ${fc_networks} is not ${null}    Add FC Networks from variable    ${fc_networks}
    ${lig_body}=    Build LIG body    ${ligs['lig20635']}
    Edit LIG and Perform an Update From Group    ${lig_body}
    :FOR    ${SP}  IN  @{server_profiles_20635}
    \    Add Server Profiles from variable    ${SP}
    Log to console and logfile    \n-Removing FC Network
    ${fc_name}=    Get From Dictionary    ${fc_20635[0]}    name
    ${uri}=    Get FC Uri    ${fc_name}
    ${resp2}=    Fusion Api Delete FC Network    uri=${uri}
    Run Keyword If    ${resp2['status_code']} !=202    fail    msg=${fc_name} Deletion Failed. \n ErrorCode:${resp['errorCode']}\nMessage ${resp['message']}
    ${task}=    Wait For Task    ${resp2}    60s    2s
    Run Keyword If    '${task['taskState']}' !='Completed'    or    '${task['status_code']}' !='200'    fail    msg=${fc_name} Deletion Failed. \n ErrorCode:${task[taskErrors][0][errorCode]}\n :Message ${task[taskErrors][0][errorCode]}
    ...    ELSE    Log to console and logfile    \n\n${fc_name} Deleted Successfully !!

    Log to console and logfile    \n-Checking the error message in SP on deletion of Fc Network.
    ${fc_name}=    Get From Dictionary    ${fc_20635[0]}    name
	${Alert_msg}=    Create List
    ${resp}=    Fusion Api Get Alerts
    ${mem_resp}=    Get From Dictionary    ${resp}    members
    ${len}=    Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0    ${len}
    \    Run Keyword If    '${mem_resp[${x}]['physicalResourceType']}' !='server-profiles'    Continue For Loop
    \    ${desc}=    Get From Dictionary    ${mem_resp[${x}]}    description
    \    Append To List    ${Alert_msg}    ${desc}
    \    ${cmd_output}=    Get Regexp Matches    ${desc}    An error has occurred on connection 1.\\s+Network FC_20635 assigned to this connection was deleted.
	\    ${Count11}=    Get Length    ${cmd_output}
	\	 Run Keyword If    '${Count11}' == '1'    Append To List    ${Alert_msg}    ${cmd_output}    ELSE    log to console    \n-Verified the alerts msg is not same
    ${Count2}=    Get Length    ${Alert_msg}
    Log to console and logfile    ${Count2}
    Run Keyword If    '${Count_2}' != '4'    Fail    ELSE    log to console    \n-Verified the alerts msg in both the server profiles
    Log to console and logfile    ${Alert_msg}
    ${Count2}=    Get Length    ${Alert_msg}
    Run Keyword If    '${Count_2}' != '4'    Fail    ELSE  log to console    \n-Verified the alerts msg in both the server profiles

F119_LINK01_20464 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    [Documentation]    LINK.01 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    Clear Profile Configurations
    Log to console and logfile    \n-Editing existing LIG and updating LI
    ${lig_body}=    Build LIG body    ${ligs['lig20464']}
    Edit LIG and Perform an Update From Group    ${lig_body}
    Log to console and logfile    \nCreating Server Profile with Connections having speed 16Gb and Auto.Power on the Server
    Add Server Profiles from variable    ${server_profile1}
    Power on server    ${server_profile1[0]['serverHardwareUri']}
    sleep    240s
    Log to console and logfile    \nVerifying the Downlink port linked status in IC and the speed set in SP
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[0]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If   '${resp['members'][0]['ports'][0]['portName']}' != '${Linked_Downlink_port[0]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][0]['portName']} is not in Linked state for bay${resp['members'][0]['ports'][0]['bayNumber']}
    \    ...    ELSE    Log to console and logfile    \n Downlink port ${resp['members'][0]['ports'][0]['portName']} is in Linked state for bay${resp['members'][0]['ports'][0]['bayNumber']}!!
    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE1}'"
    ${connections_list}=    Get From Dictionary    ${resp['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    'Auto'    msg="Downlink_1 is not having Auto speed"
    \        ...    ELSE IF    '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    '16000'    msg="Downlink_2 is not having 16Gb speed"
    Log to console and logfile    \nConnections are available for the speed set Auto and 16Gb

F119_LINK04_20467 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    [Documentation]    LINK.01 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    Clear Profile Configurations
    Log to console and logfile    \n-Editing existing LIG and updating LI
    ${lig_body}=    Build LIG body    ${ligs['lig20467']}
    Edit LIG and Perform an Update From Group    ${lig_body}
    Log to console and logfile    \nCreating 2 Server Profiles with Connections having speed 16Gb.Power on all the Servers
    :FOR   ${serverprofile}   IN   @{multi_profile}
    \    Add Server Profiles from variable    ${serverprofile}
    Power on ALL servers
    sleep   240s

    Log to console and logfile    \nVerifying the Linked Downlink ports in IC
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['portName']}' != '${Linked_Downlink_port[${x}]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is not in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}
    \    ...    ELSE    Log to console and logfile    \n Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}!!
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['portName']}' != '${Linked_Downlink_port[${x}]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is not in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}
    \    ...    ELSE    Log to console and logfile    \n Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}!!

    Log to console and logfile    \nVerifying the Port Speeds in Server profile
    :FOR    ${x}    IN RANGE    0  2
    \    ${y}=    Set Variable    0
    \    ${PROFILE}=    Get Variable Value    ${PROFILES[${x}]}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE}'"
    \    ${connections_list}=    Get From Dictionary    ${resp['members'][0]}    connections
    \    ${conn1_dlname}=    Get Variable Value    ${multi_profile[${x}][0]['connections'][${y}]['name']}
    \    Run Keyword If    '${connections_list[${y}]['name']}' != '${conn1_dlname}' or '${connections_list[${y}]['requestedMbps']}' != '16000'    msg=${conn1_dlname} is not having 16Gb speed for profile ${PROFILE}
    \    ...    ELSE    Log to console and logfile  \n${conn1_dlname} is having 16Gb speed for profile ${PROFILE}!!
    \    ${y}=    Evaluate    ${y} + 1
    \    ${conn2_dlname}=    Get Variable Value    ${multi_profile[${x}][0]['connections'][${y}]['name']}
    \    Run Keyword If    '${connections_list[${y}]['name']}' != '${conn2_dlname}' or '${connections_list[${y}]['requestedMbps']}' != '16000'    msg=${conn2_dlname} is not having 16Gb speed for profile ${PROFILE}
    \    ...    ELSE    Log to console and logfile  \n${conn2_dlname} is having 16Gb speed for profile ${PROFILE}!!

F119_SP2_20636 Create Server Profile with 2 FC networks with 1port from ICM in bay1 and 1 from bay4 and verify the status on SP
    [Documentation]    SP.2 Create Server Profile with 2 FC networks with 1port from ICM in bay1 and 1 from bay4.Verify link status in SP is ok
    Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profiles
    :FOR     ${SP}   IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    :FOR    ${name}    IN  @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \   Run Keyword If    ${resp['count']} !=1    fail    msg="Not found server profiles ${name} after creation"
    \   ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    \   ${SpLink}=    Get From Dictionary    ${resp['members'][0]}    status
    \   Run Keyword If    '${SpLink}' != 'OK'    fail    msg="Server Profile ${name} status is not OK
    \    ...    ELSE    Log to console and logfile    \n The status of server profile ${name} is verified as OK

    ${conn}=    Fusion Api Get Connections
    ${lcon}=    Get Length    ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \    ${constat}=    Get From Dictionary    ${conn['members'][${x}]}    status
    \  Run Keyword If    '${constat}' != 'OK'    fail    msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK

    Power on ALL servers
    sleep    200s
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE     Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}


F119_INTEROP05_20531 -Verify Carbon comes back online with no errors and links come back online when module is powered off then on
    [Documentation]    INTEROP.05 Verify Carbon comes back online with no errors and links come back online when module is powered off then on
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI

    # Check interconnect state is configured
    ${ic_list}=    Get ICs
    ${len_ic}=    Get Length    ${ic_list}
    Log to console and logfile    \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay}=    Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri}=    Get From Dictionary    ${ic_list[${x}]}    uri
    \    Log to console and logfile  \n\nChecking current state
    \    Wait Until Keyword Succeeds    10 min   15s    IC reached state    ${ic_list[${x}]['uri']}    Configured

    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    Power on ALL servers
    sleep    200s

    #Checking linked uplink/downlink port in interconnect
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}

    #Clear Alert Message
    ${del_resp}=    Fusion Api Delete Alert
    Run keyword unless    ${del_resp['status_code']}== 202    Fail    "Unable to Clear Alert Message"
    Log to console and logfile    \n\nAlert Message cleared Successfully

    #Power off interconnects
    :FOR     ${interconnect}    IN    @{INTERCONNECTS}
    \    ${ic_uri}=    Get IC URI    ${interconnect}
    \    ${body}=    Create Dictionary    op=replace
    \    ...                              path=/powerState
    \    ...                              value=Off
    \    ${body}=    Create list    ${body}
    \    ${resp}=    fusion api patch interconnect    body=${body}    uri=${ic_uri}
    \    ${task}=    Wait for Task    ${resp}    1min    10s
    \    Validate Response    ${task}    ${valDict}
    \    sleep    120s
    \    Log to console and logfile    \nVerify ${interconnect} is off
    \    Wait Until Keyword Succeeds    20 min    15s    Verify Interconnect Power State    ${interconnect}    Off
    \    Log to console and logfile    \n Powered off ${interconnect}
    Sleep    60s

    #Checking for the alert message in OV
    ${Alert_msg}=    Create List
    ${resp}=    Fusion Api Get Alerts
    ${mem_resp}=    Get From Dictionary    ${resp}    members
    ${len}=    Get Length    ${mem_resp}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If    '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    \    Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    \    ${replace}=    Remove String Using Regexp    ${mem_resp[${x}]['description']}  \n
    \    Run Keyword If    '${replace}' == 'Interconnect ${INTERCONNECTS[0]} has been powered off'    Append To List    ${Alert_msg}    ${replace}
    \    Run Keyword If    '${replace}' == 'Interconnect ${INTERCONNECTS[1]} has been powered off'    Append To List    ${Alert_msg}    ${replace}
    Log to console and logfile    \n Alert_msg ${Alert_msg}
    #${Count2}=    Get Length    ${Alert_msg}
    #Run Keyword If  '${Count_2}' != '2'  Fail    ELSE  log to console   \n-Verified two alerts msg


    #Clear Alert Message
    ${del_resp}=    Fusion Api Delete Alert
    Run keyword unless    ${del_resp['status_code']}== 202    Fail    "Unable to Clear Alert Message"
    Log to console and logfile    \n\nAlert Message cleared Successfully

    #Poweron interconnect
    Log to console and logfile    \n Power on interconnect
    :FOR    ${interconnect}    IN    @{INTERCONNECTS}
    \    ${ic_uri}=    Get IC URI    ${interconnect}
    \    ${body}=    Create Dictionary    op=replace
    \    ...                              path=/powerState
    \    ...                              value=On
    \    ${body}=    Create list    ${body}
    \    ${resp}=    fusion api patch interconnect    body=${body}    uri=${ic_uri}
    \    ${task}=    Wait for Task    ${resp}    1min    10s
    \    Validate Response    ${task}    ${valDict}
    \    sleep    120s
    \    Log to console and logfile    \nVerify ${interconnect} is On
    \    Wait Until Keyword Succeeds    30 min   15s    Verify Interconnect Power State     ${interconnect}    On
    \    Log to console and logfile    \n Powered on ${interconnect}
    Sleep    60s

    # Check interconnect state is configured
    ${ic_list}=    Get ICs
    ${len_ic}=    Get Length    ${ic_list}
    Log to console and logfile    \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_name}=    Get From Dictionary    ${ic_list[${x}]}    name
    \    ${ic_bay}=    Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri}=    Get From Dictionary    ${ic_list[${x}]}    uri
    \    Log to console and logfile    \n\nChecking current state
    \    Wait Until Keyword Succeeds    10 min   15s    IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Sleep    2min
    \    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ic_name}'"
    \    ${state}=    Get From Dictionary    ${IC['members'][0]}    state
    \    Run Keyword If    '${state}' != 'Configured'    fail    msg="The IC module ${ic_name} is not in configured state"
    \   ...    ELSE    Log to console and logfile    \n The IC module ${ic_name} is in configured state

    #Checking for the alert message in OV
    ${Alert_msg1}=    Create List
    ${resp}=    Fusion Api Get Alerts
    ${mem_resp}=    Get From Dictionary    ${resp}    members
    ${len}=    Get Length    ${mem_resp}
    :FOR    ${x}    IN RANGE    0    ${len}
    \   Run Keyword If    '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    \   Run Keyword If    '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'    Continue For Loop
    \   Append To List    ${Alert_msg1}    ${mem_resp[${x}]['description']}

    ${Count2}=    Get Length    ${Alert_msg1}
    Log to console and logfile    \n Alert_msg is ${Alert_msg1}
    #Should Be Equal As Numbers ${Count2}   4
    sleep    200s


    #Checking linked uplink/downlink port in interconnect
    :FOR    ${IC}    IN    @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}



F119_SP5_20581 Create Server Profile with 2 FC networks, each port speed set to 8Gb.Verify port speed
    [Documentation]    SP.5 Create Server Profile with 2 FC networks, each port speed set to 8Gb.  Verify port speed
    Clear Profile Configurations
    Log to console and logfile    \n-Creating LIG with 2 uplinksets speeds set to 8Gb
    ${lig_body}=    Build LIG body    ${ligs['lig20581']}
    Edit LIG and Perform an Update From Group    ${lig_body}

    ${resp}=    Fusion Api Get Lig    param=?filter="'name'=='${LIG1}'"
    ${uplink_len}=    Get Length    ${resp['members'][0]['uplinkSets']}
    :FOR    ${x}    IN RANGE    0  ${uplink_len}
    \    Run Keyword If    '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_1'    Should Be Equal
        ...    ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}    Speed8G    msg="UplinkSet_1 is not having speed Speed8G"
    \   ...    ELSE IF    '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_2'    Should Be Equal
        ...    ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}    Speed8G    msg="UplinkSet_2 is not having speed Speed8G."
    Log to console and logfile    \n-Verified the speeds of uplinksets if its showing 8Gb

    Log to console and logfile    \n-Creating 2 Server Profiles
   :FOR    ${SP}  IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    :FOR    ${name}   IN    @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \    Run Keyword If    ${resp['count']} != 1    fail    msg="Not found server profile ${name} after creation"
    \        ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    ${resp1}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE1}'"
    ${resp2}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE2}'"

    Log to console and logfile    \n-Checking for Profile Connection speeds
    ${connections_list}=    Get From Dictionary    ${resp1['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    'Auto'    msg="Downlink_1 is not having Auto speed in ${PROFILE1}"
    \        ...    ELSE IF    '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    '16000'    msg="Downlink_2 is not having 16Gb speed in ${PROFILE1}"
    ${connections_list}=    Get From Dictionary    ${resp2['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['name']}' == 'Downlink_3'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    'Auto'    msg="Downlink_3 is not having Auto speed in ${PROFILE2}"
    \        ...    ELSE IF    '${connections_list[${x}]['name']}' == 'Downlink_4'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    '16000'    msg="Downlink_4 is not having 16Gb speed in ${PROFILE2}"
    Log to console and logfile    \nVerified each downlink is displaying the set speeds of Auto and 16Gb.


F119_SP6_20580 Create Server Profile with 2 FC networks, each port speed set to 4Gb
    [Documentation]    SP.6 Create Server Profile with 2 FC networks, each port speed set to 4Gb.
    Clear Profile Configurations
    Log to console and logfile    \n-Creating LIG with 2 uplinksets speeds set to 4Gb
    ${lig_body}=    Build LIG body    ${ligs['lig20580']}
    Edit LIG and Perform an Update From Group    ${lig_body}

    ${resp}=    Fusion Api Get Lig    param=?filter="'name'=='${LIG1}'"
    ${uplink_len}=    Get Length    ${resp['members'][0]['uplinkSets']}
    :FOR    ${x}    IN RANGE    0  ${uplink_len}
    \    Run Keyword If    '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_1'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}    Speed4G    msg="UplinkSet_1 is not having speed Speed4G"
    \   ...    ELSE IF     '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_2'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}    Speed4G    msg="UplinkSet_2 is not having speed Speed4G."
    Log to console and logfile    \n-Verified the speeds of uplinksets if its correctly set to 4Gb

    Log to console and logfile    \n-Creating 2 Server Profiles
   :FOR    ${SP}  IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    :FOR    ${name}   IN    @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \   Run Keyword If    ${resp['count']} != 1    fail    msg="Not found server profile ${name} after creation"
    \   ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    ${resp1}=    Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2}=    Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"

    Log to console and logfile    \n-Checking for Profile Connection speeds
    ${connections_list}=    Get From Dictionary    ${resp1['members'][0]}    connections
    ${len}=    Get Length    ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_1 is not having Auto speed in ${PROFILE1}"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_2 is not having 16Gb speed in ${PROFILE1}"
    ${connections_list}=    Get From Dictionary    ${resp2['members'][0]}    connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \    Run Keyword If    '${connections_list[${x}]['name']}' == 'Downlink_3'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_3 is not having Auto speed in ${PROFILE2}"
    \        ...    ELSE IF    '${connections_list[${x}]['name']}' == 'Downlink_4'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}    '16000'    msg="Downlink_4 is not having 16Gb speed in ${PROFILE2}"
    Log to console and logfile    \nVerified each downlink is displaying the set speeds of Auto and 16Gb.


F119_SP9_20503 Create Server Profile using user-defined SN Verify in OV
    [Documentation]    SP.9 Create Server Profile using user-defined SN.Verify in OV
    Clear Profile Configurations
    :FOR    ${SP}   IN   @{server_profile_20503}
    \    Add Server Profiles from variable    ${SP}
    :FOR    ${name}   IN   @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \   Run Keyword If    ${resp['count']} != 1    fail    msg="Server profile ${name} is not created"
    \    ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
	Log to console and logfile    \n Verifying in SP if the displayed serial no. and UUID is same as that while gven at creation.
    ${resp1} =    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE1}'"
    Validate Response    ${resp1['members'][0]}    ${val_sp1_20503}
    Log to console and logfile    \n The User defined SN and UUID given during creation is getting displayed in ${PROFILE1}
    ${resp2} =    Fusion Api Get Server Profiles    param=?filter="'name'=='${PROFILE2}'"
    Validate Response    ${resp2['members'][0]}    ${val_sp2_20503}
    Log to console and logfile    \n The User defined SN and UUID given during creation is getting displayed in ${PROFILE2}


F119_20479_20478_20971 - Verify EFUSE
	#Get Carbon ICs info
    ${ic_list}=    Get ICs
    ${len_ic}=    Get Length    ${ic_list}
    Log to console and logfile    \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay}=    Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri}=    Get From Dictionary    ${ic_list[${x}]}    uri
    \    Log to console and logfile    \n\nChecking current state
    \    Wait Until Keyword Succeeds    5 min   15s    IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Log to console and logfile    \n\nThe IC module ${ic_list[${x}]['name']} is in Configured state
    \    Log to console and logfile    \n\nRemoving and adding back Carbon ${ic_list[${x}]['name']} module
    \    Get EM IP
    \    Get EM Token    ${ENC1}
    \    EFuse ICM    EFuseReset    ${ic_bay}
    \    Wait Until Keyword Succeeds    5 min    15s    IC reached state    ${ic_list[${x}]['uri']}    Absent
    \    Log to console and logfile    \n\nThe IC module ${ic_list[${x}]['name']} is in Absent state
    \    Sleep    1500s
    \    Wait Until Keyword Succeeds    5 min   15s    IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Log to console and logfile    \n\nThe IC module ${ic_list[${x}]['name']} Removed and Added back Successfully!! and is in Configured state


F119_LIG_LI4_20970 LIG_LI.Edit LIG, edit uplink set Verify changes are passed down to LI
    [Documentation]    LIG_LI.4 Edit LIG, edit uplink set Verify changes are passed down to LI.
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI
    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    Power on ALL servers
    sleep    200s
    Log to console and logfile    \n-Modifying UplinkSet name and UplinkSet port speed in LIG
    ${lig_body}=    Build LIG body    ${ligs['lig20970']}
    Edit LIG and Perform an Update From Group LI    ${lig_body}
    Log to console and logfile    update from group completed

    Log to console and logfile    \n-Verifying Uplinkset is updated in LI as per LIG
    :FOR    ${x}    IN RANGE    1   3
    \    ${uplinkset_uri}=    Get uplinkset resp    ${uplink_sets['UplinkSet_20970_${x}']['name']}
    \    Should Be Equal as Strings    ${uplinkset_uri['name']}    ${uplink_sets['UplinkSet_20970_${x}']['name']}    msg=Failed to match uplinkset name
    \    Should Be Equal as Strings    ${uplinkset_uri['portConfigInfos'][0]['desiredSpeed']}    ${uplink_sets['UplinkSet_20970_${x}']['logicalPortConfigInfos'][0]['speed']}    msg=Failed to match uplinkset speed

    sleep    60s

    :FOR    ${name}    IN  @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \    Run Keyword If    ${resp['count']} !=1    fail    msg="Not found server profiles ${name} after creation"
    \    ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    \    ${SpLink}=    Get From Dictionary    ${resp['members'][0]}    status
    \    Run Keyword If    '${SpLink}' != 'OK'    fail    msg="Server Profile ${name} status is not OK after Uplinkset modification"
    \    ...    ELSE    Log to console and logfile    \n The status of server profile ${name} is verified as OK after Uplinkset modification

    ${conn}=    Fusion Api Get Connections
    ${lcon}=    Get Length    ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \    ${constat}=    Get From Dictionary    ${conn['members'][${x}]}    status
    \    Run Keyword If    '${constat}' != 'OK'    fail    msg="Connection status is not OK after Uplinkset modification"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK after Uplinkset modification

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}


F119_LIG_LI5_ Edit LI, make changes to uplink sets, change name, ports speeds
    [Documentation]    LIG_LI.5 Edit LI, make changes to uplink sets, change name, ports speeds.
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI
    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \    Add Server Profiles from variable    ${SP}
    Power on ALL servers
    sleep   200s


F119_LIG_LI5_20504 Edit LI, make changes to uplink sets, change name, ports speeds
    [Documentation]    LIG_LI.5 Edit LI, make changes to uplink sets, change name, ports speeds.
    Log to console and logfile    \n-Modifying UplinkSet name and UplinkSet port speed in LI
    ${li_uri}    Get LI URI    ${li}
	#${li_uri}=     Get LI URI   ${LE1}-${LIG1}
    ${us}=    Copy Dictionary    ${li_uplink_set_20504}
    ${body}=    Build US body    ${us}    ${li_uri}
    ${uplinksets}=    Fusion Api Get Uplink Set    param=?filter="'name'=='UplinkSet_1'"
    ${us}=    Get From List    ${uplinksets['members']}    0
    ${us_uri}=    Get From Dictionary    ${us}    uri
    ${resp}=    Fusion Api Edit Uplink Set    body=${body}    uri=${us_uri}
    ${task}=    Wait For Task    ${resp}    5 min    15s
    Validate Response    ${task}    ${valDict}
    Sleep    90s

    Log to console and logfile    \n-Verifying Uplinkset is updated properly in LI
    ${uplinkset_uri}=    Get uplinkset resp    ${li_uplink_set_20504['name']}
    ${locn}=    Get From Dictionary    ${uplinkset_uri['portConfigInfos'][0]['location']}    locationEntries
    :FOR   ${x}   IN RANGE  0  3
    \    Run Keyword If    '${locn[${x}]['type']}'!='Port'    Continue For Loop
    \    ${portvalue}=    Get From Dictionary    ${locn[${x}]}    value
    \    Exit For Loop
    Should Be Equal as Strings    ${uplinkset_uri['name']}    ${li_uplink_set_20504['name']}    msg=Failed to match uplinkset name
    Should Be Equal as Strings    ${uplinkset_uri['portConfigInfos'][0]['desiredSpeed']}    ${li_uplink_set_20504['portConfigInfos'][0]['desiredSpeed']}    msg=Failed to match uplinkset speed
    Should Be Equal as Strings    ${portvalue}    ${li_uplink_set_20504['portConfigInfos'][0]['port']}    msg=Failed to match uplinkset port
    Sleep    90s

    Log to console and logfile    \n-Reverting back LI as per LIG
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Log to console and logfile    update from group completed
    Sleep    30s

    :FOR    ${name}    IN  @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \    Run Keyword If    ${resp['count']} !=1    fail    msg="Not found server profiles ${name} after creation"
    \    ...    ELSE    Log to console and logfile    \nFound server profile ${name} after creation
    \    ${SpLink}=    Get From Dictionary    ${resp['members'][0]}    status
    \    Run Keyword If    '${SpLink}' != 'OK'    fail    msg="Server Profile ${name} status is not OK
    \    ...    ELSE    Log to console and logfile    \n The status of server profile ${name} is verified as OK

    ${conn}=    Fusion Api Get Connections
    ${lcon}=    Get Length    ${conn['members']}
    :FOR    ${x}    IN RANGE    0    ${lcon}
    \    ${constat}=    Get From Dictionary    ${conn['members'][${x}]}    status
    \    Run Keyword If    '${constat}' != 'OK'    fail    msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK
    Sleep    60s

    :FOR    ${IC}    IN    @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}

    Log to console and logfile    \n-Deleting UplinkSet from LI
    ${resp}=    Fusion Api Get Uplink Set    param=?filter="'name'=='${del_uplinkset_20504}'"
    ${uri}=    Get From Dictionary    ${resp['members'][0]}    uri
    ${resp}=    Fusion API delete uplink set    uri=${uri}
    Run Keyword If    ${resp['status_code']} !=202    fail    msg=Uplinkset ${del_uplinkset_20504} deletion from LI failed
    ...    ELSE    Log to console and logfile    \nUplinkset ${del_uplinkset_20504} deleted succesfully from LI!!
    Sleep    90s

    Log to console and logfile    \n-Reverting back LI as per LIG
    Perform an Update From Group LI    ${li_uri}    15 min    15 s
    Sleep    60s

    :FOR    ${name}    IN    @{PROFILES}
    \    ${resp}=    Fusion Api Get Server Profiles    param=?filter="'name'=='${name}'"
    \    ${SpLink}=    Get From Dictionary    ${resp['members'][0]}    status
    \    Run Keyword If    '${SpLink}' != 'OK'    fail    msg="Server Profile ${name} status is not OK
    \    ...    ELSE    Log to console and logfile    \n The status of server profile ${name} is verified as OK

    ${conn}=    Fusion Api Get Connections
    ${lcon}=    Get Length   ${conn['members']}
    :FOR    ${x}    IN RANGE    0    ${lcon}
    \    ${constat}=    Get From Dictionary    ${conn['members'][${x}]}    status
    \    Run Keyword If    '${constat}' != 'OK'    fail    msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK
    Sleep    60s
    :FOR    ${IC}    IN    @{INTERCONNECTS}
    \    ${x}=    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x}=    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s    Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}    ${IC}    Downlink
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...    ELSE    Log to console and logfile    \n The status of second linked downlinkport is verified OK in ${IC}




*** Keywords ***
Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level      TRACE
    ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Clean OV
    ${fc_networks} =    Get Variable Value  ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    ${body} =   Build LIG body      ${ligs['lig1']}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    Add Enclosure Group from variable   ${enc_groups['enc_group1']}
    Sleep   10s
    Add Logical Enclosure from variable   ${les['le1']}
    :FOR     ${IC}   IN   @{INTERCONNECTS}
    \    ${ic_uri} =    Get IC URI    ${IC}
    \    Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
    \    ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \    ${state}=     Get From Dictionary     ${resp['members'][0]}   state
    \    Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
    \   ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state
Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Clear Profile Configurations
    [Documentation]    Cleans Server Profile configurations
    Log to console and logfile  \nCleaning the Server Profile configurations
    Power off ALL Servers
    Remove All Server Profiles

Verify Interconnect Power State
    [Documentation]    Verify IC state
    [Arguments]    ${ICM_NAME}    ${POWER_STATE}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${powerState} =     Get From dictionary    ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}
    Log to console    \n\nPower State of the ICM is ${ICM_NAME}:${powerState}

Get Tx Rx Bytes for a port
    [Documentation]    Get Tx Rx Bytes for a port
    [Arguments]    ${ic_uri}     ${portname}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${portname}
    ${TxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesTx
    ${RxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesRx
    [Return]    ${TxBytes}    ${RxBytes}

Get Server iLO IP
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${bay}
    ${server_info}=    Get Server Info    ${bay}
    ${ilo_ip}=    Get Server iLO Address    ${server_info}
    [Return]    ${ilo_ip}

Get Server iLO Address
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${server_bay_info}
    ${mpHostInfo}=    Get From Dictionary    ${server_bay_info}    mpHostInfo
    ${mpIpAddresses} =    Get From Dictionary    ${mpHostInfo}    mpIpAddresses
    ${l} =  Get Length  ${mpIpAddresses}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${mpIpAddresses}    ${x}
    \    ${type}=    Get From Dictionary    ${enc}    type
    \    Run Keyword If    '${type}'!='DHCP'    Continue For Loop
    \    ${address}=    Get From Dictionary     ${enc}    address
    [Return]    ${address}

Switch Login Distribution
    [Documentation]    issues an EFUSE Action to the given Device\Bay.
    Log to console  wwpnlist output1  is
    [Arguments]         ${SWITCH_IP}    ${SWITCH_USERNAME}                  ${SWITCH_PASSWORD}      ${num}
    Open Connection     ${SWITCH_IP}     prompt=:admin>    timeout=10s
    Login               ${SWITCH_USERNAME}     ${SWITCH_PASSWORD}
    Log to console  wwpnlist output1  is22
    Write    portshow ${num}
    ${wwpnlist}=     Create List
    ${Output}=          Read until      ${SWITCH_PROMPT}
    @{split_lines}=   Split To Lines    ${Output}
    :FOR    ${sl}    IN    @{split_lines}
    \   ${wwpn}=    Get Lines Matching RegExp    ${sl}    (\t10)\:([0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2})$
    \   ${Count2}=    Get Line Count    ${wwpn}
    \   Run Keyword If  '${Count_2}' == '1'     Append To List    ${wwpnlist}    ${wwpn}
    Log to console  wwpnlist output  is ${wwpnlist}
    Close All Connections
    [Return]    ${wwpnlist}

Login to Switch via SSH
    [Documentation]    Connect to 5900AF Switch via SSH library
    [Arguments]    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}
    ...            ${PROMPT}=${SWITCH_PROMPT}    ${TIMEOUT}=${SWITCH_TIMEOUT}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection    ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    # Disable paging on command output
    Write    screen-length disable
    Read Until Prompt
    [Return]    ${Id}

Execute Switch Command
    [Documentation]    SSH connections to the switch don't work well with Robots' Execute Command keyword
    ...                Use this keyword only for indirect connections to simplify the read/write exchanges.
    ...                This keyword assumes screen-length prompting has been disabled.
    [Arguments]    ${COMMAND}    ${PROMPT}=${SWITCH_PROMPT}
    Write    ${COMMAND}
    Sleep    1
    ${Output}=    Read Until    ${PROMPT}
    [Return]    ${Output}

Verify Status of Ports from IC
    [Documentation]    Verify Status of Ports from IC
    [Arguments]    ${port_no}   ${IC}   ${portType}
    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${y}    IN RANGE    0  ${len}
    \   Run Keyword If    '${ports[${y}]['portName']}' != '${port_no}' or '${ports[${y}]['portType']}' != '${portType}'     Continue For Loop
    \   Should Match Regexp     ${ports[${y}]['portStatus']}    Linked

Perform an Update From Group
    [Documentation]    Perform an Update From Group
    [Arguments]     ${leuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update Logical Enclosure from Group   uri=${le_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    Validate Response    ${task}    ${valDict}

Edit LIG and Perform an Update From Group
    [Documentation]    Edit LIG and Perform an Update From Group
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}
    # Get info from the current LIG to apply edits to
    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group    ${le_uri}    15 min      15 s

Get LE URI
    [Documentation]    Get LE URI
    [Arguments]     ${le}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${le}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Get ICs
    [Documentation]    Get IC's
    ${resp}=    fusion api get interconnect
    ${ic_list}=    Create List
    ${ics}=     Get From Dictionary    ${resp}    members
    ${l}=  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL}'    Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}

Change Uplink Port Status
    [Documentation]   Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} =     Get IC URI      ${interconnect}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} =     Get IC URI      ${interconnect}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    #Log to console \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     60s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!


IC reached state
    [Documentation]    IC reached state
    [Arguments]     ${uri}  ${state}
    Set Log Level   TRACE
    ${resp} =   fusion api get resource     ${uri}
    Log to console and logfile      \t ${resp['name']}: ${resp['state']}
    Should Match Regexp     ${resp['state']}    ${state}
    [Return]    ${resp}

Edit LIG and Perform an Update From Group LI
    [Documentation]    Edit LIG and Perform an Update From Group LI
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}

    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
    #Log to console and logfile  resp of edit lig ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    #${li_uri}    Get LI URI    ${LE1}-${LIG1}
	${li_uri}    Get LI URI    ${li}
    log to console    \n the LI URI is :${li_uri}

    Perform an Update From Group LI   ${li_uri}    15 min      15 s

Perform an Update From Group LI
    [Documentation]    Edit LIG and Perform an Update From Group LI
    [Arguments]     ${liuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update From Group   uri=${li_uri}
    Run Keyword If  ${resp['status_code']} !=202    fail    Update from group
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}

Get uplinkset resp
    [Documentation]    Get uplinkset resp
    [Arguments]     ${uplinkset}
    ${resp} =   Fusion Api Get Uplink Set
    ${l} =  Get Length  ${resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${resp['members'][${x}]['name']}' == '${uplinkset}'        Exit For Loop
    ${uri} =    Get From Dictionary     ${resp['members'][${x}]}    uri
    ${resp} =   Get Variable Value  ${resp['members'][${x}]}
    [Return]    ${resp}

Update LIG to base config[LIG1] and Update LI
    [Documentation]    Update LIG to base config[LIG1] and Update LI
    Log to console and logfile    \n Reverting back the LIG configuration to base config LIG1 and update LI
    ${lig_body} =   Build LIG body      ${ligs['lig1']}
    Edit LIG and Perform an Update From Group LI     ${lig_body}

Set Analyser monitor port
    [Documentation]    Set Analyser monitor port
    [Arguments]     ${LI_name}  ${INTERCONNECT}
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${INTERCONNECT}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${ANALYZER_PORT}'
    Set To Dictionary   ${li_portmonitor['analyzerPort']}   portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Log to console and logfile    downlinkuri ${downlinkuri['uri']} ${y}
    Set To Dictionary   ${li_portmonitor['monitoredPorts'][0]}  portUri    ${downlinkuri['uri']}

    Log to console and logfile    \nConfiguring Port Monitoring in LI
    ${uri} =    Get LI URI    ${LI_NAME}
    Log to console and logfile    li_portmonitor ${li_portmonitor}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor}    uri=${uri}
    Log to console and logfile    resp ${resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    Port Monitoring failed for #${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     120s    10s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation #failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring !!


Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users