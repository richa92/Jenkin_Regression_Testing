*** Settings ***
Documentation        Feature Tests:Suite2

Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Variables                 data_variables.py

Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt


*** Test Cases ***

F119_GUI 2_20597 Verify Carbon Module name "Virtual Connect SE 16Gb FC Module for Synergy TAA" are displays correctly in Oneview
    [Documentation]   GUI.2 Verify Carbon Module name "Virtual Connect SE 16Gb FC Module for Synergy TAA" are displays correctly in Oneview
    ${resp}    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS[1]}'"

    Run Keyword If    '${resp['members'][0]['productName']}' != '${ICM_MODEL_TAA}'    fail    Not Found IC Module Name "${resp['members'][0]['productName']}" for "${ICM_MODEL_TAA}"
    ...         ELSE    Log to console and logfile  \n Found IC Module Name "${ICM_MODEL_TAA}" for "${ICM_MODEL_TAA}"
    log to console    \n success


F119_INTEROP11_20540 INTEROP.11 Create 12 uplink sets, 1 uplink set per port
    [Documentation]   INTEROP.11 Create 12 uplink sets, 1 uplink set per port
    Clear LE and LIG Configurations
    Log to console and logfile  \nCreating more FC networks to add to the uplinksets
    Add FC Networks     @{fcnets_add}
    Log to console and logfile    \n - Create LIG with 12 UplinkSets with 1 port per uplinkset
    ${lig_name}    Get From Dictionary   ${ligs['lig20540_12']}   name
    ${body}    Build LIG body      ${ligs['lig20540_12']}
    Create LIG and Check Status     ${body}     ${lig_name}
    ${resp}    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"

    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Run Keyword If  ${uplink_len} != 12    fail    ${uplink_len} Uplinksets are not exist in ${lig_name} \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in ${lig_name}

    Log to console and logfile    \n\nVerify that each uplinkset is having 1 uplinkport
    :FOR     ${x}   IN RANGE   ${uplink_len}
    \    ${port_len}    Get Length    ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos']}
    \    Run Keyword If    ${port_len} == 1    Log to console and logfile    \nFound one uplinkport for ${resp['members'][0]['uplinkSets'][${x}]['name']}
    \    ...         ELSE    fail    msg = Not Found one uplinkport for Found 1 uplinkport for ${resp['members'][0]['uplinkSets'][${x}]['name']}

    Log to console and logfile  \n\n Negative Testing - Edit LIG that has 12 Uplinksets per uplinkport and add one more Uplinkset with uplinkport(max is 12)
    ${lig}    Get LIG Member     ${lig_name}
    ${body}    Build LIG body      ${ligs['lig20540_13']}
    ${ethernetSettings}    Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri}    Get LIG Uri     ${lig_name}
    ${resp}    Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    ${task}    Wait For Task   ${resp}     120s    2s
    Validate Response Regex    ${task['taskErrors'][0]}    ${valDict_20540}
    Log to console and logfile    \n\nSuccessfully verified the error message

    Log to console and logfile  \n\n Verify the same 12 uplink sets are exists in LIG
    ${lig_resp}    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    ${uplink_len}    Get Length      ${lig_resp['members'][0]['uplinkSets']}
    Run Keyword If  ${uplink_len} != 12    fail    ${uplink_len} Uplinksets are not exist in ${lig_name} \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in ${lig_name}

    Log to console and logfile  \n\n Clearing configurations
    Delete FC Networks     @{fcnets_add}

F119_LINK09_20532 Create 2 LIG with 1 UplinkSets with 12 uplinkport using Interconnect Bay 1 and Bay 4
    [Documentation]    LINK.09 Create 2 LIG with 1 UplinkSets with 12 uplinkport using Interconnect Bay 1 and Bay 4.
    Clear LE and LIG Configurations
    Log to console and logfile    \n - Create LIG with 12 UplinkSets with 1 port per uplinkset
    :FOR   ${lig}   IN   @{lig_20532_12}
    \    ${lig_name}    Get From Dictionary   ${lig_20532_12['${lig}']}   name
    \    ${body}    Build LIG body      ${lig_20532_12['${lig}']}
    \    Create LIG and Check Status     ${body}     ${lig_name}
    \    ${lig_resp}    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    \    Run Keyword If  ${lig_resp['count']} != 1    fail    Not found ${lig_name} after LIG creation
    \    ...         ELSE    Log to console and logfile  \nFound ${lig_name} after LIG creation

    \    Log to console and logfile  \n\n Verify the created uplink set are exists in OV
    \    ${uplink_len}    Get Length      ${lig_resp['members'][0]['uplinkSets']}
    \    Run Keyword If  ${uplink_len} != 1    fail    ${uplink_len} Uplinkset are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinkset are exist in ${lig_name}

    \    Log to console and logfile    \n\nVerify that the uplinkset is having 12 uplinkports
    \    ${port_len}    Get Length    ${lig_resp['members'][0]['uplinkSets'][0]['logicalPortConfigInfos']}
    \    Run Keyword If  ${port_len} != 12    fail    ${port_len} Uplinkports are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${port_len} Uplinkports are exist in ${lig_name}

    Log to console and logfile    \n\nNegative Testing - Edit LIG that has 1 Uplinkset with 12 uplinkport and add one more uplinkport(max is 12)
    ${x} =    Set Variable    0
    :FOR   ${lig}   IN   @{lig_20532_13}
    \    ${lig_name}    Get From Dictionary   ${lig_20532_13['${lig}']}    name
    \    ${lig1}    Get LIG Member     ${lig_name}
    \    ${body}    Build LIG body      ${lig_20532_13['${lig}']}
    \    ${ethernetSettings}    Get From Dictionary   ${lig1}  ethernetSettings
    \    Set to dictionary  ${body}     ethernetSettings    ${ethernetSettings}
    \    ${lig_uri}    Get LIG Uri     ${lig_20532_13['${lig}']['name']}
    \    ${resp}    Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    \    ${task}    Wait For Task   ${resp}     120s    2s
    \    Validate Response Regex    ${task['taskErrors'][0]}    ${valDict_error[${x}]}
    \    Log to console and logfile    \nSuccessfully verified the error message for ${lig_name}
    \    ${x} =    Evaluate    ${x} + 1

    \    Log to console and logfile  \n\n Verify the same 1 uplink sets with 12 uplinkports are exists in OV
    \    ${lig_resp}    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    \    ${uplink_len}    Get Length      ${lig_resp['members'][0]['uplinkSets']}
    \    Run Keyword If  ${uplink_len} != 1    fail    ${uplink_len} Uplinkset are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinkset are exist in ${lig_name}
    \    ${port_len}    Get Length    ${lig_resp['members'][0]['uplinkSets'][0]['logicalPortConfigInfos']}
    \    Run Keyword If  ${port_len} != 12    fail    ${port_len} Uplinkports are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${port_len} Uplinkports are exist in ${lig_name}
    \    Log to console and logfile  \n\n Clearing configurations

F119_CFG3_20575 Create 2 LIG with 12 UplinkSets with 1 port per uplinkset using Interconnect Bay 1 and Bay 4
     [Documentation]    CFG.3 Create 2 LIG with 12 UplinkSets with 1 port per uplinkset using Interconnect Bay 1 and Bay 4
     Clear LE and LIG Configurations
     Add FC Networks     @{fcnets_add}
     Log to console and logfile    \n - Create 2 LIG with 12 UplinkSets with 1 port per uplinkset using Interconnect Bay 1 and Bay 4
    :FOR   ${lig}   IN   @{lig_20575_12}
    \    ${lig_name}    Get From Dictionary   ${lig_20575_12['${lig}']}   name
    \    ${body} =   Build LIG body      ${lig_20575_12['${lig}']}
    \    Create LIG and Check Status     ${body}     ${lig_name}
    \    ${lig_resp} =    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    \    Run Keyword If  ${lig_resp['count']} !=1    fail    Not found ${lig_name} after LIG creation
    \    ...         ELSE    Log to console and logfile  \nFound ${lig_name} after LIG creation

    \    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    \    ${uplink_len} =    Get Length      ${lig_resp['members'][0]['uplinkSets']}
    \    Run Keyword If  ${uplink_len} !=12    fail    ${uplink_len} Uplinksets are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in ${lig_name}

    \    Log to console and logfile    \n\nVerify that each uplinkset is having 1 uplinkport
    \    Get LIG US Uplinkport    ${uplink_len}    ${lig_resp}

    Log to console and logfile    \n\nNegative Testing - Edit LIG that has 12 Uplinksets per uplinkport and add one more Uplinkset with uplinkport (max is 12)

    ${x} =    Set Variable    0
    :FOR   ${lig}   IN   @{lig_20575_13}
    \    ${lig_name}    Get From Dictionary   ${lig_20575_13['${lig}']}   name
    \    ${lig1} =      Get LIG Member     ${lig_name}
    \    ${body} =   Build LIG body      ${lig_20575_13['${lig}']}
    \    ${ethernetSettings} =   Get From Dictionary   ${lig1}  ethernetSettings
    \    Set to dictionary  ${body}     ethernetSettings    ${ethernetSettings}
    \    ${lig_uri} =    Get LIG Uri     ${lig_20575_13['${lig}']['name']}
    \    ${resp}    Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    \    ${task}    Wait For Task   ${resp}     120s    2s
    \    Validate Response Regex    ${task['taskErrors'][0]}    ${valDict_error[${x}]}
    \    Log to console and logfile    \nSuccessfully verified the error message for ${lig_name}
    \    ${x} =    Evaluate    ${x} + 1

    \    Log to console and logfile  \n\n Verify the same 12 uplink sets are exists in OV
    \    ${lig_resp} =    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    \    ${uplink_len} =    Get Length      ${lig_resp['members'][0]['uplinkSets']}
    \    Run Keyword If  ${uplink_len} !=12    fail    ${uplink_len} Uplinksets are not exist in ${lig_name}
    \    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in ${lig_name}
    \    Log to console and logfile  \n\n Clearing configurations

    Delete FC Networks     @{fcnets_add}


F119_LIG_LI2_20968 Edit LIG
    [Documentation]    LIG_LI.2 Edit LIG.Add 1 or more uplink sets.Verify uplink sets get passed down to LI
    Clear LE and LIG Configurations
    ${body} =   Build LIG body      ${ligs['lig1']}
    Create LIG and Check Status     ${body}     ${LIG1}
    Add Enclosure Group from variable   ${enc_groups['enc_group_20968']}
    Sleep   10s
    Add Logical Enclosure from variable   ${les['le1']}
    Log to console and logfile    \n-Editing existing LIG and doing Update from group for LI
    ${lig} =        Get LIG Member     ${LIG1}
    ${body} =   Build LIG body      ${ligs['lig20968']}
    # Get info from the current LIG to apply edits to
    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${updatedlig} =         Get LIG Member     ${LIG1}
    ${updatedlig_len} =      Get Length   ${updatedlig['uplinkSets']}
    Run keyword if    '${updatedlig_len}' != '3'    fail     msg=${LIG1} Edit failed.
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group   ${le_uri}    15 min      15 s

    Log to console and logfile    \n-Verifying that LI is updated as per LIG
    ${liguplinksets} =   Get From Dictionary   ${body}  uplinkSets
    ${resp} =    Fusion Api Get Uplink Set    param=?sort=name:ascending
    ${liuplinksets} =   Get From Dictionary   ${resp}    members
    ${up_lig_len} =    Get Length   ${liguplinksets}
    ${up_li_len} =    Get Length   ${liuplinksets}
    Run Keyword If      '${up_lig_len}' != '${up_li_len}'   fail  msg=UplinkSet mismatch in LIG and LI after Update from Group
    :FOR   ${INDEX}  IN RANGE   0   ${up_lig_len}
    \   ${uplink_lig_name} =    Get From Dictionary     ${liguplinksets[${INDEX}]}     name
    \   ${uplink_li_name} =     Get From Dictionary     ${liuplinksets[${INDEX}]}     name
    \    Run Keyword If      '${uplink_lig_name}' != '${uplink_li_name}'  fail   msg=UplinkSet mismatch in LIG and LI after Update from Group
    Log to console and logfile    \n LI Successfully Updated from LIG

F119_CFG4_20983 Verify multiple LIGs can be created per enclosure Max 3 per enclosure
    [Documentation]    CFG.4 Verify multiple LIGs can be created per enclosure.  Max 3 per enclosure
    ...                [For an enclosure with Carbon ICM in bay 1 & 4 can have a total of 3 LIGs]
    ...                [Redundant,NonRedundantASide,NonRedundantBSide]
	Sleep    300s
    Clear LE and LIG Configurations
    Log to console and logfile    \n Creating Redundant LIG and, EG and LE using it
    ${body} =   Build LIG body      ${ligs['lig1']}
    Create LIG and Check Status     ${body}     ${LIG1}
    Add Enclosure Group from variable   ${enc_groups['enc_group_20983']}
    Sleep   10s
    ${resp}=     Fusion Api Get Enclosure Groups
    ${etag}=    Get From Dictionary     ${resp['members'][0]}    eTag
    Add Logical Enclosure from variable   ${les['le2']}
    ${resp} =     Check LE Consistency     ${LE1}
    Log to console and logfile    \n Verifying the LI's present in LE
    ${li_uri} =     Get LI URI      ${LI_NAME}
    Run Keyword If      '${resp['members'][0]['logicalInterconnectUris'][0]}' != '${li_uri}'   fail  msg=${LE1} is not updated with ${LIG1}
    Log to console and logfile  \n Creating redundant LIG's
    ${lig2} =     Get From Dictionary   ${ligs['lig20983_2']}   name
    ${lig3} =     Get From Dictionary   ${ligs['lig20983_3']}   name
    :FOR     ${x}   IN RANGE   2   4
    \           ${body} =   Build LIG body      ${ligs['lig20983_${x}']}
    \         Create LIG and Check Status    ${body}    ${lig${x}}

    ${resp} =    Fusion Api Get Lig    param=?sort=name:ascending
    ${lig_len} =    Get Length     ${resp['members']}
    Run Keyword If  ${lig_len} != 3    fail    msg=Not found 3 LIG's in the enclosure
    ...         ELSE    Log to console and logfile  \n\n 3 LIGs's Created Succesfully for the enclosure!!

    Log to console and logfile  \n\n Editing EG to replace the redundant lig with the two nonreduntant LIGs
    Set To Dictionary    ${enc_groups['enc_group_20983_1']}     eTag=${eTag}
    Set To Dictionary    ${enc_groups['enc_group_20983_1']}     type=${eg_type}
	Set To Dictionary    ${enc_groups['enc_group_20983_1']}     ambientTemperatureMode=${ambientTemperatureMode}
	Set To Dictionary    ${enc_groups['enc_group_20983_1']}     interconnectBayMappingCount=${interconnectBayMappingCount}
	Set To Dictionary    ${enc_groups['enc_group_20983_1']}     stackingMode=${stackingMode}
	Set To Dictionary    ${enc_groups['enc_group_20983_1']}     enclosureTypeUri=${enclosureTypeUri}


	${resp}=      Edit Enclosure Group     ${enc_groups['enc_group_20983_1']}
    Run Keyword If  ${resp['status_code']} !=200    fail    EG edit Failed with Error code \n${resp['errorCode']}
    ...         ELSE    Log to console and logfile  \n\nEG edited Succesfully and added ${lig2} & ${lig3} !!

    Log to console and logfile  \n\n Updating LE as per the new EG
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group    ${le_uri}    15 min    15 s
    Sleep   60s
    ${resp} =     Check LE Consistency     ${LE1}



*** Keywords ***

Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level      TRACE
    ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Clean OV
    Remove All Subnets and Associated Ranges
    ${fc_networks} =    Get Variable Value    ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Clear LE and LIG Configurations
    [Documentation]    Removes all LEs, EGs and LIGs
    Log to console and logfile  \n- Removing LEs, EGs and LIGs
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs

Remove All Subnets and Associated Ranges
    [Documentation]    Removes all subnets and IP range pools
     Log to console and logfile    \n Removing subnets and IP ranges
     ${resp}=     Fusion Api Get Ipv4 Subnet
     ${count}=    Get From Dictionary    ${resp}    count
     :FOR   ${x}  IN RANGE   0  ${count}
     \    ${uri}=     Get From Dictionary   ${resp['members'][${x}]}    uri
     \    ${del}=     Fusion Api Delete Ipv4 Subnet     uri=${uri}

Create LIG and Check Status
    [Documentation]    Creates the LIG with a body and check for the status
    [Arguments]    ${body}    ${lig_name}
    ${resp} =      Fusion Api Create LIG     ${body}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\n${lig_name} Creation Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\n${lig_name} Creation Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\n${lig_name} Created Successfully !!

Perform an Update From Group
    [Documentation]    Perform an Update From Group
    [Arguments]     ${leuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update Logical Enclosure from Group   uri=${le_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    Validate Response    ${task}    ${valDict}

Edit LIG and Perform an Update From Group
    [Documentation]    Edit LIG and Perform an Update From Group
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}
    # Get info from the current LIG to apply edits to
    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group   ${le_uri}    15 min      15 s

Edit Enclosure Group
    [Documentation]    Edit Enclosure Group from EG DTO
    ...              Example:
    ...                Edit Enclosure Group  ${enc_group}
    ...              Data Required:
    ...                EG DTO
    [Arguments]     ${enc_group}
    ${name} =  Get From Dictionary  ${enc_group}  name
    Log to console and logfile  ${\n}Editing Enclosure Group ${name}
    ${uri} =  Get Enclosure Group URI  ${name}
    # Create the payload
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri}    Get From Dictionary    ${enc_group['interconnectBayMappings'][${x}]}    logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   ${liguri} =     Common URI Lookup by name    ${liguri}
    \   Set to dictionary    ${enc_group['interconnectBayMappings'][${x}]}    logicalInterconnectGroupUri    ${liguri}
    Set to dictionary    ${enc_group}    uri    ${uri}
    ${resp}    fusion api edit enclosure group    ${enc_group}    ${uri}
    [Return]    ${resp}

Get LE URI
    [Documentation]    Get LE URI
    [Arguments]     ${le}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${le}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Get LIG US Uplinkport
    [Documentation]    Get LIG US Uplinkport
    [Arguments]    ${uplink_len}    ${lig_resp}
    :FOR     ${x}   IN RANGE   ${uplink_len}
    \    ${port_len} =    Get Length    ${lig_resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos']}
    \    Run Keyword If    ${port_len} ==1    Log to console and logfile    \nFound one uplinkport for ${lig_resp['members'][0]['uplinkSets'][${x}]['name']}
    \    ...         ELSE    fail    msg=Not Found one uplinkport for Found one uplinkport for ${lig_resp['members'][0]['uplinkSets'][${x}]['name']}

Check LE Consistency
    [Documentation]    Check LE Consistency
    [Arguments]     ${LE}
    Log to console and logfile    \n Verifying whether LE is properly updated and in Consistent state
    ${resp} =      Fusion Api Get Logical Enclosure     param=?filter="'name'=='${LE}'"
    Run Keyword If      '${resp['members'][0]['state']}' != 'Consistent'   fail  msg=LE is in inconsistent state
    ...            ELSE    Log to console and logfile   \n- LE is in Consistent state
    [Return]    ${resp}

Build IPV4 Body
      [Documentation]    Build the  Range Body by adding the Subnet Uri
      [Arguments]       ${ipv4range}   ${NETWORK_ID}    ${RANGE_NAME}
      ${subnets}=     Get Subnet        ${NETWORK_ID}
      ${uri}=         Get from Subnet         ${subnets}              uri
      Set to dictionary       ${ipv4range}         subnetUri=${uri}
      [Return]   ${ipv4range}

Get Subnet
    [Documentation]    Get Subnet
    [Arguments]             ${NETWORK_ID}
    ${resp} =   fusion api get ipv4 subnet
    ${subnetcounts} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${subnetcounts}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${subnet} =     Get From List   ${subnetcounts}    ${x}
    \   Exit For Loop If    '${subnet['networkId']}' == '${NETWORK_ID}'
    [Return]    ${subnet}
    # Log            ${subnet}

Get from Subnet
    [Documentation]    Get from Subnet
    [Arguments]     ${subnet_list}      ${element}
    ${return} =     Get From Dictionary     ${subnet_list}          ${element}
    [Return]    ${return}

Create EG Body with Associate Range
    [Documentation]    Adds Enclosure Group to an appliance from a variable which contains a list of dicts with the entire payload and also Associate a Range
    [Arguments]     ${enc_groups}       ${enc_group_name}   ${rangeuri}
    Log     ${enc_group_name}
    Log     ${enc_groups}
    Log     ${rangeuri}
    Log to console and logfile      Adding ENCLOSURE GROUP
    :FOR    ${enc_group1}   IN  @{enc_groups}
    \       Log     ${enc_group1}
    \       ${enc_group_name1} =        Get From Dictionary     ${enc_group1}       name
    \       Log     ${enc_group_name1}
    \       Run Keyword If  '${enc_group_name1}'!='${enc_group_name}'       Continue For Loop
    \       Set to dictionary           ${enc_group1}           ipRangeUris=${rangeuri}
    \       ${enc_group_body}=  Copy Dictionary     ${enc_group1}
    \       Log     ${enc_group_body}
    Log to console and logfile      EDITING LIG GROUP
    ${l} =  Get Length  ${enc_group_body['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group_body['interconnectBayMappings'][${x}]}  logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   ${liguri} =     Common URI Lookup by name    ${liguri}
    \   Set to dictionary   ${enc_group_body['interconnectBayMappings'][${x}]}  logicalInterconnectGroupUri     ${liguri}
    [Return]    ${enc_group_body}

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${FUSION_TIMEOUT}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Add FC Networks
    [Documentation]    Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       ${task} =   Wait For Task   ${resp}     60s    2s

Delete FC Networks
    [Documentation]    Delete FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Removing FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${fc_name}    Get From Dictionary   ${fcnet}   name
    \       ${resp} =     Fusion Api Get Fc Networks        param=?filter="'name'=='${fc_name}'"
    \       Log to console and logfile    \n${resp}
    \       ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    \       ${resp} =   Fusion Api Delete FC Network        uri=${uri}
    \       ${task} =   Wait For Task   ${resp}     60s    2s

Delete LIG
    [Documentation]    Delete LIG
    [Arguments]     ${lig_name}
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =    Fusion Api Delete Lig        uri=${uri}
    ${task} =   Wait For Task   ${resp}     60s    2s

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users
