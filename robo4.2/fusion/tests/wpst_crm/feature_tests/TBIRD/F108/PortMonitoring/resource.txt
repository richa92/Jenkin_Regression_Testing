*** Settings ***
Library			RoboGalaxyLibrary
Library			FusionLibrary
Library			OperatingSystem
Library			BuiltIn
Library			Collections
Library		    SSHLibrary
Library			String

Variables		${DATA}								
Variables		data_variables.py



*** Variables ***
${APPLIANCE_IP}     ${None}
${DATA}			data_variables.py
${VM}			${None}
${VMSETUP}		no
${FTS}			no
${CONFIGURE}		no
${None}		None

*** Keywords ***    
    
# Added for Port monitoring Test cases

Configuring Port Monitoring in LI

    [Arguments] 	${interconnects}    ${analyzer_port}    ${flag}     ${LI}=${LI}
    Log to console and logfile    \nConfiguring Port Monitoring in LI
	Log to console and logfile		${LI}
    Set To Dictionary 	${li_portmonitor}	enablePortMonitor    ${flag} 
    ${ic_resp} =    Fusion Api Get Interconnect  		param=?filter="'name'=='${interconnects}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${analyzer_port}'
	Log to Console	${ports[${x}]['portName']}	${\n}
    Set To Dictionary 	${li_portmonitor['analyzerPort']}	portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Set To Dictionary 	${li_portmonitor['monitoredPorts'][0]}	portUri    ${downlinkuri['uri']}
    ${uri} =    Get LI URI    ${LI}
	Log to Console		${LI}	${\n}
	Log to Console		${uri}	${\n}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor}    uri=${uri}
    [Return]    ${resp}


Verify Port Monitoring in LI

    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in LI
    ${portmtr} =    Fusion Api Get Li Port Monitor Configuration    uri=${uri}
    ${d_port} =    Get from Dictionary    ${downlinkuri}    portName
    Run Keyword If    '${portmtr['analyzerPort']['portName']}' != '${ANALYZER_PORT}' or '${portmtr['analyzerPort']['bayNumber']}' != '${bay_no}' or '${portmtr['analyzerPort']['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Analyser port in LI !!
    Run Keyword If    '${portmtr['monitoredPorts'][0]['portName']}' != '${d_port}' or '${portmtr['monitoredPorts'][0]['bayNumber']}' != '${bay_no}' or '${portmtr['monitoredPorts'][0]['portStatus']}' != 'Linked'    fail    msg=Not found Monitored port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Monitored ports in LI !!

Verify Port Monitoring in IC
    [Arguments]     ${ANALYZER_PORT}    ${d_port}   ${interconnects}

    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in IC
    ${resp} =    Fusion Api Get Interconnect  		param=?filter="'name'=='${interconnects}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${z}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${z}]['portName']}' == '${ANALYZER_PORT}'
    ${u_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Log to Console  ${u_port_info}
    Run Keyword If    '${u_portinfo['portMonitorConfigInfo']}' != 'AnalyzerPort' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port-portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the AnalyzerPort and linked state for Analyzer port in IC !!
    :FOR    ${z}    IN RANGE    0  ${len}
    \   Log to Console  ${ports[${z}]['portName']}  ${\n}
    \     Exit For Loop If    '${ports[${z}]['portName']}' == '${d_port}'
	Log to Console		Downlink ports
	Log to Console		${ports[${z}]}	${\n}
    ${d_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Run Keyword If    '${d_portinfo['portMonitorConfigInfo']}' != 'MonitoredBoth' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Monitored ports-portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portMonitorConfigInfo and linked state for Monitored ports in IC !!
	
Create LIG TBird Payload

    [Arguments]       ${ligs}
    Set Log Level    Trace
    ${Potash}=   Get Interconnect Type URI     ${POTASH}
    ${Chloride}=     Get Interconnect Type URI    ${CHLORIDE10}
    ${Response}=   Get From Dictionary     ${ligs}    interconnectMapTemplate
    ${interconnectMapEntryTemplates}=    Create List
    ${interconnectMapEntryTemplates1}=    Get From Dictionary     ${Response}     interconnectMapEntryTemplates
    :For   ${item}   IN   @{interconnectMapEntryTemplates1}
    \     ${ICM}=    Get From Dictionary    ${item}   permittedInterconnectTypeUri
    \   Run keyword If   '${ICM}' == 'Virtual Connect SE 40Gb F8 Module for Synergy - 794502-B23'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Potash}
    \   Run keyword If   '${ICM}' == '${CHLORIDE10}'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Chloride}
    \   Append To List    ${interconnectMapEntryTemplates}     ${item}
    # Create LIG Body
    ${ls}=    Set to Dictionary     ${Response}   interconnectMapEntryTemplates=${interconnectMapEntryTemplates}
    Set to Dictionary   ${ligs}         interconnectMapTemplate=${Response}
    #log to console and logfile  ${ligs}
    [Return]   ${ligs}

Build US body
	[Arguments]		${us}	${li_uri}
	Set to dictionary	${us}	logicalInterconnectUri	${li_uri}
	${l} = 	Get Length	${us['portConfigInfos']}
	:FOR	${x}	IN RANGE	0	${l}
	\   ${enc_uri} =            Get From Dictionary     ${us['portConfigInfos'][${x}]}	enclosure
	\   ${enc_uri} =        Get Enclosure Uri   ${enc_uri}
	\	Set To Dictionary		${us['portConfigInfos'][${x}]}	enclosure	${enc_uri}

	# process eth
	${networks} = 		Get From Dictionary		${us}	networkUris
	${networkUris} = 	Get Ethernet Uris	${networks}
	Set to dictionary	${us}	networkUris	${networkUris}
	# process fc
	${networks} = 		Get From Dictionary		${us}	fcNetworkUris
	${networkUris} = 	Get FC Uris	${networks}
	Set to dictionary	${us}	fcNetworkUris	${networkUris}
	# process fcoe
	${networks} = 		Get From Dictionary		${us}	fcoeNetworkUris
	${networkUris} = 	Get FCoE Uris	${networks}
	Set to dictionary	${us}	fcoeNetworkUris	${networkUris}

	${body} = 		Fusion Api Create Uplink Set Payload	${us}
	[Return]	${body}
