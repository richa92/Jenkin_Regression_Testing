*** Settings ***
Documentation		Grow Logical Enclosure Features Tests - SuiteName: Grow 
Resource            ../../../../../resources/api/fusion_api_resource.txt
Resource			../FVT/Resources/fvt_resource.txt	

Library				FusionLibrary
Library				../FVT/fvt_api.py

Suite Setup			Login User And Set Up

*** Variables ***
${LE}	${les['name']}
${minVlan}	400
${maxVlan}	450

*** Keywords ***
Login User And Set Up
	[Documentation]	Login Administrator and set variables based on input configuration
	Set Log Level	TRACE
	Fusion Api Login Appliance	${appliance_ip}	${admin_credentials}
	${sc_in} =	Get Variable Value	${sc}	None
	${sc_in} =	Set Variable If	${sc_in} != None	${sc_in}	0
	Set Suite Variable	${sc}	${sc_in}		
	${start_in} =	Get Variable Value	${start}	None
	${start_in} =	Set Variable If	
	...	${start_in} != None	${start_in}	
	...	'${CONFIG}' == 'HA'	2	1
	Set Suite Variable	${start}	${start_in}	
	${inc_in} =	Get Variable Value	${inc}	None
	${inc_in} =	Set Variable If	${inc_in} != None	${inc_in}	1
	Set Suite Variable	${inc}	${inc_in}	
	${max_in} =	Get Variable Value	${max}	None
	${max_in} =	Set Variable If	
	...	${max_in} != None	${max_in}	5
	Set Suite Variable	${max_frame}	${max_in}
	Set Suite Variable	@{netlist}	@{EMPTY}
	:For	${i}	IN RANGE	${minVlan}	${maxVlan}+1
	\	Append To List	${netlist}	net_${i}
	[Return]
	
Create Bulk Ethernet Networks
	[Documentation]	Create All Networks To Be used
	Set To Dictionary	${networks}	vlanIdRange	${minVlan}-${maxVlan}
	${task} =	Fusion Api Create Ethernet Bulk Networks	${networks}
	Should Be Equal As Integers	${task['status_code']}	202
	${task} =	Wait For Task	${task}	timeout=120m	interval=5s	
	[Return]	
	
Create Regular Network Set
	[Documentation]	Create Regular Network Set
	${ns_dto} =	Create Dictionary	
	Set To Dictionary	${ns_dto}	type	network-setV4
	Set To Dictionary	${ns_dto}	name	RNS
	${list} =	Get Slice From List	${netlist}	0	20
	Set To Dictionary	${ns_dto}	networkUris	${list}
	Create Network Set	${ns_dto}	timeout=10m	interval=1s
	${resp} =	Fvt Api Get Network Set By Name	RNS
	Should Be Equal As Strings	${resp['name']}	RNS
	[Return]
	
Create Logical Enclosure Dictionary
	[Documentation]	Create Dictionary To Be used In Payload for Creating Logical Enclosure
	[Arguments]		${start}	${end}
	${encs} =	Create List
	:FOR    ${index}	IN RANGE	1	${end}+1
	\  	Append to List	${encs}	${Enc_${index}}
	Set To Dictionary	${les}	enclosureUris	${encs}
	[Return]
	
Create Logical Enclosure Grow Dictionary
	[Documentation]	Create Dictionary To Be used In Payload for Updating Logical Enclosure
	[Arguments]		${start}	${end}
	${dict} =	Create Dictionary
	${encs} =	Create List
	:FOR    ${index}	IN RANGE	${start}+1	${end}+1
	\  	Append to List	${encs}	${Enc_${index}}
	Set To Dictionary	${dict}	enclosureUris	${encs}
	[Return]	${dict}

Wait For Server To Be Pingable
	[Documentation]	Poll Server To Be Pingable For Maximum 10 minutes 
	[Arguments]		${ip}
	Log To Console	\n Waiting For Server, IP = ${ip}, To Be Pingable
	:FOR	${x}   IN RANGE	0	10
	\	${result} =	Run Process	ping	${ip}
	\	Exit For Loop If	${result.rc} == 0
	\	Sleep	1m
	[Return]
	
Create Server Profiles With Ping
	[Documentation]	Create Server Profile And Ping Process For Ethernet Traffic
	[Arguments]		${EG}	${start}	${end}
	Log To Console	\n Creating Server Profiles With Ping
	:FOR	${x}	IN RANGE	${start}	${end}
	\	Set to Dictionary	${profiles['Profile${x}']['payload']}	enclosureGroupUri	${EG}
	\	FVT Add Server Profile	${profiles['Profile${x}']['payload']}	timeout=20m	interval=1s  
	Sleep	5 mins		# Wait for server to boot up
	:FOR    ${x}	IN RANGE	${start}	${end}
	\	${ip} =	Set Variable	${profiles['Profile${x}']['IP']}
	\	Wait For Server To Be Pingable	${ip}
	\	${handle} =	Start Process	ping	-t	${ip}	stdout=Profile${x}.out
	\	Set To Dictionary	${profiles['Profile${x}']}	handle	${handle}
	Log To Console	\n Finished Creating Server Profiles With Ping
	[Return]

Delete Profile With Ping
	[Documentation]	Delete Ping Process and Profile
	[Arguments]		${profile}
	Log To Console	\n Deleting Profile ${profile} And Ping Process
	Terminate Process	${profiles['${profile}']['handle']}
	Process Should Be Stopped	${profiles['${profile}']['handle']}
 	${task}	Fusion Api Delete Server Profile	name=${profile}	param=?force=true
	Should Be Equal As Integers	${task['status_code']}	202
	${task} =	Wait For Task	${task}	timeout=10m	interval=2s	
	${ret} =	Grep File	${profile}.out	Lost = * (0% loss)
	Run Keyword And Continue On Failure	Should Not Be Empty	${ret}
	[Return]
	
Perform Compliance Functions
	[Documentation]	Delete Ping Process and Profile
	[Arguments]	${LIA}	${LIB}	${FROM}
	Log To Console	\n Perform Compliance Functions
	FVT Edit Telemetry Configurations Of LI	${LE}	${LIA}	${telemetry}	${FROM}
	FVT Edit Ethernet Settings Of LI	${LE}	${LIA}	${ethernet_setting}	${FROM}
	FVT Add Uplink Set To LI	${LE}	${LIA}	${add_uplink_set}	${FROM}
	${list} =	Get Slice From List	${netlist}	0	15
	Set To Dictionary	${edit_uplink_set}	networkUris	${list}
	FVT Edit Uplink Set Of LI	${LE}	${LIA}	${edit_uplink_set}	${FROM}
	FVT Delete Uplink Set From LI	${LE}	${LIB}	${uplink_set_2}	${FROM}
	Log To Console	Finished Perform Compliance Functions
	[Return]

Edit Logical Interconnect Downlink Speed
	[Documentation]	Change LI Downlink Speed
	[Arguments]	${LIA}	${LIB}	${new_speed}
	Log To Console	\n Edit Logical Interconnect Downlink Speed To 25G
	${resp1}	Fvt Api Get Logical Interconnect BY Name	${LIA}
	${resp2}	Fvt Api Get Logical Interconnect BY Name	${LIB}
	${task1}	Fusion Api Patch Li	body=${new_speed}	uri=${resp1['uri']}?force=true
	Should Be Equal As Integers	${task1['status_code']}	202
	${task2}	Fusion Api Patch Li	body=${new_speed}	uri=${resp2['uri']}?force=true
	Should Be Equal As Integers	${task2['status_code']}	202
	${task1} =	Wait For Task	${task1}	timeout=1m	interval=1s
	${task2} =	Wait For Task	${task2}	timeout=1m	interval=1s	
	[Return]
	
*** Test Cases ***
Create Networks And Network Set
	Pass Execution	Skip Create Ethernet Networks
	Create Bulk Ethernet Networks
	Create Regular Network Set
	Pass Execution	Finished Create Ethernet Networks

Create Logical Inteconnect Group And Enclosure Group
	#Pass Execution	Skip Create Logical Inteconnect Group And Enclosure Group	
	${list} =	Get Slice From List	${netlist}	0	20
	Set To Dictionary	${uplink_set_1}	networkUris	${list}
	Add Logical Interconnect Group	${ligs['Enc${start}A-LIG']}	timeout=10m	interval=1s
	Add Logical Interconnect Group	${ligs['Enc${start}B-LIG']}	timeout=10m	interval=1s
	FVT Add Enclosure Group		${enc_group['Enc${start}-EG']}
	Pass Execution	Finished Create Logical Inteconnect Group And Enclosure Group

Create Logical Enclosure
	#Pass Execution	Skip Create Logical Enclosure
	Create Logical Enclosure Dictionary	${start}	${start}
	Set To Dictionary	${les}	enclosureGroupUri	Enc${start}-EG
	Add Logical Enclosure	${les}	timeout=90m	interval=1m
	Pause Execution		### Reapply LE configuration
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp['status']}	OK
	Should Be Equal As Strings	${resp['state']}	Consistent
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-Enc${start}A-LIG
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-Enc${start}B-LIG
	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	FVT Verify Interconnects	Enc${start}AMap
	FVT Verify Interconnects	Enc${start}BMap
	Pass Execution	Finished Create Logical Enclosure

Create Profile And Start Ping Process
	Pass Execution	Skip Create Profile And Start Ping Process
	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	Should Not Be Equal As Strings	${resp}	None	
	Create Server Profiles With Ping	Enc${start}-EG	1	${start}+1
	Perform Compliance Functions	${LE}-Enc${start}A-LIG	${LE}-Enc${start}B-LIG	LI
	Pass Execution	Finished Create Profile And Start Ping Process
	
Grow Logical Enclosure
	Pass Execution	Skip Grow Ligical Enclosure
	:For	${index}	IN RANGE	${start}+${inc}	${max_frame}+1	${inc}
	\	${new_start} =	Evaluate	${start} + ${inc}
	\	Run Keyword If	${new_start} == ${SC}	Edit Logical Interconnect Downlink Speed	${LE}-Enc${start}A-LIG	${LE}-Enc${start}B-LIG	${update_downlink_speed}
	\	Log	\n Grow From ${start} Enclosure To ${new_start} Enclosure	console=True
	\	${LIGA} =	Set Variable	Enc${new_start}A-LIG
	\	${LIGB} =	Set Variable	Enc${new_start}B-LIG
	\	${EG} =	Set Variable	Enc${new_start}-EG
	\	${list} =	Get Slice From List	${netlist}	0	20
	\	Set To Dictionary	${uplink_set_1}	networkUris	${list}
	\	Add Logical Interconnect Group	${ligs['${LIGA}']}	timeout=10m	interval=1s
	\	Add Logical Interconnect Group	${ligs['${LIGB}']}	timeout=10m	interval=1s
	\	FVT Add Enclosure Group		${enc_group['${EG}']}
	\	Create Logical Enclosure Dictionary	1	${start}
	\	Set To Dictionary	${les}	enclosureGroupUri	${EG}
	\	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	\	Set To Dictionary	${les}	deploymentManagerSettings	${resp['deploymentManagerSettings']}
	\	fvt-keywords.Edit Logical Enclosure	${les}	10min	1sec
	\	Sleep	10s
	\	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	\	Should Be Equal As Strings	${resp['state']}	Inconsistent
	\	Pause Execution		### Waiting for cabling
	\	${dict} =	Create Logical Enclosure Grow Dictionary	${start}	${new_start}
	\	${resp}=	Update From Group On Logical Enclosure	${resp['uri']}	${dict}	timeout=60 m	interval=5 s
	\	Sleep	10s
	\	Pause Execution		### Check LE Status
	\	${resp}	Fvt Api Get Logical Enclosure By Name	${LE}
	\	Should Be Equal As Strings	${resp['state']}	Consistent
	\	${LIA} =	Set Variable	${LE}-${LIGA}	
	\	${resp}	Fvt Api Get Logical Interconnect BY Name	${LIA}
	\	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	\	${LIB} =	Set Variable	${LE}-${LIGB}	
	\	${resp}	Fvt Api Get Logical Interconnect BY Name	${LIB}
	\	Should Be Equal As Strings	${resp['consistencyStatus']}	CONSISTENT
	\	FVT Verify Interconnects	Enc${new_start}AMap
	\	FVT Verify Interconnects	Enc${new_start}BMap
	\	Pause Execution		### Check Server Status
	\	Create Server Profiles With Ping	${EG}	${start}+1	${new_start}+1
	\	Perform Compliance Functions	${LIA}	${LIB}	LI
	\	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-Enc${start}A-LIG
	\	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted
	\	${resp}	Fvt Api Get Logical Interconnect BY Name	${LE}-Enc${start}B-LIG
	\	Should Be Equal As Strings	${resp}	None	### Ensure Old LI Deleted
	\	FVT Delete Enclosure Group	Enc${start}-EG
	\	${resp}	Fvt Api Get Enclosure Group BY Name	Enc${start}-EG
	\	Should Be Equal As Strings	${resp}	None	### Ensure Old EG Deleted
	\	FVT Delete Logical Interconnect Group	Enc${start}A-LIG
	\	${resp}	Fvt Api Get Logical Interconnect Group BY Name	Enc${start}A-LIG
	\	Should Be Equal As Strings	${resp}	None	### Ensure Old LIG Deleted
	\	FVT Delete Logical Interconnect Group	Enc${start}B-LIG
	\	${resp}	Fvt Api Get Logical Interconnect Group BY Name	Enc${start}B-LIG
	\	Should Be Equal As Strings	${resp}	None	### Ensure Old LIG Deleted
	\	${start} =	Set Variable	${new_start}
	Sleep	3 mins
    :FOR    ${x}   IN RANGE	1	${start}+1
	\	${resp}	Fvt Api Get Server Profile By Name	Profile${x}
	\	Run Keyword If	${resp} != None	Delete Profile With Ping	Profile${x}
    :FOR    ${x}   IN RANGE	1	${start}+1
	\	Log To Console	\n Remove Output File Profile${x}.out	
	\	Remove File	Profile${x}.out	
	Fvt Delete Logical Enclosure	${LE}
	${resp}	FVT Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp}	None
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LIA}
	Should Be Equal As Strings	${resp}	None
	${resp}	Fvt Api Get Logical Interconnect BY Name	${LIB}
	Should Be Equal As Strings	${resp}	None
	FVT Delete Enclosure Group	${EG}
	${resp}	Fvt Api Get Enclosure Group BY Name	${EG}
	Should Be Equal As Strings	${resp}	None	### Ensure Old EG Deleted
	FVT Delete Logical Interconnect Group	${LIGA}
	${resp}	Fvt Api Get Logical Interconnect Group BY Name	${LIGA}
	FVT Delete Logical Interconnect Group	${LIGB}
	${resp}	Fvt Api Get Logical Interconnect Group BY Name	${LIGB}
	Should Be Equal As Strings	${resp}	None	### Ensure Old LIG Deleted
	Pass Execution	Finished Grow Logical Enclosure

Delete Network Sets
	Pass Execution	Skip Delete Network Sets
	${resp}	FVT Api Get Logical Enclosure By Name	${LE}
	Should Be Equal As Strings	${resp}	None
	${task}	Fusion Api Delete Network Set	name=RNS
	Should Be Equal As Integers	${task['status_code']}	202
	${task} =	Wait For Task	${task}	timeout=10m	interval=2s	
	${resp}	Fvt Api Get Network Set BY Name	RNS
	Should Be Equal As Strings	${resp}	None	
	Pass Execution	Finished Delete Network Sets
	
Delete Bulk Ethernet Networks
	Pass Execution	Skip Create Ethernet Networks
	${resp}	Fvt Api Get Network Set BY Name	RNS
	Should Be Equal As Strings	${resp}	None	
	:FOR	${i}	IN RANGE	${minVlan}	${maxVlan}+1
	\	${task} =	Fusion Api Delete Ethernet Network	name=net_${i}
	:For	${i}	IN RANGE	0	100
	\	${resp} =	Fusion Api Get Ethernet Networks
	\	Exit For Loop If	${resp['count']} == 0
	\	Sleep	1m
	Should Be Equal As Integers	${resp['count']}	0
	Pass Execution	Finished Delete Ethernet Networks