***Settings***
Documentation   OVF5609
Variables       datavariables_BA51.py
#Variables       datavariables_AZ51.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           OVF5609_keywords.txt
Library         Telnet
Library         background_ping.py

***Variables***
${stats}    statistics

***Test cases***

1 Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${appliance_credentials}
    Run Keyword If    ${resp[0]} != 200    FAIL
    ...    ELSE    Log    Successfully logged in to the appliance    console=True
    Clean OV

Create ethernet network
    [Documentation]    Create ethernet Networks
    Add Ethernet Networks from variable    ${ethernet_networks}

Create Fabric Attach and Direct Attach FC network
    [Documentation]    Create FA FC Networks
    Log    Creating FC Networks    console=True

    Add FC Networks from variable    ${fc_netowrks}

Creating LIG
    [Documentation]    Creating LIG through rest calls
    [Tags]    LIG    setup

    Log    Creating LIG    console=True
    Add LIG from variable    ${ligs[0]}

Creating EG
    [Documentation]    Creating EG through rest calls
    [Tags]  EG    setup

    Log    Creating EG    console=True
    Add Enclosure Group from variable    ${enc_group['EG']}

Creating LE
    [Documentation]    Creating LE through rest calls
    [Tags]  LE    setup
    Add Logical Enclosure from variable    ${LE}

Verify Interconnects are in configured state after adding LE
    [Documentation]    verifying interconnects are in configured state and ports are linked.

    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM3_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'   Set Suite Variable    ${ICM6_uri}    ${uri}

    Log    Verifing if ports are linked in ICM3    console=True
    :FOR    ${uplink}    IN    @{uplink_ports_ICM3}
    \    Wait Until Keyword Succeeds    15 min    20s    Verify Port    ${ICM3_uri}    ${uplink}    status=OK    portStatus=Linked

    Log    Verifing if ports are linked in ICM6    console=True
    :FOR    ${uplink}    IN    @{uplink_ports_ICM6}
    \    Wait Until Keyword Succeeds    15 min    20s    Verify Port    ${ICM6_uri}    ${uplink}    status=OK    portStatus=Linked

Creating Server Profile
    [Documentation]  Creating Server profile through rest calls
    [Tags]  ServerProfile    setup

    Power off all servers    PressAndHold
    ${resp}    Add Server Profiles from variable    ${server_profiles}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    Run Keyword for List    ${servers}    Power on Server
    Sleep    10min

Getting IP of server
    [Documentation]  Fetch Server IP
    [Tags]    Server_IP    setup

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Set Suite Variable    ${ip_list1}    ${ip_list1}
    Set Suite Variable    ${ip_list2}    ${ip_list2}

#####Enable/Disable FA and DA ports are verify FC statistics#####
TC_1_1_Disable/ Enable Uplink Port
    [Documentation]      Initial counter validation
    [Tags]  Disable_Enable

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}

    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_1_2_Disabling the uplink port and verifying the status
    [Documentation]      Disable FC ports and verify FC ports statistics
    [Tags]  Disable_Enable

    :FOR    ${port}    IN    @{IC1_ports}
    \    ${Resp}    Get IC Port    ${ICM3_uri}    ${port}
    \    Set to Dictionary   ${Resp}   enabled    False
    \    ${Return}    Update IC Port    ${Interconnect_name[0]}    ${port}    ${Resp}
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    \    Log    Verifying if Port is disabled    console=True
    \    Wait Until Keyword Succeeds     5 min   10s    Verify Port Status    ${ICM3_uri}    ${port}    verify=portStatusReason    status=AdminDisabled

TC_1_3_Execute traffic and validate if counters are not increased after disabling the port
    [Documentation]      Execute traffic and verify counters
    [Tags]  Disable_Enable

    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    60sec

    ${len}    Get Length    ${IC1_ports}
    :For    ${x}    IN RANGE    0    ${len}
    \    Validate If Counters are not increased    ${IC1_ports[${x}]}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}     ${stats}    ${ICM3_uri}

TC_1_4_Verify if counters are increasing in other ICM
    [Documentation]      Verify if counters are increasing in other ICM
    [Tags]  Disable_Enable

    Log    Validating if counters are increasing in ICM6    console=True
    Counter Value Validation    ${IC2_ports}    ${Interconnect_name[1]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM6_uri}

TC_1_5_Enable back the disabled port
    [Documentation]      Enable back the disabled port
    [Tags]  Disable_Enable

    :FOR    ${port}    IN    @{IC1_ports}
    \    ${Resp}    Get IC Port    ${ICM3_uri}    ${port}
    \    Set to Dictionary   ${Resp}   enabled    True
    \    ${Return}    Update IC Port    ${Interconnect_name[0]}    ${port}    ${Resp}
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Configured
    \    Log    Verifying if Port is enabled    console=True
    \    Wait Until Keyword Succeeds     5 min   10s    Verify Port Status    ${ICM3_uri}    ${port}    verify=portStatusReason    status=LoggedIn

TC_1_6_Execute traffic and verify if counters are increasing
    [Documentation]      Execute traffic and verify if counters are increasing
    [Tags]  Disable_Enable

    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}
    Log    Validating if counters are increasing in ICM3
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

######Power off /on Interconnect#######
TC_2_API_TC_Verify FC statistics after Power off/on ICM
    [Documentation]   Initial counter validation
    [Tags]    PowerICM

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_2_1_Power off ICM3 and verify the ICM state
    [Documentation]   Power off ICM3 and verify the ICM state
    [Tags]    PowerICM

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Maintenance
    Sleep    60sec

TC_2_2_Validate if counters are not captured after power off ICM
    [Documentation]   Validate if counters are not captured after power off ICM
    [Tags]    PowerICM

    ${len}    Get Length    ${IC2_ports}
    :For    ${x}    IN RANGE    0    ${len}
    \    Validate If Counters are not increased    ${IC2_ports[${x}]}    ${Interconnect_name[1]}    ${counters}    ${FC_counters}     ${stats}    ${ICM6_uri}
    \    Sleep   60sec

TC_2_3_Power on ICM3 and verify the ICM state
    [Documentation]   Power on ICM3 and verify the ICM state
    [Tags]    PowerICM

    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    ${\n}Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC1_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM3_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

TC_2_4_Execute traffic and verify if the counters are resumed back
    [Documentation]   Execute traffic and verify if the counters are resumed back
    [Tags]    PowerICM

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}

    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_2_4_Bringing back ICM3 as Master
    [Documentation]   Bringing back ICM3 as Master
    [Tags]    PowerICM
    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=Off  timeout=60  interval=10
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Maintenance
    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/powerState  value=On  timeout=60  interval=10
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM6_uri}    Configured

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC2_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM6_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

#########Efuse ICM#########

TC_3_API_TC_Verify FC statistics after Efuse on/off ICM
    [Documentation]   Verify FC statistics after Efuse on/off ICM.
    [Tags]    EfuseICM

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_3_1_Efuse Remove ICM3 and verify status
    [Documentation]   Efuse Remove ICM3 and verify status
    [Tags]    EfuseICM

    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse ICM    EFuseOn    3
    Log    Verifying if module is absent    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM3_uri}    Absent
    Sleep    ${Wait_for_Traffic}

TC_3_2_Validate if counters are not increased after removing the ICM
    [Documentation]   Validate if counters are not increased after removing the ICM
    [Tags]    EfuseICM

    ${len}    Get Length    ${IC1_ports}
    :For    ${x}    IN RANGE    0    ${len}
    \    Validate If Counters are not increased    ${IC2_ports[${x}]}    ${Interconnect_name[1]}    ${counters}    ${FC_counters}     ${stats}    ${ICM6_uri}
    \    Sleep    60sec

TC_3_3_Efuse Insert ICM3 and verify status
    [Documentation]   Efuse Insert ICM3 and verify status
    [Tags]    EfuseICM

    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    Efuse ICM    EFuseOff    3
    Log    Verifying if module is Configured    console=True

    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM3_uri}    Configured
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC1_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM3_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

TC_3_4_Execute traffic and verify if counters are resumed back
    [Documentation]   Execute traffic and verify if counters are resumed back
    [Tags]    EfuseICM
    Set Log Level    TRACE

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    200sec
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_3_5_Bringing back the ICM3 as master
    [Documentation]   Bringing back the ICM3 as master
    [Tags]    EfuseICM
    Set Log Level    TRACE

    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOn    6
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Absent
    Sleep    60sec
    Get EM IP    ${ENC2}
    Get EM Token    ${ENC2}
    Efuse ICM    EFuseOff    6
    Wait Until Keyword Succeeds    15 min    20s      IC reached state    ${ICM6_uri}    Configured
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC2_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM6_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

######Reset ICM#######

TC_4_API_TC_Verify FC statistics after Reset ICM
    [Documentation]   Verify FC statistics after Reset ICM.
    [Tags]    ResetICM

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    Execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}
    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_4_1_Reset ICM3 and verify the state
    [Documentation]   Reset ICM3 and verify the state
    [Tags]    ResetICM

    Log    Reseting interconnect     console=True
    Patch Interconnect     ${Interconnect_dto[0]}    op=replace  path=/deviceResetState  value=Reset  timeout=600  interval=10

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Subordinate
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Master

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC1_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM3_uri}    ${uplink}    status=Unknown    portStatus=Unknown

TC_4_2_Validate if counters are not increased in ICM3
    [Documentation]   Validate if counters are not increased in ICM3
    [Tags]    ResetICM

    Wait Until Keyword Succeeds     5 min   10s    Validate If Counters Are Zero    ${IC1_ports[0]}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}     ${stats}    ${ICM3_uri}

TC_4_3_Verify if ICM3 is up and ports are linked
    [Documentation]   Verify if ICM3 is up and ports are linked
    [Tags]    ResetICM

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC1_ports}
    \    WaitUntil Keyword Succeeds    15 min    20s    Verify Port    ${ICM3_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

TC_4_4_Execute traffic and verify if counters are resumed
    [Documentation]   Execute traffic and verify if counters are resumed
    [Tags]    ResetICM

    ${ip_list1}    ${ip_list2}    Get IP In a List    ${ilo_details}
    execute Traffic In Servers    ${ilo_details}    ${ip_list2}    ${server_details}    ${kill_diskspd}    ${diskspd_cmd}
    Sleep    ${Wait_for_Traffic}

    Counter Value Validation    ${IC1_ports}    ${Interconnect_name[0]}    ${counters}    ${FC_counters}    ${Packet_Interval}    ${ICM3_uri}

TC_4_5_Bringing back ICM3 as Master
    [Documentation]   Bringing back ICM3 as Master
    [Tags]    ResetICM

    Log    Reseting interconnect     console=True
    Patch Interconnect     ${Interconnect_dto[1]}    op=replace  path=/deviceResetState  value=Reset  timeout=600  interval=10

    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[1]}    Subordinate
    Wait Until Keyword Succeeds     5 min   10s      Get Interconnect stackingDomainRole    ${Interconnect_name[0]}    Master

    Log    Verify all uplink speed are expected    console=True
    :FOR    ${uplink}    IN    @{IC2_ports}
    \    Wait Until Keyword Succeeds    5 min    20s    Verify Port    ${ICM6_uri}    ${uplink}    status=OK    portStatus=Linked    opSpeed=Speed8G

