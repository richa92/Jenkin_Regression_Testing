*** Settings ***
Documentation       OVF2399 - Orange Storm Control feature testing with High Available configuration

Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Resource        resource.txt
Library         Collections
Library         ServerOperations
Library             ../../FVT/fvt_api.py

Resource            ../../FVT/fvt-keywords.txt
Resource            ../../FVT/Resources/fvt_resource.txt
Resource            ../../../../../resource/fusion_api_all_resource_files.txt


Suite Setup        Suite Setup Tasks
Suite Teardown Suite Teardown Tasks

*** Variables ***
@{ILO_IPS}


****Test Cases****

1 OVF2399_API_TC_HA - VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LIG
    [Documentation]     VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LIG
    Set Log Level   TRACE

    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    ${start_in} =   Get Variable Value  ${enc_count}    1

    Set Suite Variable  ${enc_count}    ${start_in}
    Log to Console and logfile      ${enc_count}

    Set Suite Variable  ${SP}   Enc${enc_count}_server_profiles_HA
    Log to Console and logfile      ${Server_profiles['${SP}']}

    Set Suite Variable  ${LIG}  Enc${enc_count}-LIG_HA
    Log to Console and logfile      ${ligs['${LIG}']}

    Set Suite Variable  ${LE}   Enc${enc_count}-LE
    Log to Console and logfile      ${LE}

    Set Suite Variable  ${interconn}    Enc${enc_count}-interconnect
    Log to Console and logfile      ${Interconnects['${interconn}']}

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_disable_storm['enableStormControl']}

2 OVF2399_API_TC_HA - VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LI AFTER THE LE CREATION
    [Documentation]     VERIFY STORM CONTROL IS DISABLED BY DEFAULT IN THE LI AFTER THE LE CREATION
    ${resp}    Fvt Api Get Logical Interconnect By Name     ${les['${LE}']['name']}-${LIG}
    ${LI_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    '/${LI} does not exist'
    ${resp}    Fusion Api Get Li   ${LI_URI}
    #Should Be Equal As Strings ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_disable_storm['enableStormControl']}

3 OVF2399_API_TC_HA - VERIFY ENABLING/DISABLING STORM CONTROL AND STORM THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    [Documentation]     VERIFY ENABLING/DISABLING STORM CONTROL AND STORM THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[0]}
    Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task    ${resp}    28m    15s
    sleep   60
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    FVT Verify Interconnects In LI  ${les['${LE}']['name']}-${LIG}

4 OVF2399_API_TC_HA - ENABLE STORM CONTROL in LIG with THRESHOLD VALUES (1 and 262143)
    [Documentation]     ENABLE STORM CONTROL in LIG with THRESHOLD VALUES (1 and 262143)

    :FOR    ${threshold}    IN  @{Threshold}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold}
    \   Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}
    \   Log to Console and logfile      ${Edit_ligs1['${LIG}']}
    \   ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    \   ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    \   Log to Console and logfile      ${resp}
    \   Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    \   Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}
    \   Log to Console and logfile      STORM CONTROL WITH THERSHOLD VALUE ${ethernet_setting_enable_storm['stormControlThreshold']} is verified successfully!!

5 OVF2399_API_TC_HA -PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LIG and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    [Documentation]     PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LIG and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    :FOR    ${neg_threshold}    IN  @{negative_storm_threshold}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${neg_threshold}
    \   ${resp} =    Edit LIG with negative storm values     ${LIG}  ${Edit_ligs1['${LIG}']}
    \   Run Keyword If  '${resp['status_code']}' != '400'    Verify Error state    ${resp}    ${error_msg}    ELSE    Log to Console and logfile  Invalid storm threshold value is rejected

6 OVF2399_API_TC_HA -PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LI and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    [Documentation]     PASS ALL THE NEGATIVE VLAN VALUES FOR THE STORM CONTROL IN LI and VALIDATE ALL THE VALUES SHOULD BE REJECTED
    :FOR    ${neg_threshold}    IN  @{negative_storm_threshold}
    \   Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${neg_threshold}
    \   ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    \   ${LI_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    '/${LI} does not exist'
    #\  Set To Dictionary   ${ethernet_setting_enable_igmp_per_vlan_neg}    id  ${resp['ethernetSettings']['id']}
    \   ${resp}    Fusion Api Update Li Ethernet Settings      ${ethernet_setting_enable_storm}    ${LI_URI}
    \   Log to Console and logfile      ${neg_threshold}
    \   Log to Console and logfile      ${resp['status_code']}
    \   Should Be Equal As Integers    ${resp['status_code']}    400

7 OVF2399_API_TC_HA - VERIFY CHANGING STORM CONTROL THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    [Documentation]     VERIFY CHANGING STORM CONTROL THERSHOLD in LI/LIG SHOW COMPLIANCE ALERT AND UFG WILL BE ENABLED
    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[1]}
    Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =    Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    28m    15s
    sleep   60
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}
    FVT Verify Interconnects In LI  ${les['${LE}']['name']}-${LIG}

8 OVF2399_API_TC_HA - CREATE BACKUP OF THE APPLIANCE
    [Documentation]     CREATE BACKUP OF THE APPLIANCE
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_storm_enable_resp_li}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}=    Fusion Api Create Backup
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nBackup failed. \n ErrorCode:${resp['errorCode']}\n ${resp['message']}
    ${task} =   Wait For Task   ${resp}     10 min    20s
    Run Keyword If  '${task['taskState']}' !='Completed'   or   ${task['status_code']} !=200   fail    msg=\nBackup failed. \n ErrorCode:${task['taskErrors']}\n ${task['taskStatus']}
    ...         ELSE    Log to Console and logfile  \n\nBackup Created Succesfully !! \n ${task['taskStatus']}

9 OVF2399_API_TC_HA - ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 150 in LIG and LI
   [Documentation]     ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 150 in LIG and LI
    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[2]}
    Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    28m    15s
    sleep   60
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}
    FVT Verify Interconnects In LI  ${les['${LE}']['name']}-${LIG}

10 OVF2399_API_TC_HA - RESTORE THE BACKUP FROM THE RECENT BACK-UP
    [Documentation]     RESTORE THE BACKUP FROM THE RECENT BACK-UP
    ${status}=  Set Variable    ${EMPTY}
    ${Response}     Fusion Api Get Backup
    Log to Console and logfile    Successfully got the backupfile cont ${Response}
    Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
    ${restore_body}     Create Dictionary   type=RESTORE
    ...                                     uriOfBackupToRestore=${Response['members'][0]['uri']}
    Log to Console and logfile      "restore Body is"
    Log to Console and logfile      ${restore_body}
    ${output}       Fusion Api Restore Backup       ${restore_body}
    Log to Console and logfile      ${output}
    Sleep   400sec
    Run keyword unless  ${output['status_code']}== 202    Fail    "Unable to perform the restore from backup operation"
    Log to Console and logfile      slept 300 sec
    ${restore_resp}     Fusion API Get Restore Status
    Log to Console and logfile      ${restore_resp}
    Run keyword unless  ${restore_resp['status_code']}== 200    Fail    "Unable to get the restore details"
    :FOR    ${index}    IN RANGE    ${restore_resp['count']}
    \   Run Keyword If  '${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'        Continue For Loop
    \   ${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
    \   Log to Console and logfile      ${restore_id}

    Log to Console and logfile      ${restore_id}
    :FOR    ${index}    IN RANGE    50
    \   sleep   30sec
    \   Log to Console and logfile      "Restoring is in Progress..."
    \   ${resp}     Fusion API Get Restore Status   ${restore_id}
    \   Log to Console and logfile      ${resp}
    \   Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to get the restore id details"
    \   Run Keyword If  '${resp['progressStep']}' != 'COMPLETED'    Continue For Loop
    \   ${status} =    Set Variable    ${resp['status']}
    \   Run Keyword If  '${resp['progressStep']}' == 'COMPLETED'    Exit For Loop
    Should Be Equal    ${status}    SUCCEEDED
    Sleep   10min

11 OVF2399_API_TC_HA - VERIFY VALUES IN LIG AND LI WILL BE RESTORED
    [Documentation]     VERIFY VALUES IN LIG AND LI WILL BE RESTORED
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name    ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}

    Set Global Variable    ${after_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${after_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}   ${resp['uri']}

    Set Global Variable    ${after_storm_enable_resp_li}   ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${after_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    Should Be Equal     ${before_storm_enable_resp_lig}     ${after_storm_enable_resp_lig}
    Should Be Equal     ${before_storm_threshold_resp_lig}  ${after_storm_threshold_resp_lig}
    Should Be Equal     ${before_storm_enable_resp_li}      ${after_storm_enable_resp_li}
    Should Be Equal     ${before_storm_threshold_resp_li}   ${after_storm_threshold_resp_li}

12 OVF2399_API_TC_HA - ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 3 in LIG and LI
    [Documentation]     ENABLE STORM CONTROL and SET THRESHOLD VALUE AS 3 in LIG and LI
    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[3]}
    Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    28m    15s
    sleep   60
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}
    FVT Verify Interconnects In LI  ${les['${LE}']['name']}-${LIG}

13 OVF2399_API_TC_HA SEND BROADCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN DOWNLINK PORT
    [Documentation]     SEND BROADCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN DOWNLINK PORT

    Log to Console and logfile      "GET ILO IP ADDRESS OF THE SERVERS ..."

    :FOR    ${server}   IN  @{Server_profiles['${SP}']}
    \   @{server_num} =    Split String From Right    ${server['serverHardwareUri']}
    \   Log to Console and logfile    ${server_num[-1]}
    \   ${iloip} =     Get Server iLO IP    ${server_num[-1]}
    \   Log to Console and logfile      ${iloip}
    \   Append to List    ${ILO_IPS}    ${iloip}

    Log to Console and logfile      "ILO IP DETAILS OF THE SERVER BLADES ARE AS FOLLOWS"
    Log to Console and logfile      ${ILO_IPS}

    # LOGIN TO THE ILO, GET THE VLAN-NETWORKS IP ADDRESS, LOGIN TO THE SERVER WITH VLAN-NETWORK IP AND LISTEN TO THE INTERFACE IS RECEIVING THE MULITCAST TRAFFIC

    :FOR    ${ilo_ip}   IN  @{ILO_IPS}
    \   Set To Dictionary    ${Ilo_details}    ilo_ip    ${ilo_ip}
    \   Log to Console and logfile      ${Ilo_details}
    \   ${index}=   Get Index From List    ${ILO_IPS}    ${ilo_ip}
    \   Log to Console and logfile      ${index}
    \   ${output}   ${IP}=      get_server_vlan_ip      ${linux_details}    ${Ilo_details}    ${module_file_path}     ${mcast_cmds['${index}']}   ${windows_server_cred}
    \   Set To Dictionary    ${Server_network_ips}    ${index+1}    ${IP}

    Log to Console and logfile      "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"
    Log to Console and logfile      ${Server_network_ips}


    Log to Console and logfile  "Broadcast Storm Control Drop counter value before Starting Broadcast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    Log to Console and logfile      ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log to Console and logfile    "Downlink port stormControlBCASTDropCounters value before starting the Bcast Traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlBCASTDropCounters']}

    Set To Dictionary   ${windows_server}   win_ip    ${Server_network_ips[1][0]}

    ${output}=  start_traffic_in_blade    ${windows_server}    ${broadcast_command}
    Log to Console and logfile      ${output}
    Sleep   120

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${y}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${y}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${y}]}

    ${len}=     Get Length  ${Alert_msg}
    :FOR    ${x}    IN Range    0   ${len}
    \   Log to Console and logfile  ${Alert_msg[${x}]['description']}
    \   ${out}=    Split String    ${Alert_msg[${x}]['description']}    port
    \   ${port}=    Split String    ${out[1]}
    \   Log to Console and logfile  ${port[0]}
    \   Run Keyword If  '${port[0]}' == '${bcast_blade_downlinkport}'       Exit For Loop
    Run Keyword If  '${port[0]}' != '${bcast_blade_downlinkport}'   Fail    "Activity message for storm Control for the port ${bcast_blade_downlinkport} is not available"
    Should Contain  ${Alert_msg[${x}]['description']}   A packet storm has been detected
    Should Contain  ${Alert_msg[${x}]['description']}   port ${bcast_blade_downlinkport}

    Log to Console and logfile  "Broadcast Storm Control Drop counter value After Broadcast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log to Console and logfile  " Downlink port stormControlBCASTDropCounters value After the Bcast Traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} <= ${old_bcast_storm_value}    fail    Brodcast Storm Drop Counter is not increased after the Broadcast Storm traffic

14 OVF2399_API_TC_HA SEND BROADCAST TRAFFIC FROM DL SERVER AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN UPNLINK PORT
    [Documentation]     SEND BROADCAST TRAFFIC FROM DL SERVER AND VERIFY THE BROADCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF BROADCAST GET INCREASED IN UPLINK PORT
    Log to Console and logfile  "Broadcast Storm Control Drop counter value before Starting Broadcast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    Log to Console and logfile      ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  " Uplink port stormControlBCASTDropCounters value before starting the Bcast Traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlBCASTDropCounters']}

    # The below command is not executed in blade it is in DL server, re-using the same function
    execute_command_in_blade    ${broadcast_command}
    Sleep   140

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${x}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'       Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${x}]}
    Log to Console and logfile    ${Alert_msg[0]}
    Log to Console and logfile    ${Alert_msg[0]['description']}
    Should Contain    ${Alert_msg[0]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[0]['description']}    port ${dlf_test_blade_uplinkport}

    Log to Console and logfile  "Broadcast Storm Control Drop counter value After Broadcast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  " Uplink port stormControlBCASTDropCounters value After the Bcast Traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} <= ${old_bcast_storm_value}    fail    Brodcast Storm Drop Counter is not increased after the Broadcast Storm traffic

15 OVF2399_API_TC_HA SEND MULITCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE MULITCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN DOWNLINK PORT
    [Documentation]     SEND MULITCAST TRAFFIC ON THE BLADE SERVER 1 AND VERIFY THE MULITCAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN DOWNLINK PORT

    Log to Console and logfile      ${Server_network_ips}
    Log to Console and logfile  "Multicast Storm Control Drop counter value before Starting Multicast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    Log to Console and logfile      ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log to Console and logfile  " Downlink port stormControlMCASTDropCounters value before starting the Mcast Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlMCASTDropCounters']}
    #Log to Console and logfile "Multicast Storm Control Drop counter value is : "  ${resp['commonStatistics']['stormControlMCASTDropCounters']}
    ${old_mcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Set To Dictionary   ${windows_server}    win_ip    ${Server_network_ips[1][0]}

    ${output}=    start_traffic_in_blade    ${windows_server}   -s ${delete_route_command}

    ${output}=    start_traffic_in_blade    ${windows_server}    -s ${set_route_command}

    ${output}=    start_traffic_in_blade    ${windows_server}    ${multicast_command}
    Log to Console and logfile      ${output}
    Sleep   100

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${x}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${x}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${x}]}
    Log to Console and logfile  ${Alert_msg[0]['description']}
    Log to Console and logfile  ${Alert_msg[1]['description']}
    Should Contain    ${Alert_msg[0]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[0]['description']}    port ${bcast_blade_downlinkport}
    Should Contain    ${Alert_msg[1]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[1]['description']}    port ${bcast_blade_downlinkport}

    Log to Console and logfile  "Multicast Storm Control Drop counter value After Multicast Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${bcast_blade_downlinkport}
    Log to Console and logfile  " Downlink port stormControlMCASTDropCounters value After the Mcast Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlMCASTDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} <= ${old_mcast_storm_value}    fail    Multicast Storm Drop Counter is not increased after the Multicast Storm traffic

16 OVF2399_API_TC_HA SEND MULITCAST TRAFFIC FROM DL SERVER AND VERIFY THE MULTICAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN UPLINK PORT
    [Documentation]     SEND MULITCAST TRAFFIC FROM DL SERVER AND VERIFY THE MULTICAST STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF MULITCAST GET INCREASED IN UPLINK PORT
    Log to Console and logfile  "MULITCAST Storm Control Drop counter value before Starting MULITCAST Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    Log to Console and logfile      ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  " Uplink port stormControlMCASTDropCounters value before starting the Mcast Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlMCASTDropCounters']}
    ${old_bcast_storm_value}=   Set Variable    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    # The below command is not executed in blade it is in DL server, re-using the same function
    execute_command_in_blade    ${multicast_command}
    Sleep   100

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${x}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'       Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${x}]}
    Log to Console and logfile  ${Alert_msg[0]}
    Log to Console and logfile  ${Alert_msg[0]['description']}
    Should Contain    ${Alert_msg[0]['description']}  A packet storm has been detected
    Should Contain    ${Alert_msg[0]['description']}    port ${dlf_test_blade_uplinkport}

    Log to Console and logfile  "MULITCAST Storm Control Drop counter value After MULITCAST Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  " Uplink port stormControlMCASTDropCounters value After the Mcast Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlMCASTDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} <= ${old_bcast_storm_value}    fail    Multicast Storm Drop Counter is not increased after the MULITCAST Storm traffic

17 OVF2399_API_TC_HA SEND DLF TRAFFIC FROM THE BLADE SERVER AND VERIFY THE STORM IS DETECTED ON THE DOWNLINK PORT D3 AND VERIFY THE VALUES OF THE DLF STORM COUNTERS IN DOWNLINK PORT
    [Documentation]     SEND DLF TRAFFIC FROM THE BLADE SERVER AND VERIFY THE STORM IS DETECTED ON THE DOWNLINK PORT D3 AND VERIFY THE VALUES OF THE DLF STORM COUNTERS IN DOWNLINK PORT
    Log to Console and logfile      "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"

    Log to Console and logfile      ${Server_network_ips}


    Log to Console and logfile  "DLF Storm Control Drop counter value before Starting DLF Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    Log to Console and logfile      ${ic_uri}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_downlinkport}
    Log to Console and logfile  "Downlink port StormControlDLFDropCounters value Before sending the DLF traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlDLFDropCounters']}
    ${old_dlf_storm_value}=    Set Variable    ${resp['commonStatistics']['stormControlDLFDropCounters']}

    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[1][0]}
    # Get the mac address of the blade server 1
    execute_command_in_blade    getmac /s ${windows_server['win_ip']} /u ${windows_server['username']} /p ${windows_server['password']} > mac_blade1.txt
    ${mac_output}=      extract_mac_address     mac_blade1.txt
    Log to Console and logfile      ${mac_output}

    # Disable the Ethernet interface in the blade server 1
    start_traffic_in_blade    ${windows_server}    ${disable_interface}
    Log to Console and logfile  Wait for 6 Minutes to automatically delete the mac address of blade 1 in the hafnium
    sleep   360

    # Set the Static ARP entry for the diabled ethernet interface to verify DLF traffic
    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[3][0]}
    start_traffic_in_blade    ${windows_server}   -s arp -s ${Server_network_ips[1][1]} ${mac_output[1]}
    sleep   30

    # Start the DLF traffic from the blade server
    start_traffic_in_blade  ${windows_server}   "C:\\Program Files (x86)\\Nmap\\start_nping.bat"
    Sleep   130

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${y}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${y}]['physicalResourceType']}' !='server-profiles'     Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${y}]}

    ${len}=     Get Length  ${Alert_msg}
    :FOR    ${x}    IN Range    0   ${len}
    \   Log to Console and logfile  ${Alert_msg[${x}]['description']}
    \   ${out}=    Split String    ${Alert_msg[${x}]['description']}   port
    \   ${port}=    Split String    ${out[1]}
    \   Log to Console and logfile  ${port[0]}
    \   Run Keyword If  '${port[0]}' == 'd3'        Exit For Loop
    Run Keyword If  '${port[0]}' != 'd3'    Fail    "Activity message for storm Control for the port d3 is not available"
    Should Contain    ${Alert_msg[${x}]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[${x}]['description']}    port ${dlf_test_blade_downlinkport}

    Log to Console and logfile  "DLF Storm Control Drop counter value After DLF Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_downlinkport}
    Log to Console and logfile  "Downlink port StormControlDLFDropCounters value After the DLF traffic"
    Log to Console and logfile      ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} <= ${old_dlf_storm_value}    fail    DLF Storm Drop Counter is not increased after the DLF Storm traffic

    # Remove the Static ARP entry for the diasbled ethernet interface to verify DLF traffic
    Set To Dictionary    ${windows_server}    win_ip    ${Server_network_ips[3][0]}
    start_traffic_in_blade    ${windows_server}   -s arp -d ${Server_network_ips[1][1]}

18 OVF2399_API_TC_HA SEND DLF TRAFFIC FROM DL SERVER AND VERIFY THE DLF STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF DLF GET INCREASED IN UPNLINK PORT
    [Documentation]     SEND DLF TRAFFIC FROM DL SERVER AND VERIFY THE DLF STORM IS DETECTED IN THE ALERT MESSAGE AND VERIFY THE DROP COUNTERS OF DLF GET INCREASED IN UPNLINK PORT
    Log to Console and logfile      "THE BLADE SERVER NETWORKS IP'S ARE AS FOLLOWS:"

    Log to Console and logfile      ${Server_network_ips}

    Log to Console and logfile  "DLF Storm Control Drop counter value before Starting DLF Traffic"

    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}

    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  "Uplink port StormControlDLFDropCounters value before starting the DLF Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlDLFDropCounters']}
    ${old_bcast_storm_value}=    Set Variable    ${resp['commonStatistics']['stormControlDLFDropCounters']}
    ${mac_details}=     extract_mac_address     mac_blade1.txt
    Set Suite Variable  ${mac_output}   ${mac_details}
    Log to Console and logfile      ${mac_output}
    # The below command is not executed in blade it is in DL server, re-using the same function

    execute_command_in_blade    arp -s ${Server_network_ips[1][1]} ${mac_output[1]}

    execute_command_in_blade    "C:\\Program Files (x86)\\Nmap\\start_nping.bat"

    # Sleep For 60 seconds  complete the DLF traffic to be trasmitted
    sleep   120

    ${Alert_msg}=   Create List
    ${resp}=    Fusion API Get Alerts
    ${mem_resp}=    Get From Dictionary     ${resp}    members
    ${len}=     Get Length  ${mem_resp}
    :FOR    ${x}    IN Range    0   ${len}
    \   Run Keyword if  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'       Continue For Loop
    \   Append to List      ${Alert_msg}    ${mem_resp[${x}]}
    Log to Console and logfile  ${Alert_msg[0]}
    Log to Console and logfile  ${Alert_msg[0]['description']}
    Should Contain    ${Alert_msg[0]['description']}    A packet storm has been detected
    Should Contain    ${Alert_msg[0]['description']}    port ${dlf_test_blade_uplinkport}

    Log to Console and logfile  "DLF Storm Control Drop counter value After DLF Traffic"
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${dlf_test_blade_uplinkport}
    Log to Console and logfile  " Uplink port StormControlDLFDropCounters value After the DLF Traffic "
    Log to Console and logfile      ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} <= ${old_bcast_storm_value}    fail  DLF Storm Drop Counter is not increased after the DLF Storm traffic

    # Enable the ethernet interface on the blade server 1
    Set To Dictionary   ${windows_server}   win_ip    ${Server_network_ips[1][0]}
    start_traffic_in_blade  ${windows_server}   ${enable_interface}

    # Delete the Mac address from the DL server
    execute_command_in_blade    arp -d ${Server_network_ips[1][1]}

19 OVF2399_API_TC_HA Verify ICM Clear Port counters clears Storm counter statistics
    [Documentation]     VERIFY ICM CLEAR PORT COUNTERS DOESN'T CLEARS STORM COUNTER STATISCTICS
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${body} =   Create Dictionary
    Log to Console and Logfile    \nResetting Interconnect Port Counters\n
    ${resp} =   Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg=Clearing Interconnect Ports of ${Interconnects['${interconn}'][0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${Interconnects['${interconn}'][0]} cleared successfully
    Sleep   60s
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    #Log to Console and logfile ${ic_resp['members'][0]}
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    #Log to Console and logfile ${ports}
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == 'Q2'
    Log to Console and logfile  ${ports[${x}]['portName']}
    Log to Console and logfile  ${ports[${x}]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log to Console and logfile    ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Log to Console and logfile    ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Log to Console and logfile    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Run Keyword If    ${resp['commonStatistics']['stormControlBCASTDropCounters']} == 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If    ${resp['commonStatistics']['stormControlDLFDropCounters']} == 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If    ${resp['commonStatistics']['stormControlMCASTDropCounters']} == 0    fail    msg=MCAST Drop counter got cleared which is not expected

    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == 'd1'
    Log to Console and logfile  ${ports[${x}]['portName']}
    Log to Console and logfile  ${ports[${x}]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log to Console and logfile    ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Log to Console and logfile    ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Log to Console and logfile    ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} == 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} != 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} == 0    fail    msg=MCAST Drop counter got cleared which is not expected

20 OVF2399_API_TC_HA_VERFY THE INTERCONNECT IS GOING INTO MAINTENANCE STATE AFTER THE INTERCONNECT IS POWERED OFF
    [Documentation]     VERIFY THE INTERCONNECT IS GOING INTO MAINTENANCE STATE AFTER THE INTERCONNECT IS POWERED OFF
    Set To Dictionary   ${ethernet_setting_enable_storm}    stormControlThreshold   ${threshold[2]}
    Edit LIG        ${LIG}  ${Edit_ligs1['${LIG}']}

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}   ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    28m    15s
    sleep   60
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings    ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['ethernetSettings']['enableStormControl']}    ${ethernet_setting_enable_storm['enableStormControl']}
    Should Be Equal    ${resp['ethernetSettings']['stormControlThreshold']}    ${ethernet_setting_enable_storm['stormControlThreshold']}

    Set Global Variable    ${before_storm_enable_resp_li}   ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}
    FVT Verify Interconnects In LI    ${les['${LE}']['name']}-${LIG}

    ##Poweroff the interconnect
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    ${task} =   Wait for Task   ${resp}   1min    10s
    Validate Response   ${task}    ${valDict}
    sleep   120s
    Log to Console and logfile  \nVerify ${Interconnects['${interconn}'][0]} is off

    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${powerState} =     Get From Dictionary     ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    Off
    Log to Console and logfile   \n Powered off ${Interconnects['${interconn}'][0]}

    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Maintenance
    Log to Console and logfile  \n\nThe IC module ${Interconnects['${interconn}'][0]} is in Maintenance state

21 OVF2399_API_TC_HA_VERIFY STORM DROP COUNTERS VALUES ARE RESET TO 0 AFTER THE INTERCONNECT IS POWERED ON
    [Documentation]     VERIFY STORM DROP COUNTERS VALUES ARE RESET TO 0 AFTER THE INTERCONNECT IS POWERED ON
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${LIG}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to Console and logfile      ${resp}

    Set Global Variable    ${before_storm_enable_resp_lig}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_lig}    ${resp['ethernetSettings']['stormControlThreshold']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${les['${LE}']['name']}-${LIG}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_storm_enable_resp_li}    ${resp['ethernetSettings']['enableStormControl']}
    Set Global Variable    ${before_storm_threshold_resp_li}    ${resp['ethernetSettings']['stormControlThreshold']}

    ##Poweron the interconnect
    ${ic_uri} =    Get IC URI    ${Interconnects['${interconn}'][0]}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    ${task} =   Wait for Task   ${resp}   1min    10s
    Validate Response   ${task}    ${valDict}
    sleep   120s
    Log to Console and logfile  \nVerify ${Interconnects['${interconn}'][0]} is On

    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    ${powerState} =     Get From Dictionary     ${IC['members'][0]}   powerState
    Should Be Equal As Strings  ${powerState}   On
    Log to Console and logfile   \n Powered on ${Interconnects['${interconn}'][0]}

    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_uri}    Configured
    Log to Console and logfile  \n\nThe IC module ${Interconnects['${interconn}'][0]} is in Configured state

    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${Interconnects['${interconn}'][0]}'"
    #Log to Console and logfile ${ic_resp['members'][0]}
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    #Log to Console and logfile ${ports}
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == 'Q2'
    Log to Console and logfile  ${ports[${x}]['portName']}
    Log to Console and logfile  ${ports[${x}]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log to Console and logfile  ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Log to Console and logfile  ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Log to Console and logfile  ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} != 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} != 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} != 0    fail    msg=MCAST Drop counter got cleared which is not expected

    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == 'd1'
    Log to Console and logfile  ${ports[${x}]['portName']}
    Log to Console and logfile  ${ports[${x}]}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${ports[${x}]['portName']}

    Log to Console and logfile  ${resp['commonStatistics']['stormControlBCASTDropCounters']}
    Log to Console and logfile  ${resp['commonStatistics']['stormControlDLFDropCounters']}
    Log to Console and logfile  ${resp['commonStatistics']['stormControlMCASTDropCounters']}

    Run Keyword If  ${resp['commonStatistics']['stormControlBCASTDropCounters']} != 0    fail    msg=BCast Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlDLFDropCounters']} != 0    fail    msg=DLF Drop counter got cleared which is not expected
    Run Keyword If  ${resp['commonStatistics']['stormControlMCASTDropCounters']} != 0    fail    msg=MCAST Drop counter got cleared which is not expected



****Keywords*****
FVT Verify Interconnects In LI
    [Documentation]    Verify Interconnects In LI
    [Arguments]     ${LI}
    #Log    \n    Verifying Interconnects In LI ${LI} console=True
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${LI}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   ${resp}    FVT Api Get Interconnect By Uri    ${interconnect}
    \   Log to Console and logfile      Interconnect ${interconnect} is in ${resp['state']} state
    \   Should Be Equal As Strings  ${resp['state']}    Configured
    [Return]
Verify Error state
    [Documentation]    Verify Error state
    [Arguments]     ${resp}     ${error_msg}
    ${task} =   Wait For Task   ${resp}    5 min    15s
    Run Keyword If  '${task['taskState']}' == 'Error' and '${task['taskErrors'][0]['errorCode']}' == '${error_msg}'     Log to Console and logfile  Invalid storm threshold value is rejected
    ...    ELSE    Fail
Edit LIG with negative storm values
    [Documentation]    Edit given LIG with new lig data
    [Arguments]     ${lig_name}    ${new_lig}  ${timeout}=3 m  ${interval}=1 m
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'

    ${us} =    Copy Dictionary    ${new_lig}
    Log to Console and logfile      ${us}
    ${body} =   Build LIG body    ${us}
    Log to Console and logfile    ${body}

    ${resp} =   Fusion Api Edit Lig    body=${body}    uri=${LIG_URI}
    [Return]    ${resp}

Edit LIG
    [Documentation]    Edit given LIG with new lig data
    [Arguments]     ${lig_name}    ${new_lig}  ${timeout}=3 m  ${interval}=1 m
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'

    ${us} =    Copy Dictionary    ${new_lig}
    ${body} =   Build LIG body  ${us}

    ${resp} =   Fusion Api Edit Lig    body=${body}    uri=${LIG_URI}
    ${task} =   Wait For Task    ${resp}    5 min    15s
    [Return]    ${resp}


Get Server iLO IP
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${bay}
    ${server_info}=    Get Server Info    ${bay}
    ${ilo_ip}=    Get Server iLO Address    ${server_info}
    [Return]    ${ilo_ip}

Get Server iLO Address
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${server_bay_info}
    ${mpHostInfo}=    Get From Dictionary    ${server_bay_info}    mpHostInfo
    ${mpIpAddresses} =    Get From Dictionary    ${mpHostInfo}    mpIpAddresses
    ${l} =  Get Length  ${mpIpAddresses}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${mpIpAddresses}    ${x}
    \    ${type}=    Get From Dictionary    ${enc}    type
    \    Run Keyword If    '${type}'!='DHCP'    Continue For Loop
    \    ${address}=    Get From Dictionary     ${enc}    address
    [Return]    ${address}

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to Console and logfile  [TEARDOWN]
    Stop Multicast Sender
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users

Suite Setup tasks
    [Documentation]   This Suite contains the HA Configuration
    Set Log Level   TRACE
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    ${start_in} =   Get Variable Value  ${enc_count}    1
    Set Suite Variable  ${enc_count}    ${start_in}
    Log to Console and logfile      ${enc_count}

    Set Suite Variable  ${interconn}    Enc${enc_count}-interconnect
    Log to Console and logfile      ${Interconnects['${interconn}']}

    #Create Ethernet Networks
    :FOR    ${net}  IN  @{ethernet_network}
    \   ${Response}     fusion api create ethernet network      ${net}
    \   Log to Console and logfile      ${Response}
    \   Run keyword unless  ${Response['status_code']}== 202    Fail    "Unable to Create Ethernet network"
    Log to Console and logfile      Ethernet Networks created successfully!!

    Set Suite Variable  ${LIG}  Enc${enc_count}-LIG_HA
    Log to Console and logfile      ${ligs['${LIG}']}
    Add Logical Interconnect Group  ${ligs['${LIG}']}   timeout=4m  interval=1s

    Set Suite Variable  ${EG}   Enc${enc_count}-EG
    Log to Console and logfile      ${EG}
    FVT Add Enclosure Group     ${enc_group['${EG}']}

    Set Suite Variable  ${LE}   Enc${enc_count}-LE
    Log to Console and logfile      ${LE}

    Set To Dictionary    ${les['${LE}']}    enclosureGroupUri    ${EG}
    Log to Console and logfile      ${les['${LE}']}

    Add Logical Enclosure   ${les['${LE}']}    timeout=90m    interval=1m
    Sleep   2 mins

    FVT Verify Interconnects In LI    ${les['${LE}']['name']}-${LIG}

    Set Suite Variable    ${SP}    Enc${enc_count}_server_profiles_HA
    Log to Console and logfile    ${Server_profiles['${SP}']}

    Set Suite Variable    ${interconn}    Enc${enc_count}-interconnect
    Log to Console and logfile    ${Interconnects['${interconn}']}

    Add Server Profiles from variable    ${Server_profiles['${SP}']}

    Log to Console and logfile      "Powering on the Server bays..."

    :FOR    ${server}   IN  @{Server_profiles['${SP}']}
    \   Log to Console and logfile    ${server['serverHardwareUri']}
    \   Power on server    ${server['serverHardwareUri']}

    Sleep    600
