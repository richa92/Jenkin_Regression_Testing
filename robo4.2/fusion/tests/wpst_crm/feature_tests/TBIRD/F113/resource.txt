*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML

Variables 		    data_variables.py
#Variables 		    response_validation.py
						

*** Variables ***
#${X-API-VERSION}							199
${X-API-VERSION}							${null}

${APPLIANCE_IP}                 15.199.229.190
#${APPLIANCE_IP}                 15.199.233.240
#${APPLIANCE_IP}                 15.199.201.136
${DATAFILE}                     C:\\rg-poc\\robogalaxy\\tests\\demo\\wpst_crm\\feature_tests\\fcoe\\data-fcoe.xml

*** Keywords ***
#######################################
# SETUP WORFLOWS - XML
#######################################
Add Users from XML
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${DATAFILE}
	Log to console and logfile  	Adding USERS	
	#${users} = 	Get XML elements by XPATH	${DATAFILE}		users/user[@userName!='Administrator']
	${users} = 	Get XML elements by XPATH	${DATAFILE}		users/user
	:FOR	${x}	IN	@{users}
	\		${user} = 	Get element attributes	${x}
	\		Continue For Loop If	'${user['userName']}'=='Administrator' 	
	\		Continue For Loop If	'${user['userName']}'=='administrator' 	
	\		${roles} = 	Create List	${user['roles']}
	\		Set to dictionary	${user}	roles	${roles}			
	\		Set to dictionary	${user}	type	UserAndRoles
	\		Set to dictionary	${user}	enabled	${true}		 	
	\		${resp} = 	Fusion Api Add User		body=${user}	

Add Ethernet Networks from XML
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${DATAFILE}
	Log to console and logfile  	Adding ETHERNET NETWORKS	
	${nets} = 	Get XML elements by XPATH	${DATAFILE}		networks/network
	:FOR	${net}	IN	@{nets}	
	\		${respDict} = 	Fusion Api Add Ethernet Network		body=${net}	

Add Network Sets from XML
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${DATAFILE}
	Log to console and logfile  	Adding ETHERNET NETWORKS	
	${nets} = 	Get XML elements by XPATH	${DATAFILE}		fcnetworks/fcnetwork
	:FOR	${net}	IN	@{nets}	
	\		${respDict} = 	Fusion Api Add Network Set 		body=${net}	

Add FC Networks from XML
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${DATAFILE}
	Log to console and logfile  	Adding FC NETWORKS	
	${nets} = 	Get XML elements by XPATH	${DATAFILE}		fcnetworks/fcnetwork
	:FOR	${net}	IN	@{nets}	
	\		${respDict} = 	Fusion Api Add Fibre Channel Network		body=${net}	

Get Administrator Password from Xml and set suite variable
	[Arguments]	${DATAFILE}	${xpath}=users/user[@userName="Administrator"]
	${password} = 	Get element attribute	${DATAFILE}		password	xpath=${xpath}
	${req} = 		Create Dictionary		newPassword		${password}
	...										oldPassword		admin
	...										userName		administrator
    ${admin_credentials} =		Create Dictionary	userName=administrator
    ...												password=${password}
    Set Suite Variable		${admin_credentials}	${admin_credentials}

Change Initial Administrator Password From Xml
	[Arguments]	${appliance}	${DATAFILE}
	Set Log Level	TRACE
	Log to console and logfile  	-Change Initial Password from Xml
	Get Administrator Password from Xml and set suite variable	${DATAFILE}
	Run Keyword and continue on failure		Fusion Api Change Administrator password	host=${appliance}	body=${req}
	
Add Licenses From Xml
	[Arguments]	${DATAFILE}	${xpath}=licenses/license
	Log to console and logfile  	\n -Add Licenses From Xml		
	${licenses} = 	Get XML elements by XPATH	${DATAFILE}		${xpath}
	:FOR	${license}	IN	@{licenses}	
	\		${key} = 	Get element attribute	${license}	key
	\		Fusion Api Add license		key=${key}

Get Adapters from Xml
	[Arguments]	${DATAFILE}	${xpath}=adapters/adapter
	${adapters} = 	Get elements  	${DATAFILE}		${xpath}
	${adapter_list} =	Create List
	:FOR	${adapter}	IN	@{adapters}	
	\		${a} = 	Get Element Attributes	${adapter}
	\		Append To List	${adapter_list}	${a}	
	[Return]	${adapter_list}
		
Get Time Config From Xml
	[Arguments]	${DATAFILE}	${xpath}=timeconfig
	${time} = 	Get element attributes	${DATAFILE}		${xpath}	
	[Return]	${time}

Get Locale From Xml
	[Arguments]	${DATAFILE}	${xpath}=localeconfig
	${locale} = 	Get element attributes 	${DATAFILE}		${xpath}	
	[Return]	${locale}

Configure Interfaces From Xml
	[Arguments]	${DATAFILE}
	Log to console and logfile  	\n -Configure Interfaces From Xml			
	${adapters} = 	Get Adapters from Xml		${DATAFILE}
	${time} = 		Get Time Config from Xml	${DATAFILE}
	${locale} =		Get Locale from Xml			${DATAFILE}
	${req} =		Create Dictionary			applianceNetworks=${adapters}
	...											locale=${locale}
	...											time=${time}
	${body} = 	Fusion Api Create Appliance Interfaces Payload	${req}
	${resp} = 	Fusion Api Configure Appliance Interfaces		${body}
	Wait For Task	${resp}		timeout=2 min	interval=10 s

Get XML elements by XPATH
    [Documentation]	Returns XML elements matching XPATH
    ...	Usage: Get XML by XPATH	| <xml>	| <xpath>
    ...	<xml> can be an xml file, object or string
	...	${nets} = 	Get XML by XPATH	${xml}		fcnetworks/fcnetwork
	...	${nets} = 	Get XML by XPATH	${xml}		fcnetworks/fcnetwork[@name="fc-network-100"]
	[Arguments]	${xml}	${xpath}
	${elements} = 	Get Elements	${xml}	xpath=${xpath}	
	[Return]	${elements}
#######################################
# SETUP WORFLOWS - Variables
#######################################
Add Licenses from variable
	[Documentation]	Adds licenses to an appliance from a variable which contains the license keys
	[Arguments]		${licenses}
	Log to console and logfile  	Adding LICENSES	
	:FOR	${license}	IN	@{licenses}
	\		${resp} = 	Fusion Api Add License		key=${license['key']}

Add Users from variable
	[Documentation]	Adds users to an appliance from a variable which contains the entire payload
	[Arguments]		${users}
	Log to console and logfile  	Adding USERS	
	:FOR	${user}	IN	@{users}
	\		${resp} = 	Fusion Api Add User		body=${user}

Add Ethernet Networks from variable
	[Documentation]	Adds Ethernet networks to an appliance from a variable which contains the entire payload
	[Arguments]		${networks}
	Log to console and logfile  	Adding ETHERNET NETWORKS	
	:FOR	${net}	IN	@{networks}
	\		${resp} = 	Fusion Api Create Ethernet Network		body=${net}

Add FC Networks from variable
	[Documentation]	Adds FC networks to an appliance from a variable which contains the entire payload
	[Arguments]		${networks}
	Log to console and logfile  	Adding FC NETWORKS	
	:FOR	${net}	IN	@{networks}
	\		${resp} = 	Fusion Api Create FC Network		body=${net}

Add FCoE Networks from variable
	[Documentation]	Adds FCoE networks to an appliance from a variable which contains the entire payload
	[Arguments]		${networks}
	Log to console and logfile  	Adding FCoE NETWORKS	
	:FOR	${net}	IN	@{networks}
	\		${resp} = 	Fusion Api Create FCoE Network		body=${net}

Add Network Sets from variable
	[Documentation]	Adds Network sets to an appliance from a variable which contains the entire payload
	[Arguments]		${networks}
	Log to console and logfile  	Adding NETWORK SETS	
	:FOR	${net}	IN	@{networks}
	\		${networkUris} = 	Get Ethernet URIs	${net['networkUris']}
	\		Set to dictionary	${net}	networkUris	${networkUris}			
	\		${resp} = 	Fusion Api Create Network Set		body=${net}

#######################################
# COMMON KEYWORDS
#######################################	
Get Ethernet URIs
	[Arguments]		${netlist}
	${urilist} = 	Create List
	:FOR	${net}	IN	@{netlist}
	\	${resp} = 	Fusion Api Get Ethernet Networks		param=?filter="'name'=='${net}'"
	\	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	\	Append To List	${urilist}	${uri}
	[Return]	${urilist}	

Get FC URIs
	[Arguments]		${netlist}
	${urilist} = 	Create List
	:FOR	${net}	IN	@{netlist}
	\	${resp} = 	Fusion Api Get FC Networks		param=?filter="'name'=='${net}'"
	\	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	\	Append To List	${urilist}	${uri}
	[Return]	${urilist}
	
Get FCoE URIs
	[Arguments]		${netlist}
	${urilist} = 	Create List
	:FOR	${net}	IN	@{netlist}
	\	${resp} = 	Fusion Api Get Fcoe Networks		param=?filter="'name'=='${net}'"
	\	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri	
	\	Append To List	${urilist}	${uri}
	[Return]	${urilist}

Log to console and logfile
	[Arguments]	${data}
	Log	${data}
	Log to console	${data}
	
Wait For Task
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${resp}	${timeout}=60 s	${interval}=2 s
	Log to console	\n
	${task} = 	Wait Until Keyword Succeeds		${timeout}	${interval}	Task Reached Endstate	${resp}
	[Return]	${task}
	
Task Reached Endstate
	[Arguments]	${resp}
	Set Log Level	TRACE
	Should Contain	${resp}	uri
	${task_uri} =		Get From Dictionary		${resp}	uri
	${task} = 			Fusion Api Get Task		uri=${task_uri}
	${task_state} = 	Get From Dictionary		${task}		taskState
	${task_category} = 	Get From Dictionary		${task}		category
	${task_name} = 		Get From Dictionary		${task}		name
	${resource} = 		Get From Dictionary		${task['associatedResource']}	resourceName
	${resource_uri} = 	Get From Dictionary		${task['associatedResource']}	resourceUri
	Log to console and logfile  	\t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
	Should Match Regexp	${task_state}	((?i)Warning|Unknown|Terminated|Killed|Error|Completed)	
	[Return]	${task}

Wait For Appliance To Be Ready
	[Documentation]	Waits for an appliance reach a the ready state
	[Arguments]		${appliance}	${timeout}=20 min	${interval}=30 s
	Wait Until Keyword Succeeds		${timeout}	${interval}	Appliance Reached Ready State	${appliance}	

Wait For Appliance To Become Pingable
	[Documentation]	Waits for an appliance to become pingable
	[Arguments]		${appliance}	${timeout}=5 min	${interval}=5 s
	Log to console and logfile 		Pinging: ${appliance} ...
	Wait Until Keyword Succeeds		${timeout}	${interval}	Appliance is pingable 	${appliance}	

Appliance is pingable
	[Arguments]		${appliance}
	Set Log Level	TRACE
	${rc} = 	Run and return rc 	ping ${appliance}		
	Log to console and logfile 		return code: ${rc} ...
	Should be equal as integers 	${rc}	1
	
Appliance Reached Ready State
	[Arguments]		${appliance}
	${state} = 	Fusion Api Get Resource		${appliance}/controller-state.json
	Log to console and logfile	-Appliance state: ${state['state']}
	Should Match Regexp	${state['state']}	((?i)OK)
	
First Time Setup
	[Documentation]	Changes intial administrator password, answers EULA, enables service access, adds licenses, configures appliance interfaces.
	...	If args are null, uses XML ${DATAFILE}
	[Arguments]	${DATAFILE}=${null}	${password}=${null}	${interfaces}=${null}
	#${password} =	Set Variable	${password}
	Log to console and logfile	[FIRST TIME SETUP]
	Wait For Appliance To Become Pingable	${APPLIANCE_IP}		
	Wait For Appliance To Be Ready			${APPLIANCE_IP}
	Log to console and logfile	-Agree to EULA	
	Fusion Api Save EULA	${APPLIANCE_IP}
	Log to console and logfile	-Enable service access
	Fusion Api Set service access	${APPLIANCE_IP}

	#Run Keyword If	${password} is ${null}	Change Initial Administrator Password From Xml	${APPLIANCE_IP}	${DATAFILE}
	${req} = 		Create Dictionary		newPassword=${password}
	...										oldPassword=admin
	...										userName=Administrator
	#Run Keyword If	${password} is not ${null}	Fusion Api Change Administrator password	host=${APPLIANCE_IP}	body=${req}
	Fusion Api Change Administrator password	host=${APPLIANCE_IP}	body=${req}
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}			
	
	#Run Keyword If	${licenses} is ${null}	Add Licenses From Xml							${DATAFILE}
	#Run Keyword If	${licenses} is not ${null}	Fusion Api Add license						${licenses}
	#Run Keyword If	${appliance} is ${null}	Configure Interfaces From Xml				${DATAFILE}
	#Run Keyword If	${appliance} is not ${null}	Fusion Api Configure Interfaces			${appliance}
	Add licenses from variable		${licenses}
	Log to console and logfile	-Configuring Appliance Interfaces, Time, Locale
	${resp} =	Fusion Api Get Appliance Interface Mac	eth0
	${resp} =	Fusion Api Get Appliance Interface Mac	eth0
	Set to dictionary	${appliance['applianceNetworks'][0]}	macAddress	${resp}	
	Sleep 	10s			
	Log to console and logfile	-USING X-API-VERSION: ${X-API-VERSION}
	Log to console and logfile	-DTO CHANGES ON APPLICANCE INTERFACES xapi 200 not working, using 100 below
	${resp} = 	Fusion Api Configure Appliance Interfaces			${appliance}	api=100
	Wait For Task	${resp}		timeout=200s		interval=5s
	
Login all users
	[Arguments]     ${users}
	Set Log Level	TRACE
	:FOR	${user}	IN	@{users}
	\	${user_and_pass} = 	Create Dictionary	userName=${user['userName']}	password=${user['password']}
	\	Fusion Api Login Appliance 		${APPLIANCE_IP}		${user_and_pass}

Run Keyword as user
    [Arguments]     ${user}     ${keyword}      @{varargs}
    ${original_user} =   Fusion Api Get Active user
    Fusion Api Switch Active User   ${user}
    ${resp} =   Run Keyword and continue on failure     ${keyword}  @{varargs}
    Fusion Api Switch Active User   ${original_user}
    [Return]    ${resp}

Run Keyword for List
	[Documentation]	Runs the specified keyword, passing each item in the list as the argument
	[Arguments]	${list}	${keyword}
	Set Log Level	TRACE
	:FOR	${x}	IN 	@{list}
	\	Run Keyword		${keyword}	${x}

#######################################
# TEARDOWN WORFLOWS
#######################################
Suite Teardown
	[Documentation]	Returns appliance to a 'clean' state by removing all resources\enclosures
	Log to console and logfile	[TEARDOWN]
	#
	#Power off ALL Servers
	#Remove All Server Profiles
	#Remove ALL Enclosures
	#Remove ALL Enclosure Groups
	#Remove ALL LIGs
	#Remove ALL Ethernet Networks
	#Remove ALL FC Networks
	#Remove ALL FCoE Networks	
	#Remove ALL Network Sets
	#Remove Users

Remove All Enclosures
	[Documentation]	Querys the appliance for all Enclosures and then removes them
	Log to console and logfile  	Removing ENCLOSURES	
	${encs} = 	Fusion Api Get Enclosures
	:FOR	${enc}	IN	@{encs['members']}
	\		${resp} = 	Fusion Api Remove Enclosure		uri=${enc['uri']}

Remove All Enclosure Groups
	[Documentation]	Querys the appliance for all Enclosure Groups and then removes them
	Log to console and logfile  	Removing ENCLOSURE GROUPS	
	${encs} = 	Fusion Api Get Enclosure Groups
	:FOR	${enc}	IN	@{encs['members']}
	\		${resp} = 	Fusion Api Delete Enclosure Group		uri=${enc['uri']}

Remove All Ethernet Networks
	[Documentation]	Querys the appliance for all Ethernet networks and then removes them
	Log to console and logfile  	Removing ETHERNET NETWORKS	
	${networks} = 	Fusion Api Get Ethernet Networks
	:FOR	${net}	IN	@{networks['members']}
	\		${resp} = 	Fusion Api Delete Ethernet Network		uri=${net['uri']}

Remove All FC Networks
	[Documentation]	Querys the appliance for all FC networks and then removes them
	Log to console and logfile  	Removing FC NETWORKS	
	${networks} = 	Fusion Api Get FC Networks
	:FOR	${net}	IN	@{networks['members']}
	\		${resp} = 	Fusion Api Delete FC Network		uri=${net['uri']}

Remove All FCoE Networks
	[Documentation]	Querys the appliance for all FCoE networks and then removes them
	Log to console and logfile  	Removing FCoE NETWORKS	
	${networks} = 	Fusion Api Get FCoE Networks
	:FOR	${net}	IN	@{networks['members']}
	\		${resp} = 	Fusion Api Delete FCoE Network		uri=${net['uri']}

Remove All LIGs
	[Documentation]	Querys the appliance for all LIGs and then removes them
	Log to console and logfile  	Removing LIGS	
	${ligs} = 	Fusion Api Get LIG
	:FOR	${lig}	IN	@{ligs['members']}
	\		${resp} = 	Fusion Api Delete LIG		uri=${lig['uri']}

Remove All Network Sets
	[Documentation]	Querys the appliance for all Network Sets and then removes them
	Log to console and logfile  	Removing NETWORK SETS	
	${networks} = 	Fusion Api Get Network Sets
	:FOR	${net}	IN	@{networks['members']}
	\		${resp} = 	Fusion Api Delete Network Set		uri=${net['uri']}

Power off ALL servers
	[Documentation]	Querys the appliance for all Servers and then Powers them off
	Log to console and logfile  	Powering off SERVERS	
	${body} = 	Create Dictionary	powerState=Off
	...								powerControl=MomentaryPress
	${servers} = 	Fusion Api Get Server Hardware
	:FOR	${server}	IN	@{servers['members']}
	\		${resp} = 	Fusion Api Edit Server Hardware Power State		body=${body}	uri=${server['uri']}
	\		${task} =	Wait For Task 	${resp} 	240s	10s
	
Remove All Server Profiles
	[Documentation]	Querys the appliance for all Server Profiles and then removes them
	Log to console and logfile  	Removing SERVER PROFILES	
	${profiles} = 	Fusion Api Get Server Profiles
	:FOR	${profile}	IN	@{profiles['members']}
	\		${resp} = 	Fusion Api Delete Server Profile		uri=${profile['uri']}
	
Remove All Users
	[Documentation]	Querys the appliance for all Users and then removes them
	Log to console and logfile  	Removing USERS	
	${users} = 	Fusion Api Get Users
	:FOR	${user}	IN	@{users['members']}
	\		Continue For Loop If	'${user['userName']}'=='Administrator' 	
	\		Continue For Loop If	'${user['userName']}'=='administrator' 	
	\		${resp} = 	Fusion Api Delete User		uri=${user['uri']}
		
#######################################
# VALIDATION
#######################################
New Validate Response
    [Documentation]	Validates data in a response body against expected values using REGEX
    ...	looks up ${validation_code} in codes dicitonary
    ...	${rc} = 		Convert to Integer	400
	...	${valDict} = 	Create Dictionary	status_code=${rc}
	...										errorCode=CRM_DUPLICATE_NETWORK_NAME
	...	Validate Response	${respDict}	${valDict}
	[Arguments]    ${resp}	${validation_code}
	Set Log Level	TRACE
	${validation} = 	Get From Dictionary	${codes}	${validation_code}
	${validation_results} = 	Fusion Api Validate Response	${resp}	${validation}
	# Log results	
	# Fail if results['passed'] is False
	[Return]	${validation_results}
	
Validate Response
    [Documentation]	Validates data in a response body against expected values
    ...	Example:
    ...	${rc} = 		Convert to Integer	400
	...	${valDict} = 	Create Dictionary	status_code=${rc}
	...										errorCode=CRM_DUPLICATE_NETWORK_NAME
	...	Validate Response	${respDict}	${valDict}
	[Arguments]    ${resp}	${validation}
	Set Log Level	TRACE	
	${response} = 	Copy Dictionary	${resp}	
	@{vkeys} =	Get Dictionary Keys	${validation}
	${rkeys} =	Get Dictionary Keys	${response}
	@{keys} =	Remove all the keys in response that are not in validation	${vkeys}	${rkeys}
	:FOR	${x}	IN	@{keys}
	\	Remove From Dictionary	${response}	${x}
	Dictionaries Should Be Equal	${validation}	${response}	msg=Response does not match validation dictionary	values=True
    
Remove all the keys in response that are not in validation
	[Arguments]	${vkeys}	${rkeys}
	:FOR	${x}	IN	@{vkeys}
	\	Remove Values From List	${rkeys}	${x}
	[Return]	${rkeys}
	