***Settings***
Documentation   OVF4532
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource           OVF4532_keywords.txt
Library         Telnet
Library         backping.py
Library             Dialogs
Variables       datavariables.py
Suite Setup          Clean OV

***Variables***
${APPLIANCE_IP}    15.245.131.12
${name}    sample.txt
${name1}    sample1.txt

***Test cases***
1 Login to Appliance
    [Documentation]    Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${appliance_credentials}

2 Creating Networks,LIG,EG,LE
    [Documentation]    Creating Networks,LIG,EG,LE
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n Creating setup for single potash with one switch     console=True
    Log    \n\n Creating Ethernet network    console=True
    Add Ethernet Networks from variable    ${ethernet_networks}

    Log   \n\n Creating LIG     console=True
    Add LIG from variable    ${lig}

    Log     \n\nCreating EG    console=True
    ${resp} =    Add Enclosure Group from variable    ${enc_group['EG']}
    Run Keyword If  ${resp['status_code']} != 201    fail    msg=\nUnable to create EG
    ...         ELSE    log    \nsuccessfully created EG

    Log     \n\n Creating LE     console=True
    Add Logical Enclosure from variable    ${LE['LE']}

3 Verifying Interconnect state and port status after creating LE
    [Documentation]    Verifying Interconnect state and port status after creating LE
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    2 min    60s    Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

4 Creating LSG
    [Documentation]    creating LSG
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\nCreating LSG    console=True
    Add Logical Switch Group from variable    ${LSG1}

5 Creating LS in Monitored mode
    [Documentation]    Creating LS in Monitored mode
    Set Log Level    TRACE

    Log    \n\nCreating LS in Monitored mode     console=True
    Add Logical Switch from variable    ${LS1}

6 Edit LS to change from Monitored mode to Managed Mode
    [Documentation]    Editing LS to change from Monitored mode to Managed Mode
    Set Log Level    TRACE

    Log    \n\nEditing LS to Managed mode    console=True
    ${resp}    Edit LS from Monitored mode to Managed Mode    ${LSG}    ${LS1_edit}
    Wait For Task2    ${resp}    20min    1min

7 Verifying Interconnect state and Port status after creating LS
    [Documentation]    Verifying IC state and port status after creating LS
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after creating LS   console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC1}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

8 Validating stacking state of ls after creating LS
    [Documentation]     Validating stacking state of ls after creating LS
    Set Log Level    TRACE
    Log    \n\nValidating stacking state of LS     console=True
    Wait Until Keyword Succeeds    8 min    20s    Verify Stacking state of LS

9 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    Log    \n\Validating domain id of switch    console=True
    Verify Domain Id of switch

10 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

11 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

12 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    #Log    \n\nValidating uplinkports from potash connected to arista as neighbor    console=True
    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC1[${x}]}    ${UP_Ports_TC1[${x}]}

13 Creating server profile
    [Documentation]    creating server profile
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\n Powering off servers    console=True
    Power off ALL Servers
    Log    \n\n Creating server profile    console=True
    ${resp}    Add Server Profiles from variable   ${server_profiles}

    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${server_profiles[${x}]['serverHardwareUri']}
    Sleep    10min

14 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True


    Log    \n\n server1 toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


15 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


######### Test case 2  All ULS ports are on a single Potash with at least 1 port connected to each Arista ToR switch in a 2 switch configuration (Dual-homed from each Potash) ############

2_1 Editing uplinkset to change uplinkports from single potash connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from single potash connected to two Arista switches
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[0]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

2_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured
    #Sleep    2min

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

2_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE
    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    8 min    20s     Verify Stacking state of LS

2_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE

    Log    \n\nverifying domain id of switch    console=True
    Verify Domain Id of switch

2_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}


2_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

2_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    #Log    \nValidating from singlepotash to arista1 as neighbor    console=True
    Log    \nValidate Neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC2[${x}]}    ${UP_Ports_TC2_SW1[${x}]}

    #Log    \Validating from singlepotash to arista2 as neighbor    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC2[${x}]}    ${UP_Ports_TC2_SW2[${x}]}

2_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True


    Log    \n\n server1 toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

2_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


###### Test case 3 ULS ports span both Potash and all ports are connected to a single Arista ToR switch in a 2 switch configuration (Single-homed from each Potash)  ##################
3_1 Editing uplinkset to change uplinkports from both potash connected to single Arista switches
    [Documentation]    Editing uplinkset to change uplinkports from both potash connected to single Arista switches
    Set Log Level    TRACE

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[1]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed


3_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \     Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{Uplink_bay2}
    \    Wait Until Keyword Succeeds    15 min    20s      Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

    :FOR    ${icm}    IN       @{Uplink_bay5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G


3_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    8 min    20s     Verify Stacking state of LS

3_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    Log    \n\nverifying domain id of switch    console=True
    Verify Domain Id of switch

3_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

3_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}


3_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC3}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch_ports_TC3[${x}]}    ${UP_Ports_TC3[${x}]}

3_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True


    Log    \n\n server1 toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True

    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

3_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

######## Test case-4 ULS ports span both Potash with at least 2 ports from each Potash connected a different Arista ToR switch in a 2 switch configuration (Dual-homed from each Potash) ##########

4_1 Editing uplinkset to change uplinkports from both potash connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from both potash connected to two Arista switches
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[2]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed


4_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

4_3 Validating Stacking state of LS after editing uplinkset
    [Documentation]    Validating Stacking state of LS after editing uplinkset
    Set Log Level    TRACE

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    8 min    20s     Verify Stacking state of LS

4_4 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    Log    \n\nVerifying domain id of switch    console=True
    Verify Domain Id of switch

4_5 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\nValidating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}


4_6 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of Ls
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

4_7 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    #Log    \n\nValidating uplinkports from potash connected to arista1 as neighbor    console=True
    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}


4_8 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

4_9 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True

    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}



############ Test case 5 - Disable/Enable ARISTA1 switch port1 and verify traffic flow #############
5_1 Editing uplinkset to change uplinkports from single potash connected to two Arista switches
    [Documentation]    Editing uplinksets to change uplinkports from single potash connected to two Arista switches
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\nEditing LI uplink ports     console=True
    ${resp}    Edit uplinkset    ${US_names[0]}    ${li_uplinksets['${Uplink_port[0]}']}    ${LI}
    ${task} =    Wait For Task    ${resp}    5min    15s
    Should Be Equal As Strings    ${task['taskState']}    Completed

5_2 Verifying Interconnect state and Port status after editing LI
    [Documentation]    Verifying IC state and port status after editing LI
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured
    #Sleep    2min

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying port status after editing LI    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

5_3 Verifying the uplink port is added in the internal link set
    [Documentation]    Verifying the uplink port is added in the internal link set
    Set Log Level    TRACE

    Log    \nGetting length of uplink ports in ULS     console=True
    ${uplinkport_len}    Get uplinkport Length    ${US_name}
    Log    \n\nVerifying ILS having ports same as ULS     console=True
    ${portlist}    Verifying Internal Link Set
    ${portlen}    Get Length    ${portlist}
    Log    \n\nLength of ports in ILS ${portlen}    console=True
    Run Keyword If    '${portlen}' == '${uplinkport_len}'    Log    \nUplinkport is added in ILS    console=True    ELSE    FAIL    Log    \nUplinkport not added in ILS    console=True


5_4 Editing switch port to disable
    [Documentation]    Editing switch port to disable
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    ${switchuri_list}    Create List

    Log    \n\nFetching Switch uri      console=True
    ${len}    Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}     Get switch uri   ${SWITCH_IP[${x}]}
    \    Append To List     ${switchuri_list}     ${switch_uri}
    Set Global variable    ${switchuri_list}

    Log    \n\nFetching uri of ARISTA1 from list     console=True
    ${sw1_uri}     Catenate    ${switchuri_list[0]}/update-ports
    Log    \n\n uri of switch1${sw1_uri}    console=True

    Log    \n\nEvaluating Index of switchport tobe disabled     console=True
    ${port_no_index}    Evaluate     ${port_no}-1

    ${res}    Fusion Api Get Switch
    ${l}    Get Length      ${res['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${switch1_uri}     Run Keyword If      '${res['members'][${x}]['name']}' != '${switch1}'     CONTINUE FOR LOOP       ELSE      Run keyword     Fetch PortID value    ${res['members'][${x}]}    ${port_no_index}
    \    Log    \n\nDisabling ARISTA switch1 port1:1    console=True
    \    Set To Dictionary     ${switch_body[0]}    enabled    False
    \    ${resp}     Fusion Api Edit Switch     body=${switch_body}     uri=${sw1_uri}
    \    Wait For Task2    ${resp}    20min    1min

    Log    \n\nVerifying ARISTA1 switch port1:1 is disabled     console=True
    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${switch1}    ${port_no_index}    status=Unlinked

5_5 Verifying uplink port is disabled
    [Documentation]    Verifying uplink port is disabled
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s    Verify Interconnect    ${x}    state=Configured

    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying uplink port is unlinked   console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}      portStatus=Unlinked     opSpeed=Speed0M

5_6 Verifying the uplink port is removed from internal link set
    [Documentation]    Verifying the uplink port is removed from internal link set
    Set Log Level    TRACE

    Log    \nGetting length of uplink ports in ULS     console=True
    ${uplinkport_len}    Get uplinkport Length    ${US_name}
    Log    \nEvaluating length of port after disable    console=True
    ${uplink_len}    Evaluate    ${uplinkport_len} - 1
    Log    \n\nVerifying ILS having ports same as ULS     console=True
    ${portlist}    Verifying Internal Link Set
    ${portlen}    Get Length    ${portlist}
    Log    \n\nLength of ports in ILS ${portlen}    console=True
    Run Keyword If    '${portlen}' == '${uplink_len}'    Log    \nUplinkport removed from ILS    console=True    ELSE     FAIL       Log    \nUplinkport not removed from ILS    console=True

5_7 Verify traffic after disable Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss after disabling switch port
    Set Log Level    TRACE

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True


    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

5_8 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss after disabling switch port
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


5_9 Editing switch port to enable
    [Documentation]    Editing switch port to enable
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    ${switchuri_list}    Create List

    Log    \n\nFetching Switch uri      console=True
    ${len}    Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${switch_uri}     Get switch uri   ${SWITCH_IP[${x}]}
    \    Append To List     ${switchuri_list}     ${switch_uri}
    Set Global variable    ${switchuri_list}

    Log    \n\nFetching uri of ARISTA1 from list     console=True
    ${sw1_uri}     Catenate    ${switchuri_list[0]}/update-ports
    Log    \n\n uri of switch1${sw1_uri}    console=True

    Log    \n\nEvaluating Index of switchport to be enabled     console=True
    ${port_no_index}    Evaluate     ${port_no}-1

    ${res}    Fusion Api Get Switch
    ${l}    Get Length      ${res['members']}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${switch1_uri}     Run Keyword If      '${res['members'][${x}]['name']}' != '${switch1}'     CONTINUE FOR LOOP       ELSE      Run keyword     Fetch PortID value    ${res['members'][${x}]}    ${port_no_index}
    \    Log    \n\nEnabling ARISTA switch1 port1:1    console=True
    \    Set To Dictionary     ${switch_body[0]}    enabled    True
    \    ${resp}     Fusion Api Edit Switch     body=${switch_body}     uri=${sw1_uri}
    \    Wait For Task2    ${resp}    20min    1min

    Log    \n\nVerifying ARISTA1 switch port1:1 is enabled     console=True
    Wait Until Keyword Succeeds    15 min    60s    Verify switch port status    ${switch1}    ${port_no_index}    status=Linked

5_10 Verifying uplink port is enabled
    [Documentation]    Verifying uplink port is enabled
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state   console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \n\nVerifying uplink port is linked   console=True
    :FOR    ${icm}    IN       @{UP_Ports_TC5}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}       status=OK    portStatus=Linked     opSpeed=Speed40G

5_11 Verifying the uplink port is added in the internal link set
    [Documentation]    Verifying the uplink port is added in the internal link set
    Set Log Level    TRACE

    Log    \nGetting length of uplink ports in ULS     console=True
    ${uplinkport_len}    Get uplinkport Length    ${US_name}
    Log    \n\nVerifying ILS having ports same as ULS     console=True
    ${portlist}    Verifying Internal Link Set
    ${portlen}    Get Length    ${portlist}
    Log    \n\nLength of ports in ILS ${portlen}    console=True
    Run Keyword If    '${portlen}' == '${uplinkport_len}'   Log    \nUplinkport is added in ILS    console=True    ELSE    FAIL    Log    \nUplinkport not added in ILS    console=True

5_12 Validating Stacking state of LS
    [Documentation]    Validating Stacking state of LS
    Set Log Level    TRACE

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    8 min    20s     Verify Stacking state of LS

5_13 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    Log    \n\n verifying domain id of switch    console=True
    Verify Domain Id of switch

5_14 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

5_15 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of LS
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}

5_16 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    #Log    \nValidating from singlepotash to arista1 as neighbor    console=True
    Log    \nValidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC2[${x}]}    ${UP_Ports_TC2_SW1[${x}]}

    #Log    \Validating from singlepotash to arista2 as neighbor    console=True
    ${l}    Get Length    ${UP_Ports_TC2_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC2[${x}]}    ${UP_Ports_TC2_SW2[${x}]}

5_17 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE

    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True


    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

5_18 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


########Test case-6 Create LIG-A,B Side with both potash connected to 2 Arista and verifying server to server ping #########

6 Cleaning up the appliance
    [Documentation]     Cleanup OV
    Set Log Level    TRACE
    Log    \n\n Cleaning up the appliance     console=True
    Clean OV

6_1 Creating LIG with A Side & B Side,EG,LE
    [Documentation]    Creating LIG with A Side & B Side,EG,LE
    Set Log Level    TRACE

    Log    \n\n Creating Ethernet network    console=True
    Add Ethernet Networks from variable    ${ethernet_networks}
    Log   \n\n Creating LIG-A    console=True
    Log    ${ligA}    console=True
    Add LIG from variable    ${ligA}
    Log   \n\n Creating LIG-B    console=True
    Add LIG from variable    ${ligB}

    Log     \n\nCreating EG    console=True
    ${resp} =    Add Enclosure Group from variable    ${enc_grp_AB['EG_AB']}
    Run Keyword If  ${resp['status_code']} != 201    fail    msg=\nUnable to create EG
    ...         ELSE    log    \nsuccessfully created EG

    Log     \n\n Creating LE     console=True
    Add Logical Enclosure from variable    ${LE_AB['LE_AB']}

6_2 Verifying Interconnect state and Port status after creating LE
    [Documentation]    Verifying IC state and port status status after creating LE
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    Verifying port status after creating LE    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G
    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

6_3 Creating LSG
    [Documentation]    creating LSG
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\nCreating LSG    console=True
    Add Logical Switch Group from variable    ${LSG1}

6_4 Creating LS in Managed mode
    [Documentation]    creating LS in Managed mode
    Set Log Level    TRACE

    Log    \n\nCreating LS     console=True
    Add Logical Switch from variable    ${LS2}


6_5 Verifying Interconnect state and Port status after creating LS
    [Documentation]    Verifying IC state and port status status after creating LS
    Set Log Level    TRACE

    Log     \n\nVerifying the interconnects are in configured state    console=True
    :FOR    ${x}    IN    @{Interconnect_dto}
    \    Wait Until Keyword Succeeds    5 min    60s     Verify Interconnect    ${x}    state=Configured


    Log    Fetching ICM URI    console=True
    :FOR    ${icm}    IN    @{Interconnect_name}
    \    ${uri} =    Get IC URI    ${icm}
    \    Run Keyword If    '${icm}' == '${Interconnect_name[0]}'    Set Suite Variable    ${ICM2_uri}    ${uri}
    \    ...    ELSE IF    '${icm}' == '${Interconnect_name[1]}'    Set Suite Variable    ${ICM5_uri}    ${uri}

    Log    \nVerifying port status after creating LS    console=True
    :FOR    ${icm}    IN       @{ETH_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM2_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G
    :FOR    ${icm}    IN       @{ETH2_UPLINKS}
    \    Wait Until Keyword Succeeds    15 min    20s     Verify Port    ${ICM5_uri}     ${icm}     status=OK     portStatus=Linked     opSpeed=Speed40G

6_6 Verifying two LI are created
    [Documentation]    Verifying two LI are created
    Set Log Level    TRACE

    Log    \n\nValidating two LI are created    console=True
    ${resp}    Fusion Api Get Li
    ${LI_name}    Create List
    Log    \n\n${resp}    console=True
    Log    \n\n${resp['members'][0]['name']}    console=True
    Log    \n\n${resp['members'][1]['name']}    console=True
    :FOR    ${x}    IN RANGE     ${No_of_LI}
    \    ${name}  Get From Dictionary    ${resp['members'][${x}]}    name
    \    Append To List    ${LI_name}    ${name}
    ${l}    Get Length    ${LI_name}
    Log    \n\n${l}     console=True
    Run Keyword If     '${l}' != '${No_of_LI}'    Fail    ELSE    Log    \nTwo LI's are created    console=True

6_7 Validating Stacking state of LS
    [Documentation]    Validating Stacking state of LS
    Set Log Level    TRACE

    Log    \n\nValidating stacking state of LS    console=True
    Wait Until Keyword Succeeds    8 min    20s     Verify Stacking state of LS

6_8 Validating domain id of switch
    [Documentation]    Validating domain id of switch
    Set Log Level    TRACE
    Log    \n\n verifying domain id of switch    console=True
    Verify Domain Id of switch

6_9 Validating switch per id and role
    [Documentation]    Validating switch per id and role
    Set Log Level    TRACE

    Log    \n\n Validating switch per id and role    console=True
    ${l}     Get Length    ${SWITCH_IP}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Verify switch per id and role    ${SWITCH_IP[${x}]}    ${mem_id[${x}]}    ${roles[${x}]}

6_10 Validating stacking member id of Ls
    [Documentation]    Validating stacking member id of LS
    Set Log Level    TRACE

    Log    \n\nValidating stacking member id    console=True
    Validating stacking member id of switch    ${role_name}


6_11 Validating uplinkports from potash connected to Arista ports as Neigbor
    [Documentation]     Validating uplinkports from potash connected to Arista ports as Neigbor
    Set Log Level    TRACE

    #Log    \n\nValidating uplinkports from potash connected to arista1 as neighbor    console=True
    Log    \nvalidate neighbor information    console=True
    ${l}    Get Length    ${UP_Ports_TC4_SW1}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH1}    ${Switch1_ports_TC4[${x}]}    ${UP_Ports_TC4_SW1[${x}]}

    ${l}    Get Length    ${UP_Ports_TC4_SW2}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Validate Neighbor Information    ${SWITCH2}    ${Switch2_ports_TC4[${x}]}    ${UP_Ports_TC4_SW2[${x}]}

6_12 Creating server profile
    [Documentation]    creating server profile
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log    \n\n Powering off servers    console=True
    Power off ALL Servers
    Log    \n\n Creating server profile    console=True
    ${resp}    Add Server Profiles from variable   ${server_profiles_AB}

    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${server_profiles_AB[${x}]['serverHardwareUri']}
    Sleep    10min

6_13 Getting Server IP and pinging from server1 to gateway ip and server1 to server2 verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip1}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip2}
    Log    \n\n${ping}    console=True

    Log    \n\n server1 toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nServer1toserver2ping    console=True
    Ping IP and Verify packet loss    ${server_ip1}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}

6_14 Pinging from Server2 to gateway and Ping from server2 to server1 and verifying loss
    [Documentation]    Getting Server IP and pinging IP,verifying packet loss
    Set Log Level    TRACE
    Log    \n\n Getting Ip and gateway ip of server enc1 bay1    console=True
    ${IP1}    ${gate_ip1}    Get Server Ip Windows    ${ilo_details_enc1_bay1}
    Set Global Variable    ${server_ip}    ${IP1[0]}
    Set Global Variable    ${gateway_ip}    ${gate_ip1}

    Log    \n\n Getting Ip and gateway ip of server enc2 bay1    console=True
    ${IP2}    ${gate_ip2}    Get Server Ip Windows   ${ilo_details_enc2_bay1}
    Set Global Variable    ${server_ip2}    ${IP2[0]}
    Set Global Variable    ${gateway_ip2}    ${gate_ip2}

    ${ping}    Replace String Using Regexp    ${ping_cmd}    server_ip    ${server_ip}
    Log    \n\n${ping}    console=True

    Log    \n\nserver2toGatewayping    console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping_gateway}    ${name1}

    Log    \n\nserver2toserver1 ping     console=True
    Ping IP and Verify packet loss    ${server_ip2}    ${server1_details['username']}     ${server1_details['password']}     ${ping}    ${name}


