*** Settings ***
Documentation        Feature Test: F119

Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Variables                 rest_api_variables.py

Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt

*** Variables ***
${APPLIANCE_IP}                 15.245.131.121

*** Test Cases ***

TC-10--Delete-single-user
    [Documentation]    Issue DEL Delete user.  Verify in OV user was deleted
    Log to console and logfile    \n-Deleting single user
    ${resp} =    Fusion Api Add User   body=${user_single}
    Run Keyword If  ${resp['status_code']} !=200    fail    msg=user01 creation failed
    ...         ELSE    Log to console and logfile  \n user01 created succesfully for single user deletion!!
    ${resp} =        Fusion Api Get User    param=?filter="'loginname'=='user01'"
    Return From Keyword If   ${resp['members']} == []   None
    ${uri} =   Get From Dictionary   ${resp['members'][0]}   uri
    ${resp} =   Fusion Api Remove User     uri=${uri}
    ${task} =   Wait For Task   ${resp}     60s    2s
    Run Keyword If  ${resp['status_code']} !=204    fail    msg=user01 deletion failed
    ...         ELSE    Log to console and logfile  \n user01 deleted succesfully !!
    ${resp}=    Fusion Api Get User    param=?filter="'loginname'=='user01'"
    Run Keyword If      ${resp['count']} == 0    Log to console and logfile  \n Not found user user01 after deletion
    ...         ELSE    fail    msg="Found user user01 after deletion"

TC-9--Create-multiple-users
    [Documentation]    Issue POST Create multiple users(8).  Verify in OV that all 8 users were created
    Log to console and logfile    \n-Creating multiple users
    :FOR   ${user}   IN   @{users}
    \       ${user_name}    Get From Dictionary   ${user}   userName
    \       ${resp} =   Fusion Api Add User     body=${user}
    \       ${task} =   Wait For Task   ${resp}     60s    2s
    \       Run Keyword If  ${resp['status_code']} !=200    fail    msg=${user_name} creation failed
    \       ...         ELSE    Log to console and logfile  \n ${user_name} created succesfully !!
    \       ${resp}=    Fusion Api Get User    param=?filter="'loginname'=='${user_name}'"
    \       Run Keyword If      ${resp['count']} == 0       fail    Log to console and logfile  \nNot found user ${user_name} after creation
    \       ...         ELSE    Log to console and logfile   \nFound user ${user_name} after creation

TC-11--Delete-multiple-users
    [Documentation]    Issue DEL Delete multiple users(8).  Verify in OV that all 8 users were deleted
    Log to console and logfile    \n-Deleting multiple users
    :FOR   ${user}   IN   @{users}
    \       ${user_name}    Get From Dictionary   ${user}   userName
    \       ${resp} =        Fusion Api Get User    param=?filter="'userName'=='${user_name}'"
    \       Return From Keyword If   ${resp['members']} == []   None
    \       ${uri} =   Get From Dictionary   ${resp['members'][0]}   uri
    \       ${resp} =   Fusion Api Remove User     uri=${uri}
    \       ${task} =   Wait For Task   ${resp}     60s    2s
    \       Run Keyword If  ${resp['status_code']} !=204    fail    msg=${user_name} deletion failed
    \       ...         ELSE    Log to console and logfile  \n ${user_name} deleted succesfully !!
    \       ${resp}=    Fusion Api Get User    param=?filter="'loginname'=='${user_name}'"
    \       Run Keyword If      ${resp['count']} == 0    Log to console and logfile  \n Not found user ${user_name} after deletion
    \       ...         ELSE    fail    msg="Found user ${user_name} after deletion"

TC-2--Create-single-fc-network
    [Documentation]    Issue POST Create FC Network.  Verify in OV the FC network was created
    Log to console and logfile    \n-Adding FC Network
    ${fcnet} =   Create Dictionary   name=FC_01
    ...                             linkStabilityTime=30
    ...                             autoLoginRedistribution=true
    ...                             fabricType=FabricAttach
    ...                             type=fc-networkV300
    ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    ${task} =   Wait For Task   ${resp}     60s    2s
    Run Keyword If  ${resp['status_code']} != 202    fail    msg=FC_01 creation failed
    ...         ELSE    Log to console and logfile  \n FC_01 created succesfully !!
    ${resp} =   Fusion Api Get FC Networks   param=?filter="'name'=='FC_01'"
    Run Keyword If      ${resp['count']} == 0       fail    msg="Not found fc netowrk FC_01 after creation"
    ...         ELSE    Log to console and logfile   \nFound fc netowrk FC_01 after creation

TC-6--Delete-single-fc-network
    [Documentation]    Issue DEL FC Network.  Verify in OV the FC network was deleted
    Log to console and logfile    \n-Removing FC Network
    ${resp} =     Fusion Api Get Fc Networks        param=?filter="'name'=='FC_01'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =   Fusion Api Delete FC Network        uri=${uri}
    ${task} =   Wait For Task   ${resp}     60s    2s
    Run Keyword If  ${resp['status_code']} != 202    fail    msg=FC_01 deletion failed
    ...         ELSE    Log to console and logfile  \n FC_01 deleted succesfully !!
    ${resp}=    Fusion Api Get FC Networks   param=?filter="'name'=='FC_01'"
    Run Keyword If      ${resp['count']} == 0    Log to console and logfile  \nNot found fc netowrk FC_01 after deletion
    ...         ELSE    fail    msg="Found fc network FC_01 after deletion" 

TC-7--Create-multiple-fc-network-from-variable-file
    [Documentation]    Issue POST Create multiple FC networks.  Verify in OV the networks were created
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{mul_fcnets}
    \       ${fc_name}    Get From Dictionary   ${fcnet}   name
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       ${task} =   Wait For Task   ${resp}     60s    2s
    \       Run Keyword If  ${resp['status_code']} !=202    fail    msg=${fc_name} creation failed
    \       ...         ELSE    Log to console and logfile  \n ${fc_name} created succesfully !!
    \       ${resp} =   Fusion Api Get FC Networks   param=?filter="'name'=='${fc_name}'"
    \       Run Keyword If      ${resp['count']} == 0       fail    Log to console and logfile   \nNot found fc netowrk ${fc_name} after creation
    \       ...         ELSE    Log to console and logfile  \nFound fc netowrk ${fc_name} after creation

TC-8--Delete-multiple-fc-network-from-varaible-file
    [Documentation]    Issue DEL Delete multiple FC networks.  Verify in OV the networks were deleted
    Log to console and logfile    \n-Removing FC Networks
    :FOR   ${fcnet}   IN   @{mul_fcnets}
    \       ${fc_name}    Get From Dictionary   ${fcnet}   name
    \       ${resp} =     Fusion Api Get Fc Networks        param=?filter="'name'=='${fc_name}'"
    \       ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    \       ${resp} =   Fusion Api Delete FC Network        uri=${uri}
    \       ${task} =   Wait For Task   ${resp}     60s    2s
    \       Run Keyword If  ${resp['status_code']} !=202    fail    msg=${fc_name} deletion failed
    \       ...         ELSE    Log to console and logfile  \n ${fc_name} deleted succesfully !!
    \       ${resp}=    Fusion Api Get FC Networks   param=?filter="'name'=='${fc_name}'"
    \       Run Keyword If      ${resp['count']} == 0    Log to console and logfile  \n Not found fc network ${fc_name} after deletion
    \       ...         ELSE    fail    msg="Found fc network ${fc_name} after deletion"

TC-5--Create-connections-with-4Gb
    [Documentation]    Issue POST Conections with downlink speeds set to 4Gb.  Verify error was given and in OV link was not set to 4Gb
    Log to console and logfile    \n-Creating Server Profile with unsupported connection speed
    ${resp} =     Add Server Profiles with issues from variable     ${server_profiles_4Gb}
    Run Keyword If      '${resp}' != 'INVALID_REQUESTED_BANDWIDTH_FOR_NATIVE_FC'        fail    msg="Expected Error Code INVALID_REQUESTED_BANDWIDTH_FOR_NATIVE_FC not found"

TC-Server-profile-cases
    [Documentation]    TC16:-Issue POST to create an assigned server profile.  Verify in OV server profile was created
    ...                TC3:-Issue POST Connections with downlink speed set to 16Gb and Auto.  Verify output and in OV
    ...                TC1:-Issue GET Connections and verify output.  Verify 16Gb is listed
    ...                TC17:-Edit Server profiles, modify downlink connection
    ##_TC16_##
    Log to console and logfile    \n-Creating Server Profile
    Add Server Profiles from variable     ${server_profiles}
    ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    Run Keyword If      ${resp['count']} == 0       fail    msg="Not found server profile ${PROFILE} after creation"
    ...         ELSE    Log to console and logfile   \nFound server profile ${PROFILE} after creation
    ##_TC3_##
    Log to console and logfile    \n-Checking Profile Connection speeds
    ${connections_list}=      Get From Dictionary   ${resp['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_1 is not having Auto speed"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_2 is not having 16Gb speed"
    ##_TC1_##
    Log to console and logfile    \n-Checking Connections Operational speeds
    ${conn_list} =       Fusion Api Get Connections
    ${lcon} =    Get Length   ${conn_list['members']}
    :FOR   ${x}  IN RANGE   0   ${lcon}
    \   Run Keyword If   '${conn_list['members'][${x}]['fcPortOpSpeed']}' != 'Speed16G'   fail    msg="All connections are not having 16Gb operationl speed"
    Log to console and logfile      \n All connections have 16Gb operational speed.
    ##_TC17_##
    Log to console and logfile    \n-Editing and Checking Profile Connection
    ${fc3_resp} =     Fusion Api Get Fc Networks        param=?filter="'name'=='FC_3'"
    ${fc3_uri} =     Get From Dictionary        ${fc3_resp['members'][0]}    uri
    :FOR   ${x}   IN RANGE      0      ${len}
    \       Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'      Run Keywords    Set to dictionary          ${connections_list[${x}]}    requestedMbps    16000
    \   ...   AND      Set to dictionary          ${connections_list[${x}]}    networkUri    ${fc3_uri}
    Set to dictionary    ${resp['members'][0]}    connections    ${connections_list}
    ${resp} =    Fusion Api Edit Server Profile    body=${resp['members'][0]}    uri=${uri}
    ${task} =   Wait For Task   ${resp}     30s    2s
    ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE}'"
    ${connections_list}=      Get From Dictionary   ${resp['members'][0]}   connections
    ${lcon} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${lcon}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'    Run Keywords    Should Be Equal    ${connections_list[${x}]['requestedMbps']}   16000
    \        ...      AND      Should Be Equal   ${connections_list[${x}]['networkUri']}   ${fc3_uri}    msg="Editing for Connection ${connections_list[${x}]['name']} failed in Profile ${PROFILE}"
    Log to console and logfile    \n\n Connection in Profile ${PROFILE} edited successfully.
    
TC-Create-LIG-with-12-UplinkSets-and-Verify-speeds-4Gb/8Gb/16Gb/Auto
    [Documentation]    TC14:-Issue POST Create 12 Uplink Sets in LIG.  Verify in OV the uplink sets were created
    ...                TC4:-Issue POST Connections with uplink speeds set to 4Gb/8Gb/16Gb and Auto. Verify output and in OV
    ##_TC14_#
    Log to console and logfile  \n Creating LIG with 12 Uplinksets having speeds 16Gb/8Gb/4Gb/Auto
    ${body} =   Build LIG body      ${ligs['lig3']}
    ${resp} = 	Fusion Api Create LIG	${body}
    ${task} =	Wait For Task 	${resp} 	120s	2s
    Run Keyword If  ${resp['status_code']} !=202    fail    LIG Creation Failed\n${resp}
    ...         ELSE    Log to console and logfile  \n\nLIG Created Succesfully !!
    
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${LIG3}'"
    Run Keyword If  ${resp['count']} !=1    fail    Not found ${LIG3} after LIG creation
    ...         ELSE    Log to console and logfile  \n\nFound ${LIG3} after LIG creation
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Run Keyword If  ${uplink_len} !=12    fail    ${uplink_len} Uplinksets are not exist in ${LIG3} \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in ${LIG3}
    
    ##_TC4_##
    Log to console and logfile  \n Verifying Uplinkset speeds for 16Gb/8Gb/4Gb/Auto
    ${ulist} = 	Create List
    :FOR    ${INDEX}    IN RANGE    1  5
    \   ${uplink_name} = 	Get From Dictionary		${lig_uplink_sets['UplinkSet_${INDEX}']}     name
    \   Append To List	${ulist}	${uplink_name}
    :FOR    ${x}    IN RANGE    0  ${uplink_len}
    \    Run Keyword If      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == '${ulist[0]}'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Auto    msg="UplinkSet_1 is not having speed Auto." 
    \   ...    ELSE IF      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == '${ulist[1]}'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed16G    msg="UplinkSet_2 is not having speed Speed16G." 
    \   ...    ELSE IF      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == '${ulist[2]}'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed8G    msg="UplinkSet_3 is not having speed Speed8G." 
    \   ...    ELSE IF      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == '${ulist[3]}'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed4G    msg="UplinkSet_4 is not having speed Speed4G."
    Log to console and logfile  \nUplinkSets are successfully created with uplink speeds 16Gb/8Gb/4Gb and Auto
    
TC-15--Delete-LIG-with-12-Uplinksets
    [Documentation]     TC15:-Issue DEL Delete all 12 uplink sets in LIG.  Verify on OV the uplink sets were deleted
    Log to console and logfile  \n Deleting LIG having 12 Uplinksets
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${LIG3}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =    Fusion Api Delete Lig        uri=${uri}
    Run Keyword If  ${resp['status_code']} != 202    fail    Failed to delete ${LIG3}
    ...         ELSE    Log to console and logfile  \n ${LIG3} deleted succesfully !!
    Log to console and logfile  \n\n****Verify the uplink sets were deleted in OV****
    ${get_lig_resp} =   Fusion Api Get Lig        uri=${uri}
    Run Keyword If  ${get_lig_resp['status_code']} != 404    fail    ${LIG3} exists in OV ${get_lig_resp}
    ...         ELSE    Log to console and logfile  \n\n ${LIG3} with 12 UplinkSets does not exist in OV

TC-12--Create-12-UplinkSets-in-LI
    [Documentation]    TC12:-Issue POST Create 12 Uplink Sets in LI.  Verify in OV the uplink sets were created.
    Log to console and logfile    \n-Deleting the server profile ${PROFILE}
    ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =   Fusion Api Delete Server Profile        uri=${uri}
    ${task} =      Wait For Task    ${resp}     300s    10s
    Log to console and logfile    \n-Deleting the existing LE ${LE1}
    ${resp} =   Fusion Api Get Logical Enclosure       param=?filter="'name'=='${LE1}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =   Fusion Api Delete Logical Enclosure       uri=${uri}
    ${task} =      Wait For Task    ${resp}     600s    10s
    ${body} =   Build LIG body      ${ligs['lig2']}
    Log to console and logfile    \n-Creating LIG ${LIG2}
    ${resp} = 	Fusion Api Create LIG	${body}
    ${task} =	Wait For Task	${resp}    60s	2s
    Add Enclosure Group from variable   ${enc_groups['enc_group2']}
    Add Logical Enclosure from variable   ${les['le2']}
    ${li_uri} = 	Get LI URI      ${LE2}-${LIG2}
    Log to console and logfile    \n-Creating UplinkSets in LI
    :FOR  ${li_uplink_set}  in  @{li_uplink_sets}
    \       ${us} = 		Copy Dictionary	${li_uplink_set}
    \       ${body} = 		Build US body 	${us}	${li_uri}
    \       ${up_name}    Get From Dictionary   ${li_uplink_set}   name
    \       Log to Console and logfile   \n-Creating the Uplinkset ${up_name}
    \       ${resp} = 		Fusion Api Create Uplink Set	body=${body}
    \       ${task} =	Wait For Task	${resp}    60s	2s
    \       Run Keyword If  ${resp['status_code']} !=202    fail    msg=Uplinkset ${up_name} creation failed
    \       ...         ELSE    Log to console and logfile  \nUplinkset ${up_name} created succesfully !!
    \       Sleep    60s
    \       ${resp} =   Fusion Api Get Uplink Set   param=?filter="'name'=='${up_name}'"
    \       Run Keyword If      ${resp['count']} == 0       fail    Log to console and logfile   \nNot found Uplinkset ${up_name} after creation
    \       ...         ELSE    Log to console and logfile  \nFound Uplinkset ${up_name} after creation
    \       Sleep    10s

TC-13--Delete-12-UplinkSets-in-LI
    [Documentation]    TC13:-Issue DEL Delete all 12 uplink sets in LI.  Verify on OV the uplink sets were deleted    
    Log to console and logfile    \n-Deleting the 12 Uplinksets in LI
    :FOR  ${li_uplink_set}  in  @{li_uplink_sets}
    \       ${up_name}    Get From Dictionary   ${li_uplink_set}   name
    \       Log to Console and logfile   \n-Removing Uplinkset ${up_name}
    \       ${resp} =     Fusion Api Get Uplink Set        param=?filter="'name'=='${up_name}'"
    \       ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    \       ${resp} =    Fusion API delete uplink set        uri=${uri}
    \       ${task} =   Wait For Task   ${resp}     60s    2s
    \       Run Keyword If  ${resp['status_code']} !=202    fail    msg=Uplinkset ${up_name} deletion failed
    \       ...         ELSE    Log to console and logfile  \nUplinkset ${up_name} deleted succesfully !!
    \       Sleep    60s
    \       ${resp}=    Fusion Api Get Uplink Set   param=?filter="'name'=='${up_name}'"
    \       Run Keyword If      ${resp['count']} == 0    Log to console and logfile  \n Not found UplinkSet ${up_name} after deletion
    \       ...         ELSE    fail    msg="Found UplinkSet ${up_name} after deletion"
    \       Sleep    10s


*** Keywords ***
Suite Setup Tasks
    Set Log Level      TRACE
    ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
	Run Keyword and Ignore Error    Write To ciDebug Log
	Log to console and logfile	[TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
    Clean OV
    ${fc_networks} =	Get Variable Value	${fcnets}
	Run Keyword If	${fc_networks} is not ${null}    Add FC Networks from variable		${fc_networks}
	${body} =   Build LIG body      ${ligs['lig1']}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}    60s	2s
    Add Enclosure Group from variable   ${enc_groups['enc_group1']}
    Sleep   10s
    Add Logical Enclosure from variable   ${les['le1']}


Clean OV
    [Documentation]	Cleans the appliance
	Log to console and logfile	\nCleaning the OV
	Power off ALL Servers
	Remove All Server Profiles
	Remove All Logical Enclosures
	Remove ALL Enclosure Groups
	Remove ALL LIGs
	Remove ALL Ethernet Networks
	Remove ALL FC Networks
	Remove ALL FCoE Networks
	Remove ALL Network Sets
	Remove ALL Users

Add Server Profiles with issues from variable
	[Documentation]	Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]		${profiles}
	Log to console and logfile  	Adding SERVER PROFILES
	:FOR	${profile}	IN	@{profiles}
	\   ${profile} =    Copy Dictionary     ${profile}
	\	${shuri} = 	Get from Dictionary	${profile}	serverHardwareUri
	\	${uri} = 	Get Server Hardware URI		${shuri}
	\	Set to Dictionary	${profile}	serverHardwareUri	${uri}
	\	${eg} = 	Get from Dictionary	${profile}	enclosureGroupUri
	\	@{words} = 	Split String	${eg}	:
	\	${type} = 	Get From List	${words}	0
	\	${eg} = 	Get From List	${words}	1
	\	${uri} = 	Get Enclosure Group URI	${eg}
	\	Set to Dictionary	${profile}	enclosureGroupUri	${uri}
	\	${enc} = 	Get from Dictionary	${profile}	enclosureUri
	\	@{words} = 	Split String	${enc}	:
	\	${type} = 	Get From List	${words}	0
	\	${enc} = 	Get From List	${words}	1
	\	${uri} = 	Get Enclosure URI	${enc}
	\	Set to Dictionary	${profile}	enclosureUri	${uri}
	\	${connections} = 	Get From Dictionary	${profile}	connections
	\	${connections} = 	Lookup Connection Uris	${connections}
	\   Set to Dictionary   ${profile}  connections     ${connections}
	\	${resp} = 	Fusion Api Create Server Profile		body=${profile}
	\	${task} =   Wait For Task	${resp}		timeout=5 mins		interval=10s
	\   ${task_ErrorCode} =    Get From Dictionary     ${task['taskErrors'][0]}   errorCode
    [Return]    ${task_ErrorCode}

Suite Teardown Tasks
	[Documentation]	Returns appliance to a 'clean' state by removing all resources\enclosures
	Log to console and logfile	[TEARDOWN]
	#
	Run Keyword If All Tests Passed    Power off ALL Servers
	Run Keyword If All Tests Passed    Remove All Server Profiles
	Run Keyword If All Tests Passed    Remove All Logical Enclosures
	#Run Keyword If All Tests Passed    Remove ALL Enclosures
	Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
	Run Keyword If All Tests Passed    Remove ALL LIGs
	Run Keyword If All Tests Passed    Remove ALL LS
	Run Keyword If All Tests Passed    Remove ALL LSGs
	Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
	Run Keyword If All Tests Passed    Remove ALL FC Networks
	Run Keyword If All Tests Passed    Remove ALL FCoE Networks
	Run Keyword If All Tests Passed    Remove ALL Network Sets
	Run Keyword If All Tests Passed    Remove ALL Users