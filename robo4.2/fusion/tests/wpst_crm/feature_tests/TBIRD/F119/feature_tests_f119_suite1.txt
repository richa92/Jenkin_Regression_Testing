*** Settings ** *
Documentation        Feature Tests:
    F119_Suite1
...                 F119_Misc.1_20987 - -MISC.1 Verify the Carbon module shows up in support dump for LE, LI
...                 F119_SP.2_20636 - -SP.2 Create Server Profile with 2 FC networks with 1port from ICM in bay1 and 1 from bay4. Verify link status in SP is ok
...                 F119_SP.3_20634 - -SP.3 Create Server Profile with 2 FC networks, each port speed set to Auto.  Verify port speed
...                 F119_SP.4_20545 - -SP.4 Create Server Profile with 2 FC networks, each port speed set to 16Gb.  Verify port speed
...                 F119_SP.1_20635 - -SP.1 Create Server Profile with FC network. Delete FC network and observe the error message OV displays in the Server Profile
...                 F119_SP.5_20581 - -SP.5 Create Server Profile with 2 FC networks, each port speed set to 8Gb.  Verify port speed
...                 F119_SP.6_20580 - -SP.6 Create Server Profile with 2 FC networks, each port speed set to 4Gb.  Verify port speed
...                 F119_SP.7_20489 - -SP.7 Create Server Profile using virtual MAC, WWN, and SN.  Verify in OV and TOR switch
...                 F119_SP.8_20502 - -SP.8 Create Server Profile using physical MAC, WWN, and SN.  Verify in OV and TOR switch
...                 F119_SP.9_20503 - -SP.9 Create Server Profile using user - defined SN.  Verify in OV
...                 F119_LINK.01_20464 - -LINK.01 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
...                 F119_LINK.04_20467 - -LINK.04  Verify Emulex and Qlogic 16Gb mezz cards get link
...                 F119_PM.6_20643 - -PM.6 Configure the port monitoring in LI and Verify the Analyzer and Monitored port status in LI and Interconnect
...                 F119_PM.7_20994 - -PM.7 Configure the port monitoring in LI and Verify the Error Message when attempted to create one more Monitored Port
...                 F119_20479_20478_20971 - -ENC.1 Verify Oneview reports Carbon module is in configured state when module is inserted into enclosure
... --ENC.2 Verify Oneview reports Carbon module is absent state when module is removed from enclosure
... --LIG_LI.8  Create LIG with Carbon ICM.  Remove and insert ICM.  Verify OV reports ICM as absent, then configured state
...                 F119_LIG_LI.4_20970 - -Edit LIG, edit uplink set Verify changes are passed down to LI.
...                 F119_LIG_LI.5_20504 - -Edit LI, make changes to uplink sets, change name, ports speeds.
...                 F119_ALR.2_20633 - -Set the Auto Redistribution interval to 5, 15, 60, 120 secs.  Verify login distribution occurs according to specified intervals
...                 F119_PM_20640_20641_20642 - -PM.3 Create 1 mirror port and 1 analyzer port, set the traffic flow from server. Verify the analyzer port is receiving traffic from server
... --PM.4 Create 1 mirror port and 1 analyzer port, set the traffic flow to server. Verify the analyzer port is receiving traffic to server
... --PM.5 Create 1 mirror port and 1 analyzer port, set the traffic flow to and from server.  Verify the analyzer port is receiving traffic to and from server
...                 F119_INTEROP.05_20531 - -INTEROP.05 Verify Carbon comes back online with no errors and links come back online when module is powered off then on

Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Library                   OperatingSystem
Library                   Process
Library                   ServerOperations
Library                   decrypt_dump.py
Variables                 data_variables.py

Suite Setup               Suite Setup Tasks
# Suite Teardown            Suite Teardown Tasks

Resource            .. / .. / .. / .. / resource / fusion_api_all_resource_files.txt

*** Variables ** *
${APPLIANCE_IP}                 15.245.131.121
${FUSION_IP}                    15.245.131.121
${SWITCH_IP}                  15.245.128.121          # FC Switch IP Address
${LE_DUMP_FILE}            ${CURDIR} / support_dump / fusion_le_supportdump.sdmp
${dump_file_path}          ${CURDIR} / support_dump
${decryptor_path}          ${CURDIR} / Decryptor

*** Test Cases ** *

F119_Misc1_20987
     [Documentation]    MISC.1 Verify the Carbon module shows up in support dump for LE, LI
     Log to console and logfile    \n Checking if the ICs are in configured state and getting each ICs serial Numbers
     Create Directory      ${dump_file_path}
     ${SNlist} = Create List
     :
         FOR    ${name}  IN  @{INTERCONNECTS}
     \   ${IC} = Fusion Api Get Interconnect    param =?filter = "'name'=='${name}'"
     \   ${state} = Get From Dictionary     ${IC['members'][0]}   state
     \   Run Keyword If    '${state}' != 'Configured'      fail      msg = "The IC module ${name} is not in configured state"
     \   ...     ELSE   Log to console and logfile    \n The IC modules ${name} is in configured state
     \   Run Keyword If    '${IC['members'][0]['name']}' != '${name}'    Log to console and logfile   "Name of IC is not equal"
     \   ${sn} = Get From Dictionary     ${IC['members'][0]}     serialNumber
     \   Append To List    ${SNlist}    ${sn}
     ${IC1} = Get From List    ${SNlist}   0
     ${IC4} = Get From List    ${SNlist}   1
     Log to console and logfile     \n - Getting the LE id
     ${LI_name} = Get Variable Value    ${LI}
     ${le_uri} = Get LE URI      ${LE1}
     ${logicalEnclosureId} = Fetch From Right        ${le_uri} /

     Log to console and logfile     \n - Creating support dump for the LE
     ${Response} = Fusion Api Get Logical Enclosure Support Dump   body =${LE_SupportDump_Payload}   id =${logicalEnclosureId}
     Should Be Equal as Strings      ${Response['status_code']}       202       msg = Failed to initiate Create Enclosure Support Dump.
     Log to console and logfile     \n - Waiting for dump creation task to complete
     ${task} = Wait For Task           ${Response}     15min    1min
     Should Be Equal as Strings      ${task['status_code']}      200       msg = Failed to Create Enclosure Support Dump.
     Log to console and logfile     \n - Support dump created successfully

     Empty Directory     ${dump_file_path}
     ${supportDumpUri} = Get From Dictionary     ${task['associatedResource']}   resourceUri
     ${Response1} = Fusion Api Download Support Dump            uri =${supportDumpUri}   localfile =${LE_DUMP_FILE}
     Should Be Equal as Strings      ${Response1['status_code']}      200           msg = Failed to Download Enclosure Support Dump.
     Log to console and logfile      \n - Support Dump downloaded successfully

     Log to console and logfile      \n - Decrypting, extracting the downloaded dump file and verifying if the Carbon module is present
     Decrypt and extract the dump file    ${dump_file_path}    ${decryptor_path}
     :
         FOR  ${x}  IN  @{icbays}
     \     OperatingSystem.File Should Exist      ${CURDIR} / support_dump / logical - enclosure / var / tmp / le - support - dumps / li - 0 /${LI_Name} / encl000000${ENC1} / bay${x} / VCFC4${IC${x}}*
     ...     msg = The Carbon module VCFC4${IC${x}} is not found in LE Dump
     \    Log to console and logfile      \n - Verified Carbon Module VCFC4${IC${x}} is showing up in LE support dump

F119_SP2_20636
     [Documentation]     SP.2 Create Server Profile with 2 FC networks with 1port from ICM in bay1 and 1 from bay4. Verify link status in SP is ok
    Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profiles
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} !=1       fail    msg="Not found server profiles ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    \   ${SpLink}=      Get From Dictionary     ${resp['members'][0]}     status
    \   Run Keyword If     '${SpLink}' != 'OK'     fail    msg="Server Profile ${name} status is not OK
    \    ...         ELSE    Log to console and logfile     \n The status of server profile ${name} is verified as OK

    ${conn}=     Fusion Api Get Connections
    ${lcon} =   Get Length   ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \  ${constat} =   Get From Dictionary   ${conn['members'][${x}]}    status
    \  Run Keyword If     '${constat}' != 'OK'     fail   msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK

    Power on ALL servers
    sleep   200s
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x} =    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of second linked downlinkport is verified OK in ${IC}

F119_SP3_20634
     [Documentation]   SP.3 Create Server Profile with 2 FC networks, each port speed set to Auto.  Verify port speed
    Clear Profile Configurations
    Log to console and logfile    \n-Creating 2 Server Profiles
    :FOR    ${SP}  IN   @{server_profile_20634}
    \   Add Server Profiles from variable     ${SP}
    ${connlist}=    Create List
    :FOR    ${name}   IN    @{PROFILES}
    \   ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} != 1       fail    msg="Not found server profile ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    ${resp1} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"
    ${connections_list}=      Get From Dictionary   ${resp1['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['requestedMbps']}' != 'Auto'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE1}"
    ${connections_list}=      Get From Dictionary   ${resp2['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['requestedMbps']}' != 'Auto'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE2}"
    Log to console and logfile   \nVerified each downlink is having Auto speed in both SPs

F119_SP4_20545
     [Documentation]   SP.4 Create Server Profile with 2 FC networks, each port speed set to 16Gb.  Verify port speed
    Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profile
    :FOR    ${SP}  IN   @{multi_profile}
    \   Add Server Profiles from variable     ${SP}
    ${connlist}=    Create List
    :FOR    ${name}   IN    @{PROFILES}
    \   ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} != 1       fail    msg="Not found server profile ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    ${resp1} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"
    ${connections_list}=      Get From Dictionary   ${resp1['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['requestedMbps']}' != '16000'    fail    msg="Downlinks are not having 16G speed in ${PROFILE1}"
    ${connections_list}=      Get From Dictionary   ${resp2['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['requestedMbps']}' != '16000'    fail    msg="Both downlinks are not having Auto speed in ${PROFILE2}"
    Log to console and logfile   \nVerified each downlink is having 16G speed in both SPs

F119_SP1_20635
     [Documentation]  SP.1 Create  Server Profile with FC network.  Delete FC network and observe the error message OV displays in the Server Profile
     Set Log Level      TRACE
     Fusion Api Login Appliance         ${APPLIANCE_IP}     ${admin_credentials}
     # Clear Profile Configurations
     Log to console and logfile    \nCreating an FC network
     ${fc_networks}=    Get Variable Value        ${fc_20635}
     Run Keyword If   ${fc_networks} is not ${null}    Add FC Networks from variable   ${fc_networks}
     ${lig_body}=   Build LIG body      ${ligs['lig20635']}
     Edit LIG and Perform an Update From Group     ${lig_body}
     :FOR    ${SP}  IN  @{server_profiles_20635}
     \   Add Server Profiles from variable     ${SP}
     Log to console and logfile    \n-Removing FC Network
     ${fc_name} =   Get From Dictionary   ${fc_20635[0]}   name
     ${uri}=     Get FC Uri        ${fc_name}
     ${resp2}=   Fusion Api Delete FC Network        uri=${uri}
     Run Keyword If  ${resp2['status_code']} !=202    fail    msg=${fc_name} Deletion Failed. \n ErrorCode:${resp['errorCode']}\nMessage #${resp['message']}
     ${task}=   Wait For Task   ${resp2}     60s    2s
     Run Keyword If  '${task['taskState']}' !='Completed'  or  '${task['status_code']}' !='200'   fail    msg=${fc_name} Deletion Failed. \n ErrorCode:${task[taskErrors][0][errorCode]}\n :Message ${task[taskErrors][0][errorCode]}
     ...         ELSE    Log to console and logfile  \n\n${fc_name} Deleted Successfully !!
     sleep    20s
     Log to console and logfile   \n-Checking the error message in SP on deletion of Fc Network.
     ${Alert_msg} =    Create List
     ${resp} =    Fusion Api Get Alerts
     ${mem_resp} =    Get From Dictionary    ${resp}    members
     ${len} =     Get Length    ${mem_resp}
     :FOR   ${x}    IN RANGE    0    ${len}
     \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='server-profiles'    Continue For Loop
     \   ${desc}=    Get From Dictionary    ${mem_resp[${x}]}      description
     \   ${cmd_output}=    Get Regexp Matches    ${desc}    An error has occurred on connection 1.\\s+Network FC_20635 assigned to this connection was deleted.
     \   ${Count11}=    Get Length    ${cmd_output}
     \   Run Keyword If  '${Count11}' == '1'    Append To List    ${Alert_msg}    ${cmd_output}    ELSE   log to console   \n-Verified the alerts msg is not same
     ${Count2}=    Get Length    ${Alert_msg}
     Log to console and logfile   ${Count2}
     Run Keyword If  '${Count_2}' != '2'    Fail    ELSE   log to console   \n-Verified the alerts msg in both the server profiles

F119_SP5_20581
     [Documentation]   SP.5 Create Server Profile with 2 FC networks, each port speed set to 8Gb.  Verify port speed
    Clear Profile Configurations
    Log to console and logfile     \n-Creating LIG with 2 uplinksets speeds set to 8Gb
    ${lig_body} =   Build LIG body      ${ligs['lig20581']}
    Edit LIG and Perform an Update From Group     ${lig_body}

    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${LIG1}'"
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    :FOR    ${x}    IN RANGE    0  ${uplink_len}
    \    Run Keyword If      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_1'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed8G    msg="UplinkSet_1 is not having speed Speed8G"
    \   ...    ELSE IF      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_2'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed8G    msg="UplinkSet_2 is not having speed Speed8G."
    Log to console and logfile     \n-Verified the speeds of uplinksets if its showing 8Gb

    Log to console and logfile    \n-Creating 2 Server Profiles
   :FOR    ${SP}  IN   @{server_profiles}
    \   Add Server Profiles from variable     ${SP}
    :FOR    ${name}   IN    @{PROFILES}
    \   ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} != 1       fail    msg="Not found server profile ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    ${resp1} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"

    Log to console and logfile    \n-Checking for Profile Connection speeds
    ${connections_list}=      Get From Dictionary   ${resp1['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_1 is not having Auto speed in ${PROFILE1}"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_2 is not having 16Gb speed in ${PROFILE1}"
    ${connections_list}=      Get From Dictionary   ${resp2['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_3'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_3 is not having Auto speed in ${PROFILE2}"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_4'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_4 is not having 16Gb speed in ${PROFILE2}"
    Log to console and logfile   \nVerified each downlink is displaying the set speeds of Auto and 16Gb.

F119_SP6_20580
    [Documentation]   SP.6 Create Server Profile with 2 FC networks, each port speed set to 4Gb.  Verify port speed
    Clear Profile Configurations
    Log to console and logfile     \n-Creating LIG with 2 uplinksets speeds set to 4Gb
    ${lig_body} =   Build LIG body      ${ligs['lig20580']}
    Edit LIG and Perform an Update From Group     ${lig_body}

    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${LIG1}'"
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    :FOR    ${x}    IN RANGE    0  ${uplink_len}
    \    Run Keyword If      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_1'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed4G    msg="UplinkSet_1 is not having speed Speed4G"
    \   ...    ELSE IF      '${resp['members'][0]['uplinkSets'][${x}]['name']}' == 'UplinkSet_2'    Should Be Equal
        ...   ${resp['members'][0]['uplinkSets'][${x}]['logicalPortConfigInfos'][0]['desiredSpeed']}   Speed4G    msg="UplinkSet_2 is not having speed Speed4G."
    Log to console and logfile     \n-Verified the speeds of uplinksets if its correctly set to 4Gb

    Log to console and logfile    \n-Creating 2 Server Profiles
   :FOR    ${SP}  IN   @{server_profiles}
    \   Add Server Profiles from variable     ${SP}
    :FOR    ${name}   IN    @{PROFILES}
    \   ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} != 1       fail    msg="Not found server profile ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    ${resp1} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${resp2} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"

    Log to console and logfile    \n-Checking for Profile Connection speeds
    ${connections_list}=      Get From Dictionary   ${resp1['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_1 is not having Auto speed in ${PROFILE1}"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_2 is not having 16Gb speed in ${PROFILE1}"
    ${connections_list}=      Get From Dictionary   ${resp2['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_3'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_3 is not having Auto speed in ${PROFILE2}"
    \        ...    ELSE IF           '${connections_list[${x}]['name']}' == 'Downlink_4'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_4 is not having 16Gb speed in ${PROFILE2}"
    Log to console and logfile   \nVerified each downlink is displaying the set speeds of Auto and 16Gb.

F119_SP7_20489
     [Documentation]    SP.7 Create Server Profile using virtual MAC, WWN, and SN.  Verify in OV and TOR switch
    Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profiles with Virtual MAC,SN and wwntypes
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \  Run Keyword If      ${resp['count']} !=1       fail    msg="Not found server profiles after creation"
    \  ...         ELSE    Log to console and logfile   \nFound server profile after creation
    \  Validate Response   ${resp['members'][0]}   ${valDict_20489}
    Log to console and logfile    \n\n The macType, wwnType and snType fields are verified as Virtual in both SPs in OV.
    Power on ALL Servers
    Sleep   200s
    ${connections}=      Fusion Api Get Connections
    ${lcon} =   Get Length   ${connections['members']}
    ${wlist} =    Create List
    :FOR     ${x}   IN RANGE   0   ${lcon}
    \   ${wwnval}         Get From Dictionary      ${connections['members'][${x}]}    wwpn
    \   Append To List    ${wlist}     ${wwnval}
    Log to console and logfile     \nVerifying the WWPN value in TOR switch
    Login to Switch via SSH
    ${swlist}=     Create List
    :FOR    ${sw}    IN    @{Cmds}
    \   ${op}=      Execute Switch Command    ${sw}
    \   ${wwpn}=    Get Lines Matching RegExp    ${op}    ^(\t[0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2})$
    \   ${strip}=   Remove String Using Regexp    ${wwpn.strip()}    \t
    \   ${split}=   Split To Lines    ${strip}
    \   Append To List    ${swlist}    ${split}
    ${swl}=     Combine Lists   ${swlist[0]}    ${swlist[1]}
    List Should Contain Sublist    ${swl}    ${wlist}    msg=Virtual WWPN values displayed are different in switch and SP
    Log to console and logfile     \n\nThe Virtual WWPN values displayed in switch and under connections in SP are verified as same.

F119_SP8_20502
     [Documentation]        SP.8 Create Server Profile using physical MAC, WWN, and SN.  Verify in OV and TOR switch
    Clear Profile Configurations
    Log to console and logfile    \n-Creating Server Profile with Physical MAC,SN and wwntypes
    :FOR     ${SP}   IN   @{server_profile_20502}
    \  Add Server Profiles from variable     ${SP}

    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \  Run Keyword If      ${resp['count']} !=1       fail    msg="Not found server profiles after creation"
    \  ...         ELSE    Log to console and logfile   \nFound server profile after creation
    \  Validate Response   ${resp['members'][0]}   ${valDict_20502}
    Log to console and logfile    \n\n The macType, wwnType and snType fields are verified as Physical in both SPs in OV.
    Power on ALL Servers
    Sleep   200s
    ${connections}=      Fusion Api Get Connections
    ${lcon} =   Get Length   ${connections['members']}
    ${wlist} =    Create List
    :FOR     ${x}   IN RANGE   0   ${lcon}
    \   ${wwnval}         Get From Dictionary      ${connections['members'][${x}]}    wwpn
    \   Append To List    ${wlist}     ${wwnval}
    Log to console and logfile     \nVerifying the WWPN value in TOR switch
    Login to Switch via SSH
    ${swlist}=     Create List
    :FOR    ${sw}    IN    @{Cmds}
    \   ${op}=      Execute Switch Command    ${sw}
    \   ${wwpn}=    Get Lines Matching RegExp    ${op}    ^(\t[0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2})$
    \   ${strip}=   Remove String Using Regexp    ${wwpn.strip()}    \t
    \   ${split}=   Split To Lines    ${strip}
    \   Append To List    ${swlist}    ${split}
    ${swl}=     Combine Lists   ${swlist[0]}    ${swlist[1]}
    List Should Contain Sublist    ${swl}    ${wlist}    msg=Physical WWPN values displayed are different in switch and SP
    Log to console and logfile     \n\nThe Physical WWPN values displayed in switch and under connections in SP are verified as same.

F119_SP9_20503
      [Documentation]   SP.9 Create Server Profile using user-defined SN.  Verify in OV
    Clear Profile Configurations
    :FOR    ${SP}   IN   @{server_profile_20503}
    \     Add Server Profiles from variable     ${SP}
    :FOR    ${name}   IN   @{PROFILES}
    \   ${resp}=      Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} != 1       fail    msg="Server profile ${name} is not created"
    \    ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    Log to console and logfile    \n Verifying in SP if the displayed serial no. and UUID is same as that while gven at creation.
    ${resp1} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    Validate Response    ${resp1['members'][0]}      ${val_sp1_20503}
    Log to console and logfile      \n The User defined SN and UUID given during creation is getting displayed in ${PROFILE1}
    ${resp2} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE2}'"
    Validate Response    ${resp2['members'][0]}      ${val_sp2_20503}
    Log to console and logfile      \n The User defined SN and UUID given during creation is getting displayed in ${PROFILE2}

F119_LINK01_20464
     [Documentation]    LINK.01 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    Clear Profile Configurations
    Log to console and logfile    \n-Editing existing LIG and updating LI
    ${lig_body} =   Build LIG body      ${ligs['lig20464']}
    Edit LIG and Perform an Update From Group     ${lig_body}

    Log to console and logfile    \nCreating Server Profile with Connections having speed 16Gb and Auto.Power on the Server
    Add Server Profiles from variable    ${server_profile1}
    Power on server    ${server_profile1[0]['serverHardwareUri']}
    sleep   240s

    Log to console and logfile   \nVerifying the Downlink port linked status in IC and the speed set in SP
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[0]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect       param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][0]['portName']}' != '${Linked_Downlink_port[0]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][0]['portName']} is not in Linked state for bay${resp['members'][0]['ports'][0]['bayNumber']}
    \    ...         ELSE    Log to console and logfile  \n Downlink port ${resp['members'][0]['ports'][0]['portName']} is in Linked state for bay${resp['members'][0]['ports'][0]['bayNumber']}!!
    ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE1}'"
    ${connections_list}=      Get From Dictionary   ${resp['members'][0]}   connections
    ${len} =   Get Length   ${connections_list}
    :FOR     ${x}   IN RANGE   0   ${len}
    \        Run Keyword If      '${connections_list[${x}]['name']}' == 'Downlink_1'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   'Auto'    msg="Downlink_1 is not having Auto speed"
    \        ...    ELSE IF      '${connections_list[${x}]['name']}' == 'Downlink_2'    Should Not Be Equal    ${connections_list[${x}]['requestedMbps']}   '16000'    msg="Downlink_2 is not having 16Gb speed"
    Log to console and logfile  \nConnections are available for the speed set Auto and 16Gb

F119_LINK04_20467
     [Documentation]    LINK.01 Verify downlink speed of 16Gb and Auto while uplink set speeds are set to 4Gb and Auto
    Clear Profile Configurations
    Log to console and logfile    \n-Editing existing LIG and updating LI
    ${lig_body} =   Build LIG body      ${ligs['lig20467']}
    Edit LIG and Perform an Update From Group     ${lig_body}

    Log to console and logfile    \nCreating 2 Server Profiles with Connections having speed 16Gb.Power on all the Servers
    :FOR   ${serverprofile}   IN   @{multi_profile}
    \    Add Server Profiles from variable    ${serverprofile}
    Power on ALL servers
    sleep   240s

    Log to console and logfile    \nVerifying the Linked Downlink ports in IC
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect       param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['portName']}' != '${Linked_Downlink_port[${x}]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is not in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}
    \    ...         ELSE    Log to console and logfile   \n Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}!!
    \    ${x} =    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect       param=?filter="'name'=='${IC}'"
    \    Run Keyword If    '${resp['members'][0]['ports'][${x}]['portName']}' != '${Linked_Downlink_port[${x}]}'    fail    msg=Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is not in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}
    \    ...         ELSE    Log to console and logfile   \n Downlink port ${resp['members'][0]['ports'][${x}]['portName']} is in Linked state for ICbay${resp['members'][0]['ports'][${x}]['bayNumber']}!!

    Log to console and logfile    \nVerifying the Port Speeds in Server profile
    :FOR    ${x}    IN RANGE    0  2
    \    ${y} =    Set Variable    0
    \    ${PROFILE} =    Get Variable Value  ${PROFILES[${x}]}
    \    ${resp} =      Fusion Api Get Server Profiles     param=?filter="'name'=='${PROFILE}'"
    \    ${connections_list}=      Get From Dictionary   ${resp['members'][0]}   connections
    \    ${conn1_dlname} =    Get Variable Value    ${multi_profile[${x}][0]['connections'][${y}]['name']}
    \    Run Keyword If      '${connections_list[${y}]['name']}' != '${conn1_dlname}' or '${connections_list[${y}]['requestedMbps']}' != '16000'    msg=${conn1_dlname} is not having 16Gb speed for profile ${PROFILE}
    \    ...         ELSE    Log to console and logfile  \n${conn1_dlname} is having 16Gb speed for profile ${PROFILE}!!
    \    ${y} =    Evaluate    ${y} + 1
    \    ${conn2_dlname} =    Get Variable Value    ${multi_profile[${x}][0]['connections'][${y}]['name']}
    \    Run Keyword If      '${connections_list[${y}]['name']}' != '${conn2_dlname}' or '${connections_list[${y}]['requestedMbps']}' != '16000'    msg=${conn2_dlname} is not having 16Gb speed for profile ${PROFILE}
    \    ...         ELSE    Log to console and logfile  \n${conn2_dlname} is having 16Gb speed for profile ${PROFILE}!!

F119_PM6_20643
    [Documentation]    PM.6 Configure the port monitoring in LI and Verify the Analyzer and Monitored port status in LI and Interconnect
    Clear Profile Configurations
    Log to console and logfile    \nCreating Server Profile
    Add Server Profiles from variable    ${server_profile3}
    Power on server    ${server_profile3[0]['serverHardwareUri']}
    sleep   240s

    Log to console and logfile    \nConfiguring Port Monitoring in LI
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${ANALYZER_PORT}'
    Set To Dictionary   ${li_portmonitor['analyzerPort']}   portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Set To Dictionary   ${li_portmonitor['monitoredPorts'][0]}  portUri    ${downlinkuri['uri']}

    ${uri} =    Get LI URI    ${LI}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor}    uri=${uri}
    Run Keyword If  ${resp['status_code']} !=202    fail    Port Monitoring failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     60s    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring !!
    sleep    180s

    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in LI
    ${portmtr} =    Fusion Api Get Li Port Monitor Configuration    uri=${uri}
    ${bay_no} =    Get from Dictionary    ${uplink_sets['UplinkSet_1']['logicalPortConfigInfos'][0]}    bay
    ${d_port} =    Get from Dictionary    ${downlinkuri}    portName
    Run Keyword If    '${portmtr['analyzerPort']['portName']}' != '${ANALYZER_PORT}' or '${portmtr['analyzerPort']['bayNumber']}' != '${bay_no}' or '${portmtr['analyzerPort']['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Analyser port in LI !!
    Run Keyword If    '${portmtr['monitoredPorts'][0]['portName']}' != '${d_port}' or '${portmtr['monitoredPorts'][0]['bayNumber']}' != '${bay_no}' or '${portmtr['monitoredPorts'][0]['portStatus']}' != 'Linked'    fail    msg=Not found Monitored port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Monitored ports in LI !!

    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in IC
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${z}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${z}]['portName']}' == '${ANALYZER_PORT}'
    ${u_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Run Keyword If    '${u_portinfo['portMonitorConfigInfo']}' != 'AnalyzerPort' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port-portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portMonitorConfigInfo and linked state for Analyzer port in IC !!
    :FOR    ${z}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${z}]['portName']}' == '${d_port}'
    ${d_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Run Keyword If    '${d_portinfo['portMonitorConfigInfo']}' != 'MonitoredBoth' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Monitored ports-portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portMonitorConfigInfo and linked state for Monitored ports in IC !!

F119_PM7_20994
    [Documentation]    Configure the port monitoring in LI and Verify the Error Message when attempted to create one more Monitored Port
    Clear Profile Configurations
    Log to console and logfile    \nCreating Server Profiles
    :FOR   ${serverprofile}   IN   @{profile_20994}
    \    Add Server Profiles from variable    ${serverprofile}
    Power on ALL servers
    sleep   240s

    Log to console and logfile    \nAssign the Analyzer port URI and Monitored port URI
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${ANALYZER_PORT}'
    Set To Dictionary   ${li_portmonitor['analyzerPort']}   portUri    ${ports[${x}]['uri']}
    Set To Dictionary   ${add_mirrorport['analyzerPort']}   portUri    ${ports[${x}]['uri']}

    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Set To Dictionary   ${li_portmonitor['monitoredPorts'][0]}  portUri    ${downlinkuri['uri']}
    Set To Dictionary   ${add_mirrorport['monitoredPorts'][0]}  portUri    ${downlinkuri['uri']}

    ${ic_resp1} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[1]}'"
    ${ports1} =    Get from Dictionary    ${ic_resp1['members'][0]}    ports
    ${len1} =    Get Length    ${ports1}
    :FOR    ${z}    IN RANGE    0  ${len1}
    \    Exit For Loop If    '${ports1[${z}]['portStatus']}' == 'Linked' and '${ports1[${z}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports1[${z}]}
    Set To Dictionary   ${add_mirrorport['monitoredPorts'][1]}  portUri    ${downlinkuri['uri']}

    Log to console and logfile    \nConfiguring Port Monitoring in LI with One Analyzer and One Monitored Port
    ${uri} =    Get LI URI    ${LI}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor}    uri=${uri}
    Run Keyword If  ${resp['status_code']} !=202    fail    Port Monitoring failed for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     60s    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring !!
    sleep    180s

    Log to console and logfile    \n\nAdding Second Monitored Port
    ${err_resp} =    Fusion Api Update LI Port Monitor Configuration    body=${add_mirrorport}    uri=${uri}
    Should Be Equal As Strings    ${err_resp['message']}    ${error_msg_20994}
    Log to console and logfile    \nSuccessfully verified the error message

    Log to console and logfile    \nVerify the Port Monitor Configuration in LI
    ${resp1} =    Fusion Api Get Li Port Monitor Configuration    uri=${uri}
    ${mprt_len} =    Get Length    ${resp1['monitoredPorts']}
    Run Keyword If      ${mprt_len} != 1       fail    Not found one Monitored Port for ${LI}
    ...         ELSE    Log to console and logfile   \nFound only one Monitored Port for ${LI}

F119_20479_20478_20971
     [Documentation]   ENC.1 Verify Oneview reports Carbon module is in configured state when module is inserted into enclosure
     ...               ENC.2 Verify Oneview reports Carbon module is absent state when module is removed from enclosure
     ...               LIG_LI.8  Create LIG with Carbon ICM.  Remove and insert ICM.  Verify OV reports ICM as absent, then configured state
#   Get Carbon ICs info
    ${ic_list} =     Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Log to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    Log to console and logfile  \n\nChecking current state
    \    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Log to console and logfile  \n\nThe IC module ${ic_list[${x}]['name']} is in Configured state
    \    Log to console and logfile  \n\nRemoving and adding back Carbon ${ic_list[${x}]['name']} module
    \    Get EM IP
    \    Get EM Token    ${ENC1}
    \    EFuse ICM    EFuseReset   ${ic_bay}
    \    Wait Until Keyword Succeeds    5 min   15s     IC reached state    ${ic_list[${x}]['uri']}    Absent
    \    Log to console and logfile  \n\nThe IC module ${ic_list[${x}]['name']} is in Absent state
    \    Wait Until Keyword Succeeds    20min   10s     IC reached state    ${ic_list[${x}]['uri']}    Adding
    \    Log to console and logfile  \n\nThe IC module ${ic_list[${x}]['name']} is in Adding state
    \    Wait Until Keyword Succeeds    20min   15s     IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Log to console and logfile  \n\nThe IC module ${ic_list[${x}]['name']} Removed and Added back Successfully!! and is in Configured state

F119_LIG_LI4_20970
     [Documentation]    LIG_LI.4 Edit LIG, edit uplink set Verify changes are passed down to LI.
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI
    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    Power on ALL servers
    sleep   200s
    Log to console and logfile    \n-Modifying UplinkSet name and UplinkSet port speed in LIG
    ${lig_body} =   Build LIG body      ${ligs['lig20970']}
    Edit LIG and Perform an Update From Group LI     ${lig_body}
    Log to console and logfile  update from group completed

    Log to console and logfile    \n-Verifying Uplinkset is updated in LI as per LIG
    :FOR    ${x}    IN RANGE    1   3
    \   ${uplinkset_uri} =      Get uplinkset resp      ${uplink_sets['UplinkSet_20970_${x}']['name']}
    \   Should Be Equal as Strings      ${uplinkset_uri['name']}       ${uplink_sets['UplinkSet_20970_${x}']['name']}   msg=Failed to match uplinkset name
    \   Should Be Equal as Strings      ${uplinkset_uri['portConfigInfos'][0]['desiredSpeed']}       ${uplink_sets['UplinkSet_20970_${x}']['logicalPortConfigInfos'][0]['speed']}     msg=Failed to match uplinkset speed

    sleep   60s

    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} !=1       fail    msg="Not found server profiles ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    \   ${SpLink}=      Get From Dictionary     ${resp['members'][0]}     status
    \   Run Keyword If     '${SpLink}' != 'OK'     fail    msg="Server Profile ${name} status is not OK after Uplinkset modification"
    \    ...         ELSE    Log to console and logfile     \n The status of server profile ${name} is verified as OK after Uplinkset modification

    ${conn}=     Fusion Api Get Connections
    ${lcon} =   Get Length   ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \  ${constat} =   Get From Dictionary   ${conn['members'][${x}]}    status
    \  Run Keyword If     '${constat}' != 'OK'     fail   msg="Connection status is not OK after Uplinkset modification"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK after Uplinkset modification

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x} =    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of second linked downlinkport is verified OK in ${IC}


F119_LIG_LI5_20504
     [Documentation]    LIG_LI.5 Edit LI, make changes to uplink sets, change name, ports speeds.
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI
    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    Power on ALL servers
    sleep   200s

    Log to console and logfile    \n-Modifying UplinkSet name and UplinkSet port speed in LI
    ${li_uri} =     Get LI URI   ${LI}
    ${us} =         Copy Dictionary    ${li_uplink_set_20504}
    ${body} =       Build US body   ${us}   ${li_uri}
    ${uplinksets} =         Fusion Api Get Uplink Set   param=?filter="'name'=='UplinkSet_1'"
    ${us} =                 Get From List   ${uplinksets['members']}    0
    ${us_uri} =             Get From Dictionary ${us}   uri
    ${resp} =               Fusion Api Edit Uplink Set  body=${body}    uri=${us_uri}
    ${task} =               Wait For Task   ${resp}     5 min   15s
    Validate Response   ${task} ${valDict}
    Sleep   90s

    Log to console and logfile    \n-Verifying Uplinkset is updated properly in LI
    ${uplinkset_uri} =      Get uplinkset resp      ${li_uplink_set_20504['name']}
    ${locn}=      Get From Dictionary     ${uplinkset_uri['portConfigInfos'][0]['location']}     locationEntries
    :FOR   ${x}   IN RANGE  0  3
    \   Run Keyword If  '${locn[${x}]['type']}'!='Port'    Continue For Loop
    \   ${portvalue}=     Get From Dictionary    ${locn[${x}]}   value
    \   Exit For Loop
    Should Be Equal as Strings      ${uplinkset_uri['name']}       ${li_uplink_set_20504['name']}       msg=Failed to match uplinkset name
    Should Be Equal as Strings      ${uplinkset_uri['portConfigInfos'][0]['desiredSpeed']}       ${li_uplink_set_20504['portConfigInfos'][0]['desiredSpeed']}       msg=Failed to match uplinkset speed
    Should Be Equal as Strings      ${portvalue}       ${li_uplink_set_20504['portConfigInfos'][0]['port']}       msg=Failed to match uplinkset port
    Sleep   90s

    Log to console and logfile    \n-Reverting back LI as per LIG
    Perform an Update From Group LI   ${li_uri} 15 min      15 s
    Log to console and logfile  update from group completed
    Sleep   30s

    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   Run Keyword If      ${resp['count']} !=1       fail    msg="Not found server profiles ${name} after creation"
    \   ...         ELSE    Log to console and logfile   \nFound server profile ${name} after creation
    \   ${SpLink}=      Get From Dictionary     ${resp['members'][0]}     status
    \   Run Keyword If     '${SpLink}' != 'OK'     fail    msg="Server Profile ${name} status is not OK
    \    ...         ELSE    Log to console and logfile     \n The status of server profile ${name} is verified as OK

    ${conn}=     Fusion Api Get Connections
    ${lcon} =   Get Length   ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \  ${constat} =   Get From Dictionary   ${conn['members'][${x}]}    status
    \  Run Keyword If     '${constat}' != 'OK'     fail   msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK
    Sleep   60s

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x} =    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of second linked downlinkport is verified OK in ${IC}

    Log to console and logfile    \n-Deleting UplinkSet from LI
    ${resp} =     Fusion Api Get Uplink Set        param=?filter="'name'=='${del_uplinkset_20504}'"
    ${uri} =     Get From Dictionary        ${resp['members'][0]}    uri
    ${resp} =    Fusion API delete uplink set        uri=${uri}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=Uplinkset ${del_uplinkset_20504} deletion from LI failed
    ...         ELSE    Log to console and logfile  \nUplinkset ${del_uplinkset_20504} deleted succesfully from LI!!
    Sleep   90s

    Log to console and logfile    \n-Reverting back LI as per LIG
    Perform an Update From Group LI   ${li_uri} 15 min      15 s
    Sleep   60s

    :FOR    ${name}    IN  @{PROFILES}
    \  ${resp}=     Fusion Api Get Server Profiles     param=?filter="'name'=='${name}'"
    \   ${SpLink}=      Get From Dictionary     ${resp['members'][0]}     status
    \   Run Keyword If     '${SpLink}' != 'OK'     fail    msg="Server Profile ${name} status is not OK
    \    ...         ELSE    Log to console and logfile     \n The status of server profile ${name} is verified as OK

    ${conn}=     Fusion Api Get Connections
    ${lcon} =   Get Length   ${conn['members']}
    :FOR    ${x}  IN RANGE   0   ${lcon}
    \  ${constat} =   Get From Dictionary   ${conn['members'][${x}]}    status
    \  Run Keyword If     '${constat}' != 'OK'     fail   msg="Connection status is not OK"
    Log to console and logfile    \n Connections Status for the SPs is verified as OK
    Sleep   60s
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    ${x} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of first linked downlinkport is verified OK in ${IC}
    \    ${x} =    Evaluate    ${x} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${IC}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${x}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${IC}"
    \    ...     ELSE     Log to console and logfile      \n The status of second linked downlinkport is verified OK in ${IC}


F119_ALR2_20633
     [Documentation]    ALR.2 Set the Auto Redistribution interval to 5, 15, 60, 120 secs.  Verify login distribution occurs according to specified intervals
    # Clear Profile Configurations
    #${lig_body} =   Build LIG body      ${ligs['lig_failover']}
    # Edit LIG and Perform an Update From Group     ${lig_body}

    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    Power on ALL servers
    sleep   200s

    :FOR     ${x}   IN   @{intervals}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='FC_1'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${x}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s
    \   Log to console  \n Disabling uplink ports
    \   Change Uplink Port Status       ${Linked_Uplink_port[0]}        ${interconnects[0]}     false
    \   sleep   ${x}s
    \   sleep   10s
    \   ${wwpnlist}=    Switch Login Distribution     ${SWITCH_IP}    ${SWITCH_USERNAME}                         ${SWITCH_PASSWORD}     ${portno[0]}
    \   Log to console and logfile                             wwpnlist ${wwpnlist}
    \   ${server_login} =  Get Length  ${wwpnlist}
    \   Run Keyword If  '${server_login}' != '0'  Fail    ELSE  log to console   \n-Successfully verified ${server_login} login happened through port ${portno[0]}
    \   ${wwpnlist}=    Switch Login Distribution     ${SWITCH_IP}    ${SWITCH_USERNAME}                         ${SWITCH_PASSWORD}     ${portno[1]}
    \   Log to console and logfile                             wwpnlist ${wwpnlist}
    \   ${server_login} =  Get Length  ${wwpnlist}
    \   Run Keyword If  '${server_login}' != '2'  Fail    ELSE  log to console   \n-Successfully verified ${server_login} login happened through port ${portno[1]}
    \   Log to console  \n Enabling uplink ports
    \   Change Uplink Port Status       ${Linked_Uplink_port[0]}    ${INTERCONNECTS[0]}     true
    \   sleep   ${x}s
    \   sleep   10s
    \   ${wwpnlist}=    Switch Login Distribution     ${SWITCH_IP}    ${SWITCH_USERNAME}                         ${SWITCH_PASSWORD}     ${portno[0]}
    \   ${server_login} =  Get Length  ${wwpnlist}
    \   Run Keyword If  '${server_login}' != '1'  Fail    ELSE  log to console   \n-Successfully verified 1 login happened through port ${portno[0]}
    \   ${wwpnlist}=    Switch Login Distribution     ${SWITCH_IP}    ${SWITCH_USERNAME}                         ${SWITCH_PASSWORD}     ${portno[1]}
    \   ${server_login} =  Get Length  ${wwpnlist}
    \   Run Keyword If  '${server_login}' != '1'  Fail    ELSE  log to console   \n-Successfully verified 1 login happened through port ${portno[1]}
    \    ${y} =    Set Variable    0
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${y}]}   ${INTERCONNECTS[0]}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${INTERCONNECTS[0]}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${y}]['status']}' != 'OK'    fail    msg="The status of first linked downlinkport is not displaying as OK in ${INTERCONNECTS[0]}"
    \    ...     ELSE     Log to console and logfile      \n The status of first linked downlinkport is verified OK in ${INTERCONNECTS[0]}
    \    ${y} =    Evaluate    ${y} + 1
    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${y}]}   ${INTERCONNECTS[0]}    Downlink
    \    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${INTERCONNECTS[0]}'"
    \    Run Keyword If     '${resp['members'][0]['ports'][${y}]['status']}' != 'OK'    fail    msg="The status of second linked downlinkport is not displaying as OK in ${INTERCONNECTS[0]}"
    \    ...     ELSE     Log to console and logfile      \n The status of second linked downlinkport is verified OK in ${INTERCONNECTS[0]}

F119_PM_20640_20641_20642
     [Documentation]    PM.3 Create 1 mirror port and 1 analyzer port, set the traffic flow from server. Verify the analyzer port is receiving traffic from server
    ...                 PM.4 Create 1 mirror port and 1 analyzer port, set the traffic flow to server. Verify the analyzer port is receiving traffic to server
    ...                 PM.5 Create 1 mirror port and 1 analyzer port, set the traffic flow to and from server.  Verify the analyzer port is receiving traffic to and from server

    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI

    ${Serv_bay} =   Get Length   ${server_profiles_20640}
    :FOR    ${x}  IN RANGE   0   ${Serv_bay}
    \   Log to console and logfile  \nAdding server profile
    \   Add Server Profiles from variable     ${server_profiles_20640[${x}]}
    \   ${profile} =    Copy Dictionary     ${server_profiles_20640[${x}][0]}
    \   ${shuri} =  Get from Dictionary ${profile}  serverHardwareUri
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   ${body} =   Create Dictionary   powerState=On
    \   ...                             powerControl=MomentaryPress
    \   ${resp} =   Fusion Api Edit Server Hardware Power State     body=${body}    uri=${uri}
    \   ${task} =   Wait For Task   ${resp}     240s    5s
    \   ${sh} =   fusion api get server hardware     uri=${uri}
    \   Should Match    ${sh['powerState']}    On
    \   sleep   260s

    \   Set Analyser monitor port   ${LI}   ${INTERCONNECTS[0]}

    \    Wait Until Keyword Succeeds    10 min   15s       Verify Status of Ports from IC    ${Linked_Downlink_port[${x}]}   ${INTERCONNECTS[0]}    Downlink

    \   ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[0]}'"
    \   ${ic_uri} =    Get IC URI    ${INTERCONNECTS[0]}

    \   ${body} =   Create Dictionary
    \   Log to Console and Logfile    \n Resetting Interconnect Port Counters\n
    \   ${resp1} =   Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    \   ${task} =   Wait For Task   ${resp1}    120s    5s

    \   ${UpTxBytes1}    ${UpRxBytes1} =      Get Tx Rx Bytes for a port     ${ic_uri}    ${ANALYZER_PORT}
    \   Log to console and logfile    \nUpTx-${UpTxBytes1}\nUpRx-${UpRxBytes1}\n
    \   ${DownTxBytes1}    ${DownRxBytes1} =      Get Tx Rx Bytes for a port     ${ic_uri}    ${resp['members'][0]['ports'][${x}]['portName']}
    \   Log to console and logfile    \nDownTx-${DownTxBytes1}\nDownRx-${DownRxBytes1}\n

    \   Log to console and logfile    \nChecking whether Counters are Reset\n
    \   Should be True    ${UpTxBytes1} < 2000 or ${UpRxBytes1} < 2000    msg=\nUplink port counters didn't Reset Properly\n
    \   Should be True    ${DownTxBytes1} < 1000 or ${DownRxBytes1} < 1000    msg=\nDownlink port counters didn't Reset Properly\n
    \   Log to console and logfile    \nUplink and Downlink Port counters Reset successfully\n

    \   ${iloip} =     Get Server iLO IP    ${traffic_bays[${x}]}
    \   Set To Dictionary    ${ilo_details}    ilo_ip   ${iloip}


    \   Log to Console and Logfile   \nStarting IO traffic\n
    \   ${cmd}  ${out_file} ${msg}=     executes        ${linux_details}    ${ilo_details}  ${server_details}   ${module_file_path1}    "${diskspd_cmd_60s}"
    \   Run keyword unless  '${msg}'== 'PASS'   Fail    "Unable to start the IO Traffic"    Log To Console   \nThe IO Traffic Details are as follows:\n
    \   Log to Console and Logfile   \nCommand--${cmd}\nOutputFile--${out_file}\n

    \   Sleep   60s

    \   Log to Console and Logfile   \nVerifying IO traffic\n
    \   ${cmd}  ${exeout}   ${msg}=     ioresults       ${linux_details}    ${ilo_details}  ${server_details}   ${module_file_path2}    "${out_file}"
    \   Run keyword unless  '${msg}'== 'PASS'   Fail    "Unable to finish the IO Traffic"   Log To Console   \nThe IO Traffic Details are as follows:\n
    \   Log to Console and Logfile   \nCommand--${cmd}\nOutput--${exeout}\n

    \   ${UpTxBytes}    ${UpRxBytes} =      Get Tx Rx Bytes for a port     ${ic_uri}    ${ANALYZER_PORT}
    \   Log to console and logfile    \nUpTx-${UpTxBytes}\nUpRx-${UpRxBytes}\n
    \   ${DownTxBytes}    ${DownRxBytes} =      Get Tx Rx Bytes for a port     ${ic_uri}    ${resp['members'][0]['ports'][${x}]['portName']}
    \   Log to console and logfile    \nDownTx-${DownTxBytes}\nDownRx-${DownRxBytes}\n

    \   Log to console and logfile    \nChecking whether Counters are Incremented\n
    \   Should be True     ${UpTxBytes} > ${UpTxBytes1} or ${UpRxBytes} > ${UpRxBytes1}    msg=\nUplink port counters are not incremented\n
    \   Should be True     ${DownTxBytes} > ${DownTxBytes1} or ${DownRxBytes} > ${DownRxBytes1}    msg=\nDownlink counters are not incremented\n
    \   Log to console and logfile    \nUplink and Downlink Port counters incremented successfully\n

    \   Clear Profile Configurations
    \   Set To Dictionary   ${li_portmonitor['monitoredPorts'][0]}  portMonitorConfigInfo    MonitoredToServer

F119_INTEROP05_20531
    [Documentation]    INTEROP.05 Verify Carbon comes back online with no errors and links come back online when module is powered off then on
    Clear Profile Configurations
    Update LIG to base config[LIG1] and Update LI

    # Check interconnect state is configured
    ${ic_list} =     Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Log to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    Log to console and logfile  \n\nChecking current state
    \    Wait Until Keyword Succeeds    10 min   15s     IC reached state    ${ic_list[${x}]['uri']}    Configured

    Log to console and logfile    \n-Creating Server Profiles and Powering On
    :FOR     ${SP}   IN   @{server_profiles}
    \  Add Server Profiles from variable     ${SP}
    Power on ALL servers
    sleep   200s

    # Checking linked uplink/downlink port in interconnect
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Uplink_port[0]}    ${IC}       Uplink
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Downlink_port[0]}  ${IC}       Downlink
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Downlink_port[1]}  ${IC}       Downlink

    # Clear Alert Message
    #${del_resp} =    Fusion Api Delete Alert
    # Run keyword unless    ${del_resp['status_code']}== 202    Fail    "Unable to Clear Alert Message"
    # Log to console and logfile    \n\nAlert Message cleared Successfully

    # Power off interconnects
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=/powerState
    \   ...                             value=Off
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   1min    10s
    \   Validate Response   ${task} ${valDict}
    \   sleep   120s
    \   Log to console and logfile  \nVerify ${interconnect} is off
    \   Wait Until Keyword Succeeds    10 min   15s        Verify Interconnect Power State     ${interconnect}        Off
    \   Log to console and logfile   \n Powered off ${interconnect}
    Sleep   60s

    # Checking for the alert message in OV
    #${Alert_msg} = Create List
    #${resp} =    Fusion Api Get Alerts
    #${mem_resp} =  Get From Dictionary     ${resp}     members
    #${len} =   Get Length  ${mem_resp}
    #:FOR   ${x}    IN RANGE    0   ${len}
    #\  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    #\  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    #\  ${replace}=     Remove String Using Regexp  ${mem_resp[${x}]['description']}  \n
    #\  Run Keyword If  '${replace}' == 'Interconnect ${INTERCONNECTS[0]} has been powered off' Append To List    ${Alert_msg}    ${replace}
    #\  Run Keyword If  '${replace}' == 'Interconnect ${INTERCONNECTS[1]} has been powered off' Append To List    ${Alert_msg}    ${replace}
    # Log to console and logfile   \n Alert_msg ${Alert_msg}
    #${Count2}=    Get Length    ${Alert_msg}
    # Run Keyword If  '${Count_2}' != '2'  Fail    ELSE  log to console   \n-Verified two alerts msg


    # Clear Alert Message
    #${del_resp} =    Fusion Api Delete Alert
    # Run keyword unless    ${del_resp['status_code']}== 202    Fail    "Unable to Clear Alert Message"
    # Log to console and logfile    \n\nAlert Message cleared Successfully

    # Poweron interconnect
    Log to console and logfile   \n Power on interconnect
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=/powerState
    \   ...                             value=On
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   1min    10s
    \   Validate Response   ${task} ${valDict}
    \   sleep   120s
    \   Log to console and logfile  \nVerify ${interconnect} is On
    \   Wait Until Keyword Succeeds    10 min   15s        Verify Interconnect Power State     ${interconnect}        On
    \   Log to console and logfile   \n Powered on ${interconnect}
    Sleep  60s

    # Check interconnect state is configured
    ${ic_list} =     Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Log to console and logfile  \n\n${len_ic} Carbon Interconnect modules are available\n
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${ic_name} =     Get From Dictionary     ${ic_list[${x}]}    name
    \    ${ic_bay} =     Fetch from right    ${ic_list[${x}]['name']}    ${SPACE}
    \    ${ic_uri} =     Get From Dictionary     ${ic_list[${x}]}     uri
    \    Log to console and logfile  \n\nChecking current state
    \    Wait Until Keyword Succeeds    10 min   15s     IC reached state    ${ic_list[${x}]['uri']}    Configured
    \    Sleep    2min
    \    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ic_name}'"
    \    ${state}=     Get From Dictionary     ${IC['members'][0]}   state
    \    Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${ic_name} is not in configured state"
    \   ...     ELSE   Log to console and logfile    \n The IC module ${ic_name} is in configured state

    # Checking for the alert message in OV
    #${Alert_msg1} =    Create List
    #${resp} =    Fusion Api Get Alerts
    #${mem_resp} =  Get From Dictionary     ${resp}     members
    #${len} =   Get Length  ${mem_resp}
    #:FOR   ${x}    IN RANGE    0   ${len}
    #\  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    #\  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    #\  Append To List    ${Alert_msg1}    ${mem_resp[${x}]['description']}

    #${Count2}=    Get Length    ${Alert_msg1}
    # Log to console and logfile        \n Alert_msg is ${Alert_msg1}
    # Should Be Equal As Numbers    ${Count2}   0
    # sleep   60s

    # Checking linked uplink/downlink port in interconnect
    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Uplink_port[0]}    ${IC}       Uplink
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Downlink_port[0]}  ${IC}       Downlink
    \   Wait Until Keyword Succeeds    10 min   15s     Verify Status of Ports from IC  ${Linked_Downlink_port[1]}  ${IC}       Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state


*** Keywords ***
Suite Setup Tasks
    [Documentation]    Suite Setup
    Set Log Level      TRACE
    ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Clean OV
    ${fc_networks} =    Get Variable Value  ${fcnets}
    Run Keyword If  ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    ${body} =   Build LIG body      ${ligs['lig1']}
    Log to console and logfile    \n-Creating LIG ${LIG1}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    Add Enclosure Group from variable   ${enc_groups['enc_group1']}
    Sleep   10s
    Add Logical Enclosure from variable   ${les['le1']}
    :FOR     ${IC}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${IC}
    \   Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
    \   ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \  ${state}=     Get From Dictionary     ${resp['members'][0]}   state
    \  Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
    \   ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state
Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Clear Profile Configurations
    [Documentation]    Cleans Server Profile configurations
    Log to console and logfile  \nCleaning the Server Profile configurations
    Power off ALL Servers
    Remove All Server Profiles

Verify Interconnect Power State
    [Documentation]    Verifying power state of interconnect
     [Arguments]        ${ICM_NAME}        ${POWER_STATE}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${powerState} =     Get From dictionary    ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}
    Log to console    \n\nPower State of the ICM is ${ICM_NAME}:${powerState}

Get Tx Rx Bytes for a port
    [Documentation]    Getting the Byte details of port
    [Arguments]    ${ic_uri}     ${portname}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${portname}
    ${TxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesTx
    ${RxBytes} =     Get from Dictionary     ${resp['fcStatistics']['extendedStatistics']}     numBytesRx
    [Return]    ${TxBytes}    ${RxBytes}

Get Server iLO IP
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${bay}
    ${server_info}=    Get Server Info    ${bay}
    ${ilo_ip}=    Get Server iLO Address    ${server_info}
    [Return]    ${ilo_ip}

Get Server iLO Address
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${server_bay_info}
    ${mpHostInfo}=    Get From Dictionary    ${server_bay_info}    mpHostInfo
    ${mpIpAddresses} =    Get From Dictionary    ${mpHostInfo}    mpIpAddresses
    ${l} =  Get Length  ${mpIpAddresses}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${mpIpAddresses}    ${x}
    \    ${type}=    Get From Dictionary    ${enc}    type
    \    Run Keyword If    '${type}'!='DHCP'    Continue For Loop
    \    ${address}=    Get From Dictionary     ${enc}    address
    [Return]    ${address}

Switch Login Distribution
    [Documentation]    issues an EFUSE Action to the given Device\Bay.
    Log to console  wwpnlist output1  is
    [Arguments]         ${SWITCH_IP}    ${SWITCH_USERNAME}                  ${SWITCH_PASSWORD}      ${num}
    Open Connection     ${SWITCH_IP}     prompt=:admin>    timeout=10s
    Login               ${SWITCH_USERNAME}     ${SWITCH_PASSWORD}
    Log to console  wwpnlist output1  is22
    Write    portshow ${num}
    ${wwpnlist}=     Create List
    ${Output}=          Read until      ${SWITCH_PROMPT}
    @{split_lines}=   Split To Lines    ${Output}
    :FOR    ${sl}    IN    @{split_lines}
    \   ${wwpn}=    Get Lines Matching RegExp    ${sl}    (\t10)\:([0-9a-f]{2})\:([0-9a-f]{2})\:([0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2}\:[0-9a-f]{2})$
    \   ${Count2}=    Get Line Count    ${wwpn}
    \   Run Keyword If  '${Count_2}' == '1'     Append To List    ${wwpnlist}    ${wwpn}
    Log to console  wwpnlist output  is ${wwpnlist}
    Close All Connections
    [Return]    ${wwpnlist}

Login to Switch via SSH
    [Documentation]    Connect to 5900AF Switch via SSH library
    [Arguments]    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}
    ...            ${PROMPT}=${SWITCH_PROMPT}    ${TIMEOUT}=${SWITCH_TIMEOUT}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection    ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    # Disable paging on command output
    Write    screen-length disable
    Read Until Prompt
    [Return]    ${Id}

Execute Switch Command
    [Documentation]    SSH connections to the switch don't work well with Robots' Execute Command keyword
    ...                Use this keyword only for indirect connections to simplify the read/write exchanges.
    ...                This keyword assumes screen-length prompting has been disabled.
    [Arguments]    ${COMMAND}    ${PROMPT}=${SWITCH_PROMPT}
    Write    ${COMMAND}
    Sleep    1
    ${Output}=    Read Until    ${PROMPT}
    [Return]    ${Output}

Verify Status of Ports from IC
    [Documentation]    Verifying Port Status of the interconnect
    [Arguments]    ${port_no}   ${IC}   ${portType}
    ${resp} =    Fusion Api Get Interconnect     param=?filter="'name'=='${IC}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${y}    IN RANGE    0  ${len}
    \   Run Keyword If    '${ports[${y}]['portName']}' != '${port_no}' or '${ports[${y}]['portType']}' != '${portType}'     Continue For Loop
    \   Should Match Regexp     ${ports[${y}]['portStatus']}    Linked

Perform an Update From Group
    [Documentation]    Updating form group
    [Arguments]     ${leuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update Logical Enclosure from Group   uri=${le_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    Validate Response   ${task} ${valDict}

Edit LIG and Perform an Update From Group
    [Documentation]    Editing LIG and Updating from Group
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}
    # Get info from the current LIG to apply edits to
    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${le_uri} =     Get LE URI      ${LE1}
    Perform an Update From Group   ${le_uri}    15 min      15 s

Get LE URI
    [Documentation]    Getting LE URI
    [Arguments]     ${le}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${le}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Get ICs
    [Documentation]    Getting Interconnect List
    ${resp} =    fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL}'    Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}

Change Uplink Port Status
    [Documentation]    Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} =     Get IC URI      ${interconnect}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} =     Get IC URI      ${interconnect}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    # Log to console    \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
#   Log to console  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     60s    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!


IC reached state
    [Documentation]    Verifying the reached state
    [Arguments]     ${uri}  ${state}
    Set Log Level   TRACE
    ${resp} =   fusion api get resource     ${uri}
    Log to console and logfile      \t ${resp['name']}: ${resp['state']}
    Should Match Regexp     ${resp['state']}    ${state}
    [Return]    ${resp}

Edit LIG and Perform an Update From Group LI
    [Documentation]    Editing LIG and Updating from Group
    [Arguments]     ${lig_body}
    ${lig} =        Get LIG Member     ${LIG1}

    ${ethernetSettings} =   Get From Dictionary   ${lig}  ethernetSettings
    Set to dictionary   ${lig_body}     ethernetSettings    ${ethernetSettings}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${lig_body}    uri=${lig_uri}
#   Log to console and logfile  resp of edit lig ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    ${li_uri} =     Get LI URI      ${LI}
    Perform an Update From Group LI   ${li_uri} 15 min      15 s

Perform an Update From Group LI
    [Documentation]    Updating from Group
    [Arguments]     ${liuri}    ${timeout}=5 min    ${interval}=15s
    ${resp} =       Fusion Api Update From Group   uri=${li_uri}
    Run Keyword If     ${resp['status_code']} !=202    fail    Update from group
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}

Get uplinkset resp
    [Documentation]    Getting the uplinkset response
    [Arguments]     ${uplinkset}
    ${resp} =   Fusion Api Get Uplink Set
    ${l} =  Get Length  ${resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${resp['members'][${x}]['name']}' == '${uplinkset}'        Exit For Loop
    ${uri} =    Get From Dictionary     ${resp['members'][${x}]}    uri
    ${resp} =   Get Variable Value  ${resp['members'][${x}]}
    [Return]    ${resp}

Update LIG to base config[LIG1] and Update LI
    [Documentation]    Updating LIG and LI
    Log to console and logfile    \n Reverting back the LIG configuration to base config LIG1 and update LI
    ${lig_body} =   Build LIG body      ${ligs['lig1']}
    Edit LIG and Perform an Update From Group LI     ${lig_body}

Set Analyser monitor port
    [Documentation]    Setting Analyser monitor port
    [Arguments]     ${LI_name}  ${INTERCONNECT}
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${INTERCONNECT}'"
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${ANALYZER_PORT}'
    Set To Dictionary   ${li_portmonitor['analyzerPort']}   portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Log to console and logfile    downlinkuri ${downlinkuri['uri']} ${y}
    Set To Dictionary   ${li_portmonitor['monitoredPorts'][0]}  portUri    ${downlinkuri['uri']}

    Log to console and logfile    \nConfiguring Port Monitoring in LI
    ${uri} =    Get LI URI    ${LI_name}
    Log to console and logfile    li_portmonitor ${li_portmonitor}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor}    uri=${uri}
    Log to console and logfile    resp ${resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    Port Monitoring failed for #${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     120s    10s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation #failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring !!


Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove All Logical Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users
