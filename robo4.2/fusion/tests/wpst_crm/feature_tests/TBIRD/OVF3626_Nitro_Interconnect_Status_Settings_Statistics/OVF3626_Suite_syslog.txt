*** Settings ***
Documentation    Test Nitro Overview Behaviour
...              Remote syslog

Variables       OVF3626_data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Suite Setup     Presetup for Nitro
Suite Teardown    Clean OV


*** Test Cases ***
API_TC1 Syslog Verify Get method for syslog
    [Documentation]    Test the Syslog default parameters using Get Rest call
    [Tags]    Syslog_OV_tests

    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}

    Clear rsyslog

    Sleep    200s
    ${resp}    Fusion Api Get Remote Syslog Configuration
    log    \n\n The syslog config is :${resp}\n    console=True

    Run Keyword Unless    '${resp['remoteSyslogDestination']}' == ''    Fail    msg=remoteSyslogDestination is not empty
    Run Keyword Unless    '${resp['remoteSyslogPort']}' == ''    Fail    msg=remoteSyslogPort is not empty
    Run Keyword Unless    '${resp['sendTestLog']}' == 'False'    Fail    msg=sendTestLog is not disabled
    Run Keyword Unless    '${resp['enabled']}' == 'False'    Fail    msg=sendTestLog is not disabled
    Run Keyword Unless    '${resp['type']}' == 'RemoteSyslog'    Fail    msg=RemoteSyslog is not the default type

    log    \n\n The syslog default parameters are successfully verified \n    console=True


API_TC2 Syslog Verify Put method for syslog
    [Documentation]    Enable the Syslog parameters using Put Rest call
    [Tags]    Syslog_OV_tests


    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}

    ${resp}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_body}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    200s

    ${output}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output['enabled']}' == 'True'    Fail    msg=remotesyslog is not enabled

    log    \n\n The remotesyslog has been enabled successfully !! \n    console=True

API_TC3 Syslog Verify Put method for syslog sendTestLog enable
    [Documentation]    Enable the Syslog parameters using Put Rest call
    [Tags]    Syslog_OV_tests


    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}

    ${temp}   Copy Dictionary   ${remote_syslog_body}
    Set To Dictionary    ${temp}    sendTestLog=true
    ${resp}    Fusion Api Update Remote Syslog Configuration    ${temp}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    200s

    ${output}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output['sendTestLog']}' == 'True'    Fail    msg=sendTestLog is not enabled
    log    \n\n The sendTestLog has been enabled successfully !! \n    console=True

    ### Code to verify in Trap receiver ###
    ${test}    Verify Syslog Test Message    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Log    \n The return op is :${test}    console=True


API_TC4 Syslog Verify Put method for syslog sendTestLog disable
    [Documentation]    Enable the Syslog parameters using Put Rest call
    [Tags]    Syslog_OV_tests

    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}

    ${resp}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_clear}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    300s
    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}


    ${output}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output['sendTestLog']}' == 'False'    Fail    msg=sendTestLog is not disabled
    log    \n\n The sendTestLog has been disabled successfully !! \n    console=True
    ${test}    Verify Syslog Disable    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Run Keyword Unless    '${test}' == ''     Fail    msg=sendTestLog is not enabled


API_TC5 Syslog Verify Put method for clearing Port and destination address
    [Documentation]    Configure the Syslog parameters using Put Rest call
    [Tags]    Syslog_OV_tests


    ${temp}    Copy Dictionary    ${remote_syslog_body}
    Set To Dictionary    ${temp}    remoteSyslogPort=
    Set To Dictionary    ${temp}    remoteSyslogDestination=
    Set To Dictionary    ${temp}    enabled=false
    ${resp}    Fusion Api Update Remote Syslog Configuration    ${temp}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    200s

    ${output}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output['remoteSyslogPort']}' == ''    Fail    msg=remoteSyslogPort is not disabled
    Run Keyword Unless    '${output['remoteSyslogDestination']}' == ''    Fail    msg=remoteSyslogDestination is not disabled
    log    \n\n The sendTestLog has been disabled successfully !! \n    console=True

API_TC6 Syslog Verify Put method for syslog messages on receivers
    [Documentation]    Configure the Syslog parameters using Put Rest call and verify syslog messages
    [Tags]    Syslog_Messages_Test


    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}

    ${resp}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_body2}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    20s

    ${output}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output['sendTestLog']}' == 'True'    Fail    msg=sendTestLog is not enabled
    log    \n\n The sendTestLog has been enabled successfully !! \n    console=True

    #after enabling syslog
    ${test}    Verify Syslog Test Message    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Log    \n The return op is :${test}    console=True

    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Nitro Interconnect modules are available\n
    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    0    1
    \    ${ic_name}    Get From Dictionary     ${ic_list[${x}]}     name
    \    ${ic_uri}    Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    ${associatedUplinkset}    Set Variable if    '${ic_name}' == '${INTERCONNECTS[${x}]}'   ${Uplinksets_nitro[0]}    ${Uplinksets_nitro[1]}
    \    Set To Dictionary    ${Edit_port_body}     associatedUplinkSetUri=${associatedUplinkset}
    \    Set To Dictionary    ${Edit_port_body}     interconnectName=${ic_name}
    \    Set To Dictionary    ${Edit_port_body}     portName=${Linked_uplink_ports[${x}]}
    \    log    \n\n Edit Port Body ${Edit_port_body}    console=True
    \    ${resp}    Update IC Port     ${ic_name}   ${Linked_uplink_ports[${x}]}   ${Edit_port_body}
    \    Log    \n\nVerify trap during Enabling & Disabling Uplink Port \n    console=True
    \    ${test1}    Syslog Receiver Output    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern[0]}    ${Syslog_message[0]}    ${ic_ip}
    \    Log    \n The return op is :${test1}    console=True
    \    Run Keyword Unless    ${test1} != 'True'    Fail    msg=Traps donot match with expected
    \    Set To Dictionary    ${Edit_port_body}     associatedUplinkSetUri=${associatedUplinkset}
    \    Set To Dictionary    ${Edit_port_body}     enabled=True
    \    log    \n\n Edit Port Body ${Edit_port_body}    console=True
    \    ${resp}    Update IC Port     ${ic_name}   ${Linked_uplink_ports[${x}]}   ${Edit_port_body}
    \    ${test2}    Syslog Receiver Output    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern[0]}    ${Syslog_message[1]}    ${ic_ip}
    \    Log    \n The return op is :${test2}    console=True
    \    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    \    Run Keyword Unless    ${test2} != 'True'    Fail    msg=Traps donot match with expected
    \    Log    \n\nVerify trap during Enabling & Disabling Downlink Port \n    console=True
    \    Set To Dictionary    ${Edit_port_body}     associatedUplinkSetUri=${associatedUplinkset}
    \    Set To Dictionary    ${Edit_port_body}     enabled=False
    \    Set To Dictionary    ${Edit_port_body}     portType=Downlink
    \    Set To Dictionary    ${Edit_port_body}     portName=${Linked_downlink_ports[${x}]}
    \    ${resp}    Update IC Port     ${ic_name}   ${Linked_downlink_ports[${x}]}   ${Edit_port_body}
    \    ${test3}    Syslog Receiver Output    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern[0]}    ${Syslog_message[0]}    ${ic_ip}
    \    Log    \n The return op is :${test3}    console=True
    \    Run Keyword Unless    ${test3} != 'True'    Fail    msg=Traps donot match with expected
    \    Set To Dictionary    ${Edit_port_body}     associatedUplinkSetUri=${associatedUplinkset}
    \    Set To Dictionary    ${Edit_port_body}     enabled=True
    \    Set To Dictionary    ${Edit_port_body}     portType=Downlink
    \    Set To Dictionary    ${Edit_port_body}     portName=${Linked_downlink_ports[${x}]}
    \    ${resp}    Update IC Port     ${ic_name}   ${Linked_downlink_ports[${x}]}   ${Edit_port_body}
    \    ${test4}    Syslog Receiver Output    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern[0]}    ${Syslog_message[1]}    ${ic_ip}
    \    Log    \n The return op is :${test4}    console=True
    \    Run Keyword Unless    ${test4} != 'True'    Fail    msg=Traps donot match with expected

API_TC7 Syslog Verify Disable Enable Syslog with messages verification
    [Documentation]    Configure the Syslog parameters using Put Rest call and verify syslog messages for ICM Reboot
    [Tags]    Syslog_Messages_Test

    Clear rsyslog
    Clear Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}

    ${resp}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_clear}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    Sleep    30s

    ${output1}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output1['sendTestLog']}' == 'False'    Fail    msg=sendTestLog is not disabled
    log    \n\n The sendTestLog has been enabled successfully !! \n    console=True

    ${resp2}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_body2}
    Wait For Task2    ${resp2}   timeout=2m    interval=10
    Sleep    10s

    ${output2}    Fusion Api Get Remote Syslog Configuration
    Run Keyword Unless    '${output2['sendTestLog']}' == 'True'    Fail    msg=sendTestLog is not enabled
    log    \n\n The sendTestLog has been enabled successfully !! \n    console=True

    #after enabling syslog
    ${test}    Verify Syslog Test Message    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Log    \n The return op is :${test}    console=True
    Sleep    100s


    Log    \n\n Perform IC Reboot and verify syslog output\n\n
    ${ic_list}    Get ICs
    ${len_ic} =   Get Length   ${ic_list}
    Run keyword If    ${len_ic} == '0'    FAIL    ELSE    \nLog to console and logfile  \n\n${len_ic} Nitro Interconnect modules are available\n
    #:FOR    ${x}    IN RANGE    0    ${len_ic}
    :FOR    ${x}    IN RANGE    1    2
    \    ${ic_name}    Get From Dictionary     ${ic_list[${x}]}     name
    \    ${ic_uri}    Get From Dictionary     ${ic_list[${x}]}     uri
    \    ${ic_ip}    Get interconnect ip    ${ic_name}
    \    Patch Interconnect    ${INTERCONNECTS_dto[${x}]}  op=replace  path=/powerState  value=Off  timeout=60
    \    sleep    50s
    \    Patch Interconnect    ${INTERCONNECTS_dto[${x}]}  op=replace  path=/powerState  value=On  timeout=60
    \    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ic_uri}    Configured
    \    ${test}    Syslog Receiver Output    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern[1]}    ${Syslog_message[1]}    ${ic_ip}
    \    Log    \n The return op is :${test}    console=True



*** Keywords ***
Presetup for Nitro
    [Documentation]    Presetup for Nitro OVF3626
    Log    \n Clean up the OV    console=True
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clean OV
    Add Ethernet Networks from variable    ${Enet_nitro}
    ## Includes sampling
    Add LIG from variable    ${lig_Nitro}
    Add Enclosure Group and Verify    ${enc_group}
    Add Logical Enclosure from variable    ${LE_Nitro}
    ${resp}    Add Server Profile    ${Server_profile1}
    Wait For Task2    ${resp}   timeout=8m    interval=10
    Power on server    ${SH_bay6_name}

Clean OV
    [Documentation]    Cleans the appliance
    Log    \nCleaning the OV    console=True
    Power off ALL Servers    PressAndHold
    Remove All Server Profiles
    Remove All LE
    Remove All Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Get ICs
    [Documentation]    Fetch Nitro ICs
    ### ICM_MODEL = 'Virtual Connect SE 100Gb F32 Module for Synergy' ### should be defined in data variables
    ### In ME setup, this is used to filter IC's of particular type

    ${resp} =    fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL}'      Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}

Get interconnect ip
    [Documentation]    Fetch IC IPs
    [Arguments]     ${ic}
    ${resp} =   Fusion Api Get Interconnect         param=?filter="'name'=='${ic}'"
    ${interconnectIP} =     Get From Dictionary     ${resp['members'][0]}   ipAddressList
    ${len}    Get Length    ${interconnectIP}
    :For    ${x}    In Range    0    ${len}
    \    ${value}    Run Keyword If   '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    #\    ${value}    Run Keyword If      '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    Log to console    \n the interconnect ip is :${value}\n
    [Return]    ${value}

Clear rsyslog
    [Documentation]    Clear remote syslog
    ${resp}    Fusion Api Update Remote Syslog Configuration    ${remote_syslog_clear}
    Wait For Task2    ${resp}   timeout=2m    interval=10

Syslog Receiver Output
    [Documentation]    Syslog Receiver Output
    [Arguments]    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}    ${pattern}    ${message}    ${ic_ip}
    Set Log Level    TRACE
    ${trap_output}   Get Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    log    \nThe syslog output is :${trap_output}\n
    ${lines}    Get Lines Containing String    ${trap_output}    ${pattern}
    #${Match}    Should Contain    ${lines}    ${message}
    ${Match}    Get Regexp Matches    ${lines}    ${message}
    ${Match1}    Should Contain    ${lines}    ${ic_ip}
    [Return]    True

Verify Syslog Test Message
    [Documentation]    Syslog Receiver Output
    [Arguments]    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Set Log Level    TRACE
    ${trap_output}   Get Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    log    \nThe syslog output is :${trap_output}\n
    ${Match}    ${Match1}     Should Match Regexp    ${trap_output}    (15.\\d+.\\d+.\\d+) OneView: Remote syslog test message
    log    \nThe syslog Match is :${Match}\n
    log    \nThe syslog Match is :${Match1}\n
    [Return]    ${Match}    ${Match1}

Get Trap
    [Documentation]    Opens the Trap receiver machine to verify the trap
    [Arguments]    ${host}    ${user}   ${pass}    ${path}    ${file}
    My Open Connection And Log In    ${host}    ${user}    ${pass}
    Login               ${snmp_user}     ${snmp_pass}
    Write     cd /${path}
    #Write    cat ${file}
    Write    tail -f -n 200 ${file}
    Sleep    10s
    ${output}    Read
    Close All Connections
    [Return]    ${output}

My Open Connection And Log In
    [Documentation]    Opens an SSH session to an appliance and logs in
    [Arguments]        ${host}=localhost   ${user}=root   ${pass}=hpvse1

    # The ssh prompt may be set by other Fusion keywords through Set Default Configuration
    # set the expected ssh prompt for this connection
    Open Connection    ${host}    timeout=120s
    Login               ${user}    ${pass}

Clear Trap
    [Documentation]    clear old traps
    [Arguments]    ${host}    ${user}   ${pass}    ${path}    ${file}
    My Open Connection And Log In    ${host}    ${user}    ${pass}
    Write     cd /${path}
    Write    > ${file}
    Close All Connections
    log    \n Cleared the trap messages

Verify Syslog Disable
    [Documentation]    Syslog Receiver Output
    [Arguments]    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    Set Log Level    TRACE
    ${trap_output}   Get Trap    ${snmp_host2}    ${snmp_user}    ${snmp_pass}    ${syslog_path}    ${syslog_file}
    log    \nThe syslog output is :${trap_output}\n
    [Return]    ${trap_output}
