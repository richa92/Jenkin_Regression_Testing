*** Settings ***
Documentation    Test Nitro Overview Behaviour
...              Port Status

Variables       OVF3626_data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource        ../../../../../Resources/api/fusion_api_resource.txt


Suite Setup     Presetup for Nitro
Suite Teardown    Clean OV



*** Test Cases ***
API_TC1 Port statistics Verify port status as Linked for uplink port
    [Documentation]    Verify Port status for Uplink Ports
    [Tags]    Port_Status_Tests

    set Log level    TRACE

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log to console  \nSuccessfully logged into the appliance

    ${x} =    Set Variable    0
    Log    \nChecking Port status of uplinks ports\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Get IC Port status     ${IC}    ${Linked_ports_uplink[${x}]}    Linked
    \    ${x} =    Evaluate    ${x} + 1


API_TC2 Port Statistics Verify port status as Linked for downlink port
    [Documentation]    Verify Port status for downlink Ports
    [Tags]    Port_Status_Tests

    ${x} =    Set Variable    0
    Log    \nChecking Port status of downlink ports\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Get IC Port status     ${IC}    ${Linked_ports_downlink[${x}]}    Linked
    \    ${x} =    Evaluate    ${x} + 1



API_TC3 port Statistics Disable uplink port and verify port status
    [Documentation]    Verify Port status for Uplink Ports
    [Tags]    Port_Status_Tests

    ${x} =    Set Variable    0
    Log    \n\nDisabling Uplink Port\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Enable Disable Port        ${IC}   ${Linked_ports_uplink[${x}]}        ${Edit_port_body}    False
    \    ${x} =    Evaluate    ${x} + 1



API_TC4 Port Statistics Enable uplink port and verify port status
    [Documentation]    Verify Port status for Uplink Ports
    [Tags]    Port_Status_Tests

    ${x} =    Set Variable    0
    Log    \nEnabling Uplink Port\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Enable Disable Port        ${IC}   ${Linked_ports_uplink[${x}]}        ${Edit_port_body}    True
    \    ${x} =    Evaluate    ${x} + 1



API_TC5 Port Statistics Disable downlink port and verify port status
    [Documentation]    Verify Port status for Uplink Ports
    [Tags]    Port_Status_Tests

    ${x} =    Set Variable    0
    Log    \nDisabling Downlink Port\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Enable Disable Port        ${IC}   ${Linked_ports_downlink[${x}]}      ${Edit_port_body}    False
    \    ${x} =    Evaluate    ${x} + 1


API_TC6 Enable downlink port and verify port status
    [Documentation]    Verify Port status for Downlink Ports
    [Tags]    Port_Status_Tests

    ${x} =    Set Variable    0
    Log    \nEnabling Downlink Port\n    console=True

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Enable Disable Port        ${IC}   ${Linked_ports_downlink[${x}]}      ${Edit_port_body}    True
    \    ${x} =    Evaluate    ${x} + 1


API_TC7 Port Statistics Power off/on and verify port status
    [Documentation]    Verify Port status for IC Power off
    [Tags]    Port_Status_Tests_for_IC_Operations


    Log    \nPower off and Power on ICM3 and ICM6    console=True
    ${x} =    Set Variable    0


    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \    Patch Interconnect    ${INTERCONNECTS_dto[${x}]}  op=replace  path=/powerState  value=Off  timeout=60
    \    ${ic_uri} =     Get IC URI      ${IC}
    \    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ic_uri}    Maintenance
    \    Wait Until Keyword Succeeds    3 min    20s      Get IC Port status        ${IC}    ${Linked_ports_uplink[${x}]}    Unlinked
    \    Get IC Port status     ${IC}    ${Linked_ports_downlink[${x}]}    Unlinked
    \    Patch Interconnect    ${INTERCONNECTS_dto[${x}]}  op=replace  path=/powerState  value=On  timeout=60
    \    ${ic_uri} =     Get IC URI      ${IC}
    \    Wait Until Keyword Succeeds    12 min    20s      IC reached state    ${ic_uri}    Configured
    \    Wait Until Keyword Succeeds    6 min    20s      Get IC Port status        ${IC}    ${Linked_ports_uplink[${x}]}    Linked
    \    Get IC Port status     ${IC}    ${Linked_ports_downlink[${x}]}    Linked
    \    ${x} =    Evaluate    ${x} + 1





API_TC8 Port Statistics Efuse on/off and verify port status
    [Documentation]    Verify Port status for IC Efuse
    [Tags]    Port_Status_Tests_for_IC_Operations

    Log    \nEfuse off ICM3 and ICM6    console=True
    ${x} =    Set Variable    0

    :FOR   ${IC}   IN   @{INTERCONNECTS}
    \       Get EM IP    ${ENC1}
    \       Get EM Token    ${ENC1}
    \       ${bay} =    Fetch from right    ${IC}    ${SPACE}
    \       log     \n Efuse on    console=True
    \       Efuse ICM    ${efuse_action[0]}    ${bay}
    \       ${ic_uri} =     Get IC URI      ${IC}
    \       Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ic_uri}    Absent
    \       log     \n Efuse off    console=True
    \       Get EM IP    ${ENC1}
    \       Get EM Token    ${ENC1}
    \       Efuse ICM    ${efuse_action[1]}    ${bay}
    \       ${ic_uri} =     Get IC URI      ${IC}
    \       Wait Until Keyword Succeeds    12 min    20s      IC reached state    ${ic_uri}    Configured
    \       Wait Until Keyword Succeeds    6 min    20s      Get IC Port status     ${IC}    ${Linked_ports_uplink[${x}]}    Linked
    \       Get IC Port status      ${IC}    ${Linked_ports_downlink[${x}]}    Linked
    \       ${x} =    Evaluate    ${x} + 1


*** Keywords ***

Presetup for Nitro
    [Documentation]    Presetup for Nitro OVF3626
    Log    \n Clean up the OV    console=True
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log to console  \nSuccessfully logged into the appliance
    Clean OV
    Add Ethernet Networks from variable    ${Enet_nitro}
    ## Includes sampling
    Add LIG from variable    ${lig_Nitro}
    Add Enclosure Group and Verify    ${enc_group}
    Add Logical Enclosure from variable    ${LE_Nitro}


Clean OV
    [Documentation]    Cleans the appliance
    Log    \nCleaning the OV    console=True
    Power off ALL Servers
    Remove All Server Profiles
    Remove All LEs
    Remove All Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets



Get IC Port status
    [Documentation]    Returns the port info of the named port of specified interconnect uri
    [Arguments]     ${IC}    ${portName}    ${status}

    ${x} =    Set Variable    0
    ${ic_uri} =     Get IC URI      ${IC}
    ${len}    Get Length    ${portName}

    ${resp} =    fusion api get interconnect ports    uri=${ic_uri}
    ${ports} =    Get From Dictionary    ${resp}    members


    :FOR    ${port}    IN    @{ports}
    \    Run Keyword If    '${port['portName']}' != '${portName[${x}]}'    Continue For Loop
    \    ${state} =    Set Variable     ${port['portStatus']}
    \    Run Keyword If  '${state}' != '${status}'    Fail   \n${port['portName']} port is ${state} in ${IC}, expected ${status} \n
    \    ...    ELSE    Log to console    \n ${port['portName']} port is ${state} in ${IC} \n
    \    ${x} =    Evaluate    ${x} + 1
    \    Run Keyword If    ${x} == ${len}    Exit For Loop

    Run keyword IF  ${x} == 0    Fail    Ports not found


Enable Disable Port
    [Documentation]  Enable or Disable Uplink or Downlink IC Port list
    [Arguments]     ${IC}   ${portlist}     ${body}    ${state}
    :FOR    ${port}    IN    @{portlist}
    \    Log    ${port}    console=True
    \    ${associatedUplinkset} =       Set Variable if    '${IC}' == '${INTERCONNECTS[0]}'   ${Uplinksets_nitro[0]}    ${Uplinksets_nitro[1]}
    \    Set To Dictionary    ${body}       associatedUplinkSetUri=${associatedUplinkset}
    \    Set To Dictionary    ${body}       interconnectName=${IC}
    \    Set To Dictionary    ${body}       enabled=${state}
    \    Set To Dictionary    ${body}       portName=${port}
    \    Update IC Port     ${IC}   ${port}   ${body}
    \    ${status} =        Set Variable if    '${state}' == 'True'   Linked    Unlinked
    \    ${list2} =    Create List     ${port}
    \    ${list1} =    Create List     ${list2}
    \    Wait Until Keyword Succeeds    3 min    20s       Get IC Port status    ${IC}    ${list1[0]}    ${status}

