*** Settings ***
Documentation    Test Nitro Overview Behaviour
...              Port Statistics & Utilization sampling

Variables       OVF3626_data_variables.py
Library         json

Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Library         background_ping.py
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Suite Setup     Presetup for Nitro
Suite Teardown    Clean OV

*** Variables ***
${name}    sample.txt


*** Test Cases ***

API_TC1 Verify Utilization sampling on LIG/LI and verify statistics and advanced statistics while passing traffic
    [Documentation]    Configure the Utilization sampling settings on LI LIG and verify the Uplink and Downlink port common advanced statistics
    [Tags]    verify_the_sampling_details_on_LIG_LI
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}

    Clear Port Counters    ${INTERCONNECTS[1]}
    ${LIG_UT}    Check Sampling value in LIG    ${lig_Nitro['name']}
    ${LI_UT}    Check Sampling value in LI    ${LI}
    ${UT_list}    Create List
    ${sample}    Get Variable Value    ${lig_Nitro['telemetryConfiguration']['sampleCount']}
    ${count}    Get Variable Value    ${lig_Nitro['telemetryConfiguration']['sampleInterval']}
    Append To List    ${UT_list}    ${sample}    ${count}
    Lists Should Be Equal    ${UT_list}    ${LIG_UT}
    Lists Should Be Equal    ${UT_list}    ${LI_UT}
    log    \n\n The Utilization sampling values are successfully verified on LIG & LI\n\n    console=True


    ${server_ip}    ${gate_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay6}
    Get gateway ip of the server and passing traffic    ${gate_ip}    ${server_ip[0]}    ${ping_cmd1}    ${server_details}    ${name}

    ${IC_resp}    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[1]}'"
    ${ic_uri}    Get Variable Value    ${IC_resp['members'][0]['uri']}

    log    \n\n uplink port statistics\n\n    console=True

    ${commonStatistics_list}    Get IC Port Common statistics    ${ic_uri}    ${Linked_uplink_ports[0]}
    Validate Statistics    ${commonStatistics_list}    ${uplink_counters}
    Wait Until Keyword Succeeds    85 min    10 sec    Validate samples    ${sample_count_1}     ${ic_uri}    ${Linked_uplink_ports[0]}

    log    \n\n Downlink port statistics\n\n    console=True
    ${commonStatistics_list}    Get IC Port Common statistics    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}
    Validate Statistics    ${commonStatistics_list}    ${downlink_counters}
    Wait Until Keyword Succeeds    85 min    10 sec    Validate samples    ${sample_count_1}    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}

### KILL ###
    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    Log    \n Pinging terminated Successfully ${out}    console=True
    Clear Port Counters    ${INTERCONNECTS[1]}


API_TC2 Edit Utilization Sampling on LIG LI and verify statistics and advanced statistics
    [Documentation]    Edit the Utilization sampling settings on LI LIG and verify the Uplink and Downlink port common advanced statistics
    [Tags]    Edit_sampling_values_on_ICs_for_Uplink_Downlink_ports_while_passing_traffic

    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clear Port Counters    ${INTERCONNECTS[0]}
    ${lig_member}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_member['uri']}
    Set To Dictionary    ${lig_member}    telemetryConfiguration    ${Li_telemetry_body2}
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}


    ${server_ip}    ${gate_ip}    Get Server Ip Windows    ${ilo_details_enc1_bay6}
    Get gateway ip of the server and passing traffic    ${gate_ip}    ${server_ip[0]}    ${ping_cmd1}    ${server_details}    ${name}

    ${IC_resp}    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${ic_uri}    Get Variable Value    ${IC_resp['members'][0]['uri']}

    log    \n\n uplink port statistics\n\n    console=True

    ${commonStatistics_list}    Get IC Port Common statistics    ${ic_uri}    ${Linked_uplink_ports[0]}
    Validate Statistics    ${commonStatistics_list}    ${downlink_counters}
    Wait Until Keyword Succeeds    60 min    10 sec    Validate samples    ${sample_count_2}    ${ic_uri}    ${Linked_uplink_ports[0]}

    log    \n\n Downlink port statistics\n\n    console=True
    ${commonStatistics_list}    Get IC Port Common statistics    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}
    Validate Statistics    ${commonStatistics_list}    ${downlink_counters}
    Wait Until Keyword Succeeds    60 min    10 sec    Validate samples    ${sample_count_2}    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}


### KILL ###
    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${kill_cmd}
    log    \n Pinging terminated Successfully ${out}
    Clear Port Counters    ${INTERCONNECTS[0]}


API_TC3 Disable Utilization Sampling and verify Uplink Downlink Port statistics
    [Documentation]    Disable the Utilization sampling settings on LI LIG and verify the Uplink and Downlink port common advanced statistics
    [Tags]    Port_Traffic_Test
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clear Port Counters    ${INTERCONNECTS[0]}
    ${lig_member}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_member['uri']}
    Set To Dictionary    ${lig_member["telemetryConfiguration"]}    enableTelemetry    false
    ${resp}    Fusion Api Edit LIG     ${lig_member}    ${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Sleep    5min
    ${IC_resp}    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS[0]}'"
    ${ic_uri}    Get Variable Value    ${IC_resp['members'][0]['uri']}

    Log    \nUplink & downlink common statistics\n    console=True
    ${commonStatistics_list}    Get IC Port Common statistics    ${ic_uri}    ${Linked_uplink_ports[0]}
    ${commonStatistics_list2}    Get IC Port Common statistics    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}

    Log    \nUplink & downlink advanced statistics\n    console=True
    ${sampleCount1_kilobitsPerSec}    ${receivePacketsPerSec1}    Get IC Port Advanced statistics    ${ic_uri}    ${Linked_downlink_ports_bay6[0]}
    ${sampleCount2_kilobitsPerSec}    ${receivePacketsPerSec2}    Get IC Port Advanced statistics    ${ic_uri}    ${Linked_uplink_ports[0]}
    Run Keyword Unless    '${sampleCount1_kilobitsPerSec}' == 'None'    Fail    msg=Advanced statistics runs even after disabling Utilization Sampling
    Run Keyword Unless    '${receivePacketsPerSec1}' == 'None'    Fail    msg=Advanced statistics runs even after disabling Utilization Sampling
    Run Keyword Unless    '${sampleCount2_kilobitsPerSec}' == 'None'    Fail    msg=Advanced statistics runs even after disabling Utilization Sampling
    Run Keyword Unless    '${receivePacketsPerSec2}' == 'None'    Fail    msg=Advanced statistics runs even after disabling Utilization Sampling



*** Keywords ***
Presetup for Nitro
    [Documentation]    Presetup for Nitro OVF3626
    Log    \n Clean up the OV    console=True
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clean OV
    Add Ethernet Networks from variable    ${Enet_nitro}
    ## Includes sampling
    Add LIG from variable    ${lig_Nitro}
    Add Enclosure Group and Verify    ${enc_group}
    Add Logical Enclosure from variable    ${LE_Nitro}
    ${resp}    Add Server Profile    ${Server_profile1}
    Wait For Task2    ${resp}   timeout=8m    interval=10
    Power on server    ${SH_bay6_name}

Clean OV
    [Documentation]    Cleans the appliance
    Log    \nCleaning the OV    console=True
    Power off ALL Servers
    Remove All Server Profiles
    Remove All LEs
    Remove All Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Check Sampling value in LIG
    [Documentation]    Check Sampling value in LIG
    [Arguments]     ${lig_name}
    ${LIG_UT}    Create List
    ${resp}    Fusion Api Get Lig     param=?filter="'name'=='${lig_name}'"
    ${telemetryConf}    Get From Dictionary    ${resp['members'][0]}    telemetryConfiguration
    ${sampleCount}    Get From Dictionary    ${telemetryConf}    sampleCount
    ${sampleInterval}    Get From Dictionary    ${telemetryConf}    sampleInterval
    Append To List    ${LIG_UT}    ${sampleCount}    ${sampleInterval}
    [Return]    ${LIG_UT}

Check Sampling value in LI
    [Documentation]    Check Sampling value in LI
    [Arguments]     ${li_name}
    ${LI_UT}    Create List
    ${liuri}    Get LI URI    ${li_name}
    ${resp}    Fusion Api Get LI    ${liuri}
    ${telemetryConf}    Get From Dictionary    ${resp}    telemetryConfiguration
    ${sampleCount_li}    Get From Dictionary    ${telemetryConf}    sampleCount
    ${sampleInterval_li}    Get From Dictionary    ${telemetryConf}    sampleInterval
    Append To List    ${LI_UT}    ${sampleCount_li}    ${sampleInterval_li}
    [Return]    ${LI_UT}

Get Server Ip Windows
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${ilo_details}
    log    \nstdout is ${ilo_details}
    ${serverip_List}=   Create List
    ${serverip_List1}=   Create List
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=20s
    ${login}    SSHLibrary.Login               ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Read Until    SAC>
    Sleep    5sec
    SSHLibrary.Write    i
    Sleep    5sec
    ${stdout}    SSHLibrary.Read
    Log    \nstdout is ${stdout}
    ${cmd_output}=    Get Regexp Matches    ${stdout}    Ip=10\\.\\d+\\.\\d+\\.\\d+
    Log    \nstdout is ${cmd_output}
    ${ip_list_new}    Create List
    ${len}    Get Length    ${cmd_output}
    :FOR    ${x}    IN RANGE    ${len}
    \    ${ip_lists}    Remove String    ${cmd_output[${x}]}    Ip=
    \    log    ip is ${ip_lists}
    \    Append To List   ${ip_list_new}    ${ip_lists}
    log    \n IP's are is ${ip_list_new}
    ${cmd_output1}=    Get Regexp Matches    ${stdout}    Gateway=10\\.\\d+\\.\\d+\\.\\d+
    log    \nstdout is ${cmd_output1}
    ${gateway_ip}    Remove String    ${cmd_output1[0]}    Gateway=
    SSHLibrary.Close All Connections
    [Return]    ${ip_list_new}    ${gateway_ip}

Get gateway ip of the server and passing traffic
    [Documentation]    Get gateway ip of the server and passing traffic
    [Arguments]    ${gateway_ip}    ${server_ip}    ${ping_cmd1}    ${server_details}    ${name}
    ${server_ip}    ${gateway_ip}    Get Server Ip Windows    ${ilo_details}

    ${ping_cmd}    Replace String Using Regexp    ${ping_cmd1}    'gateway_ip'      ${gateway_ip}
    log    ${ping_cmd}
    ${out}    execute_traffic    ${server_ip}    ${server_details['username']}    ${server_details['password']}    ${ping_cmd}
    log    \n Pinging started Successfully ${out}
    Sleep    20
    ${contents}    OperatingSystem.Get File    ${name}
    Should Contain    ${contents}    TTL=
    Sleep    5min

###### PORT STATISTICS #####
Get IC Port Common statistics
    [Documentation]    Get the common statistics of the given IC's Port
    [Arguments]    ${ic_uri}    ${port}
    ${commonStatistics_list}    Create List
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${port}
    log    \n Port commonStatistics:${resp}    console=True
    ${commonStatistics}    Get Variable Value    ${resp['commonStatistics']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1213IfInOctets']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1213IfOutOctets']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1213IfInNUcastPkts']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1213IfOutUcastPkts']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1493Dot1DTpPortInFrames']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1757StatsOctets']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1757StatsPkts']}
    Append To List    ${commonStatistics_list}    ${commonStatistics['rfc1493Dot1DTpPortOutFrames']}
    [Return]    ${commonStatistics_list}

Get IC Port Advanced statistics
    [Documentation]    Get the common statistics of the given IC's Port
    [Arguments]    ${ic_uri}    ${port}
    ${resp} =         Fusion Api Get Interconnect Port Statistics     ${ic_uri}    ${port}
    log    \n Port advancedStatistics:${resp}    console=True
    ${advancedStatistics}    Get Variable Value    ${resp['advancedStatistics']}
    ${sampleCount_kilobitsPerSec}    Get Variable Value    ${advancedStatistics['receiveKilobitsPerSec']}
    ${receivePacketsPerSec}    Get Variable Value    ${advancedStatistics['receivePacketsPerSec']}
    [Return]    ${sampleCount_kilobitsPerSec}    ${receivePacketsPerSec}

Fetch Advanced Statistics samples
    [Documentation]    Get Advanced Statistics samples for receiveKilobitsPerSec & receiveKilobitsPerSec_list
    [Arguments]     ${receiveKilobitsPerSec}    ${receivePacketsPerSec}
    ${receiveKilobitsPerSec_list}    Split String    ${receiveKilobitsPerSec}    :
    ${sampleCount_kilobitsPerSec}    Set Variable    0
    ${length}    Get Length   ${receiveKilobitsPerSec_list}
    :FOR     ${x}   IN RANGE   0   ${length}
    \    ${sampleCount_kilobitsPerSec}    Run Keyword If    ${receiveKilobitsPerSec_list[${x}]} != 0       Evaluate    ${sampleCount_kilobitsPerSec} + 1    ELSE    Continue For Loop

    ${receivePacketsPerSec_list}    Split String    ${receivePacketsPerSec}    :
    ${sampleCount_packetsPerSec}    Set Variable    0
    ${length}    Get Length   ${receivePacketsPerSec_list}
    :FOR     ${x}   IN RANGE   0   ${length}
    \    ${val}    Convert To Integer    ${receivePacketsPerSec_list[${x}]}
    \    ${sampleCount_packetsPerSec}    Run Keyword If    ${val} != 00       Evaluate    ${sampleCount_packetsPerSec} + 1    ELSE    Continue For Loop

    [Return]    ${sampleCount_kilobitsPerSec}    ${sampleCount_packetsPerSec}

Validate samples
    [Documentation]    Verifying sample count subport Advanced statistics
    [Arguments]    ${sample_count}    ${ic_uri}    ${Linked_uplink_ports}
    ${receiveKilobitsPerSec}    ${receivePacketsPerSec}    Get IC Port Advanced statistics    ${ic_uri}    ${Linked_uplink_ports}
    ${sampleCount_kilobitsPerSec}    ${sampleCount_packetsPerSec}    Fetch Advanced Statistics samples    ${receiveKilobitsPerSec}    ${receivePacketsPerSec}
    Run Keyword If  ${sampleCount_kilobitsPerSec} != ${sample_count}    Fail    ELSE    Log  \nsample count kilobite per sec is ${sample_count}
    Run Keyword If  ${sampleCount_packetsPerSec} != ${sample_count}    Fail    ELSE    Log  \nsample values packets per sec is ${sample_count}

Validate Statistics
    [Documentation]    Verifying the commonstatistics counters values of given Port
    [Arguments]    ${commonStatistics_list}    ${counters}
    ${len}    Get Length    ${counters}
    :For    ${x}    In Range    0    ${len}
    \    Should be True    ${commonStatistics_list[${x}]} > ${counters[${x}]}    msg=\nPort counters didn't Increment Properly\n
    log    \nPort counters Incremented successfully during traffic\n    console=True

Clear Port Counters
    [Documentation]    Clear Port Counters
    [Arguments]     ${IC}
    ${IC_uri}    Get IC URI    ${IC}
    log    ${IC_uri}
    ${body}    Create Dictionary
    ${Resp}    Fusion Api clear Interconnect Ports    ${body}    ${IC_uri}
    Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log   \n-Port counters cleared Successfully
    Sleep    2min
