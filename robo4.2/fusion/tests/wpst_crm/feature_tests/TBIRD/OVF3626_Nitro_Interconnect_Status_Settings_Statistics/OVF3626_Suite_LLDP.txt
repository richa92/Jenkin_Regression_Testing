*** Settings ***
Documentation    Test Nitro Overview Behaviour
...              LLDP Settings

Variables       OVF3626_data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Suite Setup     Presetup for Nitro
Suite Teardown    Clean OV


*** Test Cases ***
API_TC1 LLDP Edit LIG and enable LLDP for both IPV4 & IPV6 verify UFG
    [Documentation]    Verify Put method for LLDP on LIG with Nitro by enabling LLDP for both IPV4 & IPV6 and verify UFG on LI
    [Tags]    LLDP_LI_IC_Tests

    Set Log Level    Trace
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Log    \n\n Setup LLDP on LIG with both IPV4 & IPV6 !!\n\n    console=True
    ${lig_get}    Get LIG member    ${LIG_names[0]}
    ${lig_uri}    Get Variable Value    ${lig_get['uri']}
    Set To Dictionary    ${lig_get['ethernetSettings']}    enableTaggedLldp=true
    Set To Dictionary    ${lig_get['ethernetSettings']}    lldpIpAddressMode=${lldpIpAddressMode[2]}
    Set To Dictionary    ${lig_get}    eTag=
    ${resp}    fusion_api_edit_lig    body=${lig_get}    uri=${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}

    Log    \n\n Verify LLDP IP on LI !!\n\n    console=True
    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}

    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${Master_IP_List}    Create List
    ${IC_Master_IPv4}    Get Variable Value    ${IC_Master[0]['lldpIpv4Address']}
    ${IC_Master_IPv6}    Get Variable Value    ${IC_Master[0]['lldpIpv6Address']}
    Append To List    ${Master_IP_List}    ${IC_Master_IPv4}    ${IC_Master_IPv6}

    :For    ${IP}    IN    @{LI_LLDP_IP}
    \    List Should Contain Value    ${Master_IP_List}    ${IP}
    \    log    \n\n The given IP ${IP} for LLDP in LI matches with IC Page


API_TC2 LLDP Edit LIG and enable LLDP for IPV6 and verify UFG during IC Poweroff Poweron
    [Documentation]    Edit LIG and change LLDP to IPv6 mode and verify LLDP IP change betwenn master and suboordinate during ICM reboot
    [Tags]    LLDP_LI_IC_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit['ethernetSettings']}    lldpIpAddressMode=${lldpIpAddressMode[1]}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}

    Log    \n\n Verify LLDP IP on LI !!\n\n    console=True
    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}

    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv6}    Get Variable Value    ${IC_Master[0]['lldpIpv6Address']}

    Should Be Equal As Strings    ${IC_Master_IPv6}    ${LI_LLDP_IP[1]}
    Log    \n\n The given IP ${LI_LLDP_IP[1]} for LLDP in LI matches with IC Page\n    console=True

    log    \n\n Poweroff Master ICM 3 and verify LLDP IP Change as ICM6 IP
    ${ICM3_uri}    Get IC URI    ${INTERCONNECTS[0]}
    Patch Interconnect    ${INTERCONNECTS_dto[0]}  op=replace  path=/powerState  value=Off  timeout=60
    sleep    100s

    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}

    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv6}    Get Variable Value    ${IC_Master[0]['lldpIpv6Address']}

    Should Be Equal As Strings    ${IC_Master_IPv6}    ${LI_LLDP_IP[1]}
    log    \n\n The given IP ${LI_LLDP_IP[1]} for LLDP in LI matches with IC Page

    log    \n\n Poweron ICM3 and verify ICM6 IP remains as LLDP IP\n    console=True
    Patch Interconnect    ${INTERCONNECTS_dto[0]}  op=replace  path=/powerState  value=On  timeout=60
    sleep    300s
    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ICM3_uri}    Configured

    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}
    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv6}    Get Variable Value    ${IC_Master[0]['lldpIpv6Address']}
    Should Be Equal As Strings    ${IC_Master_IPv6}    ${LI_LLDP_IP[1]}
    log    \n\n The given IP ${LI_LLDP_IP[1]} for LLDP in LI matches with IC Page

API_TC3 LLDP Edit LIG and enable LLDP for IPv4 and verify UFG during IC Efuse
    [Documentation]    Edit LIG and change LLDP to IPv4 mode and verify LLDP IP change betwenn master and suboordinate during ICM Efuse
    [Tags]    LLDP_LI_IC_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit['ethernetSettings']}    lldpIpAddressMode=${lldpIpAddressMode[0]}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}

    Log    \n\n Verify LLDP IP on LI !!\n\n    console=True
    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}

    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv4}    Get Variable Value    ${IC_Master[0]['lldpIpv4Address']}

    Should Be Equal As Strings    ${IC_Master_IPv4}    ${LI_LLDP_IP[0]}
    Log    \n\n The given IP ${LI_LLDP_IP[0]} for LLDP in LI matches with IC Page\n    console=True

    log    \n\n Efuseon Master ICM 6 and verify LLDP IP Change as ICM3 IP\n    console=True

    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    ${bay}    Fetch from right    ${INTERCONNECTS[1]}    ${SPACE}
    Efuse ICM    ${efuse_action[0]}    ${bay}
    ${ICM6_uri}    Get IC URI    ${INTERCONNECTS[1]}
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${ICM6_uri}    Absent
    sleep    60s

    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}
    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv4}    Get Variable Value    ${IC_Master[0]['lldpIpv4Address']}

    Should Be Equal As Strings    ${IC_Master_IPv4}    ${LI_LLDP_IP[0]}
    log    \n\n The given IP ${LI_LLDP_IP[0]} for LLDP in LI matches with IC Page\n    console=True

    log    \n\n Efuseoff ICM6 and verify ICM3 IP remains as LLDP IP\n    console=True
    Get EM IP    ${ENC1}
    Get EM Token    ${ENC1}
    ${bay}    Fetch from right    ${INTERCONNECTS[1]}    ${SPACE}
    Efuse ICM    ${efuse_action[1]}    ${bay}
    ${ICM6_uri}    Get IC URI    ${INTERCONNECTS[1]}
    sleep    60s
    Wait Until Keyword Succeeds    8 min    20s      IC reached state    ${ICM6_uri}    Configured

    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}
    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${IC_Master_IPv4}    Get Variable Value    ${IC_Master[0]['lldpIpv4Address']}
    Should Be Equal As Strings    ${IC_Master_IPv4}    ${LI_LLDP_IP[0]}
    log    \n\n The given IP ${LI_LLDP_IP[0]} for LLDP in LI matches with IC Page    console=True


API_TC4 LLDP Disable LLDP and verify LI IC
    [Documentation]    Disable LLDP on LI LIG and verify the LLDP parameters on ICM and LI Get Rest Calls
    [Tags]    LLDP_LI_IC_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit['ethernetSettings']}    enableTaggedLldp=false
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}

    Log    \n\n Verify LLDP IP on LI !!\n\n    console=True
    ${LI_LLDP_IP}    Get LI LlDP IP    ${LI_names}
    Lists Should Be Equal    ${LI_LLDP_IP}    ${Empty_list}

    log    \n\n Fetch Master IC\n\n    console=True
    ${IC_Master}    Get IC Master LlDP
    ${Master_IP_List}    Create List
    ${IC_Master_IPv4}    Get Variable Value    ${IC_Master[0]['lldpIpv4Address']}
    Run Keyword Unless    '${IC_Master_IPv4}' == ''    Fail    msg=LLDP IP is shown even after disabling
    ${IC_Master_IPv6}    Get Variable Value    ${IC_Master[0]['lldpIpv6Address']}
    Run Keyword Unless    '${IC_Master_IPv6}' == ''     Fail    msg=LLDP IP is shown even after disabling



*** Keywords ***

Presetup for Nitro
    [Documentation]    Presetup for Nitro OVF3626
    Log    \n Clean up the OV    console=True
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clean OV
    Add Ethernet Networks from variable    ${Enet_nitro}
    ## Includes sampling
    Add LIG from variable    ${lig_Nitro}
    Add Enclosure Group and Verify    ${enc_group}
    Add Logical Enclosure from variable    ${LE_Nitro}
    ${resp}    Add Server Profile    ${Server_profile1}
    Wait For Task2    ${resp}   timeout=8m    interval=10
    Power on server    ${SH_bay6_name}

    :FOR     ${IC}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${IC}
    \   Wait Until Keyword Succeeds   10 min    10s    IC reached state    ${ic_uri}    Configured
    \    Sleep    2min
    \   ${resp}=    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    \  ${state}=     Get From Dictionary     ${resp['members'][0]}   state
    \  Run Keyword If    '${state}' != 'Configured'      fail      msg="The IC module ${IC} is not in configured state"
    \   ...     ELSE   log    \n The IC module ${IC} is in configured state

Clean OV
    [Documentation]    Cleans the appliance
    log  \nCleaning the OV
    Power off ALL Servers    PressAndHold
    Remove All Server Profiles
    Remove All LEs
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users


Get ICs
    [Documentation]    Fetch Nitro ICs
    ${resp} =    fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
    \    Run Keyword If    '${ic['model']}' != '${ICM_MODEL}'      Continue For Loop
    \    Append to list    ${ic_list}    ${ic}
    [Return]    ${ic_list}

Get interconnect ip
    [Documentation]    Fetch IC IPs
    [Arguments]     ${ic}
    ${resp} =   Fusion Api Get Interconnect         param=?filter="'name'=='${ic}'"
    ${interconnectIP} =     Get From Dictionary     ${resp['members'][0]}   ipAddressList
    ${len}    Get Length    ${interconnectIP}
    :For    ${x}    In Range    0    ${len}
    \    ${value}    Run Keyword If   '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4Dhcp'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    #\    ${value}    Run Keyword If      '${interconnectIP[${x}]['ipAddressType']}' == 'Ipv4'    Get Variable Value    ${interconnectIP[${x}]['ipAddress']}    ELSE    Continue For Loop
    Log to console    \n the interconnect ip is :${value}\n
    [Return]    ${value}

Get IC Master LlDP
    [Documentation]  Get IC
    ${resp} =   fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Run Keyword If  '${ic['stackingDomainRole']}' != 'Master'       Continue For Loop
    \   ${IC_Master_LlDP}    Get Variable Value    ${ic['enableTaggedLldp']}
    \   Run Keyword Unless    ${IC_Master_LlDP} != 'True'    Fail    msg=LlDP is not Enabled
    \   Append to list      ${ic_list}  ${ic}
    [Return]    ${ic_list}

Get LI LlDP IP
    [Documentation]    Fetch LI LLDP IP based on LI names
    [Arguments]    ${LInames}
    ${len}    Get Length    ${LInames}
    ${LI_LLDP_IP}    Create List
    :For    ${x}    In Range    0    ${len}
    \    ${li_uri}    Get LI URI    ${LI_names[${x}]}
    \    ${li_get}    Fusion Api Get Li    ${li_uri}
    \    ${lldp_ipv6}    Get Variable Value    ${li_get['ethernetSettings']['lldpIpv6Address']}
    \    ${lldp_ipv4}    Get Variable Value    ${li_get['ethernetSettings']['lldpIpv4Address']}
    \    Append To List    ${LI_LLDP_IP}    ${lldp_ipv4}    ${lldp_ipv6}
    log    \n LI_LLDP_IP:${LI_LLDP_IP}\n    console=True
    [Return]    ${LI_LLDP_IP}
