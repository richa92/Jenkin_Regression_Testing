*** Settings ***
Documentation    Test Nitro Overview Behaviour
...              LLDP Settings

Variables       OVF3626_data_variables.py
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library         String
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Suite Setup     Presetup for Nitro
Suite Teardown    Clean OV


*** Test Cases ***

API_TC1 SNMPv3 Verify SNMPv3 Configurations on LIG LI
    [Documentation]    Configure and verify SNMPv3 on LI LIG
    [Tags]    SNMPv3_OV_Tests
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LIG_body_users}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State


API_TC2 SNMPv3 Edit LIG for SNMPv3 and add SNMPv1 Trap with same Trap IP as SNMPv3 and verify the behavior for UFG and Interconnects are in proper state after LI Update
    [Documentation]    Setting SNMP config in LIG for both snmpv1 and snmpv3 with same trap ip and UFG
    [Tags]    SNMPv3_OV_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    #${lig_uri}    Get Variable Value    ${lig_edit['uri']}

    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}
    Append To List    ${LIG_edit_snmp_trap}    ${v1_trap}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    Set To Dictionary    ${lig_snmp}    enabled=true
    Set To Dictionary    ${lig_snmp}    readCommunity=public
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}

    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State


API_TC3 SNMPv3 Verify editing SNMPv3 Trap IP and VI Trap IP on LIG and verify UFG
    [Documentation]    Edit LIG SNMPv3 Trap IP and v1 Trap IP and verify UFG is successful and IC's are in configured state after update
    [Tags]    SNMPv3_OV_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    #${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_trap}    Get Variable Value    ${lig_snmp['trapDestinations']}

    ${len}    Get Length   ${LIG_edit_snmp_trap}
    :For    ${x}    In Range    0    ${len}
    \    Log    \n Editing Trap Ip for ${LIG_edit_snmp_trap[${x}]['trapFormat']}\n    console=True
    \    Set To Dictionary    ${LIG_edit_snmp_trap[${x}]}    trapDestination=${alternate_trap_ip}
    \    Set To Dictionary    ${lig_snmp}    trapDestinations=${LIG_edit_snmp_trap}
    \    Set To Dictionary    ${lig_edit}    eTag=
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    Wait For Task2    ${resp}   timeout=2m    interval=10

    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State

API_TC4 SNMPv3 Verify behaviour for Editing SNMPv3 Username field for SNMPv3 users
    [Documentation]    Edit LIG for snmpv3 usernames even for those assigned in trap destinations and verify UFG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    #${lig_uri}    Get Variable Value    ${lig_edit['uri']}

    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    ${LIG_edit_snmp_user}    Get Variable Value    ${lig_snmp['snmpUsers']}
    log    \n snmpusers:${LIG_edit_snmp_user}    console=True

    Set To Dictionary    ${LIG_edit_snmp_user[0]}    snmpV3UserName=${li_usernames_edit[0]}
    Set To Dictionary    ${LIG_edit_snmp_user[0]}    userCredentials=${SNMPV3_LIG_body_11_users['snmpUsers'][7]['userCredentials']}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${LIG_edit_snmp_user}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State

    Log    \n Successfully edited ${li_usernames_edit[0]}\n    console=True

API_TC5 SNMPv3 Verify behavior for payload with SNMPv3 users and no trap destinations
    [Documentation]    Edit LIG for all snmpv3 usernames without trapsdestinations and verify UFG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    #${lig_uri}    Get Variable Value    ${lig_edit['uri']}

    ${list}    Create List
    ${temp}    Copy Dictionary    ${SNMPV3_LIG_body_users}
    Set To Dictionary    ${temp}    trapDestinations=${list}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State

API_TC6 SNMPv3 Edit Snmpv3 and set notification type to inform
    [Documentation]    Edit LIG for snmpv3 and set notification type to inform and verify UFG
    [Tags]    SNMPv3_OV_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    #${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${temp}    Copy Dictionary    ${SNMPV3_LIG_body_users}
    Set To Dictionary    ${temp['trapDestinations'][0]}    inform=true
    Set To Dictionary    ${temp['trapDestinations'][0]}    engineId=${engine_id}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State

API_TC7 SNMPv3 Negative Scenario Verify behavior for 11 snmpv3 users payload on LIG
    [Documentation]    verify the behaviour for sending payload that exceeds 6 maximum SNMPV3 users
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${SNMPV3_LIG_body_11_users}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USERS_EXCEEDS_MAX'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    #Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USERS_EXCEEDS_MAX'    Log  \nmessage: ${task['taskErrors'][0]['message']}\n Expected failure\n
    #...    ELSE    FAIL

    log    \n Successfully verified that Nitro LIG accepts only a maximum of 10 users at a time \n    console=True

API_TC8 SNMPv3 Negative Scenario Verify behavior for 7 snmpv3 traps payload on LIG
    [Documentation]    verify the behaviour for sending payload that exceeds 6 maximum SNMPV3 users
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Get Variable Value    ${lig_edit['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${v3_7trapDestinations}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_TRAP_DESTINATION_EXCEEDS_MAX'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL

    log    \n Successfully verified that Nitro LIG accepts only a maximum of 6 Traps at a time \n    console=True

API_TC9 SNMPv3 Negative Scenario verify default SNMPv3 and check disable SNMPv3
    [Documentation]    Verify behavior for SNMPv3 Disable on LIG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit['snmpConfiguration']}    v3Enabled=false
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_TRAPS_CAN_NOT_BE_DISABLED'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n\n SNMPv3 is Enabled by default and can't be disabled\n    console=True

# username auth priv validation
# backup

API_TC10 SNMPv3 Negative Scenario Delete a user who is assigned to trap and verify behaviour on LIG
    [Documentation]    Edit LIG SNMPV3 for deleting a user who is assigned to a trap
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit['snmpConfiguration']}    snmpUsers=${null_list}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_NOT_FOUND'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    Log    \n Successfully verified the behaviour for deleting a non existing user\n    console=True


API_TC11 SNMPv3 Edit password of a snmpv3 user in LIG and verify LI is in Inconsistent state
    [Documentation]    Edit LIG SNMPV3 password for user and check whether LI is inconsistent
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

    ${lig}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig['uri']}

    Set To Dictionary    ${lig}    snmpConfiguration=${SNMPV3_SHA}
    ${resp}    fusion_api_edit_lig    body=${lig}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Update Logical Interconnect from Group    ${LI_update}
    Check IC's State

    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit['snmpConfiguration']['snmpUsers'][0]}    userCredentials=${invalid_userCredentials}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Wait For Task2    ${resp}   timeout=2m    interval=10

## Verify LI is inconsistent
    ${state}    Check LI Status    ${LI}    NOT_CONSISTENT
    Log    \n Successfully verified the behaviour for editing LIG snmpv3 Auth/Priv passwords and verified LI is inconsistent for the same\n    console=True


API_TC12 SNMPv3 Negative Scenario verify snmpv3 username field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 username textbox validations on LIG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

# Negative scenarios for all negative username/password fields "CRM_SNMP_CONFIGURATION_USER_NAME_INVALID" - same error code since pass 13
# SNMPV3 Username Text Box Validations 1- 31 characters of alpha numeric

    log to console    \nSNMPV3 Username field with special characters , 8 spaces as usernames\n

    ${len}    Get Length    ${inavlid_snmp_usernames}
    ${temp}    Copy Dictionary    ${SNMPV3_SHA}
    :For    ${x}    In Range    0    ${len}
    \    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${inavlid_snmp_usernames[${x}]}
    \    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    \    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    \    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    \    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    \    #${task}    Wait For Task    ${resp}    60s
    \    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    \    ...    ELSE    FAIL

    log    \nSNMPV3 username field with username exceeding 31 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified the username text box supports a maximum of 31 characters only\n    console=True

    log    \nSNMPv3 username field with username as null\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]}    snmpV3UserName=${max_length_username[1]}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_USER_NAME_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified the username text box requires a minimum of 1 character\n    console=True


API_TC13 SNMPv3 Negative Scenario verify snmpv3 Auth protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Authentication protocol textbox validations on LIG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

#Negative scenarios
    ${temp}    Copy Dictionary    ${SNMPV3_SHA}

    log    \nInvalid auth password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${invalid_auth_passwords}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support spaces as inputs\n

    log    \nTrying with auth password exceeding 31 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support more than 31 characters\n

    log    \nTrying with auth password less than 8 characters\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][0]}    value=${min_length_auth_password}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_AUTH_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support less than 8 characters\n

API_TC_14 SNMPv3 Negative Scenario verify snmpv3 priv protocol's password field textbox combinations on LIG
    [Documentation]    verify different SNMPV3 Privacy protocol textbox validations on LIG
    [Tags]    SNMPv3_LIG_LI_Validation_Tests

# Negative scenarios
# Trying with special characters , 8 spaces as usernames


    ${len}    Get Length    ${invalid_auth_passwords}
    ${temp}    Copy Dictionary    ${SNMPV3_SHA}

    log    \nInvalid privacy password containing 8 spaces\n

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${invalid_auth_passwords}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support spaces as inputs\n

    log    \nTrying with privacy password exceeding 31 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${max_length_username[0]}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support more than 31 characters\n    console=True


    log    \nTrying with privacy password less than 8 characters\n    console=True

    Set To Dictionary    ${temp['snmpUsers'][0]['userCredentials'][1]}    value=${min_length_auth_password}
    ${lig_edit}    Get LIG member    ${lig_Nitro['name']}
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${temp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    #${task}    Wait For Task    ${resp}    60s
    Run Keyword If  '${resp['errorCode']}' == 'CRM_SNMP_CONFIGURATION_PRIV_PWD_INVALID'    Log  \nmessage: ${resp['message']}\n Expected failure\n
    ...    ELSE    FAIL
    log    \n Successfully verified Auth password field does not support less than 8 characters\n    console=True


API_TC15 SNMPv3 Backup Restore with SNMPv1 SNMPv3
    [Documentation]    Verify
    [Tags]    SNMPv1_backup_and_restore_Nitro_IC
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}

    Log    \n-Creating the backup in OV    console=True
    Create Backup           Backup failed

    Log    \n DISABLE SNMPv1/v3 on OV for ${LI_names[0]} \n    console=True
    ${li_uri}    Get LI URI    ${LI_names[0]}
    ${snmpURI}    LI Uri for SNMP    ${LI_names[0]}
    ${LI_edit}    Fusion Api Get Li    ${li_uri}

    Set To Dictionary    ${LI_edit['snmpConfiguration']}    enabled=false
    #Set To Dictionary    ${LI_edit['snmpConfiguration']}    v3Enabled=false
    ${resp}    fusion_api_update_li_telemetry_configuration    uri=${snmpURI}    body=${LI_edit['snmpConfiguration']}
    Wait For Task2    ${resp}   timeout=2m    interval=10

    Power off ALL Servers
    Log     \n\nRestoring from the backup in the appliance    console=True
    Restore Appliance
    Sleep   5 min
    Fusion Api Login Appliance     ${APPLIANCE_IP}    ${ADMIN_CREDS}

    Log     \nVerifying whether snmpv1 is enabled after restore\n    console=True
    ${li_uri}    Get LI URI   ${LI_names[0]}
    ${LI_edit}    Fusion Api Get Li    ${li_uri}
    ${LI_edit_snmp}    Get Variable Value    ${LI_edit['snmpConfiguration']}
    Log    \nSNMPv1 configuration after restore is ${LI_edit_snmp['enabled']}\n    console=True

    Run Keyword Unless  '${LI_edit_snmp['enabled']}' != 'true'    Fail    msg=SNMPv1 configurations not restored properly\n
    #Run Keyword Unless  '${LI_edit_snmp['v3Enabled']}' != 'true'    Fail    msg=SNMPv1 configurations not restored properly\n
    Verify SNMPv1 on LIG    ${LIG_names}
    Verify SNMPv1 on LI    ${LI_names}
    Log    \nverified SNMPv1/v3 configuration after restore Successfully!!\n    console=True



*** Keywords ***
Presetup for Nitro
    [Documentation]    Presetup for Nitro OVF3626
    Log    \n Clean up the OV    console=True
    Set Log Level    Trace
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${ADMIN_CREDS}
    Clean OV
    Add Ethernet Networks from variable    ${Enet_nitro}
    ## Includes sampling
    Add LIG from variable    ${lig_Nitro}
    Add Enclosure Group and Verify    ${enc_group}
    Add Logical Enclosure from variable    ${LE_Nitro}
    ${resp}    Add Server Profile    ${Server_profile1}
    Wait For Task2    ${resp}   timeout=8m    interval=10
    Power on server    ${SH_bay6_name}

Clean OV
    [Documentation]    Cleans the appliance
    Log    \nCleaning the OV    console=True
    Power off ALL Servers
    Remove All Server Profiles
    Remove All LEs
    Remove All Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets

Get ICs
    [Documentation]  Get IC
    ${resp} =   fusion api get interconnect
    ${ic_list} =    Create List
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Run Keyword If  '${ic['model']}' != '${ICM_MODEL}'      Continue For Loop
    \   Append to list      ${ic_list}  ${ic}
    [Return]    ${ic_list}

Check IC's State
    [Documentation]    Check IC's State
    ${ic_list}    Get ICs
    ${len}    Get Length    ${ic_list}
    :For    ${x}    In Range    0    ${len}
    \    ${state}    Get From Dictionary    ${ic_list[${x}]}    state
    \    log    \n The iC's state are : ${state}\n    console=True
    \    Should Be Equal As Strings    ${state}    ${IC_state}
    \    log    \n The IC: ${ic_list[${x}]['productName']} is in Configured State\n    console=True

LI Uri for SNMP
    [Documentation]    Fetch LI Uri for SNMP
    [Arguments]    ${LI_name}    ${snmp_config}=snmp-configuration
    ${li_uri}    Get LI URI   ${LI_name}
    ${LI}    Fusion Api Get Li    ${li_uri}
    ${uri}    Get From Dictionary    ${LI}    uri
    ${LI_uri}    Catenate    SEPARATOR=/    ${uri}    ${snmp_config}
    [Return]    ${LI_uri}

Verify SNMPv1 on LIG
    [Documentation]    Verify SNMPv1 value on LIG
    [Arguments]    ${LIG_names}
    ${len}    Get Length    ${LIG_names}
    :For    ${x}    In Range    0    ${len}
    \    ${lig_get}    Get LIG member    ${LIG_names[${x}]}
    \    ${lig_snmp}    Get Variable Value    ${lig_get['snmpConfiguration']}
    \    Run Keyword Unless    ${lig_snmp['enabled']} != 'True'    Fail    msg=\nSNMPv1 configuration on LIG ${LIG_names[${x}]} is absent!!\n
    [Return]    ${lig_snmp}

Verify SNMPv1 on LI
    [Documentation]    Verify SNMPv1 value on LI
    [Arguments]    ${LI_names}
    ${len}    Get Length    ${LI_names}
    :For    ${x}    In Range    0    ${len}
    \    ${li_uri}    Get LI URI    ${LI_names[${x}]}
    \    ${li_get}    Fusion Api Get Li    ${li_uri}
    \    ${li_snmp}    Get Variable Value    ${li_get['snmpConfiguration']}
    \    Run Keyword Unless    ${li_snmp['enabled']} != 'true'    Fail    msg=\nSNMPv1 configuration on LIG ${LI_names[${x}]} is absent!!\n
    [Return]    ${li_snmp}

