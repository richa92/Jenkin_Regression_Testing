*** Settings ***
Documentation		FIPSnooping using FusionLibrary API keywords
Variables		../F943/data_variables.py
Library			json
Library			FusionLibrary
Library			RoboGalaxyLibrary
Library			Collections
Library			SSHLibrary
Resource		../F943/resource.txt
Suite Setup     Suite Setup Tasks
Suite Teardown      Suite Teardown

*** Variables ***
${APPLIANCE_IP}		15.245.131.222
${stat}			statistics
FIPsnooping_Parameters_uplink = {"fcfMacAddress": ["78:48:59:6a:2d:38"], "fcID": [], "lagId": "2", "fcfName": "10:00:78:48:59:6a:2d:31", "fcoeMacAddress": [], "fcMap": "0e:fc:00"}
FIPsnooping_Parameters_downlink = {"fcfMacAddress": ["78:48:59:6a:2d:38"], "fcID": ["01:0b:01"], "lagId": "2", "fcfName": "10:00:78:48:59:6a:2d:31", "fcoeMacAddress": ["0e:fc:00:01:0b:01"], "fcMap": None, "network": "FCoENet", "externalVlan": "1004", "fcoeLoginCount": "1","port": "d1"}

*** Test Cases ***

1. Login to Appliance and cleanup

	[Tags]  add   POSITIVE
	Set Log Level    TRACE
	Log to console	logging in appliance
	Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

	
2. Creating FCOE Network	

	Log to console	\n creating FCoE Network
	${resp}		Fusion Api Create Fcoe Network		body=${fcoenets[0]}
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-FCoE network created successfully
	
	
3. Creating LIG
	
	${body} =   Build LIG body      ${ligs['lig2']}
	Log to console	\n creating LIG
	${resp} = 	Fusion Api Create LIG	${body}
	${task} =	Wait For Task	${resp} 	60s	2s
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-created LIG successfully
	
4. Creating Enclosure Group
	
	Log to console	\n Creating EG
	${Resp} =	Add Enclosure Group from variable		${enc_group}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
	
	
5. Creating Logical Enclosure
	
	Log to console	\n Creating LE
	${Resp} =	Add Logical Enclosure from variable     ${Logical_Enclosure[0]}
	Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-created LE successfully

		
6. Creating Server Profile and Powering on server

	Log to console	\n Creating Server Profile
	Add Server Profiles from variable   ${server_profiles}
    Power on server     ${server_profiles[0]['serverHardwareUri']}
	Log to console and logfile  	Waiting 10 minutes for server to boot...
    Sleep   10min
	
7. Verifying the FipSnooping data 	

	Log to console	\n Verifying FIPSnooping Data
	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
8. Adding Different user

	${l} = 	Get Length	${users}
	#Log to console	\n ${l}
	:FOR	${x}	IN RANGE	0	${l}
	\   ${resp}		Fusion Api Add User		body=${users[${x}]} 
	\	Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-Created ${users[${x}]['roles']} user successfully
	#\	Log to console	\n response ${resp}
	
	${resp}		Fusion Api Logout Appliance
	Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
	Log to console	\n Logged out successfully	
	
9. Logging in as different user

	${l} = 	Get Length	${users}
	#Log to console	\n ${l}
	:FOR	${x}	IN RANGE	0	${l}
	\   ${resp}		Fusion Api Login Appliance		${APPLIANCE_IP}		${usercred[${x}]} 
	\	Log to console	\n Logged in successfully as ${usercred[${x}]['userName']}
	\	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	\	#Log to console	\n  resp total is ${Resp}
	\	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	\	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
	\	${resp}		Fusion Api Logout Appliance
	\	Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
	Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
	
10. Verifying the FipSnooping data In First Uplink Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Log to console	\n  FIPs data in first port ${Resp}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	

11. Verifying the FipSnooping data In Secondary Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['Secondary_Port']}
	${Resp} =		Verify FipSnooping Data		${ic_uri}
	Log to console	\n  FIPs data in second port ${Resp}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	
	
12. Disable Uplink Ports

	${l} = 	Get Length	${Disable_Port}
		
	:FOR	${x}	IN RANGE	0	${l}
	\   ${uri} =	Get IC URI		${interconnects[0]}
	\	@{id} = 	Split String	${uri}	/
	\	${port_id} = 	Get From List	${id}	3
	\	${portid}		catenate    ${port_id}:${uplink_ports[${x}]}
	\	#Log to console	\nport id ${portid}
	\	Set to Dictionary   ${Disable_Port[${x}]}  portId     ${portid}
	\	#Log to console	\nport id after set ${Disable_Port[${x}]}
	\	${temp_list} =	Create List		${Disable_Port[${x}]}
	\	#Log to console	\nresp after update is ${temp_list}
	\	${Resp}		Fusion Api Edit Interconnect Ports		${temp_list}		${uri}				
	\	Log to console	\nresp after update is ${Resp}
	\	Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully Disabled the uplink port
	
	Sleep   4min
	
13.Verifying the FipSnooping data In First Uplink Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Log to console	\n  FIPs data in first port ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified that the absence of FIPS data in first uplink port after disable
	
14.Verifying the FipSnooping data In Secondary Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['Secondary_Port']}
	${Resp} =		Verify FipSnooping Data		${ic_uri}
	Log to console	\n  FIPs data in second port ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified that the absence of FIPS data in second uplink port after disable
	
15. Enable Uplink Ports

	${l} = 	Get Length	${Enable_Port}
	Log to console	\n Enabling uplink ports
	:FOR	${x}	IN RANGE	0	${l}
	\	${uri} =		Get IC URI		${interconnects[0]}
	\	@{id} = 	Split String	${uri}	/
	\	${port_id} = 	Get From List	${id}	3
	\	${portid}		catenate    ${port_id}:${uplink_ports[${x}]}
	\	#Log to console	\nport id ${portid}
	\	Set to Dictionary   ${Enable_Port[${x}]}  portId     ${portid}
	\	#Log to console	\nport id after set ${Enable_Port[${x}]}
	\	${temp_list} =	Create List		${Enable_Port[${x}]}
	\	#Log to console	\nresp after update is ${temp_list}
	\	${Resp}		Fusion Api Edit Interconnect Ports		${temp_list}		${uri}
	\	#Log to console	\n resp after update is ${Resp}
	\	Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully Enabled the uplink port

	
	Sleep   7min

15. Verifying the FipSnooping data In First Uplink Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Log to console	\n  FIPs data in first port ${Resp}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	

16. Verifying the FipSnooping data In Secondary Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['Secondary_Port']}
	${Resp} =		Verify FipSnooping Data		${ic_uri}
	Log to console	\n  FIPs data in second port ${Resp}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	
	
17. Issue a powerControl Off, verify	
	[Tags]  powerOff
    Log to console and logfile  -Issue powerControl Off
	${ic} =     Get IC
	${uri} =    Get From IC     ${ic[0]}   uri
	#Log to console	\nuri is ${uri}
	#Log to console and logfile		${uri}
	${body} =   Create Dictionary   op=replace
	...                             path=/powerState
	...                             value=Off
	${body} =   Create list     ${body}
	#Log to console	\nbody is ${body}
    ${resp} =   fusion api patch interconnect	body=${body}    uri=${uri}
	#Log to console	\nresp after power off is ${resp}
	#Log to console and logfile		resp is ${resp}
    ${task} =   Wait for Task   ${resp}
	#Log to console and logfile		task is ${task}
	${valDict} = 	Create Dictionary	status_code=${200}
	...                                 taskState=Completed
	#Log to console and logfile		valdict is ${valDict}
	Validate Response	${task}	${valDict}
	Log to console and logfile		Sleeping for 2 mins
	Sleep   2min
	Log to console and logfile  -Verify it's off
	
	${ic} =     Get IC
	${powerState} =     Get From IC    ${ic[0]}   powerState
    Should Be Equal As Strings    ${powerState}    Off	
	
	

18. Issue a powerControl On, verify
    [Tags]  powerOn
    Log to console and logfile  -Issue powerControl On
	${ic} =     Get IC
	#Log to console	\nic after return is ${ic}
	${uri} =    Get From IC     ${ic[0]}   uri
	#Log to console	\nuri is ${uri}
	${body} =   Create Dictionary   op=replace
	...                             path=/powerState
	...                             value=On
	${body} =   Create list     ${body}
	#Log to console	\nbody is ${body}
    ${resp} =   fusion api patch interconnect	body=${body}    uri=${uri}
	#Log to console	\nresp is ${resp}
    ${task} =   Wait for Task   ${resp}
	#Log to console and logfile		task is ${task}
	${valDict} = 	Create Dictionary	status_code=${200}
	...                                 taskState=Completed
	#Log to console and logfile		valdict is ${valDict}
	Log to console and logfile		Sleeping for 10 mins
	Sleep   10min
	Log to console and logfile  -Verify it's ON
	${ic} =     Get IC
	${powerState} =     Get From IC    ${ic[0]}   powerState
    Should Be Equal As Strings    ${powerState}    On
	
19. Verifying the FipSnooping data after IC powerON

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Log to console	\n  resp total is ${Resp}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
20. Issue a Reset, verify

	[Tags]  Reset
    Log to console and logfile  -Issue Reset
	${ic} =     Get IC
	#${uri} =    Get From IC     ${ic[0]}   uri
	${uri} =    Get From IC     ${ic[0]}   uri
	#Log to console and logfile		${uri}
	${body} =   Create Dictionary   op=replace
	...                             path=/deviceResetState
	...                             value=Reset
	${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect	body=${body}    uri=${uri}
	#Log to console	\nresp after resetis ${resp}
	#Log to console and logfile		resp is ${resp}
    ${task} =   Wait for Task   ${resp}
	#Log to console and logfile		task is ${task}
	Log to console and logfile		Sleeping for 2 mins
	Sleep   2min

	
21. Verifying the FipSnooping data during RESET

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	#Log to console	\n  resp total is ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified data is not available in the subportStatistics and portstatistics
	Log to console	\n Sleeping for 5 minutes to regain the FIPSnooping data after reset
	Sleep   5min
		
22. Verifying the FipSnooping data after RESET

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
23. Power off server

	Power off server     ${server_profiles[0]['serverHardwareUri']}
	Log to console and logfile  	Waiting 5 minutes for the server to poweroff..
    Sleep   5min
	
	
	
24. Verify FIPSnooping data in uplink port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	
	
25. Verify FIPSnooping data in downlink port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['downlink_port']}
	${Resp}		Verify FipSnooping Data in Downlink     ${ic_uri}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified that the absence of FIPS data in downlink port when server is powered off
	
26. Editing serverprofile with incorrect mac address

	${resp}     Edit Server Profiles from variable   ${server_profiles_edit}
	#Log to console	\nresp with no connection ${resp}
    ${resp}     Edit Server Profiles from variable   ${server_profiles_edit1}
	#Log to console	\nresp with connection ${resp}
	
	
    Power on server     ${server_profiles[0]['serverHardwareUri']}
	Log to console and logfile  	Waiting 10 minutes for server to boot...
    Sleep   10min
	
27. Verifying the FipSnooping data In Uplink Port

	#Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	
    
28. Verifying the FipSnooping data In Downlink Port

	#Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data in Downlink     ${ic_uri}
	Log to console	\n  FIPs data in first port ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified that the absence of FIPS data in downlink port with wrong mac address.
	
	

	Power off server     ${server_profiles[0]['serverHardwareUri']}
	Log to console and logfile  	Waiting 5 minutes for the server to poweroff..
    Sleep   5min
	
29. Editing serverprofile with correct mac address

	${resp}     Edit Server Profiles from variable   ${server_profiles_edit}
	#Log to console	\nresp with no connection ${resp}
    ${resp}     Edit Server Profiles from variable   ${server_profiles}
	#Log to console	\nresp with connection ${resp}
	
	Power on server     ${server_profiles[0]['serverHardwareUri']}
	Log to console and logfile  	Waiting 10 minutes for server to boot...
    Sleep   10min
	
	
30. Verifying the FipSnooping data after correct MAC address

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
31. Edit LIG without network
	
	${body} =   Build LIG body      ${ligs['lig3']}
	Log to console	\n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
	${resp} = 	Fusion Api Edit LIG	    body=${body}	uri=${lig_uri}
	Log to console	\n Editing LIG ${resp}
	${task} =	Wait For Task 	${resp} 	120s	2s
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited without network successfully
	Perform an Update From Group    ${LE}-${LIG1}	120 min		1 min
	
32. Verifying the FipSnooping data without network	

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	#Log to console	\n  resp total is ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified data is not available in the subportStatistics and portstatistics
	
33. Edit LIG with network
	
	${body} =   Build LIG body      ${ligs['lig1']}
	Log to console	\n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
	${resp} = 	Fusion Api Edit LIG	    body=${body}	uri=${lig_uri}
	Log to console	\n Editing LIG ${resp}
	${task} =	Wait For Task 	${resp} 	120s	2s
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with network successfully
	Perform an Update From Group    ${LE}-${LIG1}	120 min		1 min
	Sleep   2min

34. Verifying the FipSnooping data with network

	Log to console	\n Verifying FIPs Data
	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
35. Disable Downlink Ports

	${l} = 	Get Length	${downlink_port_disable}
	Log to console	\n Disabling uplink ports
	:FOR	${x}	IN RANGE	0	${l}
	\   ${uri} =	Get IC URI		${interconnects[0]}
	\	@{id} = 	Split String	${uri}	/
	\	${port_id} = 	Get From List	${id}	3
	\	${portid}		catenate    ${port_id}:${downlink_ports[${x}]}
	\	Log to console	\nport id ${portid}
	\	Set to Dictionary   ${downlink_port_disable[${x}]}  portId     ${portid}
	\	Log to console	\nport id after set ${downlink_port_disable[${x}]}
	\	${temp_list} =	Create List		${downlink_port_disable[${x}]}
	\	Log to console	\nresp after update is ${temp_list}
	\	${Resp}		Fusion Api Edit Interconnect Ports		${temp_list}		${uri}				
	\	Log to console	\nresp after update is ${Resp}
	\	Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully Disabled the uplink port
	
	Sleep   5min
	
36. Verifying FipSnooping Data in Uplink Port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['uplink_port']}
	${Resp}		Verify FipSnooping Data     ${ic_uri}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	
	
37. Verify FIPSnooping data in downlink port

	Log to console and logfile  	Getting interconnect uri
	${uri} =		Get IC URI		${interconnects[0]}	
	${ic_uri} =        catenate    ${uri}/${stat}/${ports[0]['downlink_port']}
	${Resp}		Verify FipSnooping Data in Downlink     ${ic_uri}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified that the absence of FIPS data in downlink port when downlink is disabled	
	
38. Enable downlink Ports

	${l} = 	Get Length	${downlink_port_enable}
	Log to console	\n Enabling downlink ports
	:FOR	${x}	IN RANGE	0	${l}
	\   ${uri} =	Get IC URI		${interconnects[0]}
	\	@{id} = 	Split String	${uri}	/
	\	${port_id} = 	Get From List	${id}	3
	\	${portid}		catenate    ${port_id}:${downlink_ports[${x}]}
	\	Log to console	\nport id ${portid}
	\	Set to Dictionary   ${downlink_port_enable[${x}]}  portId     ${portid}
	\	Log to console	\nport id after set ${downlink_port_enable[${x}]}
	\	${temp_list} =	Create List		${downlink_port_enable[${x}]}
	\	Log to console	\nresp after update is ${temp_list}
	\	${Resp}		Fusion Api Edit Interconnect Ports		${temp_list}		${uri}				
	\	Log to console	\nresp after update is ${Resp}
	\	Run Keyword If  '${Resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully enabled the downlink port
	
	Sleep   5min
	
39. Verifying the FipSnooping data 	

	Log to console	\n Verifying FIPs Data
	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}
	
   
40. Edit LIG without uplinkport
	
	${body} =   Build LIG body      ${ligs['lig4']}
	Log to console	\n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
	${resp} = 	Fusion Api Edit LIG	    body=${body}	uri=${lig_uri}
	Log to console	\n Editing LIG ${resp}
	${task} =	Wait For Task 	${resp} 	120s	2s
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited without uplinkport successfully
	Perform an Update From Group    ${LE}-${LIG1}	120 min		1 min
	Sleep   2min
    
41. Verifying the FipSnooping data 	

	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	#Log to console	\n  resp total is ${Resp}
	Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-Successfully verified data is not available in the subportStatistics and portstatistics
	
42. Edit LIG with uplinkport
	
	${body} =   Build LIG body      ${ligs['lig1']}
	Log to console	\n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
	${resp} = 	Fusion Api Edit LIG	    body=${body}	uri=${lig_uri}
	Log to console	\n Editing LIG ${resp}
	${task} =	Wait For Task 	${resp} 	120s	2s
	Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with uplinkport successfully
	Perform an Update From Group    ${LE}-${LIG1}	120 min		1 min
	Sleep   3min

43. Verifying the FipSnooping data 	

	Log to console	\n Verifying FIPs Data
	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}

44. Perform Backup Operation
	${Response}		Fusion Api Create Backup
	Run keyword If	${Response['status_code']}!= 202	Fail	"Unable to Create Backup"
	Sleep	240sec
	
	${Response}		Fusion Api Get Backup
	Run keyword If	${Response['status_code']}!= 200	Fail	"Unable to Get the latest backup"
	Log to console and logfile    Successfully got the backup ${Response}
    Sleep   2min
    
45. Restore from Backup operation
	${status}=	Set Variable    ${EMPTY}
	${Response}		Fusion Api Get Backup
    Log to console and logfile    Successfully got the backupfile cont ${Response}
	Run keyword unless	${Response['status_code']}== 200	Fail	"Unable to Get the latest backup"
	${restore_body}		Create Dictionary	type=RESTORE 	
	...										uriOfBackupToRestore=${Response['members'][0]['uri']}
	Log to console and logfile		"restore Body is"
	Log to console and logfile		${restore_body}
	${output}		Fusion Api Restore Backup		${restore_body}
	Log to console and logfile		${output}
	Sleep	400sec
	Run keyword unless	${output['status_code']}== 202	Fail	"Unable to perform the restore from backup operation"
    Log to console and logfile		slept 300 sec
	${restore_resp}		Fusion API Get Restore Status
    Log to console and logfile      ${restore_resp}		
	Run keyword unless	${restore_resp['status_code']}== 200	Fail	"Unable to get the restore details"
	:FOR	${index}	IN RANGE	${restore_resp['count']}
	\	Run Keyword If	'${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'		Continue For Loop
    
	\	${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
    \   Log to console and logfile      ${restore_id}
    
    Log to console and logfile      ${restore_id}
	:FOR	${index}	IN RANGE	50
	\	sleep	30sec
	\	Log to console and logfile		"Restoring is in Progress..."
	\	${resp}		Fusion API Get Restore Status	${restore_id}
    \   Log to console and logfile      ${resp}
	\	Run keyword unless	${resp['status_code']}== 200	Fail	"Unable to get the restore id details"
	\	Run Keyword If	'${resp['progressStep']}' != 'COMPLETED'	Continue For Loop
	\	${status} =    Set Variable    ${resp['status']}
	\	Run Keyword If	'${resp['progressStep']}' == 'COMPLETED'	Exit For Loop
	Should Be Equal    ${status}	SUCCEEDED
    Sleep   10min
    
    
46. Verifying the FipSnooping data 	
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
	Log to console	\n Verifying FIPs Data
	${Resp}		Get FipSnooping Data     ${interconnects[0]}
	Validate Response	${Resp['fips_data_uplink'][0]}	${FIPsnooping_Parameters_uplink}
	Validate Response	${Resp['fips_data_downlink'][0]}	${FIPsnooping_Parameters_downlink}    
    
***Keywords***

Verify FipSnooping Data

	[Arguments]     ${ic_uri}
	Log to console	\nic uri in func is ${ic_uri}
	${resp}		Fusion Api Get Interconnect		${ic_uri}
	Log to console	\nresp uplink is ${resp}
	${Resp} =		Get Fips Data Uplink		${resp}
	Log to console	\nresp uplink is ${Resp}
	[Return]	${Resp}
    
Verify FipSnooping Data in Downlink

	[Arguments]     ${ic_uri}
	Log to console	\nic uri in func is ${ic_uri}
	${resp}		Fusion Api Get Interconnect		${ic_uri}
	Log to console	\nresp uplink is ${resp}
	${Resp} =		Get Fips Data Downlink		${resp}
	Log to console	\nresp uplink is ${Resp}
	[Return]	${Resp}
	
Perform an Update From Group

	[Arguments]		${li}	${timeout}=5 min 	${interval}=15s
	Log to console	\n li li ${li}
	Log to console	\n li timeout ${timeout}
	Log to console	\n li interval ${interval}
	${li_uri} =     Get LI URI   ${li}
	Log to console	\n li uri ${li_uri}
	
	${resp}		Fusion Api Update From Group      ${li_uri}
	#${resp}		fusion_api_update_from_group		${li_uri}
	${task} =	    Wait For Task 	${resp} 	${timeout}		${interval}
	${valDict} = 	Create Dictionary	status_code=${200}
	...                                 taskState=Completed
	Validate Response	${task}	${valDict}	

Remove All User
	[Documentation]	Querys the appliance for all Users and then removes them
	Log to console  Removing USERS
	${users} =  Fusion Api Get User
	Log to console and logfile		${users}
	:FOR	${user}	IN	@{users['members']}
	\		Continue For Loop If	'${user['userName']}'=='Administrator'
	\		Continue For Loop If	'${user['userName']}'=='administrator'
	\		Continue For Loop If	'${user['userName']}'=='HardwareSetup'
	\		${resp} =   Fusion Api Remove User		uri=${user['uri']}
	\		Log to console	\n${resp}
	
Suite Setup Tasks
    [Documentation]	Cleans the appliance
	Log to console and logfile	\nCleaning the OV
    Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	Power off ALL Servers
	Remove All Server Profiles
	Remove All Logical Enclosures
	Remove ALL Enclosure Groups
	Remove ALL LIGs
	Remove ALL Ethernet Networks
	Remove ALL FC Networks
	Remove ALL FCoE Networks
	Remove ALL Network Sets
	Remove ALL User     