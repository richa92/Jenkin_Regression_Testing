*** Settings ***
Documentation       Plexxi
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             SSHLibrary
Variables           data_variables.py
Resource            ../../../../../Resources/api/fusion_api_resource.txt
Resource			../../TBIRD/FVT/Resources/fvt_resource.txt
Library				../../TBIRD/FVT/fvt_api.py
Suite Setup			Login User

***Variables***
${minVlan}	400
${maxVlan}	450
${rns_start} 	430
${port_label}	3

*** Keywords ***
Login User
    [Documentation]	Login Administrator To OneView
    Set Log Level    Trace
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    Plexxi Api Login   ${plexxi_connect_host}   ${plexxi_credentials['userName']}   ${plexxi_credentials['password']}
	${resp} =	Plexxi Api Get Current User
	${user} =	Set Variable	${resp['result']}
	${uuid} =	Set Variable	${user['uuid']}
	Keep In Dictionary	${user}	username	token_lifetime	auth_source_uuid	role
	Set To Dictionary	${user}	token_lifetime	${600}
	Plexxi Api Update User	body=${user}	uuid=${uuid}
	Set Suite Variable	@{swlist}	${plexxi_switches[0]['name']}	${plexxi_switches[1]['name']}
	[Return]

Wait For Task To Complete 
    [Documentation]	Wait For Task To Complete
	[Arguments]	${task}	${timeout}=10m	${interval}=1s
	Should Be Equal As Integers	${task['status_code']}	202
	${task} =	Wait For Task	${task}	${timeout}	${interval}
	Should Match Regexp	${task['taskState']}	Completed|Warning
	[Return]	${task}

Create Bulk Ethernet Networks
	[Documentation]	Create All Networks To Be used
	Set To Dictionary	${networks}	vlanIdRange	${minVlan}-${maxVlan}
	${task} =	Fusion Api Create Ethernet Bulk Networks	${networks}
	${task} =	Wait For Task To Complete	${task}	120m	5s
	[Return]

Create Networks List
	[Documentation]	Create A Networks List
	[Arguments]	${start}
	${netlist} =	Create List
	:FOR	${i}	IN RANGE	0	5
	\	Append To List	${netlist}	net_${start}
	\	${start} =	Evaluate	${start} + 1
	[Return]	${netlist}
	
Create Network Sets
	[Documentation]	Create Regular Network Sets
	${ns_dto} =	Create Dictionary	type=network-setV5
	...								networkSetType=Regular
	:FOR	${i}	IN RANGE	1	5
	\	Set To Dictionary	${ns_dto}	name	RNS_${i}
	\	${list} =	Create Networks List	${rns_start}	
	\	Set To Dictionary	${ns_dto}	networkUris	${list}
	\	Create Network Set	${ns_dto}	timeout=5m	interval=1s
	\	${resp} =	Fvt Api Get Network Set By Name	RNS_${i}
	\	Should Be Equal As Strings	${resp['name']}	RNS_${i}
	\	${rns_start} =	Evaluate	${rns_start} + 5
	[Return]

Add Server Profile Connections
    [Documentation]    Add Server Profile Connections 
	[Arguments]	${connections}
	:For	${connection}	IN	@{connections}
	\	${net} =	Get Variable Value	${connection['networkUri']}
	\	Continue For Loop If	$net == None
	\	${network} =	Fvt Api Get Ethernet Network By Name	${net}
	\	${network} =	Run Keyword If	$network == None	Fvt Api Get Network Set By Name	${net}	ELSE	Set Variable	${network}
	\	Set To Dictionary	${connection}	networkUri	${network['uri']}
	[Return]
	
Add Server Profile Template
    [Documentation]    Add Server Profile Template 
	[Arguments]	${spt}
	${resp} =	Fvt Api Get Server Hardware Type By Name	${spt['serverHardwareTypeUri']}
	Set to Dictionary	${spt}	serverHardwareTypeUri	${resp['uri']}
	${connections} =	Get Variable Value	${spt['connectionSettings']['connections']}
	Run Keyword If	${connections} != None	Add Server Profile Connections	${connections}
	${task} =	Fusion Api Create Server Profile Template	${spt}
	${task} =	Wait For Task To Complete	${task}
	${resp} =	Fvt Api Get Server Profile Template By Name	${spt['name']}
	Should Not Be Equal As Strings	${resp}	None
	[Return]

Add Server Profile From Template
    [Documentation]    Add Server Profile ${profile} From Template ${profile['serverProfileTemplateUri']}
	[Arguments]	${profile}	${spt}
	Set To Dictionary	${profile}	serverHardwareTypeUri	${spt['serverHardwareTypeUri']}	
	Set To Dictionary	${profile}	connectionSettings	${spt['connectionSettings']}
	Remove From Dictionary	${profile['connectionSettings']}	manageConnections
	Remove From Dictionary	${profile['connectionSettings']}	complianceControl
	FVT Add Server Profile	${profile}	timeout=20m	interval=1s	sleep=2m	param=?force=true
	${resp} =	Fvt Api Get Server Profile By Name	${profile['name']}
	Should Not Be Equal As Strings	${resp}	None
	[Return]
	
Power Server 
    [Documentation]    Perform Power Operation On Server
	[Arguments]	${server}	${state}=Off	${action}=PressAndHold
	${resp}	Fvt Api Get Server Hardware By Name	${server}
	${payload} =	Create Dictionary	powerState=${state}	powerControl=${action}	
	${resp}	Fusion Api Edit Server Hardware Power State	uri=${resp['uri']}	body=${payload}
	Should Be Equal As Integers	${resp['status_code']}	202
	${task} =	Wait For Task	${resp} 	5m	1
	${resp}	Fvt Api Get Server Hardware By Name	${server}
	Should Be Equal As Strings	${resp['powerState']}	${state}
	[Return]

Create Server Profile And Set Power On
    [Documentation]    \n Add Server Profile And Set Power To On
	[Arguments]	${profile}
	${profile} =	FVT Copy Dictionary	${profile}	
	FVT Add Server Profile	${profile}	timeout=20m	interval=1s	param=?force=true
	${resp} =	Fvt Api Get Server Profile By Name	${profile['name']}
	Run Keyword If	$resp == None	Fail	"\nFailed to create server profile ${profile['name']}"
	${resp}	Fvt Api Get Server Hardware By Name	${profile['serverHardwareUri']}
	Run Keyword If	'${resp['powerState']}' != 'On'	Power Server	${profile['serverHardwareUri']}	On	MomentaryPress
	[Return]

Delete Server Profile
	[Documentation]   Delete Server Profile	
    [Arguments]    ${profile}
	${sp} =	Fvt Api Get Server Profile By Name	${profile['name']}
	Return From Keyword If	$sp == None
	${task} =	Fusion Api Delete Server Profile	uri=${sp['uri']}	param=?force=true
	${task} =	Wait For Task To Complete	${task}
	Return From Keyword If	'${sp['status']}' == 'OK'
	Power Server	${profile['serverHardwareUri']}	On	MomentaryPress
	${server}	Fvt Api Get Server Hardware By Name	${profile['serverHardwareUri']}
	${task} =	Fusion Api Refresh Server Hardware	uri=${server['uri']}
	${task} =	Wait For Task To Complete	${task}	
	[Return]

Get Switch Port
	[Documentation]   Get port information of a switch
    [Arguments]    ${sw_name}	${port_label}
	${ports} =	Plexxi Api Get Ports
	:For	${port}	IN	@{ports['result']}
	\	Return From Keyword If	'${port['switch_name']}' == '${sw_name}' and '${port['port_label']}' == '${port_label}'	${port}
	[Return]	None
		
Verify Vlans In Switch Port
	[Documentation]   Verify Vlans In Switch Port	
	[Arguments]	${netset}	${vlansrange}
	${vgroups} =	Plexxi Api Get Vlan Groups
	:For	${vgroup}	IN	@{vgroups['result']}
	\	Exit For Loop If	'${vgroup['name']}' == '${netset}'	
	@{vglist} =	Split String	${vgroup['vlans']}	,
	${vgvlans} =	Create List
	:For	${vlan}	IN	@{vglist}
	\	${vlan} =	Convert To Integer	${vlan}
	\	Append To List	${vgvlans}	${vlan}
	${begin}	${end}=	Split String	${vlansrange}	-
	${vlanlist} =	Create List
	:For	${vlan}	IN RANGE	${begin}	${end}+1
	\	Append To List	${vlanlist}	${vlan}
	Lists Should Be Equal	${vgvlans}	${vlanlist}	\n vlan list ${vglist} is not equal to vlan list ${vlanlist}
	[Return]
	
Verify Network And LAG
	[Documentation]   Verify Vlans In Switch Port	
	[Arguments]	${lagname}	${native_vlan}
	${lags} =	Plexxi Api Get Lags
	:For	${lag}	IN	@{lags['result']}
	\	${name} =	Get Substring	${lag['name']}	-4
	\	Return From Keyword If	'${name}' == '${lagname}' and '${lag['native_vlan']}' == '${native_vlan}'
	Fail	\nVerify network native vlan ${native_vlan} and lag ${lagname} failed
	[Return]

Verify Networkset And LAG
	[Documentation]   Verify Vlans In Switch Port	
	[Arguments]	${lagname}	${vlans}
	${lags} =	Plexxi Api Get Lags
	:For	${lag}	IN	@{lags['result']}
	\	${name} =	Get Substring	${lag['name']}	-4
	\	Return From Keyword If	'${name}' == '${lagname}' and '${lag['vlans']}' == '${vlans}'
	Fail	\nVerify networkset vlans ${vlans} and lag ${lagname} failed
	[Return]
	
Add/Update Connections In Profile
	[Documentation]	\n Add Lag Connections To Profile
	[Arguments]	${profile}	${uri1}=${null}	${uri2}=${null}
	${resp} =	Fvt Api Get Server Profile By Name	${profile}
	${connections} =	Copy List	${resp['connectionSettings']['connections']}
	Set To Dictionary	${connections[0]}	networkUri	${uri1}
	Set To Dictionary	${connections[1]}	networkUri	${uri2}
	Remove From Dictionary	${connections[0]}	lagName
	Remove From Dictionary	${connections[1]}	lagName
	sleep	3m
	${task} =	Fusion Api Edit Server Profile	body=${resp}	uri=${resp['uri']}
	${task} =	Wait For Task To Complete	${task}
	[Return]

Add Network Connections To Profile
	[Documentation]	\n Add Lag Connections To Profile
	[Arguments]	${profile}	${network1}	${network2}
	Log To Console	\nTransitioning to network connections with no LAG
	${net1} =	Fvt Api Get Ethernet Network By Name	${network1}
	${net2} =	Fvt Api Get Ethernet Network By Name	${network2}
	Add/Update Connections In Profile	${profile}	${net1['uri']}	${net2['uri']}	
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net1['vlanId']}	Fail	"\nNetwork ${network1} is not configured on ${swlist[0]} ${port_label}"
	${port} =	Get Switch Port	${swlist[1]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net2['vlanId']}	Fail	"\nNetwork ${network2} is not configured on ${swlist[1]} ${port_label}"
	[Return]

Add Network Set Connections To Profile
	[Documentation]	\n Add Lag Connections To Profile
	[Arguments]	${profile}	${netset1}=${null}	${netset2}=${null}
	Log To Console	\nTransitioning to network set connections with no LAG
	${net1} =	Run Keyword If	$netset1 != ${null}	Fvt Api Get Network Set By Name	${netset1}
	${net1uri} =	Set Variable If	$net1 != None	${net1['uri']}	${null}
	${net2} =	Run Keyword If	$netset2 != ${null}	Fvt Api Get Network Set By Name	${netset2}
	${net2uri} =	Set Variable If	$net2 != None	${net2['uri']}	${null}
	Add/Update Connections In Profile	${profile}	${net1uri}	${net2uri}	
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	$netset1 != ${null}	Verify Vlans In Switch Port	${netset1}	${port['vlans']}
	${port} =	Get Switch Port	${swlist[1]}	${port_label}
	Run Keyword If	$netset2 != ${null}	Verify Vlans In Switch Port	${netset2}	${port['vlans']}
	[Return]
	
Unassign Connections From Profile
	[Documentation]	\n Add Lag Connections To Profile
	[Arguments]	${profile}
	Log To Console	\nTransitioning to unassigned connections with no LAG
	Add/Update Connections In Profile	${profile}
	Sleep	20s
	:For	${sw}	IN	@{swlist}
	\	${port} =	Get Switch Port	${sw}	${port_label}
	\	Should Be Equal As Integers	${port['native_vlan']}	0
	\	Should Be Empty	${port['vlans']}
	[Return]
	
Add/Update LAG Connections In Profile
	[Documentation]	\n Add Lag Connections To Profile
	[Arguments]	${profile}	${lagname}=${null}	${neturi}=${null}
	${resp} =	Fvt Api Get Server Profile By Name	${profile}
	${connections} =	Copy List	${resp['connectionSettings']['connections']}
	:For	${connection}	IN	@{connections}
	\	Set To Dictionary	${connection}	networkUri	${neturi}
	\	Set To Dictionary	${connection}	lagName	${lagname}
	sleep	3m
	${task} =	Fusion Api Edit Server Profile	body=${resp}	uri=${resp['uri']}
	${task} =	Wait For Task To Complete	${task}
	[Return]
		
Add LAG Network Connections To Profile
	[Documentation]	\n Add Lag With Network Connections
    [Arguments]    ${profile}	${lagname}	${network}
	Log To Console	\nTransitioning to LAG with network connections
	${resp} =	Fvt Api Get Ethernet Network By Name	${network}	
	Add/Update LAG Connections In Profile	${Profile}	${lagname}	${resp['uri']}
	Sleep	20s
	:For	${sw}	IN	@{swlist}
	\	${port} =	Get Switch Port	${sw}	${port_label}
	\	Run Keyword If	'${port['native_vlan']}' != '${resp['vlanId']}'	Fail	\nNetwork ${network} is not configured on ${sw}	${port_label}
	${lag} =	Verify Network And LAG	${lagname}	${port['native_vlan']}
	[Return]
	
Add LAG Network Set Connections To Profile
	[Documentation]	\n Add Lag With Network Connections
    [Arguments]    ${profile}	${lagname}	${netset}	
	Log To Console	\nTransitioning to LAG with network set connections
	${resp} =	Fvt Api Get Network Set By Name	${netset}	
	Add/Update LAG Connections In Profile	${Profile}	${lagname}	${resp['uri']}
	Sleep	20s
	:For	${sw}	IN	@{swlist}
	\	${port} =	Get Switch Port	${sw}	${port_label}
	\		Verify Vlans In Switch Port	${netset}	${port['vlans']}
	${lag} =	Verify Networkset And LAG	${lagname}	${port['vlans']}
	[Return]
	
Unassign LAG Connections From Profile
	[Documentation]	\n Add Lag With Network Connections
    [Arguments]    ${profile}	${lagname}
	Log To Console	\nTransitioning to LAG with unassigned connections
	Add/Update LAG Connections In Profile	${profile}	${lagname}
	Sleep	20s
	:For	${sw}	IN	@{swlist}
	\	${port} =	Get Switch Port	${sw}	${port_label}
	\	Should Be Equal As Integers	${port['native_vlan']}	0
	\	Should Be Empty	${port['vlans']}
	[Return]
	
***Test cases****
Create Networks And Network Sets
    [Documentation]    \n Create Networks And Network Sets
	Pass Execution	\n Skip Create Networks And Network Sets
	Create Bulk Ethernet Networks
 	Create Network Sets
	Pass Execution	\n Finished Create Networks And Network Sets

Add DL Servers To Oneview 
    [Documentation]    \n Add DL Servers To Oneview
	Pass Execution	\n Skip Add DL Servers To Oneview
	:For	${server}	IN	@{DL_Servers}
    \	Set To Dictionary    ${DL_Body}    hostname	${server['IP']}
    \	${task}    Fusion Api Add Server Hardware    ${DL_Body}
	\   ${task} =	Wait For Task To Complete	${task}    5m    1s
	\	${resp} =	Fvt Api Get Server Hardware By Name	${server['name']}
	\	Should Not Be Equal As Strings	${resp}	None
	Pass Execution	\n Finished Add DL Servers To Oneview

Integrate OneView To Plexxi Connect 
    [Documentation]    \n Integrate OneView To Plexxi Connect
	Pass Execution	\n Skip Integrate OneView To Plexxi Connect
	${task} =   Plexxi Api Add OneView Configuration   ${oneview_config}    
	Should Be Equal As Integers	${task['status_code']}	200
    Sleep    3min
    ${resp}=    Fvt Api Get Fabric By Name    ${Fabric_name}
    Should Be Equal As Strings     ${resp['state']}	Unmanaged
	Pass Execution	\n Finished Integrate OneView To Plexxi Connect
	
Claim The Fabric In OneView
    [Documentation]  \n Claim The Fabric In OneView  
	Pass Execution	\n Skip Claim the fabric In OneView
    ${resp}=   Fvt Api Get Fabric By Name    ${Fabric_name}
    ${task}=    Fusion Api Patch fabric	uri=${resp['uri']}	body=${Fabric_claim}
    ${task} =	Wait For Task To Complete    ${task}
    Sleep   2m
    ${resp}=   Fvt Api Get Fabric By Name    ${Fabric_name}
	Should Be Equal As Strings	${resp['state']}	Configured
 	:For	${sw}	IN	@{plexxi_switches}
	\	${resp} =	Fvt Api Get Switch By Name	${sw['name']}
	\	Should Be Equal As Strings	${resp['state']}	Configured
	Pass Execution	\n Finished Claim the fabric In OneView

Create Logical Switch Group
    [Documentation]    \n Create Logical Switch Group '${plexxi_lsg['name']}'
	Pass Execution	\n Skip Create Logical Switch
	${swmap} = 	Get From Dictionary	   ${plexxi_lsg['switchMapTemplate']}    switchMapEntryTemplates
    :FOR    ${sw}   IN  @{swmap}
    \	${swuri} =   Get From Dictionary   ${sw}   permittedSwitchTypeUri
 	\	${resp} =   Fvt Api Get Switch Type By Name	${swuri}
    \	Set to dictionary   ${sw}  permittedSwitchTypeUri   ${resp['uri']}
	${task} =	Fusion Api Create LSG  	${plexxi_lsg}
	${task} =	Wait For Task To Complete	${task}
	${resp} =    Fvt Api Get Logical Switch Group By Name      ${plexxi_lsg['name']}
	Should Not Be Equal As Strings	${resp}	None
	Pass Execution	\n Finished Create Logical Switch

Create Logical Switches
    [Documentation]    \n Create Logical Switches
	Pass Execution	\n Skip Create Logical Switches
    ${lsg} =	Fvt Api Get Logical Switch Group By Name   ${plexxi_lsg['name']}
    :FOR    ${ls}   IN	@{logical_switches}
	\	Set to dictionary   ${ls}	type	logical-switchV5 
	\	Set to dictionary   ${ls}	managementLevel	BASIC_MANAGED 
    \	Set to dictionary   ${ls}	logicalSwitchGroupUri	${lsg['uri']}
	\	${swUris} =	Fvt Api Get Switch Uris	${ls['switchUris']}
    \	Set to dictionary	${ls}	switchUris	${swUris}
	\	${body} =	Create Dictionary	logicalSwitch=${ls}
	\	${task} =	Fusion Api Create LS	${body}
	\	${task} =	Wait For Task To Complete	${task}    5m   2s
	\	${resp} =	Fvt Api Get Logical Switch By Name	${ls['name']}
	\	Should Not Be Equal As Strings	${resp}	None
	Pass Execution	\n Finished Create Logical Switch

OVF6392_Server Profile With Network Connections And LAG 
	[Documentation]	\n Server Profile With Network Connections And LAG 
	Pass Execution	\n Skip Server Profile With Network Connections And LAG 
	Log To Console	\nStart server profile with network connections and LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	net_401
	Set To Dictionary	${profile['connectionSettings']['connections'][1]}	networkUri	net_401
	Create Server Profile And Set Power On	${profile}
	Unassign LAG Connections From Profile	${profile['name']}	lagname=LAG1
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_1
	Unassign Connections From Profile	${profile['name']}
	Add Network Set Connections To Profile	${profile['name']}	RNS_1	RNS_2
	Add Network Connections To Profile	${profile['name']}	net_401	net_402
	Pass Execution	\n Finished Server Profile With Network Connections And LAG 
	
OVF6392_Server Profile With Network Set Connections And LAG 
	[Documentation]	\n Server Profile With Network Set Connections And LAG 
	#Pass Execution	\n Skip Server Profile With Network Set Connections And LAG 
	Delete Server Profile	${profile_connections_lag}
	Log To Console	\nStart server profile with network set connections and LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	RNS_1
	Set To Dictionary	${profile['connectionSettings']['connections'][1]}	networkUri	RNS_1
	Create Server Profile And Set Power On	${profile}
	Unassign LAG Connections From Profile	${profile['name']}	lagname=LAG1
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_401
	Unassign Connections From Profile	${profile['name']}
	Add Network Connections To Profile	${profile['name']}	net_401	net_402
	Add Network Set Connections To Profile	${profile['name']}	RNS_2	RNS_3
	Pass Execution	\n Finished Server Profile With Network Set Connections And LAG 

OVF6392_Server Profile With Unassigned Connections And LAG 
	[Documentation]	\n Server Profile With Unassigned Connections And LAG 
	Pass Execution	\n Skip Server Profile With Unassigned Connections And LAG 
	Delete Server Profile	${profile_connections_lag}
	Log To Console	\nStart server profile with unassigned connections and LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_lag}
	Create Server Profile And Set Power On	${profile}
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_401
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_1
	Add Network Connections To Profile	${profile['name']}	net_401	net_402
	Add Network Set Connections To Profile	${profile['name']}	RNS_1	RNS_2
	Unassign Connections From Profile	${profile['name']}
	Pass Execution	\n Finished Server Profile With Unassigned Connections And LAG 

OVF6392_Server Profile With Network Connections And No LAG
	[Documentation]	\n Server Profile With Network Connections And No LAG
	Pass Execution	\n Skip Server Profile With Network Connections And No LAG
	Delete Server Profile	${profile_connections_lag}
	Log To Console	\nStart server profile with network connections and no LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_no_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	net_401
	Set To Dictionary	${profile['connectionSettings']['connections'][1]}	networkUri	net_402
	Create Server Profile And Set Power On	${profile}
	Unassign LAG Connections From Profile	${profile['name']}	lagname=LAG1
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_2
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_411
	Unassign Connections From Profile	${profile['name']}
	Add Network Set Connections To Profile	${profile['name']}	RNS_3	RNS_4
	Add Network Connections To Profile	${profile['name']}	net_404	net_405
	Pass Execution	\n Finished Server Profile With Network Connections And No LAG
	
OVF6392_Server Profile With Network Set Connections And No LAG
	[Documentation]	\n Server Profile With Network Set Connections And No LAG
	Pass Execution	\n Skip Server Profile With Network Set Connections And No LAG
	Delete Server Profile	${profile_connections_no_lag}
	Log To Console	\nStart server profile with network set connections and no LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_no_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	RNS_1
	Set To Dictionary	${profile['connectionSettings']['connections'][1]}	networkUri	RNS_2
	Create Server Profile And Set Power On	${profile}
	Unassign LAG Connections From Profile	${profile['name']}	lagname=LAG1
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_411
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_2
	Unassign Connections From Profile	${profile['name']}
	Add Network Connections To Profile	${profile['name']}	net_403	net_404
	Pass Execution	\n Finished Server Profile With Network Set Connections And No LAG
	
OVF6392_Server Profile With Unassigned Connections And No LAG 
	[Documentation]	\n Server Profile With Unassigned Connections And No LAG
	Pass Execution	\n Skip Server Profile With Unassigned Connections And No LAG
	Delete Server Profile	${profile_connections_no_lag}
	Log To Console	\nStart server profile with unassigned connections and no LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_no_lag}
	Create Server Profile And Set Power On	${profile}
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_401
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_1
	Unassign LAG Connections From Profile	${profile['name']}	lagname=LAG1
	Add Network Connections To Profile	${profile['name']}	net_401	net_402
	Add Network Set Connections To Profile	${profile['name']}	RNS_1	RNS_2
	Pass Execution	\n Finished Server Profile With Unassigned Connections And No LAG
	
OVF6392_Server Profile With Single Network Connection And No LAG 
	[Documentation]	\n Server Profile With Single Network Connection And No LAG
	Pass Execution	\n Skip Server Profile With Single Network Connection And No LAG
	Delete Server Profile	${profile_connections_no_lag}
	Log To Console	\nStart server profile with single network connection and no LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_no_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	net_401
	Create Server Profile And Set Power On	${profile}
	${net} =	Fvt Api Get Ethernet Network By Name	net_401
	${netset} =	Fvt Api Get Network Set By Name	RNS_1
	Add/Update Connections In Profile	${profile['name']}	${null}	${netset['uri']}
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	${port['native_vlan']} != 0	Fail	\nNetwork net_401 was not removed from switch port
	${port} =	Get Switch Port	${swlist[1]}	${port_label}
	Verify Vlans In Switch Port	${netset['name']}	${port['vlans']}
	Add/Update Connections In Profile	${profile['name']}	${netset['uri']}	${net['uri']}
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Verify Vlans In Switch Port	${netset['name']}	${port['vlans']}
	${port} =	Get Switch Port	${swlist[1]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net['vlanId']}	Fail	\nNetwork net_401 was not configured on switch port	
	Add LAG Network Connections To Profile	${profile['name']}	lagname=LAG1	network=net_401
	Add/Update Connections In Profile	${profile['name']}	${netset['uri']}
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Verify Vlans In Switch Port	${netset['name']}	${port['vlans']}
	Pass Execution	\n Finished Server Profile With Single Network Connection And No LAG

OVF6392_Server Profile With Single Network Set Connection And No LAG 
	[Documentation]	\n Server Profile With Single Network Set Connection And No LAG
	Pass Execution	\n Skip Server Profile With Single Network Set Connection And No LAG
	Delete Server Profile	${profile_connections_no_lag}
	Log To Console	\nStart server profile with single network set connection and no LAG
	${profile} =	FVT Copy Dictionary	${profile_connections_no_lag}
	Set To Dictionary	${profile['connectionSettings']['connections'][0]}	networkUri	RNS_1
	Create Server Profile And Set Power On	${profile}
	${net} =	Fvt Api Get Ethernet Network By Name	net_401
	${netset} =	Fvt Api Get Network Set By Name	RNS_1
	Add/Update Connections In Profile	${profile['name']}	${net['uri']}	${null}	
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net['vlanId']}	Fail	\nNetwork net_401 was not configured on switch port
	Add LAG Network Set Connections To Profile	${profile['name']}	lagname=LAG1	netset=RNS_1
	Add/Update Connections In Profile	${profile['name']}	${net['uri']}
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net['vlanId']}	Fail	\nNetwork net_401 was not configured on switch port
	Pass Execution	\n Finished Server Profile With Single Network Set Connection And No LAG

OVF6392_Server Profile Template With Unassigned Network Connections
    [Documentation]	\n Server Profile Template With Unassigned Network Connections
	Pass Execution	\n Server Profile Template With Unassigned Network Connections
	Delete Server Profile	${profile_connections_no_lag}
	Add Server Profile Template	${SPT_unassigned_connections}
	Sleep	3m
	Add Server Profile From Template	${ProfileTemp_unassigned_connections}	${SPT_unassigned_connections}
	${spt} =	Fvt Api Get Server Profile Template By Name	${SPT_unassigned_connections['name']}
	${net} =	Fvt Api Get Ethernet Network By Name	net_402
	Set To Dictionary	${spt['connectionSettings']['connections'][0]}	networkUri	${net['uri']}	
	${netset} =	Fvt Api Get Network Set By Name	RNS_2
	Set To Dictionary	${spt['connectionSettings']['connections'][1]}	networkUri	${netset['uri']}	
	${task} =	Fusion Api Edit Server Profile Template	body=${spt}	uri=${spt['uri']}
	${task} =	Wait For Task To Complete	${task}
	Sleep	3m
	${task} =	Patch Server Profile	${ProfileTemp_unassigned_connections}
	${task} =	Wait For Task To Complete	${task}
	Sleep	20s
	${port} =	Get Switch Port	${swlist[0]}	${port_label}
	Run Keyword If	${port['native_vlan']} != ${net['vlanId']}	Fail	\nNetwork ${net['name']} was not configured on switch port ${swlist[0]}
	${port} =	Get Switch Port	${swlist[1]}	${port_label}
	Verify Vlans In Switch Port	${netset['name']}	${port['vlans']}
	Delete Server Profile	${ProfileTemp_unassigned_connections}
	Fusion Api Delete Server Profile Template	uri=${spt['uri']}
	Pass Execution	\n Server Profile Template With Unassigned Network Connections
	
Remove Logical Switch And Logical Switch Group
    [Documentation]	\n Remove Logical Switch And Logical Switch Group
	Pass Execution	\n Skip Remove Plexxi Connect From OneView
	:For	${ls}	IN	@{logical_switches}
	\	${lsw} =	Fvt Api Get Logical Switch By Name	${ls['name']}
	\	${task} =	Fusion Api Delete LS	uri=${lsw['uri']}
	\	${task} =	Wait For Task To Complete	${task}
	\	${ls} =    Fvt Api Get Logical Switch By Name      ${ls['name']}
	\	Run Keyword If	$ls != None	Fail	Cannot delete logical switch ${ls['name']}
	${task} =	Fusion Api Delete LSG	name=${plexxi_lsg['name']}
	${task} =	Wait For Task To Complete	${task}
	${lsg} =    Fvt Api Get Logical Switch Group By Name      ${plexxi_lsg['name']}
	Run Keyword If	$lsg != None	Fail	"Cannot delete logical switch group ${plexxi_lsg['name']}"
	Pass Execution	\n Finished Remove Logical Switch And Logical Switch Group
	
Remove OneView From Plexxi Connect
    [Documentation]	\n Remove OneView from Plexxi Connect
	Pass Execution	\n Skip Remove OneView From Plexxi Connect
	${resp}=   Plexxi Api Get OneView Configuration
    :FOR   ${ov}   IN   @{resp['result']}
    \   Run Keyword If   '${ov['host']}' == '${appliance_ip}'   Plexxi Api Delete OneView Configuration   ${ov['uuid']}
	Pass Execution	\n Finished Remove OneView From Plexxi Connect

Remove Plexxi Connect From OneView	
    [Documentation]	\n Remove Plexxi Connect From OneView
	Pass Execution	\n Skip Remove Plexxi Connect From OneView
	${task} =	Fusion Api Delete Fabric	name=${Fabric_name}
	${task} =	Wait For Task To Complete	${task}
	${fabric} =    Fvt Api Get Fabric By Name      ${Fabric_name}
	Run Keyword If	$fabric != None	Fail	"Cannot delete fabric ${Fabric_name}"
	Pass Execution	\n Finished Remove Plexxi Connect From OneView
	
