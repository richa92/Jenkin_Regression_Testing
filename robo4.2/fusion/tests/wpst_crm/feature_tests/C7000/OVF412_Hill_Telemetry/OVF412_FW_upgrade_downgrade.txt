** Settings ***
#FVT-CRM OVF412 Configuring and validating the throughput utilization data for hill modules having 3.08 and 4.00 version
# The test cases covered in the suites are -
Documentation       OVF412 - SuiteName : Configure and Validating the throughput utilization data for hill modules
                    Test case covered in this suite OVTC29097
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         ServerOperations
Library         String
Library         OAOperations
Library         local_keywords
Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks
Library             ../../TBIRD/FVT/fvt_api.py

Resource            ../../TBIRD/FVT/fvt-keywords.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Resource            ../../FVT/TBIRD/Resources/fvt_resource.txt


***Variables*****
${SPP_Path}             ${CURDIR}\\SPP\\${SPP_bundle_308}
${new_SPP_Path}    ${CURDIR}\\SPP\\${SPP_bundle_400}
${ic_firmwareVersion_new}    3.08
${ic_firmwareVersion_latest}    4.00
***Test cases****
1 Uploading the FW bundle of Hill module version of 308 and 400
    [Documentation]    Uploading the FW bundle of Hill module version of 3.08 and 4.00
    Remove Environment Variable     https_proxy    http_proxy
    Log to console and logfile    \nUploading spp bundle with version 3.08"
    ${resp} =     Fusion Api Upload Firmware Bundle      localfile=${SPP_Path}
    Log to console and logfile    Uploadsppdetails ${resp}
    Log to console and logfile    \n ${SPP_bundle_308}SPP bundle is successfully uploaded

    Log to console and logfile    \nUploading spp bundle with version 4.00"
    ${resp} =     Fusion Api Upload Firmware Bundle      localfile=${new_SPP_Path}
    Log to console and logfile    Uploadsppdetails ${resp}
    Log to console and logfile    \n ${SPP_bundle_400}SPP bundle is successfully uploaded

2 Validating the interconnect version is 400
    [Documentation]    Validating the interconnect version is 4.00
    Log to console and logfile    \nValidating the interconnect firmware before update
    ${resp} =   Fusion Api Get Interconnect    param=?filter="'name' = '${INTERCONNECTS_enc1[0]}'"
    ${current_ic_fw_version} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    Log to console and logfile    \n FIrmware version of Interconnect ${INTERCONNECTS_enc1[0]} is :${current_ic_fw_version}
    Run keyword unless    '${current_ic_fw_version}' == '${ic_firmwareVersion_latest}'    Fail    "Firmware version mismatch"
    ...   ELSE     Log to console and logfile    \nFirmware version is verified for ${INTERCONNECTS_enc1[0]}

3 Downgrading the firmware from 400 to 308
    [Documentation]    Downgrading the firmware from 4.00 to 3.08
    Log to console and logfile     \nDowngrading firmware through LI page
    Set to dictionary     ${liupdate_body}     sppUri    ${fw_uri_308}
    ${li_uri} =    Get LI URI   ${LI}
    ${response}=    Fusion Api Li Upgrade Firmware    ${liupdate_body}    ${li_uri}
    Log to console and logfile    \n The response is:${response}
    Run Keyword If  ${response['status_code']} !=202    fail    msg=\nLI Firmware update Failed. \n #ErrorCode:${response['errorCode']}\nMessage:${response['message']}
    ${task} =     Wait For Task        ${response}   60min    2min
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nLI Firmware update \n ErrorCode:${task['taskErrors'][0][errorCode]}\n :Message ${task['taskErrors'][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nLI FW Upgrade completed successfully!!

4 Validating the interconnect version before updating
    [Documentation]    Validating the interconnect version before updating
    Log to console and logfile    \nValidating the interconnect firmware before update
    #:FOR     ${IC}     IN   @{INTERCONNECTS}
    ${resp} =   Fusion Api Get Interconnect    param=?filter="'name' = '${INTERCONNECTS_enc1[0]}'"
    ${current_ic_fw_version} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    Log to console and logfile    \n FIrmware version of Interconnect ${INTERCONNECTS_enc1[0]} is :${current_ic_fw_version}
    Run keyword unless    '${current_ic_fw_version}' == '${ic_firmwareVersion_new}'    Fail    "Firmware version mismatch"
    ...   ELSE     Log to console and logfile    \nFirmware version is verified for ${INTERCONNECTS_enc1[0]}

5 Validating statistics data for uplink port should not be available for 308 version
    [Documentation]    Validating statistics data for uplink port should not be available for 3.08 version
    #GET STATISTICS INFORMATION for uplink and downlink port
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${response} =    Split String     ${resp['members'][0]['uri']}    /
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run keyword unless    '${statistics['status_code']}' == '400'    Fail    "Able to get port statistics when firmare version for hill is 3.08"

6 Validating statistics data for downlink port should not be available for 308 version
    [Documentation]    Validating statistics data for downlink port should not be available for 3.08 version
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${response} =    Split String     ${resp['members'][0]['uri']}    /
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run keyword unless    '${statistics['status_code']}' == '400'    Fail    "Able to get port statistics when firmare version for hill is 3.08"

7 Updating from 308 to 400
    [Documentation]    Upgrading interconnects from 308 to 400
    Set to dictionary     ${liupdate_body}     sppUri    ${fw_uri_400}
    ${li_uri} =    Get LI URI   ${LI}
    ${response}=    Fusion Api Li Upgrade Firmware    ${liupdate_body}    ${li_uri}
    Log to console and logfile    \n The response is:${response}
    Run Keyword If  ${response['status_code']} !=202    fail    msg=\nLI Firmware update Failed. \n #ErrorCode:${response['errorCode']}\nMessage:${response['message']}
    ${task} =     Wait For Task        ${response}   60min    2min
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nLI Firmware update \n ErrorCode:${task['taskErrors'][0][errorCode]}\n :Message ${task['taskErrors'][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nLI FW Upgrade completed successfully!!

8 Validating the interconnect version is 400
    [Documentation]    Validating the interconnect firmware before updating to 400
    Log to console and logfile    \nValidating the interconnect firmware before update
    #:FOR     ${IC}     IN   @{INTERCONNECTS}
    ${resp} =   Fusion Api Get Interconnect    param=?filter="'name' = '${INTERCONNECTS_enc1[0]}'"
    ${current_ic_fw_version} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    Log to console and logfile    \n FIrmware version of Interconnect ${INTERCONNECTS_enc1[0]} is :${current_ic_fw_version}
    Run keyword unless    '${current_ic_fw_version}' == '${ic_firmwareVersion_latest}'    Fail    "Firmware version mismatch"
    ...   ELSE     Log to console and logfile    \nFirmware version is verified for ${INTERCONNECTS_enc1[0]}

9 Validating statistics data for uplink port should be available for 400 version
    [Documentation]    Validating statistics data for uplink port should be available for 4.00 version
    #GET STATISTICS INFORMATION for uplink and downlink port
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${response} =    Split String     ${resp['members'][0]['uri']}    /
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nExpected Behaviour - Able to get port statistics

10 Validating statistics data for downlink port should be available for 400 version
    [Documentation]    Validating statistics data for downlink port should be available for 4.00 version
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${response} =    Split String     ${resp['members'][0]['uri']}    /
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nExpected Behaviour - Able to get port statistics

11 Validate the RX,TX bytes getting increased after passing traffic for 400 version
    [Documentation]    Validate the RX,TX bytes getting increased after passing traffic for 4.00 version
    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic


***Keywords****
Add FC Networks
    [Documentation]             Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       Log to console and logfile  ${resp}
    \       ${task} =   Wait For Task   ${resp}     30s    2s
    \       Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Created FC network
Verify the Total Number of Samples in Interconnect Statistics
    [Documentation]    Verify the Total Number of Samples in Interconnect Statistics
    [Arguments]    ${bay_no}    ${port}     ${total_samples}

    ${out}=     fusion_api_get_interconnect
    ${fc_uri}=  set variable    ${empty}
    ${enc_details}=    fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name}=   catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :FOR    ${ele}    in    @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri}= catenate    ${ele['uri']}/statistics
    Log to console and logfile      ${uri}

    ${out1}=        fusion_api_get_interconnect    ${uri}
    #Log to console and logfile     ${out1}
    ${output}=  validate_total_samples  ${port}    ${out1}    ${total_samples}
    [Return]                    ${output}

Verify the TX,RX rates for frames and bit in advanced statistics
    [Documentation]             Verify the TX,RX rates for frames and bit in advanced statistics
    [Arguments]    ${bay_no}    ${port}

    ${out}=     fusion_api_get_interconnect
    ${fc_uri}=  set variable    ${empty}
    ${enc_details}=    fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name}=   catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :FOR    ${ele}    in    @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri}= catenate    ${ele['uri']}/statistics
    Log to console and logfile      ${uri}

    ${out1}=        fusion_api_get_interconnect    ${uri}
    #Log to console and logfile     ${out1}
    ${output}=  validate_Tx_Rx_Rates_statistics    ${port}    ${out1}
    [Return]                    ${output}

Check Linked status
    [Documentation]    Check Linked status
    [Arguments]    ${ports}    ${linked_ports}
     ${flag}=    set variable    ${empty}
    ${len} =    Get Length  ${linked_ports}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports['portName']}' == '${linked_ports[${x}]}' and '${ports['portStatus']}' == 'Linked'    Set Global Variable    ${flag}    True

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users
Suite Setup Tasks
    [Documentation]    Precondition to verify hill throughput utlization sampling
    #Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console and logfile  \nSuccessfully logged into the appliance

    Clean OV

    #Create Different Users
    :FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log to console and logfile    \n${Response['userName']} is created Successfully

    #Create Ethernet and FC Networks
    ${Response_enet}     fusion api create ethernet network     ${enet_hill}
    Run keyword unless  ${Response_enet['status_code']}== 202   Fail    "Unable to Create Ethernet network"
    Add FC Networks     @{fcnets1}
    Log to console and logfile      "Four FC networks are created successfully!"

    #Create LIG with valid sample interval and sample count values

    Log to console and logfile    \n Creating LIG!
    ${body} =   Build LIG body      ${ligs1['lig4']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console and logfile  \nSuccessfully Created LIG
    Log to console and logfile    LIG created successfully

    #Verify the Uplinksets are present in the LIG
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${ligs1['lig4']['name']}'"
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Log to console and logfile      ${uplink_len}
    Run Keyword If  ${uplink_len} !=3    fail    ${uplink_len} Uplinksets are not exist in appliance \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in appliance

    #Create EG with hill and utah modules
    ${resp_eg} =    Add Enclosure Group from variable       ${enc_group_2}
    Run keyword unless  ${resp_eg['status_code']}== 201    Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    #Import enclosure with hill and utah modules

    Add Enclosures from variable     ${encs1}
    Log to console and logfile    Enclosure imported succesfully

    #Validate the interconnect status
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[0]} is not in ${resp['members'][0]['state']} state!!   ${\n}

    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[1]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[1]} is not in ${resp['members'][0]['state']} state!!   ${\n}

    #Create server profile and poweron it
    ${resp}     Add Server Profiles from variable   ${server_profile6}
    Log to console and logfile      ${resp}
    Power on server    ${server_profile6[0]['serverHardwareUri']}
    ${resp}     Add Server Profiles from variable   ${server_profiles1}
    Log to console and logfile      ${resp}
    Power on server    ${server_profiles1[0]['serverHardwareUri']}
    sleep    1200

    #Validate the uplink and downlink port status in interconnect page
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to console and logfile      ${len}  ${\n}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'    Check Linked status    ${ports[${x}]}   ${up_ports_3}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[0]}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[1]}

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users
