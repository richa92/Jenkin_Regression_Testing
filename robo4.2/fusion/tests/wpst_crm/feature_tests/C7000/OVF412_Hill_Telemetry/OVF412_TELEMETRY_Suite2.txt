** Settings ***
#FVT-CRM OVF412 Configuring and validating the throughput utilization data for hill modules.
# The test cases covered in the suites are -
Documentation       OVF412 - SuiteName : Configure and Validating the throughput utilization data for hill modules for disable/enable uplink/downlink,poweroff/poweron,Clear port counters,efuseoff/on.Test case covered in this suite OVTC28843,OVTC29098
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         ServerOperations
Library         String
Library         OAOperations
Library         local_keywords
Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks
Library             ../../TBIRD/FVT/fvt_api.py

Resource            ../../TBIRD/FVT/fvt-keywords.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Resource            ../../FVT/TBIRD/Resources/fvt_resource.txt


***Test Cases****

1 Verify the throughput utilization before poweroff and after poweron
    [Documentation]     Verify the throughput utilization before poweroff and after poweron
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_60}
    Log to console and logfile    ${Edit_telemetry}
    Edit LIG    ${Lig_name}    ${Edit_telemetry}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    10m    15s
    Run Keyword If  '${task['taskState']}' !='Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}

    ####Running io traffic#####
    Run IO Traffic     ${diskspd_cmd}

    ###Poweroff interconnect#####
    Poweroff Interconnect   ${ENCLOSURE_IP}    ${OA_USER}       ${interconnect_bay3}

    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    10 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[0]}

    ##Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION for uplink and downlink port
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nExpected behaviour-Cannot read or reset port statistics when interconnect state is Maintenance

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nExpected behaviour-Cannot read or reset port statistics when interconnect state is Maintenance

    ###Poweron interconnect#####
    Poweron Interconnect   ${ENCLOSURE_IP}    ${OA_USER}       ${interconnect_bay3}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    15 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}

    ###Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nGetting port statistics when interconnect state is Configured

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nGetting port statistics when interconnect state is Configured

    ##Verify the TX and RX rates in interconnects
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}

    ####Running io traffic#####
    Run IO Traffic     ${diskspd_cmd}

    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d6}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ##Validate TX and RX bytes are increased after passing traffic
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink ports are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink ports are not getting increased after passing traffic

2 Verify the throughput utilization by issuing efuse on/off command
   [Documentation]    Verify the throughput utilization by issuing efuse on/off command

    #Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    #Removing interconnect from enclosure####
    OA CLI EFUSE    ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${DEVICE}    ${interconnect_bay3}    ${ACTION[1]}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    #Check IC1 is Configured
    Wait Until Keyword Succeeds    5 min   15s     GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[2]}
    Log to console and logfile  \n\nThe IC module ${INTERCONNECTS_enc1[0]} is in Absent state

    ###Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION
     ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nExpected behaviour-Cannot read or reset port statistics when interconnect state is Absent

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nExpected behaviour-Cannot read or reset port statistics when interconnect state is Absent


    ####Adding interconnect back to enclosure#####
    OA CLI EFUSE    ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${DEVICE}    ${interconnect_bay3}    ${ACTION[0]}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"

    #Check IC3 is Configured
    Wait Until Keyword Succeeds    15 min   15s     GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}
    Log to console and logfile  \n\nThe IC module ${INTERCONNECTS_enc1[0]} is in configured state
    ###Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nGetting statistics when interconnect state is Configured

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nGetting statistics when interconnect state is Configured

    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink ports are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink ports are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink ports are not getting increased after passing traffic

3 Verify port statistics by clearing port counters
    [Documentation]    Verify port statistics by clearing port counters
    #Verify ICM Clear Port counters clears Telemetry counter statistics

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ${ic_uri} =    Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} =   Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} =   Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg=Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} =   Wait For Task   ${resp}    2m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters
    sleep     30sec

    ${flag}     ${out}=     Verify the Throughput and utilization data      ${fc_bay_num_3}    ${portno_for_statistics_3_2}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Throughput and utilization data      ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}
    Run Keyword If    ${bytes_TX} > ${BYTES_TX_up}    fail    msg=Transmitted bytes are not cleared which is not expected
    Run Keyword If    ${bytes_RX} > ${BYTES_RX_up}    fail    msg=Received bytes are not cleared which is not expected
    Run Keyword If    ${frames_TX} > ${FRAMES_TX_up}    fail    msg=Transmitted frames are not cleared which is not expected
    Run Keyword If    ${frames_RX} > ${FRAMES_RX_up}    fail    msg=Received frames are not cleared which is not expected

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}
    Run Keyword If   ${bytes_TX} > ${BYTES_TX_dw}    fail    msg=Transmitted bytes are not cleared which is not expected
    Run Keyword If    ${bytes_RX} > ${BYTES_RX_dw}    fail    msg=Received bytes are not cleared which is not expected
    Run Keyword If    ${frames_TX} > ${FRAMES_TX_dw}    fail    msg=Transmitted frames are not cleared which is not expected
    Run Keyword If    ${frames_RX} > ${FRAMES_RX_dw}    fail    msg=Received frames are not cleared which is not expected

4 Verify statistics data by disabling uplink ports
    [Documentation]     Verify statistics data by disabling uplink ports
    Change Uplink Port Status   ${portno_for_statistics_3_2}    ${INTERCONNECTS_enc1[0]}        false
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    5 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}
    ##Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION for uplink and downlink port
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get statistics data when disabling uplink port

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    #Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get statistics data when disabling uplink port

    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
	
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} != ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} != ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} != ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} != ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} != ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} != ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} != ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} != ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic

5 Verify statistics by enabling uplinkport
    [Documentation]     Verify statistics by enabling uplinkport
    ##Enable port
    Change Uplink Port Status   ${portno_for_statistics_3_2}    ${INTERCONNECTS_enc1[0]}        true
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    5 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}
    ##Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION for uplink and downlink port
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get statistics data when enabling uplink port

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get statistics data when enabling uplink port

    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic

6 Verify statistics by disabling downlinkport
    [Documentation]      Verify statistics by disabling downlinkport
    ###Disable port and pass traffic through lun for 3 d6,No traffic should be passed,TX and RX bytes equal be 0
    Change Downlink Port Status    ${portno_for_statistics_3_d3}    ${INTERCONNECTS_enc1[0]}    false
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    5 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}
    ##Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION for uplink and downlink port
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    #Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nCannot read or reset port statistics when interconnect state is Maintenance

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    #Run Keyword If  '${statistics['status_code']}' != '400'    Fail    ELSE  Log to console and logfile  \nCannot read or reset port statistics when interconnect state is Maintenance

    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    #Since 2 luns from both ics are mapped to one disk D,when downlink port from one ic is disabled also traffic should pass using other lun
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} != ${BYTES_TX_dw}    fail    Transmitted Bytes are not same before and after passing traffic
    Run Keyword If  ${bytes_RX} != ${BYTES_RX_dw}    fail    Received Bytes are not same before and after passing traffic
    Run Keyword If  ${frames_TX} != ${FRAMES_TX_dw}    fail    Transmitted Frames not same before and after passing traffic
    Run Keyword If  ${frames_RX} != ${FRAMES_RX_dw}    fail    Received Frames not same before and after passing traffic

7 Verify statistics by enabling downlinkport
    [Documentation]     Verify statistics by enabling downlinkport
    ##Enable port and pass traffic through lun for 3 d6,TX and RX bytes should get increased
    Change Downlink Port Status   ${portno_for_statistics_3_d3} ${INTERCONNECTS_enc1[0]}        true
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    5 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}
    ##Get interconnect statistics samples count#####
    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET STATISTICS INFORMATION for uplink and downlink port
    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_2}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get port statistics

    ${statistics} =    Fusion Api Get Interconnect    param=/${response[-1]}/statistics/${portno_for_statistics_3_d3}
    Log to console and logfile    Statistics Information after Interconnect powered off ${statistics}
    Run Keyword If  '${statistics['status_code']}' != '200'    Fail    ELSE  Log to console and logfile  \nAble to get port statistics
    sleep    2min
    ###Get interconnect statistics samples count#####
    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out}=     Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' =='False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    ##Running io traffic
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic


    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX}=    Verify the TX,RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic

8 OVF412_API_TC - CREATE BACKUP OF THE APPLIANCE
    [Documentation]     CREATE BACKUP OF THE APPLIANCE
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}
    Log to console and logfile      ${resp['telemetryConfiguration']}
    Log to console and logfile      ${resp['telemetryConfiguration']['enableTelemetry']}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}


    Set Global Variable    ${before_enableTelemetry_resp_lig}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${before_vcfcsampleIntervals_resp_lig}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}

    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_enableTelemetry_resp_li}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${before_vcfcsampleIntervals_resp_li}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${resp}=    Fusion Api Create Backup
    Run Keyword If    ${resp['status_code']} !=202    fail    msg=\nBackup failed. \n ErrorCode:${resp['errorCode']}\n ${resp['message']}
    ${task} =   Wait For Task   ${resp}     10 min    20s
    Run Keyword If  '${task['taskState']}' !='Completed'   or   ${task['status_code']} !=200   fail    msg=\nBackup failed. \n ErrorCode:${task['taskErrors']}\n ${task['taskStatus']}
    ...         ELSE    Log to console and logfile  \n\nBackup Created Succesfully !! \n ${task['taskStatus']}

9 OVF412_API_TC - SET TELEMETRY VALUES WITH SAMPLE COUNT 60 AND SAMPLE INTERVAL 60s in LIG and LI
   [Documentation]     SET TELEMETRY VALUES WITH SAMPLE COUNT 60 AND SAMPLE INTERVAL 60s in LIG and LI

   #Edit lig with telemetry sample count as 60 and sample interval as 60sec
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_60}
    Log to console and logfile    ${Edit_telemetry}
    ${resp}=    Edit LIG    ${Lig_name}    ${Edit_telemetry}


    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}
    Set To Dictionary   ${telemetry_60}    enableTelemetry   ${true_flag}
    #Log to console and logfile    ${telemetry_60}
    #Log to console and logfile    ${telemetry_60['enableTelemetry']}
    #Log to console and logfile    ${telemetry_60['vcfcsampleIntervals']}
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_60['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    #Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    20m    15s
    Run Keyword If  '${task['taskState']}' !='Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_60['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}
    FVT Verify Interconnects In LI  ${ENC1}-${Lig_name}

10 OVF412_API_TC- RESTORE THE BACKUP FROM THE RECENT BACK-UP
    [Documentation]     RESTORE THE BACKUP FROM THE RECENT BACK-UP
    ${status}=  Set Variable    ${EMPTY}
    ${Response}     Fusion Api Get Backup
    Log to console and logfile    Successfully got the backupfile cont ${Response}
    Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
    ${restore_body}     Create Dictionary   type=RESTORE
    ...                                     uriOfBackupToRestore=${Response['members'][0]['uri']}
    Log to console and logfile      "restore Body is"
    Log to console and logfile      ${restore_body}
    ${output}       Fusion Api Restore Backup       ${restore_body}
    Log to console and logfile      ${output}
    Sleep   400sec
    Run keyword unless  ${output['status_code']}== 202    Fail    "Unable to perform the restore from backup operation"
    Log to console and logfile      slept 300 sec
    ${restore_resp}     Fusion API Get Restore Status
    Log to console and logfile      ${restore_resp}
    Run keyword unless  ${restore_resp['status_code']}== 200    Fail    "Unable to get the restore details"
    :FOR    ${index}    IN RANGE    ${restore_resp['count']}
    \   Run Keyword If  '${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'        Continue For Loop
    \   ${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
    \   Log to console and logfile      ${restore_id}

    Log to console and logfile      ${restore_id}
    :FOR    ${index}    IN RANGE    75
    \   sleep   30sec
    \   Log to console and logfile      "Restoring is in Progress..."
    \   ${resp}     Fusion API Get Restore Status   ${restore_id}
    \   Log to console and logfile      ${resp}
    \   Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to get the restore id details"
    \   Run Keyword If  '${resp['restorePhase']}' != 'COMPLETED'    Continue For Loop
    \   ${status} =    Set Variable    ${resp['status']}
    \   Run Keyword If  '${resp['restorePhase']}' == 'COMPLETED'    Exit For Loop
    Should Be Equal    ${status}    SUCCEEDED
    Sleep   10min

11 OVF412_API_TC - VERIFY VALUES IN LIG AND LI WILL BE RESTORED
    [Documentation]     VERIFY VALUES IN LIG AND LI WILL BE RESTORED
    Fusion Api Login Appliance    ${appliance_ip}    ${admin_credentials}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name    ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}


    Set Global Variable    ${after_enableTelemetry_resp_lig}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${after_vcfcsampleIntervals_resp_lig}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}

    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${after_enableTelemetry_resp_li}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${after_vcfcsampleIntervals_resp_li}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    Should Be Equal     ${before_enableTelemetry_resp_lig}     ${after_enableTelemetry_resp_lig}
    Should Be Equal     ${before_vcfcsampleIntervals_resp_lig}  ${after_vcfcsampleIntervals_resp_lig}
    Should Be Equal     ${before_enableTelemetry_resp_li}      ${after_enableTelemetry_resp_li}
    Should Be Equal     ${before_vcfcsampleIntervals_resp_li}   ${after_vcfcsampleIntervals_resp_li}

12 RESTART APPLIANCE AND VALIDATE THE THROUGHPUT DATA
    [Documentation]     RESTART APPLIANCE AND VALIDATE THE THROUGHPUT DATA
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_60}
    Log to console and logfile    ${Edit_telemetry}
    ${resp}=    Edit LIG    ${Lig_name}    ${Edit_telemetry}


    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}
    Set To Dictionary   ${telemetry_60}    enableTelemetry   ${true_flag}
    #Log to console and logfile    ${telemetry_60}
    #Log to console and logfile    ${telemetry_60['enableTelemetry']}
    #Log to console and logfile    ${telemetry_60['vcfcsampleIntervals']}
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_60['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    #Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} =   Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} =   Wait For Task   ${resp}    20m    15s
    Run Keyword If  '${task['taskState']}' !='Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}
    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    sleep   30
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_60['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}
    FVT Verify Interconnects In LI  ${ENC1}-${Lig_name}


    Set Global Variable    ${before_enableTelemetry_resp_lig}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${before_vcfcsampleIntervals_resp_lig}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}

    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${before_enableTelemetry_resp_li}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${before_vcfcsampleIntervals_resp_li}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    #Restart the OV appliance
    ${resp} =   Fusion Api Appliance Shutdown   ${restart_mode}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  Log to console and logfile   \n-Task is in progress\n
    #Wait For Restarting OV Appliance
    ${task} =   Wait For Task   ${resp}     1200s    5s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Restarted OV

13 Login to appliance after restart and validate the throughput data remains same
    [Documentation]     RESTART APPLIANCE AND VALIDATE THE THROUGHPUT DATA
    ${Login_response} =    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200   Fail    "Unable to Login"
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}
    Log to console and logfile      ${resp['telemetryConfiguration']}
    Log to console and logfile      ${resp['telemetryConfiguration']['enableTelemetry']}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}


    Set Global Variable    ${after_enableTelemetry_resp_lig}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${after_vcfcsampleIntervals_resp_lig}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1}-${Lig_name}

    Run Keyword If  ${resp} != None    Set Global Variable    ${LI_URI}    ${resp['uri']}

    Set Global Variable    ${after_enableTelemetry_resp_li}    ${resp['telemetryConfiguration']['enableTelemetry']}
    Set Global Variable    ${after_vcfcsampleIntervals_resp_li}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    Should Be Equal     ${before_enableTelemetry_resp_lig}     ${after_enableTelemetry_resp_lig}
    Should Be Equal     ${before_vcfcsampleIntervals_resp_lig}  ${after_vcfcsampleIntervals_resp_lig}
    Should Be Equal     ${before_enableTelemetry_resp_li}      ${after_enableTelemetry_resp_li}
    Should Be Equal     ${before_vcfcsampleIntervals_resp_li}   ${after_vcfcsampleIntervals_resp_li}



****Keywords****
OA CLI EFUSE
    [Documentation]    issues an EFUSE Action to the given Device\Bay.
    ...   {DEVICE} = <BLADE|IOM|NETTRAY|SWM|FAN|OA|EM>
    ...   {BAY} = desired bay for given device
    ...   {ACTION} = <ON|OFF>
    [Arguments]        ${OA_HOST}    ${OA_USER}     ${OA_PASS}    ${DEVICE}    ${BAY}    ${ACTION}
    Open Connection     ${OA_HOST}     prompt=>    timeout=20s
    Login               ${OA_USER}     ${OA_PASS}
    Write    ++diag--
    Read Until    diag>
    Write    efuse ${DEVICE} ${BAY} ${ACTION}
    Write    q
    Close All Connections
Add FC Networks
    [Documentation]             Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       Log to console and logfile  ${resp}
    \       ${task} =   Wait For Task   ${resp}     30s    2s
    \       Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Created FC network

Edit LIG
    [Documentation]    Edit given LIG with new lig data
    [Arguments]     ${lig_name}    ${new_lig}  ${timeout}=3 m  ${interval}=1 m
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${lig_name}
    ${LIG_URI} =    Set Variable if    ${resp} != None    ${resp['uri']}    'LIG does not exist'

    ${us} =    Copy Dictionary    ${new_lig}
    ${body} =   Build LIG body  ${us}
    Log to console and logfile    ${body}
    ${resp} =   Fusion Api Edit Lig    body=${body}    uri=${LIG_URI}
    Log to console and logfile    ${resp}
    ${task} =   Wait For Task    ${resp}    5 min    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully edited LIG

FVT Verify Interconnects In LI
    [Documentation]    Verify Interconnects In LI
    [Arguments]     ${LI}
    #Log    \n    Verifying Interconnects In LI ${LI} console=True
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${LI}
    :FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   ${resp}    FVT Api Get Interconnect By Uri    ${interconnect}
    \   Log to console and logfile      Interconnect ${interconnect} is in ${resp['state']} state
    \   Should Be Equal As Strings  ${resp['state']}    Configured

Edit LIG negative
    [Documentation]    Edit LIG negative
    [Arguments]    ${lig_body}    ${LIG1}

    ${lig_uri} =    Get LIG Uri    ${LIG1}
    Log to console and logfile        ${lig_uri}
    ${resp} =    Fusion Api Edit LIG    body=${lig_body}    uri=${lig_uri}
    [Return]    ${resp}

LI Edit Telemetry Configurations
    [Documentation]    LI Edit Telemetry Configurations
    [Arguments]    ${LI}    ${telemetry}

    Log to console and logfile  \n Edit Telemetry Configurations Of LI ${LI}
    ${LI_URI} =     Get LI URI   ${LI}
    ${res}=     fusion_api_get_li   ${LI_URI}
    ${resp}    Fusion Api Update Li Telemetry Configuration   ${telemetry}    ${res['telemetryConfiguration']['uri']}    800
    [Return]        ${resp}
Check Linked status
    [Documentation]    Check Linked status
    [Arguments]    ${ports}    ${linked_ports}
     ${flag}=    set variable    ${empty}
    ${len} =    Get Length  ${linked_ports}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports['portName']}' == '${linked_ports[${x}]}' and '${ports['portStatus']}' == 'Linked'    Set Global Variable    ${flag}    True

FVT Edit Telemetry Configurations Of LI
    [Documentation]    FVT Edit Telemetry Configurations Of LI
    [Arguments]    ${LI}    ${telemetry}    ${flag}

    Log to console and logfile  \n Edit Telemetry Configurations Of LI ${LI}
    ${LI_URI} =     Get LI URI   ${LI}
    #${LI_URI} =    Set Variable if ${resp} != None   ${resp['uri']}    '/${LI} does not exist'
    ${res}=     fusion_api_get_li   ${LI_URI}
    ${resp}    Fusion Api Update Li Telemetry Configuration    ${telemetry}    ${res['telemetryConfiguration']['uri']}    800
    Log to console and logfile      ${resp}
    Should Be Equal As Integers    ${resp['status_code']}    202
    Wait For Task   ${resp}    timeout=30 m    interval=1 s
    ${resp}    Fusion Api Get Li    ${LI_URI}
    #Should Be Equal As Strings ${resp['consistencyStatus']}    NOT_CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${flag}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry['vcfcsampleIntervals']}


Verify the Total Number of Samples in Interconnect Statistics
    [Documentation]    Verify the Total Number of Samples in Interconnect Statistics
    [Arguments]    ${bay_no}    ${port}     ${total_samples}

    ${out}=     fusion_api_get_interconnect
    ${fc_uri}=  set variable    ${empty}
    ${enc_details}=    fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name}=   catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :FOR    ${ele}    in    @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri}= catenate    ${ele['uri']}/statistics
    Log to console and logfile      ${uri}

    ${out1}=        fusion_api_get_interconnect    ${uri}
    #Log to console and logfile     ${out1}
    ${output}=  validate_total_samples  ${port}    ${out1}    ${total_samples}
    [Return]                    ${output}

Verify the Throughput and utilization data
    [Documentation]    Verify the Throughput and utilization data
    [Arguments]    ${bay_no}    ${port}     ${total_samples}

    ${out}=     fusion_api_get_interconnect
    ${fc_uri}=  set variable    ${empty}
    ${enc_details}=    fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name}=   catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :FOR    ${ele}    in    @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri}= catenate    ${ele['uri']}/statistics
    Log to console and logfile      ${uri}

    ${out1}=        fusion_api_get_interconnect    ${uri}
    #Log to console and logfile     ${out1}
    ${output}=  vaildate_port_statistics    ${port}    ${out1}    ${total_samples}
    [Return]                    ${output}
Verify the TX,RX rates for frames and bit in advanced statistics
    [Documentation]    Verify the TX,RX rates for frames and bit in advanced statistics
    [Arguments]    ${bay_no}    ${port}

    ${out}=     fusion_api_get_interconnect
    ${fc_uri}=  set variable    ${empty}
    ${enc_details}=    fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name}=   catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :FOR    ${ele}    in    @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri}= catenate    ${ele['uri']}/statistics
    Log to console and logfile      ${uri}

    ${out1}=        fusion_api_get_interconnect    ${uri}
    #Log to console and logfile     ${out1}
    ${output}=  validate_Tx_Rx_Rates_statistics    ${port}    ${out1}
    [Return]                    ${output}

Run IO Traffic
    [Arguments]    ${diskspd_cmd}
    [Documentation]    Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

Poweroff Interconnect
    [Documentation]     Poweroff Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout=180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweroff interconnect ${interconnect}
    Write     poweroff interconnect ${interconnect}
    Close All Connections

Poweron Interconnect
    [Documentation]     Poweron Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout=180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweron interconnect ${interconnect}
    Write     poweron interconnect ${interconnect}
    Close All Connections

GET IC STATE
    [Documentation]     GET IC STATE
    [Arguments]     ${IC}    ${IC_state}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    Run Keyword If  "${resp['members'][0]['state']}" != "${IC_state}"    Fail    The Interconnect module ${INTERCONNECTS_enc1[0]} is in ${${resp['members'][0]['state']}} state!!

Change Uplink Port Status
    [Documentation]   Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} =     Get IC URI      ${interconnect}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} =     Get IC URI      ${interconnect}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    #Log to console and logfile \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
    Log to console and logfile  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     5m    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!

Change Downlink Port Status
    [Documentation]   Keyword to Disable/Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} =     Get IC URI      ${interconnect}
    ${resp}=    Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} =    Get Length    ${resp['members']}
    ${port_info}=     Create List
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Downlink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} =     Get IC URI      ${interconnect}
    @{id} =     Split String    ${ic_uri}   /
    ${port_id} =    Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:${uplink_port}
    #Log to console and logfile \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri=${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus=${port_info[0]['portHealthStatus']}

    ${edit_body} =  Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
    Log to console and logfile  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} !=202    fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     5m    5s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:${task[‘taskErrors’][0][errorCode]}\n :Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Suite Setup Tasks
    [Documentation]    Precondition to verify hill throughput utlization sampling
    #Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console and logfile  \nSuccessfully logged into the appliance

    Clean OV

    #Create Different Users
    :FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log to console and logfile    \n${Response['userName']} is created Successfully

    #Create Ethernet and FC Networks
    ${Response_enet}     fusion api create ethernet network     ${enet_hill}
    Run keyword unless  ${Response_enet['status_code']}== 202   Fail    "Unable to Create Ethernet network"
    Add FC Networks     @{fcnets1}
    Log to console and logfile      "Four FC networks are created successfully!"

    #Create LIG with valid sample interval and sample count values

    Log to console and logfile    \n Creating LIG!
    ${body} =   Build LIG body      ${ligs1['lig2']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console and logfile  \nSuccessfully Created LIG
    Log to console and logfile    LIG created successfully

    #Verify the Uplinksets are present in the LIG
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${ligs1['lig2']['name']}'"
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Log to console and logfile      ${uplink_len}
    Run Keyword If  ${uplink_len} !=5    fail    ${uplink_len} Uplinksets are not exist in appliance \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in appliance

    #Create EG with hill and utah modules
    ${resp_eg} =    Add Enclosure Group from variable       ${enc_group_1}
    Run keyword unless  ${resp_eg['status_code']}== 201    Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    #Import enclosure with hill and utah modules

    Add Enclosures from variable     ${encs1}
    Log to console and logfile    Enclosure imported succesfully

    #Validate the interconnect status
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[0]} is not in ${resp['members'][0]['state']} state!!   ${\n}

    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[1]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[1]} is not in ${resp['members'][0]['state']} state!!   ${\n}

    #Create server profile and poweron it
    ${resp}     Add Server Profiles from variable   ${server_profile6}
    Log to console and logfile      ${resp}
    Power on server    ${server_profile6[0]['serverHardwareUri']}
    ${resp}     Add Server Profiles from variable   ${server_profiles1}
    Log to console and logfile      ${resp}
    Power on server    ${server_profiles1[0]['serverHardwareUri']}
    sleep    1200

    #Validate the uplink and downlink port status in interconnect page
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to console and logfile      ${len}  ${\n}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'    Check Linked status    ${ports[${x}]}   ${up_ports_3}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[0]}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[1]}

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users