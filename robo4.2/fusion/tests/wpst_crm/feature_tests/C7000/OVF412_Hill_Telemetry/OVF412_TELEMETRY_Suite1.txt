** Settings ** *
# FVT-CRM OVF412 Configuring and validating the throughput utilization data for hill modules.
# The test cases covered in the suites are -
Documentation       OVF412 - SuiteName:
    Configure and Validating the throughput utilization data for hill modules. Test cases covered in this suite OVTC28834, OVTC28835, OVTC28836, OVTC28837, OVTC28838, OVTC28839, OVTC28840, OVTC28843, OVTC29097, OVTC29099
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         ServerOperations
Library         String
Library         OAOperations
Library         local_keywords

Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks
Library             .. / .. / TBIRD / FVT / fvt_api.py

Resource            .. / .. / TBIRD / FVT / fvt - keywords.txt
Resource            .. / .. / .. / .. / resource / fusion_api_all_resource_files.txt
Resource            .. / .. / FVT / TBIRD / Resources / fvt_resource.txt


***Test Cases ** **

1 OVF412_API_TC_Create_LIG_Invalid_sample_interval values
    [Documentation]    Create LIG Invalid sample interval values
    # Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console and logfile  \nSuccessfully logged into the appliance

    : FOR    ${neg_vcfcsampleIntervals}    IN  @{Invalid_vcfcsampleIntervals1}
    \   Set To Dictionary   ${ligs1['lig_neg']['telemetryConfiguration']}    vcfcsampleIntervals   ${neg_vcfcsampleIntervals}
    \   ${lig_body} = Build LIG body      ${ligs1['lig_neg']}

    \    ${resp_lig} = Fusion Api Create LIG   ${lig_body}
    \    Log to console and logfile    ${resp_lig}
    \    Run Keyword If  ${resp_lig['status_code']} != 400    fail    Warning !!! Unexpected behavior - sample collection is set to invalid value when creating LIG

2 OVF412_API_TC_Create_LIG_with_telemetry_disabled
    [Documentation]    Create LIG with telemetry value as false
    Set To Dictionary   ${ligs1['lig_neg']['telemetryConfiguration']}    enableTelemetry   False
    ${lig_body} = Build LIG body      ${ligs1['lig_neg']}
    ${resp_lig} = Fusion Api Create LIG   ${lig_body}
    Log to console and logfile    ${resp_lig}
    Run Keyword If  ${resp_lig['status_code']} != 400    fail    Warning !!! Unexpected behavior - sample collection is set to invalid value while creating  LIG

3 OVF412_API_TC_Create LIG with sample interval as one sample per 6 sec, one sample per 1 min, one sample per 1 hour
    [Documentation]    Create LIG with sample interval as one sample per 6 sec, one sample per 1 min, one sample per 1 hour and validate it got updated correctly
    :
        FOR    ${samples}    IN  @{sample_interval}
    \   Set To Dictionary   ${ligs1['lig3']['telemetryConfiguration']}    vcfcsampleIntervals   ${samples}
    \   ${lig_body} = Build LIG body      ${ligs1['lig3']}
    \    ${resp_lig} = Fusion Api Create LIG   ${lig_body}
    \    Log to console and logfile    ${resp_lig}
    \    Run keyword unless  ${resp_lig['status_code']} == 202    Fail    "Unable to Create LIG"
    \    ${task} = Wait For Task   ${resp_lig}     120s    2s
    \    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console and logfile  \nSuccessfully Created LIG
    \    Log to console and logfile    LIG created successfully
    \    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name1}
    \    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    \    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    \    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${samples}
    \    ${resp} = Fusion Api Delete LIG    uri =${LIG_URI}
    \    ${task} = Wait For Task    ${resp}    240s    2s
    \    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Created and verified the LIG having sample as ${samples}

4 OVF412_API_TC_Create LIG with utilization sample interval as 1 sample per hour for older api version
    [Documentation]    Create LIG with utilization sample interval as 1 sample per hour for older api version
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_24}
    ${us} = Copy Dictionary    ${Edit_telemetry}
    ${body} = Build LIG body  ${us}
    :
        FOR    ${api}    IN    @{UNSUPPORTED_API}
    \    ${resp} = Fusion Api Create LIG    ${body}    ${api}
    \    Run Keyword If  ${resp['status_code']} != 400    fail    Warning !!! Unexpected behavior - Telemetry got updated for lower versions

5 Validate VC - FC setting is properly defaulted if Hill is in the LIG and LI
    [Documentation]    Validate VC - FC setting is properly defaulted if Hill is in the LIG and LI
    # LIG
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_default}
    # LI
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_default}

    # Verify the number of samples configured for in the LIG, and the sample count is 60 in interconnect uplink and downlink port
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnects before passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect

    # Passing traffic
    Run IO Traffic    ${diskspd_cmd1}
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    180
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink port is not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink port not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink port not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink port not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink port not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics

    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters

6 Edit the LI and configure the utililzation samples ONE SAMPLE PER SIX SECONDS
    [Documentation]    Edit the LI and configure the utililzation samples ONE SAMPLE PER SIX SECONDS
    # Edit LI with sample ONE SAMPLE PER SIX SECONDS
    FVT Edit Telemetry Configurations Of LI    ${LI}    ${telemetry_10}     ${true_flag}
    sleep   60
    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}
    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect

    # Passing traffic
    Run IO Traffic    ${diskspd_cmd}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink port is not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink port is not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics
    #[Documentation]     Verify ICM Clear Port counters clears Telemetry counter statistics
    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters


7 Edit the LI and configure the utililzation samples ONE SAMPLE PER ONE HOUR
    [Documentation]    Edit the LI and configure the utililzation samples ONE SAMPLE PER ONE HOUR
    FVT Edit Telemetry Configurations Of LI    ${LI}    ${telemetry_24}     ${true_flag}

    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic
    #[Documentation]    Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}
    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect
    #[Documentation]    Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect
    # Passing traffic
    Run IO Traffic    ${diskspd_cmd1}
    sleep    180
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink port is not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink port is not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics
    #[Documentation]     Verify ICM Clear Port counters clears Telemetry counter statistics
    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters


8 Do Update from the group and verify the sample collection as ONE SAMPLE PER MINUTE
    [Documentation]    Do Update from the group in LE and verify the sample collection as ONE SAMPLE PER MINUTE
    ${le_uri} = Get LE URI      ${les['le1']['name']}
    ${le} = fusion_api_get_logical_enclosure    ${le_uri}

    Log to console and logfile    ${le}
    Should Be Equal As Strings   ${le['state']}    Inconsistent

    ${resp} = Fusion Api Update Logical Enclosure from Group   uri =${le_uri}
    ${task} = Wait For Task   ${resp}    10 min    15 s
    Log to console and logfile      ${task}
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully updated logical enclosure

    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}
    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect

    # Passing traffic
    Run IO Traffic    ${diskspd_cmd1}
    sleep    180
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d6}    ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames for uplink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames for uplink port is not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames for downlink port is not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames for downlink port is not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics
    #[Documentation]     Verify ICM Clear Port counters clears Telemetry counter statistics
    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters

9 Edit LIG with sample collection rate as one sample per 6sec and validate total number of samples in interconnect statistics
    [Documentation]     Edit LIG with sample collection rate as one sample per 6sec and validate total number of samples in interconnect statistics
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_10}
    Log to console and logfile    ${Edit_telemetry}
    Edit LIG    ${Lig_name}    ${Edit_telemetry}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_10['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} = Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} = Wait For Task   ${resp}    10m    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_10['vcfcsampleIntervals']}
    sleep    180
    # Verify the number of samples configured for in the LIG, and the sample count is 60 in interconnect uplink and downlink port

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}
    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect

    # Passing traffic
    Run IO Traffic    ${diskspd_cmd1}
    sleep    180
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_10}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics

    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters

10 Edit LIG with sample collection rate as one sample per 1hour and validate total number of samples in interconnect statistics
    [Documentation]     Edit LIG with sample collection rate as one sample per 6sec and validate total number of samples in interconnect statistics
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_24}
    Log to console and logfile    ${Edit_telemetry}
    Edit LIG    ${Lig_name}    ${Edit_telemetry}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_24['vcfcsampleIntervals']}

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} = Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} = Wait For Task   ${resp}    10m    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_24['vcfcsampleIntervals']}

    # Verify the number of samples configured for in the LIG, and the sample count is 24 in interconnect uplink and downlink port
    sleep    180
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    # Verify the TX,RX rates for frames and bit in advanced statistics in interconnect page before passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}

    Set Global Variable    ${BYTES_TX_up}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_up}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_up}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_up}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_up}
    Log to console and logfile    ${BYTES_RX_up}
    Log to console and logfile    ${FRAMES_TX_up}
    Log to console and logfile    ${FRAMES_RX_up}

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}

    Set Global Variable    ${BYTES_TX_dw}    ${bytes_TX}
    Set Global Variable    ${BYTES_RX_dw}    ${bytes_RX}
    Set Global Variable    ${FRAMES_TX_dw}    ${frames_TX}
    Set Global Variable    ${FRAMES_RX_dw}    ${frames_RX}

    Log to console and logfile    ${BYTES_TX_dw}
    Log to console and logfile    ${BYTES_RX_dw}
    Log to console and logfile    ${FRAMES_TX_dw}
    Log to console and logfile    ${FRAMES_RX_dw}
    # Pass I/O Traffic in server and validate the number of samples and TX and RX rates configured in interconnect

    # Passing traffic
    Run IO Traffic    ${diskspd_cmd1}
    sleep    180

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_24}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    sleep    60
    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_up}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_up}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_up}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_up}    fail    Received Frames are not getting increased after passing traffic

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d3}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}

    Run Keyword If  ${bytes_TX} <= ${BYTES_TX_dw}    fail    Transmitted Bytes are not getting increased after passing traffic
    Run Keyword If  ${bytes_RX} <= ${BYTES_RX_dw}    fail    Received Bytes are not getting increased after passing traffic
    Run Keyword If  ${frames_TX} <= ${FRAMES_TX_dw}    fail    Transmitted Frames are not getting increased after passing traffic
    Run Keyword If  ${frames_RX} <= ${FRAMES_RX_dw}    fail    Received Frames are not getting increased after passing traffic

    # Verify ICM Clear Port counters clears Telemetry counter statistics

    ${ic_uri} = Get IC URI    ${INTERCONNECTS_enc1[0]}
    ${body} = Create Dictionary
    Log to console and logfile    \nResetting Interconnect Port Counters\n
    ${resp} = Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg = Clearing Interconnect Ports of ${INTERCONNECTS_enc1[0]} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${INTERCONNECTS_enc1[0]} cleared successfully
    ${task} = Wait For Task   ${resp}    7m    5s    Default    ${resp['status_code']}
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE     Log to console and logfile  \nSuccessfully Resetted Interconnect Port Counters

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_2}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}
    # Run Keyword If   ${bytes_TX} != 0    fail    msg=Transmitted bytes are not cleared which is not expected
    # Run Keyword If    ${bytes_RX} != 0    fail    msg=Received bytes are not cleared which is not expected
    # Run Keyword If    ${frames_TX}  != 0    fail    msg=Transmitted frames are not cleared which is not expected
    # Run Keyword If    ${frames_RX}  != 0    fail    msg=Received frames are not cleared which is not expected

    ${bytes_TX}     ${bytes_RX}    ${frames_TX}    ${frames_RX} = Verify the TX, RX rates for frames and bit in advanced statistics        ${fc_bay_num_3}    ${portno_for_statistics_3_d6}
    Log to console and logfile    ${bytes_TX}
    Log to console and logfile    ${bytes_RX}
    Log to console and logfile    ${frames_TX}
    Log to console and logfile    ${frames_RX}
    # Run Keyword If   ${bytes_TX} != 0    fail    msg=Transmitted bytes are not cleared which is not expected
    # Run Keyword If    ${bytes_RX} != 0    fail    msg=Received bytes are not cleared which is not expected
    # Run Keyword If    ${frames_TX}  != 0    fail    msg=Transmitted frames are not cleared which is not expected
    # Run Keyword If    ${frames_RX}  != 0    fail    msg=Received frames are not cleared which is not expected

11 Negative - Edit the LIG and pass the sample collection as invalid value and verify the status
    [Documentation]    Editing LIG with telemetry sample collection value as invalid and verfing the error msg in LIG

    :
        FOR    ${neg_vcfcsampleIntervals}    IN  @{Invalid_vcfcsampleIntervals1}
    \   Set To Dictionary   ${ligs1['lig_neg']['telemetryConfiguration']}    vcfcsampleIntervals   ${neg_vcfcsampleIntervals}
    \   ${lig_body} = Build LIG body      ${ligs1['lig_neg']}

    \    ${res} = Edit LIG negative     ${lig_body}   ${ligs1['lig_neg']['name']}
    \    Log to console and logfile    ${res}
    \    Run Keyword If  ${res['status_code']} != 400    fail    Warning !!! Unexpected behavior - sample collection is set to invalid value in LIG


12 Negative - Edit the LI and pass the sample collection as invalid value and verify the status
    [Documentation]    Editing LI with telemetry sample interval value as invalid and verfing the error msg in LI
    :
        FOR    ${neg_vcfcsampleIntervals}    IN  @{Invalid_vcfcsampleIntervals1}
    \    ${resp} = LI Edit Telemetry Configurations    ${LI}    ${neg_vcfcsampleIntervals}
    \    Log to console and logfile    ${resp}
    \    Run Keyword If  ${resp['status_code']} != 400    fail    Warning !!! Unexpected behavior - sample collection is set to invalid value from LI

13 Negative - Edit LIG telemetry value with older api versions
    [Documentation]    Edit LIG telemetry value with older api versions
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_24}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    ${us} = Copy Dictionary    ${Edit_telemetry}
    ${body} = Build LIG body  ${us}
    :
        FOR    ${api}    IN    @{UNSUPPORTED_API}
    \    ${resp} = Fusion Api Edit LIG    ${body}    ${LIG_URI}    ${api}
    \    Run Keyword If  ${resp['status_code']} != 400    fail    Warning !!! Unexpected behavior - Telemetry got updated for lower versions

14 Negative - Edit LI telemetry value with older api versions
    [Documentation]    Edit LI telemetry value with older api versions
    ${LI_URI} = Get LI URI   ${LI}
    ${res} = fusion_api_get_li   ${LI_URI}
    :
        FOR    ${api}    IN    @{UNSUPPORTED_API}
    \    ${resp}    Fusion Api Update Li Telemetry Configuration   ${telemetry_24}    ${res['telemetryConfiguration']['uri']}    ${api}
    \    Log to console and logfile    ${resp}
    \    Run Keyword If  ${resp['status_code']} != 400    fail    Warning !!! Unexpected behavior - Telemetry got updated for lower versions

15 Negative - Edit the LIG and pass the enable telemetry as false and verify the status
    [Documentation]    Edit the LIG and pass the enable telemetry as false and verify the status
    ${lig_body} = Build LIG body      ${ligs1['lig_neg2']}
    ${res} = Edit LIG negative     ${lig_body}    ${ligs1['lig_neg2']['name']}
    Run Keyword If  ${res['status_code']} != 400 and ${res['errorCode']} != ${telemetry_enable_errorcode}    fail    Warning !!! Unexpected behavior - sample interval is set to false

16 Negative - Pass the telemetry enabled value as False, verify the error message
    [Documentation]    Negative - pass the telemetry enabled value as False, verify the error message
    Set To Dictionary   ${telemetry_24}    enableTelemetry   false
    Log to console and logfile      ${telemetry_24}
    ${resp_error} = LI Edit Telemetry Configurations    ${LI}   ${telemetry_24}
    Log to console and logfile      ${resp_error}
    Run Keyword If  ${resp_error['status_code']} != 400 and ${resp_error['errorCode']} != ${telemetry_enable_errorcode}    fail    Warning !!! Unexpected behavior - sample interval is set to false

17 Verify sampling rate is not configured if hill module is not available in LIG
    [Documentation]    Verify sampling rate is configured only if hill module is available in LIG
    #####Remove hill modules from lig#####

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    ${us} = Copy Dictionary    ${ligs1['lig_neg1']}
    ${body} = Build LIG body  ${us}
    ${resp} = Fusion Api Edit LIG    ${body}    ${LIG_URI}
    Log to console and logfile      ${resp}
    ${task} = Wait For Task   ${resp}     30s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Removed hill modules from LIG
    #####Edit lig with telemetry value######
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Log to console and logfile      ${resp}

    Should Be Equal As Strings    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    None
    Set To Dictionary   ${resp}    telemetryConfiguration   ${telemetry_24}
    ${resp1} = Fusion Api Edit LIG    ${resp}    ${LIG_URI}
    Log to console and logfile      ${resp1}
    ${task} = Wait For Task   ${resp1}     30s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Verified that telemetry data is not available when hill module is absent in lig

    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal As Strings    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    None
    Log to console and logfile    Telemetry value should not be edited in LI when hill module is not available

18 Verify sampling rate is not configured if hill module is not available in LI
    [Documentation]    Verify sampling rate is not configured if hill module is not available in LI
    ###Do update from group in li to remove hill modules####
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Log to console and logfile      ${resp}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} = Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} = Wait For Task   ${resp}    10m    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    # Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Log to console and logfile      ${resp}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}
    Set Global Variable    ${before_edit_telemetry}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}

    ${LI_URI} = Get LI URI   ${LI}
    ${res} = fusion_api_get_li   ${LI_URI}
    ${resp}    Fusion Api Update Li Telemetry Configuration   ${telemetry_10}    ${res['telemetryConfiguration']['uri']}    800
    Log to console and logfile      ${resp}
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Log to console and logfile      ${resp}
    Log to console and logfile      ${resp['telemetryConfiguration']['vcfcsampleIntervals']}
    Set Global Variable    ${after_edit_telemetry}    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}
    Should Be Equal As Strings    ${before_edit_telemetry}    ${after_edit_telemetry}
    Log to console and logfile    Telemetry value should not be edited in LI when hill module is not available

19 Verify only network administrator will have access to edit telemetry data
    [Documentation]     Verify only network administrator will have access to get / edit telemetry data
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_10}
    Log to console and logfile    ${Edit_telemetry}
    ${resp} = Edit LIG    ${Lig_name}    ${Edit_telemetry}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_10['vcfcsampleIntervals']}
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} = Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} = Wait For Task   ${resp}    20m    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_10['vcfcsampleIntervals']}
    ###Login to Oneview as server admin######
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin}
    Run keyword unless  ${Login_response[0]['status_code']} == 200    Fail    "Unable to Login"
    Log to console and logfile    \n\nLogged in as ${serveradmin['userName']}
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_10}
    Log to console and logfile    ${Edit_telemetry}
    ${resp_error} = Edit LIG negative    ${Edit_telemetry}    ${Lig_name}
    Run Keyword If  ${resp_error['status_code']} != 400    fail    Warning !!! Unexpected behavior - Serveradmin edited telemetry data

    #####Log-out from the appliance######
    #[Documentation]             Logout from Appliance
    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']} == 204    Fail    "Unable to Logout"
    Log to console and logfile    \n\nLogged_Out from Appliance as ${admin_credentials['userName']}

    ###Login to Oneview as network_admin######
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${network_admin}
    Run keyword unless  ${Login_response[0]['status_code']} == 200    Fail    "Unable to Login"
    Log to console and logfile    \n\nLogged in as ${network_admin['userName']}
    Set To Dictionary   ${Edit_telemetry}    telemetryConfiguration   ${telemetry_60}
    Log to console and logfile    ${Edit_telemetry}
    ${resp} = Edit LIG    ${Lig_name}    ${Edit_telemetry}
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${Lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT

    ${resp} = Fusion Api Update From Group    ${LI_URI}
    Should Be Equal As Integers    ${resp['status_code']}    202
    ${task} = Wait For Task   ${resp}    20m    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console and logfile  \nSuccesfully completed update from group

    ${resp}    Fvt Api Get Logical Interconnect By Name    ${ENC1} -${Lig_name}
    Run Keyword If  ${resp} is not None    Set Global Variable    ${LI_URI}    ${resp['uri']}
    Should Be Equal As Strings   ${resp['consistencyStatus']}    CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${telemetry_default_enabled['enableTelemetry']}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry_60['vcfcsampleIntervals']}
    sleep    180

    ###Get interconnect statistics#####
    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_2} ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}

    ${flag}     ${out} = Verify the Total Number of Samples in Interconnect Statistics       ${fc_bay_num_3}    ${portno_for_statistics_3_d3}    ${total_samples_60}
    Run Keyword If  '${flag}' == 'False'    fail   ${out}
    ...         ELSE    Log to console and logfile  ${out}
    #####Log-out from the appliance######
    #[Documentation]             Logout from Appliance
    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']} == 204    Fail    "Unable to Logout"
    Log to console and logfile    \n\nLogged_Out from Appliance as ${network_admin['userName']}

****Keywords ** **
OA CLI EFUSE
    [Documentation]    issues an EFUSE Action to the given Device\Bay.
    ...   {DEVICE} = <BLADE | IOM | NETTRAY | SWM | FAN | OA | EM >
    ...   {BAY} = desired bay for given device
    ...   {ACTION} = <ON | OFF >
    [Arguments]        ${OA_HOST}    ${OA_USER}     ${OA_PASS}    ${DEVICE}    ${BAY}    ${ACTION}
    Open Connection     ${OA_HOST}     prompt = >    timeout = 20s
    Login               ${OA_USER}     ${OA_PASS}
    Write + +diag - -
    Read Until    diag >
    Write    efuse ${DEVICE} ${BAY} ${ACTION}
    Write    q
    Close All Connections
Add FC Networks
    [Documentation]             Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n - Adding FC Networks
    :
        FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} = Fusion Api Create FC Network   body =${fcnet}
    \       Log to console and logfile  ${resp}
    \       ${task} = Wait For Task   ${resp}     30s    2s
    \       Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully Created FC network

Edit LIG
    [Documentation]    Edit given LIG with new lig data
    [Arguments]     ${lig_name}    ${new_lig}  ${timeout} = 3 m  ${interval} = 1 m
    ${resp}    Fvt Api Get Logical Interconnect Group By Name  ${lig_name}
    ${LIG_URI} = Set Variable if ${resp} is not None    ${resp['uri']}    'LIG does not exist'

    ${us} = Copy Dictionary    ${new_lig}
    ${body} = Build LIG body  ${us}
    Log to console and logfile    ${body}
    ${resp} = Fusion Api Edit Lig    body =${body}    uri =${LIG_URI}
    Log to console and logfile    ${resp}
    ${task} = Wait For Task    ${resp}    5 min    15s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console and logfile  \nSuccessfully edited LIG

FVT Verify Interconnects In LI
    [Documentation]    Verify Interconnects In LI
    [Arguments]     ${LI}
    # Log    \n    Verifying Interconnects In LI ${LI} console=True
    ${resp}    Fvt Api Get Logical Interconnect By Name    ${LI}
    :
        FOR    ${interconnect}    IN    @{resp['interconnects']}
    \   ${resp}    FVT Api Get Interconnect By Uri    ${interconnect}
    \   Log to console and logfile      Interconnect ${interconnect} is in ${resp['state']} state
    \   Should Be Equal As Strings  ${resp['state']}    Configured

Edit LIG negative
    [Documentation]    Edit LIG negative
    [Arguments]    ${lig_body}    ${LIG1}

    ${lig_uri} = Get LIG Uri    ${LIG1}
    Log to console and logfile        ${lig_uri}
    ${resp} = Fusion Api Edit LIG    body =${lig_body}    uri =${lig_uri}
    [Return]    ${resp}

LI Edit Telemetry Configurations
    [Documentation]    LI Edit Telemetry Configurations
    [Arguments]    ${LI}    ${telemetry}

    Log to console and logfile  \n Edit Telemetry Configurations Of LI ${LI}
    ${LI_URI} = Get LI URI   ${LI}
    ${res} = fusion_api_get_li   ${LI_URI}
    ${resp}    Fusion Api Update Li Telemetry Configuration   ${telemetry}    ${res['telemetryConfiguration']['uri']}    800
    [Return]        ${resp}
Check Linked status
    [Documentation]    Check Linked status
    [Arguments]    ${ports}    ${linked_ports}
        ${flag} = set variable    ${empty}
    ${len} = Get Length  ${linked_ports}
    :
        FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports['portName']}' == '${linked_ports[${x}]}' and '${ports['portStatus']}' == 'Linked'    Set Global Variable    ${flag}    True

FVT Edit Telemetry Configurations Of LI
    [Documentation]    FVT Edit Telemetry Configurations Of LI
    [Arguments]    ${LI}    ${telemetry}    ${flag}

    Log to console and logfile  \n Edit Telemetry Configurations Of LI ${LI}
    ${LI_URI} = Get LI URI   ${LI}
    #${LI_URI} =    Set Variable if ${resp} != None   ${resp['uri']}    '/${LI} does not exist'
    ${res} = fusion_api_get_li   ${LI_URI}
    ${resp}    Fusion Api Update Li Telemetry Configuration    ${telemetry}    ${res['telemetryConfiguration']['uri']}    800
    Log to console and logfile      ${resp}
    Should Be Equal As Integers    ${resp['status_code']}    202
    Wait For Task   ${resp}    timeout = 10 m    interval = 1 s
    ${resp}    Fusion Api Get Li    ${LI_URI}
    Should Be Equal As Strings  ${resp['consistencyStatus']}    NOT_CONSISTENT
    Should Be Equal    ${resp['telemetryConfiguration']['enableTelemetry']}    ${flag}
    Should Be Equal    ${resp['telemetryConfiguration']['vcfcsampleIntervals']}    ${telemetry['vcfcsampleIntervals']}


Verify the Total Number of Samples in Interconnect Statistics
    [Documentation]    Verify the Total Number of Samples in Interconnect Statistics
    [Arguments]    ${bay_no}    ${port}     ${total_samples}

    ${out} = fusion_api_get_interconnect
    ${fc_uri} = set variable    ${empty}
    ${enc_details} = fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name} = catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :
        FOR    ${ele} in @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri} = catenate    ${ele['uri']} / statistics
    Log to console and logfile      ${uri}

    ${out1} = fusion_api_get_interconnect    ${uri}
    # Log to console and logfile     ${out1}
    sleep    180
    ${output} = validate_total_samples  ${port}    ${out1}    ${total_samples}
    [Return]                    ${output}

Verify the Throughput and utilization data
    [Documentation]    Verify the Throughput and utilization data
    [Arguments]    ${bay_no}    ${port}     ${total_samples}

    ${out} = fusion_api_get_interconnect
    ${fc_uri} = set variable    ${empty}
    ${enc_details} = fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name} = catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :
        FOR    ${ele} in @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri} = catenate    ${ele['uri']} / statistics
    Log to console and logfile      ${uri}

    ${out1} = fusion_api_get_interconnect    ${uri}
    # Log to console and logfile     ${out1}
    sleep    120
    ${output} = vaildate_port_statistics    ${port}    ${out1}    ${total_samples}
    [Return]                    ${output}
Verify the TX, RX rates for frames and bit in advanced statistics
    [Documentation]    Verify the TX, RX rates for frames and bit in advanced statistics
    [Arguments]    ${bay_no}    ${port}

    ${out} = fusion_api_get_interconnect
    ${fc_uri} = set variable    ${empty}
    ${enc_details} = fusion_api_get_enclosures
    Log to console and logfile    ${enc_details['members'][0]['name']}

    ${interconnect_name} = catenate    ${enc_details['members'][0]['name']}, interconnect ${bay_no}
    Log to console and logfile      ${interconnect_name}
    :
        FOR    ${ele} in @{out['members']}
    #\  ${fc_uri} =    Set Variable if    '${ele['name']}' == '${interconnect_name}'    ${ele['uri']}
    \   Run Keyword If  '${ele['name']}' == '${interconnect_name}'    Exit For Loop
    Log to console and logfile      ${ele['uri']}
    Log to console and logfile      "The interconnect URI is "  ${\n}
    Log to console and logfile      ${ele['uri']}

    #${uri}=    catenate    ${out['members'][${bay_no}]['uri']}/statistics
    ${uri} = catenate    ${ele['uri']} / statistics
    Log to console and logfile      ${uri}

    ${out1} = fusion_api_get_interconnect    ${uri}
    # Log to console and logfile     ${out1}
    sleep    120
    ${output} = validate_Tx_Rx_Rates_statistics    ${port}    ${out1}
    [Return]                    ${output}

Run IO Traffic
    [Arguments]    ${diskspd_cmd}
    [Documentation]    Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1} = executes        ${linux_details}    ${oa_details_2}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}' == 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log to console and logfile      "The IO Traffic Details are as follows: \n"
    Log to console and logfile      ${output_1}

Poweroff Interconnect
    [Documentation]     Poweroff Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout = 180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweroff interconnect ${interconnect}
    Write     poweroff interconnect ${interconnect}
    Close All Connections

Poweron Interconnect
    [Documentation]     Poweron Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout = 180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweron interconnect ${interconnect}
    Write     poweron interconnect ${interconnect}
    Close All Connections

GET IC STATE
    [Documentation]     GET IC STATE
    [Arguments]     ${IC}    ${IC_state}
    ${resp} = Fusion Api Get Interconnect    param =?filter = "'name'=='${IC}'"
    Run Keyword If  "${resp['members'][0]['state']}" != "${IC_state}"    Fail    The Interconnect module ${INTERCONNECTS_enc1[0]} is in ${${resp['members'][0]['state']}} state!!

Change Uplink Port Status
    [Documentation]   Keyword to Disable / Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} = Get IC URI      ${interconnect}
    ${resp} = Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} = Get Length    ${resp['members']}
    ${port_info} = Create List
    :
        FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Uplink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} = Get IC URI      ${interconnect}

    @{id} = Split String    ${ic_uri} /
    ${port_id} = Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:
        ${uplink_port}
    # Log to console and logfile \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri =${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus =${port_info[0]['portHealthStatus']}

    ${edit_body} = Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
    Log to console and logfile  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} != 202    fail    msg =\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:
        ${resp['errorCode']}\nMessage:
            ${resp['message']}
    ${task} = Wait For Task   ${resp}     15m    5s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200   fail    msg =\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:
        ${task[‘taskErrors’][0][errorCode]}\n:
            Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!

Change Downlink Port Status
    [Documentation]   Keyword to Disable / Enable an uplink port in an interconnect
    [Arguments]     ${uplink_port}      ${interconnect}     ${status}

    ${ic_uri} = Get IC URI      ${interconnect}
    ${resp} = Fusion Api Get Interconnect Ports   ${ic_uri}
    ${len} = Get Length    ${resp['members']}
    ${port_info} = Create List
    :
        FOR    ${y}    IN RANGE    0  ${len}
    \    Run Keyword If    '${resp['members'][${y}]['portName']}' != '${uplink_port}' or '${resp['members'][${y}]['portType']}' != 'Downlink'    Continue For Loop
    \    ...         ELSE    Append To List    ${port_info}    ${resp['members'][${y}]}
    ${ic_uri} = Get IC URI      ${interconnect}

    @{id} = Split String    ${ic_uri} /
    ${port_id} = Get From List   ${id}   3
    ${portid}       catenate    ${port_id}:
        ${uplink_port}
    # Log to console and logfile \nport id ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  portId     ${portid}
    Set to Dictionary   ${Edit_Uplink_Port}  enabled     ${status}
    Set to Dictionary   ${Edit_Uplink_Port}  portName     ${uplink_port}
    Set to Dictionary   ${Edit_Uplink_Port}  portStatus     ${port_info[0]['portStatus']}
    set to dictionary    ${Edit_Uplink_Port}   associatedUplinkSetUri =${port_info[0]['associatedUplinkSetUri']}
    set to dictionary    ${Edit_Uplink_Port}   portHealthStatus =${port_info[0]['portHealthStatus']}

    ${edit_body} = Create List     ${Edit_Uplink_Port}

    ${resp}     Fusion Api Edit Interconnect Ports      ${edit_body}        ${ic_uri}
    Log to console and logfile  \n resp after update is ${Resp}
    Run Keyword If  ${resp['status_code']} != 202    fail    msg =\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:
        ${resp['errorCode']}\nMessage:
            ${resp['message']}
    ${task} = Wait For Task   ${resp}     15m    5s
    Run Keyword If  '${task['taskState']}' != 'Completed' or ${task['status_code']} != 200   fail    msg =\nEditing of Uplink ${uplink_port} in ${interconnect} Failed. \n ErrorCode:
        ${task[‘taskErrors’][0][errorCode]}\n:
            Message ${task[‘taskErrors’][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nEdited Uplink ${uplink_port} in ${interconnect} Successfully !!

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Suite Setup Tasks
    [Documentation]    Precondition to verify hill throughput utlization sampling
    # Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console and logfile  \nSuccessfully logged into the appliance

    Clean OV

    # Create Different Users
    :
        FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']} == 200    Fail    "Unable to Create users"
    \   Log to console and logfile    \n${Response['userName']} is created Successfully

    # Create Ethernet and FC Networks
    ${Response_enet}     fusion api create ethernet network     ${enet_hill}
    Run keyword unless  ${Response_enet['status_code']} == 202   Fail    "Unable to Create Ethernet network"
    Add FC Networks     @{fcnets1}
    Log to console and logfile      "Four FC networks are created successfully!"

    # Create LIG with valid sample interval and sample count values

    Log to console and logfile    \n Creating LIG!
    ${body} = Build LIG body      ${ligs1['lig2']}
    ${resp_lig} = Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']} == 202    Fail    "Unable to Create LIG"
    ${task} = Wait For Task   ${resp_lig}     120s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console and logfile  \nSuccessfully Created LIG
    Log to console and logfile    LIG created successfully

    # Verify the Uplinksets are present in the LIG
    ${resp} = Fusion Api Get Lig     param =?filter = "'name'=='${ligs1['lig2']['name']}'"
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} = Get Length      ${resp['members'][0]['uplinkSets']}
    Log to console and logfile      ${uplink_len}
    Run Keyword If  ${uplink_len} != 5    fail    ${uplink_len} Uplinksets are not exist in appliance \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in appliance

    # Create EG with hill and utah modules
    ${resp_eg} = Add Enclosure Group from variable       ${enc_group_1}
    Run keyword unless  ${resp_eg['status_code']} == 201    Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    # Import enclosure with hill and utah modules

    Add Enclosures from variable     ${encs1}
    Log to console and logfile    Enclosure imported succesfully

    # Validate the interconnect status
    ${resp} = Fusion Api Get Interconnect   param =?filter = "'name'=='${INTERCONNECTS_enc1[0]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" != "Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[0]} is not in ${resp['members'][0]['state']} state!! ${\n}

    ${resp} = Fusion Api Get Interconnect   param =?filter = "'name'=='${INTERCONNECTS_enc1[1]}'"
    Log to console and logfile      "The state of the interconnect is :${resp['members'][0]['state']}"
    Run Keyword If  "${resp['members'][0]['state']}" != "Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[1]} is not in ${resp['members'][0]['state']} state!! ${\n}

    # Create server profile and poweron it
    ${resp}     Add Server Profiles from variable   ${server_profile6}
    Log to console and logfile      ${resp}
    Power on server    ${server_profile6[0]['serverHardwareUri']}
    ${resp}     Add Server Profiles from variable   ${server_profiles1}
    Log to console and logfile      ${resp}
    Power on server    ${server_profiles1[0]['serverHardwareUri']}
    sleep    600

    # Validate the uplink and downlink port status in interconnect page
    ${resp} = Fusion Api Get Interconnect        param =?filter = "'name'=='${INTERCONNECTS_enc1[0]}'"
    ${ports} = Get from Dictionary    ${resp['members'][0]}    ports
    ${len} = Get Length    ${ports}
    Log to console and logfile      ${len}  ${\n}
    :
        FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'    Check Linked status    ${ports[${x}]}   ${up_ports_3}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[0]}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink'    Check Linked status    ${ports[${x}]}   ${dw_ports_3[1]}

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile[TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users
