*** Settings ***
Documentation     Feature Test: OVF4512
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library                SSHLibrary
Library            Collections
Variables          Datavariables.py
Resource        ../../../../../Resources/api/fusion_api_resource.txt
Resource           OVF4512_Keywords.txt
Library            Dialogs
Suite Setup        Suite Setup Tasks

***Test cases***
Login to Appliance
    [Documentation]    Login to Appliance
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log    Successfully logged into the appliance    console=true

Create FC Network
    [Documentation]    Creating Fc network
    Set Log Level    TRACE
    ${resp}=    Add FC Networks from variable    ${fc}
    ${l} =  Get Length  ${resp}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Log    ${resp[${x}]}    console=True
    \    Run keyword unless  ${resp[${x}]['status_code']}== 202    Fail    "Unable to Create FC network"
    \    ${task} =   Wait For Task   ${resp[${x}]}    5 min    15s
    \    Run Keyword If  '${task['taskState']}' != 'Completed'    FAIL    ELSE    Log    FC Networks Created Successfully!!    console=True

Create LIG
    [Documentation]   Creating LIG
    Set Log Level    TRACE
    Log    \n\ncreating LIG    console=True
    Add LIG from variable    ${ligs['lig1']}
    Log  LIG created   console=True

Create EG and Enclosure
    [Documentation]    Creating EG & Enclosure
    Set Log Level    TRACE
    Log    \nCreating EG    console=True
    ${resp}    Add Enclosure Group from variable    ${eg_body1}
    Run Keyword If  '${resp['status_code']}' == '201'    Wait For Task2    ${resp}    ELSE    Fail    Log    failed    console=True
    Log    Encloure Group Created successfully    console=True

    #Import Enclosure
    Log    \nImporting enclosure    console=True
    Add Enclosures from variable    ${enc_body1}

Verify IC State and Port status after importing Enclosure
    [Documentation]    Verify IC State and Port status after importing Enclosure
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

####Verify if the downlink is not logged in, the attributes downlinkToUplinkPortMapping displays None and mappedUplinkPortIsTrunkMaster as False for hill####

1 Verify that the attributes DownlinkToUplinkPortMapping is None and mapped UplinkPortIsTrunkMaster is false via REST call when downlink port is not logged in without any server profile connection for HILL

    [Documentation]    Verifying the attributes downlinkToUplinkPortMapping displays None and mappedUplinkPortIsTrunkMaster as False for hill when there is no server profile.
    Set Log Level    TRACE

    Log    \nVerifying downlink attributes before creating SP    console=True
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    In RANGE     0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    None    None


2 Verify that the attributes DownlinkToUplinkPortMapping is None and mapped UplinkPortIsTrunkMaster is false via REST call when downlink port is not logged in without any server profile connection for UTAH
    [Documentation]    Verifying the attributes downlinkToUplinkPortMapping displays None and mappedUplinkPortIsTrunkMaster as False for hill when there is no server profile.
    Set Log Level    TRACE

    Log    \nVerifying downlink attributes before creating SP    console=True
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    In RANGE    0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    None    None


####Verify downlink attributes are not present in XAPI version  less than 1000  #####
3_1 Verify that with an older XAPI version the REST attributes downlinkToUplinkPortMapping and mappedUplinkPortIsTrunkMaster are not present for HILL
    [Documentation]    Validating downlink to uplinkport attribute is not present in less than Xapi 800 versions
    Set Log Level    TRACE

    Log    \nValidating downlink attribute for lowerxapi    console=True
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Validating Downlink Attributes for Lower XApi Version    ${IC_Hill[${x}]}    ${older_xapi_versions[${x}]}


3_2 Verify that with an older XAPI version the REST attributes downlinkToUplinkPortMapping and mappedUplinkPortIsTrunkMaster are not present for UTAH
    [Documentation]    Validating downlink to uplinkport attribute is not present in less than Xapi 800 versions
    Set Log Level    TRACE
    Log    \nValidating downlink attribute for lowerxapi    console=True
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Validating Downlink Attributes for Lower XApi Version    ${IC_Utah[${x}]}    ${older_xapi_versions[${x}]}

Create Multiple Server profiles with different uplinksets
    [Documentation]    Create Multiple Server profiles with different uplinksets
    Set Log Level    TRACE
    Log    \nPowering off the servers     console=True
    Power off all servers    PressAndHold
    Log     \nremoving server profiles    console=True
    Remove ALL Server Profiles    force=${True}
    Log    \nCreating server profile    console=True
    ${resp}    Add Server Profiles from variable   ${server_profiles}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${server_profiles[${x}]['serverHardwareUri']}
    Sleep    10min

Verify IC State and Downlink Port status after creating server profile
    [Documentation]    Verify IC State and Downlink Port status after creating server profile
    Set Log Level    TRACE
    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${downlink_ports_hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${downlink_ports_utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

######## After creating server profile with trunking disabled checking downlink to uplinkport mapping is not None and trunk master value as false for Hill version graeter than 4.00 and for utah ####

4_1 Verifying attributes are present in the Hill firmware version greater than 4 00
    [Documentation]    Verifying Hill firmware version is greater than 4.00
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${res}    Fusion Api Get Interconnect   param=?filter="'name'=='${IC_Hill[${x}]}'"
    \    Log    \n${res['members'][0]['ports']}    console=True
    \    Run Keyword If    ${res['members'][0]['firmwareVersion']} > 4.00    Log    \nFirmware version is greater than 4.00    ELSE    FAIL    Log    \nfirmware version is below 4.00    console=True

4_2 For uplinkset with trunking disabled Verify that the logged in uplink port corresponding to a downlink port is displayed through REST Call for Hill
    [Documentation]    checking downlink to uplinkport mapping as not None and trunk master value as false for Hill
    Set Log Level    TRACE
    Log    \nVerifying attributes after creating SP    console=True
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    disabled    None

5 Verify the logged in uplink port corresponding to a downlink port is returned via REST call after server profile creation for utah
    [Documentation]    checking downlink to uplinkport mapping as not None and trunk master value as false for Utah
    Set Log Level    TRACE
    Log    \nVerifying attributes after creating SP    console=True
    ${len}   Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None


####### Test case 6 - For uplinkset with trunking disabled disable the uplink port and Verify that the logged in uplink port corresponding to a downlink port is displayed as None.################################################

6_1 For uplinkset with trunking disabled disable the uplink port and Verify that the logged in uplink port corresponding to a downlink port is displayed as None
    [Documentation]    Disabling the uplink port of hill and verify port status
    Set Log Level    TRACE

    Log    \nDisabling uplink port of hill    console=True

    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nDisabling uplink port of hill${IC_Hill[${x}]}    console=True
    \    Disable Enable Ports     ${uplinkport_Hill[${x}]}    ${uri}     update=False    portStatus=Unlinked    portStatusReason=NotLoggedIn

6_2 Verifying downlink to uplink port mapping and trunk master value after disabling uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after disabling uplink port
    Set Log Level    TRACE

    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}     None    None

6_3 Enable Uplink Ports of hill bays and verify port status
    [Documentation]    Enable Uplink Ports of hill bays and verify port status
    Set Log Level    TRACE

    Log    \nEnabling uplink port of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nEnabling uplink port of hill${IC_Hill[${x}]}    console=True
    \    Disable Enable Ports     ${uplinkport_Hill[${x}]}    ${uri}     update=True    portStatus=Linked    portStatusReason=LoggedIn

6_4 Verifying downlink to uplink port mapping and trunk master value after enabling uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after enabling uplink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}     disabled    None

#### Remove the uplink port from uplink sets in LIG page, do an update from group in the LI page and then verify the values displayed in the UI for the downlink ports for hill ####

7_1 Remove the uplink port from uplink sets in LIG page do an update from group in the LI page and then verify the values displayed in the UI for the downlink ports for hill
    [Documentation]    Edit LIG to remove one uplinkport from one hill bay and all uplinkport from other hill in LIG
    Set Log Level    TRACE
    ${body}    Get From Dictionary    ${edit_lig}    lig_remove_uplinkport_hill
    ${lig_body}    Create List    ${body}
    Log    \n\nEditing LIG to remove uplink ports   console=True
    ${resp}    Edit LIG    ${lig_body}
    Run Keyword If  '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    5min    10    ELSE    Fail    Log    failed    console=True
    Log    \nPerforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

7_2 Verify Port Status and Interconnect state after editing LIG
    [Documentation]    Verify Port Status and Interconnect state after editing LIG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${removedports_Hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

7_3 Verifying downlink to uplinkport mapping after removing two uplinkport from hill bay5
    [Documentation]     Verifying downlinkport mapping after removing two uplinkport from hill bay5
    Set Log Level    TRACE
    Log    \nValidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[0]}    ${downlink_ports_hill[0]}    disabled    None

7_4 Verifying downlink to uplinkport mapping after removing all uplinkport from hill bay6
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport from hill bay6
    Set Log Level    TRACE
    Log    \nValidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[1]}    ${downlink_ports_hill[1]}    None    None

7_5 Editing LIG to 4 uplinksets with all ports
    [Documentation]    Editing LIG to 4 uplinksets with all ports
    Set Log Level    TRACE

    ${body}    Get From Dictionary    ${ligs}    lig1
    ${lig_body}    Create List    ${body}
    Log    \nEditing LIG to 4uplinksets with all ports   console=True
    ${resp}    Edit LIG    ${lig_body}
    Run Keyword If  '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    5min    10    ELSE    Fail    Log    \nfailed    console=True
    Log    \nPerforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

7_6 Verify Port Status and Interconnect state after editing LIG
    [Documentation]   Verify Port Status and Interconnect state after editing LIG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

7_7 Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}     disabled    None

#### Remove the uplink port from uplink sets in LIG page, do an update from group in the LI page and then verify the values displayed in the UI for the downlink ports for utah ####

8_1 Remove the uplink port from uplink sets in LIG page do an update from group in the LI page and then verify the values displayed in the UI for the downlink ports for utah
    [Documentation]    Edit LIG to remove one uplinkport from one utah bay and all uplinkport from other utah in LIG
    Set Log Level    TRACE
    ${body}    Get From Dictionary    ${edit_lig}    lig_remove_uplinkport_utah
    ${lig_body}    Create List    ${body}
    Log    \nEditing LIG to remove uplinkports from utah uplinkset    console=True
    ${resp}    Edit LIG    ${lig_body}
    Run Keyword If  '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    5min    10    ELSE    Fail    Log    failed    console=True
    Log    \nUFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

8_2 Verify Port Status and Interconnect state after editing LIG
    [Documentation]   Verify Port Status and Interconnect state after editing LIG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${removedports_Utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

8_3 Verifying downlink to uplinkport mapping after removing one uplinkport from utah bay 3
    [Documentation]     Verifying downlinkport mapping after removing one uplinkport

    Log    \nVAliating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[0]}    ${downlink_ports_utah[0]}    disabled    None

8_4 Verifying downlink to uplinkport mapping after removing all uplinkport from utah bay4
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport

    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[1]}    ${downlink_ports_utah[1]}    None    None

8_5 Editing LIG to 4 uplinksets with all ports
    [Documentation]    Editing LIG to 4 uplinksets with all ports
    Set Log Level    TRACE

    ${body}    Get From Dictionary    ${ligs}    lig1
    ${lig_body}    Create List    ${body}
    Log    \nEditing LIG to 4uplinksets with all ports   console=True
    ${resp}    Edit LIG    ${lig_body}
    Run Keyword If  '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    5min    10    ELSE    Fail    Log    \nfailed    console=True
    Log    \nPerforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

8_6 Verify Port Status and Interconnect state after editing LIG
    [Documentation]   Verify Port Status and Interconnect state after editing LIG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

8_7 Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}     disabled    None

##### Removing uplink ports in LI for hill and verify downlink to uplink port attributes #####
9_1 Remove the uplink port from uplink sets in LI page and then verify the values displayed in the UI for the downlink ports for HILL
    [Documentation]    Removing uplink ports from uplinkset in LI for hill
    Set Log Level    TRACE
    Log    \n\nEditing LI uplink ports     console=True
    ${l}    Get Length    ${US_Names_Hill}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${resp}    Edit uplinkset    ${US_Names_Hill[${x}]}    ${li_uplinksets['${li_uplinkports_hill[${x}]}']}    ${LI}
    \    ${task} =    Wait For Task    ${resp}    5min    15s
    \    Should Be Equal As Strings    ${task['taskState']}    Completed

9_2 Verify Port Status and Interconnect state after editing LI
    [Documentation]    Verify Port Status and Interconnect state after editing LI
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${LI_removedports_Hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

9_2 Verifying downlink to uplinkport mapping after removing all uplinkport from hill bay5
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport from hill bay5
    Log    \nValidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[0]}    ${downlink_ports_hill[0]}    None    None

9_3 Verifying downlink to uplinkport mapping after removing two uplinkport from hill bay6 and perform UFG
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport from hill bay6
    Log    \nValidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[1]}    ${downlink_ports_hill[1]}    disabled    None

    Log    \nPerforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

9_4 Verify Port Status and Interconnect state after UFG
    [Documentation]   Verify Port Status and Interconnect state after UFG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nVerifying IC state of ${IC_Hill[${x}]}    console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of hill${IC_Hill[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

9_5 Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}     disabled    None

##### Removing uplink ports in LI for utah #####
10_1 Remove the uplink port from uplink sets in LI page and then verify the values displayed in the UI for the downlink ports for Utah
    [Documentation]    Removing uplink ports from uplinkset in LI for utah
    Set Log Level    TRACE
    Log    \n\nEditing LI uplink ports     console=True
    ${l}    Get Length    ${US_Names_Utah}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${resp}    Edit uplinkset    ${US_Names_Utah[${x}]}    ${li_uplinksets['${li_uplinkports_utah[${x}]}']}    ${LI}
    \    ${task} =    Wait For Task    ${resp}    5min    15s
    \    Should Be Equal As Strings    ${task['taskState']}    Completed

10_2 Verify Port Status and Interconnect state after editing LI
    [Documentation]   Verify Port Status and Interconnect state after editing LI
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${LI_removedports_Utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

10_3 Verifying downlink to uplinkport mapping after removing all uplinkport from utah bay 3
    [Documentation]     Verifying downlinkport mapping after removing one uplinkport

    Log    \nValiating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[0]}    ${downlink_ports_utah[0]}    None    None

10_4 Verifying downlink to uplinkport mapping after removing one uplinkport from utah bay4 and Perform UFG
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport

    Log    \nValidating Trunk value and Downlinkport value     console=True
    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[1]}    ${downlink_ports_utah[1]}    disabled    None

    Log     \nperforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

10_5 Verify Port Status and Interconnect state after editing LIG
    [Documentation]   Verify Port Status and Interconnect state after editing LIG
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of utah    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nVerifying IC state of ${IC_Utah[${x}]}     console=True
    \    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    \    Log    \nVerifying port status of utah ${IC_Utah[${x}]}    console=True
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

10_6 Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    [Documentation]    Verifying downlink to uplink port mapping and trunk master value after adding uplink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}     disabled    None

##### Verify that for uplinkset with trunking enabled the master uplink port corresponding to a downlink port is displayed through REST Call ####

11_1 Verify that for uplinkset with trunking enabled the master uplink port corresponding to a downlink port is displayed through REST Call
    [Documentation]    Enable trunking in OV
    Set Log Level    TRACE

    ${body}    Get From Dictionary    ${edit_lig}    lig_trunking_enable
    ${lig_body}    Create List    ${body}
    ${resp}    Edit LIG    ${lig_body}
    Run Keyword If  '${resp[0]['status_code']}' == '202'    Wait For Task2    ${resp[0]}    5min    10    ELSE    Fail    Log    failed    console=True

    Log    \nperforming UFG    console=True
    Update Logical Interconnect from Group    ${LI_NAME}

11_2 checking TrunkGroup and delete existing
    [Documentation]     Checks the trunk group and deletes in the FC switch
    Set Log Level    TRACE
    ${show_command_output}    Check For Trunk Group in Brocade    ${FC_switch_details}   ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    No trunk groups available
    ${TG_count}    ${TG_data}    Get the number of Trunk Group in switch    ${show_command_output}
    :FOR    ${x}    IN RANGE    0    ${TG_count}
    \   @{lines}    Split String    ${TG_data[${x}]}    \n
    \   ${TG_number}    Evaluate    ${x}+1
    \   ${Ports_count}    ${Master_port}    ${Ports_in_TG}    Check For Ports in Trunk Group   ${lines}    ${TG_number}
    \   Delete trunk group and release ports    ${FC_switch_details}    ${Trunk_Commands}    ${Ports_in_TG}
    ${show_command_output}    Check For Trunk Group in Brocade   ${FC_switch_details}   ${Trunk_Commands}
    ${lines}    Get Lines Containing String    ${show_command_output}    ${no_trunk_message}
    ${line_count}    Get Line Count    ${lines}
    Pass Execution If    ${line_count} == 1    Trunk Groups deleted succeesfully    ELSE    FAIL

11_3 Enabling trunking on switch side
    [Documentation]    Enabling trunking on switch side
    Set Log Level    TRACE
    Log     \n\nEnabling trunk group in switch and Mapped uplink port value is Correct     console=True
    Create Trunk Group with ports    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment1']}
    Create Trunk Group with ports    ${FC_switch_details}    ${Trunk_Commands}    ${FC_switch_ports['segment2']}
    Sleep    600s
    Wait Until Keyword Succeeds    30 min    20s    Checking Master Port is Linked    ${US_details}

11_4 Getting master uplink port
    [Documentation]    Getting master uplink port
    Set Log Level    TRACE
    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}

11_5 Verify that for uplinkset with trunking enabled the master uplink port corresponding to a downlink port is displayed through REST Call
    [Documentation]   Verifying  Mapped uplink port is trunkmaster
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled    ${trunk_master_list[${x}]}

#####For uplinkset with trunking enabled disable the master uplink port and verify the value displayed through REST Call and then enable it back and verify the attributes.#####

12_1 For uplinkset with trunking enabled disable the master uplink port and verify the value displayed through REST Call and then enable it back and verify the attributes
    [Documentation]    Getting the master uplink port
    Set Log Level    TRACE

    Log    \nGetting Master uplink port    console=True
    ${trunk_master_list_initial}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list_initial}    console=True
    Set Global Variable  ${trunk_master_list_initial}    ${trunk_master_list_initial}

12_2 Disabling master uplink port in Hill bays
    [Documentation]    disabling master uplink port and verifying port status
    Set Log Level    TRACE

    Log    \nDisabling the master uplink port    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Set Suite Variable    ${uri}    ${uri}
    \    Log    \nDisabling the master uplink port    console=True
    \    Set To Dictionary    ${Disable_uplinkPort}    associatedUplinkSetUri    ${US_Names_Hill[${x}]}
    \    Set To Dictionary    ${Disable_uplinkPort}    enabled    False
    \    Set To Dictionary    ${Disable_uplinkPort}    portName    ${trunk_master_list_initial[${x}]}
    \    Set To Dictionary    ${Disable_uplinkPort}    interconnectName    ${IC_Hill[${x}]}
    \    ${Resp}    Update IC Port     ${IC_Hill[${x}]}   ${trunk_master_list_initial[${x}]}   ${Disable_uplinkPort}

    Log    \nVerifying IC state    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured

    Log    \nVerifying if Port is disabled    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Wait Until Keyword Succeeds    15 min    20s   Verify Port    ${uri}    ${trunk_master_list[${x}]}       portStatus=Unlinked    portStatusReason=NotLoggedIn


12_3 Getting the next master uplink port after disabling master uplink port
    [Documentation]    Getting the next master uplink port after disabling master uplink port
    Set Log Level    TRACE

    ${trunk_master_list}   Create List
    :FOR   ${port}  IN   @{US_details[0]['Act_ports']}
    \   ${portStatus}   ${trunkMaster}   ${enabled}   Get port details   ${ENC1}   ${US_details[0]['bay']}   ${port}
    \   Run Keyword If   '${portStatus}' != 'Linked'   Continue FOR LOOP    ELSE    Log    \nportislinked     console=True
    \   Run Keyword If  '${trunkMaster}'!='None'    Append To List    ${trunk_master_list}    ${trunkMaster}    ELSE    Log \nfetched next master port    console=True
    \   Exit For Loop

    :FOR   ${port}   IN   @{US_details[1]['Act_ports']}
    \   ${portStatus}   ${trunkMaster}   ${enabled}   Get port details   ${ENC1}   ${US_details[1]['bay']}  ${port}
    \   Run Keyword If   '${portStatus}' != 'Linked'   Continue FOR LOOP    ELSE    Log    \nportislinked     console=True
    \   Run Keyword If   '${trunkMaster}' !='None'   Append To List    ${trunk_master_list}    ${trunkMaster}
    \   Exit For Loop
    Log    \nTrunk master ports ${trunk_master_list}    console=True
    Set Suite Variable  ${trunk_master_list}    ${trunk_master_list}

12_4 Verifying downlink to uplinkport mapping after disabling master uplinkport
    [Documentation]    Verifying downlink to uplinkport mapping after disabling master uplinkport
    Set Log Level    TRACE

    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled    ${trunk_master_list[${x}]}

12_5 Enable master uplink port in bay 5 and bay 6
    [Documentation]    Enable master uplink port and verifying the master trunkports
    Set Log Level    TRACE

    Log    \nEnabling master uplinkport    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nDisabling the master uplink port    console=True

    \    Set To Dictionary    ${Disable_uplinkPort}    associatedUplinkSetUri    ${US_Names_Hill[${x}]}
    \    Set To Dictionary    ${Disable_uplinkPort}    enabled    True
    \    Set To Dictionary    ${Disable_uplinkPort}    portName    ${trunk_master_list_initial[${x}]}
    \    Set To Dictionary    ${Disable_uplinkPort}    interconnectName    ${IC_Hill[${x}]}
    \    ${Resp}    Update IC Port    ${IC_Hill[${x}]}    ${trunk_master_list_initial[${x}]}    ${Disable_uplinkPort}
    Log    \nVerifying IC state    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured

    Log    \nVerifying if Port is Enabled    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Wait Until Keyword Succeeds    15 min    20s   Verify Port    ${uri}    ${trunk_master_list_initial[${x}]}       portStatus=Linked    portStatusReason=LoggedIn


12_6 Getting the master uplink port
    [Documentation]    Getting the master uplink port
    Set Log Level    TRACE
    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True

12_7 Verifying downlink to uplinkport mapping after enabling master uplinkport
    [Documentation]    Verifying downlink to uplinkport mapping after enabling master uplinkport
    Set Log Level    TRACE

    Log    \nVerifying downlink to uplinkport mapping after enabling master uplinkport    console=True
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled    ${trunk_master_list[${x}]}


#### Disable the downlink port, then enable it back and verify the value displayed through REST Call for hill#####
13_1 Disable the downlink port, then enable it back and verify the value displayed through REST Call for hill
    [Documentation]    Disabling downlinkport of hill bay and verify IC state Port status
    Set Log Level    TRACE

    Log    \nDisabling downlink port of hill bays    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nDisabling downlink port of${IC_Hill[${x}]}    console=True
    \    Disable Enable Ports     ${downlink_ports_hill[${x}]}    ${uri}     update=False    portStatus=Unlinked    portStatusReason=NotLoggedIn

13_2 Verifying downlink to uplinkport mapping after disabling downlink port
    [Documentation]     Verifying downlinkport mapping after disabling
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    None    None


13_3 Enable downlinkport of hill bays and verify Ic state port status
    [Documentation]    Enable downlinkport of hill bays verify IC state and port status
    Set Log Level    TRACE

    Log    \nEnabling downlink port of hill bays    console=True
    ${len}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Hill[${x}]}
    \    Log    \nEnabling downlink port of ${IC_Hill[${x}]}    console=True
    \    Disable Enable Ports     ${downlink_ports_hill[${x}]}    ${uri}     update=True    portStatus=Linked    portStatusReason=LoggedIn

13_4 Getting master uplink port
    [Documentation]    Getting master uplink port
    Set Log Level    TRACE
    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}

13_5 Verifying downlink to uplinkport mapping after enabling downlink port
    [Documentation]     Verifying downlinkport mapping after enabling downlink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled    ${trunk_master_list[${x}]}


####Disable the downlink port, then enable it back and verify the value displayed through REST Call for utah#####
14_1 Disable the downlink port, then enable it back and verify the value displayed through REST Call for utah
    [Documentation]    Disabling downlinkport of utah bays and verify IC state port status
    Set Log Level    TRACE

    Log    \nDisabling downlink port of utah bays    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri}    Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nDisabling downlink port of ${IC_Utah[${x}]}    console=True
    \    Disable Enable Ports     ${downlink_ports_utah[${x}]}    ${uri}     update=False    portStatus=Unlinked    portStatusReason=NotLoggedIn


14_2 Verifying downlink to uplinkport mapping after disabling downlink port
    [Documentation]     Verifying downlinkport mapping after disabling
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    None    None

14_3 Enable downlinkport of utah bays
    [Documentation]    Enable downlinkport of utah bays and verify IC state port status
    Set Log Level    TRACE

    Log    \nEnabling downlink port of utah bays    console=True
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    ${uri} =        Get IC URI      ${IC_Utah[${x}]}
    \    Log    \nEnabling downlink port of ${IC_Utah[${x}]}    console=True
    \    Disable Enable Ports     ${downlink_ports_utah[${x}]}    ${uri}     update=True    portStatus=Linked    portStatusReason=LoggedIn


14_4 Verifying downlink to uplinkport mapping after enabling downlink port
    [Documentation]     Verifying downlinkport mapping after disabling downlink port
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None

Get IC uris
    [Documentation]     getting icm uris
    Set Log Level    TRACE
    ${uris_hill}    Create List
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${uri}    Get IC URI      ${IC_Hill[${x}]}
    \    Append To List    ${uris_hill}    ${uri}
    Set Suite Variable    ${IC_uris_hill}    ${uris_hill}

    ${uris_utah}    Create List
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    ${uri}    Get IC URI      ${IC_Utah[${x}]}
    \    Append To List    ${uris_utah}    ${uri}
    Set Suite Variable    ${IC_uris_utah}    ${uris_utah}

####power on/off ##########3
15_1 Power off and power on interconnect utah bay 3 & 4 then verify downlink attributes displayed through REST Call
    [Documentation]     power off and on for 3 and 4 bays then verify downlink attributes displayed through REST Call
    Set Log Level    TRACE
    ${length}    Get Length     ${Utah_bays}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Poweroff Interconnect    ${Enclosure_IP}    ${Enc_Username}    ${Utah_bays[${x}]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Maintenance
    \    Poweron Interconnect   ${Enclosure_IP}    ${Enc_Username}    ${Utah_bays[${x}]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Configure
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn

    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None


15_2 Poweroff and power on interconnect Hill bay 5 & 6,then verify downlink attributes displayed through REST Call
    [Documentation]    power off and on bay 5 and 6 then verify downlink attributes displayed through REST Call
    Set Log Level    TRACE

    ${length}    Get Length     ${Hill_bays}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Poweroff Interconnect    ${Enclosure_IP}    ${Enc_Username}    ${Hill_bays[${x}]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Maintenance
    \    Poweron Interconnect   ${Enclosure_IP}    ${Enc_Username}    ${Hill_bays[${x}]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Configure
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    \    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    \    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled   ${trunk_master_list[${x}]}

####### Test case Efuse on/off ##########
16_1 Perform an Efuse off and Efuse on then verify the values displayed through REST Call for utah 3 and 4
    [Documentation]    Efuse interconnect on and off then verify the values displayed through REST Call for utah 3 and 4
    Set Log Level    TRACE
    Log    \nPerforming efuseon/off of hill interconnect    console=True
    ${length}    Get Length     ${Utah_bays}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    OA CLI EFUSE    ${Enclosure_IP}    ${Enc_Username}    ${Enc_Password}    ${DEVICE}    ${Utah_bays[${x}]}    ${ACTION[0]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Absent
    \    OA CLI EFUSE    ${Enclosure_IP}    ${Enc_Username}    ${Enc_Password}    ${DEVICE}    ${Utah_bays[${x}]}    ${ACTION[1]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Configured
    \    Log    \n\nThe IC module ${IC_Utah[${x}]} is in Configure state    console=True
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None

16_2 Perform an Efuse off and Efuse on and then verify the values of downlink attributes displayed through REST Call for Hill 5,6
    [Documentation]    Perform an Efuse off and Efuse on and then verify the values of downlink attributes displayed through REST Call for Hill 5,6
    Set Log Level    TRACE

    Log    \nPerforming efuseon/off of hill interconnect    console=True
    ${length}    Get Length     ${Hill_bays}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    OA CLI EFUSE    ${Enclosure_IP}    ${Enc_Username}    ${Enc_Password}    ${DEVICE}    ${Hill_bays[${x}]}    ${ACTION[0]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Absent
    \    OA CLI EFUSE    ${Enclosure_IP}    ${Enc_Username}    ${Enc_Password}    ${DEVICE}    ${Hill_bays[${x}]}    ${ACTION[1]}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Configured
    \    Log    \n\nThe IC module ${IC_Hill[${x}]} is in Configured state    console=True
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    \    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    \    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlink_ports_hill[${x}]}    enabled   ${trunk_master_list[${x}]}


17_1 Verify IC state and Port status then Verify for uplinkset with trunking enabled the master uplink port corresponding to a downlink port is displayed through REST Call
    [Documentation]    checking downlink to uplinkport mapping as not None and trunk master value as true for Utah before performing backup
    Set Log Level    TRACE
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Configured
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn

    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None

17_2 Getting master uplink port
    [Documentation]    Getting master uplink port
    Set Log Level    TRACE
    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}

17_3 Verify IC state and Port status then verify for uplinkset with trunking enabled, the master uplink port corresponding to a downlink port is displayed through REST Call for Hill
    [Documentation]   Verifying  Mapped uplink port is trunkmaster value and trunkmaster is true
    Set Log Level    TRACE
    ${length}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Configured
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn

    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlinks_Hill[${x}]}    enabled    ${trunk_master_list[${x}]}

####### Backup And Restore ############
18_1 Perform a backup, restore of the current configuration, and see whether the attributes are displayed properly through REST call for hill and utah
    [Documentation]    power off server profile
    Set Log Level    TRACE
    Log    \nPowering Off servers    console=True
    Power off all servers    PressAndHold

18_2 Perform Backup Operation
    [Documentation]    perform Backup Operation
    Set Log Level    TRACE
    Log    \nCreating Backup    console=True
    Create Backup

18_3 Perform remove server profile
    [Documentation]    Perform remove server profile
    Set Log Level    TRACE
    Power OFF ALL Servers
    Remove ALL Server Profiles

18_4 Restore from Backup operation
    [Documentation]    Restore Backup Operation
    Set Log Level    TRACE
    Restore Appliance
    Sleep    5min
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Log  logged into appliance    console=True

18_5 Perform power on operation
    [Documentation]     power on servers
    ${length}    Get Length     ${server_profiles}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Power on server    ${server_profiles[${x}]['serverHardwareUri']}
    Sleep    10min

18_6 Verify IC state and Port status then Verify for uplinkset with trunking enabled the master uplink port corresponding to a downlink port is displayed through REST Call
    [Documentation]    checking downlink to uplinkport mapping as not None and trunk master value as false for Utah
    Set Log Level    TRACE
    ${len}    Get Length    ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${len}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_utah[${x}]}    Configured
    \    Verify Port Status     ${uplinkport_Utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_utah[${x}]}    ${IC_uris_utah[${x}]}    portStatus=Linked    portStatusReason=LoggedIn

    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[${x}]}    ${downlink_ports_utah[${x}]}    disabled    None

18_7 Getting master uplink port
    [Documentation]    Getting master uplink port
    Set Log Level    TRACE
    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True
    Set Suite Variable    ${trunk_master_list}    ${trunk_master_list}

18_8 Verify IC state and Port status then verify for uplinkset with trunking enabled, the master uplink port corresponding to a downlink port is displayed through REST Call for Hill
    [Documentation]   Verifying  Mapped uplink port is trunkmaster value and trunkmaster is true
    Set Log Level    TRACE
    ${length}    Get Length    ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Wait Until Keyword Succeeds    20 min    20s      IC reached state    ${IC_uris_hill[${x}]}    Configured
    \    Verify Port Status     ${uplinkport_Hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn
    \    Verify Port Status     ${downlink_ports_hill[${x}]}    ${IC_uris_hill[${x}]}    portStatus=Linked    portStatusReason=LoggedIn

    \    Log    \nValidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[${x}]}    ${downlinks_Hill[${x}]}    enabled    ${trunk_master_list[${x}]}

####### Multiple Server profile ############
19_1 Create Multiple server profile with same uplinkset
    [Documentation]    Creating server profile with same uplinkset to different downlink connections

    Log    \nPowering off the servers     console=True
    Power off all servers    PressAndHold
    Log     \nremoving server profiles    console=True
    Remove ALL Server Profiles    force=${True}
    Log    \nCreating server profiles    console=True
    ${resp}    Add Server Profiles from variable   ${multiple_server_profiles}
    ${l}    Get Length    ${resp}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    Run Keyword If  '${resp[${x}]['status_code']}' == '202'    Wait For Task2    ${resp[${x}]}    20m    1m    ELSE    Fail    Log    failed    console=True
    \    Power on server    ${multiple_server_profiles[${x}]['serverHardwareUri']}
    Sleep    10min

19_2 Verify IC State and Downlink Port status after creating server profile
    [Documentation]    Verify IC State and Downlink Port status after creating server profile
    Set Log Level    TRACE

    Log    \nVerifying IC state & port status of hill    console=True
    ${uri} =        Get IC URI      ${IC_Hill[0]}
    Log    \nVerifying IC state of ${IC_Hill[0]}    console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    Log    \nVerifying port status of hill${IC_Hill[0]}    console=True
    Verify Port Status     ${downlink_ports_hill[0]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn

    Log    \nVerifying IC state & port status of utah    console=True
    ${uri} =        Get IC URI      ${IC_Utah[0]}
    Log    \nVerifying IC state of ${IC_Utah[0]}     console=True
    Wait Until Keyword Succeeds    5 min    20s      IC reached state    ${uri}    Configured
    Log    \nVerifying port status of utah ${IC_Utah[0]}    console=True
    Verify Port Status     ${downlink_ports_utah[0]}    ${uri}    portStatus=Linked    portStatusReason=LoggedIn


19_3 Verifying downlink to uplinkport mapping after creating server profile with same uplinkset for utah
    [Documentation]     Verifying downlinkport mapping after removing all uplinkport
    ${length}    Get Length     ${IC_Utah}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Utah[0]}    ${downlink_ports_utah[0]}    disabled    None

19_4 Getting master uplink port
    [Documentation]    Getting master uplink port

    ${trunk_master_list}    Getting the Master Uplink Port    ${US_details}
    Log    \nTrunkmasterlist${trunk_master_list}    console=True

19_5 Verifying downlink to uplinkport mapping after creating server profile with same uplinkset for hill
    [Documentation]     Verifying downlinkport mapping after disabling
    Set Log Level    TRACE
    ${length}    Get Length     ${IC_Hill}
    :FOR    ${x}    IN RANGE    0    ${length}
    \    Log    \nVAlidating Trunk value and Downlinkport value     console=True
    \    Validate Downlink to Uplinkport Mapping and Trunk Master    ${IC_Hill[0]}    ${downlink_ports_hill[0]}    enabled   ${trunk_master_list[0]}