*** Settings ***
Documentation    Continuous Integration Tests for F748&F750 Feature
Resource    F748-F751-OVAConfig.txt
Library    FusionLibrary
Library    RoboGalaxyLibrary
Library    Collections
Library    String
Suite Setup    Load Test Data and Open Browser
Suite Teardown    Logout And Close All Browsers

*** Variables ***
${Switch_1}    15.199.229.61
${Switch_2}    15.199.229.62
${count}    0
${count_1}    0
${count_2}    0

*** Test Cases ***
Login to Appliance

    Set Log Level    TRACE
    Log Variables

    #PreRequisites: Import enclosure and create Network resources
    ${user} =  Get Data By Property    ${TestData.users}    name    Administrator
    Fusion UI Login to Appliance    ${user[0].name}

    Log to console    \nCleanup before execution
    Fusion UI delete LS    @{TestData.LSs}
    Fusion UI Delete All Appliance Server Profiles
    Fusion UI Remove All Enclosures
    Fusion UI Remove All Enclosure Groups
    Fusion UI Remove All Logical Interconnect Groups
    Fusion UI Delete All Appliance Networks
    Fusion UI Delete Logical Switch Groups    @{TestData.LSGS}

1.Create LIGs, EG & Add enclosure and validate FEX/VC interconnect state

    #Creating Ethernet Networks and FCoE Networks
    Fusion UI Create Ethernet Network    @{TestData.Ethernet_Networks}
    Fusion UI Create FCOE Network    @{TestData.FcoE_Networks}

    ${Return}   Fusion UI Create Logical Interconnect Group     @{TestData.ligs}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n ${TestData.ligs[0].name} has been created successfully!
    ...         ELSE    Fail

    ${Return}   Fusion UI Create Logical Interconnect Group     @{TestData.ligs_vc}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n ${TestData.ligs_vc[0].name} has been created successfully!
    ...         ELSE    Fail

    #Creating Enclosure Groups with FEX and VC LIGs
    ${Return}   Fusion UI Create Enclosure Group       @{TestData.encgroups}
    Run Keyword If    '${Return}' == 'True'    Log to console  \n enclosure groups has been created successfully!
    ...         ELSE    Fail

    #Importing enclosures
    ${Return}   Fusion UI Add Enclosure    @{TestData.enclosures}
    Run Keyword If    '${Return}' == 'True'    Log to console  \n enclosures are imported successfully!
    ...         ELSE    Fail

    #Check interconnect state and check for AddedWithErrors
    Check FEX interconnects state    Added with errors
    Check VC interconnects state

2.Create LSGs/LS page validation and validate FEX/VC interconnect state

    ${Return}       Fusion UI Create Logical Switch Groups    @{TestData.LSGS}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n ${TestData.LSGS[0].name} got created successfully!
    ...         ELSE    Fusion UI Create Logical Switch Groups    @{TestData.LSGS}

    #Create LS "LS-56" with 2 switches
    ${Return}   Fusion UI create LS     @{TestData.LSs}
    Run Keyword If    '${Return}' == 'True'     Log to console  \n ${TestData.LSs[0].name} got created successfully!
    ...         ELSE    Fail

    #Validating switch details got from LS page
    ${ls_data}    Fusion UI Show Ls    @{TestData.LSs_1}
    Log to console    \n\n LS Data:${ls_data}
    Validate Logical Switch Data    ${ls_data[1]}
    Validate ILS and Stacking Link    ${ls_data[1]}

    #Check interconnect state and check for Monitored
    Check FEX interconnects state    Monitored
    Check VC interconnects state

3.Chane LS state from Monitored to Managed

    ${state}   Fusion UI Edit LS    @{TestData.editLS}
    Run Keyword If    '${state}' == 'True'     Log to console    \n ls state has been changed to "Managed" successfully!
    ...         ELSE    Fail

    #Check interconnect state and check for Configured
    Check FEX interconnects state    Configured
    Check VC interconnects state

    ${Return}   Fusion UI Verify Interconnect UplinkPort View   @{TestData.uplinkports}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n verified the status of uplink ports successfully!
    ...         ELSE    Fail

4.Switch page validation

    ${len} =    Get Length    ${TestData.switches}
    :For    ${x}    IN Range   0   ${len}
    \    @{Return}   Fusion UI Get Switch State    ${TestData.switches[${x}].name}
    \    Log to console    \n Switch state and model - ${Return}
    \    Run Keyword If    '${Return[0]}' == 'Configured'    Log to console    \nSuccessfully verified the switch ${TestData.switches[${x}].name} state as ${Return[0]}    ELSE    Fail
    \    Run Keyword If    '${Return[1]}' == 'N5K-C56128P'    Log to console    \nSuccessfully verified the switch ${TestData.switches[${x}].name} Model as ${Return[1]}    ELSE    Fail
    Log to console    \n Verified the Switch Model and State successfully!

5.Verify ILS and ULS data

    # Verify ILS data in Logical Switch Page
    @{Return}    Fusion UI Get Ils Data    @{TestData.LS_1}
    Log to console    \n\n LS Data:@{Return}
    :For    ${ils}  IN    @{Return}
    \    Run Keyword If    '${ils}' == '${TestData.Ils[${count}].ils}'    Log to console  \nData ${ils} matched    ELSE    Fail
    \    ${count}=    Evaluate    ${count}+1

    # Verify ULS data in FEX Logical Interconnect
    @{Return}    Fusion UI Get UplinkSet Data    ${TestData.LogicalInterconnect_FEX[0].name}
    Log to console    \n\n LS Data:@{Return}
    :For    ${uls}  IN  @{Return}
    \    Run Keyword If    '${uls}' == '${TestData.ULS_FEX[${count_1}].name}'     Log to console  \nData ${uls} matched      ELSE    Fail
    \    ${count_1}=    Evaluate    ${count_1}+1

    # Verify ULS data in VC Logical Interconnect
    @{Return}    Fusion UI Get UplinkSet Data    ${TestData.LogicalInterconnect_VC[0].name}
    Log to console    \n\n LS Data:@{Return}
    :For    ${uls}    IN    @{Return}
    \    Run Keyword If    '${uls}' == '${TestData.ULS_VC[${count_2}].name}'     Log to console  \nData ${uls} matched      ELSE    Fail
    \    ${count_2}=    Evaluate    ${count_2}+1

6.Verify Vlan data in switch ports

    ${Return}    Fusion UI Get Switch Port Data    ${TestData.switches[0].name}
    Validate vlan data of switch port    ${Return}    ${TestData.Network_1}

    ${Return}    Fusion UI Get Switch Port Data    ${TestData.switches[1].name}
    Validate vlan data of switch port    ${Return}    ${TestData.Network}

7.Edit FEX ICM uplink port

    ${status}    Fusion UI Verify Fex Interconnect Uplinkport Editable     @{TestData.Interconnects_fex}
    Run Keyword If    '${status}' == 'True'    Log to console    \n Uplink port cannot be edited for FEX Interconnect    ELSE    Fail

    ${len} =    Get Length    ${TestData.switches}
    :For     ${i}    IN Range    0   ${len}
    \    ${status}    Fusion UI Switch Edit    ${TestData.switches[${i}].name}
    \    Run Keyword If    '${status}' == 'True'    Log to console    \n Edit option is available for switch ${TestData.switches[${i}].name}    ELSE    Fail

    #Enable/disable switch port
    ${status} =     Fusion UI Enable Switch Port    @{TestData.switches_1}
    Run Keyword If    '${status}' == 'Disabled' or '${status}' == 'None'    Log to console    \n${TestData.switches_1[0].name} port status is ${status}    ELSE    Fail

    Fusion UI Enable Switch Port    @{TestData.switches_1}

8.Remove Port Channel ID and Verify alert message in LI

    Open Connection And Log In      ${SSH_IP}   ${SSH_username}    ${SSH_Password}

    @{Return}    Fusion UI Get Switch State      ${TestData.switches[1].name}
    Log to console    \n switch state  @{Return}

    ${alert_msg}    Fusion UI Get Alert Message Li  ${TestData.LogicalInterconnect_FEX[0].name}
    Should Contain     ${alert_msg}     ${TestData.LogicalInterconnect_FEX[0].alert}

    ${status}    Fusion UI Logical Interconnects Reapply Configuration    @{TestData.LogicalInterconnect_FEX}
    Log to console    \n re-apply config is ${status}

    @{Return}    Fusion UI Get Switch State      ${TestData.switches[1].name}
    Log to console    \n switch state  @{Return}

    ${alert_msg}    Fusion UI Get Alert Message Li  ${TestData.LogicalInterconnect_FEX[0].name}
    Should Be Empty     ${alert_msg}

9.Disable switch port which connected to ULS

    ${status} =     Fusion UI Enable Switch Port    @{TestData.switches_port}
    Run Keyword If  '${status}' == 'Disabled' or '${status}' == 'None'  Log to console  \n${TestData.switches_port[0].name} port status is ${status}    ELSE    Fail

    Log to console  \n\n Validate Alert message in LS
    ${warning}    Fusion UI Get Ls Alert Msg    ${TestData.LS_warning[0].name}
    Should Contain     ${warning}     ${TestData.LS_warning[0].alert}

    ${status} =     Fusion UI Enable Switch Port    @{TestData.switches_port}
    Run Keyword If    '${status}' == 'Unlinked' or '${status}' == 'Linked' or '${status}' == 'None'    Log to console  \n${TestData.switches_port[0].name} port status is ${status}    ELSE    Fail

10.Validate FEX/VC Interconnect and server profile status after LS deletion

    #remove ULS and verify FEX ICM state
    ${Return}    Fusion Ui Edit Logical Interconnect Group    @{TestData.remove_ULS}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n Edited ${TestData.remove_ULS[0].name} successfully!
    ...         ELSE    Fail

    #Check interconnect state and check for Configured
    Check FEX interconnects state   Configured

    # Creating Server Profile and verify status of SP when LS in Monitored mode
    Fusion UI Create Server Profile    @{TestData.profiles}

    Fusion UI delete LS     @{TestData.LSs}

    #Check interconnect state and check for Added with errors
    Check FEX interconnects state    Added with errors
    Check VC interconnects state

    #verify switches are not exist
    Fusion UI Verify Switch Deleted    @{TestData.switches}

11.Verify available Switch types

    ${switch_type}      Fusion UI Get All Lsg Switch Type
    @{words} =  Split String    ${switch_type}  ,${SPACE}
    @{xml_data} =    Create List     Choose one\nCisco Nexus 50xx\nCisco Nexus 55xx\nCisco Nexus 56xx\nCisco Nexus 600x
    ${status} =     Should Be Equal As Strings      ${words[0]}     ${xml_data[0]}
    Run Keyword If    '${status}' == 'None'    Log to console  \n\n Verified switch category   ELSE    Fail

    Fusion UI Delete All Appliance Server Profiles
    Fusion UI Remove All Enclosures
    Fusion UI Remove All Enclosure Groups
    Fusion UI Remove All Logical Interconnect Groups
    Fusion UI Delete Logical Switch Groups    @{TestData.LSGS}

12.Add “inventory” state FEX ICM to “Configured”- LE update from group

    ${Return}   Fusion UI Create Logical Interconnect Group     @{TestData.ligs_1}
    Run Keyword If    '${Return}' == 'True'    Log to console    \n Added LIG ${TestData.ligs_1[0].name}     ELSE    Fail

    ${Return}   Fusion UI Create Enclosure Group       @{TestData.encgroups_1}
    Run Keyword If    '${Return}' == 'True'    Log to console    \n Added EG ${TestData.encgroups_1[0].name}     ELSE    Fail

    ${Return}   Fusion UI Add Enclosure     @{TestData.enclosures_1}
    Run Keyword If    '${Return}' == 'True'    Log to console    \n Imported Enclosure ${TestData.enclosures_1[0].name}     ELSE    Fail

    ${Return}       Fusion UI Create Logical Switch Groups    @{TestData.LSGS}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n ${TestData.LSGS[0].name} got created successfully!
    ...         ELSE    Fail

    ${Return}   Fusion UI create LS     @{TestData.LS_1}
    Run Keyword If    '${Return}' == 'True'     Log to console  \n ${TestData.LSs[0].name} got created successfully!
    ...         ELSE    Fail

    #Check interconnect state and check for Inventory
    Check FEX interconnects state   Inventory

    ${Return}   Fusion Ui Edit Logical Interconnect Group   @{TestData.ligs_2}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n Edited ${TestData.ligs_2[0].name} successfully!
    ...         ELSE    Fail

    ${Return}     Fusion UI Update Logical Interconnect From Group    @{TestData.li}
    Run Keyword If    '${Return}' == 'True'     Log to console    \n Completed update from group for LI: ${TestData.li[0].name} successfully!
    ...         ELSE    Fail

    #Check interconnect state and check for Configured
    Check FEX interconnects state    Configured

    Fusion UI Delete All Appliance Server Profiles
    Fusion UI Remove All Enclosures
    Fusion UI Remove All Enclosure Groups
    Fusion UI Remove All Logical Interconnect Groups
    Fusion UI Delete Logical Switch Groups    @{TestData.LSGS}

*** Keywords ***
Check FEX interconnects state
    [Arguments]     ${Operational_state}

    ${length} =     Get Length  ${TestData.Interconnects_fex}
    :For    ${index}    IN Range    0   ${length}
    \    ${IC_State}     Fusion UI Get Interconnect State    ${TestData.Interconnects_fex[${index}].name}
    \    Log to console  \nIC State : ${IC_State}
    \    Run Keyword If  '${IC_State}' == '${Operational_state}'    Log to console  \nInterconnect ${TestData.Interconnects_fex[${index}].name} is ${IC_State}
    \    ...         ELSE    Fail

Check VC interconnects state

    ${length} =     Get Length  ${TestData.Interconnects_vc}
    :For    ${index}    IN Range    0   ${length}
    \   ${IC_State}     Fusion UI Get Interconnect State    ${TestData.Interconnects_vc[${index}].name}
    \   Log to console  \nIC State : ${IC_State}
    \   Run Keyword If  '${IC_State}' == 'Configured'    Log to console  \nInterconnect ${TestData.Interconnects_vc[${index}].name} is in ${IC_State} state
    \   ...         ELSE    Fail

Validate Logical Switch Data

    [Arguments]    ${switch_data}
    ${Switch} =    Create List    ${switch_data[5]}   ${switch_data[6]}
    :For    ${switch_data}    IN     @{Switch}
    \   Run Keyword If    '${switch_data[0]}' == '${Switch_1}' or '${switch_data[0]}' == '${Switch_2}'    Log to console    \nSwitch IP is correct    ELSE    Fail
    \   Run Keyword If    '${switch_data[1]}' == '1' or '${switch_data[1]}' == '2'    Log to console    \vPC Member ID is ${switch_data[1]}    ELSE    Fail
    \   Run Keyword If    '${switch_data[2]}' == 'primary' or '${switch_data[2]}' == 'secondary'    Log to console  \nvPC Role is ${switch_data[2]}    ELSE    Fail
    \   Run Keyword If    '${switch_data[3]}' == 'Monitored'    Log to console  \nSwitch state is ${switch_data[3]}    ELSE    Fail
    \   Run Keyword If    '${switch_data[4]}' == 'N5K-C56128P'    Log to console  \nSwitch type is correct    ELSE    Fail
    \   Run Keyword If    '${switch_data[5]}' == '7.1(0)N1(1a)'    Log to console  \nFirmware version is correct    ELSE    Fail
    \   Log to console    \n verified switch ${switch_data[0]} details

Validate ILS and Stacking Link
    [Arguments]    ${switch_data}
    ${Switch} =    Create List    ${switch_data[7]}     ${switch_data[8]}
    Should Be Empty     ${Switch[1]}
    Log to console    \n verified switch ILS and Stacking link details

Validate vlan data of switch port

    [Arguments]     ${vlan_list}    ${xml_data}
    ${len} =    Get Length      ${xml_data}
    :For    ${i}    IN Range    0    ${len}
    \   ${status} =     List Should Contain Value    ${vlan_list}    ${xml_data[${i}].name}
    \   Run Keyword If  '${status}' == 'None'   Log to console  \n Verified ${xml_data[${i}].name} element in List  ELSE    Fail

Open Connection And Log In
    [Arguments]    ${SSH_HOST}=localhost   ${SSH_USER}=root    ${SSH_PASS}=hpvse1
    Open Connection    ${SSH_HOST}     timeout=180s
    Run Keyword If    '${SSH_PASS}' is ${null}      Set Suite variable  ${SSH_PASS}     Wpsthpvse1
    Login    ${SSH_USER}     ${SSH_PASS}
    Write    config
    Write    show port-channel usage
    ${output}=    Read    delay=0.15s
    Log to console    \n\n Command output ${Output}
    Close Connection
    Get port channel ID     ${Output}

Get port channel ID

    [Arguments]     ${port_channel}
    @{lines} =    Split To Lines    ${port_channel}
    :For    ${i}    IN      @{lines}
    \   Run Keyword If    '${i}' == ''    Continue For Loop
    \   @{words} =    Split String    ${i}
    \   Run Keyword If    '${words[0]}' == 'Used'     Get port channel number    @{words}    ELSE    Continue For Loop

Get port channel number

    [Arguments]     @{words}
    Log to console    \n argument value @{words}
    ${len} =    Get Length      ${words}
    Run Keyword If    '${words[${len}-1]}' > '1000'    Log to console    \n Port Channel ID to remove ${words[${len}-1]}
    Disable port channel    ${words[${len}-1]}

Disable port channel

    [Arguments]     ${channel_no}
    Open Connection     15.199.229.62     timeout=180s
    Login    admin    Wpsthpvse1
    Write    config
    Write    no interface port-channel ${channel_no}
    ${output} =    Read    delay=0.15s
    Log to console    \n\n Command output ${Output}
    Close Connection
