*** Settings ***
Variables           data_variables.py
# Resource			../../resources/resource.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library				Collections
Library				String
Library				json
Library				OperatingSystem
Library				SSHLibrary
Library		        Selenium2Library
Library             Validation_c7k_firmware_version

*** Variables ***
${SSH_PASS}          		hpvse1
#${APPLIANCE_IP}				10.10.0.161
${X-API-VERSION}			500
${li}						  SGH420HHY8-LIG_B1
${ExpectedErrorMsg1}=       Activate operation is not allowed at this state. One or more interconnects may not have been baselined to this firmware or all interconnects are already activated/activating to this baseline
${IP}                      192.168.144.130
${ICM_NAME1}						 SGH420HHY8, interconnect 1
${ICM_NAME2}						 SGH420HHY8, interconnect 2
${ICM_NAME3}						 SGH420HHY8, interconnect 3
${ICM_NAME4}						 SGH420HHY8, interconnect 4
${ICM_NAME5}						 SGH420HHY8, interconnect 5
${ICM_NAME6}						 SGH420HHY8, interconnect 6
${ICM_NAME7}						 SGH420HHY8, interconnect 7
${ICM_NAME8}						 SGH420HHY8, interconnect 8

${LE_name}             SGH420HHY8

${BAY1}                              1
${IP}                           192.168.144.130

#${ENC_ALERTS}                 

#${LI_ALERTS_MESSAGES}=    ['Update success for logical interconnect','Update started for logical interconnect','Staging started for logical interconnect','Stage success for logical interconnect','Activation started for logical interconnect','Activate success for logical interconnect']
${LI_NAME}                    \SGH420HHY8-LIG_B1 



 # LI_FC_INTERCONNECTS  
@{LI_FC_INTERCONNECTS}=    ${ICM_NAME5}
...                             ${ICM_NAME6}

@{LI_1010D_VC_INTERCONNECTS}=    ${ICM_NAME1}
...                              ${ICM_NAME2}

@{LI_OCHO_VC_INTERCONNECTS}=           ${ICM_NAME7}
...                               ${ICM_NAME8}


@{LI_SUPERSHAW_INTERCONNECTS}=       ${ICM_NAME3}
...                                  ${ICM_NAME4}


@{LI_ALL_VC_INTERCONNECTS}=      ${ICM_NAME1}
...                              ${ICM_NAME2}
...                              ${ICM_NAME3}
...                              ${ICM_NAME4}
...                              ${ICM_NAME5}
...                              ${ICM_NAME6}
...                              ${ICM_NAME7}
...                              ${ICM_NAME8}



*** Test Cases ***

        ###### Importing Enclosure  #######################


TC01 Create FC ,Ethernet networks ,Create EG and LIG 
    [Documentation]     " Create FC ,Ethernet networks ,Create EG and LIG"
    Log to Console    Testcase_ID: Create FC ,Ethernet networks ,Create EG and LIG

#    [Tags]   Performance  LIG-condition-LIG_6ICM_2FCUS

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}




    # Create FC Network1
    ${FCNW_ONE}=     Get Variable Value     ${fc_networks_NW1}
    Run Keyword If     ${FCNW_ONE} is not ${null}         Add FC Networks from variable      ${FCNW_ONE}
    Sleep   60
    # Create FC Network2
    ${FC_NETWORKTWO}=     Get Variable Value     ${fc_networks_NW2}
    Run Keyword If     ${FC_NETWORKTWO} is not ${null}        Add FC Networks from variable      ${FC_NETWORKTWO}
    Sleep    80
    ${ethernet_networks} =	Get Variable Value    ${eth_nw1_p}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${eth_nw1_p}
    ${ethernet_networks} =	Get Variable Value    ${eth_s_bb}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${eth_s_bb}


    ${body} =   Build LIG body       ${ligs['new_lig1']}
#    ${body} =   Build LIG body       ${ligs['native_lig1']}
    ${resp} =   Fusion Api Create LIG    ${body}
    Log To Console     RespoBheem ${resp}
    ${task} =   Wait For Task   ${resp}     30s   2s

    Fusion Api Logout Appliance

TC02 Create EG
#    [Tags]   Performance  Enclosure Group-condition-EG_6ICM_3US
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Add Enclosure Group from variable       ${enc_group}
    
    Fusion Api Logout Appliance


TC03 Create enclosure using Created EG
    [Tags]   Performance  Enclosure-condition-SE_6ICM_1S
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    
#    Add Enclosures from variable   ${enc_new_REAL_during_enc_Manage_MANUAL}
#    LE Creation By Add Enclosures from variable   ${enc_new_REAL_during_enc_Manage_MANUAL}
    LE Creation By Add Enclosures from variable   ${encs_f1541_new_downgrade}
    
   ######## Validation of ALERT messages on interconnects and LIs page  #########################
   # Upgrade for stage and Activation 
    Log to Console     Validation of ALERT messages on interconnects and LIs page
    ALERTS_VALIDATION_FOR_UPDATE_UPGARDE    ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${li}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS} 
     

    Fusion Api Logout Appliance


TC04 Create Server Profile

	Fusion Api Login Appliance     ${APPLIANCE_IP}     ${admin_credentials}
	
	Power off ALL servers
	#${server_profiles} =    Get Variable Value    ${server_profiles_2FC_Data_SP}
	Run Keyword If    ${server_profiles} is not ${null}     Add Server Profiles from variable     ${server_profiles_2FC_2ETH_BFS_Automation_SP}

*** Keywords ***
FIRMWARE_VERSION_VALIDATION_WITH_ICMS_AND_ONEVIEW
#    [Arguments]    ${LI_ALL_VC_INTERCONNECTS}
	######## Validation of  firmware versions #######################
	${resp} =   fusion api get interconnect
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length  ${ics}
    ${icm_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
     \    ${ic_name} =     Get from IC    ${ic}    name
    \    ${ic_bay_number} =    Split String   ${ic_name}   ","
	\    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
	\    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
	\    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
	\    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
	\    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}     ${firmwareVersion_upgrade}
	\    Log to Console    Validated the firmvare version 
	\    Log to Console    ${ic_name}
	\    ${icstate} =     Get From IC    ${ic}   state
	\    Should Be Equal As Strings    ${icstate}		Configured
	\    Log to Console    Validated the ICstate for 
	\    Log to Console    ${ic_name}
		

IC_STATE_VALIDATION_AFTER_FIRMWARE_UPDATE
#    [Arguments]     ${LI_ALL_VC_INTERCONNECTS}

	${resp} =   fusion api get interconnect
#    Log To Console          ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length    ${ics}
    ${icm_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
     \    ${ic_name} =     Get from IC    ${ic}    name

	\    ${ic} =     Get IC        ${ic_name}
	\    ${icstate} =     Get From IC    ${ic}   state
	\    Should Be Equal As Strings    ${icstate}     Configured
	\    Log to Console    Validated the Interconnect  state of ${ic_name}
	\    Log to Console    and its state is ${icstate}



ALERTS_VALIDATION_FOR_STAGING_ACTIVATION_UPGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



#    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
#    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_str}

#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_suc}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


#    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_str}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

#    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_succ}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########
	
	${STAGING_STARTED}      Catenate      ${LI_STAGING_STARTED}     ${LI_NAME}
	Log to Console     ${STAGING_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_STARTED}    Expected Error Message Not seen	

	${STAGING_SUCCESS}      Catenate      ${LI_STAGING_SUCCESS}     ${LI_NAME}
	Log to Console     ${STAGING_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_SUCCESS}    Expected Error Message Not seen

	${ACTIVATION_STARTED}      Catenate      ${LI_ACTIVATION_STARTED}     ${LI_NAME}
	Log to Console     ${ACTIVATION_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_STARTED}    Expected Error Message Not seen
	
	${ACTIVATION_SUCCESS}      Catenate      ${LI_ACTIVATION_SUCCESS}     ${LI_NAME}
	Log to Console     ${ACTIVATION_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_SUCCESS}    Expected Error Message Not seen

ALERTS_VALIDATION_FOR_UPDATE_UPGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



#    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
#    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_str}

#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_suc}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


#    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_str}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

#    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_succ}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########

	${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${UPDATE_STARTED}      Catenate      ${LI_UPADTE_STARTED}     ${LI_NAME}
    Log to Console     ${UPDATE_STARTED}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_STARTED}  Expected Error Message Not seen
	
    ${UPDATE_SUCCESS}      Catenate      ${LI_UPDATE_SUCCESS}     ${LI_NAME}
    Log to Console     ${UPDATE_SUCCESS}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_SUCCESS}    Expected Error Message Not seen
	
	
	
ALERTS_VALIDATION_FOR_STAGING_ACTIVATION_DOWNGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${ICM_Alert1_stg_str_end}     ${ICM_Alert1_stg_star_1010D_end}    ${ICM_Alert1_stg_succ_end}   ${ICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${ICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########
	
	${STAGING_STARTED}      Catenate      ${LI_STAGING_STARTED}     ${LI_NAME}
	Log to Console     ${STAGING_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_STARTED}    Expected Error Message Not seen	

	${STAGING_SUCCESS}      Catenate      ${LI_STAGING_SUCCESS}     ${LI_NAME}
	Log to Console     ${STAGING_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_SUCCESS}    Expected Error Message Not seen

	${ACTIVATION_STARTED}      Catenate      ${LI_ACTIVATION_STARTED}     ${LI_NAME}
	Log to Console     ${ACTIVATION_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_STARTED}    Expected Error Message Not seen
	
	${ACTIVATION_SUCCESS}      Catenate      ${LI_ACTIVATION_SUCCESS}     ${LI_NAME}
	Log to Console     ${ACTIVATION_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_SUCCESS}    Expected Error Message Not seen
	

ALERTS_VALIDATION_FOR_UPDATE_DOWNGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${ICM_Alert1_stg_str_end}     ${ICM_Alert1_stg_star_1010D_end}    ${ICM_Alert1_stg_succ_end}   ${ICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${ICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########

	${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${UPDATE_STARTED}      Catenate      ${LI_UPADTE_STARTED}     ${LI_NAME}
    Log to Console     ${UPDATE_STARTED}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_STARTED}  Expected Error Message Not seen
	
    ${UPDATE_SUCCESS}      Catenate      ${LI_UPDATE_SUCCESS}     ${LI_NAME}
    Log to Console     ${UPDATE_SUCCESS}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_SUCCESS}    Expected Error Message Not seen
	
	
Get Li Names
    ${resp} =    Fusion Api Get Li
    Log To COnsole          ${resp}
    ${lis} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length  ${lis}
    ${li_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${li} =     Get From List   ${lis}    ${x}
    \    ${li_name} =     Get from IC    ${li}    name
    \    Append To List   ${li_list}   ${li_name}
    Log to Console	  \n\nLI Names : ${li_list}\n
    [return]    ${li_list}

Get Li Name
    ${resp} =   Fusion Api Get Li
    Log To Console           ${resp}
    ${Li_name} =    Get From Dictionary  ${resp['members'][0]}  name
    Log to Console   \n\nLI Name: ${Li_name}\n
    Log To Console      ${Li_name}
    [return]    ${Li_name}

	
#######################################
# COMMON KEYWORDS
#######################################
Get Ethernet URI
	[Arguments]    ${net}
	${resp} =     Fusion Api Get Ethernet Networks    param=?filter="'name'=='${net}'"
	${uri} =     Get From Dictionary     ${resp['members'][0]}     uri
	[Return]      ${uri}
	

Build LIG body
	[Arguments]    ${xlig}
	${xlig} =     Copy Dictionary    ${xlig}
	${uplinkSets} =      Copy List    ${xlig['uplinkSets']}
	${l} =    Get Length    ${uplinkSets}

	:FOR  ${x}  IN RANGE   0   ${l}
	\    ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}    networkType
	\    ${networks} =    Get From Dictionary    ${uplinkSets[${x}]}    networkUris
	\    Run Keyword If     '${networkType}' == 'Ethernet'    Continue For Loop
	\   ${networkUris} =    Get FC Uris   ${networks}
	\    Set to dictionary   ${uplinkSets[${x}]}   networkUris   ${networkUris}

	:FOR   ${x}   IN RANGE   0   ${l}
	\   ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}   networkType
	\   ${networks} =    Get From Dictionary   ${uplinkSets[${x}]}   networkUris
	\   Run Keyword If  '${networkType}' == 'FibreChannel'    Continue For Loop
	\   ${networkUris} =    Get FCoE Uris   ${networks}
	\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
	\   Set to dictionary  ${uplinkSets[${x}]}  networkUris  ${networkUris}
	#### Adding here fo test native but not working 
#	\   ${nativeNetworks} =    Get From Dictionary   ${uplinkSets[${x}]}   nativeNetworkUri
#	\   ${nativeNetworks} =   Get Ethernet URIs   ${nativeNetworks}
#	\   Set to dictionary  ${uplinkSets[${x}]}  nativeNetworkUri  ${nativeNetworks}

	${name} =                       Get Variable Value  ${xlig['name']}
#	${nativeNetworkUri_b} =           Get Variable Value     ${xlig['nativeNetworkUri']}
#	${nativeNetworkUri} =       Get Ethernet URI          ${nativeNetworkUri_b}
	${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
	${enclosureType} =              Get Variable Value  ${xlig['enclosureType']}
	${ethernetSettings} =           Get Variable Value  ${xlig['ethernetSettings']}
	${fcoeSettings} =               Get Variable Value  ${xlig['fcoeSettings']}
	${interconnectBaySet} =         Get Variable Value  ${xlig['interconnectBaySet']}
	${interconnectMapTemplate} =    Get Variable Value  ${xlig['interconnectMapTemplate']}
	${redundancyType} =             Get Variable Value  ${xlig['redundancyType']}
	${stackingMode} =               Get Variable Value  ${xlig['stackingMode']}
	${telemetryConfiguration} =     Get Variable Value  ${xlig['telemetryConfiguration']}
	${snmpConfiguration} =          Get Variable Value  ${xlig['snmpConfiguration']}
	${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
	${type} =           Get Variable Value  ${xlig['type']}
	#${uplinkSets} =                 Get Variable Value  ${xlig['uplinkSets']}


	${body} =     fusion_api_create_lig_payload    name=${name}
#	...                                         type= ${nativeNetworkUri}
	...                                         enclosureIndexes=${enclosureIndexes}
	...                                         enclosureType=${enclosureType}
	...                                         ethernetSettings=${ethernetSettings}
	...                                         fcoeSettings=${fcoeSettings}
	...                                         interconnectBaySet=${interconnectBaySet}
	...                                         interconnectMapTemplate=${interconnectMapTemplate}
	...                                         redundancyType=${redundancyType}
	...                                         stackingMode=${stackingMode}
	...                                         telemetryConfiguration=${telemetryConfiguration}
	...                                         snmpConfiguration=${snmpConfiguration}
	...                                         uplinkSets=${uplinkSets}
    [Return]    ${body}
    

NativeBuild LIG body
	[Arguments]    ${xlig}
	${xlig} =     Copy Dictionary    ${xlig}
	${uplinkSets} =      Copy List    ${xlig['uplinkSets']}
	${l} =    Get Length    ${uplinkSets}

	:FOR  ${x}  IN RANGE   0   ${l}
	\    ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}    networkType
	\    ${networks} =    Get From Dictionary    ${uplinkSets[${x}]}    networkUris
	\    Run Keyword If     '${networkType}' == 'Ethernet'    Continue For Loop
	\   ${networkUris} =    Get FC Uris   ${networks}
	\    Set to dictionary   ${uplinkSets[${x}]}   networkUris   ${networkUris}

	:FOR   ${x}   IN RANGE   0   ${l}
	\   ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}   networkType
	\   ${networks} =    Get From Dictionary   ${uplinkSets[${x}]}   networkUris
	\   Run Keyword If  '${networkType}' == 'FibreChannel'    Continue For Loop
	\   ${networkUris} =    Get FCoE Uris   ${networks}
	\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
	\   Set to dictionary  ${uplinkSets[${x}]}  networkUris  ${networkUris}
	#### Adding here fo test native but not working 
	\   ${nativeNetworks} =    Get From Dictionary   ${uplinkSets[${x}]}   nativeNetworkUri
	\   ${nativeNetworks} =   Get Ethernet URIs   ${nativeNetworks}
	\   Set to dictionary  ${uplinkSets[${x}]}  nativeNetworkUri  ${nativeNetworks}

	${name} =                       Get Variable Value  ${xlig['name']}
#	${nativeNetworkUri_b} =           Get Variable Value     ${xlig['nativeNetworkUri']}
#	${nativeNetworkUri} =       Get Ethernet URI          ${nativeNetworkUri_b}
	${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
	${enclosureType} =              Get Variable Value  ${xlig['enclosureType']}
	${ethernetSettings} =           Get Variable Value  ${xlig['ethernetSettings']}
	${fcoeSettings} =               Get Variable Value  ${xlig['fcoeSettings']}
	${interconnectBaySet} =         Get Variable Value  ${xlig['interconnectBaySet']}
	${interconnectMapTemplate} =    Get Variable Value  ${xlig['interconnectMapTemplate']}
	${redundancyType} =             Get Variable Value  ${xlig['redundancyType']}
	${stackingMode} =               Get Variable Value  ${xlig['stackingMode']}
	${telemetryConfiguration} =     Get Variable Value  ${xlig['telemetryConfiguration']}
	${snmpConfiguration} =          Get Variable Value  ${xlig['snmpConfiguration']}
	${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
	${type} =           Get Variable Value  ${xlig['type']}
	#${uplinkSets} =                 Get Variable Value  ${xlig['uplinkSets']}


	${body} =     fusion_api_create_lig_payload    name=${name}
#	...                                         type= ${nativeNetworkUri}
	...                                         enclosureIndexes=${enclosureIndexes}
	...                                         enclosureType=${enclosureType}
	...                                         ethernetSettings=${ethernetSettings}
	...                                         fcoeSettings=${fcoeSettings}
	...                                         interconnectBaySet=${interconnectBaySet}
	...                                         interconnectMapTemplate=${interconnectMapTemplate}
	...                                         redundancyType=${redundancyType}
	...                                         stackingMode=${stackingMode}
	...                                         telemetryConfiguration=${telemetryConfiguration}
	...                                         snmpConfiguration=${snmpConfiguration}
	...                                         uplinkSets=${uplinkSets}
    [Return]    ${body}
    
Remove Enclosure
    [Documentation]  Remove the enclosure by name
    [Arguments]     ${name}
    ${uri} = 	Get Enclosure URI    ${name}
    ${resp} = 	   Fusion Api Remove Enclosure		uri=${uri}
	${task} =	   Wait For Task 	${resp} 	300s	10s


Get Enclosure Group URI
	[Arguments]     ${eg}
	${resp} =      Fusion Api Get Enclosure Groups	
	${l} =     Get Length      ${resp['members']}
	:FOR  ${x}     IN RANGE      0   ${l}
	\   Run Keyword If    '${resp['members'][${x}]['name']}' != '${eg}'      Continue For Loop
	\   ${uri} =       Get From Dictionary      ${resp['members'][${x}]}	uri	
	[Return]     ${uri}
	

BBAdd Enclosures from variable
    [Documentation]      Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]       ${encs}
    Log to console and logfile      Adding ENCLOSURES
    ${resplist} =   Create List
    :FOR  ${enc}  IN  @{encs}
	\    ${encuri} =     Get From Dictionary    ${enc}     enclosureGroupUri
	\    ${encuri} =      Common URI Lookup by name    ${encuri}
	\    Set to dictionary    ${enc}    enclosureGroupUri     ${encuri}
	\    ${resp} =   Fusion Api Add Enclosure    ${enc}
	\    Append To List    ${resplist}    ${resp}
	${tasklist} =   Create List
	:FOR  ${resp}  IN  @{resplist}
	\    ${task} =   Wait For Task   ${resp}   35min    1s
	\    Append To List    ${tasklist}     ${task}
	[return]     ${tasklist}


LE Creation By Add Enclosures from variable
	[Documentation]      Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]       ${encs}
	Log to console and logfile      Adding ENCLOSURES
	${resplist} =   Create List
	:FOR  ${enc}  IN  @{encs}
	\    ${encuri} =     Get From Dictionary    ${enc}     enclosureGroupUri
	\    ${encuri} =      Common URI Lookup by name    ${encuri}
	\    Set to dictionary    ${enc}    enclosureGroupUri     ${encuri}
	\    ${resp} =   Fusion Api Add Enclosure    ${enc}
	\    Append To List    ${resplist}    ${resp}
	${tasklist} =   Create List
	:FOR  ${resp}  IN  @{resplist}
	\    ${task} =   Wait For Task   ${resp}   99min    1s
	\    Append To List    ${tasklist}     ${task}
	[return]     ${tasklist}


	