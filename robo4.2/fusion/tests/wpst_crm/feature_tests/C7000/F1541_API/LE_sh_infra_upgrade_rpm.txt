*** Settings ***
Documentation		Feature Test: OVF3131 F1541 
...                 VCFC  Firmware Update test to include all interconnect types: Ethernet, FC interconnects
Variables			data_variables.py
# Resource			../../resources/resource.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library				Collections
Library				String
Library				json
Library				OperatingSystem
Library				SSHLibrary
Library		        Selenium2Library
Library             Validation_c7k_firmware_version

*** Variables ***
${SSH_PASS}          		hpvse1
${APPLIANCE_IP}				10.10.5.139
${X-API-VERSION}			500
@{LI_FC_INTERCONNECTS}=    ${ICM_NAME5}
...                             ${ICM_NAME6}

@{LI_1010D_VC_INTERCONNECTS}=    ${ICM_NAME1}
...                              ${ICM_NAME2}

@{LI_OCHO_VC_INTERCONNECTS}=           ${ICM_NAME7}
...                               ${ICM_NAME8}


@{LI_SUPERSHAW_INTERCONNECTS}=       ${ICM_NAME3}
...                                  ${ICM_NAME4}


@{LI_ALL_VC_INTERCONNECTS}=      ${ICM_NAME1}
...                              ${ICM_NAME2}
...                              ${ICM_NAME3}
...                              ${ICM_NAME4}
...                              ${ICM_NAME5}
...                              ${ICM_NAME6}
...                              ${ICM_NAME7}
...                              ${ICM_NAME8}


*** Test Cases ***

################# Verify the firmware Update  On SharedInfrastructure Only without forceInstallFirmware flag as true ###############

TC01 Firmware Update of VCFC module On SharedInfrastructure Only on LE
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    # Power off the servers
    Power off ALL servers
#    sleep    200s
    
#	${del_resp}=    fusion_api_delete_alert    /rest/alerts
  #####Validation of IC state of Interconnects 
    Log to Console   Validation of IC state of Interconnects 
    IC_STATE_VALIDATION_AFTER_FIRMWARE_UPDATE

	${resp} =     fusion_api_get_logical_enclosure 
	${LE_name} =    Get From Dictionary  ${resp['members'][0]}  name    
   
    ${headers} =   Get From Dictionary     ${resp}  headers
	${le}=    Get LE    ${LE_name}
	Log to Console       ${le}
	${le_uri}=    Get from LE    ${le}    uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}
	
	${body}=    Build LE SPP Body VCFC    ${LE_UPGRADE_SHARED_INFRA_SCEXE_RPM}

	${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}   headers=${headers}
	Log to Console          ${resp}
	
	${task} =    Wait For Task    ${resp}    185min    1s
	
	${valDict} =        Create Dictionary       status_code=${200}
	...                                 taskState=Completed
	
	Validate Response    ${task}    ${valDict}
	Log to Console       \n LE Firmware update with shared infrastructure completed
	

    LE_STATE_VALIDATION

	#####Validation of oneview firmware version with icms
	Log to Console    Validation of oneview firmware version with icms
    FIRMWARE_VERSION_VALIDATION_WITH_ICMS_AND_ONEVIEW
    
    #####Validation of IC state of Interconnects 
    Log to Console   Validation of IC state of Interconnects 
    IC_STATE_VALIDATION_AFTER_FIRMWARE_UPDATE

   ######## Validation of ALERT messages on interconnects and LIs page #########################
    # Upgrade for stage and Activation 
   Log to Console     Validation of ALERT messages on interconnects and LIs page
   ALERTS_VALIDATION_FOR_UPDATE_UPGARDE    ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${li}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}   

    Fusion Api Logout Appliance
    


*** Keywords ***

LE_STATE_VALIDATION
#    [Arguments]   
	${resp} =     fusion_api_get_logical_enclosure 
	${LE_name} =    Get From Dictionary  ${resp['members'][0]}  name
    ${le}=    Get LE    ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent
    Log to Console    \nValidated the LE state of ${LE_name}
	Log to Console    \nand its state is ${le_state}

FIRMWARE_VERSION_VALIDATION_WITH_ICMS_AND_ONEVIEW
#    [Arguments]    ${LI_ALL_VC_INTERCONNECTS}
	######## Validation of  firmware versions #######################
	${resp} =   fusion api get interconnect
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length  ${ics}
    ${icm_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
     \    ${ic_name} =     Get from IC    ${ic}    name
    \    ${ic_bay_number} =    Split String   ${ic_name}   ","
	\    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
	\    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
	\    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
	\    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
	\    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}     ${firmwareVersion_upgrade}
	\    Log to Console    Validated the firmvare version 
	\    Log to Console    ${ic_name}
	\    ${icstate} =     Get From IC    ${ic}   state
	\    Should Be Equal As Strings    ${icstate}		Configured
	\    Log to Console    Validated the ICstate for 
	\    Log to Console    ${ic_name}
		

IC_STATE_VALIDATION_AFTER_FIRMWARE_UPDATE
#    [Arguments]     ${LI_ALL_VC_INTERCONNECTS}

	${resp} =   fusion api get interconnect
#    Log To Console          ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length    ${ics}
    ${icm_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${ic} =     Get From List   ${ics}    ${x}
     \    ${ic_name} =     Get from IC    ${ic}    name

	\    ${ic} =     Get IC        ${ic_name}
	\    ${icstate} =     Get From IC    ${ic}   state
	\    Should Be Equal As Strings    ${icstate}     Configured
	\    Log to Console    Validated the Interconnect state of ${ic_name}
	\    Log to Console    and its state is ${icstate}



ALERTS_VALIDATION_FOR_STAGING_ACTIVATION_UPGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



#    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
#    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_str}

#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_suc}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


#    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_str}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

#    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_succ}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########
	
	${STAGING_STARTED}      Catenate      ${LI_STAGING_STARTED}     ${LI_NAME}
	Log to Console     ${STAGING_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_STARTED}    Expected Error Message Not seen	

	${STAGING_SUCCESS}      Catenate      ${LI_STAGING_SUCCESS}     ${LI_NAME}
	Log to Console     ${STAGING_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_SUCCESS}    Expected Error Message Not seen

	${ACTIVATION_STARTED}      Catenate      ${LI_ACTIVATION_STARTED}     ${LI_NAME}
	Log to Console     ${ACTIVATION_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_STARTED}    Expected Error Message Not seen
	
	${ACTIVATION_SUCCESS}      Catenate      ${LI_ACTIVATION_SUCCESS}     ${LI_NAME}
	Log to Console     ${ACTIVATION_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_SUCCESS}    Expected Error Message Not seen

ALERTS_VALIDATION_FOR_UPDATE_UPGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${HICM_Alert1_stg_str_end}     ${HICM_Alert1_stg_star_1010D_end}    ${HICM_Alert1_stg_succ_end}   ${HICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${HICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



#    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
#    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_str}

#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_stg_suc}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


#    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_str}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

#    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_OCHO_succ_end}
#    \    Log to Console    ${Al_act_succ}
#    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########

	${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${UPDATE_STARTED}      Catenate      ${LI_UPADTE_STARTED}     ${LI_NAME}
    Log to Console     ${UPDATE_STARTED}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_STARTED}  Expected Error Message Not seen
	
    ${UPDATE_SUCCESS}      Catenate      ${LI_UPDATE_SUCCESS}     ${LI_NAME}
    Log to Console     ${UPDATE_SUCCESS}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_SUCCESS}    Expected Error Message Not seen
	
	
	
ALERTS_VALIDATION_FOR_STAGING_ACTIVATION_DOWNGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${ICM_Alert1_stg_str_end}     ${ICM_Alert1_stg_star_1010D_end}    ${ICM_Alert1_stg_succ_end}   ${ICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${ICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########
	
	${STAGING_STARTED}      Catenate      ${LI_STAGING_STARTED}     ${LI_NAME}
	Log to Console     ${STAGING_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_STARTED}    Expected Error Message Not seen	

	${STAGING_SUCCESS}      Catenate      ${LI_STAGING_SUCCESS}     ${LI_NAME}
	Log to Console     ${STAGING_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${STAGING_SUCCESS}    Expected Error Message Not seen

	${ACTIVATION_STARTED}      Catenate      ${LI_ACTIVATION_STARTED}     ${LI_NAME}
	Log to Console     ${ACTIVATION_STARTED}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_STARTED}    Expected Error Message Not seen
	
	${ACTIVATION_SUCCESS}      Catenate      ${LI_ACTIVATION_SUCCESS}     ${LI_NAME}
	Log to Console     ${ACTIVATION_SUCCESS}
	Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${ACTIVATION_SUCCESS}    Expected Error Message Not seen
	

ALERTS_VALIDATION_FOR_UPDATE_DOWNGARDE
    [Arguments]        ${LI_FC_INTERCONNECTS}    ${LI_OCHO_VC_INTERCONNECTS}   ${LI_SUPERSHAW_INTERCONNECTS}    ${LI_1010D_VC_INTERCONNECTS}   ${ICM_Alert1_stg_str_end}     ${ICM_Alert1_stg_star_1010D_end}    ${ICM_Alert1_stg_succ_end}   ${ICM_Alert1_act_OCHO_succ_end}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}    ${LI_UPADTE_STARTED}    ${LI_UPDATE_SUCCESS}    ${LI_NAME}   ${ICM_Alert1_stg_star_2_end}   ${LI_STAGING_STARTED}     ${LI_NAME}    ${LI_STAGING_SUCCESS}    ${LI_ACTIVATION_STARTED}    ${LI_ACTIVATION_SUCCESS}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
	${LI_NAME}=    Get Li Name
    : FOR    ${BICM_NAME}    IN    @{LI_FC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_OCHO_VC_INTERCONNECTS}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_OCHO_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



    : FOR    ${BICM_NAME}    IN    @{LI_1010D_VC_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1010D_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_SUPERSHAW_INTERCONNECTS}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}

    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    ###### Validates the firmware alert messages on Logical Interconnects ##########

	${alerts} =    fusion_api_get_alerts    /rest/alerts
    ${UPDATE_STARTED}      Catenate      ${LI_UPADTE_STARTED}     ${LI_NAME}
    Log to Console     ${UPDATE_STARTED}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_STARTED}  Expected Error Message Not seen
	
    ${UPDATE_SUCCESS}      Catenate      ${LI_UPDATE_SUCCESS}     ${LI_NAME}
    Log to Console     ${UPDATE_SUCCESS}
    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${UPDATE_SUCCESS}    Expected Error Message Not seen
	
	
Get Li Names
    ${resp} =    Fusion Api Get Li
    Log           ${resp}
    ${lis} =     Get From Dictionary     ${resp}    members
    ${l} =      Get Length  ${lis}
    ${li_list} =    Create List
    :FOR  ${x}  IN RANGE    0     ${l}
    \    ${li} =     Get From List   ${lis}    ${x}
    \    ${li_name} =     Get from IC    ${li}    name
    \    Append To List   ${li_list}   ${li_name}
    Log to Console	  \n\nLI Names : ${li_list}\n
    [return]    ${li_list}

Get Li Name
    ${resp} =   Fusion Api Get Li
    Log To Console           ${resp}
    ${Li_name} =    Get From Dictionary  ${resp['members'][0]}  name
    Log to Console   \n\nLI Name: ${Li_name}\n
    Log To Console      ${Li_name}
    [return]    ${Li_name}
    
Log into Fusion appliance as Administrator
	${user} =  Get Data By Property  ${TestData.users}  name  Administrator
	Fusion UI Login to Appliance   ${user[0].name}
	
Validate Interconnects 
	[Arguments]		${ICM_NAME}		${ltlv}		${rtlv}		${explldp}
	${ic} =     Get IC		${ICM_NAME}
	${enableRichTLV} =     		Get From IC    ${ic}   enableRichTLV
	${enableTaggedLldp} =     	Get From IC    ${ic}   enableTaggedLldp
	${lldpip} =				Get from IC 	${ic}		lldpIpAddress
	Should be Equal as Strings    ${enableRichTLV}		${rtlv}
	Should be Equal as Strings    ${enableTaggedLldp}		${ltlv}
	Should be Equal as Strings    ${lldpip}		${explldp}
	
	
KC Load Test Data
    Set Log Level    TRACE
	Load Test Data  ${DataFile}
	
Load Test Data and Open Browser
    Set Log Level    TRACE
	Load Test Data  ${DataFile}
    Log Variables
	Open Browser  ${ApplianceUrl}  ${Browser}
	Maximize Browser Window
	Set Selenium Speed  ${SeleniumSpeed}

Get PortId from Ports
	[Arguments]		${downlink_edit}
	#Port number Eg: d2 
	${ic} =     Get IC			${ICM_NAME}		
	${uri} =     Get From IC    ${ic}   uri
	Log				${uri}	
	${interconnect} =			fusion_api_get_interconnect_ports			uri=${uri}				param='\ports'
	${ports} = 	Get From Dictionary		${interconnect}		ports
	${port_number} =           Get Variable Value  ${downlink_edit['portName']}
	Log 		${ports}	
	${l} = 	Get Length	${ports}
	Log		${l}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \	Log			${port_list}
    \	${portName} =	Get From Dictionary		${port_list}		portName
    \	Run Keyword If 	'${portName}' != '${port_number}'		Continue For Loop
    \	${port_id} =	Get From Dictionary		${port_list}		portId
       
    [Return]	${port_id}		
    Log			${port_id}
    
Get PortStatus from Ports
	[Arguments]		${downlink_edit}
	#Port number Eg: d2 - Fetched from datafile 
	${ic} =     Get IC			${ICM_NAME}		
	${uri} =     Get From IC    ${ic}   uri
	Log				${uri}	
	${interconnect} =			fusion_api_get_interconnect_ports			uri=${uri}				param='\ports'
	${ports} = 	Get From Dictionary		${interconnect}		ports
	${port_number} =           Get Variable Value  ${downlink_edit['portName']}
	Log 		${ports}	
	${l} = 	Get Length	${ports}
	Log		${l}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \	Log			${port_list}
    \	${portName} =	Get From Dictionary		${port_list}		portName
    \	Run Keyword If 	'${portName}' != '${port_number}'		Continue For Loop
    \	${port_status} =	Get from Dictionary		${port_list}		portHealthStatus    
    [Return]	${port_status}		
    Log			${port_status}
      
    
Build Ports Edit Body
	[Arguments]		${port_id}			${downlink_edit}
	${interconnectName} =           Get Variable Value  ${downlink_edit['interconnectName']}
	${enabled} =           Get Variable Value  ${downlink_edit['enabled']}
	${portName} =           Get Variable Value  ${downlink_edit['portName']}
	${type} =           Get Variable Value  ${downlink_edit['type']}
	${edit_body} =	Create Dictionary 	interconnectName=${interconnectName}
	...								enabled=${enabled}
	...								portName=${portName}
	...								portId=${port_id}
	...								type=${type}
	${edit_body} =   Create list     ${edit_body}
	[Return]    ${edit_body}
	Log			${edit_body}

Build LE SPP body1
	[Arguments]		${le_spp}
	#${liedit} = 	Copy Dictionary	${li_spp}
	${command} =                       Get Variable Value  ${li_spp['command']}
	${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
	${force} =              Get Variable Value  ${li_spp['force']}
	

	${body} = 	Fusion Api Build LE spp Body	command=${command}
	...                                         sppUri=${sppUri}                                
	...                                         force=${force}
	...                                         
    [Return]    ${body}	
    
    
	
Build LE SPP Body VC
	[Arguments]		${le_spp}
	
	${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
	${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
	${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
	${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}
	${updateFirmwareOnUnmanagedInterconnect} =              Get Variable Value  ${le_spp['updateFirmwareOnUnmanagedInterconnect']}
	${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
	${value_dict} =	Create Dictionary 	firmwareBaselineUri=${firmwareBaselineUri}
	...								forceInstallFirmware=${forceInstallFirmware}
	...								firmwareUpdateOn=${firmwareUpdateOn}
	...								logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}
	...								updateFirmwareOnUnmanagedInterconnect=${validateIfLIFirmwareUpdateIsNonDisruptive}
	...								validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
	${value} =   Create list     ${value_dict}
	Log			${value_dict}
	${body} =   Create Dictionary   op=replace
	...                             path=/firmware
	...                             value=${value_dict}
	${body} =   Create list     ${body}
	[Return]    ${body}

Build LE SPP Body VCFC
	[Arguments]		${le_spp}
	
	${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
	${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
	${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
	${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}
	
	${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
	${value_dict} =     Create Dictionary     firmwareBaselineUri=${firmwareBaselineUri}
	...								forceInstallFirmware=${forceInstallFirmware}
	...								firmwareUpdateOn=${firmwareUpdateOn}
	...								logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}
	
	...								validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
	${value} =   Create list     ${value_dict}
	Log To Console    ${value_dict}
	${body} =   Create Dictionary   op=replace
	...                             path=/firmware
	...                             value=${value_dict}
	${body} =   Create list     ${body}
	[Return]    ${body}
    
    
Build LI SPP body
	[Arguments]		${li_spp}
	${liedit} = 	Copy Dictionary	${li_spp}
	${command} =                       Get Variable Value  ${li_spp['command']}
	${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
	${force} =              Get Variable Value  ${li_spp['force']}
	

	${body} = 	Fusion Api Create LI spp Body	command=${command}
	...                                         sppUri=${sppUri}                                
	...                                         force=${force}
	...                                         
    [Return]    ${body}	
	
Get IC
	[Arguments]		${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log		${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
	${l} = 	Get Length	${ics}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
	\ 	Exit For Loop If 	'${ic['name']}' == '${ICM_NAME}'
	[Return]    ${ic}
	Log		${ic}

Get ICBAYNUMBER
	[Arguments]		${ICM_NAME}
	${ic} =     Get IC			${ICM_NAME}
	${val}=    Fetch From Right    ${ic}    1
	Log     ${val}
	[Return]    ${val}
	
	
Get LE
	[Arguments]		${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log		${resp}
    ${les} =     Get From Dictionary     ${resp}    members
	${l} = 	Get Length	${les}
	:FOR	${x}	IN RANGE	0	${l}
    \   ${le} =     Get From List   ${les}    ${x}
	\ 	Exit For Loop If 	'${le['name']}' == '${LE_name}'
	[Return]    ${le}
	Log		${le}

Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}
    
Create Logical Enclosure
    [Arguments]     ${LE NAME}=${LE Name}   ${EG Name}=${EG Name}

    # Get enclosureGroupUri
    ${Response}=            Fusion Api Get Enclosure Groups     param=?filter="name=${EG NAME}"
    ${members}=             Get From Dictionary                 ${Response}     members
    ${member}=              Get From List                       ${members}      0
    ${enclosureGroupUri}=   Get From Dictionary                 ${member}       uri

    # Get enclosureUri
    ${Response}=        Fusion Api Get Enclosures
    ${members}=         Get From Dictionary     ${Response}     members
    ${member}=          Get From List           ${members}      0
    ${enclosureUri}=    Get From Dictionary     ${member}       uri
    ${enclosureUris}=   Create List             ${enclosureUri}

    # Build Payload
    ${LE Payload}=      Fusion API Create Logical Enclosure Payload     name=${LE Name}
    ...                 enclosureGroupUri=${enclosureGroupUri}
    ...                 enclosureUris=${enclosureUris}

    # Create Logical Enclosure
    ${Response}=        Fusion Api Create Logical Enclosure         body=${LE Payload}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate create Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure.

    [Return]    ${Response}

Get Enclosure Support Dump
    [Arguments]                ${le}		 ${file}
    # Get Logical Enclosure Id
    #${Response}=                Fusion Api Get Logical Enclosure
    #${members}=                 Get From Dictionary     ${Response}                 members
    #${member}=                  Get From List           ${members}                  0
    ${le}=		Get LE
    ${logicalEnclosureUri}=		Get from LE 		${le}		uri
    ${logicalEnclosureId}=      Fetch From Right        ${logicalEnclosureUri}      /

    # Build LE Support Dump Payload
    ${encrypt}=         Convert to Integer      1
    ${applianceDump}=   Convert to Integer      0
    ${LE SupportDump Payload}=                  Create Dictionary   errorCode=API-TEST      encrypt=${encrypt}
    #...                 includeApplianceDump=${applianceDump}

    # Create Enclosure Support Dump
    ${Response}=        Fusion Api Get Logical Enclosure Support Dump   body=${LE SupportDump Payload}
    ...                 id=${logicalEnclosureId}
    ${status_code}=     Get From Dictionary     ${Response}             status_code
    Should Be Equal as Strings                  ${status_code}          202
    ...                 msg=Failed to initiate Create Enclosure Support Dump.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure Support Dump.

    # Download Generated Support Dump file
    ${associatedResource}=      Get From Dictionary     ${task}                 associatedResource
    ${supportDumpUri}=          Get From Dictionary     ${associatedResource}   resourceUri

    ${Response}=        Fusion Api Download Support Dump            uri=${supportDumpUri}   localfile=${file}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      200
    ...                 msg=Failed to Download Enclosure Support Dump.

    [Return]    ${Response}

Delete Logical Enclosure
    ${Response}=        Fusion Api Delete Logical Enclosure         name=${LE Name}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate delete Logical Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to delete Logical Enclosure.

Verify Enclosure in Monitored State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Monitored   msg=Enclosure ${ENC Serial Number} not in Monitored state.

Verify Enclosure in Configured State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Configured      msg=Enclosure ${ENC Serial Number} not in Configured state.
    
Wait For Task_old
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${resp}	${timeout}=60 s	${interval}=2 s
	#Log to console	\n
	${task} = 	Wait Until Keyword Succeeds		${timeout}	${interval}   Task Reached Endstate1_old	${resp}
	[Return]	${task}


Task Reached Endstate1_old
	[Arguments]	${resp}
	
	Set Log Level	TRACE
	#Should Contain	${resp}	uri
	${location} =       Get Variable Value      ${resp['location']}
	${task_uri} =		Get Variable Value          ${location}
	#${task_uri} =		Get From Dictionary		${resp}	uri
	${task} = 			Fusion Api Get Task		uri=${task_uri}
	${task_state} = 	Get From Dictionary		${task}		taskState
	${task_category} = 	Get From Dictionary		${task}		category
	${task_name} = 		Get From Dictionary		${task}		name
	${resource} = 		Get From Dictionary		${task['associatedResource']}	resourceName
	${resource_uri} = 	Get From Dictionary		${task['associatedResource']}	resourceUri
	Log to console and logfile  	\t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
	Should Match Regexp	${task_state}	((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
	[Return]	${task}
	
Wait For Task_bb
    [Documentation]     Waits for a task to reach an end-state
    [Arguments]         ${resp}                         ${timeout}=60s      ${interval}=2s
    Log to console      \n
    ${task} =           Wait Until Keyword Succeeds     ${timeout}          ${interval}     Task Reached Endstate   ${resp}
    ${NicelyFormattedJsonString}                        dumps               ${task}         indent=${4}
    ...                 sort_keys=${True}
    Log                 ${NicelyFormattedJsonString}
    [Return]            ${task}

Task Reached Endstate
    [Arguments]             ${resp}
    Set Log Level           TRACE
    Should Contain          ${resp}                 uri
    ${task_uri} =           Get From Dictionary     ${resp}                         uri
    ${task} =               Fusion Api Get Task     uri=${task_uri}
    ${task_state} =         Get From Dictionary     ${task}                         taskState
    ${task_category} =      Get From Dictionary     ${task}                         category
    ${task_name} =          Get From Dictionary     ${task}                         name
    ${resource} =           Get From Dictionary     ${task['associatedResource']}   resourceName
    ${resource_uri} =       Get From Dictionary     ${task['associatedResource']}   resourceUri
    Log To Console          \t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
    Should Match Regexp     ${task_state}           ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]                ${task}

    
Validate Activity
    [Arguments]    ${Alert_List}			${Expected_Alerts}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary    	${Alert}    	uri
    \    ${alertState}     Get From Dictionary    	${Alert}    	alertState
    \    ${alertTypeID}    Get From Dictionary    	${Alert}    	alertTypeID
    \    ${description1}    Get From Dictionary    	${Alert}    	description
    \	 Run Keyword If 	'${description1}' == '${Expected_Alerts}'		Exit For Loop
    \	 ${description}    Get From Dictionary    	${Alert}    	description
    \	 ${uri}    Get From Dictionary    	${Alert}    	uri
    
    #\	 Run Keyword	 Should Not Contain Match	 '${description}'		'${Expected_Alerts}'		Continue For Loop
    \	 Log to console and logfile 			Activity exists
    	 [Return]    ${uri}
    	 Log		 ${uri}
  
 
Validate Activity Alerts
    [Arguments]    ${Alert_List}    	${Expected_Alerts}

    :FOR    ${Alert}    IN    @{Alert_List}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}  
    
 Validate Activity Alerts1
    [Arguments]    ${Bay}    ${Expected_Alerts}
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*EnclosureManager\/${Bay}.*

    :FOR    ${Alert}    IN    @{Alert_List}
    
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}    
    
ConnectOA_get_Firmversion
	
    Open Connection      ${IP} 
    ${output} =	Login    Administrator    Admin
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 3    return_stderr=True    return_rc=True
    Log			${stdout}
    ${FirmwareICVersion}=    Get Lines Containing String    ${stdout}   Firmware Version:
    Log				${FirmwareICVersion}
    [Return]    ${FirmwareICVersion}
    

Close SSH Connection
    [Documentation]    Exits the current SSH session
    Close Connection

Fusion Api Get Activity Alerts
    [Documentation]    Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1    	${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceUri
    \	 ${alertState}    Get From Dictionary    ${Alert}    alertState
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}
    
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    Log 		${Alert_List} 
    [Return]    ${Alert_List}
 
      