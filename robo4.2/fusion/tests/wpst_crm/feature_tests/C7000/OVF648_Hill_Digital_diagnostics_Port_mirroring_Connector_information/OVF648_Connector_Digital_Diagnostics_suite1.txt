*** Settings ***
#FVT-CRM OVF648 Configuring and validating the digital diagnostics and connector information for hill modules.
#The test cases covered in the suites are - OVTC15326,OVTC15327,OVTC15328
Documentation   OVF648 - Configuring and validating the digital diagnostics and connector information for hill modules when supported/unsupported transceiver is connected to it
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         String
Library         validate
Suite Setup     Suite Setup Tasks
Suite Teardown  Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt

***Test Cases***
STEP 01:VERIFY DIGITAL DIAGNOSTIC INFO FOR SUPPORTED TRANSRECEVIER
    [Documentation]     VERIFY DIGITAL DIAGNOSTIC INFO FOR SUPPORTED TRANSRECEVIER
    #GET INTERCONNECT DETAILS
    Log to console    \n Get Interconnect details
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Run Keyword If  "${resp['members'][0]['state']}" != "Configured"    Fail    The Interconnect module ${INTERCONNECTS_enc1[0]} is in Configured state

    #SPLIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET PLUGGABLE MODULE INFORMATION
    ${diagnostic} =    Fusion Api Get Interconnect    param=/${response[-1]}/pluggableModuleInformation
    Log To Console    "Digital Diagnostic Informations are ${diagnostic}"
    Set Global Variable    ${diagnostics}   ${diagnostic}

    #VALIDATE DIGITAL DIAGNOSTIC INFORMATION FOR SUPPORTED TRANSRECEIVER
    ${flag}     ${msg}      validate_digital_diagnostic_information     ${Supported_transreceiver_SFP_5}    ${diagnostics['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}

STEP 02:VERIFY DIGITAL DIAGNOSTIC INFO FOR UNSUPPORTED TRANSRECEVIER AND PORT STATUS
    [Documentation]     VERIFY DIGITAL DIAGNOSTIC INFO FOR UNSUPPORTED TRANSRECEVIER
    #VALIDATE DIGITAL DIAGNOSTIC INFORMATION FOR UNSUPPORTED TRANSRECEIVER
    ${flag}     ${msg}      validate_digital_diagnostic_information     ${unsupported_transreceiver}    ${diagnostics['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != False    fail    ELSE    Log to Console    ${msg}
    Verify Port status in IC    ${INTERCONNECTS_enc1[0]}    ${unsupported_port}     ${unsupported_port_status}

STEP 03:VALIDATION CONNECTOR INFORMATION IN SUPPORTED TRANRECEIVER
    [Documentation]     VALIDATION CONNECTOR INFORMATION IN SUPPORTED TRANRECEIVER
    # CONNECTOR INFORMATION IN SUPPORTED TRANRECEIVER
    #GET INTERCONNECT DETAILS
    Log to console    \n Get Interconnect details
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Run Keyword If  "${resp['members'][0]['state']}" != "Configured"    Fail    The Interconnect module ${INTERCONNECTS_enc1[0]} is in Configured state
    ${flag}    ${msg}    validate_connector_information    ${Supported_transreceiver_SFP_5}    ${diagnostics['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}

STEP 04:POWER ON/OFF INTERCONNECT AND VALIDATE THE DIGITAL DIAGNOSTIC AND CONNECTOR INFORMATION IN SUPPORTED TRANSRECEIVER
    [Documentation]     POWER ON/OFF INTERCONNECT AND VALIDATE THE DIGITAL DIAGNOSTIC AND CONNECTOR INFORMATION IN SUPPORTED TRANSRECEIVER
    #GET INTERCONNECT DETAILS
    Log to console    \n Get Interconnect details
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"

    #POWER OFF INTERCONNECT
    Poweroff Interconnect   ${ENCLOSURE_IP}    ${OA_USER}       ${interconnect_bay5}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    5 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[0]}

    #SPIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET PLUGGABLE MODULE INFORMATION
    ${diagnostic} =    Fusion Api Get Interconnect    param=/${response[-1]}/pluggableModuleInformation
    Log To Console    Digital diagnostic Information after Interconnect powered off ${diagnostic}

    #VALIDATE DIGITAL DIAGNOSTIC INFORMATION
    ${flag}     ${msg}      validate_digital_diagnostic_information     ${Supported_transreceiver_SFP5}    ${diagnostic['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != False    fail    ELSE    Log to Console    ${msg}

    # CONNECTOR INFORMATION IN SUPPORTED TRANRECEIVER
    ${flag}    ${msg}    validate_connector_information    ${Supported_transreceiver_SFP5}    ${diagnostic['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != False    fail    ELSE    Log to Console    ${msg}

    #POWER ON INTERCONNECT
    Poweron Interconnect    ${ENCLOSURE_IP}    ${OA_USER}       ${interconnect_bay5}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Wait Until Keyword Succeeds    20 min    10 sec    GET IC STATE    ${INTERCONNECTS_enc1[0]}    ${interconnect_state[1]}

    #SPLIT THE RESPONSE CONTENT
    ${response} =    Split String     ${resp['members'][0]['uri']}    /

    #GET PLUGGABLE MODULE INFORMATION
    ${diagnostic} =    Fusion Api Get Interconnect    param=/${response[-1]}/pluggableModuleInformation
    Log To Console    Digital diagnostic Information after Interconnect powered on ${diagnostic}

    #VALIDATE DIGITAL DIAGNOSTIC INFORMATION
    ${flag}     ${msg}      validate_digital_diagnostic_information     ${Supported_transreceiver_SFP_5}    ${diagnostic['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}


    # CONNECTOR INFORMATION IN SUPPORTED TRANRECEIVER
    ${flag}    ${msg}    validate_connector_information    ${Supported_transreceiver_SFP_5}    ${diagnostic['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}

STEP 05:PRECISION VALIDATION FOR RXPOWER AND TXPOWER BOTH IN dBW AND mW
    [Documentation]     PRECISION VALIDATION FOR RXPOWER AND TXPOWER BOTH IN dBW AND mW
    #VALIDATE PRECISION FOR RXPOWER AND TXPOWER BOTH IN dBW AND mW
    ${flag}     ${msg}      validate_precision_values    ${diagnostics['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}

STEP 06:DIGITAL DIAGNOSTIC INFORMATION RANGE VALIDATION
    [Documentation]     DIGITAL DIAGNOSTIC INFORMATION RANGE VALIDATION
    #VALIDATE RANGE OF DIGITAL DIAGNOSTIC INFORMATION
    ${flag}     ${msg}      validate_digital_diagnostic_info_range    ${diagnostics['_content']}
    Log to Console      "The return Flag value of the output is ${flag}"
    Run Keyword If  ${flag} != True    fail    ELSE    Log to Console    ${msg}

***Keywords*****
Suite Setup Tasks
    [Documentation]     Cleans the appliance and create initial setup
    ####Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console  \nSuccessfully logged into the appliance
    Clean OV
    ##Create Ethernet and  FC Networks
    ${Response_enet}     fusion api create ethernet network     ${enet_hill}
    Run keyword unless  ${Response_enet['status_code']}== 202   Fail    "Unable to Create Ethernet network"
    Add FC Networks     @{fcnets1}
    Log to Console      "Four FC networks are created successfully!"
    #####Crete LIG with hill and utah modules
    Log to console and logfile    \n Creating LIG!
    ${body} =   Build LIG body      ${ligs1['lig2']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Log to console and logfile    LIG created successfully
    # Verify the Uplinksets are present in the LIG
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${ligs1['lig2']['name']}'"
    Log to Console      ${resp}
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Log to Console      ${uplink_len}
    Run Keyword If  ${uplink_len} !=5    fail    ${uplink_len} Uplinksets are not exist in appliance \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in appliance

    ####Create EG with hill and utah modules

    ${resp_eg} =    Add Enclosure Group from variable   ${enc_group_1}
    Run keyword unless  ${resp_eg['status_code']} == 201        Fail        "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    ###Import enclosure with hill and utah modules

    Add Enclosures from variable     ${encs1}
    Log to console and logfile    Enclosure imported succesfully


Add FC Networks
    [Documentation]     Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       Log to Console  ${resp}
    \       ${task} =   Wait For Task   ${resp}     30s    2s
    \       Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console  \nSuccessfully Created FC network
Poweroff Interconnect
    [Documentation]     Poweroff Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout=180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweroff interconnect ${interconnect}
    Write     poweroff interconnect ${interconnect}
    Close All Connections

Poweron Interconnect
    [Documentation]     Poweron Interconnect
    [Arguments]         ${SSH_HOST}   ${SSH_USER}    ${interconnect}
    Open Connection     ${SSH_HOST}     timeout=180s
    Set Suite variable  ${SSH_PASS}     ${OA_PASS}
    Login    ${SSH_USER}    ${SSH_PASS}
    Write     poweron interconnect ${interconnect}
    Write     poweron interconnect ${interconnect}
    Close All Connections

GET IC STATE
    [Documentation]     GET IC STATE
    [Arguments]     ${IC}    ${IC_state}
    ${resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${IC}'"
    Run Keyword If  "${resp['members'][0]['state']}" != "${IC_state}"    Fail    The Interconnect module ${INTERCONNECTS_enc1[0]} is in "${${resp['members'][0]['state']}}" state!!

Verify Port status in IC
    [Documentation]             Verify Port status in IC
    [Arguments]    ${INTERCONNECTS_enc1}    ${PORT}    ${status}
    Log to console and logfile    \nVerify the status of the unsupported Ports in IC
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${z}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${z}]['portName']}' == '${PORT}'
    ${u_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Log to Console  ${u_port_info}  ${u_portinfo['portStatusReason']}
    Log to Console  ${u_port_info['fcPortProperties']['wwpn']}
    Run Keyword If    '${u_portinfo['fcPortProperties']['wwpn']}' != '${Invalid_wwn}'   Log to console and logfile  \n Successfully verified the WWNN for uplink port in IC!!
    ...         ELSE    fail    msg=Not found WWNN for uplinkport
    Run Keyword If    '${u_portinfo['portStatusReason']}' != '${status}'    fail    msg=Not found unsupported port status in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portStatusReason for unsupported port in IC!!
Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users