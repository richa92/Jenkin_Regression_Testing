*** Settings ***
#FVT-CRM OVF648 Configuring and validating the bi-directional/directional port mirroring for Hill modules.
# The test cases covered in the suites are - OVTC15273,OVTC15296,OVTC15280,OVTC15293,OVTC15294,OVTC15295,OVTC15274,OVTC15275
Documentation       OVF648 - SuiteName : Configure and Validating the bi-directional/directional port mirroring for hill
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Library         Collections
Library         OperatingSystem
Library         Process
Library         ServerOperations
Library         port_monitor_support_module
Library         String
Library         validate
Library         OAOperations
Suite Setup               Suite Setup Tasks
Suite Teardown            Suite Teardown Tasks

Resource            ../../../../resource/fusion_api_all_resource_files.txt
****Variables****
${flowname1}            fm_bidir_${server_bay_1}_${port_map['${analyzer_aport}']}
${flowname2}            fm_ingr_${server_bay_1}_${port_map['${analyzer_aport}']}
${flowname3}            fm_egr_${server_bay_1}_${port_map['${analyzer_aport}']}
${bidire}               fm_bidir
${ingr}                 fm_ingr
${egr}                  fm_egr

***Test Cases****
1 Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as bi-directional
    [Documentation]             Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as bi-directional
    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    true   ${LI1}
    ${task} =   Wait For Task   ${resp}     ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring with analyzer port as ${analyzer_aport1}!!!


    #Verify the port is successfully configured as analyzer port with direction as bi-directional in LI page
    ${resp}=    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in LI    ${analyzer_aport}   ${analyzer_mport}   ${interconnect_bay5}    ${LI1}
    Log to console and logfile  ${resp}


    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

    # Verify the port is successfully configured as analyzer port with direction as bi-directional

    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in IC        ${analyzer_aport}   ${analyzer_mport}       ${INTERCONNECTS_enc1[0]}        ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}


    # Total Number of frames before passing traffic
    ${mirrored_frames}  ${rx_frames}    ${tx_frames}=   Wait Until Keyword Succeeds    12min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname1}    ${bidire}   ${server_bay_1}
    Set Global Variable     ${MIR}  ${mirrored_frames}
    Set Global Variable     ${RX}   ${rx_frames}
    Set Global Variable     ${TX}   ${tx_frames}
    Log to console and logfile  ${MIR}
    Log to console and logfile  ${RX}
    Log to console and logfile  ${TX}


    #Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_1}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log To Console      "The IO Traffic Details are as follows: \n"
    Log to Console      ${output_1}


    # Verify the port mirroring is configured properly in the interconnect CLI and total number of frames after passing traffic

    ${Mirrored_frames}    ${RX_frames}    ${TX_frames}=   Wait Until Keyword Succeeds    12min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname1}    ${bidire}   ${server_bay_1}
    Run Keyword If  ${Mirrored_frames} > ${MIR}     Log To Console  Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${RX_frames} > ${RX}        Log To Console  RX Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${TX_frames} > ${TX}        Log To Console  Tx Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail

    Log to console and logfile    ${Mirrored_frames}
    Log to console and logfile    ${RX_frames}
    Log to console and logfile    ${TX_frames}

2 Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as FromServer
    [Documentation]             Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as FromServer

    ${resp}=    Configuring Port Monitoring in LI    ${li_portmonitor_from_server}    ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    true    ${LI1}

    ${task} =    Wait For Task    ${resp}     ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring with analyzer port as ${analyzer_aport1}!!!


    #Verify the port is successfully configured as analyzer port with direction as FromServer in LI page
    ${resp}=    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in LI    ${analyzer_aport}   ${analyzer_mport}   ${interconnect_bay5}    ${LI1}
    Log to console and logfile  ${resp}

    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

    # Verify the port is successfully configured as analyzer port with direction as Fromserver

    Wait Until Keyword Succeeds    10min    2s  Verify Port Monitoring in IC        ${analyzer_aport}   ${analyzer_mport}       ${INTERCONNECTS_enc1[0]}        ${li_portmonitor_from_server['monitoredPorts'][0]['portMonitorConfigInfo']}

    # Total Number of frames before passing traffic
    ${mirrored_frames}    ${rx_frames}    ${tx_frames}=   Wait Until Keyword Succeeds    10min    2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname2}    ${ingr}    ${server_bay_1}
    Set Global Variable     ${MIR}    ${mirrored_frames}
    Set Global Variable     ${RX}    ${rx_frames}
    Set Global Variable     ${TX}    ${tx_frames}
    Log to console and logfile    ${MIR}
    Log to console and logfile    ${RX}
    Log to console and logfile    ${TX}


    #Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_1}     ${module_file_path}    ${diskspd_cmd}    ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log To Console      "The IO Traffic Details are as follows: \n"
    Log to Console      ${output_1}


    # Verify the port mirroring is configured properly in the interconnect CLI and total number of frames after passing traffic

    ${Mirrored_frames}    ${RX_frames}    ${TX_frames}=   Wait Until Keyword Succeeds    10min    2s    verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname2}    ${ingr}    ${server_bay_1}
    Run Keyword If  ${Mirrored_frames} > ${MIR}    Log To Console  Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${RX_frames} > ${RX}    Log To Console  RX Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${TX_frames} == ${TX}   Log To Console  TX mirrored frames are equal to 0 after passing io traffic!!!!!
    ...     ELSE    Fail    Log To Console  TX mirrored frames is not equal to 0 after passing io traffic!!!!!
    Log to console and logfile    ${Mirrored_frames}
    Log to console and logfile    ${RX_frames}
    Log to console and logfile    ${TX_frames}

3 Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as TOSERVER
    [Documentation]             Configure Port Monitoring with Analyzer port as bay5 port4 and Monitored port as d1 with direction as TOSERVER
    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor_to_server}    ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    true   ${LI1}
    ${task} =   Wait For Task   ${resp}     ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring with analyzer port as ${analyzer_aport1}!!!


    #Verify the port is successfully configured as analyzer port with direction as TOSERVER in LI page
    ${resp}=    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in LI    ${analyzer_aport}   ${analyzer_mport}   ${interconnect_bay5}    ${LI1}
    Log to console and logfile  ${resp}


    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

    # Verify the port is successfully configured as analyzer port with direction as TOSERVER

    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in IC        ${analyzer_aport}   ${analyzer_mport}       ${INTERCONNECTS_enc1[0]}        ${li_portmonitor_to_server['monitoredPorts'][0]['portMonitorConfigInfo']}

    sleep   20

    # Total Number of frames before passing traffic
    ${mirrored_frames}  ${rx_frames}    ${tx_frames}=   Wait Until Keyword Succeeds    10min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname3}    ${egr}    ${server_bay_1}
    Set Global Variable     ${MIR}    ${mirrored_frames}
    Set Global Variable     ${RX}    ${rx_frames}
    Set Global Variable     ${TX}    ${tx_frames}
    Log to console and logfile    ${MIR}
    Log to console and logfile    ${RX}
    Log to console and logfile    ${TX}


    #Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_1}     ${module_file_path}    ${diskspd_cmd}  ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log To Console      "The IO Traffic Details are as follows: \n"
    Log to Console      ${output_1}

    # Verify the port mirroring is configured properly in the interconnect CLI and total number of frames after passing traffic

    ${Mirrored_frames}    ${RX_frames}    ${TX_frames}=   Wait Until Keyword Succeeds    10min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    ${Password_IC5}    ${flowname3}    ${egr}  ${server_bay_1}
    Run Keyword If  ${Mirrored_frames} > ${MIR}    Log To Console  Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${RX_frames} == ${RX}   Log To Console  RX mirrored frames are equal after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${TX_frames} > ${TX}    Log To Console  TX Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Log to console and logfile    ${Mirrored_frames}
    Log to console and logfile    ${RX_frames}
    Log to console and logfile    ${TX_frames}


4 Log-out from the appliance
    [Documentation]             Logout from Appliance

    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']}== 204    Fail    "Unable to Logout"
    Log To Console    \n\nLogged_Out from Appliance as ${admin_credentials['userName']}

5 Log-in as Server Admininstrator
    [Documentation]             Login to Appliance as server administrator
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${serveradmin}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login"
    Log To Console    \n\nLogged in as ${serveradmin['userName']}
6 Enable Port Monitoring with Unauthorized User
    [Documentation]             Enable Port Monitoring with Unauthorized User
    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${INTERCONNECTS_enc1[0]}    ${analyzer_aport}    true   ${LI1}
    Log to Console  ${resp}
    Run Keyword If  ${resp['status_code']} !=403    fail    Warning !!! Unauthorized user have access for Port Monitor ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}

7 Log-out from the appliance
    [Documentation]             Log-out from the appliance
    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']}== 204    Fail    "Unable to Logout"
    Log To Console    \n\nLogged_Out from Appliance as serveradmin
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}


8 Negative : Create or edit an Uplinkset and try to use the analyzerPort 4 and verify the error message
    [Documentation]             Negative : Create or edit an Uplinkset and try to use the analyzerPort 4 and verify the error message

    ${li_uri} =     Get LI URI   ${LI1}
    Log to Console      ${li_uri}
    ${us} =         Copy Dictionary    ${neg_uplink_sets}
    ${body} =       Build US body   ${us}   ${li_uri}
    Log to Console      ${body}
    ${uplinksets} =         Fusion Api Get Uplink Set   param=?filter="'name'=='${uplink_sets_enc1['UplinkSet_3']['name']}'"
    ${us} =                 Get From List   ${uplinksets['members']}    0
    ${us_uri} =             Get From Dictionary    ${us}   uri
    Log to Console      ${us_uri}
    ${resp} =               Fusion Api Edit Uplink Set  body=${body}    uri=${us_uri}
    Log to Console      ${resp}
    Run Keyword If  ${resp['status_code']} !=400    fail    Error - Unexpected Behavior Uplink set edited successfully  ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}

    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

9 Negative : Configure port monitoring with an uplink port [5:2] which is already in the uplink set
    [Documentation]             Negative : Configure port monitoring with an uplink port [5:2] which is already in the uplink set
    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${INTERCONNECTS_enc1[0]}    ${used_uplink_port}     true        ${LI1}
    Log to Console      ${resp}
    Run Keyword If  ${resp['status_code']} !=400    fail    Error - Enabling Port Monitor is succeed for Uplinkport which is already in the uplink set  ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}

    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

10 Configure Port monitoring by switching from the port 4 to 3
    [Documentation]             Configure Port monitoring by switching from the port 4 to 3

    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${INTERCONNECTS_enc1[0]}    ${analyzer_aport1}    true  ${LI1}
    ${task} =   Wait For Task   ${resp}     ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully configured the port monitoring with analyzer port as ${analyzer_aport1}!!!


    #Verify the port is successfully configured as analyzer port with direction as bi-directional in LI page
    ${resp}=    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in LI    ${analyzer_aport1}  ${analyzer_mport}   ${interconnect_bay5}    ${LI1}


    # Verify the interconnect state is configured or not

    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

    # Verify the port is successfully configured as analyzer port with direction as bi-directional

    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in IC        ${analyzer_aport1}  ${analyzer_mport}       ${INTERCONNECTS_enc1[0]}        ${li_portmonitor['monitoredPorts'][0]['portMonitorConfigInfo']}


    # Total Number of frames before passing traffic
    ${mirrored_frames}  ${rx_frames}    ${tx_frames}=   Wait Until Keyword Succeeds    10min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport1}    ${Password_IC5}   ${flowname1}    ${bidire}   ${server_bay_1}
    Set Global Variable     ${MIR}  ${mirrored_frames}
    Set Global Variable     ${RX}   ${rx_frames}
    Set Global Variable     ${TX}   ${tx_frames}
    Log to console and logfile  ${MIR}
    Log to console and logfile  ${RX}
    Log to console and logfile  ${TX}


    #Pass IO Traffic to check the connectivity
    ${output_1}    ${msg_1}=       executes        ${linux_details}    ${oa_details_1}     ${module_file_path}    ${diskspd_cmd}  ${windows_server_cred}
    Run keyword unless  '${msg_1}'== 'PASS'    Fail    "Unable to verify the IO Traffic"
    Log To Console      "The IO Traffic Details are as follows: \n"
    Log to Console      ${output_1}

    # Verify the port mirroring is configured properly in the interconnect CLI and total number of frames after passing traffic

    ${Mirrored_frames}    ${RX_frames}    ${TX_frames}=   Wait Until Keyword Succeeds    10min   2s  verify port mirroring in ICM CLI        ${INTERCONNECTS_enc1[0]}    ${analyzer_aport1}    ${Password_IC5}    ${flowname1}    ${bidire}   ${server_bay_1}
    Run Keyword If  ${Mirrored_frames} > ${MIR}     Log To Console  Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${RX_frames} > ${RX}        Log To Console  RX Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail
    Run Keyword If  ${TX_frames} > ${TX}    Log To Console  Tx Mirrored frames are increased after passing io traffic!!!!!
    ...     ELSE    Fail

    Log to console and logfile    ${Mirrored_frames}
    Log to console and logfile    ${RX_frames}
    Log to console and logfile    ${TX_frames}

11 Disable the analyzer port 3, and verify the port monitoring is disabled
    [Documentation]             Disable the analyzer port 3, and verify the port monitoring is disabled.
    ${resp}=    Configuring Port Monitoring in LI   ${li_portmonitor}   ${INTERCONNECTS_enc1[0]}    ${analyzer_aport1}    false     ${LI1}
    Run Keyword If  ${resp['status_code']} !=202    fail    Failed to Disable Port Monitor for ${LI}\nErrorCode:${resp['errorCode']}\nMessage:${resp['message']}
    ${task} =   Wait For Task   ${resp}     ${pm_timer}    2s
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200    fail    Configure port monitoring creation failed\nTaskErrorCode:${task['taskErrors'][0]['errorCode']}\nTaskStatus:${task['taskErrors'][0]['message']}
    ...         ELSE    Log to console and logfile  \n Successfully disabled the port monitoring !!!
    Log to console and logfile  ${resp}

    # Verify the interconnect state is configured or not
    Verify interconnect state       ${INTERCONNECTS_enc1[0]}

    #Verify the port is successfully configured as analyzer port with direction as bi-directional in LI page
    ${resp}=    Wait Until Keyword Succeeds    10min   2s  Verify Port Monitoring in LI    ${analyzer_aport1}  ${analyzer_mport}   ${interconnect_bay5}    ${LI1}

    # Verify the mirror port status and bidirectional port mirroring configuration in ICM
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${IC_IP}=      Get From Dictionary      ${resp['members'][0]['ipAddressList'][0]}    ipAddress
    Log to Console      ${IC_IP}
    Log to console and logfile    \n\nLogging into ICM with the static IP address.
    Login to IC via SSH     ${IC_IP}    ${Password_IC5}
    Log to Console      ${port_map['${analyzer_aport1}']}
    ${show}=    Execute Command    portcfgshow ${port_map['${analyzer_aport1}']}
    Log to Console      ${show}
    ${return_flag}=    validate_mirror_port_status_in_icm    ${show}    OFF
    Log to Console      ${return_flag}
    Run Keyword If  '${return_flag}' !='True'    Fail    Log to Console    "Mirrored port status is ON in the ICM!!!"
    ${show}=    Execute Command    flow --show
    Log to Console      ${show}
    ${return_flag}=    validate_flow_command_in_icm    ${show}
    Log to Console      ${return_flag}
    Run Keyword If  '${return_flag}' !='False'    Fail    Log to Console        "Getting bidirectional port mirroring in ICM after disabling port mirroring in LI!!!"
***Keywords****

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${FUSION_TIMEOUT}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}

    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    Sleep   10s
    ${a}=   Read
    Sleep   10s
    Log to console and logfile      ${a}
    [Return]                    ${Id}

Add FC Networks
    [Documentation]             Add FC Networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       Log to Console  ${resp}
    \       ${task} =   Wait For Task   ${resp}     30s    2s
    \       Run Keyword If  '${task['taskState']}' != 'Completed'  Fail ELSE  Log to console  \nSuccessfully Created FC network

Configuring Port Monitoring in LI
    [Documentation]             Configuring Port Monitoring in LI
    [Arguments]         ${li_portmonitor1}  ${interconnects}    ${analyzer_port}    ${flag}     ${LI}=${LI}
    Log to console and logfile    \nConfiguring Port Monitoring in LI

    Set To Dictionary   ${li_portmonitor1}  enablePortMonitor    ${flag}
    ${ic_resp} =    Fusion Api Get Interconnect         param=?filter="'name'=='${interconnects}'"
    Log to Console    ${ic_resp}
    #Log to Console     ${ic_resp['members'][0]}    ${\n}
    ${ports} =    Get from Dictionary    ${ic_resp['members'][0]}    ports
    #Log to Console     ${ports}    ${\n}
    ${len} =    Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0  ${len}
    \     Exit For Loop If    '${ports[${x}]['portName']}' == '${analyzer_port}'
    Log to Console  ${ports[${x}]['portName']}  ${\n}
    Log to Console      ${ports[${x}]['uri']}
    Set To Dictionary   ${li_portmonitor1['analyzerPort']}  portUri    ${ports[${x}]['uri']}
    :FOR    ${y}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${y}]['portStatus']}' == 'Linked' and '${ports[${y}]['portType']}' == 'Downlink'
    ${downlinkuri} =    Copy Dictionary    ${ports[${y}]}
    Set To Dictionary   ${li_portmonitor1['monitoredPorts'][0]}    portUri    ${downlinkuri['uri']}
    ${uri} =    Get LI URI    ${LI}
    Log to Console      ${LI}   ${\n}
    Log to Console      ${uri}  ${\n}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    body=${li_portmonitor1}    uri=${uri}
    [Return]    ${resp}

verify port mirroring in ICM CLI
    [Documentation]             verify port mirroring in ICM CLI
    [Arguments]    ${interc}    ${analyzer_aport}   ${Password}    ${flowname}    ${dir}    ${server_bay}
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${interc}'"
    ${IC_IP}=      Get From Dictionary      ${resp['members'][0]['ipAddressList'][0]}    ipAddress
    Log to Console      ${IC_IP}
    Log to console and logfile    \n\nLogging into ICM with the static IP address.
    Login to IC via SSH     ${IC_IP}    ${Password}
    ${show}=    Execute Command    switchshow
    Log to Console      ${show}
    ${show}=    Execute Command    switchshow
    Log to Console      ${show}

    ${return_flag}=     validate_port_monitor_in_icm    ${port_map['${analyzer_aport}']}    ${show}
    Log to Console      ${return_flag}
    Run Keyword If  '${return_flag}' !='True'    fail    Log to Console     "Failed to verify the configured Mirrored port in the ICM!!!"
    ${show}=    Execute Command    flow --show
    Log to Console      ${show}

    ###Getting transmitted and received frames in IC using flow command with From server direction
    ${flow}=        Get Lines Containing String     ${show}    ${dir}
    Log to console and logfile  ${flow}
    ${match}   ${flow_name}    Should Match Regexp    ${flow}    (${dir}_${server_bay}_${port_map['${analyzer_aport}']})\\s+\\|mir
    Log to Console     ${flow_name}
    Should Be Equal As Strings    ${flowname}    ${flow_name}
    ${output_frames}=    Execute Command    flow --show ${flow_name}
    Log to Console      ${output_frames}
    ${match}   ${mirrored_frames}    Should Match Regexp    ${output_frames}    No\\s+of\\s+Mirrored\\s+Frames\\s+:\\s+(\\d+)
    Log to Console     ${mirrored_frames}
    ${match}   ${rx_frames}    Should Match Regexp    ${output_frames}    No\\s+of\\s+RX\\s+Mirrored\\s+Frames\\s+:\\s+(\\d+)
    Log to Console     ${rx_frames}
    ${match}   ${tx_frames}    Should Match Regexp    ${output_frames}    No\\s+of\\s+TX\\s+Mirrored\\s+Frames\\s+:\\s+(\\d+)
    Log to Console     ${tx_frames}
    [Return]    ${mirrored_frames}  ${rx_frames}    ${tx_frames}

Verify interconnect state
    [Documentation]             Verify interconnect state
    [Arguments]    ${interc}
    # Verify the interconnect state is configured or not

    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${interc}'"
    Log to Console      "The state of the interconnect is as follows:"
    Log to Console      ${resp['members'][0]['state']}
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${interc} is not in configured state!!  ${\n}

Verify Port Monitoring in LI
    [Documentation]             Verify interconnect state
    [Arguments]     ${ANALYZER_PORT}    ${d_port}   ${bay_no}   ${LI}
    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in LI
    ${uri} =    Get LI URI    ${LI}
    Log to Console      ${uri}  ${\n}
    ${portmtr} =    Fusion Api Get Li Port Monitor Configuration    uri=${uri}
    Run Keyword If    '${portmtr['analyzerPort']['portName']}' != '${ANALYZER_PORT}' or '${portmtr['analyzerPort']['bayNumber']}' != '${bay_no}' or '${portmtr['analyzerPort']['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Analyser port in LI !!
    Run Keyword If    '${portmtr['monitoredPorts'][0]['portName']}' != '${d_port}' or '${portmtr['monitoredPorts'][0]['bayNumber']}' != '${bay_no}' or '${portmtr['monitoredPorts'][0]['portStatus']}' != 'Linked'    fail    msg=Not found Monitored port in LI
    ...         ELSE    Log to console and logfile  \n Successfully verified the portname,bay number and linked state for Monitored ports in LI !!
    [Return]    ${portmtr}

Verify Port Monitoring in IC
    [Arguments]     ${ANALYZER_PORT}    ${d_port}   ${INTERCONNECTS_enc1}   ${Monitored_status}
    [Documentation]             Verify Port Monitoring in IC
    Log to console and logfile    \nVerify the status of the Analyzer and Monitored Ports in IC
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${z}    IN RANGE    0  ${len}
    \    Exit For Loop If    '${ports[${z}]['portName']}' == '${ANALYZER_PORT}'
    ${u_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Log to Console  ${u_port_info}  ${u_portinfo['portMonitorConfigInfo']}
    Run Keyword If    '${u_portinfo['portMonitorConfigInfo']}' != 'AnalyzerPort' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Analyzer port -portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portMonitorConfigInfo and linked state for Analyzer port in IC !!
    :FOR    ${z}    IN RANGE    0  ${len}
    \   Log to Console  ${ports[${z}]['portName']}  ${\n}
    \     Exit For Loop If    '${ports[${z}]['portName']}' == '${d_port}'
    ${d_portinfo} =    Copy Dictionary    ${ports[${z}]}
    Run Keyword If    '${d_portinfo['portMonitorConfigInfo']}' != '${Monitored_status}' or '${u_portinfo['portStatus']}' != 'Linked'    fail    msg=Not found Monitored ports-portMonitorConfigInfo in IC
    ...         ELSE    Log to console and logfile  \n Successfully verified the portMonitorConfigInfo and linked state for Monitored ports in IC !!

Check Linked status
    [Documentation]    Check Linked status of uplink  and downlink ports in Hill modules
    [Arguments]    ${ports}    ${linked_ports}
     ${flag}=    set variable    ${empty}
    ${len} =    Get Length  ${linked_ports}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports['portName']}' == '${linked_ports[${x}]}' and '${ports['portStatus']}' == 'Linked'    Set Global Variable    ${flag}    True

Add Server Profiles
    [Documentation]    Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}   ${timeout}=15m    ${interval}=10s   ${endstate}=((?i)Warning|Completed)
    fusion_api_appliance_setup.Log to console and logfile   Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    fusion_api_appliance_setup.Copy Dictionary     ${profile}
        \       ${space} =   Check For Whitespace From String   ${profile['name']}
        \       Run Keyword If   ${space} is ${True}   Fail   msg=Profile name contains whitespace. This is not allowed in CI-FIT naming convention.
    \   ${shuri} =     Get from Dictionary     ${profile}      serverHardwareUri
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   ${eg} =     Get from Dictionary     ${profile}    enclosureGroupUri
    \   @{words} =  Split String    ${eg}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${uri} =    Get Enclosure Group URI    ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    \   @{words} =  Split String    ${enc}  :
    \   ${type} =   Get From List   ${words}    0
    \   ${enc} =    Get From List   ${words}    1
    \   ${uri} =    Get Enclosure URI   ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${connections} =    Get From Dictionary     ${profile}     connections
    \   ${connections} =    Lookup Connection Uris    ${connections}
    \   Set to Dictionary   ${profile}  connections     ${connections}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}    param=?ignoreServerHealth=true
    \   ${task} =   fusion_api_appliance_setup.Wait For Task    ${resp}     timeout=${timeout}      interval=${interval}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   Should Match Regexp    ${task_state}    ${endstate}

Suite Setup Tasks
    [Documentation]    Create Initial setup

    ##Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run Keyword If  '${Login_response[0]['status_code']}' != '200'  Fail    ELSE  Log to console  \nSuccessfully logged into the appliance
    Clean OV
    #Create Different Users
    :FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log To Console    \n${Response['userName']} is created Successfully

    ###Create Ethernet and FC Networks

    #Create Ethernet network
    ${Response_enet}     fusion api create ethernet network     ${enet_hill}
    Run keyword unless  ${Response_enet['status_code']}== 202   Fail    "Unable to Create Ethernet network"
    #Create FC network
    Add FC Networks     @{fcnets1}
    Log to Console      "Four FC networks are created successfully!"

    ###Create LIG with utah and hill modules(each having separate uplinkset)

    Log to console and logfile    \n Creating LIG!
    ${body} =   Build LIG body      ${ligs1['lig2']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Log to console and logfile    LIG created successfully
    # Verify the Uplinksets are present in the LIG
    ${resp} =    Fusion Api Get Lig     param=?filter="'name'=='${ligs1['lig2']['name']}'"
    Log to Console      ${resp}
    Log to console and logfile  \n\n Verify the created uplink sets are exists in OV
    ${uplink_len} =    Get Length      ${resp['members'][0]['uplinkSets']}
    Log to Console      ${uplink_len}
    Run Keyword If  ${uplink_len} !=5    fail    ${uplink_len} Uplinksets are not exist in appliance \n${resp}
    ...         ELSE    Log to console and logfile  \n${uplink_len} Uplinksets are exist in appliance

    ####Create EG with hill and utah modules

    ${resp_eg} =    Add Enclosure Group from variable       ${enc_group_1}
    Run keyword unless  ${resp_eg['status_code']}== 201 Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    ###Import enclosure with hill and utah modules

    Add Enclosures from variable     ${encs1}
    Log to console and logfile    Enclosure imported succesfully

    ###Create server profiles

    Add Server Profiles   ${server_profiles_bay1}
    Log to console and logfile    server profile 1 created successfully
    Power on server    ${server_profiles_bay1[0]['serverHardwareUri']}

    Add Server Profiles   ${server_profiles_bay10}
    Log to console and logfile    server profile 10 created successfully
    Power on server    ${server_profiles_bay10[0]['serverHardwareUri']}
    sleep   900s

    ##Validate the interconnect status
    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    Log to Console      "The state of the interconnect is :"
    Log to Console      ${resp['members'][0]['state']}
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[0]} is not in configured state!!   ${\n}

    ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[1]}'"
    Log to Console      "The state of the interconnect is :"
    Log to Console      ${resp['members'][0]['state']}
    Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[1]} is not in configured state!!   ${\n}

    ##Validate the uplink and downlink port statue in interconnect page and port monitoring is disabled by default
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1[0]}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'   Check Linked status    ${ports[${x}]}   ${up_ports_5}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink' Check Linked status    ${ports[${x}]}   ${dw_ports[0]}

    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1[1]}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'   Check Linked status    ${ports[${x}]}   ${up_ports_6}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Downlink' Check Linked status    ${ports[${x}]}   ${dw_ports[1]}

    ${uri} =    Get LI URI    ${LI1}
    Log to Console      ${uri}  ${\n}
    ${portmtr} =    Fusion Api Get Li Port Monitor Configuration    uri=${uri}
    Log to console  ${portmtr}
    Run Keyword If  '${portmtr['enablePortMonitor']}' != 'False'    fail    msg=Port monitoring is enabled
    ... ELSE    Log to console      Port Monitoring is disabled by default

Suite Teardown Tasks
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [TEARDOWN]
    Run Keyword If All Tests Passed    Power off ALL Servers
    Run Keyword If All Tests Passed    Remove All Server Profiles
    Run Keyword If All Tests Passed    Remove ALL Enclosures
    Run Keyword If All Tests Passed    Remove ALL Enclosure Groups
    Run Keyword If All Tests Passed    Remove ALL LIGs
    Run Keyword If All Tests Passed    Remove ALL LS
    Run Keyword If All Tests Passed    Remove ALL LSGs
    Run Keyword If All Tests Passed    Remove ALL Ethernet Networks
    Run Keyword If All Tests Passed    Remove ALL FC Networks
    Run Keyword If All Tests Passed    Remove ALL FCoE Networks
    Run Keyword If All Tests Passed    Remove ALL Network Sets
    Run Keyword If All Tests Passed    Remove ALL Users

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users