*** Settings ***
Documentation		Feature Test: Port Monitoring
...                 Updated test to include all network types: Ethernet, FC and FCoE networks
...		
Variables 		    data_variables.py		

Suite Setup   		Run FTS and test-specific setup
Suite Teardown		Suite Teardown

Resource            ../../../../resource/fusion_api_all_resource_files.txt

Library				Collections
Library             json

*** Variables ***
${SSH_PASS}                     hpvse1
${VM}

*** Test Cases ***
POSITIVE - ENABLE port monitoring with authorized users
    [Tags]  1    POSITIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
    ${pdict} =    Build PortUris dict

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Get LI Port Monitor Configuration    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    enablePortMonitor=${False}
	\    ...                                 status_code=${200}
	\    Validate response    ${resp}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredBoth","portUri":"${pdict['d1']}"}]}

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
    \    ${task} =   Wait For Task   ${resp}    6min    15s
	\	 ${valDict} = 	Create Dictionary    taskState=Completed
	\    ...                                 status_code=${200}
	\    Validate response    ${task}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredToServer","portUri":"${pdict['d2']}"}]}

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
    \    ${task} =   Wait For Task   ${resp}    6min    15s
	\	 ${valDict} = 	Create Dictionary    taskState=Completed
	\    ...                                 status_code=${200}
	\    Validate response    ${task}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredFromServer","portUri":"${pdict['d3']}"}]}

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
    \    ${task} =   Wait For Task   ${resp}    6min    15s
	\	 ${valDict} = 	Create Dictionary    taskState=Completed
	\    ...                                 status_code=${200}
	\    Validate response    ${task}    ${valDict}

NEGATIVE - Attempt to create a US using an a port that is an Analyzer Port
    [Tags]  2    NEGATIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
	${us} = 		    Copy Dictionary	${li_uplink_sets['us1']}
	${body} = 		    Build US body 	${us}	${li_uri}
	${resp} = 			Fusion Api Create Uplink Set	body=${body}
	${valDict} = 		Create Dictionary	status_code=${400}
	...                                     errorCode=CRM_LOGICAL_UPLINK_UNAVAILABLE_PORT
	Validate Response	${resp}	${valDict}

NEGATIVE - ENABLE port monitoring with unauthorized users
    [Tags]   3    NEGATIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
    ${pdict} =    Build PortUris dict

    # ALL Users can do a GET on /port-monitor
	:FOR	${user}   IN    @{NEGATIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Get LI Port Monitor Configuration    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    enablePortMonitor=${True}
	\    ...                                 status_code=${200}
	\    Validate response    ${resp}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredBoth","portUri":"${pdict['d1']}"}]}

	:FOR	${user}   IN    @{NEGATIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    errorCode=ACTION_FORBIDDEN_BY_ROLE
	\    ...                                 status_code=${403}
	\    Validate response    ${resp}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredToServer","portUri":"${pdict['d2']}"}]}

	:FOR	${user}   IN    @{NEGATIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    errorCode=ACTION_FORBIDDEN_BY_ROLE
	\    ...                                 status_code=${403}
	\    Validate response    ${resp}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredFromServer","portUri":"${pdict['d3']}"}]}

	:FOR	${user}   IN    @{NEGATIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    errorCode=ACTION_FORBIDDEN_BY_ROLE
	\    ...                                 status_code=${403}
	\    Validate response    ${resp}    ${valDict}

NEGATIVE - ENABLE port monitoring with an uplink port that is in an US
    [Tags]   4    NEGATIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
    ${pdict} =    Build PortUris dict
    ${body} =    json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X1']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredBoth","portUri":"${pdict['d1']}"}]}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
	${valDict} = 		Create Dictionary	status_code=${400}
	...                                     errorCode=CRM_ANALYZER_PORT_IS_UNAVAILABLE
	Validate Response	${resp}	${valDict}

NEGATIVE - ENABLE port monitoring with a stacking port as the Analyzer port
    [Tags]   5    NEGATIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
    ${pdict} =    Build PortUris dict
    ${body} =    json.loads    {"type":"port-monitor","enablePortMonitor":true,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X11']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredBoth","portUri":"${pdict['d1']}"}]}
    ${resp} =    Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
	${valDict} = 		Create Dictionary	status_code=${400}
	...                                     errorCode=CRM_ANALYZER_PORT_INVALID
	Validate Response	${resp}	${valDict}

POSITIVE - DISABLE port monitoring with authorized users
    [Tags]   6    POSITIVE
	Run Keyword and Ignore Error    Write To ciDebug Log
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${li_uri} = 	    Get LI URI   ${ENC1}-${LIG1}
    ${pdict} =    Build PortUris dict

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Get LI Port Monitor Configuration    ${li_uri}
	\	 ${valDict} = 	Create Dictionary    enablePortMonitor=${True}
	\    ...                                 status_code=${200}
	\    Validate response    ${resp}    ${valDict}

    ${body} =   json.loads    {"type":"port-monitor","enablePortMonitor":false,"analyzerPort":{"portMonitorConfigInfo":"AnalyzerPort","portUri":"${pdict['X10']}"},"monitoredPorts":[{"portMonitorConfigInfo":"MonitoredBoth","portUri":"${pdict['d1']}"}]}

	:FOR	${user}   IN    @{POSITIVE_USERS}
	\    ${resp} =   Run Keyword as User     ${user}     Fusion Api Update LI Port Monitor Configuration    ${body}    ${li_uri}
    \    ${task} =   Wait For Task   ${resp}    6min    15s
	\	 ${valDict} = 	Create Dictionary    taskState=Completed
	\    ...                                 status_code=${200}
	\    Validate response    ${task}    ${valDict}


*** Keywords ***
FTS
    [Documentation]  ...
	Set Log Level	DEBUG
    Get VM IP   ${VM}
	First Time Setup					password=hpvse123

Test Specific Setup
    [Documentation]  ...
	Set Log Level	TRACE
	${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
	Run Keyword and Ignore Error    Write To ciDebug Log
	Log to console and logfile	[TEST-SPECIFIC SETUP]
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	${users} =	Get Variable Value	${users}
	Run Keyword If	${users} is not ${null}    Add Users from variable				${users}
	${ethernet_networks} =	Get Variable Value    ${ethernet_networks}
	Run Keyword If	${ethernet_networks} is not ${null}    Add Ethernet Networks from variable	${ethernet_networks}
	${fc_networks} =	Get Variable Value	${fc_networks}
	Run Keyword If	${fc_networks} is not ${null}    Add FC Networks from variable		${fc_networks}
	${fcoe_networks} =	Get Variable Value	${fcoe_networks}
	Run Keyword If	${fcoe_networks} is not ${null}    Add FCoE Networks from variable		${fcoe_networks}
	${ligs} =	Get Variable Value	${ligs}
	Run Keyword If	${ligs} is not ${null}	Run Keyword for List	${ligs}    Add LIG from variable
	${enc_groups} =	Get Variable Value	${enc_groups}
	Run Keyword If	${enc_groups} is not ${null}	Run Keyword for List	${enc_groups}	Add Enclosure Group from variable
	${licenses} =	Get Variable Value	${licenses}
	Run Keyword If	${licenses} is not ${null}		Add Licenses from variable		${licenses}
	${encs} =	Get Variable Value	${encs}
	Run Keyword If	${encs} is not ${null}					Add Enclosures from variable	${encs}
	Power Off All Servers
	${server_profiles} =	Get Variable Value	${server_profiles}
	Run Keyword If	${server_profiles} is not ${null}		Add Server Profiles from variable	${server_profiles}

    Login all users     ${users}

Run FTS and test-specific setup
    [Documentation]  ...
	Set Log Level	TRACE
    FTS
    Test Specific Setup

Build PortUris dict
    [Documentation]  ...
    [Arguments]    ${ENC1}=${ENC1}    ${BAY}=${BAY}
    # build dictionary of port uris with port (X1..X2..) as the key
    # {'X1': '
	${ics} =       Fusion Api Get Interconnect    param=?filter="'name'=='${ENC1}, interconnect ${BAY}'"
	${ports} =     Get From Dictionary    ${ics['members'][0]}    ports
	${pdict} =     Create Dictionary
	:FOR    ${port}    IN   @{ports}
	\    ${uri} =    Get From Dictionary    ${port}    uri
	\    ${p} =      Get From Dictionary    ${port}    name
	\    Set to dictionary    ${pdict}    ${p}    ${uri}
    [Return]    ${pdict}

Suite Teardown
	[Documentation]	Returns appliance to a 'clean' state by removing all resources\enclosures
	Log to console and logfile	[TEARDOWN]
	Power off ALL Servers
	Remove All Server Profiles
	Remove ALL Enclosures
	Remove ALL Enclosure Groups
	Remove ALL LIGs
	Remove ALL Ethernet Networks
	Remove ALL FC Networks
	Remove ALL FCoE Networks
	Remove ALL Network Sets
	Remove ALL Users
