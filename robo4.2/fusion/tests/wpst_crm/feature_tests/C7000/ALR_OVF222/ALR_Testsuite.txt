*** Settings ***
Documentation   OVF222_api_Testsuite
Library         FusionLibrary
Library         RoboGalaxyLibrary
Variables       data_variables.py
Resource        resource.txt
Library         OAOperations
Library         c7000_login_redistribution
Library         Collections
Library         OperatingSystem
Library         Dialogs
Library          Process


*** Test Cases ***

###OVTC74   OVF222_api_TC_Verify Auto login redistribution by add / delete Uplink ports from LIG
01_Login to Appliance
    [Documentation]             Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance
    Suite Cleanup

02_Create Networks,LIG,EG and import enclosure
    [Documentation]             Create Networks,LIG,EG and import enclosure
    Add FC Networks     @{fc_hill}
    Log to console and logfile      FC Networks created successfully
    ${lig_hill_new} =     Copy List     ${lig_hill_new}
    Add LIG from variable     ${lig_hill_new[0]}
    Log to console and logfile      LIG created successfully
    ${resp}=    Add Enclosure Group from variable       ${enc_group_hill}
    Log to console and logfile      '${resp['status_code']}'
    Run Keyword If  '${resp['status_code']}' != '201'   fail    ELSE    Log to Console  \n-EG created succesfully
    ${resp}=    Add Enclosures from variable     ${encs}
    Run Keyword If  '${resp['status_code']}' != '202'   fail    ELSE    Log to Console  \n-Enclosure imported succesfully

3_create server profiles
    [Documentation]             Create server profiles
    :FOR   ${serverprofile}   IN   @{server_profiles_gen8}
    \   ${resp}=    Add Server Profiles from variable    ${serverprofile}
    \   Run Keyword If  '${resp['status_code']}' != '202'   fail    ELSE    Log to Console  \n-server profiles crested
    Log to console and logfile      Server Profiles created successfully
    sleep   20s
    Power on ALL servers
    sleep   700s
    Log to console and logfile      Server are powered on successfully


4_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

5_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state


6_verify logins After server power on
    [Documentation]             verify logins After server power on
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail}  ${Alr_serverpoweron}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after server power on ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

7_changing linkstability time to 120
    [Documentation]             changing linkstability time to 120
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[7]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s


8_Edit LIG with one more uplink port in each uplinkset
    [Documentation]             Edit LIG with one more uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[1]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120s        1 min
    sleep   120s

9_verify logins After adding uplink port to uplinkset in LIG
    [Documentation]             verify logins After adding uplink port to uplinkset in LIG
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Log to console and logfile      ${output_2}}
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

10_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

11_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state


12_changing linkstability time to 180
    [Documentation]             changing linkstability time to 180
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[8]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

13_Edit LIG to delete uplink port in each uplinkset
    [Documentation]             Edit LIG to delete uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[0]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120s        1 min
    sleep   120s

14_verify logins After deleting uplink port in uplinkset in LIG
    [Documentation]             verify logins After deleting uplink port in uplinkset in LIG
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail}  ${Alr_serverpoweron}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after deleting ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


15_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

16_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state

17_Edit LIG with one more uplink port in each uplinkset
    [Documentation]             Edit LIG with one more uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[2]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120s        1 min
    sleep   120s

18_verify logins After adding uplink port in uplinkset in LIG
    [Documentation]             verify logins After adding uplink port in uplinkset in LIG
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail3} ${alr_after_addingports}
    Log to Console      Login count details after adding uplink ports ${alr_after_addingports}
    Log to Console      Login count details after adding uplink ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

##OVTC89 OVF222_api_TC_Verify Auto login redistribution by add / delete Uplink ports from LI

02_Edit LIG to delete uplink port in each uplinkset
    [Documentation]             Edit LIG to delete uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[0]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    220 min     1 min
    sleep   300s


2a_changing linkstability time to 120
    [Documentation]             changing linkstability time to 120
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-2]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s


2b_Edit LI with one more uplink port in each uplinkset
    [Documentation]             Edit LI with one more uplink port in each uplinkset
    ${li_uri} =     Get LI URI   ${LE}-${LIG1}
    :FOR     ${ele}   IN   @{uplink_sets}
    \   ${body} =       Build US body   ${ele}  ${li_uri}
    \   ${uplinksets} =         Fusion Api Get Uplink Set   param=?filter="'name'=='${ele['name']}'"
    \   ${us} =                 Get From List   ${uplinksets['members']}    0
    \   ${us_uri} =             Get From Dictionary ${us}   uri
    \   ${resp} =               Fusion Api Edit Uplink Set  body=${body}    uri=${us_uri}
    \   ${task} =               Wait For Task   ${resp}     5 min   15s
    \   Validate Response   ${task} ${valDict}
    \   sleep   180s
    sleep   120s


2c_verify logins After adding uplink port to uplinkset in LI
    [Documentation]             verify logins After adding uplink port to uplinkset in LI
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


2d_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}



2f_changing linkstability time to 180
    [Documentation]             changing linkstability time to 180
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s


2g_Edit LI to delete uplink port in each uplinkset
    [Documentation]             Edit LI to delete uplink port in each uplinkset
    ${li_uri} =     Get LI URI   ${LE}-${LIG1}
    :FOR     ${ele}   IN   @{uplink_sets1}
    \   ${body} =       Build US body   ${ele}  ${li_uri}
    \   ${uplinksets} =         Fusion Api Get Uplink Set   param=?filter="'name'=='${ele['name']}'"
    \   ${us} =                 Get From List   ${uplinksets['members']}    0
    \   ${us_uri} =             Get From Dictionary ${us}   uri
    \   ${resp} =               Fusion Api Edit Uplink Set  body=${body}    uri=${us_uri}
    \   ${task} =               Wait For Task   ${resp}     5 min   15s
    \   Validate Response   ${task} ${valDict}
    \   sleep   180s
    sleep   180s


2h_verify logins After deleting uplink port in uplinkset in LI
    [Documentation]             verify logins After deleting uplink port in uplinkset in LI
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail}  ${Alr_serverpoweron}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after deleting ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

2i_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

2j_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state

2k_Edit LIG with one more uplink port in each uplinkset
    [Documentation]             Edit LIG with one more uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[1]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    220 min     1 min
    sleep   180s

2l_verify logins After adding uplink port in uplinkset in LIG
    [Documentation]             verify logins After adding uplink port in uplinkset in LIG
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


##### OVTC91 OVF222_api_TC_verify auto login redistribution by enable/disable uplink port from interconnect page

3A_changing linkstability time to 60
    [Documentation]             changing linkstability time to 60
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}

3B_disable interconnect ports
    [Documentation]             disable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      false
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    sleep   60s

3C_verify logins After after disabling uplinkports
    [Documentation]             verify logins After after disabling uplinkports
    ${out}=     fusion_api_get_li
    Log to console and logfile      ${out['members'][0]['uri']}
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${Alr_output_disable}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after adding the interconnect ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


3D_Enable interconnect ports
    [Documentation]             Enable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      true
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    \   sleep   60s
    sleep   60s


3E_verify logins After Enabling the ports
    [Documentation]             verify logins After Enabling the ports
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      logins After Enabling the ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


3F_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

3G_Checking linked uplink/downlink port in interconnect
    [Documentation]             Checking linked uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state


####OVTC95 OVF222_api_TC_verify auto login redistribution while, switching between manual and auto
######OVTC96 OVF222_ui_TC_Verify_auto_login_redistribution_with_different_stability_interval

4A_Edit LIG with one uplink port in each uplinkset
    [Documentation]             Edit LIG with one uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[0]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    220 min     1 min
    sleep   200s

4B_verify logins After editing LIG
    [Documentation]             verify logins After editing LIG
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail}  ${Alr_serverpoweron}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details After editing LIG ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


4C_changing linkstability time to 60
    [Documentation]             changing linkstability time to 60
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

4D_Edit LIG with one more uplink port in each uplinkset
    [Documentation]             Edit LIG with one more uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[1]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120 min     1 min
    sleep   120s

4E_verify logins After adding uplink port to uplinkset in LIG
    [Documentation]             verify logins After adding uplink port to uplinkset in LIG
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4F_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}


4G_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state

4H_changing linkstability time to 0
    [Documentation]             changing linkstability time to 0
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

4I_disable interconnect ports
    [Documentation]             disable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      false
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    sleep   60s


4J_verify logins After after disabling uplinkports
    [Documentation]             verify logins After after disabling uplinkports
    ${out}=     fusion_api_get_li
    Log to console and logfile      ${out['members'][0]['uri']}
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${Alr_output_disable}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after disabling the interconnect ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4K_Enable interconnect ports
    [Documentation]             Enable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      true
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    \   sleep   180s


4L_verify logins After Enabling the ports
    [Documentation]             verify logins After Enabling the ports
    ${out}=     fusion_api_get_li
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${Alr_output_disable}
    Log to console and logfile      ${output_2}
    Log to console and logfile      ${Alr_output_disable}
    Log to Console      Login count details after enabling the interconnect ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


4M_Redistribute Login Manually
    [Documentation]             Redistribute Login Manually
    ${out}=     fusion_api_get_li
    ${uplinkset}=   fusion_api_get_uplink_set
    ${us_name}= create list
    Append to list  ${us_name}  ${lig_uplink_sets['UplinkSet_1']['name']}   ${lig_uplink_sets['UplinkSet_3']['name']}   ${lig_uplink_sets['UplinkSet_2']['name']}   ${lig_uplink_sets['UplinkSet_4']['name']}
    Log to console and logfile      ${us_name}
    ${return_data}=     manual_login_redistribution ${APPLIANCE_IP} ${out['members'][0]['uri']} ${uplinkset}    ${us_name}
    sleep   160sec

4N_verify logins After Redistribute Login Manually
    [Documentation]             verify logins After Redistribute Login Manually
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4O_changing linkstability time to 20
    [Documentation]             changing linkstability time to 20
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

4P_disable interconnect ports
    [Documentation]             disable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      false
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    \   sleep       180
    sleep       180

4Q_verify logins After after disabling uplinkports
    [Documentation]             verify logins After after disabling uplinkports
    ${out}=     fusion_api_get_li
    Log to console and logfile      ${out['members'][0]['uri']}
    ${output_2} ${logins}=  verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${Alr_output_disable}
    Log to console and logfile      ${output_2}
    Log to Console      Login count details after disabling the interconnect ports ${logins}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4R_Enable interconnect ports
    [Documentation]             Enable interconnect ports
    ${interconnects}=   fusion_api_get_interconnect
    ${ports_uri}=   get_port_uri    ${interconnects}    ${bay_port_detail2}
    Log to Console      ${ports_uri}
    :FOR    ${ele}  in  @{interconnect_ports_to_disable}
    \   @{temp} =  Split String ${ports_uri[str(${ele})]}   /ports
    \   ${output}=  fusion_api_get_interconnect_ports   ${temp[0]}  ${api_version}  ${temp[-1]}
    \   ${payload}=     build_edit_interconnect_payload     ${output}   ${edit_interconnect_port_payload_keys}      true
    \   ${status}=  edit interconnect   ${APPLIANCE_IP} ${ports_uri[str(${ele})]}   ${payload}
    \   sleep       180
    sleep       20

4S_verify logins After Enabling the ports
    [Documentation]             verify logins After Enabling the ports
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      logins After Enabling the ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"

4T_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

4U_Checking linked uplink/downlink port in interconnect
    [Documentation]             Checking linked uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state

4V_changing linkstability time to 1801 and verify error message
    [Documentation]             changing linkstability time to 1801 and verify error message
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[5]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s


4W_changing linkstability time to -1 and verify error message
    [Documentation]             changing linkstability time to -1 and verify error message
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[6]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

####OVTC3114 OVF222_api_TC_verify manual login redistribution works, when we configured Auto login redistribtion

5A_Edit LIG with one port in each uplinkset
    [Documentation]             Edit LIG with one port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[0]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120 min     1 min
    sleep   120s

5B_changing linkstability time to 120
    [Documentation]             changing linkstability time to 120
    ${fc_hill_names} =    Copy Dictionary   ${fc_hill_names}
    :FOR     ${name}   IN   @{fc_hill_names}
    \   ${net} =    Fusion Api Get FC Networks  param=?filter="'name'=='${name}'"
    \   ${body} =   Get From Dictionary     ${net}  members
    \   Log to console and logfile  resp111 is ${body[0]}
    \   Set to Dictionary   ${body[0]}  linkStabilityTime   ${intervals[-1]}
    \   ${resp} =   Fusion Api Edit Fc Network  body=${body[0]} uri=${body[0]['uri']}
    \   Log to console and logfile  resp111 is ${resp}
    \   ${task} =   Wait For Task   ${resp}     120s    2s

5C_Edit LIG with one more uplink port in each uplinkset
    [Documentation]             Edit LIG with one more uplink port in each uplinkset
    ${body} =   Build LIG body      ${lig_hill_new[1]}
    Log to console  \n creating LIG ${body}
    ${lig_uri} =    Get LIG Uri     ${LIG1}
    ${resp} =   Fusion Api Edit LIG     body=${body}    uri=${lig_uri}
    Log to console  \n Editing LIG ${resp}
    ${task} =   Wait For Task   ${resp}     120s    2s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-LIG is edited with
    ${Li} =    Get LI URI    ${LE}-${LIG1}
    Perform an LI Update From Group    ${Li}    120 min     1 min
    sleep   200sec

5D_Redistribute Login Manually
    [Documentation]             Redistribute Login Manually
    ${out}=     fusion_api_get_li
    ${uplinkset}=   fusion_api_get_uplink_set
    ${us_name}= create list
    Append to list  ${us_name}  ${lig_uplink_sets['UplinkSet_1']['name']}   ${lig_uplink_sets['UplinkSet_3']['name']}   ${lig_uplink_sets['UplinkSet_2']['name']}   ${lig_uplink_sets['UplinkSet_4']['name']}
    Log to console and logfile      ${us_name}
    ${return_data}=     manual_login_redistribution ${APPLIANCE_IP} ${out['members'][0]['uri']} ${uplinkset}    ${us_name}
    sleep   60sec

5E_verify logins After Redistribute Login Manually
    [Documentation]             verify logins After Redistribute Login Manually
    ${Alr_logins}=  create list
    ${out}=     fusion_api_get_li
    Append to list  ${Alr_logins}   ${Alr_after_enable} ${alr_after_addingport}
    :FOR   ${ALR}   IN   @{Alr_logins}
    \   ${output_2} ${logins} = verify_login_count  ${APPLIANCE_IP} ${out['members'][0]['uri']} ${bay_port_detail2} ${ALR}
    \   Log to Console      ${ALR}
    \   Log to Console      Login count details after adding ports ${logins}
    \   Continue For Loop If    '${output_2}' == 'False'
    \   Run Keyword If    '${output_2}' == 'True'    Exit For Loop
    \   Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"
    Log to console and logfile      ${output_2}}
    Run keyword unless  '${output_2}'== 'True'  Fail    "The login counts dsplayed are incorect and not expected"


5F_Validating the Interconnect State
    [Documentation]             Validating the Interconnect State
    Validate IC State    ${IC_Configured}

5G_verifying status uplink/downlink port in interconnect
    [Documentation]             verifying status uplink/downlink port in interconnect
    ${len}   Get Length   ${INTERCONNECTS}
    :FOR   ${IC}   IN RANGE    0    ${len}
    \   Log to console    uplink port ${Linked_Uplink_ports[${IC}]}
    \   Log to console    interconnecct value ${INTERCONNECTS[${IC}]}
    \   Get Port List from IC    ${Linked_Uplink_ports[${IC}]}    ${INTERCONNECTS[${IC}]}       Uplink
    \   Log to console    verified uplink sattus
    \   Log to console   downlink port value ${Linked_Downlink_port[${IC}]}
    \   Get Port List from IC    ${Linked_Downlink_port[${IC}]}    ${INTERCONNECTS[${IC}]}      Downlink
    Log to console and logfile      \n Uplinks and Downlinks are in Linked state

***keywords***
Suite Cleanup
    [Documentation]  Clean up
    Set Log Level    TRACE

    Power off ALL Servers
    Remove All Server Profiles
    Remove All Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL Network Sets
    Remove All Users

Login to IC via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}   ${PASSWORD}   ${USERNAME}=${IC_SSH_USERNAME}
    ...                             ${PROMPT}=${IC_PROMPT}
    ...                         ${TIMEOUT}=${IC_TIMEOUT}    ${ALIAS}=Ic_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Add FC Networks
    [Documentation]             Adding FC networks
    [Arguments]     @{fcnets}
    Log to console and logfile    \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \       ${resp} =    Fusion Api Create FC Network   body=${fcnet}
    \       ${task} =   Wait For Task   ${resp}     60s    2s

Get Port List from IC
    [Documentation]             Get Port List from IC
    [Arguments]    ${port_no}   ${IC}   ${portType}
    ${uri} =    Get IC URI    ${IC}
    ${len}    Get Length    ${port_no}
    :FOR    ${y}    IN RANGE    0    ${len}
    \    ${ic_uri} =        catenate    ${uri}/ports
    \    Log to console and logfile   ic catenate ${ic_uri}
    \    ${resp}        Fusion Api Get Interconnect     ${uri}
    \    Verify Port Status    ${resp['ports']}    ${port_no[${y}]}    ${portType}


Verify Port Status
    [Documentation]             Verify Port Status
    [Arguments]     ${resp}    ${port_no}   ${portType}
    ${len} =    Get Length    ${resp}
    :FOR    ${y}    IN RANGE    0  ${len}-1
    \    ${count} =    Set Variable    0
    \    Run Keyword If    '${resp[${y}]['portName']}' != '${port_no}' or '${resp[${y}]['portType']}' != '${portType}'      Continue For Loop
    \    Should Match Regexp     ${resp[${y}]['portStatus']}    Linked
    \    ${count} =    Evaluate    ${count} + 1
    \    Run Keyword If    ${count}==${len}    Exit For Loop