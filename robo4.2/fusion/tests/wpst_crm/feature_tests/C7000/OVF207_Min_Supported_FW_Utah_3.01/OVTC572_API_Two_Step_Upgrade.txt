*** Settings ***

Documentation     Feature Test: OVF207: C7000: Minimum Supported Version of Utah FW 3.01
...               OVTC572--OVF207_API_TC_Verify the two step upgrade is successful from 1.11 to 3.01 to 3.08

Resource            ../../../../resource/fusion_api_all_resource_files.txt

Library                   FusionLibrary
Library                   RoboGalaxyLibrary
Library                   Collections
Library                   OperatingSystem
Library                   Process
Library                   ServerOperations
Variables                 data_variables.py	


*** Variables ***
${APPLIANCE_IP}            15.186.13.157
${module_file_path}       ${CURDIR}\\GetServerIPs.py

*** Test Cases ***

1.Login to Appliance and initial clean up
    Set Log Level    TRACE
    ${Login_response} =   Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless	${Login_response[0]['status_code']}== 200	Fail	"Unable to Login"
    Log to console and logfile    Test Step-1 completed successfully

2.Initial Clean up
    Remove ALL Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL Users

3.Create LIG, EG and import enclosure with Utah FW version as 1.11
    ${fc_networks} =    Get Variable Value    ${fcNet_utah}
    Run Keyword If   ${fc_networks} is not ${null}    Add FC Networks from variable    ${fc_networks}
    ${body} =   Build LIG body      ${lig_utah_111}
    ${resp_lig} =    Fusion Api Create LIG    ${body}
    ${task} =    Wait For Task    ${resp_lig}    120s    2s
    Log to console and logfile    LIG created successfully

    ${enc_groups} =  Get Variable Value   ${enc_group_utah_111}
    Run Keyword If   ${enc_groups} is not ${null}   Add Enclosure Group from variable    ${enc_groups}
    Log to console and logfile    EG created succesfully
    ${EG_uri}=    Get Enclosure Group URI    ${EG1}
    Set To Dictionary    ${enc_body1}    enclosureGroupUri    ${EG_uri}
    ${resp_enc}=    Fusion Api Add Enclosure    ${enc_body1}
    Run keyword unless    ${resp_enc['status_code']}== 202    Fail    ${resp_enc['message']}
    ${task} =   Wait For Task    ${resp_enc}    15min   1min
    Log to console and logfile  \n\nImported the enc Successfully !!

4.Validate interconnect firmware version
    :FOR    ${IC}    IN    @{INTERCONNECTS_UTAH}
    \   ${resp} =    Fusion Api Get Interconnect    param=?filter="'name' = '${IC}'"
    \   ${firmwareVersion} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion 
    \   Run keyword If    '${firmwareVersion}' != '${fc_firmwareVersion_old}'    Fail    msg="Firmware version mismatch"
    \   ...    ELSE     Log to console and logfile    \nFirmware Version is validated as ${fc_firmwareVersion_old} for ${IC}

5.Create Server Profile and verify traffic
    Log to console and logfile    \n-Creating Server Profile in OV and Powering On with LUN mapped
    Add Server Profiles from variable     ${server_profiles_gen9}
    Power on server    ${server_profiles[0]['serverHardwareUri']}
    sleep   260s

    Set Log Level    TRACE
	${output_1}	${msg_1}=		executes		${linux_details}	${oa_details_1}   ${module_file_path}		${diskspd_cmd1}	${windows_server_cred}
	Run keyword unless	'${msg_1}'== 'PASS'	Fail	"Unable to verify the IO Traffic"
	Log To Console		"The IO Traffic Details are as follows: \n"
	Log to Console		${output_1}

6.Uploading the FW bundle of Utah module version of 3.01 and 3.08
    Remove Environment Variable     https_proxy    http_proxy
    Log to console and logfile    \nUploading spp bundle with version 3.01"
    ${resp} =     Fusion Api Upload Firmware Bundle      localfile=${CURDIR}/SPP/${SPP_bundle_301}
    Log to Console    Uploadsppdetails ${resp}
    Log to Console and logfile    \n ${SPP_bundle_301}SPP bundle is successfully uploaded

    Log to console and logfile    \nUploading spp bundle with version 3.08"
    ${resp} =     Fusion Api Upload Firmware Bundle      localfile=${CURDIR}/SPP/${SPP_bundle_308}
    Log to Console    Uploadsppdetails ${resp}
    Log to Console and logfile    \n ${SPP_bundle_308}SPP bundle is successfully uploaded

7.Upgrading the firmware through LI page to 3.01 
    Log to console and logfile     \nDowngrading firmware through LI page
    ${li_uri} =    Get LI URI   ${LI}
    Set to dictionary     ${liupdate_body}     sppUri    ${fw_uri_301}
    ${response}=    Fusion Api Li Upgrade Firmware    ${liupdate_body}    ${li_uri}
    Log to console    \n The response is:${response}
    Run Keyword If  ${response['status_code']} !=202    fail    msg=\nLI Firmware update Failed. \n ErrorCode:${response['errorCode']}\nMessage:${response['message']}
    ${task} =     Wait For Task        ${response}   60min    2min
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    msg=\nLI Firmware update Failed. \n ErrorCode:${task['taskErrors'][0][errorCode]}\n :Message ${task['taskErrors'][0][errorCode]}
    ...         ELSE    Log to console and logfile  \n\nLI FW Upgrade completed successfully

8.Validate interconnect firmware version as 3.01, state and traffic
    :FOR    ${IC}    IN    @{INTERCONNECTS_UTAH}
    \   ${resp} =    Fusion Api Get Interconnect    param=?filter="'name' = '${IC}'"
    \   ${firmwareVersion} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    \   ${state}=     Get From Dictionary     ${resp['members'][0]}   state 
    \   Run keyword If    '${firmwareVersion}' != '${fc_firmwareVersion_301}'    Fail    msg="Firmware version mismatch"
    \   ...    ELSE     Log to console and logfile    \nFirmware Version is validated as ${fc_firmwareVersion_301} for ${IC}
    \   Run Keyword If    '${state}' != 'Configured'    fail      msg="The IC module ${IC} is not showing configured state" 
    \    ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state
    
	${output_1}	${msg_1}=		executes		${linux_details}	${oa_details_1}   ${module_file_path}		${diskspd_cmd1}	${windows_server_cred}
	Run keyword unless	'${msg_1}'== 'PASS'	Fail	"Unable to verify the IO Traffic"
	Log To Console		"The IO Traffic Details are as follows: \n"
	Log to Console		${output_1}
	
9.Upgrading to 3.08 from LE page
    ${resp} =    Fusion Api Get Logical Enclosure
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    ${etag}=    Get From Dictionary    ${resp['members'][0]}    eTag
    ${headers} =   Get From Dictionary     ${resp}  headers
    Set To Dictionary    ${headers}    If-Match    ${etag}
	Set to dictionary     ${leupdate_body[0]['value']}    firmwareBaselineUri    ${fw_uri_308}
	${response}=    Fusion Api Le Firmware Update    ${leupdate_body}    ${uri}    headers=${headers}

	Log to console	\n The response is:${response}
	Run Keyword If  ${response['status_code']} !=202    fail    msg=\nLE Firmware update Failed. \n ErrorCode:${response['errorCode']}\nMessage:${response['message']}
	${task} =     Wait For Task        ${response}   60min    1min
	Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200   fail    msg=\nLE Firmware update Failed. \n ErrorCode:${task['taskErrors'][0][errorCode]}\n :Message ${task['taskErrors'][0][errorCode]}
	...         ELSE    Log to console and logfile  \n\nLE FW Upgrade completed successfully !!

10.Validate interconnect firmware version as 3.08, state and traffic
    :FOR    ${IC}    IN    @{INTERCONNECTS_UTAH}
    \   ${resp} =    Fusion Api Get Interconnect    param=?filter="'name' = '${IC}'"
    \   ${firmwareVersion} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    \   ${state}=     Get From Dictionary     ${resp['members'][0]}   state 
    \   Run keyword If    '${firmwareVersion}' != '${fc_firmwareVersion_latest}'    Fail    msg="Firmware version mismatch"
    \   ...    ELSE     Log to console and logfile    \nFirmware Version is validated as ${fc_firmwareVersion_latest} for ${IC}
    \   Run Keyword If    '${state}' != 'Configured'    fail      msg="The IC module ${IC} is not showing configured state" 
    \    ...     ELSE   Log to console and logfile    \n The IC module ${IC} is in configured state
    
	${output_1}	${msg_1}=		executes		${linux_details}	${oa_details_1}   ${module_file_path}		${diskspd_cmd1}	${windows_server_cred}
	Run keyword unless	'${msg_1}'== 'PASS'	Fail	"Unable to verify the IO Traffic"
	Log To Console		"The IO Traffic Details are as follows: \n"
	Log to Console		${output_1}
	
11. CleanUp
    Power OFF ALL Servers
    Remove ALL Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL Users
