*** Settings ***
Documentation    Feature Test: QoS
Resource   OVAConfig.txt
#Force Tags     Buildup
Suite Setup    Load Test Data and Open Browser
#Suite Teardown    Logout And Close All Browsers
Library            Dialogs
Library         Collections
Library    String
Library         BuiltIn

*** Test Cases ***

01 Log into fusion as Administrator
    [Documentation]    Log in to Appliance
    Log To Console    *********Log into Appliance as Administrator****************
    ${user} =    Get Data By Property    ${TestData.users}    name    Administrator
    fusion_ui_login_to_appliance    ${user[0].name}
    Log to Console    Successfully logged in as Administrator
    Fusion UI Remove All Enclosures
    fusion_ui_remove_all_enclosure_groups
    fusion_ui_remove_all_logical_interconnect_groups

02.Create Logical Interconnect Group
    ${Status1}=    Fusion UI Create Logical Interconnect Group     @{TestData.ligs}
    Run Keyword If  '${Status1}' == 'True'   Log to Console  LIG CREATED SUCCESSFULLY    ELSE    Fail

03.Create EG
    ${Status1}=    Fusion UI Create Enclosure Group    @{TestData.encgroups}
    Run Keyword If  '${Status1}' == 'True'   Log to Console  EG CREATED SUCCESSFULLY    ELSE    Fail

04.Add enclosure
    ${Status1}=    Fusion UI Add Enclosure     @{TestData.enclosures_C7K}
    Run Keyword If  '${Status1}' == 'True'   Log to Console  Enclosure Added Successfully    ELSE    Fail

#############################################################################################################################
1.verifying Default QoS value in LIG AND CREATING liG
    ${Status} =    fusion_ui_validate_logical_interconnect_group     @{TestData.ligC7K_1}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Default QoS value is Passthrough    ELSE    Fail
#verifying default QoS value in Li
    ${Status}=    fusion_ui_verify_logical_interconnects     @{TestData.liC7K}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Default QoS value is Passthrough    ELSE    Fail
#############################################################################################################################
2 Editing LI
    Sleep   3mins
    ${Status1}=     fusion_ui_validate_qos_configuration_in_li  @{TestData.li1_C7K}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Verified QOS in LI and Edited LI successfully   ELSE    fail
    Sleep   3mins
#Update from Group
    ${Status}   fusion_uiupdate_logical_interconnect_from_group     @{TestData.li1_C7K}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Update from Group in LI is successful   ELSE    fail

#Verifying QOS in LI matches with LIG after Update
    ${Status} =    fusion_ui_verify_logical_interconnects    @{TestData.li1_C7K_verify}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Verified QOS in LI after update from Group  ELSE    Fail
#############################################################################################################################
3.VERIFYING THE DEFAULT QoS VALUES IN LIG
   [Documentation]     *********QoS_3****************
    ${Status}=    fusion_ui_validate_qos_configuration          @{TestData.lig_C7K_3}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED QoS SETTINGS SUCCESSFULLY IN LIG   ELSE    Fail
#.VERIFYING THE DEFAULT QoS VALUES IN LI
    ${Status} =    fusion_ui_validate_qos_configuration_in_li   @{TestData.Li_C7K_3}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED QoS SETTINGS SUCCESSFULLY IN LI    ELSE    Fail
#############################################################################################################################
04. Edit LIG
    @{Status1}=    fusion_ui_validate_qos_configuration      @{TestData.ligc4}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    Log to Console  ${Status1[3]}

    @{enabled1} =   Split String    ${TestData.ligc4[0].enabledValue}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{enabled2} =   Split String    ${TestData.ligc4[0].defaultEnabled}    ,
    Log to console and logfile    ${enabled2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled2}
    Log to console and logfile    ${ret_status}

    @{share1} =   Split String    ${TestData.ligc4[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{share2} =   Split String    ${TestData.ligc4[0].defaultShare}    ,
    Log to console and logfile    ${share2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share2}
    Log to console and logfile    ${ret_status}

    @{maxshare1} =   Split String    ${TestData.ligc4[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail

    @{maxshare2} =   Split String    ${TestData.ligc4[0].defaultMaxshare}    ,
    Log to console and logfile    ${maxshare2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare2}
    Log to console and logfile    ${ret_status}

    @{mapping1} =   Split String    ${TestData.ligc4[0].defaultMapping}    ,
    Log to console and logfile    ${mapping1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[3]}   ${mapping1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for DSCP and Dot1p values are in NO MAPPING state mapping value verification condition satisfied  ELSE    fail
    Log to console and logfile    ${ret_status}

#07. EDIT LI
    @{Status1}=    fusion_ui_validate_qos_configuration_in_li       @{TestData.lic4}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    Log to Console  ${Status1[3]}

    @{enabled1} =   Split String    ${TestData.lic4[0].enabledValue}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{enabled2} =   Split String    ${TestData.lic4[0].defaultEnabled}    ,
    Log to console and logfile    ${enabled2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled2}
    Log to console and logfile    ${ret_status}

    @{share1} =   Split String    ${TestData.lic4[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{share2} =   Split String    ${TestData.lic4[0].defaultShare}    ,
    Log to console and logfile    ${share2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share2}
    Log to console and logfile    ${ret_status}

    @{maxshare1} =   Split String    ${TestData.lic4[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail

    @{maxshare2} =   Split String    ${TestData.lic4[0].defaultMaxshare}    ,
    Log to console and logfile    ${maxshare2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare2}
    Log to console and logfile    ${ret_status}

    @{mapping1} =   Split String    ${TestData.lic4[0].defaultMapping}    ,
    Log to console and logfile    ${mapping1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[3]}   ${mapping1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for DSCP and Dot1p values are in NO MAPPING state mapping value verification condition satisfied  ELSE    fail
    Log to console and logfile    ${ret_status}

#08. Edit LIG
    @{Status1}=    fusion_ui_validate_qos_configuration      @{TestData.ligC4}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    Log to Console  ${Status1[3]}

    @{enabled1} =   Split String    ${TestData.ligC4[0].defaultEnabled}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Log to console and logfile    ${ret_status}

    @{enabled2} =   Split String    ${TestData.ligC4[0].enabledValue}    ,
    Log to console and logfile    ${enabled2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled2}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{share1} =   Split String    ${TestData.ligC4[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{share2} =   Split String    ${TestData.ligC4[0].defaultShare}    ,
    Log to console and logfile    ${share2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share2}
    Log to console and logfile    ${ret_status}

    @{maxshare1} =   Split String    ${TestData.ligC4[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail

    @{maxshare2} =   Split String    ${TestData.ligC4[0].defaultMaxshare}    ,
    Log to console and logfile    ${maxshare2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare2}
    Log to console and logfile    ${ret_status}

    @{mapping1} =   Split String    ${TestData.ligC4[0].defaultMapping}    ,
    Log to console and logfile    ${mapping1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[3]}   ${mapping1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for DSCP and Dot1p values are in NO MAPPING state mapping value verification condition satisfied  ELSE    fail
    Log to console and logfile    ${ret_status}

#09. EDIT LI
    @{Status1}=    fusion_ui_validate_qos_configuration_in_li       @{TestData.liC4}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    Log to Console  ${Status1[3]}

    @{enabled1} =   Split String    ${TestData.liC4[0].defaultEnabled}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Log to console and logfile    ${ret_status}

    @{enabled2} =   Split String    ${TestData.liC4[0].enabledValue}    ,
    Log to console and logfile    ${enabled2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled2}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{share1} =   Split String    ${TestData.liC4[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{share2} =   Split String    ${TestData.liC4[0].defaultShare}    ,
    Log to console and logfile    ${share2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share2}
    Log to console and logfile    ${ret_status}

    @{maxshare1} =   Split String    ${TestData.liC4[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'False'  Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail

    @{maxshare2} =   Split String    ${TestData.liC4[0].defaultMaxshare}    ,
    Log to console and logfile    ${maxshare2}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare2}
    Log to console and logfile    ${ret_status}

    @{mapping1} =   Split String    ${TestData.liC4[0].defaultMapping}    ,
    Log to console and logfile    ${mapping1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[3]}   ${mapping1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for DSCP and Dot1p values are in NO MAPPING state mapping value verification condition satisfied  ELSE    fail
    Log to console and logfile    ${ret_status}
#############################################################################################################################
05. Edit LIG
   [Documentation]     *********QoS_5****************
    ${Status1}=   fusion_ui_validate_qos_configuration      @{TestData.ligc5}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  FCoE lossless option is not editable    ELSE    fail
#. EDIT LI
    ${Status} =   fusion_ui_validate_qos_configuration_in_li        @{TestData.lic5}
    Log to Console  ${Status}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  FCoE lossless option is not editable    ELSE    fail
#############################################################################################################################
06 Verify share and maxshare in Logical Interconnect Group
    @{resp}=    fusion_ui_validate_qos_configuration            @{TestData.ligs6}
    Log to Console  \n@{resp}
    Run Keyword If  '${resp[0]}' != '${TestData.values[0].share}'   Fail    ELSE  log to console  \n-Share is present in LIG page
    Run Keyword If  '${resp[1]}' != '${TestData.values[1].maxshare}'    Fail    ELSE  log to console  \n-MaxShare is present in LIG page
    Should Be Equal As Strings    ${resp[0]}  ${TestData.values[0].share}
    Should Be Equal As Strings    ${resp[1]}  ${TestData.values[1].maxshare}
# Verify LI page
    @{resp}=    fusion_ui_validate_qos_configuration_in_li  @{TestData.ligs7}
    Run Keyword If  '${resp[0]}' != '${TestData.values[0].share}'   Fail    ELSE  log to console  \n-Share is present in LI page
    Run Keyword If  '${resp[1]}' != '${TestData.values[1].maxshare}'    Fail    ELSE  log to console  \n-MaxShare is present in LI page
#############################################################################################################################
8. Edit option verification for FCOELOSSLESS in LIG
   [Documentation]     *********QoS_8****************
    ${Status1}=    fusion_ui_validate_qos_configuration     @{TestData.ligTB8}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Edit option for Fcoelossless class is not available ELSE    fail
#.Edit option verification for FCOELOSSLESS in LI
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li     @{TestData.li8}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Edit option for Fcoelossless class is not available ELSE    fail
#############################################################################################################################
9.verifying DOTIP AND DSCP MAPPINGS liG WHEN SELECTED
   [Documentation]     *********QoS_9****************
    ${Status}=    fusion_ui_validate_qos_configuration      @{TestData.ligTB9}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Successfully verified DOTip and DSCP mappings   ELSE    fail
# verifying DOTIP AND DSCP MAPPINGS li WHEN SELECTED
    ${Status}=    fusion_ui_validate_qos_configuration_in_li      @{TestData.liTB9}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  Successfully verified DOTIP and DSCP mappings   ELSE    fail
#############################################################################################################################
10. Verifying Traffic class fields in LIG
   [Documentation]     *********QoS_10***************
    ${Status1}=    fusion_ui_validate_qos_configuration     @{TestData.ligs_10_traffic}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Verified traffic class elements in LIG  ELSE    fail
#Verifying Traffic class fields in LI
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li  @{TestData.li10_C7K_traffic}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Verified traffic class elements in LI   ELSE    fail
#############################################################################################################################
11.VERIFYING BEST EFFORT NOT EDITABLE IN LI
   [Documentation]     *********QoS_11****************
#05.VERIFYING BEST EFFORT NOT EDITABLE IN LIG
    ${Status1}=    fusion_ui_validate_qos_configuration     @{TestData.lig_C7K_11}
    Run Keyword If  '${Status1}' == 'True'  Log to Console   BEST EFFORT NOT EDITABLE IN LIG IS VERIFIED SUCCESSFULLY   ELSE    fail
#06.VERIFYING THE UNIQUE CLASS NAMES IN LIG
    ${Status1}=    fusion_ui_validate_qos_configuration        @{TestData.ligc11}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console   verified unique class names  ELSE    fail
    Log to Console  UNIQUE CLASSNAMES ARE VERIFIED SUCCESSFULLY IN LIG
#07.VERIFYING BEST EFFORT NOT EDITABLE IN LI
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li       @{TestData.Li_C7k_11}
    Run Keyword If  '${Status1}' == 'True'  Log to Console   BEST EFFORT NOT EDITABLE IN LI IS VERIFIED SUCCESSFULLY    ELSE    Fail
#08.VERIFYING THE UNIQUE CLASS NAMES IN LI
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li      @{TestData.Li13}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console   verified unique class names  ELSE    Fail
    Log to Console  UNIQUE CLASSNAMES ARE VERIFIED SUCCESSFULLY IN LI
#############################################################################################################################
12. VERIFY DOT1P AND DSCP MAPPING IN LI
   # ${Status1}=   fusion_ui_validate_qos_configuration  @{TestData.ligs12}
    #Log to Console  ${Status1}
    #Run Keyword If  '${Status1}' == 'True'  Log to Console  DOT1P AND DSCP MAPPING IN LIG VERIFIED SUCCESSFULLY ELSE    fail
#. VERIFY DOT1P AND DSCP MAPPING IN LI
    ${Status} =   fusion_ui_validate_qos_configuration_in_li        @{TestData.li12}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  DOT1P AND DSCP MAPPING IN LI VERIFIED SUCCESSFULLY  ELSE    fail
#############################################################################################################################
13.Verifying share value not exceeds 100 in LIG and LI
   [Documentation]     *********QoS_13****************
    ${Status1} =    fusion_ui_validate_qos_configuration        @{TestData.lig13C7K}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  share value does not exceeds 100 in LIG    ELSE    Fail
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li     @{TestData.li13C7K}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  share value does not exceeds 100 in LI    ELSE    Fail
#############################################################################################################################
14.VERIFYING MAXSHARE IN LIG
   [Documentation]     *********QoS_4****************
    ${count}=   Get Length         ${TestData.ligshormx}
    :FOR    ${index}    IN RANGE    0     ${count}
    \    ${Status1}=    fusion_ui_validate_qos_configuration    ${TestData.ligshormx[${index}]}
    \    log to console  \nThe Validation Message is ${Status1}
    \    Run Keyword If  '${Status1}' == 'True'    Log to Console   VERIFIED FEILDVALUES FOR MAXSHARE SUCCESSFULLY IN LIG   ELSE    fail
#.VERIFYING DISABLED CLASS IN LIG
    ${Status}=    fusion_ui_validate_qos_configuration    @{TestData.ligc14}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED DISABLED CLASS SUCCESSFULLY IN LIG ELSE    fail
#.VERIFYING MAXSHARE IN LI
    ${count}=   Get Length         ${TestData.lishormx}
    :FOR    ${index}    IN RANGE    0     ${count}
    \    ${Status1}=    fusion_ui_validate_qos_configuration_in_li  ${TestData.lishormx[${index}]}
    \    log to console  \nThe Validation Message is ${Status1}
    \    Run Keyword If  '${Status1}' == 'True'    Log to Console   VERIFIED FEILDVALUES FOR MAXSHARE SUCCESSFULLY IN LI    ELSE    fail
#.VERIFYING DISABLED CLASS IN LI
    ${Status}=    fusion_ui_validate_qos_configuration_in_li   @{TestData.Li14}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED DISABLED CLASS SUCCESSFULLY IN LI  ELSE    fail
#############################################################################################################################
15.VERIFYING MAXSHARE IN LIG and Li
    [Documentation]    QoS_15 Testcase
    ${count}=   Get Length         ${TestData.ligshormx2}
    :FOR    ${index}    IN RANGE    0     ${count}
    \    ${Status1}=    fusion_ui_validate_qos_configuration    ${TestData.ligshormx2[${index}]}
    \    log to console  \nThe Validation Message is ${Status1}
    \    Run Keyword If  '${Status1}' == 'True'    Log to Console   VERIFIED FEILDVALUES FOR MAXSHARE SUCCESSFULLY IN LIG    ELSE    fail
    log to console  VERIFYING DISABLED CLASS IN LIG
    ${Status}=    fusion_ui_validate_qos_configuration         @{TestData.lig_15}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED DISABLED CLASS SUCCESSFULLY IN LIG ELSE    fail
    log to console  VERIFYING MAXSHARE IN LI
    ${count}=   Get Length         ${TestData.lishormx2}
    :FOR    ${index}    IN RANGE    0     ${count}
    \    ${Status1}=    fusion_ui_validate_qos_configuration_in_li  ${TestData.lishormx2[${index}]}
    \    log to console  \nThe Validation Message is ${Status1}
    \    Run Keyword If  '${Status1}' == 'True'    Log to Console   VERIFIED FEILDVALUES FOR MAXSHARE SUCCESSFULLY IN LI    ELSE    fail
    log to console  VERIFYING DISABLED CLASS IN LI
    ${Status} =    fusion_ui_validate_qos_configuration_in_li   @{TestData.Li_15}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  VERIFIED DISABLED CLASS SUCCESSFULLY IN LI  ELSE    fail
    log to console  Verifying values of all the enabled classes should be unique in LI
#############################################################################################################################
16.Verifying values of all the enabled classes should be unique in LI
    [Documentation]    QoS_16 Testcase
    ${msg} =    fusion_ui_validate_qos_configuration_in_li     @{TestData.li_16_TBird}
    Log to Console    ${msg[0]}
    Log to Console    ${msg[1]}
    Lists Should Be Equal   ${msg[0]}   ${msg[1]}
    Log to Console  values of all the enabled classes are unique
    #Verifying values of all the enabled classes should be unique in LIG
    ${msg} =    fusion_ui_validate_qos_configuration    @{TestData.ligs16}
    Log to Console    ${msg[0]}
    Log to Console    ${msg[1]}
    Lists Should Be Equal   ${msg[0]}   ${msg[1]}
    Log to Console  values of all the enabled classes are unique

#############################################################################################################################
17. Edit logical interconnect group
    [Documentation]    QoS_17 Testcase
    ${msg} =    fusion_ui_validate_qos_configuration    @{TestData.Priority1}
#. Edit logical interconnects
    ${msg} =    fusion_ui_validate_qos_configuration_in_li    @{TestData.Priority2}
#############################################################################################################################
18.VERIFY DOT1P PRIORITY IN LIG AND li
    [Documentation]    QoS_18 Testcase
    ${Status1}=     fusion_ui_validate_qos_configuration        @{TestData.settings2}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  DOT1P PRIORITY VERIFIED SUCCESSFULLY IN LIG ELSE    fail
    Log to Console   VERIFY DOT1P PRIORITY IN LI
    ${Status} =   fusion_ui_validate_qos_configuration_in_li    @{TestData.settings1}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  DOT1P PRIORITY VERIFIED SUCCESSFULLY IN LI  ELSE    fail
#############################################################################################################################
19.To verify LIG page
    ${Status} =    fusion_ui_validate_qos_configuration    @{TestData.ligs19}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  verifiying the LIG page  ELSE   fail
#. Verify LI page
    ${Status} =    fusion_ui_validate_qos_configuration_in_li    @{TestData.li19}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == 'True'   Log to Console  verifying the LI page ELSE  fail
#############################################################################################################################
20. Verify real time class scenarios both in LIG and LI
    [Documentation]    QoS_20 Testcase
    ${output}=  fusion_ui_validate_qos_configuration            @{TestData.lig20}
    Log to Console      ${output}
    Run Keyword If  '${output}' != '${msg}'  Fail    ELSE  log to console  \n-Error message is validated successfully
    ${output1} =    fusion_ui_validate_qos_configuration_in_li    @{TestData.li20}
    Log to Console      ${output1}
    Run Keyword If  '${output1}' != '${msg}'  Fail    ELSE  log to console  \n-Error message is validated successfully
############################################################################################################################
21. Ingress DOT1P mappings verification in LIG
    [Documentation]    QoS_21 Testcase
    ${Status1}=    fusion_ui_validate_qos_configuration     @{TestData.ligc7_21}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  FCoE Traffic and Non-FCoE Traffic are not present   ELSE    fail
#. Ingress DOT1P mappings verification in LI
    ${Status1}=    fusion_ui_validate_qos_configuration_in_li     @{TestData.lic7_21}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  FCoE Traffic and Non-FCoE Traffic are not present   ELSE    fail
############################################################################################################################
22. Edit logical interconnect group
    [Documentation]    QoS_22 Testcase
    ${Status1} =    fusion_ui_validate_qos_configuration        @{TestData.ligs22}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Successfully verified class name doesnot exceeds 255 characters    ELSE    Fail
#. Edit logical interconnects
    ${Status1} =    fusion_ui_validate_qos_configuration_in_li   @{TestData.LI22}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  Successfully verified class name doesnot exceeds 255 characters    ELSE    Fail
############################################################################################################################
23.VERIFING ERROR MESSAGE IN LI
    [Documentation]    QoS_23 Testcase
    fusion_ui_create_fcoe_network       @{TestData.Networks}
    ${Status} =    fusion_ui_edit_logical_interconnects        @{TestData.li23}
    Log to Console  ${Status}
    Run Keyword If  '${Status}' == '${msg1}'    Log to Console  CORRECT ERROR MESSAGE DISPLAYED     ELSE    fail
############################################################################################################################
24. VERIFY QOS STATISTICS IN UPLINK PORT
    [Documentation]  QoS_24 Testcase
    Log To Console    *********QoS_24****************
    ${Status1}=     fusion_ui_navigate_to_interconnects_page
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'None'  Log to Console  SUCCESSFULLY NAVIGATE TO INTERCONNECT PAGE  ELSE    fail
    ${Status1}=    fusion_ui_validate_uplinkPort_qosStatistics   @{TestData.interconnect_qos_24}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  VERIFIED QOS STATISTICS SUCCESSFULLY IN UPLINK PORTS    ELSE    fail
#   VERIFY QOS STATISTICS IN DOWNLINK PORT
    ${Status1}=    fusion_ui_validate_downlinkPort_qosStatistics    @{TestData.interconnect_qos_24}
    Log to Console  ${Status1}
    Run Keyword If  '${Status1}' == 'True'  Log to Console  VERIFIED QOS STATISTICS SUCCESSFULLY IN DOWNLINK PORTS  ELSE    fail
############################################################################################################################
28 Create Users and validate users
    [Documentation]    QoS_28 Testcase
    ${Status}=  Fusion UI Create User       @{TestData.users}
    Run Keyword If  '${Status}' != 'True'  Fail    ELSE  log to console  \n-uSERS validated successfully
    fusion_ui_logout_of_appliance
    Sleep   ${loadtime}

# verify able to change QoS settings from UI in LIG
    ${l} =  Get Length   ${TestData.users}
    Log to Console  ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Log to console  ${x}
    \   ${user} =    Get Data By Property    ${TestData.users}    name    ${TestData.users[${x}].name}
    \   fusion_ui_login_to_appliance    ${TestData.users[${x}].name}
    \   Run Keyword If  '${TestData.users[${x}].name}' == 'Administrator' or '${TestData.users[${x}].name}' == 'NetworkAdmin'   fusion_ui_validate_qos_configuration        @{TestData.lig28}
    \   ...             ELSE    Fusion UI Validate User Privileges Logicalinterconnectgroups       @{TestData.lig28}
    \   fusion_ui_logout_of_appliance
    \   Sleep   ${loadtime}

28. verify able to change QoS settings from UI in LI
    [Documentation]    QoS_28 Testcase
    ${l} =  Get Length   ${TestData.users}
    Log to Console  ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Log to console  ${x}
    \   ${user} =    Get Data By Property    ${TestData.users}    name    ${TestData.users[${x}].name}
    \   fusion_ui_login_to_appliance    ${TestData.users[${x}].name}
    \   Run Keyword If  '${TestData.users[${x}].name}' == 'Administrator' or '${TestData.users[${x}].name}' == 'NetworkAdmin'   fusion_ui_validate_qos_configuration_in_li      @{TestData.li28}
    \   ...             ELSE    Fusion UI Validate User Privileges Logicalinterconnects     @{TestData.li28}
    \   fusion_ui_logout_of_appliance
    \   Sleep   ${loadtime}
############################################################################################################################
29. Edit LIG
    @{Status1} =   fusion_ui_validate_qos_configuration     @{TestData.ligc29}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    @{enabled1} =   Split String    ${TestData.ligc29[0].enabledValue}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{share1} =   Split String    ${TestData.ligc29[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{maxshare1} =  Split String    ${TestData.ligc29[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail
#. EDIT LI
    @{Status1} =   fusion_ui_validate_qos_configuration_in_li       @{TestData.lic29}
    Log to Console  ${Status1[0]}
    Log to Console  ${Status1[1]}
    Log to Console  ${Status1[2]}
    @{enabled1} =   Split String    ${TestData.lic29[0].enabledValue}    ,
    Log to console and logfile    ${enabled1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[0]}   ${enabled1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for enabled verification condition satisfied  ELSE    fail

    @{share1} =   Split String    ${TestData.lic29[0].setShare}    ,
    Log to console and logfile    ${share1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[1]}   ${share1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for shareValue verification condition satisfied   ELSE    fail

    @{maxshare1} =  Split String    ${TestData.lic29[0].setMaxshare}    ,
    Log to console and logfile    ${maxshare1}
    ${ret_status}=    Run Keyword And Return Status    Lists Should Be Equal   ${Status1[2]}   ${maxshare1}
    Run Keyword If  '${ret_status}' == 'True'   Log to Console  List is not equal for maxshare value verification condition satisfied   ELSE    fail
############################################################################################################################
00.final cleanup
    Fusion UI Remove All Enclosures
    fusion_ui_remove_all_enclosure_groups
    fusion_ui_remove_all_logical_interconnect_groups


