ed#Prereq - c7000 with either one sheppard, two bigg, or  bergstrom in Bay 1
#Two blades with os (prefer 1 win 2008Rs with NCV installed)
#Two physical eth connections to TOR

*** Settings ***
Documentation		Feature Test: US23773_US23769_Untagged_Tunneling C7000

Variables 		    data_variables.py

#Suite Setup   		Run FTS and test-specific setup
#Suite Teardown		Suite Teardown
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
Library            Process
Library            Telnet
Library            OperatingSystem
Library         String

Resource            ../../../../resource/fusion_api_all_resource_files.txt


*** Test Cases ***

1.Create Enet Networks -2 Tagged, 2 Untagged and 2 Tunnel and Verify Only one of Tagged, Untagged or Tunnel can be selected at a time.

    Set Log Level    TRACE
    Fusion Api Login Appliance    ${Appliance_IP}    ${admin_credentials}


    Log to Console    \n Networks Creation & Vlan Verification \n
    
  
    Log to console    \n Step2.1 Creating 2 Tagged Networks Creation \n


    :FOR    ${x}    IN RANGE    0    2
    \    ${temp}    Copy Dictionary    ${ethernet_networks[${x}]}
    \    Set To Dictionary    ${temp}    ethernetNetworkType=${Invalid_enettype}
    \    ${resp}    Fusion Api Create Ethernet Network    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure! \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    Run Keyword If  '${resp['errorCode']}' == 'INVALID_JSON_MAPPING'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    \    ...             ELSE    FAIL
    \    ${new}    Get Variable Value    ${ethernet_networks[${x}]}
    \    ${Create}    Fusion Api Create Ethernet Network    body=${ethernet_networks[${x}]}
    \    Run Keyword If  '${Create['status_code']}' == '202'    Log to console  \nStatus Code: ${Create['status_code']} \n Tagged Network Created Successfully!
    \    ...             ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${Create}    ${valDict}    5 s    2 s    True



    Log to console    \n Step 2.2 Creating 2 UnTagged Networks Creation \n


    :FOR    ${x}    IN RANGE    2    4
    \    ${temp}    Copy Dictionary    ${ethernet_networks[${x}]}
    \    Set To Dictionary    ${temp}    ethernetNetworkType=${Invalid_enettype}
    \    ${resp}    Fusion Api Create Ethernet Network    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure! \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    Run Keyword If  '${resp['errorCode']}' == 'INVALID_JSON_MAPPING'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    \    ...             ELSE    FAIL
    \    ${new}    Get Variable Value    ${ethernet_networks[${x}]}
    \    ${Create}    Fusion Api Create Ethernet Network    body=${ethernet_networks[${x}]}
    \    Run Keyword If  '${Create['status_code']}' == '202'    Log to console  \nStatus Code: ${Create['status_code']} \n Untagged Network Created Successfully!
    \    ...             ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${Create}    ${valDict}    5 s    2 s    True



    log to console    \n Step 2.3 Creating 2 Tunnel Networks \n

    :FOR    ${x}    IN RANGE    4    6
    \    ${temp}    Copy Dictionary    ${ethernet_networks[${x}]}
    \    Set To Dictionary    ${temp}    ethernetNetworkType=${Invalid_enettype}
    \    ${resp}    Fusion Api Create Ethernet Network    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure! \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    Run Keyword If  '${resp['errorCode']}' == 'INVALID_JSON_MAPPING'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    \    ...             ELSE    FAIL
    \    ${new}    Get Variable Value    ${ethernet_networks[${x}]}
    \    ${Create}    Fusion Api Create Ethernet Network    body=${ethernet_networks[${x}]}
    \    Run Keyword If  '${Create['status_code']}' == '202'    Log to console  \nStatus Code: ${Create['status_code']} \n Untagged Network Created Successfully!
    \    ...             ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${Create}    ${valDict}    5 s    2 s    True


    log to console    \n Step 3 Verify VlanId's for the created Tagged Networks \n

    :For    ${x}    In Range    0    2
    \    ${resp}    Fusion Api Get Ethernet Networks    param=?filter=name=${Tagged_networks[${x}]}
    \    ${vlan_app}    Get Variable Value    ${resp['members'][0]['vlanId']}
    \    Log to Console    \nThe Created VlanId is:${vlan_app}
    \    ${temp}    Get Variable Value    ${ethernet_networks[${x}]['vlanId']}
    \    Log to console    \nThe VlanId from testdata is:${temp}
    \    Should Be Equal As Numbers    ${vlan_app}    ${temp}
    \    Log to console    \nThe VlanId's of the Tagged networks are verified successfully !!


    log to console    \n Step 4  Create 1 FC Network & Verify VlanId is not supported \n

    ${temp}    Copy Dictionary    ${fc_networks[0]}
    Set To Dictionary    ${temp}    vlanId=None
    Log to console    \nSetting a invalid field VlanId to the body
    ${resp}    Fusion Api Create Fc Network    body=${temp}
    Log to console    \nThe temp is:${resp}
    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure!! VlanId field not supported in FC Netwok Creation \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL
    Run Keyword If  '${resp['errorCode']}' == 'UNRECOGNIZED_JSON_FIELD'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}\n
    ...             ELSE    FAIL
    ${create}    Fusion Api Create Fc Network    body=${fc_networks[0]}
    Run Keyword If  '${create['status_code']}' == '202'    Log to console  \nStatus Code: ${create['status_code']} \n FC Network Created Successfully!
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${create}    ${valDict}    5 s    2 s    True



2.Edit Networks & Verify the behaviour

    Log to console    \n Step 5 Edit one of the tagged, untagged, and tunnel networks - confirm that you are not able to change VLAN type \n


    :For    ${x}    In Range    0    3
    \    ${Network}    Fusion Api Get Ethernet Networks    param=?filter=name=${Network_name[${x}]}
    \    log to console    \n\n Editing the Network : \n${Network_name[${x}]}
    \    ${Network_uri}    Get Variable Value    ${Network['members'][0]['uri']}
    \    ${Network_connectionTemplateUri}    Get Variable Value    ${Network['members'][0]['connectionTemplateUri']}
    \    Log to console    \n"Trying to change the Ethernet Network type "
    \    ${temp}    Copy Dictionary    ${ethernet_edit[${x}]}
    \    Set To Dictionary    ${temp}    connectionTemplateUri=${Network_connectionTemplateUri}
    \    Set To Dictionary    ${temp}    ethernetNetworkType=${Network_type[${x}]}
    \    ${resp}    Fusion Api Edit Ethernet Network    uri=${Network_uri}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure!! Cannot change the ethernet Network Type after Creation \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    Run Keyword If  '${resp['errorCode']}' == 'CRM_CHANGING_ETHERNET_NETWORK_TYPE'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}
    \    ...             ELSE    FAIL


    Log to console    \n Step 6 Edit Bandwith for created Ethernet Networks\n


    :For    ${x}    In Range    0    3
    \    ${Network}    Fusion Api Get Ethernet Networks    param=?filter=name=${Network_name[${x}]}
    \    Log to console    \nThe network name is:*** ${Network_name[${x}]} ***
    \    ${Network_connectionTemplateUri}    Get Variable Value    ${Network['members'][0]['connectionTemplateUri']}
    \    ${Get}    Fusion Api Get Ethernet Networks    uri=${Network_connectionTemplateUri}
    \    ${name}    Get Variable Value    ${Get['name']}
    \    ${temp}    Copy Dictionary    ${Connection_template}
    \    ${Bandwidth}    Get From Dictionary    ${temp}    bandwidth
    \    Set To Dictionary    ${Bandwidth}    typicalBandwidth=${typicalBandwidth[${x}]}
    \    Set To Dictionary    ${Bandwidth}    maximumBandwidth=${maximumBandwidth[${x}]}
    \    Set To Dictionary    ${temp}    bandwidth=${Bandwidth}
    \    Set To Dictionary    ${temp}    name=${name}
    \    ${resp}    Fusion Api Edit Ethernet Network    uri=${Network_connectionTemplateUri}    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '200'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited The Bandwidths of Ethernet Networks
    \    ...             ELSE    FAIL



    log to console    \n Step 7 Confirm you are not able to create network setup with tunnel or untagged networks - create network set - confirm only ethernet (tagged) networks are disabled \n

    Log to Console    \nTrying with Untagged  & Tunnel Network for Networkset

    :For    ${x}    In Range    1    3
    \    ${Invalid_net}    Fusion Api Get Ethernet Networks    param=?filter=name=${Network_name[${x}]}
    \    log to console    \n\n Creating the Networkset using : \n${Network_name[${x}]}
    \    ${Network_uri}    Create List    ${Invalid_net['members'][0]['uri']}
    \    ${temp}    Copy Dictionary    ${network_sets[0]}
    \    Set To Dictionary    ${temp}    networkUris=${Network_uri}
    \    ${resp}    Fusion Api Create Network Set    body=${temp}
    \    Run Keyword If  '${resp['status_code']}' == '400'    Log to console  \n Expected Failure!! Cannot change the ethernet Network Type after Creation \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    Run Keyword If  '${resp['errorCode']}' == 'CRM_INVALID_ETHERNET_NETWORK_IN_NETWORK_SET'    Log to console  \n Expected Failure! \n\nError: ${resp['errorCode']} \nDetails: ${resp['message']}
    \    ...             ELSE    FAIL

    ${Tagged_net}    Fusion Api Get Ethernet Networks    param=?filter=name=${Network_name[0]}
    log to console    \n\n Creating the Networkset using : \n${Network_name[${x}]}
    ${Network_uri}    Create List    ${tagged_net['members'][0]['uri']}
    ${create}    Copy Dictionary    ${network_sets[0]}
    Set To Dictionary    ${create}    networkUris=${Network_uri}
    ${resp}    Fusion Api Create Network Set    body=${create}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Created the Networkset
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    5 s    2 s    True



3.Create LIG & Uplinkset & Verify Edit Uplinkset Behaviour


    ${Untagged_networks_list}    Create List
    ${Tunnel_networks_list}    Create List
    

    ${len}    Get Length    ${Untagged_networks}
    :For    ${x}    In Range    0    ${len}
    \    ${untagged_names}    Fusion Api Get Ethernet Networks    param=?filter=name=${Untagged_networks[${x}]}
    \    Append To List    ${Untagged_networks_list}    ${untagged_names['members'][0]['uri']}

    ${len1}    Get Length    ${Tunnel_networks}
    :For    ${x}    In Range    0    ${len1}
    \    ${Tunnel_names}    Fusion Api Get Ethernet Networks    param=?filter=name=${Tunnel_networks[${x}]}
    \    Append To List    ${Tunnel_networks_list}    ${Tunnel_names['members'][0]['uri']}
    
    

    Log To console    \n Step 7.C Confirm that you can only select ONE tagged, untagged, and tunnel network

    Set To Dictionary    ${uplink_sets['us1']}    networkUris=${Untagged_networks_list}
    Set To Dictionary    ${uplink_sets['us2']}    networkUris=${Tunnel_networks_list}
    ${resp}    Add LIG from variable    ${ligs}
    ${task} =     fusion_api_appliance_setup.Wait For Task   ${resp}   5 s    2 s
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_ONE_ETHERNET_NETWORK_PER_UPLINKSET'    Log to console  \n Expected Failure!! \n\nMessage Details: ${task['taskErrors'][0]['details']}
    ...             ELSE    FAIL


    Log To console    \n Step 7.B Creating LIG with 1 Untagged network Uplinkset & 1 Tunnel network Uplinkset with INVALID TAGGED Network Uri\n
    ${Tagged_uri}    Create List
    ${Tagged_names}    Fusion Api Get Ethernet Networks    param=?filter=name=${Tagged_networks[0]}
    Append To List    ${Tagged_uri}    ${Tagged_names['members'][0]['uri']}
    Set To Dictionary    ${uplink_sets['us1']}    networkUris=${Tagged_uri}
    ${resp}    Add LIG from variable    ${ligs}
    ${task_uri}    Get Variable Value    ${resp['uri']}
    ${task}    Fusion Api Get Task    uri=${task_uri}
    log to console     \n${task['taskErrors'][0]['errorCode']}\nExpected Failure!!\n
    

    Log To console    \n Step 7.A  7.D 7.E Creating LIG with 1 Untagged network Uplinkset & 1 Tunnel network Uplinkset with respective networks\n

    ${Untagged_network}    Create List    ${Untagged_networks_list[0]}
    ${Tunnel_network}    Create List    ${Tunnel_networks_list[0]}
    Set To Dictionary    ${uplink_sets['us1']}    networkUris=${Untagged_network}
    Set To Dictionary    ${uplink_sets['us2']}    networkUris=${Tunnel_network}
    ${resp}    Add LIG from variable    ${ligs}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    5 s    2 s    True
    
    
    

    Log to console    \n Step 9.A Confirm you cannot change type - Go to LIG and edit uplink untagged, tunel\n

    ${lig}    Fusion Api Get Lig    param=?filter="name=${ligs['name']}"
    ${lig_body}    Get Variable value    ${lig['members'][0]}
    ${lig_uri}    Get From Dictionary    ${lig_body}    uri
    log to console    \n the lig body is :${lig_body}
    Set To Dictionary    ${lig_body['uplinkSets'][0]}    ethernetNetworkType=${Network_type[2]}
    Set To Dictionary    ${lig_body['uplinkSets'][1]}    ethernetNetworkType=${Network_type[2]}
    ${lig_type}    Fusion Api Edit Lig    ${lig_body}    uri=${lig_uri}
    ${task_uri}    Get Variable Value    ${lig_type['uri']}
    wait for task    ${lig_type}    5 s    2 s
    ${task}    Fusion Api Get Task    uri=${task_uri}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_INVALID_NETWORK_TYPE_FOR_UPLINKSET'    Log to console    \n message: ${task['taskErrors'][0]['message']}
    ...             ELSE    FAIL
    Log to console    \n Error Details: ${task['taskErrors'][0]['details']}


    Log to console    \n Step 9.B Confirm you cannot change network\n

    ${Tagged_uri_list}    Create List
    ${lig}    Fusion Api Get Lig    param=?filter="name=${ligs['name']}"
    ${lig_body}    Get Variable value    ${lig['members'][0]}
    ${lig_uri}    Get From Dictionary    ${lig_body}    uri
    ${resp}    Fusion Api Get Ethernet Networks    param=?filter=name=${Tagged_networks[0]}
    ${Tagged_uri}    Get Variable Value    ${resp['members'][0]['uri']}
    Append to list    ${Tagged_uri_list}    ${Tagged_uri}
    Set To Dictionary    ${lig_body['uplinkSets'][0]}    networkUris=${Tagged_uri_list}
    ${lig_edit}    Fusion Api Edit Lig    ${lig_body}    uri=${lig_uri}
    ${task_uri}    Get Variable Value    ${lig_edit['uri']}
    wait for task    ${lig_edit}    5 s    2 s
    ${task}    Fusion Api Get Task    uri=${task_uri}
    Log to console    \nThe task is:${task}
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' == 'CRM_INVALID_NETWORK_TYPE_FOR_UPLINKSET'    Log to console    \n message: ${task['taskErrors'][0]['message']}
    ...             ELSE    FAIL
    Log to console    \n Error Details: ${task['taskErrors'][0]['details']}

    log to console    \n Confirm you can change port\n


#Changing from Bay 1 port Q1.2 to Bay 1 port Q1.1

    log to console    \n Step 9.C Changing from Bay 1 port Q1.2 to Bay 1 port Q1.1 \n

    ${lig}    Fusion Api Get Lig    param=?filter="name=${ligs['name']}"
    ${lig_body}    Get Variable value    ${lig['members'][0]}
    ${lig_uri}    Get From Dictionary    ${lig_body}    uri
    Log to console    \n Before Editing The uplink port :${lig_body['uplinkSets'][0]['logicalPortConfigInfos'][0]['logicalLocation']['locationEntries']} \n
    ${temp}    Get Variable Value    ${lig_body['uplinkSets'][0]['logicalPortConfigInfos'][0]['logicalLocation']['locationEntries']}
    ${len}    Get Length    ${temp}
    :For    ${x}    In Range    0    ${len}
    \    Log to console    \n 'relative value${temp[${x}]['type']}
    \    Run Keyword If    '${temp[${x}]['type']}' == 'Port'
    \    ...    Set To Dictionary    ${temp[${x}]}    relativeValue=${relative_port_value[1]}

    Set to dictionary    ${lig_body['uplinkSets'][0]['logicalPortConfigInfos'][0]['logicalLocation']}  locationEntries=${temp}
    Log to console    \n After editing The uplink port :${lig_body['uplinkSets'][0]['logicalPortConfigInfos'][0]['logicalLocation']['locationEntries']} \n
    ${lig_edit}    Fusion Api Edit Lig    ${lig_body}    uri=${lig_uri}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${lig_edit}    ${valDict}    50 s    2 s    True


4.Import Enclosure

    Log To console    \n Step 10 Creating EG

    ${resp}    Add Enclosure Group from variable    ${enc_group}
    Log to Console    \n-EG got created successfully\n
    

    Sleep    200sec
    Log To console    \n Importing ENCLOSURE
    Add Enclosures from variable    ${encs}


5.Test Server gateway ping using the profile on an untagged network

    log to console    \n Step 11  Test Server gateway ping using the profile on an untagged network \n${Network_name}
    
    ${enet_us}    Fusion Api Get Uplink Set    param=?filter=name=${US_name}
    ${port_uri}    Get Variable Value    ${enet_us['members'][0]['portConfigInfos'][0]['portUri']}
    log to console    \n port_uri :${port_uri}
    ${resp}    Fusion Api Get Interconnect    uri=${port_uri}
    ${interface}    Get Variable Value    ${resp['neighbor']['remotePortId']}
    log to console    \n cmd :${interface}


	SSHLibrary.Open Connection    15.245.128.87
	SSHLibrary.Login    Administrator    wpsthpvse1
	SSHLibrary.Read Until    <WPST-AU56>
	SSHLibrary.Write    sys
	SSHLibrary.Read Until    [WPST-AU56]
	SSHLibrary.write    interface ${interface}
    SSHLibrary.Write    port trunk pvid vlan 115
	SSHLibrary.Write    dis cur
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	${output}    SSHLibrary.Read
	SSHLibrary.Close All Connections
	Log to console    \n${output}
	Should Contain    ${output}    port trunk permit vlan 1 101 to 115


    log to console    \n create server profile for Untagged Network \n

    Log to console    \n The server profile creation \n
    Add Server Profiles from variable    ${server_profiles_gen8_bay1}

    Log to console    \n Power on the server \n
	Power on server    ${server_profiles_gen8_bay1[0]['serverHardwareUri']}
	sleep	${Poweron_Server_Sleeptime}
	Log to console and logfile    Server ${server_profiles_gen8_bay1[0]['serverHardwareUri']} is powered on Successfully
	sleep	200sec


	Log to console    \n Step 12 Verify Ping Gateway by executing port trunk cmd on TOR Switch \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}

    Telnet.Open Connection    ${IP}    timeout=520s
    Sleep    35sec
    Telnet.Login    Administrator    Wpsthpvse1    login_prompt=login:    password_prompt=password: 
    Telnet.Write    ping ${IP1} 
    Sleep    10sec    
    ${output2}=    Telnet.Read    
    Telnet.Close All Connections
    log to console    \n ping Gateway IP is ${output2}   
    ${cmd_output1}    Get Regexp Matches    ${output2}    Lost = \\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${data_loss}    Get Variable Value    ${Split[1]}
    Run Keyword If    '${data_loss}' == '0'    log to console    \n Pinging Gateway IP is successful !!!
    ...    Else    FAIL


#Remove port trunk vlan :
    
    Log to console    \n Step 13 Part 1 Removing port trunk vlan  \n
    SSHLibrary.Open Connection    15.245.128.87
	SSHLibrary.Login    Administrator    wpsthpvse1
	SSHLibrary.Read Until    <WPST-AU56>
	SSHLibrary.Write    sys
	SSHLibrary.Read Until    [WPST-AU56]
	SSHLibrary.write    interface ${interface}
	SSHLibrary.Write    undo port trunk pvid
	SSHLibrary.Write    dis cur
	SSHLibrary.Close All Connections
 
    Log to console    \n Verify Ping Gateway by executing port trunk cmd on TOR Switch \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}


    ${result1}    Run    ping ${IP}
    log to console    \n the resp is :${result1}
    ${cmd_output1}    Get Regexp Matches    ${result1}    Lost = \\d
    log to console    \n the cmd is :${cmd_output1}
    ${data_loss}    Get Variable Value    ${cmd_output1[0]}
    log to console    \n the resp is :${data_loss}
    Run Keyword If    '${data_loss}' == '4'    log to console    \n Expected Failure - Ping Fails  !!!
    ...    Else    FAIL
    
#Enable port trunk vlan 2nd time:    
    
    Log to console    \n Step 13 Part 2 Enable port trunk vlan  \n
    
    ${enet_us}    Fusion Api Get Uplink Set    param=?filter=name=${US_name}
    ${port_uri}    Get Variable Value    ${enet_us['members'][0]['portConfigInfos'][0]['portUri']}
    log to console    \n port_uri :${port_uri}
    ${resp}    Fusion Api Get Interconnect    uri=${port_uri}
    ${interface}    Get Variable Value    ${resp['neighbor']['remotePortId']}
    log to console    \n cmd :${interface}


	SSHLibrary.Open Connection    15.245.128.87
	SSHLibrary.Login    Administrator    wpsthpvse1
	SSHLibrary.Read Until    <WPST-AU56>
	SSHLibrary.Write    sys
	SSHLibrary.Read Until    [WPST-AU56]
	SSHLibrary.write    interface ${interface}
    SSHLibrary.Write    port trunk pvid vlan 115
	SSHLibrary.Write    dis cur
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	SSHLibrary.write    \r
	${output}    SSHLibrary.Read
	SSHLibrary.Close All Connections
	Log to console    \n${output}
	Should Contain    ${output}    port trunk permit vlan 1 101 to 115
    
    Log to console    \n Step  Verify Ping Gateway by executing port trunk cmd on TOR Switch \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}

    Telnet.Open Connection    ${IP}    timeout=520s
    Sleep    35sec
    Telnet.Login    Administrator    Wpsthpvse1    login_prompt=login:    password_prompt=password: 
    Telnet.Write    ping ${IP1} 
    Sleep    10sec    
    ${output2}=    Telnet.Read    
    Telnet.Close All Connections
    log to console    \n ping Gateway IP is ${output2}   
    ${cmd_output1}    Get Regexp Matches    ${output2}    Lost = \\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${data_loss}    Get Variable Value    ${Split[1]}
    Run Keyword If    '${data_loss}' == '0'    log to console    \n Pinging Gateway IP is successful !!!
    ...    Else    FAIL





6.create server profile for Tunnel Network

    Log to console    \n Step 14 The server profile creation \n
    Add Server Profiles from variable    ${server_profiles_gen8_bay2}

    #Poweron
    Log to console    \n Power on the server \n
	Power on server    ${server_profiles_gen8_bay2[0]['serverHardwareUri']}
	sleep	${Poweron_Server_Sleeptime}
	Log to console and logfile    Server ${server_profiles_gen8_bay2[0]['serverHardwareUri']} is powered on Successfully
	sleep	200sec

    #verify ping for adapter

    Log to console  \n Step 15 Verify Ping Gateway with tunnel config \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}

    Telnet.Open Connection    ${IP}    timeout=520s
    Sleep    35sec
    Telnet.Login    Administrator    Wpsthpvse1    login_prompt=login:    password_prompt=password:
    Telnet.Write    ping ${IP1}
    Sleep    5sec
    ${output2}=    Telnet.Read
    Telnet.Close All Connections
    log to console    \n ping Gateway IP is ${output2}
    ${cmd_output1}    Get Regexp Matches    ${output2}    Lost = \\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${data_loss}    Get Variable Value    ${Split[1]}
    Run Keyword If    '${data_loss}' == '0'    log to console    \n Pinging Gateway IP is successful !!!
    ...    Else    FAIL

#Remove tunnel config from server

    log to console    \n Remove tunnel config from server and verify ping \n
    Power off server bay    2
    ${list}    Create List
    ${SH}    Fusion Api Get Server Profiles    param=?filter=name=${server_profiles_gen8_bay2[0]['name']}
    ${SH_uri}    Get Variable Value    ${SH['members'][0]['uri']}
    ${SH_body}    Get Variable Value    ${SH['members'][0]}
    Set To Dictionary    ${SH_body}    connections=${list}
    ${resp}    Fusion Api Edit Server Profile    ${SH_body}    uri=${SH_uri}
    Run Keyword If	'${resp['status_code']}' != '202'	fail	ELSE 	Log to Console  \n-Server Profile Updating
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    500 s    2 s    True

    Log to console    \n Power on the server \n
	Power on server    ${server_profiles_gen8_bay2[0]['serverHardwareUri']}
	sleep	${Poweron_Server_Sleeptime}
	Log to console and logfile    Server ${server_profiles_gen8_bay2[0]['serverHardwareUri']} is powered on Successfully
	sleep	200sec


    Log to console  \n Verify verify ping for adapter should fail \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}

    Telnet.Open Connection    ${IP}    timeout=520s
    Sleep    35sec
    Telnet.Login    Administrator    Wpsthpvse1    login_prompt=login:    password_prompt=password:
    Telnet.Write    ping ${IP1}
    Sleep    10sec
    ${output2}=    Telnet.Read
    Telnet.Close All Connections
    log to console    \n ping Gateway IP is ${output2}
    ${cmd_output1}    Get Regexp Matches    ${output2}    Lost = \\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${data_loss}    Get Variable Value    ${Split[1]}
    Run Keyword If    '${data_loss}' == '4'    log to console    \n Pinging Gateway IP is successful !!!
    ...    Else    FAIL


#Add tunnel config
    log to console    \n add tunnel config \n

    Power off server bay    2

    #edit sp

    ${SH}    Fusion Api Get Server Profiles    param=?filter=name=${server_profiles_gen8_bay2[0]['name']}
    ${SH_uri}    Get Variable Value    ${SH['members'][0]['uri']}
    ${SH_body}    Get Variable Value    ${SH['members'][0]}
    Set To Dictionary    ${SH_body}    connections=${server_profiles_gen8_bay2[0]['connections']}
    ${tunnel}    Fusion Api Get Ethernet Networks    param=?filter=name=${Tunnel}
    ${tunnel_uri}    Get Variable Value    ${tunnel['members'][0]['uri']}
    Set To Dictionary    ${SH_body['connections'][0]}       networkUri=${tunnel_uri}

    ${resp}    Fusion Api Edit Server Profile    ${SH_body}    uri=${SH_uri}
    log to console    \n the resp is:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \n updating \nStatus Code: ${resp['status_code']}
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    500 s    10 s    True

    Log to console    \n Power on the server \n
	Power on server    ${server_profiles_gen8_bay2[0]['serverHardwareUri']}
	sleep	${Poweron_Server_Sleeptime}
	Log to console and logfile    Server ${server_profiles_gen8_bay2[0]['serverHardwareUri']} is powered on Successfully
	sleep	200sec

    #verify ping for adapter

    Log to console  \n Verify Ping Gateway with tunnel config \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}


    ${cmd_output1}    Get Regexp Matches    ${output1}    Gateway=192.\\d.\\d.\\d.\\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${IP1}    Get Variable Value    ${Split[1]}
	log to console    \n Gateway IP is ${IP1}

    Telnet.Open Connection    ${IP}    timeout=520s
    Sleep    35sec
    Telnet.Login    Administrator    Wpsthpvse1    login_prompt=login:    password_prompt=password:
    Telnet.Write    ping ${IP1}
    Sleep    10sec
    ${output2}=    Telnet.Read
    Telnet.Close All Connections
    log to console    \n ping Gateway IP is ${output2}
    ${cmd_output1}    Get Regexp Matches    ${output2}    Lost = \\d
    ${cmd1}    Get Variable Value    ${cmd_output1[0]}
    @{Split}    Split String    ${cmd1}    =
	${data_loss}    Get Variable Value    ${Split[1]}
    Run Keyword If    '${data_loss}' == '0'    log to console    \n Pinging Gateway IP is successful !!!
    ...    Else    FAIL


7.Delete the untagged and tunnel network that is being currently used server profile

    Log to console    \n Step 16 Delete the untagged and tunnel network that is being currently used server profile & verify alerts \n

    ${resp}    Fusion Api Delete Alert
    log to console    \n The delete alerts is :${resp}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    350 s    2 s    True

    Log to console    \n Deleting the Untagged and Tunnel Network used by server profiles
    ${len}    Get Length    ${delete_networks_sp}
    :For    ${x}    In Range    0    ${len}
    \    ${resp}    Fusion Api Delete Ethernet Network    name=${delete_networks_sp[${x}]}
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    300 s    2 s    True


    ${description}    Create List
    ${alerts_list}    Create List
    ${alerts}    Fusion Api Get Alerts
    ${len}    Get Length    ${alerts['members']}
    log to console    \n The length is : ${len}
    :For    ${x}    In Range    0    ${len}
    \    ${members}    Get Variable Value    ${alerts['members'][${x}]}
    \    log to console    \n the Description is :${members['description']}\n
    \    log to console    \n the Alertype :${members['alertTypeID']}\n
    \    ${alert_msg}    Get Variable Value    ${members['alertTypeID']}
    \    Append to list    ${alerts_list}    ${alert_msg}
    
    ${len}    Get Length    ${network_delete_alerts}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${alerts_list}    ${network_delete_alerts[${x}]}  

8.Readd the networks

    ${x}    Set Variable    2
    log to console    \n The x is : ${x}
    :For    ${y}    In Range    0    2   
    \    ${new}    Get Variable Value    ${ethernet_networks[${x}]}
    \    ${Create}    Fusion Api Create Ethernet Network    body=${ethernet_networks[${x}]}
    \    Run Keyword If  '${Create['status_code']}' == '202'    Log to console  \nStatus Code: ${Create['status_code']} \n Untagged Network Created Successfully!
    \    ...             ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${Create}    ${valDict}    5 s    2 s    True
    \    ${x}    Set Variable    ${x}+2


8.1 Readd in LIG
    ${lig}     Fusion APi Get LIG    param=?filter=name=LIG1
    ${lig_body}    Get Variable value    ${lig['members'][0]}
    ${lig_uri}    Get From Dictionary    ${lig_body}    uri
    ${us}    Get Variable Value    ${lig['members'][0]['uplinkSets']}
    
    ${len}    Get Length     ${us}
    ${Untagged_net}     Fusion Api Get Ethernet Networks    param=?filter=name=${delete_networks_sp[1]}
    ${untagged_uri}     Get Variable Value     ${Untagged_net['members'][0]['uri']}
    ${untagged_uri_list}    Create List    ${untagged_uri}
    ${Tunnel_net}     Fusion Api Get Ethernet Networks    param=?filter=name=${delete_networks_sp[0]}
    ${Tunnel_uri}     Get Variable Value     ${Tunnel_net['members'][0]['uri']}
    ${Tunnel_uri_list}    Create List    ${Tunnel_uri}
 
    :For    ${x}    In Range    0    ${len}
    \    Run Keyword If    '${us[${x}]['ethernetNetworkType']}' == 'Untagged'
    \    ...    Set To Dictionary    ${us[${x}]}    networkUris=${untagged_uri_list}
    \    Run Keyword If    '${us[${x}]['ethernetNetworkType']}' == 'Tunnel'
    \    ...    Set To Dictionary    ${us[${x}]}    networkUris=${Tunnel_uri_list}
    Set to dictionary    ${lig_body}    uplinkSets=${us}
    ${lig_readd}    Fusion Api Edit Lig    ${lig_body}    uri=${lig_uri}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${lig_readd}    ${valDict}    30 s    2 s    True
 

8.2 readd in li

    ${Li}    Fusion Api Get Li    
    log to console    \n li uri is : ${Li['members'][0]}
    ${LI_uri}    Get Variable value    ${Li['members'][0]['uri']}
    log to console    \n li uri is : ${LI_uri}
    ${Li_update}    fusion_api_update_from_group    uri=${LI_uri}
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${Li_update}    ${valDict}    300 s    2 s    True


8.3 Readd in SP page  


    Power off server bay    1
    ${SP_1}    Fusion Api Get Server Profiles    param=?filter=name=${SP_names[0]} 
    ${SP_1_uri}     Get Variable Value     ${SP_1['members'][0]['uri']}    
    ${SP_1_body}     Get Variable Value    ${SP_1['members'][0]}
    
    
    ${l}     Create List
    Set To Dictionary     ${SP_1_body}    connections=${l} 
    ${SP1_new}     Fusion Api Edit Server Profile     ${SP_1_body}    uri=${SP_1_uri}
    Sleep    300sec


 
    ${SP_1_n}    Fusion Api Get Server Profiles    param=?filter=name=${SP_names[0]} 
    ${SP_1_uri_n}     Get Variable Value     ${SP_1_n['members'][0]['uri']}    
    ${SP_1_body_n}     Get Variable Value    ${SP_1_n['members'][0]}
    
    ${Untagged_net}     Fusion Api Get Ethernet Networks    param=?filter=name=${delete_networks_sp[1]}
    ${untagged_uri}     Get Variable Value     ${Untagged_net['members'][0]['uri']}
    ${temp}    Get Variable Value    ${server_profiles_gen8_bay1[0]['connections']}
    Set To Dictionary     ${temp[0]}      networkUri=${untagged_uri}
    
    Set To Dictionary     ${SP_1_body_n}    connections=${temp} 
    log to console    \n a is :${SP_1_body_n}
    ${SP1_new1}     Fusion Api Edit Server Profile     ${SP_1_body_n}    uri=${SP_1_uri_n}
    
    Sleep    500sec
    #${valDict} =    Create Dictionary    taskState=Completed
    #${Task}    Wait For Task And Validate Response    ${SP1_new1}    ${valDict}    700 s    2 s    True
  

server2    
    Power off server bay    2
    ${SP_2}    Fusion Api Get Server Profiles    param=?filter=name=${SP_names[1]} 
    ${SP_2_uri}     Get Variable Value     ${SP_2['members'][0]['uri']}    
    ${SP_2_body}     Get Variable Value    ${SP_2['members'][0]}
    
    
    ${l}     Create List
    Set To Dictionary     ${SP_2_body}    connections=${l} 
    ${SP2_new}     Fusion Api Edit Server Profile     ${SP_2_body}    uri=${SP_2_uri}
    Sleep    300sec
    
    ${SP_2_n}    Fusion Api Get Server Profiles    param=?filter=name=${SP_names[1]} 
    ${SP_2_uri_n}     Get Variable Value     ${SP_2_n['members'][0]['uri']}    
    ${SP_2_body_n}     Get Variable Value    ${SP_2_n['members'][0]}
    ${Tunnel_net}     Fusion Api Get Ethernet Networks    param=?filter=name=${delete_networks_sp[0]}
    ${Tunnel_uri}     Get Variable Value     ${Tunnel_net['members'][0]['uri']}
    
    ${temp1}    Get Variable Value    ${server_profiles_gen8_bay2[0]['connections']}
    Set To Dictionary     ${temp1[0]}      networkUri=${Tunnel_uri}
    
    Set To Dictionary     ${SP_2_body_n}    connections=${temp1} 
    log to console    \n the new sp2 body is :${SP_2_body_n} \n
    
    ${SP2_final}     Fusion Api Edit Server Profile     ${SP_2_body_n}    uri=${SP_2_uri_n}
    #${valDict} =    Create Dictionary    taskState=Completed
    #${Task}    Wait For Task And Validate Response    ${SP2_final}    ${valDict}    500 s    2 s    True
    Sleep    300sec




#Verify Server Connections
     
    log to console    \n Verify Server Connections \n

    sleep	300sec

    Log to console    \n Power on the server \n
	Power on server    ${server_profiles_gen8_bay2[0]['serverHardwareUri']}
	sleep	${Poweron_Server_Sleeptime}
	Log to console and logfile    Server ${server_profiles_gen8_bay2[0]['serverHardwareUri']} is powered on Successfully
	sleep	200sec

    #verify ping for adapter

    Log to console  \n Verify Ping Gateway with tunnel config \n

    SSHLibrary.Open Connection    15.245.129.11
    SSHLibrary.Login    Administrator    wpsthpvse1
    SSHLibrary.Write    connect server 1
    Sleep    10sec
    SSHLibrary.Read Until    </>hpiLO->
    Sleep    10sec
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Write    vsp
    Sleep    20sec
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    Sleep    10sec
    ${output1}=    SSHLibrary.Read
    SSHLibrary.Close All Connections
	${cmd_output}    Get Regexp Matches    ${output1}    Ip=192.\\d.\\d.\\d.\\d\\d
    ${cmd}    Get Variable Value    ${cmd_output[0]}
    @{Split}    Split String    ${cmd}    =
	${IP}    Get Variable Value    ${Split[1]}
	log to console    \n Server IP is ${IP}
    

  

9.Create Backup

    Log to console    \n Step 17 Backup \n

    ${resp}    Fusion Api Create Backup
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \n Tagged Network Created Successfully!
    ...             ELSE    FAIL
    ${valDict} =    Create Dictionary    taskState=Completed
    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    200 s    2 s    True


#Get Backup & Download
    log to console    \n Get Backup & Download \n

    ${Response}		Fusion Api Get Backup
	Run keyword unless    ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
	set global variable    ${Backup_file_name}    ${Response['members'][0]['id']}
	Log to Console	${Backup_file_name}	${\n}
    Download Backup  
    
   
    
10.Delete All Networks   
    
    ${len}    Get Length    ${Network_list_created}
    :For    ${x}    In Range    0    ${len}
    \    ${resp}    Fusion Api Delete Ethernet Network    name=${Network_list_created[${x}]}
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    200 s    2 s    True
    \    log to console    \n networks deleted\n

Upload Backup
    Log to console    \n uploading Backup \n
    Upload Backup    ${Backup_file_name}

#Restore backup

    log to console    \n Restore backup \n
    Power off server bay    1
    Power off server bay    2
    Restore From Backup
    Sleep    1000sec    
    
11.Verify Ethernet Networks after restore

    log to console    \n Verify Ethernet Networks after restore \n

    Fusion Api Login Appliance    ${Appliance_IP}    ${admin_credentials}
    ${Network_list_restore}    Create List
    ${resp}    Fusion Api Get Ethernet Networks
    ${len}    Get Variable Value    ${resp['count']}
    :For    ${x}    In Range    0     ${len}
    \    ${name}    Get Variable Value    ${resp['members'][${x}]['name']}
    \    Append To List    ${Network_list_restore}    ${name}
    Log to console    \n the networks are :${Network_list_restore}

    ${len}    Get Length    ${Network_list_created}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Network_list_restore}    ${Network_list_created[${x}]}    

12.Delete uplink set
    log to console    \n Step 18  delete uplink sets \n

    ${len}    Get Length    ${uplinksets_name}
    :For    ${x}    In Range    0    ${len}
    \    ${resp}    Fusion Api Delete Uplink Set    ${uplinksets_name[${x}]}
    \    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \n updating \nStatus Code: ${resp['status_code']}
    \    ...             ELSE    FAIL
    \    ${valDict} =    Create Dictionary    taskState=Completed
    \    ${Task}    Wait For Task And Validate Response    ${resp}    ${valDict}    100 s    2 s    True 

*** Keywords ***
Download Backup
  [Arguments]	${filename}=None
  ${Backup}	Fusion Api Get Backup
  Log To Console	${Backup}
  @{members}	Get From Dictionary	${Backup}	members
  ${file}	Run Keyword If		'${filename}'=='None'
  ...		Set Variable		${members[0]['id']}
  ...		ELSE	Set Variable	${filename}
  ${ret}	Fusion Api Download Backup	${members[0]['downloadUri']}	${file}


Upload Backup
  [Arguments]	${filename}
  ${Response}	Fusion Api Upload Backup	${filename}
  Log		${Response}


Restore From Backup
	${status}=	Set Variable    ${EMPTY}
	${Response}		Fusion Api Get Backup
	Run keyword unless	${Response['status_code']}== 200	Fail	"Unable to Get the latest backup"
	${restore_body}		Create Dictionary	type=RESTORE
	...										uriOfBackupToRestore=${Response['members'][0]['uri']}
	#Log to console and logfile		${restore_body}
	${output}		Fusion Api Restore Backup		${restore_body}
	Log to console and logfile		${output}
	Sleep	200sec
	Run keyword unless	${output['status_code']}== 202	Fail	"Unable to perform the restore from backup operation"
	${restore_resp}		Fusion API Get Restore Status
	#Log to console and logfile		"Restore_resp values is "	${\n}
	Log to console and logfile		${restore_resp}
	Run keyword unless	${restore_resp['status_code']}== 200	Fail	"Unable to get the restore details"
	:FOR	${index}	IN RANGE	${restore_resp['count']}
	\	Run Keyword If	'${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'		Continue For Loop
	\	${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
	:FOR	${index}	IN RANGE	80
	\	sleep	30sec
	\	Log to console and logfile		"Restoring is in Progress..."
	\	${resp}		Fusion API Get Restore Status	${restore_id}
	\	Run keyword unless	${resp['status_code']}== 200	Fail	"Unable to get the restore id details"
	\	Run Keyword If	'${resp['progressStep']}' != 'COMPLETED'	Continue For Loop
	\	${status} =    Set Variable    ${resp['status']}
	\	Run Keyword If	'${resp['progressStep']}' == 'COMPLETED'	Exit For Loop
	Should Be Equal    ${status}	SUCCEEDED
	Log to console and logfile		"Exited from the for loop"