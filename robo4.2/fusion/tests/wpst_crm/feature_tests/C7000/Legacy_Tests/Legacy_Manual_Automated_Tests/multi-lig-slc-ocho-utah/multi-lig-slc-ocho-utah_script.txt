*** Settings ***
Documentation      Validating the Interconnect state with Multi LIG
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library             SSHLibrary
Variables          data_variables_supershaw.py
#Variables          data_variables_utah_ocho.py
Resource           ../../../../../../../Resources/api/fusion_api_resource.txt
Library            Dialogs
Suite Setup        Suite Setup Tasks
Suite Teardown    Suite Teardown Tasks

############################################################################################################
# Test Case Description : This Test case is to Verify interconnect state by removing/adding interconnect in
#                         OA with multi LIG in four scenarios as follows
#                           -When Interconnects are in configured state.
#                           -When the Interconnect is in Unmanaged state.
#                           -When Interconnect is in Inventory state.
#                           -Removing the interconnect in OA before importing enclosure.
# Test Steps:
#   1.Login to nat and Create 2 LIGs.
#   2.Login to sarah and Creating EG.
#   3. Importing Enclosure.
#   4.Verifying Logical interconnect state as consistent
#   5.Login to nat and Validating interconnect state as configured.
#   6. Removing interconnect in OA and checking the interconnect state is Absent.
#   7. Adding interconnect in OA and checking the interconnect state is Configured.
#   8.Login to sarah and Removing Enclosure and EG.
#   9.Verifying logical interconnect is deleted.
#   10.Login to nat and Editing LIGs with interconnects as unmanaged.
#   11.Login to sarah and Creating EG and Importing Enclosure with interconnect state as Unmanaged.
#   12.Verifying logical interconnect state as Consistent when interconnect is Unmanaged
#   13.Login to nat and Validating interconnect state as Unmanaged.
#   14.Removing interconnect in OA and checking the interconnect state as absent when it is Unmanaged.
#   15. Adding interconnect in OA and checking the state as Unmanaged.
#   16.Login to sarah and Removing the Enclosure and EG after the interconnect state is Unmanaged.
#   17.Verifying logical interconnects deleted when Interconnect is in Unmanaged state
#   18.Login to nat and Editing LIGs with the interconnect state as Inventory.
#   19.Login to sarah and Creating EG and Importing enclosure with interconnect state as Inventory.
#   20.Verifying logical interconnect state as Consistent when interconnect is Inventory
#   21.Login to nat and Validating the interconnect state as Inventory.
#   22.Removing Interconnect in OA and checking the interconnect is present in the interconnect page.
#   23.Adding the Interconnect in OA and checking the interconnect state as Inventory.
#   24.Login to sarah and Removing Enclosure and EG when the interconnect is in Inventory state.
#   25.Verifying logical interconnects deleted when Interconnect is in Inventory state
#   26.Removing Interconnect in OA before Importing the Enclosure.
#   27.Login to nat and Editing LIGs with Interconnects in absent state.
#   28.Login to sarah and Creating EG and Importing enclosure after removing interconnect in OA.
#   29.Verifying logical interconnect state as Consistent after removing interconnect in OA
#   30.Login to nat and Validating Interconnect state as Absent and verifying Linked ports.
#   31.Adding the Interconnect in the OA and checking the Interconnect state as configured in Interconnect page.
#   32.Login to sarah and Deleting Enclosure.
#   33.Removing the EG and LIGs.
#############################################################################################################

***Test cases***
1_Login
    [Documentation]   Login into appliance
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If    '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log to console  \nSuccessfully logged into the appliance

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${server_credentials}
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${network_credentials}

2_Create Ligs
    [Documentation]   Login to nat and Create 2 LIGs
    ${resp}=    Fusion Api Switch Active User    nat
    Log    \n\n Creating LIG!! \n\n    console=True
    ${body} =   Build LIG body      ${ligs['lig1']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log    \n\n ${resp_lig}!! \n\n    console=True
    Run keyword unless    ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    60s
    Log    \n\n LIG-COMP-OU1 created successfully!! \n\n    console=True

    ${body} =   Build LIG body      ${ligs['lig2']}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Log    \n\n ${resp_lig}!! \n\n    console=True
    Run keyword unless    ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    60s
    Log    \n\n LIG-COMP-OU2 created successfully!! \n\n    console=True

3_Create EG
    [Documentation]    Login to sarah and Creating EG
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp_eg} =    Add Enclosure Group from variable       ${enc_group}
    Run keyword unless    ${resp_eg['status_code']}== 201    Fail    "Unable to Create EG"
    Log    \n\n EG created succesfully!! \n\n    console=True

4_Import Enclosure
    [Documentation]    Importing Enclosure
    Add Enclosures from variable     ${enc_body1}
    Log    \n\n Enclosure imported succesfully!! \n\n    console=True

5_Verify logical interconnect in Consistent state
    [Documentation]    Verifying logical interconnect state as Consistent
    :FOR    ${x}    IN RANGE    0    2
    \   ${URI} =    Get LI URI    ${LI[${x}]}
    \   Set Global Variable    ${LI_URI}    ${URI}
    \   ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    \   Run keyword unless    '${li_resp['consistencyStatus']}' == 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}


6_Validate the interconnect state
    [Documentation]    Login to nat and Validating interconnect state as configured
    ${resp}=    Fusion Api Switch Active User    nat
    ${Length}=    Get Length    ${INTERCONNECTS_enc1}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${x}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${x}]} is not in configured state!!   ${\n}
    Log    \n\n The interconnect state is checked successfully!! \n\n    console=True

7_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing interconnect in OA and checking the interconnect state is Absent
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect state as Absent    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Removing the Interconnect!! \n\n    console=True

8_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding interconnect in OA and checking the interconnect state is Configured
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as configured    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Adding the Interconnect!! \n\n    console=True

9_Remove Enclosure, EG
    [Documentation]    Login to sarah and Removing Enclosure and EG
    ${resp}=    Fusion Api Switch Active User    sarah
    Remove ALL Enclosures
    Remove ALL Enclosure Groups

10_Verify logical interconnects deleted
    [Documentation]    Verifying logical interconnects deleted
    :FOR    ${x}    IN RANGE    0    2
    \   ${resp} =    Fusion Api Get Li    param=?filter="'name'=='${LI[${x}]}'"
    \   Run Keyword If    ${resp['status_code']} == 404    fail     The Logical Interconnect is not deleted   ${\n}
    \   Log    \n\n The Logical interconnect is deleted successfully!! \n\n    console=True

11_Edit LIG to make interconnects Unmanaged
    [Documentation]    Login to nat and Editing LIGs with interconnects as unmanaged
    ${resp}=    Fusion Api Switch Active User    nat
    ${lig_uri} =    Get LIG URI    ${ligs['lig1']['name']}
    Set Global Variable    ${LIG1_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig['lig1']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =    Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     90s 60s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

    ${lig_uri} =    Get LIG URI    ${ligs['lig2']['name']}
    Set Global Variable    ${LIG2_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig['lig2']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG2_uri}
    ${task} =   Wait For Task   ${resp}     90s 30s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

12_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing Enclosure with interconnect state as Unmanaged
    ${resp}=    Fusion Api Switch Active User    sarah
    Log    \n\n Creating EG!! \n\n    console=True
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg}
    Run Keyword If    '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_unmanaged}
    Log    \n\n Enclosure imported succesfully!! \n\n    console=True

13_Verify logical interconnect in Consistent state
    [Documentation]    Verifying logical interconnect state as Consistent when interconnect is Unmanaged
    :FOR    ${x}    IN RANGE    0    2
    \   ${URI} =    Get LI URI    ${LI[${x}]}
    \   Set Global Variable    ${LI_URI}    ${URI}
    \   ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    \   Run keyword unless    '${li_resp['consistencyStatus']}' == 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}

14_Validate the interconnect state
    [Documentation]    Login to nat and Validating interconnect state as Unmanaged
    ${resp}=    Fusion Api Switch Active User    nat
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int1}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Unmanaged"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in unmanaged state!!   ${\n}


15_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing interconnect in OA and checking the interconnect state as absent when it is Unmanaged
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect state as Absent    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Removing the Interconnect!! \n\n    console=True

16_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding interconnect in OA and checking the state as Unmanaged
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as Unmanaged    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Adding the Interconnect!! \n\n    console=True

17_Remove Enclosure, EG
    [Documentation]    Login to sarah and Removing the Enclosure and EG after the interconnect state is Unmanaged
    ${resp}=    Fusion Api Switch Active User    sarah
    Remove ALL Enclosures
    Remove ALL Enclosure Groups

18_Verify logical interconnects deleted
    [Documentation]    Verifying logical interconnects deleted when Interconnect is in Unmanaged state
    :FOR    ${x}    IN RANGE    0    2
    \   ${resp} =    Fusion Api Get Li    param=?filter="'name'=='${LI[${x}]}'"
    \   Run Keyword If    ${resp['status_code']} == 404    fail     The Logical Interconnect is not deleted   ${\n}
    \   Log    \n\n The Logical interconnect is deleted successfully!! \n\n    console=True

19_Edit LIG to make interconnects Inventory
    [Documentation]    Login to nat and Editing LIGs with the interconnect state as Inventory
    ${resp}=    Fusion Api Switch Active User    nat
    ${lig_uri} =    Get LIG URI    ${ligs['lig1']['name']}
    Set Global Variable    ${LIG1_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig1['lig1']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     90s 30s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

    ${lig_uri} =    Get LIG URI    ${ligs['lig2']['name']}
    Set Global Variable    ${LIG2_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig1['lig2']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG2_uri}
    ${task} =   Wait For Task   ${resp}     90s 30s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

20_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing enclosure with interconnect state as Inventory
    ${resp}=    Fusion Api Switch Active User    sarah
    Log    \n\n Creating EG!! \n\n    console=True
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg1}
    Run Keyword If   '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_inventory}
    Log    \n\n Enclosure imported succesfully!! \n\n    console=True

21_Verify logical interconnect in Consistent state
    [Documentation]    Verifying logical interconnect state as Consistent when interconnect is Inventory
    :FOR    ${x}    IN RANGE    0    2
    \   ${URI} =    Get LI URI    ${LI[${x}]}
    \   Set Global Variable    ${LI_URI}    ${URI}
    \   ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    \   Run keyword unless    '${li_resp['consistencyStatus']}' == 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}

22_Validate the interconnect state
    [Documentation]    Login to nat and Validating the interconnect state as Inventory
    ${resp}=    Fusion Api Switch Active User    nat
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int3}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Inventory"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in inventory state!!   ${\n}


23_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing Interconnect in OA and checking the interconnect is present in the interconnect page
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Removing the Interconnect!! \n\n    console=True

24_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding the Interconnect in OA and checking the interconnect state as Inventory
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as Inventory    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Adding the Interconnect!! \n\n    console=True

25_Remove Enclosure, EG
    [Documentation]    Login to sarah and Removing Enclosure and EG when the interconnect is in Inventory state
    ${resp}=    Fusion Api Switch Active User    sarah
    Remove ALL Enclosures
    Remove ALL Enclosure Groups

26_Verify logical interconnects deleted
    [Documentation]    Verifying logical interconnects deleted when Interconnect is in Inventory state
    :FOR    ${x}    IN RANGE    0    2
    \   ${resp} =    Fusion Api Get Li    param=?filter="'name'=='${LI[${x}]}'"
    \   Run Keyword If    ${resp['status_code']} == 404    fail     The Logical Interconnect is not deleted   ${\n}
    \   Log    \n\n The Logical interconnect is deleted successfully!! \n\n    console=True

27_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing Interconnect in OA before Importing the Enclosure
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Log    \n\n The interconnect state is checked successfully after Removing the Interconnect!! \n\n    console=True

28_Edit LIG to make interconnects Absent
    [Documentation]    Login to nat and Editing LIGs with Interconnects in absent state
    ${resp}=    Fusion Api Switch Active User    nat
    ${lig_uri} =    Get LIG URI    ${ligs['lig1']['name']}
    Set Global Variable    ${LIG1_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig2['lig1']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     90s 30s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

    ${lig_uri} =    Get LIG URI    ${ligs['lig2']['name']}
    Set Global Variable    ${LIG2_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig2['lig2']}
    Log    \n\n creating LIG!! \n\n    console=True
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG2_uri}
    ${task} =   Wait For Task   ${resp}     90s 30s
    Run Keyword If    '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited

29_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing enclosure after removing interconnect in OA
    ${resp}=    Fusion Api Switch Active User    sarah
    Log    \n\n Creating EG!! \n\n    console=True
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg2}
    Run Keyword If    '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_body2}
    Log    \n\n Enclosure imported succesfully!! \n\n    console=True

30_Verify logical interconnect in Consistent state
    [Documentation]    Verifying logical interconnect state as Consistent after removing interconnect in OA
    :FOR    ${x}    IN RANGE    0    2
    \   ${URI} =    Get LI URI    ${LI[${x}]}
    \   Set Global Variable    ${LI_URI}    ${URI}
    \   ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    \   Run keyword unless       '${li_resp['consistencyStatus']}' == 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}

31_Validate the interconnect state
    [Documentation]    Login to nat and Validating Interconnect state as Absent
    ${resp}=    Fusion Api Switch Active User    nat
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int1}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If    "${resp['members'][0]['state']}" !="Absent"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in absent state!!   ${\n}
    Log    \n\n The interconnect state is checked successfully!! \n\n    console=True

32_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding the Interconnect in the OA and checking the Interconnect state as configured in Interconnect page
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as Configured    ${INTERCONNECTS_enc1}
    Log    \n\n The interconnect state is checked successfully after Adding the Interconnect!! \n\n    console=True

33_Delete Enclosure and verify it is removed or not
    [Documentation]    Login to sarah and Deleting Enclosure
    ${resp}=    Fusion Api Switch Active User    sarah
    Remove ALL Enclosures


34_Remove EG,LIG
    [Documentation]    Removing the EG and LIG
    Remove ALL Enclosure Groups
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    ${resp}=    Fusion Api Switch Active User    nat
    Remove ALL LIGs
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

***keywords***

Get LIG URI
    [Documentation]     Get LIG URI
    [Arguments]     ${lig}
    ${resp} =   Fusion Api Get LIG      param=?filter="'name'=='${lig}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Remove Interconnect via OA
    [Documentation]     Remove Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    SSHLibrary.Write    ++diag--
    Sleep    10
    SSHLibrary.Write    efuse IOM ${interconnect_bay} OFF
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

Add Interconnect via OA
    [Documentation]     Add Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    SSHLibrary.Write    ++diag--
    Sleep    10
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    SSHLibrary.Write    q
    Sleep    60s
    SSHLibrary.Close All Connections


Checking Interconnect
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run keyword unless    ${resp['count']} != 0    Log to console and logfile    The Interconnect is not present in Interconnect page

Checking Interconnect state as Configured
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in configured state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Configured in the Interconnect page

Checking Interconnect state as Absent
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Absent"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in absent state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Absent in the Interconnect page


Checking Interconnect state as Unmanaged
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Unmanaged"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in unmanaged state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Unmanaged in the Interconnect page


Checking Interconnect state as Inventory
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Inventory"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in inventory state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Inventory in the Interconnect page

Suite Setup Tasks
    [Documentation]    Suite Setup tasks
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance
    Clean OV
    :FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log To Console    \n${Response['userName']} is created Successfully
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${network_credentials}
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${server_credentials}
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully


Suite Teardown Tasks
    [Documentation]    Suite Teardown tasks
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance
    Clean OV

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users
