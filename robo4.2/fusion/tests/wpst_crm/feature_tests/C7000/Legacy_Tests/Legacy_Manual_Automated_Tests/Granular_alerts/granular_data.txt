*** Settings ***
Documentation      Granular_Data
#Variables          data_granular_Supershaw.py
Variables           data_granular_Utah_Ocho.py
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
Suite Setup        Suite Setup Tasks
Resource           ../../../../../../../Resources/api/fusion_api_resource.txt

################### TestCase Description - This TestCase is Validating the Granular Alerts by disabling/Enabling downlink & Uplink ports in
#Interconnects and Deleting/Adding Networks & Network set

###############    TestCase Steps    ################

# 1.Create Ethernet Network,FC network & Network set
# 2.Create LIG by using Network User
# 3.Create EG & import Enclosure
# 4.Verify LI State
# 5.Create Server Profile and Verify the Profile Presence
# 6.List Interconnects by their Interconnect names
# 7.Verify the linked state for Interconnect 1 downlink Port
# 8.Verify the linked state for Interconnect 2 downlink Port
# 9.Verify the linked state for Interconnect 3 downlink Port
# 10.Verify the linked state for Interconnect 4 downlink Port
# 11.Delete Alerts after checking the Linked State of interconnect ports
# 12.Delete one Ethernet Network
# 13.Validate the Alerts after deleting the Ethernet network
# 14.Disable the Interconnect 1 linked downlink port
# 15.Validate the Alerts after Interconnect 1 downlink port is disabled
# 16.Enable the disabled downlink port & verify the Interconnect port details
#  - Disable the uplink ports assigned to the uplink set
#  - Enable the uplink ports assigned to the uplink set
# 17.List the Interconnect 1 downlink port
# 18.Validate Alerts after disabling & Enabling the uplink ports
# 19.Remove Interconnect 1 from OA
# 20.Recreate the Network & Networks et that was deleted before
# 21.Add Interconnect 1 in OA
# 22.Delete Server Profile
# 23.Delete Enclosure & Verify
# 24.Validate Interconnects are not Present
# 25.Delete EG & LIG


#############   TESTCASES    ###########
***Test cases***

1_Login
    [Documentation]    Login to Appliance
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance!!!

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${server_credentials}
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${network_credentials}

1_Delete All Alerts
    [Documentation]    Deleting the alerts after creating netwoks

    ${resp}=    Fusion Api Switch Active User    sarah
    Log to Console    "server admin logged in"
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log To Console    Alerts Deleted Successfully!!!

2_Create LIG by network User
    [Documentation]    Creating LIG by Network User

    ${resp}=    Fusion Api Switch Active User    nat
    Add LIG from variable     ${lig}
    Log to console and logfile      LIG created successfully
    ${resp} =    Fusion Api Get LIG    param=?filter="'name'=='${lig['name']}'"
    Log To Console    ${resp}

3_Create EG and Import Enclosure
    [Documentation]    Creating EG & Importing the Enclosure

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${EncGrp}=    Add Enclosure Group from variable   ${EG}
    Run keyword unless  ${EncGrp['status_code']}== 201    Fail    ${EncGrp['message']}
    Log to console and logfile    EG created succesfully
    ${resp} =    Fusion Api Get Enclosure Groups    param=?filter="'name'=='${EG['name']}'"
    Log To Console    ${resp}
    ${resp}=    Add Enclosures from variable     ${enclosures}
    Sleep    120s
    ${enclosure_present} =    Fusion Api Get Enclosures
    ${Count} =    Get From Dictionary    ${enclosure_present}    count
    Log To Console    ${Count}
    Run Keyword If  '${enclosure_present['count']}' =='0'    fail    ELSE    Log to Console    Enclosure imported succesfully

4_Verify logical interconnect state
    [Documentation]    Verifying the Logical Interconnect state

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    '${li_resp['members'][0]['consistencyStatus']}' == 'CONSISTENT'  Log to console and logfile    Li is consistent state

5_Verify All Interconnect Status is Configured
    [Documentation]    Verifying the Interconnect Status

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${len} =    Get Length    ${INTERCONNECTS}
    :FOR    ${x}    IN RANGE    0    ${len}
    \   ${resp}=    Fusion Api Get Interconnect
    \   Log to Console    "The state of the interconnect is :"
    \   Log to Console    ${resp['members'][0]['state']}
    \   Run Keyword If    '${resp['members'][0]['state']}' == 'Configured'    Log to console and logfile    IC is Configured    ELSE    Log to console    LI is in Unmanaged State



6_Server Profile
    [Documentation]    Creating Server Profiles and Checking profiles is present or not

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${existing_profiles} =      Fusion Api Get Server Profiles
    ${Count} =  Get From Dictionary    ${existing_profiles}    count
    Log To Console    ${Count}
    Run keyword unless    '${Count}' == '0'    fail    Log to Console    Servers are Not Available
    Add Server Profiles from variable     ${server_profile1}
    Power on server    ${server_profile1[0]['serverHardwareUri']}
    Log to console and logfile      Server1 are powered on successfully
    Add Server Profiles from variable     ${server_profile2}
    Power on server    ${server_profile2[0]['serverHardwareUri']}
    sleep   300s
    Log to console and logfile    Server2 are powered on successfully
    ${existing_profiles} =    Fusion Api Get Server Profiles
    ${Count} =    Get From Dictionary    ${existing_profiles}    count
    Log To Console    ${Count}
    Run keyword unless    '${Count}' == '2'    fail    Log to Console    Servers are Available


7_List All Interconnects Present in the Enclosure
    [Documentation]    List Interconnects in the LI Page

    ${resp}=    Fusion Api Switch Active User    sarah
    ${list}=    Create List
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp['members'][0]['uri']}
    ${ic_uri}=    Get Variable Value    ${li_resp['members'][0]['interconnects']}
    ${length} =    Get Length     ${ic_uri}
    :FOR    ${a}    IN RANGE    0    ${length}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${a}]}
    \    Log To Console and Logfile    ${ic_resp['name']}
    \    ${ic_name}=    set Variable    ${ic_resp['name']}
    \    Append To List    ${list}    ${ic_name}

8_List Interconnect 1 Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect1 downlink port status and list PortName &status

    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

8_1_List Interconnect 2 Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect2 downlink port status and list PortName &status

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat
    ${list1}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[1]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list1}    ${port_name}

8_2_List Interconnect 3 Downlink Port and verifying the port status by network user
    Set Log Level    TRACE
    [Documentation]    Verifying the Interconnect3 downlink port status and list PortName &status

    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect3}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[2]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

8_3_List Interconnect Downlink Port and verifying the port status by network user
    Set Log Level    TRACE
    [Documentation]    Verifying the Interconnect 4 downlink port status and list PortName &status

    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[3]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

9_Delete All Alerts-"After Verifying the interconnect port status"
    [Documentation]    Deleting All Alerts

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log To Console    "Alerts Deleted Successfully!!!"

10_Delete Ethernet Network
    [Documentation]    Deleting One Ethernet Network

    ${resp}=    Fusion Api Switch Active User    nat
    ${networks} =    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${enet[2]['name']}'"
    Log To Console    ${networks}
    ${uri} =    Get From Dictionary     ${networks['members'][0]}   uri

    ${resp} =    Fusion Api Delete Ethernet Network        uri=${uri}
    Wait For Task    ${resp}    60s    1s
    Log To Console    "Network Removed Successfully"

11_Validate Alerts-"After Deleting the Ethernet Network"
    [Documentation]    Validating the alerts after deleting the network

    ${resp}=    Fusion Api Switch Active User    sarah

    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' =='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' == '${description}'     Continue For Loop
    \   Log To Console    Alerts Validation Completed

12_Delete network set
    [Documentation]    Deleting the network set and deleting alerts

    ${resp}=    Fusion Api Switch Active User    sarah

    ${resp}    Fusion Api Delete Alert
    Wait For Task   ${resp}    ${timeout}   ${interval}
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log To Console    "Alerts Deleted Successfully!!!"

    ${resp}=    Fusion Api Switch Active User    nat

    ${resp} =   Fusion Api Get Network Set    param=?filter="'name'=='${network_set[1]['name']}'"
    Log To Console    ${resp}
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    ${set} =    Fusion Api Delete Network Set    uri=${uri}
    ${task} =   Wait For Task    ${set}    60s   1s
    Log To Console    "Networkset Removed!!"

13_Validate Alerts
    [Documentation]    Validating the Alerts after deleting the network set

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}=    Fusion Api Get Alerts
    Log To Console    ${resp}

    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' =='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description1}'     Continue For Loop
    \   Log To Console    Alerts Validation Completed

14_Disable Interconnect 1 Linked downlink port
    Set Log Level    TRACE
    [Documentation]    Disabling the downlink port of Interconnect 1 and verifying the downlink status

    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    Set Log Level    TRACE
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp['members'][0]['uri']}
     ${ic_uri}=    Get Variable Value    ${li_resp['members'][0]['interconnects']}
    :FOR    ${b}    IN RANGE    0    1
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${b}]}
    \    ${port_name}=    Run Keyword If    '${ic_resp['ports'][${b}]['portStatus']}' == 'Unlinked'    Get Variable Value    ${ic_resp['ports'][${b}]['portName']}

15_Validate Alert
    [Documentation]    Validating the Alerts after disabling the downlink port in Interconnect 1

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description2}'     Continue For Loop
    \   Log To Console    Alerts Validation Completed

16_Enabling Disabled Downlink Port and Get Interconnect details
    [Documentation]    Enabling the disabled downlink and verify the port status

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Unlinked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =     Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_downlink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_downlink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_downlink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_downlink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_downlink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     150s    10s
    Sleep    100

    ${ic1} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    ${port1_name}=    Run Keyword If    '${ic1['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic1['members'][0]['ports'][0]['portName']}
    Log To Console    ${port1_name}
    ${ic2} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${port2_name}=    Run Keyword If    '${ic2['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic2['members'][0]['ports'][0]['portName']}
    Log To Console    ${port2_name}
    ${ic3} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect3}'"
    ${port3_name}=    Run Keyword If    '${ic3['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic3['members'][0]['ports'][0]['portName']}
    Log To Console    ${port3_name}
    ${ic4} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${port4_name}=    Run Keyword If    '${ic4['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic4['members'][0]['ports'][0]['portName']}
    Log To Console    ${port4_name}

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log To Console    "Alerts Deleted Successfully!!!"

16_a_Disabling Uplink ports in Interconnect
    [Documentation]    Disabling the Uplink ports in the interconnects

    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_Uplink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_Uplink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID_2[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_Uplink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_Uplink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

16_b_Enabling Uplink ports in the Interconnects
    Set Log Level    TRACE
    [Documentation]    Enabling the disabled uplink port and verify

    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}

    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' != 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    60s
    Sleep    100

    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}

    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID_2[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' != 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    60s
    Sleep    100

17_List IC port - "verify the downlink port status"
    [Documentation]    Verify the downlink port is in Unlinked status

    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[1]}'   Continue For Loop
    \    ${port_Status}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}
    \   Append To List    ${list}    ${port_Status}

    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log to console and logfile    ${len}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Unlinked_down[0]}'   Continue For Loop
    \    ${port_Status}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Unlinked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}
    \   Append To List    ${list}    ${port_Status}

18_Validate Alert
    [Documentation]    Verifying the alerts after disable and enable the uplink ports

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description4}'     Continue For Loop
    \   Log To Console    Alerts Validation Completed



19_Remove Interconnect 1 in OA
    [Documentation]    Removing the Interconnect 1 from OA

    ${ic_resp}=    Remove Interconnect in OA    ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    Sleep    200s
    Log To console    "Interconnect 1 Removed Successfully"

20_Recreate Network & Network set
    [Documentation]    Creating the deleted network and network set again

    ${resp}=    Fusion Api Switch Active User    nat
    ${resp}     fusion api create ethernet network      body=${enet[2]}
    Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to Create Ethernet network"

    ${resp}=    Fusion Api Create Network Set    body=${network_set[1]}
    Log To Console    ${resp}
    Log To Console    "Networksets created Successfully"

21_Add Interconnect 1 Again
    [Documentation]    Adding the deleted Interconnect 1 again

    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp}=    Add Interconnect in OA    ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    Sleep    200s
    Log To console    "Interconnect 1 Added Successfully"
    ${resp}=    Fusion Api Switch Active User    nat
    ${resp} =   Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    Run Keyword If   ${resp['count']} == 0    Fail    Log To Console    Interconnect 1 is Available!!!

22_Delete Server profiles
    [Documentation]    Deleting the Server Profiles
    ${resp}=    Fusion Api Switch Active User    sarah
    Log To Console    ${server_profile1[0]['name']}
    Power off ALL servers
    ${resp}=    Fusion Api Delete Server Profile    ${server_profile1[0]['name']}    param=?force=true
    ${task} =   Wait For Task   ${resp}     200s    10s
    Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to delete Server profile"
    ${resp}=    Fusion Api Delete Server Profile    ${server_profile2[0]['name']}    param=?force=true
    ${task} =   Wait For Task   ${resp}     200s    10s
    Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to delete Server profile"
    Log To Console    ${resp}

23_Remove Enclosure & verify Li and Interconnect
    [Documentation]    Remove Enclosure and Verify LI & Interconnect is not Present
    ${resp}=    Fusion Api Switch Active User    sarah
    ${encs} =    Fusion Api Get Enclosures
    Log To Console    ${encs}
    Log To Console    ${encs['members'][0]['uri']}
    ${resp}=    Fusion Api Remove Enclosure    uri=${encs['members'][0]['uri']}    param=?force=true
    Log To Console    ${resp}
    ${task} =   Wait For Task   ${resp}     500s    10s
    Log To Console    ${task}

    ${encs} =    Fusion API Get Enclosures
    Run Keyword If    ${encs['count']} == 0    Log To Console    Enclosure Is not Available!!!
    Log To Console    ${encs}
    ${resp} =       Fusion Api Get LI
    Run Keyword If    ${encs['count']} == 0    Log To Console    LI Is not Available!!!
    Log To Console    ${resp}
    ${resp} =   Fusion Api Get Interconnect
    Run Keyword If    ${encs['count']} == 0    Log To Console     Interconnect Is not Available!!!
    Log To Console    ${resp}

24_Verify Interconnects are not Present
    [Documentation]    Verifying the Interconnects are not Present in Appliance
    ${resp}=    Fusion Api Switch Active User    nat
    :FOR    ${x}    IN RANGE    0    2
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS[${x}]}'"
    \   Run Keyword If    ${resp['count']} == 0    Log To Console     Interconnect Is not Available!!!

25_Remove EG & LIG
    [Documentation]    Removing EG & LIG
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =   Fusion Api Get Enclosure Groups
    Log To Console    ${resp['members'][0]['uri']}
    ${encs} =    Fusion Api Delete Enclosure Group    uri=${resp['members'][0]['uri']}
    Sleep    60s
    log to console    \n-EG Deleted Successfully!!!!

    ${resp}=    Fusion Api Switch Active User    nat
    ${resp}=    Fusion Api Delete LIG    ${lig['name']}
    ${resp} =    Fusion Api Get LIG    param=?filter="'name'=='${lig['name']}'"}
    Sleep    60s

26_Logout From nat & Sarah
    [Documentation]    Verifying the Login and Logout by users
    ${resp}=    Fusion Api Switch Active User    nat

    ${resp}=    Fusion Api Switch Active User    sarah

*** Keywords ***
Suite Setup Tasks

    [Documentation]    Suite Setup tasks
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance!!!
    Clean OV
    :FOR   ${user}   IN   @{users}
    \   ${Response}     Fusion Api Add User    ${user}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log To Console    \n${Response['userName']} is created Successfully
    Fusion Api Logout Appliance
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${server_credentials}
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${network_credentials}

    ${resp}=    Fusion Api Switch Active User    sarah

    ${resp}=    Fusion Api Switch Active User    nat

    ${Length}=    Get Length    ${enet}
    :For    ${x}    IN RANGE    0    ${Length}
    \    ${resp}     fusion api create ethernet network     body=${enet[${x}]}
    \    Run keyword unless    ${resp['status_code']}== 202    Fail    "Unable to Create Ethernet network"    ELSE    Log To Console    "Ethernet created Successfully"

    :For    ${fc_net}    IN    @{Fc_network}
    \    ${resp} =    Fusion Api Create Fc Network    ${fc_net}
    \    Run keyword unless    ${resp['status_code']}== 202    Fail    "Unable to Create FC network"

    #:FOR   ${nwset}   IN   @{network_set}
    ${resp}=    Add Network Sets from variable    ${network_set}
    ${Logout_response}      Fusion Api Logout Appliance
    Run keyword unless  ${Logout_response['status_code']}== 204    Fail    "Unable to Logout"
    Log To Console    \n\nLogged_Out from Appliance as ${users[0]['userName']}
    Log To Console     Suite Setup Completed!!!

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Remove Interconnect in OA
    [Documentation]     Remove Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    Sleep    3
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    Sleep    3
    SSHLibrary.Write    ++diag--
    Sleep    3
    SSHLibrary.Write    efuse IOM ${interconnect_bay} OFF
    Sleep    5
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

Add Interconnect in OA
    [Documentation]     Add Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    Sleep    3
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    Sleep    3
    SSHLibrary.Write    ++diag--
    Sleep    3
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    Sleep    5
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

