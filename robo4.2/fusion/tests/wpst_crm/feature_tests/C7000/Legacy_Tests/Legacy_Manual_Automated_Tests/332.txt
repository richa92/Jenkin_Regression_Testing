*** Settings ***
Documentation      Scope using FusionLibrary API keywords
Variables          data_variables.py
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
#Suite Setup        Cleanup For Suite
#Suite Teardown    Cleanup For Suite
Resource           ../../../../resources/resource.txt

*** Test Cases ***

1. Login to Appliance
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${Login_response}=  Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200   Fail    "Unable to Login"
    Log To Console    Step 1 Completed Successfully
    #Initial Cleanup
    Clean OV
#####Start the testing with fresh appliance(vpools allocated id will be 0 for mac,wwn and sn)
2. Create 1 Enet and FC network
    ${resp} =   Fusion Api Create Ethernet Network   body=${net}
    Log to console and logfile  ${resp}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE Log to console and logfile  \n-Ethernet network created successfully!
    ${resp} =   Fusion Api Create Fc Network        ${FC}
    Run Keyword If  '${resp['status_code']}' != '202'   Fail    ELSE        Log to console and logfile  \n-FC Network created successfully!
    Log to console and logfile    Networks created successfully
    Log To Console    Step 2 Completed Successfully

3. Get vpools(mac,wwn,sn ranges from OV) with validate the allocated id for vpools are 0
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Run Keyword If  '${resp['freeCount']}'=='${freecount}' and '${resp['allocatedCount']}'=='0'     Log to console      Succesfully find count for mac and allocated id as 0
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp['freeCount']}'=='${freecount}' and '${resp['allocatedCount']}'=='0'     Log to console      Succesfully find count for wwn and allocated id as 0
    ${resp2}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp['freeCount']}'=='${sncount}' and '${resp['allocatedCount']}'=='0'       Log to console      Succesfully find count for sn and allocated id as 0
    Log To Console    Step 3 Completed Successfully

4. Select add auto-generated for MAC Addresses. Select Regenerate several times. Verify a different set of ID’s is generated each time you click regenerate. Then select Add.
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][0]}
    Log to console    ${mac_values}
    Log to Console    Re-genrate mac range
    ${resp}     Fusion Api Generate Pool    ${pooluri[0]['mac']}
    Log To Console    ${resp}
    Log To Console    ${resp['startAddress']}
    Log To Console    ${resp['endAddress']}
    ${mac_range_body} =     Copy Dictionary    ${vmac_body332}
    Set To Dictionary          ${mac_range_body}   startAddress     ${resp['startAddress']}
    Set To Dictionary          ${mac_range_body}   endAddress     ${resp['endAddress']}
    Log To Console    ${mac_range_body}
    ${resp} =    Fusion Api Create Vmac Range    ${mac_range_body}
    Log To Console    ${resp}
    Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  log to console  \nMAC Range generated Successfully
    Run Keyword If  '${resp['enabled']}' != 'True'  Fail    ELSE  Log to console and logfile  \n-generated pool is enabled
    Run Keyword If  '${resp['totalCount']}' != '${freecount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pool is generated when regenerate button clicked
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Log to console and logfile      ${resp1}
    Run Keyword If  '${resp1['totalCount']}' != '${regenerateCount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pools are generated
    Log To Console    Step 4 Completed Successfully

5. Select add auto-generated for WWN Addresses. Select Regenerate several times. Verify a different set of ID’s is generated each time you click regenerate. Then select Add.
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][0]}
    Log to console    ${wwn_values}
    Log to Console    Re-genrate wwn range
    ${resp}     Fusion Api Generate Pool    ${pooluri[0]['wwn']}
    Log To Console    ${resp}
    Log To Console    ${resp['startAddress']}
    Log To Console    ${resp['endAddress']}
    ${wwn_range_body} =     Copy Dictionary    ${vwwn_body332}
    Set To Dictionary          ${wwn_range_body}   startAddress     ${resp['startAddress']}
    Set To Dictionary          ${wwn_range_body}   endAddress     ${resp['endAddress']}
    Log To Console    ${wwn_range_body}
    ${resp} =    Fusion Api Create Vwwn Range    ${wwn_range_body}
    Log To Console    ${resp}
    Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  log to console  \nwwn Range generated Successfully
    Run Keyword If  '${resp['enabled']}' != 'True'  Fail    ELSE  Log to console and logfile  \n-generated pool is enabled
    Run Keyword If  '${resp['totalCount']}' != '${freecount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pool is generated when regenerate button clicked
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Log to console and logfile      ${resp1}
    Run Keyword If  '${resp1['totalCount']}' != '${regenerateCount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pools are generated
    Log To Console    Step 5 Completed Successfully

6. Select add auto-generated for SN Addresses. Select Regenerate several times. Verify a different set of ID’s is generated each time you click regenerate. Then select Add.
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    ${sn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][0]}
    Log to console    ${sn_values}
    Log to Console    Re-genrate sn range
    ${resp}     Fusion Api Generate Pool    ${pooluri[0]['sn']}
    Log To Console    ${resp}
    Log To Console    ${resp['startAddress']}
    Log To Console    ${resp['endAddress']}
    ${sn_range_body} =     Copy Dictionary    ${vsn_body332}
    Set To Dictionary          ${sn_range_body}   startAddress     ${resp['startAddress']}
    Set To Dictionary          ${sn_range_body}   endAddress     ${resp['endAddress']}
    Log To Console    ${sn_range_body}
    ${resp} =    Fusion Api Create Vsn Range    ${sn_range_body}
    Log To Console    ${resp}
    Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  log to console  \n sn Range generated Successfully
    Run Keyword If  '${resp['enabled']}' != 'True'  Fail    ELSE  Log to console and logfile  \n-generated pool is enabled
    Run Keyword If  '${resp['totalCount']}' != '${sncount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pool is generated when regenerate button clicked
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Log to console and logfile      ${resp1}
    Run Keyword If  '${resp1['totalCount']}' != '${regenerate_snCount}'  Fail    ELSE  Log to console and logfile  \n-Random ID pools are generated
    Log To Console    Step 6 Completed Successfully

7.Mac validation(Adding custom range under mac address)
    ${resp} =    Fusion Api Create Vmac Range    ${val_vmac}
    Log to console and logfile      ${resp}
    Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to Create MAC range"
    Log to console and logfile      MAC CUSTOM RANGE is successfully created
    #Error message validation
    ${error_resp} =    Fusion Api Create Vmac Range    ${val_vmac1}
    Log to console and logfile      ${error_resp}
    Run keyword unless  ${error_resp['status_code']}== 400    Fail    ${error_resp['message']}
    Should Be Equal As Strings    ${error_resp['message']}    ${error_msg_vmac1}
    Log To Console    Step 7 Completed Successfully

8.WWN validation(Adding custom range under wwn address)
    ${resp} =    Fusion Api Create Vwwn Range    ${val_vwwn1}
    Log to console and logfile      ${resp}
    Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to Create WWN range"
    Log to console and logfile      WWN CUSTOM RANGE is successfully created

    ${error_resp} =    Fusion Api Create Vwwn Range    ${val_vwwn2}
    Log to console and logfile      ${error_resp}
    Run keyword unless  ${error_resp['status_code']}== 400    Fail    ${error_resp['message']}
    Should Be Equal As Strings    ${error_resp['message']}    ${error_msg_vwwn1}
    Log To Console    Step 8 Completed Successfully
9.SN validation
    ${resp} =    Fusion Api Create Vsn Range    ${vsn_vsn1}
    Log to console and logfile      ${resp}
    Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to Create SN range"
    Log to console and logfile      SN CUSTOM RANGE is successfully created

    ${error_resp} =    Fusion Api Create Vsn Range    ${val_vsn2}
    Log to console and logfile      ${error_resp}
    Run keyword unless  ${error_resp['status_code']}== 400    Fail    ${error_resp['message']}
    Should Be Equal As Strings    ${error_resp['message']}    ${error_msg_vsn1}
    Log To Console    Step 9 Completed Successfully
10. Create LIG,EG and import enclosure
    ${body} =   Build LIG body      ${lig_332}
    ${resp_lig} =   Fusion Api Create LIG   ${body}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Log to console and logfile    LIG created successfully
    ${uri} =    Get From Dictionary    ${task['associatedResource']}    resourceUri
    Set Global Variable    ${lig_uri}    ${uri}
    ####EG
    ${resp_eg} =    Add Enclosure Group from variable       ${enc_group_332}
    Run keyword unless  ${resp_eg['status_code']}== 201 Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully
    ${resp_import} =    Add Enclosures from variable     ${encs_332}
    Run keyword unless  ${resp_import['status_code']}== 202 Fail    "Unable to import enclosure"
    Log to console and logfile    Enclosure imported succesfully
    Log To Console    Step 10 Completed Successfully

11. Profile Creation with Virtual range
    ${SP_resp} =    Add Server Profiles from variable   ${server_profiles_pools2}
    Run keyword unless  ${SP_resp['status_code']}== 202 Fail    "Unable to add server profile"
    Log to console and logfile    Server profile created succesfully
    Log To Console    Step 11 Completed Successfully

12. Validate the allocated id's for mac,wwn,sn(2mac,2wwn,1sn)
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Run Keyword If  '${resp['allocatedCount']}' != '2'  Fail    ELSE  Log to console and logfile   \n-Allocated id for mac is 2
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp['allocatedCount']}' != '2'  Fail    ELSE  Log to console and logfile   \n-Allocated id for wwn is 2
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp['allocatedCount']}' != '1'  Fail    ELSE  Log to console and logfile   \n-Allocated id for sn is 1
    Log To Console    Step 12 Completed Successfully

13.Delete the auto-generated vmac range
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    ${rangeuri} =   Get From Dictionary     ${resp}     rangeUris
    :FOR    ${x}    IN  @{rangeuri}
    \       Log to console and logfile  ${x}
    \       ${resp}=    Fusion API Get Pool     ${x}
    \       Log to console and logfile  ${resp}
    \       ${resp1}=   Run Keyword If  '${resp['allocatedIdCount']}' == '2'    Delete vmac range   ${x}    ${disable_serverallocated}
    Log to console and logfile  Default generated vmac ranges can’t be removed because they are in use
    Log To Console    Step 13 Completed Successfully

14.Delete the auto-generated vwwn range
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    ${rangeuri} =   Get From Dictionary     ${resp}     rangeUris
    :FOR    ${x}    IN  @{rangeuri}
    \       ${resp}=    Fusion API Get Pool     ${x}
    \       ${resp1}=   Run Keyword If  '${resp['allocatedIdCount']}' == '2'    Delete vwwn range   ${x}    ${disable_serverallocated}
    Log to console and logfile  Default generated vwwn ranges can’t be removed because they are in use
    Log To Console    Step 14 Completed Successfully
15.Delete the auto-generated vsn range
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    ${rangeuri} =   Get From Dictionary     ${resp}     rangeUris
    :FOR    ${x}    IN  @{rangeuri}
    \       ${resp}=    Fusion API Get Pool     ${x}
    \       ${resp1}=   Run Keyword If  '${resp['allocatedIdCount']}' == '1'    Delete vsn range    ${x}    ${disable_serverallocated}
    Log to console and logfile  Default generated vsn ranges can’t be removed because they are in use
    Log To Console    Step 15 Completed Successfully

16.Disable Generated Mac Pool Range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${mac_values}
    \   ${status} =    Run Keyword If  '${mac_values['rangeCategory']}' == 'Generated'    Disable mac range  ${disablerange}  ${mac_values['uri']}
    Log To Console    Step 16 Completed Successfully

17.Disable Generated WWN Pool Range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${wwn_values}
    \   ${status} =    Run Keyword If  '${wwn_values['rangeCategory']}' == 'Generated'    Disable wwn range  ${disablerange}  ${wwn_values['uri']}
    Log To Console    Step 17 Completed Successfully
18.Disable Generated SN Pool Range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${sn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${sn_values}
    \   ${status} =    Run Keyword If  '${sn_values['rangeCategory']}' == 'Generated'    Disable sn range  ${disablerange}  ${sn_values['uri']}
    Log To Console    Step 18 Completed Successfully

19.Profile Creation with custom ranges Virtual range (1 FC network)
    ${SP_resp} =    Add Server Profiles from variable   ${server_profiles_custom}
    Run keyword unless  ${SP_resp['status_code']}== 202 Fail    "Unable to add server profile"
    Log To Console    Step 19 Completed Successfully

20.Check profile is created with custom mac range
    ${resp1}     Fusion Api Get Vmac Range     ${pooluri[0]['mac']}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    ${new_status} =    Create List
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${mac_values}
    \   ${status} =    Run Keyword If  '${mac_values['rangeCategory']}'=='Custom' and '${mac_values['allocatedIdCount']}'=='1'  Get CUSTOM mac range    ${resp1['rangeUris'][${x}]}
    \   Append to list      ${new_status}  ${status}
    ${len} =    Get Length  ${new_status}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${settings_startaddress} =     Get From List   ${new_status}    ${x}
    \   Run Keyword If  '${settings_startaddress}' != 'None'        Exit For Loop
    Log to console    ${settings_startaddress}

    ${resp} =    Fusion Api Get Server Profiles
    Log to console    ${resp}
    Log to console    ${server_profiles_custom[0]['name']}
    ${mac_startAddress} =    Get Profile mac Details    ${resp}    ${server_profiles_custom[0]['name']}
    Log to console    ${mac_startAddress}
    Log to console    got profile1 details
    Should Be Equal As Strings   ${settings_startaddress}    ${mac_startAddress}
    Log To Console    Step 20 Completed Successfully

21.Check profile is created with custom wwn range
    ${resp1}     Fusion Api Get Vwwn Range     ${pooluri[0]['wwn']}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    ${new_status} =    Create List
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${wwn_values}
    \   ${status} =    Run Keyword If  '${wwn_values['rangeCategory']}'=='Custom' and '${wwn_values['allocatedIdCount']}'=='2'  Get CUSTOM wwn range    ${resp1['rangeUris'][${x}]}
    \   Append to list  ${new_status}   ${status}
    ${len} =    Get Length  ${new_status}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${settings_startaddress} =     Get From List   ${new_status}    ${x}
    \   Run Keyword If  '${settings_startaddress}' != 'None'        Exit For Loop
    Log to console    ${settings_startaddress}
    ${resp} =    Fusion Api Get Server Profiles
    Log to console    ${resp}
    Log to console    ${server_profiles_custom[0]['name']}
    ${wwn_startAddress} =    Get Profile wwn Details    ${resp}    ${server_profiles_custom[0]['name']}
    Log to console    ${wwn_startAddress}
    Log to console    got profile1 details
    Should Be Equal As Strings   ${settings_startaddress}    ${wwn_startAddress}
    Log To Console    Step 21 Completed Successfully

22.Check profile is created with custom sn range
    ${resp1}     Fusion Api Get Vsn Range     ${pooluri[0]['sn']}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    ${new_status} =    Create List
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${sn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${sn_values}
    \   ${status} =    Run Keyword If  '${sn_values['rangeCategory']}'=='Custom' and '${sn_values['allocatedIdCount']}'=='1'    Get CUSTOM sn range ${resp1['rangeUris'][${x}]}
    \   Append to list  ${new_status}   ${status}
    ${len} =    Get Length  ${new_status}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${settings_startaddress} =     Get From List   ${new_status}    ${x}
    \   Run Keyword If  '${settings_startaddress}' != 'None'        Exit For Loop
    Log to console    ${settings_startaddress}
    ${resp} =    Fusion Api Get Server Profiles
    Log to console    ${resp}
    Log to console    ${server_profiles_custom[0]['name']}
    ${sn_startAddress} =    Get Profile sn Details    ${resp}    ${server_profiles_custom[0]['name']}
    Log to console    ${sn_startAddress}
    Log to console    got profile1 details
    Should Be Equal As Strings   ${settings_startaddress}    ${sn_startAddress}
    Log To Console    Step 22 Completed Successfully

23. Validate the allocated id's for mac,wwn,sn(3mac,4wwn,2sn)
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Run Keyword If  '${resp['allocatedCount']}' != '3'  Fail    ELSE  Log to console and logfile   \n-Allocated id for mac is 3
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp['allocatedCount']}' != '4'  Fail    ELSE  Log to console and logfile   \n-Allocated id for wwn is 4
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp['allocatedCount']}' != '2'  Fail    ELSE  Log to console and logfile   \n-Allocated id for sn is 2
    Log To Console    Step 23 Completed Successfully

24. Remove all profiles and validate the allocated id's
    Remove All Server Profiles
    Log To Console    Step 24 Completed Successfully

25. Get vpools(mac,wwn,sn ranges from OV) and validate the allocated id's for vpools is 0
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Run Keyword If  '${resp['freeCount']}'=='${freecount}' and '${resp['allocatedCount']}'=='0'     Log to console      Succesfully find count for mac and allocated id as 0
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp['freeCount']}'=='${freecount}' and '${resp['allocatedCount']}'=='0'     Log to console      Succesfully find count for wwn and allocated id as 0
    ${resp2}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp['freeCount']}'=='${sncount}' and '${resp['allocatedCount']}'=='0'       Log to console      Succesfully find count for sn and allocated id as 0
    Log To Console    Step 25 Completed Successfully

26.Disable custom Mac Pool Range and enable generated mac pool range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${mac_values}
    \   ${status} =    Run Keyword If  '${mac_values['rangeCategory']}' == 'Custom'    Disable mac range  ${disablerange}  ${mac_values['uri']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${mac_values}
    \   ${status} =    Run Keyword If  '${mac_values['rangeCategory']}' == 'Generated'    Enable mac range  ${enablerange}  ${mac_values['uri']}
    Log To Console    Step 26 Completed Successfully

27.Disable custom wwn Pool Range and enable generated wwn pool range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${wwn_values}
    \   ${status} =    Run Keyword If  '${wwn_values['rangeCategory']}' == 'Custom'    Disable wwn range  ${disablerange}  ${wwn_values['uri']}
     :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${wwn_values}
    \   ${status} =    Run Keyword If  '${wwn_values['rangeCategory']}' == 'Generated'    Enable wwn range  ${enablerange}  ${wwn_values['uri']}
    Log To Console    Step 27 Completed Successfully

28.Disable custom sn Pool Range and enable generated sn pool range
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${sn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${sn_values}
    \   ${status} =    Run Keyword If  '${sn_values['rangeCategory']}' == 'Custom'    Disable sn range  ${disablerange}  ${sn_values['uri']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${sn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${sn_values}
    \   ${status} =    Run Keyword If  '${sn_values['rangeCategory']}' == 'Generated'    Enable sn range  ${enablerange}  ${sn_values['uri']}
    Log To Console    Step 28 Completed Successfully

29.Profile Creation with generated ranges Virtual range (1 ENET network)
    ${SP_resp}    Add Server Profiles from variable   ${server_profiles_generated}
    Run keyword unless  ${SP_resp['status_code']}== 202 Fail    "Unable to add server profile"
    Log To Console    Step 29 Completed Successfully

30.Check profile is created with generated wwn range
    ${resp1}     Fusion Api Get Vwwn Range     ${pooluri[0]['wwn']}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    ${new_status} =    Create List
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${wwn_values}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${wwn_values}
    \   ${status} =    Run Keyword If  '${wwn_values['rangeCategory']}'=='Generated' and '${wwn_values['allocatedIdCount']}'=='0'   Get CUSTOM wwn range    ${resp1['rangeUris'][${x}]}
    \   Append to list  ${new_status}   ${status}
    ${len} =    Get Length  ${new_status}
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${settings_startaddress} =     Get From List   ${new_status}    ${x}
    \   Run Keyword If  '${settings_startaddress}' != 'None'        Exit For Loop
    Log to console    ${settings_startaddress}
    ${resp}     Fusion Api Get Server Profiles
    ${wwn_startAddress}        Get From Dictionary     ${resp['members'][0]['connections'][0]}    wwpn
    Log to console    ${wwn_startAddress}
    Should Not Be Equal As Strings   ${settings_startaddress}    ${wwn_startAddress}
    Log To Console    Step 30 Completed Successfully

31. Validate the allocated id's for mac,wwn,sn
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Run Keyword If  '${resp['enabled']}' != 'True'  and '${resp['allocatedCount']}' != '1'  Fail    ELSE  Log to console and logfile   \n-Allocated id for mac is 1
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp['enabled']}' != 'True'  and '${resp['allocatedCount']}' != '0'  Fail    ELSE  Log to console and logfile   \n-Allocated id for wwn is 0
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp['enabled']}' != 'True'  and '${resp['allocatedCount']}' != '1'  Fail    ELSE  Log to console and logfile   \n-Allocated id for sn is 1
    Log To Console    Step 1 Completed Successfully
    #Final Cleanup
    Clean OV
32. LOGOUT OF APPLIANCE
   ${resp} =    Fusion Api Logout Appliance
   Log to console and logfile     ${resp}
   Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logout from appliance successfully
*** Keywords ***
Get CUSTOM mac range
    [Arguments]     ${rangeUri}
    ${status} =     Fusion Api Get Vmac Range  ${rangeUri}
    Log to console    ${status['startAddress']}
    Run Keyword If  '${status['status_code']}' == '200'    Log to console   Successfully got Start address    Exit For Loop
    [return]    ${status['startAddress']}

Get CUSTOM wwn range
    [Arguments]     ${rangeUri}
    ${status} =     Fusion Api Get Vwwn Range  ${rangeUri}
    Log to console    ${status['startAddress']}
    Run Keyword If  '${status['status_code']}' == '200'    Log to console   Successfully got Start address    Exit For Loop
    [return]    ${status['startAddress']}
Get CUSTOM sn range
    [Arguments]     ${rangeUri}
    ${status} =     Fusion Api Get Vsn Range  ${rangeUri}
    Log to console    ${status['startAddress']}
    Run Keyword If  '${status['status_code']}' == '200'    Log to console   Successfully got Start address    Exit For Loop
    [return]    ${status['startAddress']}
Disable mac range
    [Arguments]     ${disablerange}   ${mac_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${disablerange}  ${mac_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   MAC Range Disabled Successfully    Exit For Loop
Disable wwn range
    [Arguments]     ${disablerange}   ${wwn_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${disablerange}  ${wwn_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   WWN Range Disabled Successfully    Exit For Loop
Disable sn range
    [Arguments]     ${disablerange}   ${sn_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${disablerange}  ${sn_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   SN Range Disabled Successfully    Exit For Loop
Enable mac range
    [Arguments]     ${enablerange}   ${mac_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${enablerange}  ${mac_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   MAC Range enabled Successfully    Exit For Loop
Enable wwn range
    [Arguments]     ${enablerange}   ${wwn_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${enablerange}  ${wwn_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   WWN Range enabled Successfully    Exit For Loop
Enable sn range
    [Arguments]     ${enablerange}   ${sn_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${enablerange}  ${sn_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   SN Range enabled Successfully    Exit For Loop
Delete vmac range
    [Arguments]     ${rangeuri} ${disable_serverallocated}
    ${resp}=    Fusion Api Delete Vmac Range    uri=${rangeuri}
    Log to console and logfile  ${resp['message']}
    Should Be Equal As Strings    ${resp['message']}    ${disable_serverallocated}
Delete vwwn range
    [Arguments]     ${rangeuri} ${disable_serverallocated}
    ${resp}=    Fusion Api Delete Vwwn Range    uri=${rangeuri}
    Log to console and logfile  ${resp['message']}
    Should Be Equal As Strings    ${resp['message']}    ${disable_serverallocated}
Delete vsn range
    [Arguments]     ${rangeuri} ${disable_serverallocated}
    ${resp}=    Fusion Api Delete Vsn Range    uri=${rangeuri}
    Log to console and logfile  ${resp['message']}
    Should Be Equal As Strings    ${resp['message']}    ${disable_serverallocated}

Get Profile mac Details
    [Arguments]     ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${mac_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get From Dictionary    ${resp['members'][${x}]['connections'][0]}    mac
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]    ${mac_address}

Get Profile wwn Details
    [Arguments]     ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${wwn_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get From Dictionary    ${resp['members'][${x}]['connections'][0]}    wwpn
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]    ${wwn_address}

Get Profile sn Details
    [Arguments]     ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${sn_address} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get From Dictionary    ${resp['members'][${x}]}      serialNumber
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]    ${sn_address}

Add Enclosure Group from variable
    [Documentation] Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}
    #Log to console and logfile     ${enc_group['name']}
    #Log to console and logfile     ${enc_group}
    #Log to console and logfile     Adding ENCLOSURE GROUP ${enc_group['name']}
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   ${liguri} =     Common URI Lookup by name    ${liguri}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${resp} =   Fusion Api Create Enclosure Group   ${enc_group}
    [Return]    ${resp}

Add Enclosures from variable
    [Documentation] Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${encs_m}
    Log to console and logfile      Adding ENCLOSURES
    Log to console and logfile      ${encs_m}
    :FOR    ${enc}  IN  @{encs_m}
    \   ${encuri} =     Get From Dictionary ${enc}  enclosureGroupUri
    \   ${encuri} =     Common URI Lookup by name    ${encuri}
    \   Set to dictionary   ${enc}  enclosureGroupUri       ${encuri}
    \   ${resp} =   Fusion Api Add Enclosure    ${enc}
    \   ${task} =   Wait For Task   ${resp}     40min   20s
    [Return]    ${resp}

Add Server Profiles from variable
    [Documentation] Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}
    Log to console and logfile      Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   ${shuri} =  Get from Dictionary ${profile}  serverHardwareUri
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   Log to console and logfile  ${profile}
    \   ${eg} =     Get from Dictionary ${profile}  enclosureGroupUri
    \   Log to console and logfile  ${eg}
    \   ${uri} =    Common URI Lookup by name    ${eg}
    \   Log to console and logfile  ${uri}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary ${profile}  enclosureUri
    \   Log to console and logfile  ${enc}
    \   ${uri} =    Common URI Lookup by name    ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${connections} =    Get From Dictionary ${profile}  connections
    \   Log to console and logfile  ${connections}
    \   ${connections} =    Lookup Connection Uris  ${connections}
    \   Log to console and logfile  ${connections}
    \   Set to Dictionary   ${profile}  connections     ${connections}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}
    \   Log to console and logfile  ${resp}
    \   ${task} =   Wait For Task   ${resp}     timeout=13 mins     interval=10s
    \   Log to console and logfile  ${task}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    #\   Should Match Regexp    ${task_state}   ((?i)Warning|Completed)
    [Return]    ${resp}
Clean OV
    [Documentation] Cleans the appliance
    Log to console    \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users