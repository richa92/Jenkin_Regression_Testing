***Settings***
Documentation       Feature Tests:LIG COMPLIANCE

Library            json
Library    FusionLibrary
Library            RoboGalaxyLibrary
Variables          data_variables_supershaw.py
#Variables          data_variables_utahu_ocho.py
Resource           ../../../../../../../Resources/api/fusion_api_resource.txt
Library            SSHLibrary
Library            Collections

*** Variables ***
${APPLIANCE_IP}     15.245.132.70

*** Test Cases ***
### Pre-Conditions###

Login To Appliance
    [Documentation]  Login into the Appliance and creating users
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'    Fail    ELSE  Log    \n\n Successfully logged into the appliance!! \n\n    console=Truee


Cleanup Suite
    [Documentation]    Returns appliance to a "clean" state by removing all resources\enclosures
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Adding Different user
    [Documentation]    Adding Different user
    ${l} =  Get Length  ${users}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${resp}     Fusion Api Add User     body=${users[${x}]}
    \   Log    \n\n response of ${users[${x}]} is ${resp}!! \n\n    console=True
    \   Run Keyword Unless    '${resp['status_code']}' == '200'  Fail

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${serveradmin_credentials}
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${Networkadmin_credentials}

1_a Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User    Serveradmin

1_b Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If    '${task['taskState']}' != 'Completed'    Fail    ELSE  Log    \n\n Alerts deleted Successfully!! \n\n    console=True

1_c Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


1_d Add ethernet Network
    [Documentation]    Add ethernet Network
    :FOR    ${ethnet}   IN   @{enet_body}
    \   ${resp}    Fusion Api Create Ethernet Network   body=${ethnet}
    \   Run keyword unless    ${resp["status_code"]}== 202    Fail
    \   Log    \n\n Successfully created the ethernet network!! \n\n    console=True
    \   ${uri} =    Get From Dictionary    ${resp['associatedResource']}    resourceUri
    \   ${netnames}   CreateList
    \    Append To List   ${netnames}    ${uri}
    Set Global Variable    ${enet_uri}    ${netnames}
    :FOR    ${fc_net}   IN   @{Fc_body}
    \   ${resp}    Fusion Api Create Fc Network   body=${fc_net}
    \   Run keyword unless    ${resp["status_code"]}== 202    Fail
    \   Log    \n\n Successfully created the FC network!! \n\n    console=True
    \   ${uri} =    Get From Dictionary    ${resp['associatedResource']}    resourceUri
    \   ${netnames}   CreateList
    \    Append To List   ${netnames}    ${uri}
    Set Global Variable    ${FC_uri}    ${netnames}
    Log    \n\n Creating FC Networks!! \n\n    console=True

2 Login To Appliance As Netuser and Create LIG
    [Documentation]    Login To Appliance As Netuser and Create LIG
    ${body} =    Build LIG Body    ${ligs[0]}
    Log to console and Log file    \n Creating LIG ${ligs[0]["name"]}
    ${resp} =    Fusion API Create LIG    ${body}
    ${task} =    Wait for task    ${resp}    90s  5s
    Run Keyword If    '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nLIG Created Successfully

2_b Login To Appliance As ServerUser and Add Enclosure Group
    [Documentation]    Login To Appliance As ServerUser and Add Enclosure Group
    ${resp}=    Fusion Api Switch Active User     Serveradmin


    Log to console  \n Creating EG
    ${Resp} =    Add Enclosure Group from variable    ${eg_body1[0]}
    Run Keyword If    '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully

###Test Case 3###
3 Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User    Serveradmin


3_a Importing Enclosure
    [Documentation]    Importing Enclosure
    Add Enclosures from variable    ${encs}
    Log to console and logfile    Enclosure imported successfully

### Test Case 4###
4_a Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


4_b Verify logical switch in Consistent state
    [Documentation]    Verify logical switch in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "CONSISTENT"    Fail   ELSE  Log to console    \nLI IS CONSISTENT

### Test Case 5###
5 Login To Appliance As Netuser
   [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

5_a Verify interconnects status
    [Documentation]    Verify interconnects status
    ${li_resp} =    Fusion Api Get Li
    ${IC_uri}    Get From Dictionary    ${li_resp["members"][0]}    interconnects
    ${length} =    Get Length     ${IC_uri}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${IC_uri[${z}]}
    \    Run Keyword If    "${ic_resp["state"]}" != "Configured"    Fail    ELSE    Log to console and logfile    Successfully Verfied interconnect status!!!

###Test Case 6###
6-a Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User    Serveradmin

6_b Creating Server Profiles
    [Documentation]    Creating Server Profiles
    Poweroff the server_hardware and creating the server_profile    ${server_profile1}   ${bay_no}
    Power on server    ${server_profile1[0]['serverHardwareUri']}
    sleep   600s
    Log to console and logfile    Server1 is poweredon successfully

6_c Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts are deleted Successfully

###Test Case8###
7_a Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

7_b Edit the LIG and edit the sample count and sample interval in Utilization sampling
    [Documentation]    Edit the LIG and edit the sample count and sample interval in Utilization sampling
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${ligs[0]["name"]}'"
    Log to console and logfile    ${resp}
    Set to Dictionary    ${resp["members"][0]}   telemetryConfiguration     ${telemetryConfiguration_edit}
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nLIG edited Successfully

7_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User    Serveradmin


7_d Verify LIs are not in Consistent state
    [Documentation]    Verify LIs are not in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "NOT_CONSISTENT"    Fail    ELSE  Log to console    \nLI IS INCONSISTENT
    Validating the LI_Alert_Active and Severity_Warning

7_e Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


7_f Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    ${update_uri} =    Get From Dictionary    ${li_resp["members"][0]}    uri
    Set Global Variable    ${LI_uri}    ${update_uri}
    Perform an LI Update From Group    ${LI_uri}

7_g Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User    Serveradmin


7_h Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "CONSISTENT"    Fail    ELSE  Log to console    \nLI IS in CONSISTENT state

7_i Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

7_j Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts are deleted Successfully

###Test Case8###
8_a Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

8_b Edit ethernet settings in LIG
    [Documentation]    Edit ethernet setting
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${ligs[0]["name"]}'"
    Log to console and logfile    ${resp}
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}    enableFastMacCacheFailover   false
    ${resp} =    Fusion Api Edit Lig    ${resp['members'][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \n LIG ethernet setting edited successfully

8_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


8_d Verify LIs are in NotConsistent state ,a crtical alert is sent for each LI
    [Documentation]    Verify LIs are in NotConsistent state ,a crtical alert is sent for each LI
    ${li_resp} =    Fusion Api Get Li
   Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "NOT_CONSISTENT"    Fail    ELSE  Log to console    \nLI IS in INCONSISTENT state
    Validating the LI_Alert_Active and Severity_Warning

8_e Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


8_f Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    Perform an LI Update From Group    ${LI_uri}

8_g Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


8_h Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "CONSISTENT"    Fail    ELSE  Log to console    \nLI IS CONSISTENT

8_i Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

8_j Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

###Test Case9###
9 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

9_a Edit snmp configurations
    [Documentation]    Edit snmp configurations
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${ligs[0]["name"]}'"
    Log to console and logfile    ${resp}
    Log to console and logfile    ${resp['members'][0]['snmpConfiguration']['enabled']}
    Set to Dictionary    ${resp['members'][0]['snmpConfiguration']}    enabled    false
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nLIG edited successfully

9_b Get LIG and Validate SNMP Configuration setting
    [Documentation]    Get LIG and Validate SNMP Configuration setting
    ${Lig_resp} =    Fusion Api Get Lig
    Log to console and logfile     ${Lig_resp}
    ${LIG_SNMP}    Get From Dictionary    ${Lig_resp["members"][0]["snmpConfiguration"]}    enabled
    Run Keyword If  '${LIG_SNMP}' != 'False'    Fail    ELSE  Log to console  \nLIG listed successfully

9_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


9_d Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "NOT_CONSISTENT"    Fail    ELSE  Log to console    \nLI IS INCONSISTENT
    Validating the LI_Alert_Active and Severity_Warning

9_e Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


9_f Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    Perform an LI Update From Group    ${LI_uri}

9_g Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin

9_h Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "CONSISTENT"    Fail    ELSE    Log to console    \nLI IS CONSISTENT

9_i Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

9_j Delete all alerts
     [Documentation]    Delete all alerts
     ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

###Test Case10###
10 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

10_a Add uplink set
    [Documentation]    Add uplink set
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    #${resp}=    Fusion Api Get Lig     param=?filter=""name"=="${ligs[0]["name"]}""
    #Log to console and logfile    ${resp}
    #${sh_resp}    Fusion Api Get Ethernet Networks   #param=?filter="'name'=='${enet_body[0]['name']}'"
    #Set Global Variable    ${a_uri}    ${sh_resp['members'][0]['uri']}
    #Append To List    ${uplinkSets_Add[0]['networkUris']}    ${a_uri}
    Set to Dictionary    ${ligs[0]}    uplinkSets     ${uplinkSets_Add}
    ${body} =    Build LIG Body    ${ligs[0]}
    Log to console and Log file    \n Creating LIG ${ligs[0]["name"]}
    ${resp} =    Fusion Api Edit Lig    ${body}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     5mins 2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset created succesfully

10_b Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


10_c Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "NOT_CONSISTENT"    Fail    ELSE  Log to console    \nLI IS INCONSISTENT
    Validating the LI_Alert_Active and Severity_Warning

10_d Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


10_e Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${Uplinkset_List}

10_f Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


10_g Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    Perform an LI Update From Group    ${LI_uri}

10_h Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


10_i Verify Logical Interconnect
    [Documentation]    Verify Logical Interconnect
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${resp} =    Fusion Api Get Li
    Log to console and logfile    ${resp["members"][0]["uri"]}
    ${LI_List}=   Create List
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['uri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${LI_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${LI_List}
    Lists Should Be Equal    ${LI_List}    ${LI_name}

10_j Verify Uplinkset
    [Documentation]    Verify Uplinkset
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_Resp}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_Resp}    ${resp['members'][${x}]['name']}
    #\   List Should Contain Value    ${Uplinkset_List1}    ${Uplink_Resp}
    Log to console and logfile     ${Uplink_Resp}

    List Should Contain Sub List   ${Uplink_Resp}    ${Uplinkset_List1}

10_k Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


10_l Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" != "CONSISTENT"    Fail    ELSE  Log to console    \nLI IS CONSISTENT

10_m Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

10_n Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


10_o Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

###Test Case11###
11 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

11_a Edit uplink set in LIG
    [Documentation]    Edit uplink set in LIG
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    Set to Dictionary    ${ligs[0]}    uplinkSets     ${Edit_uplinkset}
    ${body} =    Build LIG Body    ${ligs[0]}
    Log to console and Log file    \n Creating LIG ${ligs[0]["name"]}
    ${resp} =    Fusion Api Edit Lig    ${body}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}    300s 30s
    Run Keyword If    '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset Edited succesfully

11_b Verify Uplinksets in LIG
    [Documentation]    List LIG
    ${Lig_resp} =    Fusion Api Get Lig
    Log to console and logfile     ${Lig_resp}
    ${length} =    Get Length     ${Lig_resp['members'][0]['uplinkSets']}
    Run Keyword If  '${length}' != '2'    Fail    ELSE  Log to console  \nSuccessfully valaidated uplinksets are present in LIG

11_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance
    ${resp}=    Fusion Api Switch Active User     Serveradmin


11_d Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "INCONSISTENT"    Log to console    \nLI IS INCONSISTENT

11_e Verify a crtical alert is sent for each LI
    [Documentation]    Verify a crtical alert is sent for each LI
    Validating the LI_Alert_Active and Severity_Warning

11_f Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


11_g Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    Perform an LI Update From Group    ${LI_uri}
    Log to console and logfile    LI updated from group successfully.

11_h Verify Logical Interconnect
    [Documentation]    Verify Logical Interconnect
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${resp} =    Fusion Api Get Li
    Log to console and logfile    ${resp["members"][0]["uri"]}
    ${LI_List}=   Create List
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['uri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${LI_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${LI_List}
    Lists Should Be Equal    ${LI_List}    ${LI_name}

11_i Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${Uplinkset_List}

11_j Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


11_k Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

11_l Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

11_m Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


11_n Verify the LI consistency with LIG
    [Documentation]     Verify the LI consistency with LIG
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

11_o Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${Uplinkset_List}



11_p Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


11_q Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

### Test Case12 ####
12 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


12_a Delete Uplink sets from LIG and check for Consistency State
    [Documentation]    Delete Uplink sets from LIG and check for Consistency State
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    Set to Dictionary    ${ligs[0]}    uplinkSets     ${uplinkSets_Edit}
    ${body} =    Build LIG Body    ${ligs[0]}
    Log to console and Log file    \n Creating LIG ${ligs[0]["name"]}
    ${resp} =    Fusion Api Edit Lig    ${body}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}    300s 30s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset Deleted succesfully

12_b Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


12_c Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "INCONSISTENT"    Log to console    \nLI IS INCONSISTENT

12_d Verify a crtical alert is sent for each LI
    [Documentation]    Verify a crtical alert is sent for each LI
    Validating the LI_Alert_Active and Severity_Warning

12_e Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


12_f Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${Uplinkset_List}

12_g Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin

12_h Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    Perform an LI Update From Group    ${LI_uri}
    Log to console and logfile    LI updated from group successfully.

12_i Verify Logical Interconnect
    [Documentation]    Verify Logical Interconnect
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${resp} =    Fusion Api Get Li
    Log to console and logfile    ${resp["members"][0]["uri"]}
    ${LI_List}=   Create List
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['uri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${LI_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${LI_List}
    Lists Should Be Equal    ${LI_List}    ${LI_name}

12_j Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${up_List}

12_k Login To Appliance As ServerUser
    [Documentation]     Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


12_l Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

12_m Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

12_n Login To Appliance As Netuser
    [Documentation]     Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


12_o Verify the LI consistency with LIG
    [Documentation]    Verify the LI consistency with LIG
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

12_p Verify uplink sets
    [Documentation]    Verify uplink sets
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${ligs[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${Uplink_List}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_uri}'    Continue For Loop
    \   Append To List   ${Uplink_List}    ${resp['members'][${x}]['name']}
    Log to console and logfile     ${Uplink_List}
    List Should Contain Sub List    ${Uplink_List}    ${up_List}

12_q Delete all alerts
    [Documentation]    Delete all alerts
     ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

### Test Case13 ####
13 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


13_a Edit interconnect types
    [Documentation]    Edit interconnect types
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${body} =    Build LIG Body    ${Edit_Lig[0]}
    Log to console    \n body is ${body}
    Log to console and Log file    \n Creating LIG ${ligs[0]["name"]}
    ${resp} =    Fusion API Edit LIG    ${body}    ${lig_uri}
    Log to Console    \n${resp}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset edited succesfully

13_b Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


13_c Verify LIs are in NotConsistent state
    [Documentation]   Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "INCONSISTENT"    Log to console    \nLI IS INCONSISTENT

13_d Verify a crtical alert is sent for each LI
    [Documentation]    Verify a crtical alert is sent for each LI
    Validating the LI_Alert_Active and Severity_Warning

13_e Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


13_f Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    ${resp} =       Fusion Api Update from group    ${LI_uri}
    ${task} =       Wait For Task       ${resp}    20 min    14s
    Run Keyword If  '${task['taskState']}' != 'Warning'    Fail    ELSE  Log to console  \nLI updated from group successfully
    Log to console and logfile    LI updated from group successfully.

13_g Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


13_h Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

13_i Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

13_j Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin

13_k Verify the LI consistency with LIG
    [Documentation]    Verify the LI consistency with LIG
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${resp_1}    ${li_resp}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

13_l Validating the Interconnect State
    [Documentation]    Validating the Interconnect State
    Set Global Variable    ${ic_uri}    ${resp_1["members"][0]["interconnects"]}
    ${length} =    Get Length     ${ic_uri}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${z}]}
    \    Run Keyword If  '${ic_resp['state']}' != 'Unmanaged'    Fail    ELSE    Log to console  \nInterconnect is in Unmanaged state

13_m Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE    Log to console  \nAlerts deleted Successfully

### Test Case14 ####
14_a Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


14_b Delete interconnect types
    [Documentation]    Delete interconnect types
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${body} =    Build LIG Body    ${Edit_Ligtype[0]}
    Log to console    \n body is ${body}
    ${resp} =    Fusion API Edit LIG    ${body}    ${lig_uri}
    Log to Console    \n${resp}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset Deleted succesfully

14_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


14_d Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "INCONSISTENT"    Log to console    \nLI IS INCONSISTENT

14_e Verify a crtical alert is sent for each LI
    [Documentation]    Verify a crtical alert is sent for each LI
    Validating the LI_Alert_Active and Severity_Warning

14_f Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


14_g Invoke compliance remediation request Update from Group
    [Documentation]    Invoke compliance remediation request Update from Group
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    #Perform an LI Update From Group    ${LI_uri}
    ${resp} =       Fusion Api Update from group    ${LI_uri}
    ${task} =       Wait For Task       ${resp}    20 min    14s
    Run Keyword If  '${task['taskState']}' != 'Warning'    Fail    ELSE  Log to console  \nLI updated from group successfully

14_h Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


14_i Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

14_j Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

14_k Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


14_l Validating the Interconnect State
    [Documentation]    Validating the Interconnect State
    ${length} =    Get Length     ${interconnects_inventory}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    ${ic_uri}    Get IC URI    ${interconnects_inventory[${z}]}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri}
    \    Run Keyword If    "${ic_resp["state"]}" != "Inventory"     Fail    ELSE    Log to console    \n Interconnect is in Inventory state because it is removed

    ${length} =    Get Length     ${interconnects_unmanaged}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    ${ic_uri}    Get IC URI    ${interconnects_unmanaged[${z}]}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri}
    \    Run Keyword If    "${ic_resp["state"]}" != "Unmanaged"     Fail    ELSE    Log to console    \n Interconnect is in Unmanaged state because it is replaced by different interconnect module

14_m Delete all alerts
    [Documentation]    Delete all alerts
    ${resp}    Fusion Api Delete Alert
    ${task}    Wait For Task     ${resp}    110s    20s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nAlerts deleted Successfully

### Test Case15####
15_a Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


15_b Add interconnect types
    [Documentation]    Add interconnect types
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    ${body} =    Build LIG Body    ${Add_Ligtype[0]}
    Log to console    \n body is ${body}
    ${resp} =    Fusion API Edit LIG    ${body}    ${lig_uri}
    Log to Console    \n${resp}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nUplinkset Deleted succesfully

15_c Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


15_d Verify LIs are in NotConsistent state
    [Documentation]    Verify LIs are in NotConsistent state
    ${li_resp} =    Fusion Api Get Li
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "INCONSISTENT"    Log to console    \nLI IS INCONSISTENT

15_e Verify a crtical alert is sent for each LI
    [Documentation]    Verify a crtical alert is sent for each LI
    Validating the LI_Alert_Active and Severity_Warning

15_f Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


15_g Invoke compliance remediation request Update from Group & Invoke compliance remediation again while 12 still ongoing (negative)Verify bad request is returned with error message
    [Documentation]    Invoke compliance remediation request Update from Group & Invoke compliance remediation again while 12 still ongoing (negative)Verify bad request is returned with error message
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Set Global Variable    ${LI_uri}    ${li_resp["members"][0]["uri"]}
    ${resp} =       Fusion Api Update from group    ${LI_uri}
    Log to console    ${resp}
    ${resp_negative} =    Fusion Api Update From Group    ${LI_uri}
    Log to console    ${resp_negative}
    Run Keyword If  '${resp_negative['errorCode']}' != 'CRM_ONGOING_OPERATION_ON_LOGICAL_INTERCONNECT'    Fail    ELSE  Log to console  \nSuccessfully validated the error message
    ${task} =   Wait For Task    ${resp}    400s    30s
    #Run Keyword If  '${task['taskState']}' != 'Warning'    Fail    ELSE  Log to console  \nSuccessfully performed update from group operation

15_h Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


15_i Verify LIs are in Consistent state
    [Documentation]    Verify LIs are in Consistent state
    ${li_resp} =    Fusion Api Get Li
    Log to console and logfile    ${li_resp["members"][0]["uri"]}
    Run Keyword If    "${li_resp["members"][0]["consistencyStatus"]}" == "CONSISTENT"    Log to console    \nLI IS CONSISTENT

15_j Verify alert is cleared
    [Documentation]    Verify alert is cleared
    Validating the LI_Alert_cleared and Severity_OK

15_k Login To Appliance As ServerUser
    [Documentation]    Login To Appliance As ServerUser
    ${resp}=    Fusion Api Switch Active User     Serveradmin


15_l Validating the Interconnect State
    [Documentation]    Validating the Interconnect State
    ${li_resp} =    Fusion Api Get Li
    Set Global Variable    ${ic_uri}    ${li_resp["members"][0]["interconnects"]}
    ${length} =    Get Length     ${ic_uri}
    :FOR    ${z}    IN RANGE    0    ${length}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${z}]}
    \    Run Keyword If    "${ic_resp["state"]}" == "Configured"    Log to console and logfile    ${ic_resp["uri"]} is Consistent    ELSE    Log to console and logfile    ${ic_resp["uri"]} is    inconsistent

###Test Case 16###
16 Login To Appliance As Netuser
    [Documentation]    Login To Appliance As Netuser
    ${resp}=    Fusion Api Switch Active User    Networkadmin


16_a Edit LIG name (negative)and LIs remain in Consistent state
    [Documentation]    Edit LIG name (negative)and LIs remain in Consistent state
    ${lig_uri} =    Get LIG Uri     ${ligs[0]["name"]}
    Log to console and logfile    ${lig_uri}
    Set Global Variable    ${LIG_uri}    ${lig_uri}
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${ligs[0]["name"]}'"
    Log to console and logfile    ${resp}
    Set to Dictionary    ${resp["members"][0]}   name     ${LIG}
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     300s    2s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nLIG name edited succesfully


### Test Case17 ####
17_a Delete resources Cleanup For Suite
    [Documentation]    Logout To Appliance
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'    Fail    ELSE  Log to console  \nSuccessfully logged into the appliance
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL Users
    Log to console and logfile    \n Resource Deleted Successfully

*** Keywords ***
Perform an LI Update From Group
    [Documentation]  Perform an LI Update From Group
    [Arguments]       ${li}     ${timeout}=20 min    ${interval}=14s
    ${resp} =       Fusion Api Update from group    ${li}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nLI updated from group successfully

Validating the LI_Alert_Active and Severity_Warning
    [Documentation]  Validating the LI_Active Severity
    #Checking for the alert message in LI1
    ${Alert_msg}    Create List
    ${severity_state}    Create List
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length  ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'   Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['severity']}' !='Warning'    Continue For Loop
    \  ${replace}=     Remove String Using Regexp  ${mem_resp[${x}]['description']}  \n
    \  Run Keyword If  '${replace}' == 'The logical interconnect is inconsistent with the logical interconnect group LIG1.'   Append To List    ${Alert_msg}    ${replace}
    \  Append To List    ${severity_state}    ${mem_resp[${x}]['severity']}
    Run keyword unless  ${Alert_msg} == ${alert_msg}    Fail    ${resp['message']}   ${Alert_msg}
    Log to console and logfile    ${Alert_msg}

Validating the LI_Alert_cleared and Severity_OK
    [Documentation]  Validating the LI_Active Severity
    #Checking for the alert message in LI
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length  ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Cleared'    Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'   Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['severity']}' !='OK'    Continue For Loop
    \  Run keyword unless    '${mem_resp[${x}]['alertState']}' == 'Cleared'    Fail    ${mem_resp[${x}]['alertState']}
    \  Run keyword unless    '${mem_resp[${x}]['severity']}' == 'OK'    Fail    ${mem_resp[${x}]['severity']}

Poweroff the server_hardware and creating the server_profile
    [Documentation]  Poweringoff the server_hardware and creating the server_profile
    [Arguments]   ${SP_body1}   ${bay_no}
    Log to console    Powering off SERVERS
    ${sp_resp} =    Fusion Api Get Server Hardware    param=?filter="'name'=='${ENCLOSURE_NAME}, bay ${bay_no}'"
    Set Global Variable    ${sp_uri}    ${sp_resp['members'][0]['uri']}
    Log to console and logfile    ${sp_uri}
    ${body} =   Create Dictionary   powerState=Off
    ...                             powerControl=PressAndHold
    ${resp} =   Fusion Api Edit Server Hardware Power State     body=${body}    uri=${sp_uri}
    ${task} =   Wait For Task     ${resp}    240s    5s
    Run Keyword If  '${task['taskState']}' != 'Completed'    Fail    ELSE  Log to console  \nSuccessfully powered off the server!!!
    Log to console and logfile    \n-Creating Server Profile
    Add Server Profiles from variable     ${SP_body1}