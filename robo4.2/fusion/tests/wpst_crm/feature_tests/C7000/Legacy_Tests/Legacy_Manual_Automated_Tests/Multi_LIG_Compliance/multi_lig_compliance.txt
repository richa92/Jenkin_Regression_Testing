** Settings ** *
Documentation      multi - lig compliance
Library         json
Library         FusionLibrary
Library            RoboGalaxyLibrary
#Variables          data_variables_utah_ocho.py
Variables          data_variables_supershaw.py
Resource           ../../../../../../../Resources/api/fusion_api_resource.txt

#################################################################################################################################################################

# Test Case Description :This Feature test tests compliance remediation for making changes to logical interconnect group.
#                         Checks the consistencyof LI.

############################################################TEST CASE STEPS######################################################################################

#        1. Login to the appliance and create users.
#        2. Delete all alerts.
#        3. Create networks(both Ethernet and Fc networks)
#        4. Create LIG
#        5. Create Enclosure Group and Import enclosures
#           Verify resources status: logical interconnects
#        6. Verify interconnect status
#        7. Create profile
#        8. Edit telemetry configurations in LIG and verify LI consistency.
#        9. Edit ethernet setting  in LIG and verify LI consistency.
#       10. Edit snmp configurations in LIG and verify LI consistency.
#       11. Add uplink set in LIG and verify LI consistency.
#       12. Edit uplink set in LIG and verify LI consistency.
#       13. Delete uplink set in LIG and verify LI consistency.
#       14. Edit interconnect types in LIG and verify LI consistency.
#       15. Add/Edit interconnect types in LIG and verify LI consistency.

#################################################################################################################################################################

***Test cases***
1_Login and creating users
    [Documentation]     login in to the appliance and craeting users
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log    \n\n Successfully logged into the appliance!! \n\n    console=True




    Log    \n\n Adding users!! \n\n    console=True
    ${l} =  Get Length  ${users}
    Log    \n\n ${l}!! \n\n    console=True
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${resp}     Fusion Api Add User     body=${users[${x}]}
    \   Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  Log    \n\n Created ${users[${x}]['permissions'][0]['roleName']} user successfully!! \n\n    console=True
    \   Log    \n\n response ${resp}!! \n\n    console=True

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${serveradmin_credentials}
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${networkadmin_credentials}

2_Login As Sarah and Deleting all alerts
    [Documentation]     deleting all alerts
    ${resp}=    Fusion Api Switch Active User   Serveradmin
    Clear Alert Message

3_Create ethernet and FC networks
    [Documentation]     creating ethernet and FC networks
    ${resp}=    Fusion Api Switch Active User    Networkadmin
    Log    \n\n Creating Ethernet Networks!! \n\n    console=True
    ${Ethernet_uriList} =   Create List
    :FOR   ${ethnet}   IN   @{ethernet_networks}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   ${eth_name}    Get From Dictionary   ${ethnet}   name
    \   ${uri}      Get Ethernet URI    ${eth_name}
    \   Continue For Loop If   '${uri}' == '${null}'
    \   Append To List   ${Ethernet_uriList}   ${uri}
    Log    \n\n Ethernet networks list : ${Ethernet_uriList}!! \n\n    console=True
    Log    \n\n Ethernet networks got created successfully!!! \n\n    console=True

    Log    \n\n Creating FC Networks!! \n\n    console=True
    Set To Dictionary    ${Fc_body}    fabricType    FabricAttach
    :FOR    ${x}    IN RANGE    1   4
    \    Set To Dictionary    ${Fc_body}    name    FC_${x}
    \    ${resp} =    Fusion Api Create Fc Network    ${Fc_body}
    \    Run keyword unless ${resp['status_code']}== 202    Fail    ${resp['message']}
4_Create logical interconnect groups by login in as nat
    [Documentation]     creating LIG
    ${resp}=    Fusion Api Switch Active User    Networkadmin
    Log    \n\n Creating LIG!! \n\n    console=True
    ${l} =  Get Length  ${LIG}
    Set Global Variable    ${lig_length}     ${l}
    ####creating LIG####
    :FOR    ${x}    IN RANGE    0    ${l}
    \   Create LIG    ${LIG[${x}]}
    \   ${resp}=    Fusion Api Get Lig    param=?filter="'name'=='${LIG[${x}]['name']}'"
    \   Run Keyword If    '${resp['members'][0]['name']}'!='${LIG[${x}]['name']}'    Fail  ELSE    Log    \n\n LIG created successfully!! \n\n    console=True
    \   Run Keyword Unless    '${resp['status_code']}'  ==  '200'     FAIL

5_Create Enclosure group,Add ENC by login in as sarah
    [Documentation]     creating EG and importing enclosure
    ${resp}=    Fusion Api Switch Active User   Serveradmin
    Log    \n\n Creating EG!! \n\n    console=True

    ####creating EG####

    Create EG    ${eg_body}
    ${encgrp_resp}=    Fusion Api Get Enclosure Groups    param=?filter="'name'=='${eg_body['name']}'"
    Run Keyword If    '${encgrp_resp['members'][0]['name']}'!='${eg_body['name']}'    Fail    ELSE    Log    \n\n EG created succesfully!! \n\n    console=True
    Run Keyword Unless    '${encgrp_resp['status_code']}'  ==  '200'    FAIL
    Log    \n\n Adding enclosure!! \n\n    console=True

    ####importing enclosure####

    Add ENC    ${encs}
    ${resp}=   fusion_api_get_enclosures    param=?filter="'name'=='${ENCLOSURE_NAME}'"
    Run Keyword If    '${resp['members'][0]['name']}'!='${ENCLOSURE_NAME}'    Fail    ELSE    Log    \n\n ENC imported successfully!! \n\n    console=True
    Run Keyword Unless    '${resp['status_code']}'  ==  '200'    FAIL
    ${LE_uri}=    Get From Dictionary    ${resp['members'][0]}    logicalEnclosureUri
    Set Global Variable    ${LE_uri}    ${LE_uri}

    ###checking LE consistency###

    Check LE consistency    ${LE_uri}

    ###checking LI Consistency###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}


6_Checking interconnect state by login as nat
    [Documentation]    checking interconnect state
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking interconnect state###

    ${bay}=    Get Length   ${interconnects}
    Set Global Variable    ${bay_length}    ${bay}
    :FOR    ${x}    IN RANGE     1    ${bay_length}+1
    \   ${resp}=    Fusion Api Get Interconnect     param=?filter="'name'=='${ENCLOSURE_NAME}, interconnect ${x}'"
    \   Run Keyword If    '${resp['members'][0]['state']}'!='Configured'    Fail    ELSE   Log    \n\n interconnect is in configured state!! \n\n    console=True

7_Create server profile by server user
    [Documentation]     Creating server profile and powering on server
    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ####creating profile####

    PowerOFF servers and Create profile    ${servers[0]}

    Clear Alert Message

8_Update telemetry configuration
    [Documentation]     editing telemetry configuration in LIG
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ####Editing LIG with telemetry configuration####

    ${task}=    Editing LIG-telemetryConfiguration    ${LIG[0]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n LIG with telemetry configuratiuon edited successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI and validating the alert message###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}

    Check consistencyStatus of LI     ${LIG[1]['name']}

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}

    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###performing update from group in LI###

    ${task}=    LI Update from group    ${LIG[0]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


9_Update ethernet settings configuration
    [Documentation]     Edit ethernet settings in LIG

    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###editing LIG with ethernet settings###

    ${task}=    Editing LIG-ethernet settings Configuration    ${LIG[1]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n LIG with ethernet settings edited successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI and validating the alert message###

    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    Check consistencyStatus of LI     ${LIG[0]['name']}

    Validating the LI_Alert_Active and Severity_Warning    ${alert2}

    ${resp}=    Fusion Api Switch Active User    Networkadmin
    ###performing update from group from LI###

    ${task}=    LI Update from group    ${LIG[1]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin
   ###checking consistency state of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message

10_Update snmp configuration
    [Documentation]     Edit snmp configuration in LIG and check the consistency status of LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###Editing snmp configuration in LIG###

    ${task}=    Editing LIG-snmp Configuration    ${LIG[0]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n LIG with SNMP configuration edited successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI and validating the alert message###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}

    Check consistencyStatus of LI     ${LIG[1]['name']}

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}


    ${resp}=    Fusion Api Switch Active User    Networkadmin
    ###performing update from group from LI###

    ${task}=    LI Update from group    ${LIG[0]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


11_Add uplink set
    [Documentation]     Adding uplink in LIG and checking the consistency of LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###Adding uplinksets in LIG####
    ${lig_uri} =    Get LIG Uri     ${LIG[1]['name']}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${body} =   Build LIG body      ${lig_adduplink}
    ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}

    ${task} =   Wait For Task   ${resp}     200s    90s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n Added uplink set in LIG successfully!! \n\n    console=True

    Log    \n\n LIG edited successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI and validating the alert message###

    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    Check consistencyStatus of LI     ${LIG[0]['name']}

    Validating the LI_Alert_Active and Severity_Warning    ${alert2}


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ####checking uplink sets in LIG2###
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[1]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${uplinksets}=   Create List

    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${uplinksets}    ${resp['members'][${x}]['name']}
    Log    \n\n ${uplinksets}!! \n\n    console=True
    List Should Contain Value   ${uplinksets}    ${edit_up_data[0]}



    ####update from group from LI ####

    ${task}=    LI Update from group    ${LIG[1]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True

    ###checking uplinksets sets after performing update from group###

    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[1]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${add_up}=   Create List

    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${add_up}    ${resp['members'][${x}]['name']}
    Log    \n\n ${add_up}!! \n\n    console=True

    ${l} =  Get Length  ${add_up_data}
    Set Global Variable    ${uplink_len}     ${l}
    :FOR    ${x}    IN RANGE    0    ${uplink_len}

    \    List Should Contain Value   ${add_up}    ${add_up_data[${x}]}


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking consistency state of LI####

    Check consistencyStatus of LI     ${LIG[0]['name']}
    Check consistencyStatus of LI     ${LIG[1]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message

12_Edit uplinkset
    [Documentation]     Editing uplink set in LIG and checking the consistency status in LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ####Editing uplink sets in LIG####

    ${lig_uri} =    Get LIG Uri     ${LIG[1]['name']}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${body} =   Build LIG body      ${LIG[1]}
    ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    ${task} =   Wait For Task   ${resp}     200s    90s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n Edited uplink set successfully!! \n\n    console=True
    Log    \n\n LIG edited successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency state of LI and validating the alert message####

    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    Check consistencyStatus of LI     ${LIG[0]['name']}

    Validating the LI_Alert_Active and Severity_Warning    ${alert2}

    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking uplinksets sets after editing uplink sets###

    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[1]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${edit_up1}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${edit_up1}    ${resp['members'][${x}]['name']}
    Log    \n\n ${edit_up1}!! \n\n    console=True
    :FOR    ${x}    IN RANGE    0    ${uplink_len}

    \    List Should Contain Value   ${edit_up1}    ${add_up_data[${x}]}


    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${edit_up2}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${edit_up2}    ${resp['members'][${x}]['name']}
    Lists Should Be Equal    ${edit_up2}    ${edit_up2_data}



     ####update from group from LI ####

    ${task}=    LI Update from group    ${LIG[1]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True



    ###checking uplinksets sets after performing update from group###

    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[1]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${edit_up3}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${edit_up3}    ${resp['members'][${x}]['name']}
    Log    \n\n ${edit_up3}!! \n\n    console=True
    Lists Should Be Equal    ${edit_up3}    ${edit_up_data}

    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking the consistency state of LI###

    Check consistencyStatus of LI     ${LIG[0]['name']}

    Check consistencyStatus of LI     ${LIG[1]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


13_Delete uplink sets
    [Documentation]     Deleting uplink sets in LIG and checking the consistency status in LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###deleting uplink sets from LIG###

    ${lig_uri} =    Get LIG Uri     ${LIG[0]['name']}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${body} =   Build LIG body      ${lig_deleteuplink}
    ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    ${task} =   Wait For Task   ${resp}     200s    90s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n deleted uplink set successfully!! \n\n    console=True
    Log    \n\n LIG edited successfully!! \n\n    console=True
    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking LI consistency and validating the alerts##

    Check InconsistencyStatus of LI     ${LIG[0]['name']}

    Check consistencyStatus of LI     ${LIG[1]['name']}
    Validating the LI_Alert_Active and Severity_Warning    ${alert1}

    ${resp}=    Fusion Api Switch Active User   Networkadmin

    ###checking the uplink sets after deleting###

    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${remove_up}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${remove_up}    ${resp['members'][${x}]['name']}
    Lists Should Be Equal    ${remove_up}    ${edit_up2_data}



    ###update from group in LI###

    ${task}=    LI Update from group    ${LIG[0]['name']}
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True




    ###checking uplink sets after update from group###

    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[0]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' == '${LI_URI}'    Fail


    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG[1]['name']}
    Set Global Variable    ${LI_URI}    ${URI}
    ${remove_up1}=   Create List
    ${resp}=    Fusion Api Get Uplink Set
    :FOR    ${x}    IN RANGE    0    ${resp['count']}
    \   Run Keyword If  '${resp['members'][${x}]['logicalInterconnectUri']}' != '${LI_URI}'    Continue For Loop
    \   Append To List   ${remove_up1}    ${resp['members'][${x}]['name']}
    Lists Should Be Equal    ${remove_up1}    ${edit_up_data}
    ${resp}=    Fusion Api Switch Active User    Networkadmin



    ###checking consistencystate of LI###

    Check consistencyStatus of LI     ${LIG[0]['name']}

    Check consistencyStatus of LI     ${LIG[1]['name']}

    Validating the LI_Alert_cleared and Severity_OK


    Clear Alert Message

14_Edit interconnect types in LIG
    [Documentation]     Editing interconnect types in LIG and checking the consistency status in LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin
    :FOR    ${x}    IN RANGE    0   2
    \   ${lig_uri} =    Get LIG Uri     ${LIG[${x}]['name']}
    \   Log    \n\n ${lig_uri}!! \n\n    console=True
    \   ${body} =   Build LIG body      ${lig_edit_interconnect[${x}]}
    \   ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    \   ${task} =   Wait For Task   ${resp}     200s    90s
    #\   Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n Edited interconnect type in LIG successfully!! \n\n    console=True
    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking Inconsistency status of LI###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}
    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    ###Validating the alerts####

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}
    Validating the LI_Alert_Active and Severity_Warning    ${alert2}


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###perform an update fron group from LI###
     ${l} =     Get Length  ${LIG}
    Set Global Variable    ${lig_length}     ${l}
    :FOR    ${x}    IN RANGE    0   ${lig_length}
    \      ${task}=    LI Update from group    ${LIG[${x}]['name']}
    #\    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin


    ###checking consistency status of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}


    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking the unmanaged state####
    :FOR    ${x}    IN RANGE    0    4
    \   Check interconnect unmanaged state    ${bays[${x}]}


    ${resp}=    Fusion Api Switch Active User    Serveradmin

    Clear Alert Message


15_Restore back the LIGS
    [Documentation]    Adding interconnects adn checking the consistency of LI and LE

    ${resp}=    Fusion Api Switch Active User    Networkadmin

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   ${lig_uri} =    Get LIG Uri     ${LIG[${x}]['name']}
    \   Log    \n\n ${lig_uri}!! \n\n    console=True
    \   ${body} =   Build LIG body      ${LIG[${x}]}
    \   ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    \   ${task} =   Wait For Task   ${resp}     200s    90s
    \   Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n added interconnect type in LIG successfully!! \n\n    console=True



    ${resp}=    Fusion Api Get Lig
    Run Keyword Unless    '${resp['count']}'  ==  '2'     FAIL

    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking Inconsistency status of LI###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}
    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    ###Validating the alerts###

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}
    Validating the LI_Alert_Active and Severity_Warning    ${alert2}

    ${resp}=    Fusion Api Switch Active User    Administrator

    ###performing update from group from LI###

    :FOR    ${x}    IN RANGE    0   ${lig_length}
    \    ${task}=    LI Update from group    ${LIG[${x}]['name']}
    \    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    Serveradmin


    ###checking consistency status of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}

    Validating the LI_Alert_cleared and Severity_OK

     ${resp}=   Fusion Api Switch Active User    Networkadmin

    :FOR    ${x}    IN RANGE     1    ${bay_length}+1
    \   ${resp}=    Fusion Api Get Interconnect     param=?filter="'name'=='${ENCLOSURE_NAME}, interconnect ${x}'"
    \   Run Keyword If    '${resp['members'][0]['state']}'!='Configured'    Fail    ELSE   Log    \n\n interconnect is in configured state!! \n\n    console=True


    Clear Alert Message


16_Remove interconnect types in LIG
    [Documentation]     Remove interconnect types in LIG and checking the consistency status in LI
    ${resp}=    Fusion Api Switch Active User    Networkadmin
    :FOR    ${x}    IN RANGE    0   ${lig_length}
    \   ${lig_uri} =    Get LIG Uri     ${LIG[${x}]['name']}
    \   Log    \n\n ${lig_uri}!! \n\n    console=True
    \   ${body} =   Build LIG body      ${lig_remove_interconnect[${x}]}
    \   ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    \   ${task} =   Wait For Task   ${resp}     200s    90s
    \   Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n Edited interconnect type in LIG successfully!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User     Serveradmin

    ###checking Inconsistency status of LI###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}
    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    ###Validating the alerts####

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}
    Validating the LI_Alert_Active and Severity_Warning    ${alert2}


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###perform an update fron group from LI###
    :FOR    ${x}    IN RANGE    0   ${lig_length}
    \    ${task}=    LI Update from group    ${LIG[${x}]['name']}
    #\    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True


    ${resp}=    Fusion Api Switch Active User    Serveradmin


    ###checking consistency status of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}


    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###checking the invetory state####

    Check interconnect inventory state    ${bays[1]}
    Check interconnect inventory state    ${bays[3]}


17.Add interconnect type in LIG
    [Documentation]    Adding interconnects adn checking the consistency of LI and LE
    ${resp}=    Fusion Api Switch Active User    Networkadmin
    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   ${lig_uri} =    Get LIG Uri     ${LIG[${x}]['name']}
    \   Log    \n\n ${lig_uri}!! \n\n    console=True
    \   ${body} =   Build LIG body      ${LIG[${x}]}
    \   ${resp} =   Fusion Api Edit Lig     ${body}     ${lig_uri}
    \   ${task} =   Wait For Task   ${resp}     200s    90s
    \   Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n added interconnect type in LIG successfully!! \n\n    console=True
    ${resp}=    Fusion Api Get Lig
    Run Keyword Unless    '${resp['count']}'  ==  '2'     FAIL


    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking Inconsistency status of LI###

    Check InconsistencyStatus of LI     ${LIG[0]['name']}
    Check InconsistencyStatus of LI     ${LIG[1]['name']}

    ###Validating the alerts###

    Validating the LI_Alert_Active and Severity_Warning    ${alert1}
    Validating the LI_Alert_Active and Severity_Warning    ${alert2}


    ${resp}=    Fusion Api Switch Active User    Networkadmin

    ###performing update from group from LI###

    :FOR    ${x}    IN RANGE    0   ${lig_length}
    \    ${task}=    LI Update from group    ${LIG[${x}]['name']}
    \    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} !=200   fail    ELSE    Log    \n\n updated from group successfully!! \n\n    console=True
    ${resp}=    Fusion Api Switch Active User    Serveradmin

    ###checking consistency status of LI###

    :FOR    ${x}    IN RANGE    0    ${lig_length}
    \   Check consistencyStatus of LI     ${LIG[${x}]['name']}

    Validating the LI_Alert_cleared and Severity_OK

    Clear Alert Message


****Keywords***
Clear Alert Message
    [Documentation]  Clearing the Alert Message
    ${del_resp} =    Fusion Api Delete Alert
    Run keyword unless  ${del_resp['status_code']}== 202    Fail    "Unable to Clear Alert Message"
    Log    \n\n Alert Message cleared Successfully!! \n\n    console=True

Create LIG
    [Documentation]  Creating LIG
    [Arguments]     ${lig_body}
    ${body} =   Build LIG body    ${lig_body}
    Log    \n\n Creating lig_body!! \n\n    console=True
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}    60s   30s
    Run Keyword If  '${task['taskState']}' !='Completed'  or  ${task['status_code']} != '200'   Fail    "unable to create LIG"
    ${lig_uri} =    Get LIG Uri     ${lig_body['name']}
    Set Global Variable    ${LIGuri}    ${lig_uri}


Create EG
    [Documentation]  Creating EG
    [Arguments]     ${eg_body}
    ${eg_resp}      Add Enclosure Group from variable     ${eg_body}
    Run keyword unless   ${eg_resp['status_code']}== 201        Fail    "Unable to Create Enclosure Group"
    Log    \n\n EG created succesfully!! \n\n    console=True
    [Return]     ${eg_resp}

Add ENC
    [Documentation]  Adding  Enclosure
    [Arguments]     ${encs}
    ${encs}    Get Variable Value   ${encs}
    Run Keyword If      ${encs} is not ${null}     Add Enclosures from variable   ${encs}
    Log    \n\n Enclosure imported successfully!! \n\n    console=True
Check consistencyStatus of LI
    [Documentation]  Checking the consistencyStatus of LI
    [Arguments]     ${LIG_name}
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG_name}
    Set Global Variable    ${LI_URI}    ${URI}
    ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    Run keyword If    '${li_resp['consistencyStatus']}' != 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}

Check InconsistencyStatus of LI
    [Documentation]  Checking the consistencyStatus of LI
    [Arguments]     ${LIG_name}
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG_name}
    Set Global Variable    ${LI_URI}    ${URI}
    ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    Run keyword If    '${li_resp['consistencyStatus']}' != 'NOT_CONSISTENT'    Fail    ELSE  Log    \n\n ${LI_URI} is ${li_resp['consistencyStatus']}!! \n\n    console=True

PowerOFF servers and Create profile
    [Documentation]  poweringoff the server and creating profile
    [Arguments]     ${bay_no}
    Log    \n\n Powering off SERVERS!! \n\n    console=True
    ${sp_resp} =    Fusion Api Get Server Hardware    param=?filter="'name'=='${ENCLOSURE_NAME}, bay ${bay_no}'"
    Set Global Variable    ${sp_uri}    ${sp_resp['members'][0]['uri']}
    Log    \n\n ${sp_uri}!! \n\n    console=True
    ${body} =   Create Dictionary   powerState=Off
    ...                             powerControl=PressAndHold
    ${resp} =   Fusion Api Edit Server Hardware Power State     body=${body}    uri=${sp_uri}
    ${task} =   Wait For Task     ${resp}    240s    90s
    Log    \n\n Successfully powered off the server!! \n\n    console=True
    Log    \n\n Creating Server Profile!! \n\n    console=True
    Add Server Profiles from variable     ${SP_body1}
    Power on server    ${ENCLOSURE_NAME}, bay ${bay_no}

Edit Enclosure Group
    [Documentation]    Edit Enclosure Group from EG DTO
    ...              Example:
    ...                Edit Enclosure Group  ${enc_group}
    ...              Data Required:
    ...                EG DTO
    [Arguments]     ${enc_group}
    ${name} =  Get From Dictionary  ${enc_group}  name
    Log    \n\n ${\n}Editing Enclosure Group ${name}!! \n\n    console=True
    ${uri} =  Get Enclosure Group URI  ${name}
    # Create the payload
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary    ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   ${liguri} =     Common URI Lookup by name    ${liguri}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    Set to dictionary  ${enc_group}  uri  ${uri}
    ${resp} =  fusion api edit enclosure group  ${enc_group}  ${uri}
    [Return]    ${resp}

Get LE URI
    [Documentation]  Get LE URI
    [Arguments]     ${le}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${le}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}
LI Update from group
    [Documentation]  Performing LI_1 Update from group
    [Arguments]     ${LIG_name}
    ${URI} =    Get LI URI    ${ENCLOSURE_NAME}-${LIG_name}
    Set Global Variable    ${LI_URI}    ${URI}
    ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    ${resp_update}    Fusion Api Update From Group   ${LI_uri}
    Run keyword If  '${resp_update['status_code']}' != '202'   Fail    ${resp_update['message']}
    ${task} =   Wait For Task   ${resp_update}  600s    30s
    Log    \n\n LI updated from group successfully!! \n\n    console=True
    [Return]    ${task}

Check LE consistency
    [Documentation]  Checking LE consistency
    [Arguments]     ${URI}
    ${resp}=   Fusion Api Get Logical Enclosure   uri=${LE_uri}
    Run Keyword If    '${resp['state']}' != 'Consistent'    Fail

Check LE Inconsistency
    [Documentation]  Checking LE consistency
    [Arguments]     ${URI}
    ${resp}=   Fusion Api Get Logical Enclosure   uri=${LE_uri}
    Run Keyword If    '${resp['state']}' != 'Inconsistent'    Fail

Edit EG
    [Documentation]  EDiting EG
    [Arguments]     ${eg_body_edit1}
    ${encgrp_resp}=    Fusion Api Get Enclosure Groups    param=?filter="'name'=='${eg_body['name']}'"
    ${enc_uri}=    Get From Dictionary    ${encgrp_resp['members'][0]}    uri
    ${etag}=    Get From Dictionary     ${encgrp_resp['members'][0]}    eTag
    Set To Dictionary    ${eg_body_edit1}     eTag      ${eTag}
    ${resp}=      Edit Enclosure Group     ${eg_body_edit1}
    ${task} =   Wait For Task   ${resp}    60s   30s
    [Return]     ${task}

Validating the LI_Alert_Active and Severity_Warning
    [Documentation]  Validating the LI_Active Severity
    #Checking for the alert message in LI
    [Arguments]     ${alerts}
    ${Alert_msg}    Create List
    ${severity_state}    Create List
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length  ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Active'    Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'   Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['severity']}' !='Warning'    Continue For Loop
    \  ${replace}=     Remove String Using Regexp  ${mem_resp[${x}]['description']}  \n
    \  Run Keyword If  '${replace}' == '${alerts}'   Append To List    ${Alert_msg}    ${replace}
    \  Append To List    ${severity_state}    ${mem_resp[${x}]['severity']}
    Run keyword unless  ${Alert_msg} == ${alert_msg}    Fail    ${resp['message']}   ${Alert_msg}




Validating the LI_Alert_cleared and Severity_OK
    [Documentation]  Validating the LI_Active Severity
    #Checking for the alert message in LI
    #[Arguments]        ${alerts}
    ${Alert_msg}    Create List
    ${severity_state}    Create List
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length  ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \  Run Keyword If  '${mem_resp[${x}]['alertState']}' !='Cleared'    Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='logical-interconnects'   Continue For Loop
    \  Run Keyword If  '${mem_resp[${x}]['severity']}' !='OK'    Continue For Loop
    \  Append To List   ${Alert_msg}   ${mem_resp[${x}]['alertState']}
    \  Append To List    ${severity_state}    ${mem_resp[${x}]['severity']}

    Log    \n\n ${Alert_msg}!! \n\n    console=True
    Log    \n\n ${severity_state}!! \n\n    console=True


Editing LIG-telemetryConfiguration
    [Documentation]  Editing telemetryConfiguration in LIG
    [Arguments]     ${LIG_name}
    ${lig_uri} =    Get LIG Uri     ${LIG_name}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${LIG_name}'"
    Log    \n\n ${resp}!! \n\n    console=True
    Set to Dictionary    ${resp['members'][0]}   telemetryConfiguration     ${telemetryConfiguration_edit}
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     200s    90s
    Log    \n\n LIG edited successfully!! \n\n    console=True
    [Return]    ${task}


Editing LIG-ethernet settings Configuration
    [Documentation]  Editing ethernet settings Configuration in LIG
    [Arguments]     ${LIG_name}
    ${lig_uri} =    Get LIG Uri     ${LIG_name}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${LIG_name}'"
    Log    \n\n ${resp}!! \n\n    console=True
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}   enableFastMacCacheFailover     false
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}   enableIgmpSnooping     true
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}   enableNetworkLoopProtection     false
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}   igmpIdleTimeoutInterval     300
    Set to Dictionary    ${resp['members'][0]['ethernetSettings']}    macRefreshInterval     10
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     200s    90s
    Log    \n\n LIG edited successfully!! \n\n    console=True
    [Return]    ${task}

Editing LIG-snmp Configuration
    [Documentation]  Editing snmp Configuration in LIG
    [Arguments]     ${LIG_name}
    ${lig_uri} =    Get LIG Uri     ${LIG_name}
    Log    \n\n ${lig_uri}!! \n\n    console=True
    ${resp}=    Fusion Api Get Lig     param=?filter="'name'=='${LIG_name}'"
    Log    \n\n ${resp}!! \n\n    console=True
    Set to Dictionary    ${resp['members'][0]['snmpConfiguration']}   enabled     false
    ${resp} =    Fusion Api Edit Lig    ${resp["members"][0]}    ${lig_uri}
    ${task} =   Wait For Task   ${resp}     200s    90s
    Log    \n\n LIG edited successfully!! \n\n    console=True
    [Return]    ${task}

Check interconnect inventory state
    [Documentation]   Checking  interconnect inventory state
    [Arguments]     ${bay}
    ${resp}=    Fusion Api Get Interconnect   param=?filter="'name'=='${ENCLOSURE_NAME}, interconnect ${bay}'"
    Run Keyword If  '${resp['members'][0]['state']}' !='Inventory'    fail

Check interconnect unmanaged state
    [Documentation]   Checking  interconnect inventory state
    [Arguments]     ${bay}
    ${resp}=    Fusion Api Get Interconnect   param=?filter="'name'=='${ENCLOSURE_NAME}, interconnect ${bay}'"
    Run Keyword If  '${resp['members'][0]['state']}' !='Unmanaged'    fail