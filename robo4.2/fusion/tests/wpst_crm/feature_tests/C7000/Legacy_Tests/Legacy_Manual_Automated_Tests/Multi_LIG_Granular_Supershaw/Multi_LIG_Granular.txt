*** Settings ***
Documentation      Granular_Data
#Variables          data_variables.py
Variables          Multi_LIG_Granula_data.py
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library            Collections
Library            SSHLibrary
Suite Setup        Suite Setup Tasks
Resource           ../../../../../../../Resources/api/fusion_api_resource.txt

#######################################################################################
#                  TestCase Description - This TestCase is Validating the granular Alerts using Multi-LIG by disabling/Enabling
#downlink/Uplink ports in Interconnects and Deleting/Adding Networks & Network set

###############    TestCase Steps    ################

# 1.Create Ethernet Network,FC network & Network set in SuiteSetup
# 2.Create Multi-LIG by using Network User
# 3.Create EG & import Enclosure
# 4.Verify all LI State
# 5.Create Server Profile and Verify the Profile Presence
# 6.List Interconnects by their Interconnect names
# 7.Verify the linked state for Interconnect 1 downlink Port
# 8.Verify the linked state for Interconnect 2 downlink Port
# 9.Verify the linked state for Interconnect 3 downlink Port
# 10.Verify the linked state for Interconnect 4 downlink Port
# 11.Delete Alerts after checking the Linked State of interconnect ports
# 12.Delete one Ethernet Network
# 13.Validate the Alerts after deleting the Ethernet network
# 14.Disable the Interconnect 1 linked downlink port
# 15.Validate the Alerts after Interconnect 1 downlink port is disabled
# 16.Enable the disabled downlink port & verify the Interconnect port details
#  - Disable the uplink ports assigned to the uplink set
#  - Enable the uplink ports assigned to the uplink set
# 17.List the Interconnect 1 downlink port
# 18.Validate Alerts after disabling & Enabling the uplink ports
# 19.Remove Interconnect 1 from OA
# 20.Recreate the Network & Networks et that was deleted before
# 21.Add Interconnect 1 in OA
# 22.Delete Server Profile
# 23.Delete Enclosure & Verify
# 24.Validate Interconnects are not Present
# 25.Delete EG & LIG


#############   TESTCASES    ###########
***Test Cases***

1_Delete All Alerts
    [Documentation]    Deleting the alerts after creating netwoks
    ${resp}=    Fusion Api Switch Active User    sarah
    Log    \n\n"server admin logged in"!! \n\n    console=True
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log    \n\n EG "Alerts Deleted Successfully!!!"!! \n\n    console=True



2_Create Multi Logical Interconnect Group by nat User
    [Documentation]    Creating LIG by Network User
    ${resp}=    Fusion Api Switch Active User    nat
    ${Length}=    Get Length    ${ligs}
    :For    ${x}    IN RANGE    0    ${Length}
    \    ${body}    Build LIG body    ${ligs[${x}]}
    \    Log    \n\n Creating LIG1!! \n\n    console=True
    \    ${resp}    Fusion Api Create LIG   ${body}
    \    ${task}    Wait For Task   ${resp}    60s   2s
    \    Run Keyword If  '${task['taskState']}' != 'Completed'  Fail    ELSE  Log    \n\n LIG created successfully!! \n\n    console=True
    Verifying the presence of created LIG

3_Create EG and Import Enclosure
    [Documentation]    Creating EG & Importing the Enclosure
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${EncGrp}=    Add Enclosure Group from variable   ${EG}
    Run keyword unless  ${EncGrp['status_code']}== 201    Fail    ${EncGrp['message']}
    Log    \n\n EG created succesfully!! \n\n    console=True
    ${resp} =    Fusion Api Get Enclosure Groups    param=?filter="'name'=='${EG['name']}'"
    Log    \n\n ${resp}!! \n\n    console=True
    ${resp}=    Add Enclosures from variable     ${enclosures}
    Sleep    120s
    ${enclosure_present} =    Fusion Api Get Enclosures
    ${Count} =    Get From Dictionary    ${enclosure_present}    count
    Log    \n\n ${Count}!! \n\n    console=True
    Run Keyword If  '${enclosure_present['count']}' =='0'    fail    ELSE    Log    \n\n Enclosure imported succesfully!! \n\n    console=True

4_Verify all logical interconnect state
    [Documentation]    Verifying the Logical Interconnect state
    Check consistencyStatus of LI     ${ENC1}-${ligs[0]['name']}
    Check consistencyStatus of LI     ${ENC1}-${ligs[1]['name']}

5_Verify All Interconnect Status is Configured
    [Documentation]    Verifying the Interconnect Status
    ${resp}=    Fusion Api Switch Active User    sarah
    ${len} =    Get Length    ${INTERCONNECTS}
    :FOR    ${x}    IN RANGE    0    ${len}
    \   ${resp} =   Fusion Api Get Interconnect
    \   Log    \n\n "The state of the interconnect is :"!! \n\n    console=True
    \   Log    \n\n ${resp['members'][0]['state']}!! \n\n    console=True
    \   Run Keyword If    '${resp['members'][0]['state']}' == 'Configured'    Log    \n\n IC is Configured!! \n\n    console=True    ELSE    Log    \n LI is in Unmanaged State \n    console=True


6_Server Profile
    [Documentation]    Creating Server Profiles and Checking profiles is present or not
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    sarah
    ${existing_profiles} =      Fusion Api Get Server Profiles
    ${Count} =  Get From Dictionary    ${existing_profiles}    count
    Log    \n\n ${Count}!! \n\n    console=True
    Run keyword unless    '${Count}' == '0'    fail    Log    \n\n Servers are Not Available!! \n\n    console=True
    Power off ALL servers    PressAndHold
    #Add Server Profiles from variable     ${server_profile1}
    #Power on server    ${server_profile1[0]['serverHardwareUri']}
    #sleep   60s
    #Log    \n\n Server1 are powered on successfully!! \n\n    console=True
    Add Server Profiles from variable     ${server_profile2}
    Power on server    ${server_profile2[0]['serverHardwareUri']}
    sleep   1300s
    Log    \n\n Server2 are powered on successfully!! \n\n    console=True
    ${existing_profiles} =    Fusion Api Get Server Profiles
    Log    \n\n ${existing_profiles}!! \n\n    console=True
    ${Count} =    Get From Dictionary    ${existing_profiles}    count
    Log    \n\n ${Count}!! \n\n    console=True
    #Run keyword unless    '${Count}' == '2'    fail    Log    \n\n Servers are Available!! \n\n    console=True
    Run keyword unless    '${Count}' == '1'    fail    Log    \n\n Servers are Available!! \n\n    console=True



7_List All Interconnects Present in the Enclosure
    [Documentation]    List Interconnects in the LI Page
    ${resp}=    Fusion Api Switch Active User    sarah
    ${list}=    Create List
    ${li_resp} =    Fusion Api Get Li
    Log    \n\n ${li_resp['members'][0]['uri']}!! \n\n    console=True
    ${ic_uri}=    Get Variable Value    ${li_resp['members'][0]['interconnects']}
    ${length} =    Get Length     ${ic_uri}
    :FOR    ${a}    IN RANGE    0    ${length}
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${a}]}
    \    Log    \n\n ${ic_resp['name']}!! \n\n    console=True
    \    ${ic_name}=    set Variable    ${ic_resp['name']}
    \    Append To List    ${list}    ${ic_name}

8_List Interconnect 1 Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect1 downlink port status and list PortName &status
    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

8_1_List Interconnect 2 Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect2 downlink port status and list PortName &status
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat
    ${list1}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[1]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list1}    ${port_name}

8_2_List Interconnect 3 Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect3 downlink port status and list PortName &status
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect3}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[2]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

8_3_List Interconnect Downlink Port and verifying the port status by network user
    [Documentation]    Verifying the Interconnect 4 downlink port status and list PortName &status
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[3]}'   Continue For Loop
    \    ${port_name}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value    ${ic_resp['ports'][${x}]['portName']}
    \   Append To List    ${list}    ${port_name}

9_Delete All Alerts-"After Verifying the interconnect port status"
    [Documentation]    Deleting All Alerts
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log    \n\n "Alerts Deleted Successfully!!!"!! \n\n    console=True

10_Delete Ethernet Network
    [Documentation]    Deleting One Ethernet Network
    ${resp}=    Fusion Api Switch Active User    nat
    ${networks} =    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${enet[2]['name']}'"
    Log    \n\n ${networks}!! \n\n    console=True
    ${uri} =    Get From Dictionary     ${networks['members'][0]}   uri

    ${resp} =    Fusion Api Delete Ethernet Network        uri=${uri}
    Wait For Task    ${resp}    60s    1s
    Log    \n\n "Network Removed Successfully"!! \n\n    console=True

11_Validate Alerts-"After Deleting the Ethernet Network"
    [Documentation]    Validating the alerts after deleting the network
    ${resp}=    Fusion Api Switch Active User    sarah

    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' =='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' == '${description}'     Continue For Loop
    \   Log    \n\n Alerts Validation Completed!! \n\n    console=True

12_Delete network set
    [Documentation]    Deleting the network set and deleting alerts
    ${resp}=    Fusion Api Switch Active User    sarah

    ${resp}    Fusion Api Delete Alert
    Wait For Task   ${resp}    ${timeout}   ${interval}
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log    \n\n "Alerts Deleted Successfully!!!"!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    nat

    ${resp} =   Fusion Api Get Network Set    param=?filter="'name'=='${network_set[1]['name']}'"
    Log    \n\n ${resp}!! \n\n    console=True
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    ${set} =    Fusion Api Delete Network Set    uri=${uri}
    ${task} =   Wait For Task    ${set}    60s   1s
    Log    \n\n "Networkset Removed!!"!! \n\n    console=True

13_Validate Alerts
    [Documentation]    Validating the Alerts after deleting the network set
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}=    Fusion Api Get Alerts
    Log    \n\n ${resp}!! \n\n    console=True

    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' =='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description1}'     Continue For Loop
    \   Log    \n\n Alerts Validation Completed!! \n\n    console=True

14_Disable Interconnect 1 Linked downlink port
    [Documentation]    Disabling the downlink port of Interconnect 1 and verifying the downlink status
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True

    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    Set Log Level    TRACE
    ${li_resp} =    Fusion Api Get Li
    Log    \n\n ${li_resp['members'][0]['uri']}!! \n\n    console=True
     ${ic_uri}=    Get Variable Value    ${li_resp['members'][0]['interconnects']}
    :FOR    ${b}    IN RANGE    0    1
    \    ${ic_resp} =    Fusion Api Get Interconnect    ${ic_uri[${b}]}
    \    ${port_name}=    Run Keyword If    '${ic_resp['ports'][${b}]['portStatus']}' == 'Unlinked'    Get Variable Value    ${ic_resp['ports'][${b}]['portName']}

15_Validate Alert
    [Documentation]    Validating the Alerts after disabling the downlink port in Interconnect 1
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description2}'     Continue For Loop
    \   Log    \n\n Alerts Validation Completed!! \n\n    console=True

16_Enabling Disabled Downlink Port and Get Interconnect details
    [Documentation]    Enabling the disabled downlink and verify the port status
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Unlinked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =     Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_downlink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_downlink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_downlink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_downlink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_downlink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    ${ic1} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    ${port1_name}=    Run Keyword If    '${ic1['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic1['members'][0]['ports'][0]['portName']}
    Log    \n\n ${port1_name}!! \n\n    console=True
    ${ic2} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${port2_name}=    Run Keyword If    '${ic2['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic2['members'][0]['ports'][0]['portName']}
    Log    \n\n ${port2_name}!! \n\n    console=True
    ${ic3} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect3}'"
    ${port3_name}=    Run Keyword If    '${ic3['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic3['members'][0]['ports'][0]['portName']}
    Log    \n\n ${port3_name}!! \n\n    console=True
    ${ic4} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${port4_name}=    Run Keyword If    '${ic4['members'][0]['ports'][0]['portStatus']}' == 'Linked'    Get Variable Value    ${ic4['members'][0]['ports'][0]['portName']}
    Log    \n\n ${port4_name}!! \n\n    console=True

    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp}    Fusion Api Delete Alert
    Run Keyword If    ${resp['status_code']}!= 202    Fail    "Alerts are not deleted"    ELSE    Log    \n\n "Alerts Deleted Successfully!!!"!! \n\n    console=True

16_a_Disabling Uplink ports in Interconnect
    [Documentation]    Disabling the Uplink ports in the interconnects
    Set Log Level    TRACE
    ${resp}=    Fusion Api Switch Active User    nat

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_Uplink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_Uplink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True


    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID_2[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_disable_Uplink[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_disable_Uplink[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_disable_Uplink}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

16_b_Enabling Uplink ports in the Interconnects
    [Documentation]    Enabling the disabled uplink port and verify
    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True

    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' != 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect4}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True

    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${PortID_2[0]}'   Continue For Loop
    \    ${port_uri}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' != 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}

    ${ic_port_resp} =   Fusion Api Get Interconnect    uri=${port_uri}
    Set To Dictionary    ${ic_enable_body[0]}    associatedUplinkSetUri    ${ic_port_resp['associatedUplinkSetUri']}
    Set To Dictionary    ${ic_enable_body[0]}    interconnectName    ${ic_port_resp['interconnectName']}
    Set To Dictionary    ${ic_enable_body[0]}    portId    ${ic_port_resp['portId']}
    Set To Dictionary    ${ic_enable_body[0]}    portName    ${ic_port_resp['portName']}
    ${resp} =    Fusion Api Edit Interconnect Ports    uri=${IC_uri}    body=${ic_enable_body}
    Run keyword unless  ${resp['status_code']}== 202    Fail    ${resp['message']}
    ${task} =    Wait For Task  ${resp}     120s    10s
    Sleep    100

17_List IC port - "verify the downlink port status"
    [Documentation]    Verify the downlink port is in Unlinked status
    ${resp}=    Fusion Api Switch Active User    nat
    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Downlink_linkedPort[1]}'   Continue For Loop
    \    ${port_Status}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Linked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}
    \   Append To List    ${list}    ${port_Status}

    ${list}=    Create List
    ${ic_resp} =    Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect2}'"
    ${IC_uri}    Get Variable Value    ${ic_resp['members'][0]['uri']}
    ${len}=    Get Length    ${ic_resp['members'][0]['ports']}
    Log    \n\n ${len}!! \n\n    console=True
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run keyword if    '${ic_resp['members'][0]['ports'][${x}]['name']}' != '${Unlinked_down[0]}'   Continue For Loop
    \    ${port_Status}=    Run Keyword If    '${ic_resp['members'][0]['ports'][${x}]['portStatus']}' == 'Unlinked'    Get Variable Value     ${ic_resp['members'][0]['ports'][${x}]['uri']}
    \   Append To List    ${list}    ${port_Status}

18_Validate Alert
    [Documentation]    Verifying the alerts after disable and enable the uplink ports
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =    Fusion Api Get Alerts
    ${mem_resp} =  Get From Dictionary     ${resp}     members
    ${len} =   Get Length    ${mem_resp}
    :FOR   ${x}    IN RANGE    0   ${len}
    \   Run Keyword If  '${mem_resp[${x}]['severity']}' == 'Critical'    Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['physicalResourceType']}' !='interconnects'   Continue For Loop
    \   Run Keyword If  '${mem_resp[${x}]['description']}' != '${description4}'     Continue For Loop
    \   Log    \n\n Alerts Validation Completed!! \n\n    console=True

19_Remove Interconnect 1 in OA
    [Documentation]    Removing the Interconnect 1 from OA
    ${ic_resp}=    Remove Interconnect in OA    ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    Sleep    200s
    Log    \n\n "Interconnect 1 Removed Successfully"!! \n\n    console=True

20_Recreate Network & Network set
    [Documentation]    Creating the deleted network and network set again
    ${resp}=    Fusion Api Switch Active User    nat
    ${resp}     fusion api create ethernet network      body=${enet[2]}
    Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to Create Ethernet network"

    ${resp}=    Fusion Api Create Network Set    body=${network_set[1]}
    Log    \n\n ${resp}!! \n\n    console=True
    Log    \n\n "Networksets created Successfully"!! \n\n    console=True

21_Add Interconnect 1 Again
    [Documentation]    Adding the deleted Interconnect 1 again
    ${resp}=    Fusion Api Switch Active User    nat
    ${ic_resp}=    Add Interconnect in OA    ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    Sleep    200s
    Log    \n\n "Interconnect 1 Added Successfully"!! \n\n    console=True
    ${resp}=    Fusion Api Switch Active User    nat
    ${resp} =   Fusion Api Get Interconnect    param=?filter="'name'=='${Interconnect1}'"
    Run Keyword If   ${resp['count']} == 0    Fail    Log    \n\n Interconnect 1 is Available!!!!! \n\n    console=True

22_Delete Server profiles
    [Documentation]    Deleting the Server Profiles
    ${resp}=    Fusion Api Switch Active User    sarah
    #Log    \n\n ${server_profile1[0]['name']}!! \n\n    console=True
    Power off ALL servers    PressAndHold
    #${resp}=    Fusion Api Delete Server Profile    ${server_profile1[0]['name']}    param=?force=true
    #${task} =   Wait For Task   ${resp}     200s    10s
    #Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to delete Server profile"
    ${resp}=    Fusion Api Delete Server Profile    ${server_profile2[0]['name']}    param=?force=true
    ${task} =   Wait For Task   ${resp}     200s    10s
    Run keyword unless  ${resp['status_code']}== 202    Fail    "Unable to delete Server profile"
    Log    \n\n ${resp}!! \n\n    console=True

23_Remove Enclosure & verify Li and Interconnect
    [Documentation]    Remove Enclosure and Verify LI & Interconnect is not Present
    ${resp}=    Fusion Api Switch Active User    sarah
    ${encs} =    Fusion Api Get Enclosures
    Log    \n\n ${encs}!! \n\n    console=True
    Log    \n\n ${encs['members'][0]['uri']}!! \n\n    console=True
    ${resp}=    Fusion Api Remove Enclosure    uri=${encs['members'][0]['uri']}    param=?force=true
    Log    \n\n ${resp}!! \n\n    console=True
    ${task} =   Wait For Task   ${resp}     500s    10s
    Log    \n\n ${task}!! \n\n    console=True

    ${encs} =    Fusion API Get Enclosures
    Run Keyword If    ${encs['count']} == 0    Log    \n\n Enclosure Is not Available!!!!! \n\n    console=True
    Log    \n\n ${encs}!! \n\n    console=True
    ${encs} =       Fusion Api Get LI
    Run Keyword If    ${encs['count']} == 0    Log    \n\n LI Is not Available!!!!! \n\n    console=True
    Log    \n\n ${encs}!! \n\n    console=True
    ${encs} =   Fusion Api Get Interconnect
    Run Keyword If    ${encs['count']} == 0    Log    \n\n Interconnect Is not Available!!! \n\n    console=True
    Log    \n\n ${encs}!! \n\n    console=True

24_Verify Interconnects are not Present
    [Documentation]    Verifying the Interconnects are not Present in Appliance
    ${resp}=    Fusion Api Switch Active User    nat
    :FOR    ${x}    IN RANGE    0    2
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS[${x}]}'"
    \   Run Keyword If    ${resp['count']} == 0    Log    \n\n Interconnect Is not Available!!!!! \n\n    console=True

25_Remove EG & LIG
    [Documentation]    Removing EG & LIG
    ${resp}=    Fusion Api Switch Active User    sarah
    ${resp} =   Fusion Api Get Enclosure Groups
    Log    \n\n ${resp['members'][0]['uri']}!! \n\n    console=True
    ${encs} =    Fusion Api Delete Enclosure Group    uri=${resp['members'][0]['uri']}
    Sleep    60s
    Log    \n\n EG Deleted Successfully!! \n\n    console=True
    ${resp}=    Fusion Api Switch Active User    nat
    ${resp}=    Remove All LIGs
    #Log    \n\n ${resp}!! \n\n    console=True
    #${resp} =    Fusion Api Get LIG    param=?filter="'name'=='${ligs['name']}'"}
    Sleep    60s


26_Logout From nat & Sarah
    [Documentation]    Verifying the Login and Logout by users
    ${resp}=    Fusion Api Switch Active User    nat
    ${resp}=    Fusion Api Switch Active User    sarah

*** Keywords ***

Suite Setup Tasks
    [Documentation]    Suite Setup tasks
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log    \n\n Logged into Appliance!!!!! \n\n    console=True and logfile
    Clean OV
    :FOR   ${user}   IN   @{users}
    \   ${Response}     Fusion Api Add User    ${user}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log    \n\n ${Response['userName']} is created Successfully!! \n\n    console=True


    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${network_credentials}

    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${server_credentials}

    ${resp}=    Fusion Api Switch Active User    nat

    ${Length}=    Get Length    ${enet}
    :For    ${x}    IN RANGE    0    ${Length}
    \    ${resp}     fusion api create ethernet network     body=${enet[${x}]}
    \    Run keyword unless    ${resp['status_code']}== 202    Fail    "Unable to Create Ethernet network"    #ELSE    Log    \n\n "Ethernet created Successfully"!! \n\n    console=True

    :For    ${fc_net}    IN    @{Fc_network}
    \    ${resp} =    Fusion Api Create Fc Network    ${fc_net}
    \    Run keyword unless    ${resp['status_code']}== 202    Fail    "Unable to Create FC network"

    ##${nwset}   IN   @{network_set}
    ${resp}=    Add Network Sets from variable    ${network_set}
    Log    \n\n Suite Setup Completed!!!! \n\n    console=True

Clean OV
    [Documentation]    Cleans the appliance
    Log    \n\n Cleaning the OV!! \n\n    console=True
    Power off ALL servers    PressAndHold
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users

Remove Interconnect in OA
    [Documentation]     Remove Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    Sleep    3
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    Sleep    3
    SSHLibrary.Write    ++diag--
    Sleep    3
    SSHLibrary.Write    efuse IOM ${interconnect_bay} OFF
    Sleep    5
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

Add Interconnect in OA
    [Documentation]     Add Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    Sleep    3
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    Sleep    3
    SSHLibrary.Write    ++diag--
    Sleep    3
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    Sleep    5
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

Verifying the presence of created LIG
    [Documentation]  Verifying the presence of created LIG
    ${Length}=    Get Length    ${ligs}
    :For    ${x}    IN RANGE    0    ${Length}
    \    ${resp}=    Fusion Api Get Lig    param=?filter="'name'=='${ligs[${x}]['name']}'"
    \    Run Keyword Unless    '${resp['members'][0]['name']}'  ==  '${ligs[${x}]['name']}'    FAIL

Build LIG body1
    [Documentation]    builds LIG body
    [Arguments]     ${xlig}
    ${xlig} =   Copy Dictionary ${xlig}

    ${uplinkSets} =     Copy List   ${xlig['uplinkSets']}
    ${l} =  Get Length  ${uplinkSets}

    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   Run Keyword If  '${networkType}' == 'Ethernet'      Continue For Loop
    \   ${networkUris} =    Get FC Uris ${networks}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris ${networkUris}

    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   Run Keyword If  '${networkType}' == 'FibreChannel'  Continue For Loop
    \   ${networkUris} =    Get FCoE Uris    ${networks}
    \   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris ${networkUris}

    ${name} =                       Get Variable Value  ${xlig['name']}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${xlig['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${xlig['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${xlig['fcoeSettings']}
    ${internalNetworkUris} =        Get Variable Value  ${xlig['internalNetworkUris']}
    ${interconnectBaySet} =         Get Variable Value  ${xlig['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${xlig['interconnectMapTemplate']}
    ${redundancyType} =             Get Variable Value  ${xlig['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${xlig['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${xlig['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${xlig['snmpConfiguration']}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    #${uplinkSets} =                 Get Variable Value  ${xlig['uplinkSets']}

    ${internalNetworkUris} =    Run Keyword If   ${internalNetworkUris} is not ${null}    Get Ethernet Uris ${internalNetworkUris}

    ${body} =   Fusion Api Create LIG Payload   name=${name}
    ...                                         enclosureIndexes=${enclosureIndexes}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                         fcoeSettings=${fcoeSettings}
    ...                                         internalNetworkUris=${internalNetworkUris}
    ...                                         interconnectBaySet=${interconnectBaySet}
    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         redundancyType=${redundancyType}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                         uplinkSets=${uplinkSets}
    [Return]    ${body}

Check consistencyStatus of LI
    [Documentation]         Checking the consistencyStatus of LI
    [Arguments]                  ${LI_name}
    ${URI} =    Get LI URI    ${LI_name}
    Set Global Variable    ${LI_URI}    ${URI}
    ${li_resp} =    Fusion Api Get Li   ${LI_URI}
    Run keyword If    '${li_resp['consistencyStatus']}' != 'CONSISTENT'    Fail    ${LI_URI} is ${li_resp['consistencyStatus']}