*** Settings ***
Documentation      Validating the Interconnect state
Library            json
Library            FusionLibrary
Library            RoboGalaxyLibrary
Library             SSHLibrary
Variables          data_variables_utah_ocho.py
Resource           ../../../../../../resource/fusion_api_all_resource_files.txt
Library            Dialogs
Suite Setup        Suite Setup Tasks
Suite Teardown    Suite Teardown Tasks

############################################################################################################
# Test Case Description : This Test case is to verify interconnect state by removing/adding interconnect in
#                         OA in four scenarios as follows
#                           -When Interconnects are in configured state.
#                           -When the Interconnect is in Unmanaged state.
#                           -When Interconnect is in Inventory state.
#                           -Removing the interconnect in OA before importing enclosure.
# Test Steps:
#   1.Login to nat and Create LIG with all interconnects.
#   2.Login to sarah and Creating EG.
#   3.Importing Enclosure.
#   4.Login to nat and Validating interconnect state as configured.
#   5. Removing interconnect in OA and checking the interconnect state is Absent.
#   6. Adding interconnect in OA and checking the interconnect state is Configured.
#   7.Login to sarah and Removing Enclosure and EG.
#   8.Login to nat and Editing LIG with interconnects as unmanaged.
#   9.Login to sarah and Creating EG and Importing Enclosure with interconnect state as Unmanaged.
#   10.Login to nat and Validating interconnect state as Unmanaged.
#   11.Removing interconnect in OA and checking the interconnect state as absent when it is Unmanaged.
#   12. Adding interconnect in OA and checking the state as Unmanaged.
#   13.Login to sarah and Removing the Enclosure and EG after the interconnect state is Unmanaged.
#   14.Login to nat and Editing LIG with the interconnect state as Inventory.
#   15.Login to sarah and Creating EG and Importing enclosure with interconnect state as Inventory.
#   16.Login to nat and Validating the interconnect state as Inventory and verifying the ports.
#   17.Removing Interconnect in OA and checking the interconnect is present in the interconnect page.
#   18.Adding the Interconnect in OA and checking the interconnect state as Inventory.
#   19.Login to sarah and Removing Enclosure and EG when the interconnect is in Inventory state.
#   20.Removing Interconnect in OA before Importing the Enclosure.
#   21.Login to nat and Editing LIG with Interconnects in absent state.
#   22.Login to sarah and Creating EG and Importing enclosure after removing interconnect in OA.
#   23.Login to nat and Validating Interconnect state as Absent and verifying Linked ports.
#   24.Adding the Interconnect in the OA and checking the Interconnect state as configured in Interconnect page.
#   25.Login to sarah and Deleting Enclosure.
#   26.Removing the EG and LIG.
#############################################################################################################

***Test Cases***
1_Login
    [Documentation]   Login into appliance
    Set Log Level    TRACE
    ${resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run Keyword If  '${resp[0]['status_code']}' != '200'  Fail  ELSE  Log to console  \nSuccessfully logged into the appliance
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

2_Create LIG
    [Documentation]   Login to nat and Creating LIG with all interconnects with configured state
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    Log to console and logfile    \n Creating LIG!
    ${body} =   Build LIG body      ${ligs['lig1']}
    ${resp_lig} =    Fusion Api Create LIG   ${body}
    Log to console and logfile      ${resp_lig}
    Run keyword unless  ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =   Wait For Task   ${resp_lig}     120s    2s
    Log to console and logfile    LIG-COMP-OU1 created successfully

    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

3_Create EG
    [Documentation]    Login to sarah and Creating EG
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    ${resp_eg} =    Add Enclosure Group from variable       ${eg_body1}
    Run keyword unless  ${resp_eg['status_code']}== 201    Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

4_Importing Enclosure
    [Documentation]    Importing Enclosure
    Add Enclosures from variable     ${enc_body1}
    Log to console and logfile    Enclosure imported succesfully

    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

5_Validate the interconnect state
    [Documentation]    Login to nat and Validating interconnect state as configured
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    ${Length}=    Get Length    ${INTERCONNECTS_enc1}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${x}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${x}]} is not in configured state!!   ${\n}
    Log to console and logfile    The interconnect state is checked successfully

6_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing interconnect in OA and checking the interconnect state is Absent
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect state as Absent    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Removing the Interconnect

7_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding interconnect in OA and checking the interconnect state is Configured
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as configured    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Adding the Interconnect
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully


8_Remove Enclosure, EG
    [Documentation]    Login to sarah and Removing Enclosure and EG
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully


9_Edit LIG to make interconnects Unmanaged
    [Documentation]    Login to nat and Editing LIG with interconnects as unmanaged
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    ${lig_uri} =    Get LIG URI    ${ligs['lig1']['name']}
    Set Global Variable    ${LIG1_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig}
    Log to console  \n creating LIG
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     60s 30s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

10_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing Enclosure with interconnect state as Unmanaged
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Log to console  \n Creating EG
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_unmanaged}
    Log to console and logfile    Enclosure imported succesfully
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

11_Validate the interconnect state
    [Documentation]    Login to nat and Validating interconnect state as Unmanaged
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int1}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Unmanaged"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in unmanaged state!!   ${\n}
    Log to console and logfile    The interconnect state is checked successfully

12_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing interconnect in OA and checking the interconnect state as absent when it is Unmanaged
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect state as Absent    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Removing the Interconnect

13_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding interconnect in OA and checking the state as Unmanaged
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as Unmanaged    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Adding the Interconnect
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

14_Remove Enclosure, EG
    [Documentation]    Login to sarah and Removing the Enclosure and EG after the interconnect state is Unmanaged
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

15_Edit LIG to make interconnects Inventory
    [Documentation]    Login to nat and Editing LIG with the interconnect state as Inventory
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    ${lig_uri} =    Get LIG URI    ${ligs['lig1']['name']}
    Set Global Variable    ${LIG1_uri}    ${lig_uri}
    ${body} =   Build LIG body      ${edit_lig1}
    Log to console  \n creating LIG
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     60s 30s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

16_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing enclosure with interconnect state as Inventory
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Log to console  \n Creating EG
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg1}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_inventory}
    Log to console and logfile    Enclosure imported succesfully
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

17_Validate the interconnect state and ports
    [Documentation]    Login to nat and Validating the interconnect state as Inventory and verifying the ports
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int3}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${x}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Inventory"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in inventory state!!   ${\n}
    Log to console and logfile    The interconnect state is checked successfully

18_Removing Interconnect in OA and checking Interconnect state
    [Documentation]    Removing Interconnect in OA and checking the interconnect is present in the interconnect page
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    Checking Interconnect    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Removing the Interconnect

19_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding the Interconnect in OA and checking the interconnect state as Inventory
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as Inventory    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Adding the Interconnect
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

20_Remove Enclosure,EG
    [Documentation]    Login to sarah and Removing Enclosure and EG when the interconnect is in Inventory state
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Remove ALL Enclosures
    Remove ALL Enclosure Groups

21_Removing Interconnect in OA
    [Documentation]    Removing Interconnect in OA before Importing the Enclosure
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Remove Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    30s
    \    Log to console and logfile    The Interconnect is removed
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

22_Edit LIG to make interconnects Absent
    [Documentation]    Login to nat and Editing LIG with Interconnects in absent state
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    ${body} =   Build LIG body      ${edit_lig2}
    Log to console  \n creating LIG
    ${resp} =   Fusion Api Edit Lig    ${body}    ${LIG1_uri}
    ${task} =   Wait For Task   ${resp}     60s 30s
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console   \n-Successfully LIG is edited
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

23_Create EG and Import Enclosure
    [Documentation]    Login to sarah and Creating EG and Importing enclosure after removing interconnect in OA
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Log to console  \n Creating EG
    ${Resp} =   Add Enclosure Group from variable       ${edit_eg2}
    Run Keyword If  '${Resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-created EG successfully
    Set Global Variable    ${EG_uri}    ${Resp['uri']}

    Add Enclosures from variable     ${enc_body2}
    Log to console and logfile    Enclosure imported succesfully
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

24_Validate the interconnect state and ports
    [Documentation]    Login to nat and Validating Interconnect state as Absent and verifying Linked ports
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    :FOR    ${pp}    IN  @{INTERCONNECTS_Int1}
    \   ${count}     Evaluate    ${pp}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count}]} is not in configured state!!   ${\n}

    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Log to Console      "The state of the interconnect is :"
    \   Log to Console      ${resp['members'][0]['state']}
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Absent"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in absent state!!   ${\n}
    Log to console and logfile    The interconnect state is checked successfully

25_Adding Interconnect in OA and checking Interconnect state
    [Documentation]    Adding the Interconnect in the OA and checking the Interconnect state as configured in Interconnect page
    ${Length}=    Get Length    ${interconnect_bay}
    :FOR    ${x}    IN RANGE    0    ${Length}
    \    Add Interconnect via OA   ${ENCLOSURE_IP}    ${OA_USER}    ${OA_PASS}    ${interconnect_bay[${x}]}
    \    sleep    2min    30s
    \    Log to console and logfile    The Interconnect is added
    sleep    10min    30s
    Checking Interconnect state as configured    ${INTERCONNECTS_enc1}
    Log to console and logfile    The interconnect state is checked successfully after Adding the Interconnect
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

26_Delete Enclosure and verify it is removed or not
    [Documentation]    Login to sarah and Deleting Enclosure
    Login as sarah    ${APPLIANCE_IP}    ${server_credentials}
    Remove ALL Enclosures

27_Remove EG,LIG
    [Documentation]    Removing the EG and LIG
    Remove ALL Enclosure Groups
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    Login as nat    ${APPLIANCE_IP}    ${network_credentials}
    Remove ALL LIGs
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully

***keywords***
Remove Interconnect via OA
    [Documentation]     Remove Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    SSHLibrary.Write    ++diag--
    Sleep    10
    SSHLibrary.Write    efuse IOM ${interconnect_bay} OFF
    SSHLibrary.Write    q
    Sleep    5
    SSHLibrary.Close All Connections

Add Interconnect via OA
    [Documentation]     Add Interconnect
    [Arguments]         ${OA_HOST}   ${OA_USER}    ${OA_PASS}    ${interconnect_bay}
    SSHLibrary.Open Connection     ${OA_HOST}
    SSHLibrary.Login               ${OA_USER}     ${OA_PASS}
    SSHLibrary.Write    ++diag--
    Sleep    10
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    SSHLibrary.Write    efuse IOM ${interconnect_bay} ON
    SSHLibrary.Write    q
    Sleep    60s
    SSHLibrary.Close All Connections

Checking Interconnect
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run keyword unless    ${resp['count']} != 0    Log to console and logfile    The Interconnect is not present in Interconnect page

Checking Interconnect state as Unmanaged
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Unmanaged"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in unmanaged state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Unmanaged in the Interconnect page

Checking Interconnect state as Configured
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Configured"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in configured state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Configured in the Interconnect page

Checking Interconnect state as Absent
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int2}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Absent"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in absent state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Absent in the Interconnect page

Checking Interconnect state as Inventory
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    :FOR    ${qq}    IN  @{INTERCONNECTS_Int4}
    \   ${count1}     Evaluate    ${qq}-1
    \   ${resp}=        Fusion Api Get Interconnect   param=?filter="'name'=='${INTERCONNECTS_enc1[${count1}]}'"
    \   Run Keyword If  "${resp['members'][0]['state']}" !="Inventory"    fail     The Interconnect module ${INTERCONNECTS_enc1[${count1}]} is not in inventory state!!   ${\n}
    \   Log to console and logfile    The Interconnect state is Inventory in the Interconnect page
    \   Checking Interconnect port status    ${INTERCONNECTS_enc1[${count1}]}


Checking Interconnect port status
    [Documentation]     Checking Interconnect state
    [Arguments]         ${INTERCONNECTS_enc1}
    ${resp} =    Fusion Api Get Interconnect        param=?filter="'name'=='${INTERCONNECTS_enc1}'"
    ${ports} =    Get from Dictionary    ${resp['members'][0]}    ports
    ${len} =    Get Length    ${ports}
    Log to Console      ${len}  ${\n}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports[${x}]['portType']}' == 'Uplink'   Check Linked status    ${ports[${x}]}   ${up_ports}


Check Linked status
    [Documentation]    Check Linked status of uplink ports
    [Arguments]    ${ports}    ${linked_ports}
     ${flag}=    set variable    ${empty}
    ${len} =    Get Length  ${linked_ports}
    :FOR    ${x}    IN RANGE    0   ${len}
    \    Run Keyword If  '${ports['portName']}' == '${linked_ports[${x}]}' and '${ports['portStatus']}' == 'Unlinked'    Set Global Variable    ${flag}    True
    \   Log to console and logfile    The Ports are in Unlinked state

Login as nat
    [Documentation]     Login into appliance as nat
    [Arguments]         ${APPLIANCE_IP}        ${network_credentials}
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${network_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login"
    Log To Console    \n\nLogged in as ${users[0]['userName']}


Login as sarah
    [Documentation]     Login into appliance as sarah
    [Arguments]         ${APPLIANCE_IP}        ${server_credentials}
    ${Login_response}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${server_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    "Unable to Login"
    Log To Console    \n\nLogged in as ${users[1]['userName']}

Suite Setup Tasks
    [Documentation]    Suite Setup tasks
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance
    Clean OV
    :FOR    ${i}    IN  @{users}
    \   ${Response}     Fusion Api Add User    ${i}
    \   Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Create users"
    \   Log To Console    \n${Response['userName']} is created Successfully
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    Login as nat    ${APPLIANCE_IP}        ${network_credentials}
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully
    Login as sarah    ${APPLIANCE_IP}        ${server_credentials}
    ${resp}     Fusion Api Logout Appliance
    Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logged out successfully


Suite Teardown Tasks
    [Documentation]    Suite Teardown tasks
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile      Logged into Appliance
    Clean OV

Clean OV
    [Documentation]    Cleans the appliance
    Log to console and logfile  \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users