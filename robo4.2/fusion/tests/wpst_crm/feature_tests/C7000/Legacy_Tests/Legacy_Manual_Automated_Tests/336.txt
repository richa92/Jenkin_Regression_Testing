*** Settings ***
Documentation       testcase_336
Variables       data_variables.py
#Library        data_variables
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         String
Library         SSHLibrary
Resource        ../../../../resources/resource.txt

*** Test Cases ***

STEP 00: LOGIN TO APPLIANCE
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    #Initial Cleanup
    Clean OV
#####Start the testing with fresh appliance(vpools allocated id will be 0 for mac,wwn and sn)
STEP 1: PRECONDITION REQUIRED:
    #CREATE ETHERNET NETWORK
    [Tags]  add   POSITIVE
    Set Log Level    TRACE

    Log to console    \n-Creating Ethernet Networks
    ${uriList} =   Create List
    :FOR   ${ethnet}   IN   @{ethernet_networks_336}
    \   ${resp}        Fusion Api Create Ethernet Network   body=${ethnet}
    \   ${eth_name_info}        Fusion Api Get Ethernet Networks    param=?filter="'name'=='${ethnet['name']}'"
    \   Append To List   ${uriList}   ${eth_name_info['members'][0]['uri']}
    \   Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  log to console  \nETHERNET Network got created successfully

    #CREATE LIG
    ${body} =   Build LIG body      ${lig_336}
    ${resp_lig} =     Fusion Api Create LIG    ${body}
    Run keyword unless    ${resp_lig['status_code']}== 202    Fail    "Unable to Create LIG"
    ${task} =    Wait For Task     ${resp_lig}     120s    2s
    Log to console and logfile    LIG created successfully
    ${uri} =    Get From Dictionary    ${task['associatedResource']}    resourceUri
    Set Global Variable    ${lig_uri}    ${uri}

    #CREATE EG
    ${resp_eg} =    Add Enclosure Group from variable        ${enc_group_336}
    Run keyword unless    ${resp_eg['status_code']}== 201    Fail    "Unable to Create EG"
    Log to console and logfile    EG created succesfully

    #IMPORT ENCLOSURE
    ${resp_import} =    Add Enclosures from variable     ${encs_jeff_1}
    Run keyword unless    ${resp_import['status_code']}== 202    Fail    "Unable to import enclosure"
    Log to console and logfile    Enclosure imported succesfully
    Log to console    Step 1 completed successfully

STEP 2: GET VPOOLS(MAC, WWN, SN RANGE FROM OV) WITH ALLOCATED ID AS 0 AND COUNT AS 1048576 FOR MAC, WWN AND 46656 FOR SN

    # GET ID AND COUNT FOR MAC
    ${resp}=    Fusion API Get Pool     ${pooluri[0]['mac']}
    Log to console and logfile    ${resp}
    Run Keyword If  '${resp['allocatedCount']}' != '0'  Fail    ELSE  log to console   \n-Allocated id is 0
    Run Keyword If  '${resp['freeCount']}' != '1048576'  Fail    ELSE  log to console   \n-Total count is ${resp['freeCount']}

    # GET ID AND COUNT FOR WWN
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    Run Keyword If  '${resp1['allocatedCount']}' != '0'  Fail    ELSE  log to console   \n-Allocated id is 0
    Run Keyword If  '${resp1['freeCount']}' != '1048576'  Fail    ELSE  log to console   \n-Total count is ${resp['freeCount']}

    # GET ID AND COUNT FOR SN
    ${resp2}=    Fusion API Get Pool     ${pooluri[0]['sn']}
    Run Keyword If  '${resp2['allocatedCount']}' != '0'  Fail    ELSE  log to console   \nAllocated id is 0
    Run Keyword If  '${resp2['freeCount']}' != '46656'  Fail    ELSE  log to console   \n-Total count is ${resp['freeCount']}

    #CHECK WWN IS IN HEXADECIMAL FORMAT SEPARATED BY COLON
    ${resp1}=    Fusion API Get Pool     ${pooluri[0]['wwn']}
    ${wwn_uri} =    Set Variable    ${resp1['rangeUris'][0]}
    Log to console   ${wwn_uri}
    ${wwn_values}=    Fusion API Get Pool     ${wwn_uri}
    Log to console    ${wwn_values}
    Log to console    ${wwn_values['startAddress']}
    Log to console    ${wwn_values['endAddress']}

    ${wwn_start_byte_count} =    Get WWN Byte Count    ${wwn_values['startAddress']}
    ${wwn_end_byte_count} =    Get WWN Byte Count    ${wwn_values['endAddress']}

    Run Keyword If  '${wwn_start_byte_count}' != '8'    AND    '${wwn_end_byte_count}' != '8'    Fail    ELSE  log to console   \n-WWN Ranges are in 8 one-byte number separated by colon
    Log To Console     Step 2 Completed Successfully

STEP 3: DISABLE MAC, WWN AND SN RANGE
    ${resp}     Fusion Api Edit Vmac Range  ${disablepool}  ${pooluri[0]['mac']}
    Log to console and logfile    ${resp}
    Run Keyword If  '${resp['enabled']}' != 'False'  Fail    ELSE  log to console   \n-Mac range is disabled
    ${resp1}     Fusion Api Edit Vsn Range   ${disablepool}  ${pooluri[0]['sn']}
    Log to console and logfile    ${resp1}
    Run Keyword If  '${resp1['enabled']}' != 'False'  Fail    ELSE  log to console   \n-sn range is disabled
    ${resp2}     Fusion Api Edit Vwwn Range   ${disablepool}  ${pooluri[0]['wwn']}
    Log to console and logfile    ${resp2}
    Run Keyword If  '${resp2['enabled']}' != 'False'  Fail    ELSE  log to console   \n-WWN range is disabled
    Log to console    Step 3 completed successfully

STEP 4: CREATE SERVER PROFILE WITH DISABLED POOLS
    ${SP_resp}    ${task}=    Add Server Profiles from variable   ${profile_2}
    Log to console and logfile      ${SP_resp}
    Log to console and logfile      ${task}
    Log to console and logfile      ${task['taskErrors']}
    Run Keyword If  '${task['taskStatus']}' != 'Unable to create server profile: ProfileB.'  Fail    ELSE  log to console   \n-Pool is disabled
    Run Keyword If  '${task['taskErrors'][0]['errorCode']}' != 'POOL_DISABLED'  Fail    ELSE  log to console   \n-Unable to crete server profile when mac,wwn,serial number range is disabled
    Log to console    Step 4 completed successfully

STEP 5: ENABLE MAC, WWN AND SN RANGE
    ${resp}     Fusion Api Edit Vmac Range  ${enablepool}  ${pooluri[0]['mac']}
    Log to console and logfile    ${resp}
    Run Keyword If  '${resp['enabled']}' != 'True'  Fail    ELSE  log to console   \n-Mac range is Enabled

    ${resp2}     Fusion Api Edit Vwwn Range   ${enablepool}  ${pooluri[0]['wwn']}
    Log to console and logfile    ${resp2}
    Run Keyword If  '${resp2['enabled']}' != 'True'  Fail    ELSE  log to console   \n-WWN range is Enabled

    ${resp1}     Fusion Api Edit Vsn Range   ${enablepool}  ${pooluri[0]['sn']}
    Log to console and logfile    ${resp1}
    Run Keyword If  '${resp1['enabled']}' != 'True'  Fail    ELSE  log to console   \n-sn range is Enabled
    Log To Console    Step 5 completed successfully

STEP 6: CREATE SERVER PROFILES WITH ENABLED POOLS
    ${server_resp}    ${task}=    Add Server Profiles from variable   ${server_profiles_pools1}
    Run keyword unless    ${server_resp['status_code']}== 202    Fail    "Unable to create server profile"
    Log to console and logfile    Server profile created succesfully
    Log To Console    Step 6 completed successfully

STEP 7-PART 1: CHECK THE ALLOCATED COUNT ID OF EACH POOL WITH RESPECT TO SERVER

    ${mac_count}=    Get Enabled Pool Count     ${pooluri[0]['mac']}
    Log to console and logfile    ${mac_count}
    ${result} =    Run Keyword If  '${mac_count}' == '1'    Log to console    Server profile allocated with default genrated mac pool range

    ${wwn_count}=    Get Enabled Pool Count     ${pooluri[0]['wwn']}
    Log to console and logfile    ${wwn_count}
    ${result} =    Run Keyword If  '${wwn_count}' == '0'    Log to console    Server profile not allocated with any genrated wwn pool range

    ${sn_count}=    Get Enabled Pool Count     ${pooluri[0]['sn']}
    Log to console and logfile    ${sn_count}
    ${result} =    Run Keyword If  '${sn_count}' == '1'    Log to console    Server profile allocated with default genrated sn pool range
    Log To console    Step 7 - part 1 completed Successfully

STEP 7-PART 2: COMPARE THE RANGES TAKEN FROM SERVER PROFILE WITH SETTINGS PAGE
    ${resp} =    Fusion Api Get Server Profiles
    Log to console    ${resp}
    ${range1} =    Get Profile Details    ${resp}    ${server_profiles_pools1[0]['name']}
    Log to console    ${range1}
    Log to console    got profile1 details

    #GET RANGES OF MAC AND SN FROM SETTINGS PAGE
    ${range2} =    Create Dictionary   mac_address=''
    ...                                serial_number=''
    ${mac_range} =    Get Vpool Address    ${pooluri[0]['mac']}
    Set To Dictionary    ${range2}    mac_address    ${mac_range}
    ${sn_range} =    Get Vpool Address    ${pooluri[0]['sn']}
    Set To Dictionary    ${range2}    serial_number    ${sn_range}
    Log to console    ${range2}
    Log to console    Got Ranges from settings page for enabled pools

    #COMPARE BOTH VALUES
    Should Be Equal As Strings    ${range1['mac_address']}    ${range2['mac_address']}
    Should Be Equal As Strings    ${range1['serial_number']}    ${range2['serial_number']}
    Log to console    BOTH MAC AND SN RANGES GOT MATCHED
    Log To console   Step 7 - part 2 completed Successfully

STEP 8: GENERATE NEW MAC RANGE AND DISABLE EXISTING MAC POOL RANGE
    ${resp1} =    Fusion API Get Pool     ${pooluri[0]['mac']}
    ${mac_values}=    Fusion API Get Pool     ${resp1['rangeUris'][0]}
    Log to console    ${mac_values}
    Log to Console    Re-genrate mac range
    ${resp} =    Fusion Api Generate Pool    ${pooluri[0]['mac']}
    Log To Console    ${resp}

    ${mac_range_body} =     Copy Dictionary    ${vmac_body2}
    Set To Dictionary   ${mac_range_body}   startAddress     ${resp['startAddress']}
    Set To Dictionary   ${mac_range_body}   endAddress     ${resp['endAddress']}
    Log To Console    ${mac_range_body}

    ${resp} =    Fusion Api Create Vmac Range    ${mac_range_body}
    Log To Console    ${resp}
    Run Keyword If  '${resp['status_code']}' != '200'  Fail    ELSE  log to console  \nMAC Range generated Successfully

    #DISABLE EXISTING MAC POOL RANGE
    ${mac_count}=    Get Enabled Pool Count     ${pooluri[0]['mac']}
    Log to console and logfile    ${mac_count}
    ${status} =    Run Keyword If  '${mac_count}' == '1'    Disable Mac Range  ${disablerange}  ${mac_values['uri']}
    Log To Console    Step 8 Completed Successfully

STEP 9: CREATE NEW SERVER PROFILE USING NEW MAC POOL RANGE
    ${server_resp}    ${task}=    Add Server Profiles from variable   ${profile_3}
    Run keyword unless    ${server_resp['status_code']}== 202    Fail    "Unable to create server profile"
    Log to console and logfile    Server profile created succesfully
    Log To Console    Step 9 completed successfully

STEP 10-PART 1: CHECK THE ALLOCATED COUNT ID OF EACH POOL WITH RESPECT TO NEWLY CREATED SERVER PROFILE
    ${mac_count}=    Get Enabled Pool Count     ${pooluri[0]['mac']}
    Log to console and logfile    ${mac_count}
    ${result} =    Run Keyword If  '${mac_count}' == '1'    Log to console    Server profile allocated with newly genrated mac pool range

    ${sn_count}=    Get Enabled Pool Count     ${pooluri[0]['sn']}
    Log to console and logfile    ${sn_count}
    ${result} =    Run Keyword If  '${sn_count}' == '2'    Log to console    Server profile allocated with newly genrated sn pool range
    Set Global Variable    ${g_sn_count}    ${sn_count}

STEP 10-PART 2: COMPARE THE RANGES TAKEN FROM NEWLY CREATED SERVER PROFILE WITH SETTINGS PAGE
    ${resp} =    Fusion Api Get Server Profiles
    Log to console    ${resp}
    ${range3} =    Get Profile Details    ${resp}    ${profile_3[0]['name']}
    Log to console    ${range3}
    Log to console    got profile2 details

    #GET RANGES OF MAC AND SN FROM SETTINGS PAGE
    ${range4} =    Create Dictionary   mac_address=''
    ...                                serial_number=''
    ${mac_range} =    Get Vpool Address    ${pooluri[0]['mac']}
    Set To Dictionary    ${range4}    mac_address    ${mac_range}
    ${sn_range} =    Get Vpool Address    ${pooluri[0]['sn']}
    Set To Dictionary    ${range4}    serial_number    ${sn_range}
    Log to console    ${range4}
    Log to console    Got Ranges from settings page for enabled pools

    #Should Be Equal As Strings    ${range3['mac_address']}    ${range4['mac_address']}
    #Log to console   Mac got matched

    ${a} =    Run Keyword If   ${g_sn_count} > 1    Increament Serial Range    ${range4['serial_number']}

    #COMPARE BOTH SERIAL NUMBER LIST
    ${x}=   Split String To Characters  ${range3['serial_number']}
    Log to console    ${x}
    Lists Should Be Equal    ${a}    ${x}
    Log to console    Serial Number list got matched successfully
    Log to console    Step 10 Completed Successfully
    #Final Cleanup
    Clean OV
STEP 11: LOGUTOF APPLIANCE
   ${resp} =    Fusion Api Logout Appliance
   Log to console and logfile     ${resp}
   Run Keyword If  '${resp['status_code']}' != '204'  Fail    ELSE  log to console   \n-Logout from appliance successfully

*** Keywords ***
Disable Mac Range
    [Arguments]     ${disablerange}   ${mac_uri}
    ${status} =    Fusion Api Edit Vmac Range    ${disablerange}  ${mac_uri}
    Log to console    ${status}
    Run Keyword If  '${status['status_code']}' == '200'    Log To Console   MAC Range Disabled Successfully    Exit For Loop

Get Profile Details
    [Arguments]     ${resp}    ${profile_name}
    ${profile_len} =    Get Length    ${resp['members']}
    :FOR    ${x}    IN RANGE   ${profile_len}
    \   ${range1} =    Run Keyword If  '${resp['members'][${x}]['name']}' == '${profile_name}'
    \   ...    Get Mac and Serial Number Of Server Profile    ${resp['members'][${x}]}
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]    ${range1}

Get Mac and Serial Number Of Server Profile
    [Arguments]     ${resp}
    ${range1} =    Create Dictionary    mac_address=''
    ...                                 serial_number=''
    Set To Dictionary   ${range1}   mac_address     ${resp['connections'][0]['mac']}
    Set To Dictionary   ${range1}   serial_number     ${resp['serialNumber']}
    Log to console    ${range1}
    [return]    ${range1}

Get Vpool Address
    [Arguments]     ${pooluri}
    ${response}=    Fusion API Get Pool     ${pooluri}
    Log to console and logfile    ${response}
    ${range_uri_length} =    Get Length    ${response['rangeUris']}
    :FOR    ${x}    IN    @{response['rangeUris']}
    \   ${each_resp} =    Fusion API Get Pool     ${x}
    \   Run Keyword If  '${each_resp['enabled']}' == 'True'
    \   ...    Log to console    ${each_resp['startAddress']}
    ${pool} =    Set Variable    ${each_resp['startAddress']}
    Log to console    ${pool}
    [return]    ${pool}

Get Enabled Pool Count
    [Arguments]     ${pooluri}
    ${resp1}=    Fusion API Get Pool     ${pooluri}
    Log To Console   ${resp1}
    ${range_uri_length} =    Get Length    ${resp1['rangeUris']}
    :FOR    ${x}    IN RANGE    ${range_uri_length}
    \   ${range_value}=    Fusion API Get Pool     ${resp1['rangeUris'][${x}]}
    \   Log to console    ${range_value}
    \   ${count} =    Run Keyword If  '${range_value['enabled']}' == 'True'
    \   ...    Get From Dictionary    ${range_value}    allocatedIdCount
    \   ...    ELSE
    \   ...    Continue For Loop
    [return]    ${count}

Increament Serial Range
    [Arguments]     ${sn}
    ${a}=   Split String To Characters  ${sn}
    Log to console    ${a}
    ${last} =    Remove From List    ${a}    -1
    Log to console  ${a}
    ${b} =    Evaluate    ${last} + ${c}
    ${z} =    Convert To String   ${b}
    Log to console    ${z}
    Append to list    ${a}    ${z}
    Log to console    ${a}
    [return]    ${a}

Get WWN Byte Count
    [Arguments]     ${wwn_range}
    ${wwn_byte} =    Convert To Bytes    ${wwn_range}
    Log to console    ${wwn_byte}
    Should Contain X Times    ${wwn_byte}    :    7
    ${wwn_byte_list} =    Split String    ${wwn_byte}    :
    Log to console    ${wwn_byte_list}
    ${wwn_byte_length} =    Get Length    ${wwn_byte_list}
    Log To Console    ${wwn_byte_length}
    [return]    ${wwn_byte_length}

Add Enclosure Group from variable
    [Documentation] Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}
    #Log to console and logfile     ${enc_group['name']}
    #Log to console and logfile     ${enc_group}
    #Log to console and logfile     Adding ENCLOSURE GROUP ${enc_group['name']}
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   ${liguri} =     Common URI Lookup by name    ${liguri}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${resp} =   Fusion Api Create Enclosure Group   ${enc_group}
    [Return]    ${resp}

Add Enclosures from variable
    [Documentation] Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${encs_m}
    Log to console and logfile      Adding ENCLOSURES
    Log to console and logfile      ${encs_m}
    :FOR    ${enc}  IN  @{encs_m}
    \   ${encuri} =     Get From Dictionary ${enc}  enclosureGroupUri
    \   ${encuri} =     Common URI Lookup by name    ${encuri}
    \   Set to dictionary   ${enc}  enclosureGroupUri       ${encuri}
    \   ${resp} =   Fusion Api Add Enclosure    ${enc}
    \   ${task} =   Wait For Task   ${resp}     40min   20s
    [Return]    ${resp}

Add Server Profiles from variable
    [Documentation] Adds Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}
    Log to console and logfile      Adding SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   ${shuri} =  Get from Dictionary ${profile}  serverHardwareUri
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   Log to console and logfile  ${profile}
    \   ${eg} =     Get from Dictionary ${profile}  enclosureGroupUri
    \   Log to console and logfile  ${eg}
    \   ${uri} =    Common URI Lookup by name    ${eg}
    \   Log to console and logfile  ${uri}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary ${profile}  enclosureUri
    \   Log to console and logfile  ${enc}
    \   ${uri} =    Common URI Lookup by name    ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${connections} =    Get From Dictionary ${profile}  connections
    \   Log to console and logfile  ${connections}
    \   ${connections} =    Lookup Connection Uris  ${connections}
    \   Log to console and logfile  ${connections}
    \   Set to Dictionary   ${profile}  connections     ${connections}
    \   ${resp} =   Fusion Api Create Server Profile        body=${profile}
    \   Log to console and logfile  ${resp}
    \   ${task} =   Wait For Task   ${resp}     timeout=13 mins     interval=10s
    \   Log to console and logfile  ${task}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    #\   Should Match Regexp    ${task_state}   ((?i)Warning|Completed)
    [Return]    ${resp}    ${task}
Clean OV
    [Documentation] Cleans the appliance
    Log to console    \nCleaning the OV
    Power off ALL Servers
    Remove All Server Profiles
    Remove ALL Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove ALL Network Sets
    Remove ALL Users