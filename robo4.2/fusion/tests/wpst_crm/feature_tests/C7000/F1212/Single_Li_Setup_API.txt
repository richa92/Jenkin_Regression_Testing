*** Settings ***
Documentation       Feature  test: Firmware update F1212 of Hill Module
...                 on Enclosure G3,G2 G1
Variables           data_variables.py
#Resource           ../../resources/resource.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library

*** Variables ***
${firmwareVersion_upgrade}     3.00
${SSH_PASS}                 hpvse1
${DataFile}                 ./OVAData.xml
${APPLIANCE_IP}             192.168.147.205
${X-API-VERSION}            600

${ICM_NAME1}                         SGH420HHYA, interconnect 3
${ICM_NAME2}                         SGH420HHYA, interconnect 4
${ICM_NAME3}                         SGH420HHYA, interconnect 6
${ICM_NAME4}                         SGH420HHYA, interconnect 7
${ICM_NAME5}                         SGH420HHYA, interconnect 1
${ICM_NAME6}                         SGH420HHYA, interconnect 2
${ICM_NAME7}                         SGH420HHYA, interconnect 8

${BAY1}                              1
${IP}                           192.168.144.132

${Last_AlertID}            0
${Starting_AlertID}        1
${E_value}                       No update required. Selected firmware is already installed in the logical interconnect
${RR_BB}                         Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_st_succ}                 Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${RR_BB_act_suc}                 Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_act_str}                 Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert1}                    Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert2}                    Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${ICM_Alert3}                    Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert4}                    Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect

${ICM_Alert1_stg_star}           Staging started for the interconnect
# ${ICM_Alert1_stg_str_end}        \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline

# ${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 from baseline

${ICM_Alert1_stg_succ}           Staging success for the interconnect
# ${ICM_Alert1_stg_succ_end}       \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
# ${ICM_Alert1_act_star_end}      \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_act_star_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.08 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
# ${ICM_Alert1_act_succ_end}      \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 from baseline

# 1 4.40 2014-10-12T08:56:22Z    4.40 2014-10-12T08:56:22Z
# ${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline
${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-21T17:19:05Z from baseline
# ${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

# ${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline
${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.50 2016-04-21T17:19:05Z from baseline
# ${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

${ICM_Alert1_stg_star}           Staging started for the interconnect
# ${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 from baseline


${ICM_Alert1_stg_succ}           Staging success for the interconnect
# ${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
# ${HICM_Alert1_act_star_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.08 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
# ${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 from baseline


# 1 4.40 2014-10-12T08:56:22Z(4.60 2016-12-12T14:16:54Z)    4.40 2014-10-12T08:56:22Z  (4.60 2016-12-12T14:16:54Z)
# ${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

# ${HICM_Alert1_stg_star_3_end}    \  with firmware version 3.08 v7.4.0_13 from baseline
# ${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline


@{LI_u_vc_names}=    ${ICM_NAME3}

@{LI_vc_names}=    ${ICM_NAME5}
...             ${ICM_NAME6}

@{LI_names}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME4}
...             ${ICM_NAME7}

@{LI_namesall}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME3}
...             ${ICM_NAME4}
...             ${ICM_NAME5}
...             ${ICM_NAME6}
...             ${ICM_NAME7}



*** Test Cases ***

        ######  Importing Enclosure    #######################

TC01 Verify the FW Update operation (Stage + Activate) of hill module during LE creation using parallel mode with force flag
    [Documentation]        "3.1 : Verify the FW Update operation (Stage + Activate) of hill module during LE creation using parallel mode with force flag"
    Log to Console    Testcase_ID: TP section 3.1.2 API Test Cases F1212_TC_API_51 -->  Verify the FW Update operation (Stage + Activate) of hill module during LE creation using parallel mode with force flag

    [Tags]   Performance  LIG-condition-LIG_6ICM_2FCUS

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}


    # Create FC Network1
    ${FCNW_ONE}=     Get Variable Value     ${fc_networks_NW1}
    Run Keyword If     ${FCNW_ONE} is not ${null}         Add FC Networks from variable      ${FCNW_ONE}
    Sleep   60
    # Create FC Network2
    ${FC_NETWORKTWO}=     Get Variable Value     ${fc_networks_NW2}
    Run Keyword If     ${FC_NETWORKTWO} is not ${null}        Add FC Networks from variable      ${FC_NETWORKTWO}
    Sleep    80
    ${ethernet_networks} =  Get Variable Value    ${eth_nw1_p}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${eth_nw1_p}
    ${ethernet_networks} =  Get Variable Value    ${eth_s_bb}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${eth_s_bb}


    ${body} =   Build LIG body      ${ligs['new_lig1']}
    ${resp} =   Fusion Api Create LIG   ${body}

    ${task} =   Wait For Task   ${resp}     180s   2s

    Fusion Api Logout Appliance

TC02 Create EG
    [Documentation]        TC02 Create EG
    [Tags]    Performance-Enclosure-Group-condition-EG_6ICM_3US
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Add Enclosure Group from variable       ${enc_group}
    Fusion Api Logout Appliance

TC03 Create enclosure using Created EG
    [Documentation]        TC03 Create enclosure using Created EG
    [Tags]    Performance-Enclosure-condition-SE_6ICM_1S
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
#    Add Enclosures from variable   ${encs}
    LE Creation By Add Enclosures from variable   ${encs_f1212_new_upgrade}

    ### ALERT Validation after LE creation #########

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    Log to Console        ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance

TC04 Create Server Profile
    [Documentation]        TC04 Create Server Profile
    Fusion Api Login Appliance     ${APPLIANCE_IP}     ${admin_credentials}

    Power off ALL servers

    Run Keyword If    ${server_profiles} is not ${null}     Add Server Profiles from variable     ${server_profiles_2FC_2ETH_BFS_Automation_SP}

    Fusion Api Logout Appliance

*** Keywords ***

#######################################
# COMMON KEYWORDS
#######################################
Get Ethernet URI
    [Documentation]        Get Ethernet URI
    [Arguments]    ${net}
    ${resp} =     Fusion Api Get Ethernet Networks    param=?filter="'name'=='${net}'"
    ${uri} =     Get From Dictionary     ${resp['members'][0]}     uri
    [Return]      ${uri}


Build LIG body
    [Documentation]        Build LIG body
    [Arguments]    ${xlig}
    ${xlig} =     Copy Dictionary    ${xlig}
    ${uplinkSets} =      Copy List    ${xlig['uplinkSets']}
    ${l} =    Get Length    ${uplinkSets}

    :FOR  ${x}  IN RANGE   0   ${l}
    \    ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}    networkType
    \    ${networks} =    Get From Dictionary    ${uplinkSets[${x}]}    networkUris
    \    Run Keyword If     '${networkType}' == 'Ethernet'    Continue For Loop
    \   ${networkUris} =    Get FC Uris   ${networks}
    \    Set to dictionary   ${uplinkSets[${x}]}   networkUris   ${networkUris}

    :FOR   ${x}   IN RANGE   0   ${l}
    \   ${networkType} =    Get From Dictionary    ${uplinkSets[${x}]}   networkType
    \   ${networks} =    Get From Dictionary   ${uplinkSets[${x}]}   networkUris
    \   Run Keyword If  '${networkType}' == 'FibreChannel'    Continue For Loop
    \   ${networkUris} =    Get FCoE Uris   ${networks}
    \   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \   Set to dictionary  ${uplinkSets[${x}]}  networkUris  ${networkUris}
    #### Adding here fo test native but not working
    #\   ${nativeNetworks} =    Get From Dictionary   ${uplinkSets[${x}]}   nativeNetworkUri
    #\   ${nativeNetworks} =   Get Ethernet URIs   ${nativeNetworks}
    #\   Set to dictionary  ${uplinkSets[${x}]}  nativeNetworkUri  ${nativeNetworks}

    ${name} =                       Get Variable Value  ${xlig['name']}
#   ${nativeNetworkUri_b} =           Get Variable Value     ${xlig['nativeNetworkUri']}
#   ${nativeNetworkUri} =       Get Ethernet URI          ${nativeNetworkUri_b}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${xlig['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${xlig['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${xlig['fcoeSettings']}
    ${interconnectBaySet} =         Get Variable Value  ${xlig['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${xlig['interconnectMapTemplate']}
    ${redundancyType} =             Get Variable Value  ${xlig['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${xlig['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${xlig['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${xlig['snmpConfiguration']}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    ${type} =           Get Variable Value  ${xlig['type']}
    #${uplinkSets} =                 Get Variable Value  ${xlig['uplinkSets']}


    ${body} =     fusion_api_create_lig_payload    name=${name}
#   ...                                         type= ${nativeNetworkUri}
    ...                                         enclosureIndexes=${enclosureIndexes}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                         fcoeSettings=${fcoeSettings}
    ...                                         interconnectBaySet=${interconnectBaySet}
    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         redundancyType=${redundancyType}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                         uplinkSets=${uplinkSets}
    [Return]    ${body}


Remove Enclosure
    [Documentation]  Remove the enclosure by name
    [Arguments]     ${name}
    ${uri} =    Get Enclosure URI    ${name}
    ${resp} =      Fusion Api Remove Enclosure      uri=${uri}
    ${task} =      Wait For Task    ${resp}     300s    10s

Get Enclosure Group URI
    [Documentation]        Get Enclosure Group URI
    [Arguments]     ${eg}
    ${resp} =      Fusion Api Get Enclosure Groups
    ${l} =     Get Length      ${resp['members']}
    :FOR  ${x}     IN RANGE      0   ${l}
    \   Run Keyword If    '${resp['members'][${x}]['name']}' != '${eg}'      Continue For Loop
    \   ${uri} =       Get From Dictionary      ${resp['members'][${x}]}    uri
    [Return]     ${uri}


BBAdd Enclosures from variable
    [Documentation]   Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${encsbb}
    Log to console and logfile      Adding ENCLOSURES
    :FOR   ${enc}    IN      @{encsbb}
    \   ${encuri} =              Get From Dictionary        ${enc}      enclosureGroupUri
    \   @{words} =      Split String     ${encuri}  :
    \   ${type} =     Get From List     ${words}      0
    \   ${e} =      Get From List     ${words}    1
    \   ${encuri} =    Get Enclosure Group URI   ${e}
    \   Set to dictionary     ${enc}    enclosureGroupUri      ${encuri}
    \   ${resp} =       Fusion Api Add Enclosure    ${enc}
    \   Log to console    ${resp}
    \   Log To Console       ${resp}
    \   ${task} =      Wait For Task_enc    ${resp}      11min  1s



LE Creation By Add Enclosures from variable
    [Documentation]      Adds Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]       ${encs}
    Log to console and logfile      Adding ENCLOSURES
    ${resplist} =   Create List
    :FOR  ${enc}  IN  @{encs}
    \    ${encuri} =     Get From Dictionary    ${enc}     enclosureGroupUri
    \    ${encuri} =      Common URI Lookup by name    ${encuri}
    \    Set to dictionary    ${enc}    enclosureGroupUri     ${encuri}
    \    ${resp} =   Fusion Api Add Enclosure    ${enc}
    \    Append To List    ${resplist}    ${resp}
    ${tasklist} =   Create List
    :FOR  ${resp}  IN  @{resplist}
    \    ${task} =   Wait For Task   ${resp}   129min    15s
    \    Append To List    ${tasklist}     ${task}
    [return]     ${tasklist}
