*** Settings ***
Documentation       Feature Test:  F1212
...                 Hill  Firmware Update test to include all interconnect types: Ethernet, FC interconnects on G3,G2 and G2 Enclosures
...
Variables           data_variables.py
#Suite Setup        Run FTS and test-specific setup
#Suite Teardown     Suite Teardown
#Resource            ../../resources/resource.txt
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             SSHLibrary
Library             Validation_c7k_firmware_version

*** Variables ***
${LE_name}                     SGH420HHYA
${firmwareVersion_upgrade}     3.01
${SSH_PASS}                     hpvse1
${DataFile}         ./OVAData.xml
${APPLIANCE_IP}                 192.168.147.205
${ICM_NAME1}                         SGH420HHYA, interconnect 3
${ICM_NAME2}                         SGH420HHYA, interconnect 4
${ICM_NAME3}                         SGH420HHYA, interconnect 6
${ICM_NAME4}                         SGH420HHYA, interconnect 7
${ICM_NAME5}                         SGH420HHYA, interconnect 1
${ICM_NAME6}                         SGH420HHYA, interconnect 2
${ICM_NAME7}                         SGH420HHYA, interconnect 8
${BAY1}                              1
${IP}                           192.168.144.132


${E_value}                       No update required. Selected firmware is already installed in the logical interconnect
${RR_BB}                         Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${RR_BB_st_succ}                 Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${RR_BB_act_suc}                 Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${RR_BB_act_str}                 Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${ICM_Alert1}                    Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.08 v7.4.0_13 from baseline
${ICM_Alert2}                    Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.08 v7.4.0_13 from baseline

${ICM_Alert3}                    Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.08 v7.4.0_13 from baseline
${ICM_Alert4}                    Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.08 v7.4.0_13 from baseline

${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect

${ICM_Alert1_stg_star}           Staging started for the interconnect
# ${ICM_Alert1_stg_str_end}        \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline

# ${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 from baseline

${ICM_Alert1_stg_succ}           Staging success for the interconnect
# ${ICM_Alert1_stg_succ_end}       \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
# ${ICM_Alert1_act_star_end}      \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_act_star_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.08 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
# ${ICM_Alert1_act_succ_end}      \  with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline
# ${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 from baseline

# 1 4.40 2014-10-12T08:56:22Z    4.40 2014-10-12T08:56:22Z
# ${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline
${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-21T17:19:05Z from baseline
# ${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

# ${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline
${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.50 2016-04-21T17:19:05Z from baseline
# ${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

${ICM_Alert1_stg_star}           Staging started for the interconnect
# ${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.08 from baseline


${ICM_Alert1_stg_succ}           Staging success for the interconnect
# ${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.08 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
# ${HICM_Alert1_act_star_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.08 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
# ${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 v7.4.0_13 from baseline
${HICM_Alert1_act_succ_end}      \  with firmware version 3.08 from baseline


# 1 4.40 2014-10-12T08:56:22Z(4.60 2016-12-12T14:16:54Z)    4.40 2014-10-12T08:56:22Z  (4.60 2016-12-12T14:16:54Z)
# ${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

# ${HICM_Alert1_stg_star_3_end}    \  with firmware version 3.08 v7.4.0_13 from baseline
# ${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.60 2016-12-12T14:16:54Z from baseline
${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.60 2017-04-19T05:38:18Z from baseline

# 5 4.45 2015-07-20T23:55:25Z


@{LI_u_vc_names}=    ${ICM_NAME3}

@{LI_vc_names}=    ${ICM_NAME5}
...             ${ICM_NAME6}

@{LI_names}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME4}
...             ${ICM_NAME7}

@{LI_namesall}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME3}
...             ${ICM_NAME4}
...             ${ICM_NAME5}
...             ${ICM_NAME6}
...             ${ICM_NAME7}

*** Test Cases ***

#################  Verify the FW Update operation (Stage + Activate) of hill module from LE level using shared infrastructure  mode with force flag(downgrade for G3 enclosure) ###############

TC01 Verify the FW Update operation (Stage + Activate) of hill module from LE level using shared infrastructure mode with force flag(downgrade for G3 enclosure)
    [Documentation]       "3.1.2 :Verify the FW Update operation (Stage + Activate) of hill module from LE level using shared infrastructure  mode with force flag(downgrade for G3 enclosure)"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_64 :  LE FW Update:Verify the FW Update operation (Stage + Activate) of hill module from LE level using shared infrastructure  mode with force flag(downgrade for G3 enclosure)
    [Tags]   Performance  firmware_update-condition-le
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console   ${del_resp}
    # Power off the servers
    Power off ALL servers
    sleep    200s


    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers

    ${le}=    Get LE    ${LE_name}
    Log to Console       ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}

    ${body}=    Build LE SPP Body Hill    ${LE_DOWNGRADE_SH_INFRA_WITH_FLAG}
    Log to Console          ${body}


    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}    headers=${headers}
    Log to Console          ${resp}

    ${task} =       Wait For Task   ${resp}     190 min      1s

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed

    Validate Response    ${task}    ${valDict}
    Log to Console  \n Firmware Downgrade completed

    Log to Console  "Validate interconnect firmware version after firmwareupgrade is complete"
    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Log to Console    Validated the IC STATE
    \    Log to Console    ${icstate}
    \    Should Be Equal As Strings    ${icstate}       Configured
    Log to Console    Validated the Firmware version by compare with ICM and From API


#   [Tags]  Details
    ${le}=    Get LE    ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent

    ${icstate} =     Get From IC    ${ic}   state
    Should Be Equal As Strings    ${icstate}        Configured

    Log to Console  "Validate LE state after firmwareupgrade is complete"


#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console    ${alerts}
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance

    #################Verify that Hill firmware update should success with G1  (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure only ###############


TC02 Verify that Hill firmware update should success with G1 (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure only
    [Documentation]    "3.1.2 F1212_TC_API_46 and F1212_TC_API_47(G2) : Verify that Hill firmware update should success with G1  (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure only"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_46 and F1212_TC_API_47(G2):  Verify that Hill firmware update should success with G1  (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure only

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    # Power off the servers
    Power off ALL servers

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}


    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers

    ${le}=    Get LE    ${LE_name}
    Log to Console       ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}

    ${body}=    Build LE SPP Body Hill    ${LE_UPGRADE_SH_INFRA_WITH_OUT_FLAG}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}    headers=${headers}
    Log to Console         ${resp}
    ${task} =       Wait For Task   ${resp}    199 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Log to Console  \n Firmware Upgrade completed

    Log to Console  "Validate interconnect firmware version after firmwareupgrade is complete"
    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Log to Console    Validated the IC STATE
    \    Log to Console    ${icstate}
    \    Should Be Equal As Strings    ${icstate}       Configured
    Log to Console    Validated the Firmware version by compare with ICM and From API


#   [Tags]  Details
    ${le}=    Get LE    ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent

    ${icstate} =     Get From IC    ${ic}   state
    Should Be Equal As Strings    ${icstate}        Configured

    Log to Console  "Validate LE state after firmwareupgrade is complete"


#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console    ${alerts}
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance



TC03 Verify the FW Update operation (Stage + Activate) of hill module from LE level using Shared infrastructure and profiles mode with force flag(downgrade for G3 enclosure)
    [Documentation]       "3.1.2 :Verify the firmware Update of Hill module On SharedInfrastructure Only with forceInstallFirmware flag as true on LE"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases_F1212_TC_API_38 and F1212_TC_API_48 and F1212_TC_API_64: Verify the FW Update operation (Stage + Activate) of hill module from LE level using Shared infrastructure and profiles  mode with force flag(downgrade for G3 enclosure)

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    # Power off the servers
    Power off ALL servers

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}


    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers


    ${le}=    Get LE    ${LE_name}
    Log to Console       ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}

    ${body}=    Build LE SPP Body Hill    ${LE_DOWNGRADE_SH_INFRA_PROFIL_WITH_FLAG}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}    headers=${headers}
    Log to Console         ${resp}
    ${task} =       Wait For Task   ${resp}    185 min    2s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Log to Console  \n Firmware Upgrade completed successfully

    Log to Console  "Validate interconnect firmware version after firmwareupgrade is complete"
    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Log to Console    Validated the IC STATE
    \    Log to Console    ${icstate}
    \    Should Be Equal As Strings    ${icstate}       Configured
    Log to Console    Validated the Firmware version by compare with ICM and From API

    ${le}=    Get LE    ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent

    ${icstate} =     Get From IC    ${ic}   state
    Should Be Equal As Strings    ${icstate}        Configured

    Log to Console  "Completed LE  LE state Validation after firmwareupgrade is complete"


    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    : FOR    ${BICM_NAME}    IN    @{LI_names}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen

    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance


TC04 Verify that Hill firmware update should success with G2(only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure and profiles
    [Documentation]    "3.1.2 F1212_TC_API_47 :Verify that Hill firmware update should success with G2  (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure and profiles"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_47: Verify that Hill firmware update should success with G2  (only Auto and 8GB downlink supported) C7000 enclosures via LE using shared infrastructure and profiles

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    # Power off the servers
    Power off ALL servers

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}


    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers


    ${le}=    Get LE    ${LE_name}
    Log to Console       ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}

    ${body}=    Build LE SPP Body Hill    ${LE_UPGRADE_SH_INFRA_PROFILE_WITH_OUT_FLAG}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}    headers=${headers}
    Log to Console         ${resp}
    ${task} =       Wait For Task   ${resp}    125 min    2s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Log to Console  \n Firmware Upgrade completed successfully

    Log to Console  "Validate interconnect firmware version after firmwareupgrade is complete"
    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      verify_c7k_ic_version    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Log to Console    Validated the IC STATE
    \    Log to Console    ${icstate}
    \    Should Be Equal As Strings    ${icstate}       Configured
    Log to Console    Validated the Firmware version by compare with ICM and From API


    ${le}=    Get LE    ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent

    ${icstate} =     Get From IC    ${ic}   state
    Should Be Equal As Strings    ${icstate}        Configured

    Log to Console  "Completed LE  LE state Validation after firmwareupgrade is complete"


    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance


*** Keywords ***

Log into Fusion appliance as Administrator
    [Documentation]        Log into Fusion appliance as Administrator
    ${user} =  Get Data By Property  ${TestData.users}  name  Administrator
    Fusion UI Login to Appliance   ${user[0].name}

Validate Interconnects
    [Documentation]        Validate Interconnects
    [Arguments]     ${ICM_NAME}     ${ltlv}     ${rtlv}     ${explldp}
    ${ic} =     Get IC      ${ICM_NAME}
    ${enableRichTLV} =          Get From IC    ${ic}   enableRichTLV
    ${enableTaggedLldp} =       Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =             Get from IC     ${ic}       lldpIpAddress
    Should be Equal as Strings    ${enableRichTLV}      ${rtlv}
    Should be Equal as Strings    ${enableTaggedLldp}       ${ltlv}
    Should be Equal as Strings    ${lldpip}     ${explldp}


Load Test Data
    [Documentation]        Load Test Data
    Set Log Level    TRACE
    Load Test Data  ${DataFile}

Load Test Data and Open Browser
    [Documentation]        Load Test Data and Open Browser
    Set Log Level    TRACE
    Load Test Data  ${DataFile}
    Log Variables
    Open Browser  ${ApplianceUrl}  ${Browser}
    [Documentation]        Load Test Data and Open Browser
    Maximize Browser Window
    Set Selenium Speed  ${SeleniumSpeed}

Get PortId from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log to Console             ${uri}
    ${interconnect} =           fusion_api_get_interconnect_ports           uri=${uri}              param='\ports'
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log to Console         ${ports}
    ${l} =  Get Length  ${ports}
    Log to Console     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log to Console         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_id} =    Get From Dictionary     ${port_list}        portId

    [Documentation]        Get PortId from Ports
    [Return]    ${port_id}
    Log to Console         ${port_id}

Get PortStatus from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2 - Fetched from datafile
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log to Console             ${uri}
    ${interconnect} =           fusion_api_get_interconnect_ports           uri=${uri}              param='\ports'
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log to Console         ${ports}
    ${l} =  Get Length  ${ports}
    Log to Console     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log to Console         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_status} =    Get from Dictionary     ${port_list}        portHealthStatus
    [Documentation]        Get PortStatus from Ports
    [Return]    ${port_status}
    Log to Console         ${port_status}


Build Ports Edit Body
    [Documentation]        Build Ports Edit Body
    [Arguments]     ${port_id}          ${downlink_edit}
    ${interconnectName} =           Get Variable Value  ${downlink_edit['interconnectName']}
    ${enabled} =           Get Variable Value  ${downlink_edit['enabled']}
    ${portName} =           Get Variable Value  ${downlink_edit['portName']}
    ${type} =           Get Variable Value  ${downlink_edit['type']}
    ${edit_body} =  Create Dictionary   interconnectName=${interconnectName}
    ...                             enabled=${enabled}
    ...                             portName=${portName}
    ...                             portId=${port_id}
    ...                             type=${type}
    ${edit_body} =   Create list     ${edit_body}
    [Return]    ${edit_body}
    Log to Console         ${edit_body}

Build LE SPP body1
    [Documentation]        Build LE SPP body1
    [Arguments]     ${le_spp}
    #${liedit} =    Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${force} =              Get Variable Value  ${li_spp['force']}


    ${body} =   Fusion Api Build LE spp Body    command=${command}
    ...                                         sppUri=${sppUri}
    ...                                         force=${force}
    ...
    [Return]    ${body}



Build LE SPP Body
    [Documentation]        Build LE SPP Body
    [Arguments]     ${le_spp}

    ${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
    ${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
    ${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
    ${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}
    ${updateFirmwareOnUnmanagedInterconnect} =              Get Variable Value  ${le_spp['updateFirmwareOnUnmanagedInterconnect']}
    ${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
    ${value_dict} =      Create Dictionary   firmwareBaselineUri=${firmwareBaselineUri}
    ...                             forceInstallFirmware=${forceInstallFirmware}
    ...                             firmwareUpdateOn=${firmwareUpdateOn}
    ...                             logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}
    ...                             updateFirmwareOnUnmanagedInterconnect=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ...                             validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ${value} =    Create list     ${value_dict}
    Log to Console         ${value_dict}
    ${body} =     Create Dictionary   op=replace
    ...                             path=/firmware
    ...                             value=${value_dict}
    ${body} =   Create list     ${body}
    [Return]    ${body}

Build LE SPP Body Hill
    [Documentation]        Build LE SPP Body Hill
    [Arguments]     ${le_spp}

    ${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
    ${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
    ${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
    ${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}

    ${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
    ${value_dict} =      Create Dictionary   firmwareBaselineUri=${firmwareBaselineUri}
    ...                             forceInstallFirmware=${forceInstallFirmware}
    ...                             firmwareUpdateOn=${firmwareUpdateOn}
    ...                             logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}

    ...                             validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ${value} =    Create list     ${value_dict}
    Log to Console         ${value_dict}
    ${body} =     Create Dictionary   op=replace
    ...                             path=/firmware
    ...                             value=${value_dict}
    ${body} =    Create list     ${body}
    [Return]     ${body}


Build LI SPP body
    [Documentation]        Build LI SPP body
    [Arguments]     ${li_spp}
    ${liedit} =     Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${force} =              Get Variable Value  ${li_spp['force']}


    ${body} =   Fusion Api Create LI spp Body   command=${command}
    ...                                         sppUri=${sppUri}
    ...                                         force=${force}
    ...
    [Return]    ${body}

Get IC
    [Documentation]        Get IC
    [Arguments]     ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log to Console     ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log to Console     ${ic}

Get ICBAYNUMBER
    [Documentation]        Get ICBAYNUMBER
    [Arguments]     ${ICM_NAME}
    ${ic} =     Get IC          ${ICM_NAME}
    ${val}=    Fetch From Right    ${ic}    1
    Log to Console     ${val}
    [Return]    ${val}


Get LE
    [Documentation]        Get LE
    [Arguments]     ${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log to Console     ${resp}
    ${les} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${les}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${le} =     Get From List   ${les}    ${x}
    \   Exit For Loop If    '${le['name']}' == '${LE_name}'
    [Return]    ${le}
    Log to Console     ${le}

Get from LE
    [Documentation]        Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}

Create Logical Enclosure
    [Documentation]        Create Logical Enclosure
    [Arguments]     ${LE NAME}=${LE Name}   ${EG Name}=${EG Name}

    # Get enclosureGroupUri
    ${Response}=            Fusion Api Get Enclosure Groups     param=?filter="name=${EG NAME}"
    ${members}=             Get From Dictionary                 ${Response}     members
    ${member}=              Get From List                       ${members}      0
    ${enclosureGroupUri}=   Get From Dictionary                 ${member}       uri

    # Get enclosureUri
    ${Response}=        Fusion Api Get Enclosures
    ${members}=         Get From Dictionary     ${Response}     members
    ${member}=          Get From List           ${members}      0
    ${enclosureUri}=    Get From Dictionary     ${member}       uri
    ${enclosureUris}=   Create List             ${enclosureUri}

    # Build Payload
    ${LE Payload}=      Fusion API Create Logical Enclosure Payload     name=${LE Name}
    ...                 enclosureGroupUri=${enclosureGroupUri}
    ...                 enclosureUris=${enclosureUris}

    # Create Logical Enclosure
    ${Response}=        Fusion Api Create Logical Enclosure         body=${LE Payload}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate create Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure.

    [Return]    ${Response}

Get Enclosure Support Dump
    [Documentation]        Get Enclosure Support Dump
    [Arguments]                ${le}         ${file}
    # Get Logical Enclosure Id
    #${Response}=                Fusion Api Get Logical Enclosure
    #${members}=                 Get From Dictionary     ${Response}                 members
    #${member}=                  Get From List           ${members}                  0
    ${le}=      Get LE
    ${logicalEnclosureUri}=     Get from LE         ${le}       uri
    ${logicalEnclosureId}=      Fetch From Right        ${logicalEnclosureUri}      /

    # Build LE Support Dump Payload
    ${encrypt}=         Convert to Integer      1
    ${applianceDump}=   Convert to Integer      0
    ${LE SupportDump Payload}=                  Create Dictionary   errorCode=API-TEST      encrypt=${encrypt}
    #...                 includeApplianceDump=${applianceDump}

    # Create Enclosure Support Dump
    ${Response}=        Fusion Api Get Logical Enclosure Support Dump   body=${LE SupportDump Payload}
    ...                 id=${logicalEnclosureId}
    ${status_code}=     Get From Dictionary     ${Response}             status_code
    Should Be Equal as Strings                  ${status_code}          202
    ...                 msg=Failed to initiate Create Enclosure Support Dump.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure Support Dump.

    # Download Generated Support Dump file
    ${associatedResource}=      Get From Dictionary     ${task}                 associatedResource
    ${supportDumpUri}=          Get From Dictionary     ${associatedResource}   resourceUri

    ${Response}=        Fusion Api Download Support Dump            uri=${supportDumpUri}   localfile=${file}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      200
    ...                 msg=Failed to Download Enclosure Support Dump.

    [Return]    ${Response}

Delete Logical Enclosure
    [Documentation]        Delete Logical Enclosure
    ${Response}=        Fusion Api Delete Logical Enclosure         name=${LE Name}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate delete Logical Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to delete Logical Enclosure.

Verify Enclosure in Monitored State
    [Documentation]        Verify Enclosure in Monitored State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Monitored   msg=Enclosure ${ENC Serial Number} not in Monitored state.

Verify Enclosure in Configured State
    [Documentation]        Verify Enclosure in Configured State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Configured      msg=Enclosure ${ENC Serial Number} not in Configured state.

Wait For Task1
    [Documentation]        Wait For Task1
    #[Documentation]    Waits for a task to reach an end-state
    [Arguments]     ${resp} ${timeout}=60 s ${interval}=2 s
    #Log to console \n
    ${task} =   Wait Until Keyword Succeeds     ${timeout}  ${interval}   Task Reached Endstate1    ${resp}
    [Return]    ${task}


Task Reached Endstate1
    [Documentation]        Task Reached Endstate1
    [Arguments] ${resp}

    Set Log Level   TRACE
    #Should Contain ${resp} uri
    ${location} =       Get Variable Value      ${resp['location']}
    ${task_uri} =       Get Variable Value          ${location}
    #${task_uri} =      Get From Dictionary     ${resp} uri
    ${task} =           Fusion Api Get Task     uri=${task_uri}
    ${task_state} =     Get From Dictionary     ${task}     taskState
    ${task_category} =  Get From Dictionary     ${task}     category
    ${task_name} =      Get From Dictionary     ${task}     name
    ${resource} =       Get From Dictionary     ${task['associatedResource']}   resourceName
    ${resource_uri} =   Get From Dictionary     ${task['associatedResource']}   resourceUri
    Log to console and logfile      \t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
    Should Match Regexp ${task_state}   ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]    ${task}




Validate Activity
    [Documentation]        Validate Activity
    [Arguments]    ${Alert_List}            ${Expected_Alerts}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary      ${Alert}        uri
    \    ${alertState}     Get From Dictionary      ${Alert}        alertState
    \    ${alertTypeID}    Get From Dictionary      ${Alert}        alertTypeID
    \    ${description1}    Get From Dictionary     ${Alert}        description
    \    Run Keyword If     '${description1}' == '${Expected_Alerts}'       Exit For Loop
    \    ${description}    Get From Dictionary      ${Alert}        description
    \    ${uri}    Get From Dictionary      ${Alert}        uri

    #\   Run Keyword     Should Not Contain Match    '${description}'       '${Expected_Alerts}'        Continue For Loop
    \    Log to console and logfile             Activity exists
         [Return]    ${uri}
         Log to Console         ${uri}


Validate Activity Alerts
    [Documentation]        Validate Activity Alerts
    [Arguments]    ${Alert_List}        ${Expected_Alerts}

    :FOR    ${Alert}    IN    @{Alert_List}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

 Validate Activity Alerts1
    [Documentation]        Validate Activity Alerts1
    [Arguments]    ${Bay}    ${Expected_Alerts}
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*EnclosureManager\/${Bay}.*

    :FOR    ${Alert}    IN    @{Alert_List}

    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

ConnectOA_get_Firmversion
    [Documentation]        ConnectOA_get_Firmversion
    Open Connection      ${IP}
    ${output} = Login    Administrator    Admin
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 3    return_stderr=True    return_rc=True
    Log to Console         ${stdout}
    ${FirmwareICVersion}=    Get Lines Containing String    ${stdout}   Firmware Version:
    Log to Console             ${FirmwareICVersion}
    [Return]    ${FirmwareICVersion}


Close SSH Connection
    [Documentation]       Exits the current SSH session
    Close Connection

Fusion Api Get Activity Alerts
    [Documentation]       Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceUri
    \    ${alertState}    Get From Dictionary    ${Alert}    alertState
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}

    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    Log to Console         ${Alert_List}
    [Return]    ${Alert_List}