*** Settings ***
Documentation       Feature   test: Firmware update F1212  of  Hill Module
...                 on Enclosure G3,G2 G1
Variables           data_variables.py
Resource            ../../resources/resource.txt
Library             Collections
Library             String
Library             json
Library             OperatingSystem
Library             SSHLibrary
Library             Selenium2Library

*** Variables ***
${SSH_PASS}                 hpvse1
${DataFile}                 ./OVAData.xml
${APPLIANCE_IP}             15.212.136.128
${X-API-VERSION}            300
${li_1}                       SGH420HHYA-MLIG_B1
${li_2}                       SGH420HHYA-MLIG_B2
${ExpectedErrorMsg1}=       Activate operation is not allowed at this state. One or more interconnects may not have been baselined to this firmware or all interconnects are already activated/activating to this baseline
${IP}                      10.10.0.12
${ICM_NAME1}                         SGH420HHYA, interconnect 3
${ICM_NAME2}                         SGH420HHYA, interconnect 4
${ICM_NAME3}                         SGH420HHYA, interconnect 6
${ICM_NAME4}                         SGH420HHYA, interconnect 7
${ICM_NAME5}                         SGH420HHYA, interconnect 1
${ICM_NAME6}                         SGH420HHYA, interconnect 2
${BAY1}                              1
${IP}                           10.10.0.12

${ICM_NAME7}                         SGH420HHYA, interconnect 5
@{Multiple_LI_1}=   ${ICM_NAME1}
...                 ${ICM_NAME5}
...                 ${ICM_NAME4}

@{Alerts_1_Multiple_LI_1_vc_1} =     ${ICM_NAME5}

@{Alerts_2_Multiple_LI_1_fc_7_3} =     ${ICM_NAME4}
...                                    ${ICM_NAME1}

#======================

@{Multiple_LI_2}=   ${ICM_NAME6}
...                 ${ICM_NAME2}
...                 ${ICM_NAME3}


@{Alerts_1_Multiple_LI_2_vc_2} =     ${ICM_NAME6}

@{Alerts_2_Multiple_LI_2_fc_4_6} =     ${ICM_NAME2}
...                                    ${ICM_NAME3}

#====================
@{alert_vc_1_2}=     ${ICM_NAME5}
...                  ${ICM_NAME6}

@{alert_fc_3_4_6_7}=     ${ICM_NAME1}
...                      ${ICM_NAME2}
...                      ${ICM_NAME3}
...                      ${ICM_NAME4}


@{alrt_LIG_1_li_1}=

${Resource_Filter0}                 /rest/interconnects/cdc82817-ce2a-47fc-b95f-089ac370a1ce
${Resource_Filter1}                 /rest/interconnects/41a217ac-9171-4358-8847-ef8f78db9cb1
${Resource_Filter2}                 /rest/interconnects/22656cb3-4863-4262-a39e-66a7e9515a75
${Resource_Filter3}                 /rest/interconnects/d0afcca3-0d60-4ba9-bc52-404105b2774a
${Resource_Filter4}                 /rest/interconnects/d988e9b6-3ae8-4681-bb64-aa67d26f005f
${Resource_Filter5}                 /rest/interconnects/2fcaab8b-a849-4027-8dde-488f4eddbe7f
${Last_AlertID}            0
${Starting_AlertID}        1
${E-value}                       No update required. Selected firmware is already installed in the logical interconnect
${RR_BB}                         Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_st_succ}                 Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${RR_BB_act_suc}                 Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_act_str}                 Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert1}                    Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert2}                    Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert3}                    Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert4}                    Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect

${ICM_Alert1_stg_star}           Staging started for the interconnect
${ICM_Alert1_stg_str_end}        \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.01 v7.2.1_38 from baseline


${ICM_Alert1_stg_succ}           Staging success for the interconnect
${ICM_Alert1_stg_succ_end}       \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.01 v7.2.1_38 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
${ICM_Alert1_act_star_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.01 v7.2.1_38 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
${ICM_Alert1_act_succ_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert1_act_succ_end}      \  with firmware version 3.01 v7.2.1_38 from baseline

#1 4.40 2014-10-12T08:56:22Z    4.40 2014-10-12T08:56:22Z
${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline

${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline


#${ICM_Alert1_stg_star}           Staging started for the interconnect
${HICM_Alert1_stg_str_end}        \  with firmware version 3.01 v7.2.1_38 from baseline

#${ICM_Alert1_stg_succ}           Staging success for the interconnect
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.01 v7.2.1_38 from baseline

#${ICM_Alert1_act_star}          Activation started for the interconnect
${HICM_Alert1_act_star_end}      \  with firmware version 3.01 v7.2.1_38 from baseline

#${ICM_Alert1_act_succ}          Activation success for the interconnect
${HICM_Alert1_act_succ_end}      \  with firmware version 3.01 v7.2.1_38 from baseline

#1 4.40 2014-10-12T08:56:22Z(4.45 2015-07-20T23:55:25Z)    4.40 2014-10-12T08:56:22Z  (4.45 2015-07-20T23:55:25Z)
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline

#${HICM_Alert1_stg_star_3_end}    \  with firmware version 3.01 v7.2.1_38 from baseline
${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.45 2015-07-20T23:55:25Z from baseline



#5 4.45 2015-07-21T00:33:55Z


@{LE_N_Alerts}=    ${LE_N_Alert1}
...                ${LE_N_Alert2}

@{LI_alerts}=    ${ICM_Alert1}
...              ${ICM_Alert2}
...              ${ICM_Alert3}
...              ${ICM_Alert4}

@{LI_u_vc_names}=    ${ICM_NAME3}

@{LI_u_vc_names_Li_1}=    ${ICM_NAME3}

@{LI_u_vc_names_Li_2}=    ${ICM_NAME4}

@{LI_vc_names}=    ${ICM_NAME5}
...             ${ICM_NAME6}


@{LI_vc_names_li_1}=    ${ICM_NAME5}

@{LI_vc_names_li_2}=    ${ICM_NAME7}


@{LI_names}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME4}


@{LI_names_li_1}=    ${ICM_NAME1}

@{LI_names_li_2}=    ${ICM_NAME2}

@{LI_namesall}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME3}
...             ${ICM_NAME4}
...             ${ICM_NAME5}
...             ${ICM_NAME6}



${Resource_Filter}                  /rest/interconnects/c6790660-4112-45a5-9bcb-c31e9c02197e
${Last_AlertID}            0
${Starting_AlertID}        1

*** Test Cases ***

###############  Mutiple Lis Upgrade firmware  #######################

TC01 Verify the Firmware upgrade with multiple Lis with mix of Hill Utah Ocho Ethernet and initiate firmware update on all Lis
    [Documentation]       "3.1.2 F1212_TC_API_18:: Verify the Firmware upgrade with multiple Lis with mix of Hill, Utah Ocho , Ethernet and initiate firmware update on all Lis"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_18: : Verify the Firmware upgrade with multiple Lis with mix of Hill, Utah  Ocho , Ethernet and initiate firmware update on all Lis


    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${body} =   Build LI SPP body   ${Demo_upgrade_li_1_multi_lis_tests1_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    ${body} =   Build LI SPP body   ${Demo_upgrade_li_2_multi_lis_tests2_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds



    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete
#   Fusion Api Logout Appliance

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance


###############  Mutiple Lis Upgrade firmware test using three spps  #######################

TC02 Verify the Firmware update should be successful on both LIs to desired version when first LI be in version 3.0 and second LI be in version 3.9. Do a firmware update of both LIs to another version 4.45
    [Documentation]       "3.1.2 F1212_TC_API_34:Verify the Firmware update should be successful on both LIs to desired version when first LI be in version 3.0 and second LI be in version 3.9. Do a firmware update of both LIs to another version 4.45"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_34: : Verify the Firmware update should be successful on both LIs to desired version when first LI be in version 3.0 and second LI be in version 3.9. Do a firmware update of both LIs to another version 4.45


    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    # update with version 3.0
    ${body} =   Build LI SPP body   ${Demo_upgrade_li_1_multi_lis_tests1_lower_bb1}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


        Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete
#   Fusion Api Logout Appliance

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#   Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen




    # Update with version 3.01
    ${body} =   Build LI SPP body   ${Demo_upgrade_li_2_multi_lis_tests2_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete
#   Fusion Api Logout Appliance

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen




    #  third firmware version update with again 3.0

    ${body} =   Build LI SPP body   ${Demo_upgrade_li_1_multi_lis_tests1_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds



    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete
    Fusion Api Logout Appliance

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance


###############  Mutiple Lis Upgrade firmware test using two spps  #######################

TC03 One LI is in latest version and second LI is in lower version. Perform upgrade on second LI and ensure that second LI alone is upgraded successfully to the latest version
    [Documentation]    "3.1.2 F1212_TC_API_35::  One LI is in latest version and second LI is in lower version. Perform upgrade on second LI and ensure that second LI alone is upgraded successfully to the latest version"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_35: :  One LI is in latest version and second LI is in lower version. Perform upgrade on second LI and ensure that second LI alone is upgraded successfully to the latest version


    # Update with version 3.01
    ${body} =   Build LI SPP body   ${Demo_upgrade_li_2_multi_lis_tests2_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds



    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{LI_namesall}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete
#   Fusion Api Logout Appliance

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names_li_1}

    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    $H{ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names_li_1}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names_Li_1}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    #  third firmware version update with again 3.0

    ${body} =   Build LI SPP body   ${Demo_upgrade_li_1_multi_lis_tests1_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds

# verifyalerts
#   Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{LI_names_li_2}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{LI_vc_names_li_2}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{LI_u_vc_names_Li_1}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_2_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

   ###### Stage 3.0 on all LIs, again STAGE on ALL LIS with different version,perform activation on all lis  ##############

TC04 Perform staging of one version 3.0 in all LIs. Do staging of another version 3.6 in all LIs without activation. now Perform activation ,then check desired latest staged firmware version should get activated
    [Documentation]    "3.1.2 :  Perform staging of one version 3.0 in all LIs. Do staging of another version 3.6 in all LIs without activation. now Perform activation ,then check desired latest staged firmware version should get activated"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_08: :  Perform staging of one version 3.0 in all LIs. Do staging of another version 3.6 in all LIs without activation. now Perform activation ,then check desired latest staged firmware version should get activated

    #  staging for all first Li
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}
    ${body} =   Build LI SPP body   ${Demo_li_spp_upgrade1_test_stg_l}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      15s
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds

    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete


    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_1}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_1_vc_1}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
    \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_1_fc_7_3}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
    \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    #   Do staging for second LI for x version

    ${body} =   Build LI SPP body   ${Demo_li_spp_upgrade1_test_stg_2}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      15s
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds

    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete


    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_2}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_2_vc_2}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
    \    Log to Console    ${Al_stg_str}
    \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen

    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_2_fc_4_6}
    # ${finalstring}    Catenate    Hello    World
    \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_str}
    \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


    \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_stg_suc}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


# DO the activation for first li

    ${body} =   Build LI SPP body   ${Demo_li_spp_upgrade5_test_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    40 min      18s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_2}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API
    Log to Console  \nFirmware version verification  complete

#    ${Alert_List}=     Fusion Api Get Activity Alerts    ${Starting_AlertID}       ${Resource_Filter2}
#    Log to Console    ${Alert_List}
#    Log to Console    ${Alert_List}
    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_2_vc_2}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_2_fc_4_6}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


# Do activation on second LI

    ${body} =   Build LI SPP body   ${Demo_li_spp_upgrade5_test_higher}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    40 min      18s

    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_2}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}


#    ${Alert_List}=     Fusion Api Get Activity Alerts    ${Starting_AlertID}       ${Resource_Filter2}
#    Log to Console    ${Alert_List}
#    Log to Console    ${Alert_List}
    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_2_vc_2}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_2_fc_4_6}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen

    Fusion Api Logout Appliance

TC05
    [Documentation]    "3.1.2 F1212_TC_API_09:: Verify the behavior of one view when Perform staging of one version (without activation) on one LI. Then do staging and activation of another image on All Lis"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_09: : Verify the behavior of one view when Perform staging of one version (without activation) on one LI. Then do staging and activation of another image on All Lis

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    # Staging on One LI

    ${body} =   Build LI SPP body   ${Demo_li_Stagingon_oneLi}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      15s
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    # Staging on All LIs

    ${body} =   Build LI SPP body   ${Demo_li_Stagingon_allLi}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      15s
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


    ${body} =   Build LI SPP body   ${Demo_li_Stagingon_allLi}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      15s
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

   # Activation on all LIs

    ${body} =   Build LI SPP body   ${Demo_li_activate_on_one_higher_one}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_1}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    40 min      18s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_1}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_2_vc_2}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_2_fc_4_6}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



# Ativation second LI
    ${body} =   Build LI SPP body   ${Demo_li_activate_on_one_higher_two}
    Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li_2}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${body}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    45 min      18s

    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds


    Log to Console  Validate interconnect firmware version after firmwareupgrade is complete

    : FOR    ${BICM_NAME}    IN    @{Multiple_LI_2}

    \    ${ic} =     Get IC             ${BICM_NAME}
    \    Log to Console    ${BICM_NAME}
    \    ${ic_bay_number} =    Split String   ${BICM_NAME}   ","

    \    Log to Console    ${ic_bay_number}

    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    0
    \    Log to Console    ${ic_bay_number}


    \    ${ic_bay_number} =     Get From List    ${ic_bay_number}    25
    \    Log to Console    ${ic_bay_number}
    \    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    \    ${firmwareVersion_upgrade} =      fusion_api_c7k_interconnects    ${ic_bay_number}    ${IP}
    \    ${version}=    Should Contain    ${firmwareVersion}    ${firmwareVersion_upgrade}
    \    Should Be Equal As Strings    ${firmwareVersion}       ${firmwareVersion_upgrade}
    \    Log to Console    Validated the firmvare version
    \    Log to Console    ${BICM_NAME}
    \    ${icstate} =     Get From IC    ${ic}   state
    \    Should Be Equal As Strings    ${icstate}       Configured
    \    Log to Console    Validated the ICstate for
    \    Log to Console    ${BICM_NAME}
    Log to Console    Validated the Firmware version by compare with ICM and From API

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen
    : FOR    ${BICM_NAME}    IN    @{Alerts_1_Multiple_LI_2_vc_2}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_act_star_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_act_succ_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen


    : FOR    ${BICM_NAME}    IN    @{Alerts_2_Multiple_LI_2_fc_4_6}
    # ${finalstring}    Catenate    Hello    World
#   \    ${Al_stg_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_str}
#   \    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_str}   Expected Error Message Not seen


#   \    ${Al_stg_suc}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_star_1_end}
#   \    Log to Console    ${Al_stg_suc}
#   \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_stg_suc}   Expected Error Message Not seen


    \    ${Al_act_str}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_star}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_str}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_str}   Expected Error Message Not seen

    \    ${Al_act_succ}    Catenate    SEPARATOR= ${BICM_NAME}    ${ICM_Alert1_act_succ}    ${HICM_Alert1_stg_star_1_end}
    \    Log to Console    ${Al_act_succ}
    \    Run Keyword and Continue on Failure       Should Contain       '${alerts}'     ${Al_act_succ}  Expected Error Message Not seen



*** Keywords ***

Fusion Api Get Activity Alerts
    [Documentation]       Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceUri
    \    ${alertState}    Get From Dictionary    ${Alert}    alertState
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}

    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    Log to Console         ${Alert_List}
    [Return]    ${Alert_List}

Fusion Api Get Activity Alerts_new
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts

    [Return]    ${Response}


Validate Activity
    [Arguments]    ${Alert_List}            ${Expected_Alerts}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary      ${Alert}        uri
    \    ${alertState}     Get From Dictionary      ${Alert}        alertState
    \    ${alertTypeID}    Get From Dictionary      ${Alert}        alertTypeID
    \    ${description1}    Get From Dictionary     ${Alert}        description
    \    Log to Console    ${description1}
#    \    ${description2}    Get From Dictionary        ${Alert}        taskStatus
#   \    Run Keyword and Continue on Failure       Should Contain       '${Alert}'      ${description1}     Expected Error Message Not seen
    \    Run Keyword If     '${description1}' == '${Expected_Alerts}'       Exit For Loop
    \    ${description}    Get From Dictionary      ${Alert}        description
    \    ${uri}    Get From Dictionary      ${Alert}        uri

    \    Run Keyword     Should Not Contain Match    '${description}'       '${Expected_Alerts}'        Continue For Loop
    \    Log to console and logfile             Activity exists    '${description1}'
         [Return]    ${uri}
#        Log to Console         ${uri}

Open SSH to OA
    [Documentation]       Connect to Virtual Connect Interconnect via SSH
    #[Documentation]       Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]    ${IP}=${OA_CREDENTIAL_DATA['oaIpAddress']}   ${USERNAME}=${OA_CREDENTIAL_DATA['oaUsername']}    ${PASSWORD}=${OA_CREDENTIAL_DATA['oaPassword']}
    ...             ${PROMPT}=>    ${TIMEOUT}=${120}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection      ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 4    return_stderr=True    return_rc=True
    ${OAVersion}=    Get Lines Containing String    ${stdout}   Firmware Ver.
     ${OAVersion}=      Fetch From Right      ${OAVersion}   :
    Log to console and logfile    \n Open SSH Connection to Onboard Administrator ${IP} ....
    Log to console and logfile    OA Firmware Ver: ${OAVersion}
    Set Suite Metadata     OA Firmware Version    ${OAVersion}
    [Return]    ${Id}  ${OAVersion}

ConnectOA_get_Firmversion
    Open Connection      ${IP}
    ${output} = Login    Administrator    Admin
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 4    return_stderr=True    return_rc=True
    Log to Console         ${stdout}
    ${OAVersion}=    Get Lines Containing String    ${stdout}   Firmware Version:
    Log to Console             ${OAVersion}
    [Return]    ${OAVersion}


Close SSH Connection
    [Documentation]       Exits the current SSH session
    Close Connection

Build LI SPP body

    [Arguments]     ${li_spp}
    ${liedit} =     Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${ethernetActivationDelay} =              Get Variable Value  ${li_spp['ethernetActivationDelay']}
    ${ethernetActivationType} =              Get Variable Value  ${li_spp['ethernetActivationType']}
    ${fcActivationDelay} =              Get Variable Value  ${li_spp['fcActivationDelay']}
    ${fcActivationType} =              Get Variable Value  ${li_spp['fcActivationType']}
    ${force} =              Get Variable Value  ${li_spp['force']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}





#   ${body} =   Fusion Api Create LI spp Body   command=${command}
#   ...                                         ethernetActivationDelay=${ethernetActivationDelay}
#   ...                                         ethernetActivationType=${ethernetActivationType}
#   ...                                         fcActivationDelay=${fcActivationDelay}
#   ...                                         fcActivationType=${fcActivationType}
#   ...                                         force=${force}
#   ...                                         sppUri=${sppUri}
#   ...

    ${body} =   Fusion Api Create LI spp Body   sppUri=${sppUri}
    ...                                         command=${command}
    ...                                         force=${force}
    ...                                         ethernetActivationType=${ethernetActivationType}
    ...                                         ethernetActivationDelay=${ethernetActivationDelay}
    ...                                         fcActivationType=${fcActivationType}
    ...                                         fcActivationDelay=${fcActivationDelay}
    ...
    [Return]    ${body}

00 Appliance LogIn
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =  Get Variable Value    ${ethernet_networks1}
    Run Keyword If  ${ethernet_networks1} is not ${null}    Add Ethernet Networks from variable ${ethernet_networks1}

00 Create LIG, create enclosure group and import enclosure
    [Tags]  14
    ${body} =   Build LIG body      ${ligs['lig1']}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}     60s 2s
    Add Enclosure Group from variable       ${enc_group}
    Add Enclosures from variable   ${encs}

00 Create server profile and ping blade
    [Tags]  15
    Power off ALL servers
    ${profiles} =     Copy List     ${server_profiles}
    Add Server Profiles from variable   ${profiles}
    Power on server      SGH411DFYA, bay 6
    Log to console and logfile      Waiting 10 minutes for server to boot...
    Sleep   10min
    Wait For Appliance To Become Pingable   10.10.2.31






#Get IC
#   [Arguments]     ${ICM_NAME}
#    ${resp} =   fusion api get interconnect
#    Log to Console        ${resp}
#    ${ics} =     Get From Dictionary     ${resp}    members
#   ${l} =  Get Length  ${ics}
#   :FOR    ${x}    IN RANGE    0   ${l}
#    \   ${ic} =     Get From List   ${ics}    ${x}
#   \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
#   [Return]    ${ic}
#   Log to Console     ${ic}

Get LE
    [Arguments]     ${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log to Console     ${resp}
    ${les} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${les}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${le} =     Get From List   ${les}    ${x}
    \   Exit For Loop If    '${le['name']}' == '${LE_name}'
    [Return]    ${le}
    Log to Console     ${le}

Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}


APIC INVENTORY SYNC
    [Documentation]       issues a inventory synch at APIC
    [Arguments]        ${APIC_HOST}    ${APIC_USER}     ${APIC_PASS}
    Open Connection     ${APIC_HOST}     timeout=20s
    Login               ${APIC_USER}     ${APIC_PASS}
    Write    cd /aci/vm-networking/policies/vmware/vmm-domains/HPVC-WPST-DVS/controllers/10.10.3.74
    Read Until    admin@apic1:10.10.3.74>
    Write    moset inventory-trigger-state triggered
    Sleep       10secs
    Log to console and logfile          Triggering inventory re-synch at APIC nodes
    Write    moconfig commit
    Sleep       15secs
    Close All Connections
    Sleep       120secs

APIC LogIn and Validate FabricNodes
    [Arguments]     ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}       ${IPList}
    APIC INVENTORY SYNC             ${APIC_HOST}    ${APIC_USER}        ${APIC_PASS}
    Log to console      Wait time for APIC to reflect CRM changes
    ${token} =      Fusion Apic Api Login Appliance         ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}
    ${apic_ip} =    Get Variable Value  ${apic_ip}
    ${status} =         Fusion Apic Get fabricNodes         ${APIC_APPLIANCE_IP}        ${token}    ${IPList}
    run keyword if  '${status}'=='False'    Fail    'fabricNodes information did not match'

Edit LIG
    [Arguments]     ${lig}  ${li}   ${LLDPIP}   ${ltlv} ${rtlv}
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    Log to console and logfile    ${body}
    ${lig} =        Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =   Fusion Api Edit LIG body=${body}        uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    Perform an Update From Group    ${li}   120 min     1 min
    ValidateLI LLDP Ip Address  ${li}   ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV  ${li}   ${ltlv} ${rtlv}

ValidateLI LLDP Ip Address
    [Arguments]     ${li}   ${LLDPIP}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =   Fusion Api Get Li   ${li_uri}
    ${es} =     Get From Dictionary     ${resp} ethernetSettings
    ${ip} =     Get From Dictionary     ${es}   lldpIpv4Address
    ${status} = Should Be Equal ${ip}   ${LLDPIP}
    run keyword if  '${status}'=='False'    Fail    "LLDP Ip Address is not calculated in correct manner"

ValidateLI TaggedLLDP and RICH TLV
    [Arguments]     ${li}   ${ltlv} ${rtlv}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to Console     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${LLDPTLV} =    Get From Dictionary     ${es}   enableTaggedLldp
    ${RichTLV} =    Get From Dictionary     ${es}   enableRichTLV
    Should Be Equal As Strings  ${ltlv} ${LLDPTLV}
    Should Be Equal As Strings  ${rtlv} ${RichTLV}

Get IC
    [Arguments]     ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log to Console     ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log to Console     ${ic}

Validate Interconnects
    [Arguments]     ${ICM_NAME}     ${ltlv}     ${rtlv}     ${LLDPIP}
    Log to console and logfile    Validating Interconnects for LLDP and taggedTLV and RichTLV flags
    ${ic} =     Get IC      ${ICM_NAME}
    ${enableRichTLV} =          Get From IC    ${ic}   enableRichTLV
    ${enableTaggedLldp} =       Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =             Get from IC     ${ic}       lldpIpv4Address
    Should be Equal as Strings    ${enableRichTLV}      ${rtlv}
    Should be Equal as Strings    ${enableTaggedLldp}       ${ltlv}
    Should be Equal as Strings    ${lldpip}     ${LLDPIP}

Perform an Update From Group
    [Arguments]     ${li}=${LE}-${LIG1} ${timeout}=5 min    ${interval}=15s
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =       Fusion Api Update from group    ${li_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}

Edit LI
    [Arguments]     ${li}   ${li_set1}  ${LLDPIP}   ${ltlv}     ${rtlv}
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${body} =   Build LI body   ${li_set1}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =   Fusion Api Get Li   ${li_uri}
    Log to Console   ${resp}
    ${es} =     Get From Dictionary     ${resp} ethernetSettings
    ${uri} =    Get From Dictionary     ${es}       uri
    ${id} =     Get From Dictionary     ${es}       id
    Log to Console     ${id}
    Set to Dictionary   ${body} id  ${id}
    Log to Console   ${body}
    ${resp1} =  Fusion Api Update LI Ethernet Settings  body=${body}        uri=${li_uri}
    Log to Console   ${resp1}
    ${task} =   Wait For Task   ${resp1}    120s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response     ${task}     ${valDict}
    ValidateLI LLDP Ip Address  ${li}   ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV  ${li}   ${ltlv} ${rtlv}

Build LI body
    [Arguments]     ${liedit}
    ${liedit} =     Copy Dictionary ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableRichTLV} =           Get Variable Value  ${liedit['enableRichTLV']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}


    ${body} =   Fusion Api Create LI Settings Payload   type=${type}
    ...                                         enableRichTLV=${enableRichTLV}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...
    [Return]    ${body}

SSH to host and ping x
    [Documentation]       SSH's to a given host, then pings an IP from that host
    [Arguments]        ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}
    ${Output}=    Execute Command    ping -c 4 ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    ttl=
    Close All Connections

Add LIG from variable
    [Documentation]    Adds an LIG to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${ligx}
    Log to Console     Adding LIG ${ligx}
    ${ligx} =   Copy Dictionary ${ligs['${ligx}']}

    ${name} =                       Get Variable Value  ${ligx['name']}
    ${enclosureIndexes} =           Get Variable Value  ${ligx['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${ligx['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${ligx['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${ligx['fcoeSettings']}
    ${internalNetworkUris} =        Get Variable Value  ${ligx['internalNetworkUris']}
    ${interconnectBaySet} =         Get Variable Value  ${ligx['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${ligx['interconnectMapTemplate']}
    ${qosConfiguration} =           Get Variable Value  ${ligx['qosConfiguration']}
    ${redundancyType} =             Get Variable Value  ${ligx['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${ligx['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${ligx['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${ligx['snmpConfiguration']}
    ${uplinkSets} =                 Get Variable Value  ${ligx['uplinkSets']}
    #${uplinkSets} =    Copy List   ${ligx['uplinkSets']}
    ${l} =  Get Length  ${uplinkSets}


    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
    \   Run Keyword If  '${networkType}' == 'FibreChannel'  Continue For Loop
    #\  ${networkUris} =    Get FCoE Uris   ${networks}
    #\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    #\   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \   ${networkUris} =    Get Ethernet URIs   ${networks}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris     ${networkUris}
    \   ${nativeNetworkUri} =   Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri    ${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]} nativeNetworkUri     ${nativeNetworkUri}


    Log to Console   ${uplinkSets}
    ${body} =   Fusion Api Create LIG Payload   name=${name}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                         uplinkSets=${uplinkSets}

    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}     60s    2s
    ${liguri} =     Get From Dictionary ${task['associatedResource']}   resourceUri
    [Return]    ${resp}

#FTS
    #Set Log Level  DEBUG
    #Get VM IP   ${VM}
    #First Time Setup                   password=hpvse123

Test Specific Setup
    Set Log Level   TRACE
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =  Get Variable Value    ${ethernet_networks}
    Run Keyword If  ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable  ${ethernet_networks}
    #${ethernet_ranges} =   Get Variable Value  ${ethernet_ranges}
    #Run Keyword If ${ethernet_ranges} is not ${null}       Run Keyword for List    ${ethernet_ranges}  Create Ethernet Range
    #${fc_networks} =   Get Variable Value  ${fc_networks}
    #Run Keyword If ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    #${fcoe_networks} = Get Variable Value  ${fcoe_networks}
    #Run Keyword If ${fcoe_networks} is not ${null}    Add FCoE Networks from variable      ${fcoe_networks}
    #${licenses} =  Get Variable Value  ${licenses}
    #Run Keyword If ${licenses} is not ${null}      Add Licenses from variable      ${licenses}
    #Login all users     ${users}

Run FTS and test-specific setup
    Set Log Level   TRACE
    #FTS
    Test Specific Setup