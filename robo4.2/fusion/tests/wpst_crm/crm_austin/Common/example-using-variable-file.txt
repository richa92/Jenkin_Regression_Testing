*** Settings ***
Documentation     Low-level testcases for a script-generated python variable file
...               Below illustrates how to generate a variable file from a pre-configured OV appliance
...               = Usage =
...               cmdline: pybot -d ../logs  --timestampoutputs -t <target test case> <target test file>

Library               RoboGalaxyLibrary
Library               FusionLibrary
Library               ../lib/WPSTUtil.py

Variables             ../resources/defaults.py
Variables             ../resources/credentials_jason.py   vc-bvt-backup
Variables             ../resources/8kConfig.py

Resource              ../resources/keywords.txt

Suite Setup                     Suite Setup Tasks
Test Setup                      Test Setup Tasks

*** Variables ***
@{AllResourcesCommonList}   ethnets  fcnets  fcoenets  networkset  lig  encgrp  profiles  encs  servers

*** Test Cases ***
TC0--Clean OV
    CleanOV

TC1--Adding Ethernet Networks From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Log to console and logfile   \n-Adding Ethernet Networks
    :FOR   ${ethnet}   IN   @{ethnets}
    \                   ${resp} =       Fusion Api Create Ethernet Network   body=${ethnet}

TC2--Adding Network Sets From Variable File
    Set Log Level   TRACE
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Log to console and logfile   \n-Adding Network Sets
    :FOR   ${netset}   IN   @{networkset}
    \   ${uriList} =   Get Ethernet Uris By Name   ${netset['networkUris']}
    \   Set to dictionary   ${netset}   networkUris   ${uriList}
    \   ${resp} =   Run Keyword If   "${netset['nativeNetworkUri']}" is not "${null}"  Fusion Api Get Ethernet Networks   param=?filter="name=${netset['nativeNetworkUri']}"
    \   ${nativeNetworkUri} =   Run Keyword If   "${netset['nativeNetworkUri']}" is not "${null}"   Get From Dictionary   ${resp['members'][0]}   uri
    \   ...                     	ELSE   Set Variable   ${null}
    \   Set to dictionary   ${netset}   nativeNetworkUri   ${nativeNetworkUri}
    \   ${resp} =   Fusion Api Create Network Set   body=${netset}
 
TC3--Adding FC Networks From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Log to console and logfile   \n-Adding FC Networks
    :FOR   ${fcnet}   IN   @{fcnets}
    \                   ${resp} =       Fusion Api Create FC Network   body=${fcnet}

TC4--Adding FCoE Networks From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Log to console and logfile   \n-Adding FCoE Networks
    :FOR   ${fcoenet}   IN   @{fcoenets}
    \                   ${resp} =       Fusion Api Create FCoE Network   body=${fcoenet}

TC5--Create LIG From Variable File
    Set Log Level   TRACE
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    :FOR   ${oneLig}   IN   @{lig}
    \    Create Lig   ${oneLig}


#TC4--Rename Existing LIG to LIG_1
#    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
#    # get the name of existin lig
#    ${ligCopy} =        WPST Deep Copy   ${lig[0]}
#    ${ligName} =        Get Variable Value  ${ligCopy['name']}
#    # query ${name}
#    ${response} =       Fusion Api Get LIG              param=?filter="name=${ligName}"
#    ${resp} =           Get Variable Value              ${response['members'][0]}
#    ${lig_uri} =        Get From Dictionary             ${resp}   uri
#    # add suffix _1 to the original name
#    ${suffix} =    Set Variable   1
#    ${newLigName} =    Catenate   SEPARATOR=_    ${ligName}    ${suffix}
#    Set To Dictionary   ${resp}   name   ${newLigName}
#    ${resp} =       Fusion Api Edit LIG     ${resp}    uri=${lig_uri}
#    ${task} =   Wait for task   ${resp}   5min   3s
#    ${valDict} =    Create Dictionary       status_code=${200}
#    Validate Response   ${task}   ${valDict}
#
#TC5--Re-create LIG in TC3 From Variable File
#    Set Log Level   TRACE
#    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
#    ${ligCopy} =        WPST Deep Copy   ${lig[0]}
#
#    ${name} =                       Get Variable Value  ${ligCopy['name']}
#    ${fcoeSettings} =               Get Variable Value  ${ligCopy['fcoeSettings']}
#    ${interconnectMapTemplate} =    Get Variable Value  ${ligCopy['interconnectMapTemplate']}
#    ${telemetryConfiguration} =     Get Variable Value  ${ligCopy['telemetryConfiguration']}
#    ${snmpConfiguration} =          Get Variable Value  ${ligCopy['snmpConfiguration']}
#    ${uplinkSets} =                 Get Variable Value  ${ligCopy['uplinkSets']}
#    
#    ${uplinkSetsLength} =   Get Length   ${uplinkSets}
#    :FOR   ${i}   IN RANGE   0   ${uplinkSetsLength}
#    \   ${networkNames} =   Get From Dictionary   ${uplinkSets[${i}]}   networkUris
#    \   ${networkUris} =   Get Ethernet Uris By Name   ${networkNames}
#    \   Set To Dictionary   ${ligCopy['uplinkSets'][${i}]}   networkUris   ${networkUris}
#
#    ${body} =       Fusion Api Create LIG Payload   name=${name}
#    ...                                         fcoeSettings=${fcoeSettings}
#    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
#    ...                                         telemetryConfiguration=${telemetryConfiguration}
#    ...                                         snmpConfiguration=${snmpConfiguration}
#    ...                                         uplinkSets=${ligCopy['uplinkSets']}
#
#    Log to console and logfile    \n-Create LIG
#    ${resp} =    Fusion Api Create LIG   ${body}
#    ${task} =   Wait for task   ${resp}   5min   3s
#    ${valDict} =    Create Dictionary       status_code=${200}
#    Validate Response   ${task}   ${valDict}
#
TC6--Create Enclosure Group From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    :FOR   ${eg}   IN   @{encgrp}
    \   ${eg} =   Update Lig Uri From Enclosure Group Interconnect Bay Mappings   ${eg}
    \   Log To Console and logfile   \n-Create EG
    \   ${resp} =   Fusion Api Create Enclosure Group   ${eg}

TC7--Import Enclosure 1 From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    :FOR   ${enc}   IN   @{encs}
    \   Set To Dictionary   ${enc}   hostname   ${OA_CREDENTIAL_DATA['oaIpAddress']}
    \   Set To Dictionary   ${enc}   username   ${OA_CREDENTIAL_DATA['oaUsername']}
    \   Set To Dictionary   ${enc}   password   ${OA_CREDENTIAL_DATA['oaPassword']}
    \   ${encGroupUriName} =   Get From Dictionary   ${enc}   enclosureGroupUri
    \   ${encGroupUri} =   Get Enclosure Group Uri By Name   ${encGroupUriName}
    \   Set To Dictionary   ${enc}   enclosureGroupUri   ${encGroupUri}
    \   Log to console and logfile   \n-Add Enclosure
    \   ${resp} =   Fusion Api Add Enclosure   ${encs[0]}
    \   ${task} =   Wait For Task   ${resp}   20min   10s

TC8--Create Server Profile From Variable File
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    # Power Off All Servers
    Log To Console and logfile   \n-Create Server Profile
    :FOR   ${profile}   IN   @{profiles}
    \   ${profile} =   Update Connections From Profiles   ${profile}
    \   ${serverHardwareUri} =   Get Server Hardware Uri By Name   ${profile['serverHardwareUri']}
    \   Set To Dictionary   ${profile}   serverHardwareUri   ${serverHardwareUri}
    \   ${enclosureGroupUri} =   Get Enclosure Group Uri By Name   ${profile['enclosureGroupUri']}
    \   Set To Dictionary   ${profile}   enclosureGroupUri   ${enclosureGroupUri}
    \   ${enclosureUri} =   Get Enclosure Uri By Name   ${profile['enclosureUri']}
    \   Set To Dictionary   ${profile}   enclosureUri   ${enclosureUri}
    \   ${resp} =   Fusion Api Create Server Profile   body=${profile}
    \   Wait For Task    ${resp}   timeout=20 mins   interval=10s

#TC8--Power On All Servers In Variable File
#    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
#    :FOR   ${server}   IN   @{servers}
#    \                  Power On Server   ${server['name']}
##    Log to console and logfile    Waiting 10 minutes for servers to boot...
##    Sleep   10min

# NOTE: Just adding here a sample on how to generate a python variable file from a configured OV like the one used above
#TC99--Generate Variable File Off OneView Config
#    [Documentation]   This testcase (hardly a testcase) is just illustrate configuration of OV
#    Import Variables       ../resources/credentials_jason.py   vc-bvt-backup
#    Create Variable File   ../resources/sample_generate_variablestest.py
#    Import Variables       ../resources/sample_generate_variables.py
