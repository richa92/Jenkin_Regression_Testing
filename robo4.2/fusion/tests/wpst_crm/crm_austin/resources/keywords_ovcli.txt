*** Settings ***
Library           RoboGalaxyLibrary
Library           FusionLibrary
Library             BuiltIn
Library           ../lib/WPSTUtil.py

Variables                       ../resources/defaults.py
Variables                       ../resources/DTOtemplates.py

Resource                        ../resources/keywords.txt


*** Variables ***

*** Keywords ***
Add Ethernet Network
    [Arguments]    @{argList}
    ${template}=  Set Variable   ${DTO_ETHERNET_ADD}
    ${body}=    Replace Template        ${argList}   ${template}
    ${Response}=    Fusion Api Create Ethernet Network      body=${body}
    [Return]    ${Response}

Set Ethernet Network
    [Arguments]   ${lookupName}    @{args}
    Log to console and logfile    \t Set Ethernet Networks ${args}
    ${resp}  ${uri}=    Get Ethernet Network By Name    ${lookupName}
    :FOR   ${arg}   IN   @{args}
    \   ${key}=  Fetch From Left  ${arg}  =
    \   ${value}=  Fetch From Right  ${arg}  =
    \   Set To Dictionary   ${resp}   ${key}    ${value}
    ${Response}=     Fusion API Edit Ethernet Network    ${resp}   ${uri}
    [Return]    ${Response}

Set EG
    [Arguments]   ${lookupName}    @{args}
    [Documentation]   Syntax:  existing-EG-Name    name=new-EG-name
    keywords.Log to console and logfile    \t Set EG ${args}
    ${resp}  ${uri}=    Get Enclosure Group    ${lookupName}
    :FOR   ${arg}   IN   @{args}
    \   ${key}=  Fetch From Left  ${arg}  =
    \   ${value}=  Fetch From Right  ${arg}  =
    \   Set To Dictionary   ${resp}   ${key}    ${value}
    ${Response}=     Fusion API Edit Enclosure Group    ${resp}   ${uri}
    [Return]    ${Response}

Check OneView Version And Set Compatible LIG Name
    [Arguments]   ${currentLIGName}   ${path}   ${newLIGName}
    [Documentation]   Check OneView version and auto-correct LIG name to
conform with 3.0 naming convention.
    ...               Syntax: Check OneView Version And Set Compatible LIG
Name   currentLIGName   path   newLIGName
    ${OVAVersion}   ${OVXAPIVersion}   Get OneView Appliance And Api Versions
    ${concatenatedLIGName} =   Catenate   ${currentLIGName}_1
    ${response} =   Run Keyword If   ${OVAVersion} >= 300   Set LIG    ${concatenatedLIGName}   ROOT   name=${newLIGName}
    ...                         ELSE   Set LIG    ${currentLIGName}   ROOT   name=${newLIGName}
    ${task} =   Wait For Task and Fail On Error  ${response}

Set LIG
    [Arguments]   ${lookupName}   ${path}   @{args}
    [Documentation]   Syntax:  Set LIG   existing-LIG-Name   ROOT   name=new-LIG-name
    ...    It only works on top and secondary level attributes
    Log to console and logfile    \t Set LIG ${args}
    ${resp}  ${uri}=    Get Logical Interconnect Group    ${lookupName}
    :FOR   ${arg}   IN   @{args}
    \   ${key}=  Fetch From Left  ${arg}  =
    \   ${value}=  Fetch From Right  ${arg}  =
    \   ${value}=   Replace Boolean   ${value}
    \   Run Keyword If   '${path}'=='ROOT'   Set To Dictionary   ${resp}   ${key}    ${value}
    \     ...     ELSE    Set To Dictionary   ${resp['${path}']}   ${key}    ${value}
    ${Response}=     Fusion API Edit LIG     ${resp}   ${uri}
    [Return]    ${Response}

Replace Template
    [Arguments]     ${argList}   ${tDict}
    ${newDict}=  Copy Dictionary   ${tDict}
    :FOR  ${arg}   IN   @{argList}
    \   ${key}=  Fetch From Left  ${arg}  =
    \   ${value}=  Fetch From Right  ${arg}  =
    \   ${value}=  Replace Boolean   ${value}
    \   Set To Dictionary   ${newDict}   ${key}   ${value}
    [Return]     ${newDict}

Replace Boolean
    [Arguments]     ${value}
    Run Keyword If    '${value}' == 'True'   Return from keyword    ${True}
    ...   ELSE IF    '${value}' == 'False'    Return from keyword    ${False}
    ...   ELSE   Return from keyword    ${value}

Convert Args to Dictionary
    [Arguments]   @{args}
    ${argDict}=   Create Dictionary
    :FOR  ${arg}   IN   @{args}
    \   ${key}=  Fetch From Left  ${arg}  =
    \   ${value}=  Fetch From Right  ${arg}  =
    \   Set To Dictionary   ${argDict}   ${key}   ${value}
    [Return]    ${argDict}

########################################
#   Fusion API keywords
#   TODO: will reorganize these keywords
########################################

Get Logical Interconnect Group
    [Documentation]    Return a Logical Interconnect Group by Name
    [Arguments]    ${LIGName}
    ${LogicalInterconnectGroupCollection}    Fusion Api Get LIG    param=?filter="name=${LIGName}"
    ${Count}    Get From Dictionary    ${LogicalInterconnectGroupCollection}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find lig named ${LIGName}
    ${ligResp}=   Get Variable Value     ${LogicalInterconnectGroupCollection['members'][0]}
    ${ligUri}=   Get From Dictionary     ${ligResp}   uri
    [Return]   ${ligResp}  ${ligUri}

Get Enclosure Group
    [Documentation]    Get Enclosure Group by Name
    [Arguments]    ${EncGroupName}
    ${EnclosureGroupCollection}=    Fusion Api Get Enclosure Groups     param=?filter=name='${EncGroupName}'
    ${count}=    Get From Dictionary      ${EnclosureGroupCollection}    count
    Should not be Equal as Integers       ${count}      0                msg=Failed to find Enclosure ${EncGroupName}
    ${egResp}=   Get Variable Value     ${EnclosureGroupCollection['members'][0]}
    ${egUri}=   Get From Dictionary     ${egResp}   uri
    [Return]   ${egResp}  ${egUri}

Get Ethernet Network By Name
    [Documentation]    Returns a Network given a network Name
    [Arguments]    ${Name}
    ${Network}    Fusion Api Get Ethernet Networks    param=?filter="'name'='${Name}'"
    ${Count}    Get from Dictionary    ${Network}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find ethernet-network named ${Name}
    ${member0Resp}=   Get Variable Value     ${Network['members'][0]}
    ${member0Uri}=   Get From Dictionary     ${member0Resp}   uri
    [Return]   ${member0Resp}  ${member0Uri}
