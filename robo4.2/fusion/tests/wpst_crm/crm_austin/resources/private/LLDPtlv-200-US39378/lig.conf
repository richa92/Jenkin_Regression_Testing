# variable-keys mapping
# toplevel/members-level keys
membersKeys = ['ethernetSettings']

# ethernetSettings keys (format is <members key>Keys)
ethernetSettingsKeys = ['enableRichTLV', 'enableTaggedLldp', 'lldpIpv4Address', 'lldpIpv6Address']

# interconnectMapTemplates keys
interconnectMapTemplateKeys = []
# interconnectMapEntryTemplates keys
interconnectMapEntryTemplatesKeys = []

# telemetryConfigurations keys
telemetryConfigurationKeys = []

# snmpConfigurations keys
snmpConfigurationKeys = []

# uplinkSet keys
uplinkSetsKeys = []


# qosConfiguration keys
qosConfigurationKeys = []

# activeQosConfig keys
activeQosConfigKeys = []
# qosTrafficClassifiers keys
qosTrafficClassifiersKeys = []
# qosClassificationMapping keys
qosClassificationMappingKeys = []
# qosTrafficClass keys
qosTrafficClassKeys = []

# inactiveFCoEQosConfig keys
# NOTE: This maybe inaccurate as I still need to see a config of this...
inactiveFCoEQosConfigKeys = []

#inactiveNonFCoEQosConfig keys
inactiveNonFCoEQosConfigKeys = []


# logicalPortConfigInfos keys
logicalPortConfigInfosKeys = []
logicalLocationDict = {}

# primaryPort key dictionary defining subkeys to parse
#primaryPortDict = {'locationEntries': ['relativeValue', 'type']}
primaryPortDict = {}

# members dictionary defining key-to-variable(above) mapping
membersDict = {
    'ethernetSettings': ethernetSettingsKeys,
    'ethernetSettings_type': 'dictionary',
    'interconnectMapTemplate': interconnectMapTemplateKeys,
#    'interconnectMapTemplate_type': 'modDictListOfDict',
    'interconnectMapTemplate_type': 'dictionary',
    'interconnectMapEntryTemplates': interconnectMapEntryTemplatesKeys,
    'interconnectMapEntryTemplates_type': 'listOfDict',
    'telemetryConfiguration': telemetryConfigurationKeys,
    'telemetryConfiguration_type': 'dictionary',
    'snmpConfiguration': snmpConfigurationKeys,
    'snmpConfiguration_type': 'dictionary',
    'uplinkSets': uplinkSetsKeys,
    'uplinkSets_type': 'listOfDict',
    'logicalPortConfigInfos': logicalPortConfigInfosKeys,
    'logicalPortConfigInfos_type': 'listOfDict',
#    'logicalLocation': logicalLocationDict,
#    'logicalLocation_type': 'listOfDict',
    'primaryPort': primaryPortDict,
#    'primaryPort_type': 'modListOfDict',
    'qosConfiguration': qosConfigurationKeys,
    'qosConfiguration_type': 'dictOfDict',
    'activeQosConfig': activeQosConfigKeys,
    'activeQosConfig_type': 'dictOfDict',
    'inactiveFCoEQosConfig': inactiveFCoEQosConfigKeys,
    'inactiveFCoEQosConfig_type': 'dictOfDict',
    'inactiveNonFCoEQosConfig': inactiveNonFCoEQosConfigKeys,
    'inactiveNonFCoEQosConfig_type': 'dictOfDict',
    'qosTrafficClassifiers': qosTrafficClassifiersKeys,
    'qosTrafficClassifiers_type': 'listOfDict'
}

# custom data type definition
dataTypeToSym = {
    'dictionary_begin': '{',
    'dictionary_end': '}',
    'list_begin': '[',
    'list_end': ']',
    'listOfDict_begin': '[',
    'listOfDict_end': ']',
    'dictListOfDict_begin': '{',
    'dictListOfDict_end': '}',
    'modDictListOfDict_begin': '[',
    'modDictListOfDict_end': ']',
    'modListOfDict_begin': '[',
    'modListOfDict_end': ']',
    'dictOfDict_begin': '{',
    'dictOfDict_end': '}',
}

# custom key definition (original key-to-custom key mapping)
#customDict = {
#    'permittedInterconnectTypeUri': 'type',
#    'relativeValue': 'value',
#    'bay': 'translate'
#}
#customDict = {
#    'permittedInterconnectTypeUri': 'type',
#    'type': 'key',
#    'relativeValue': 'value',
#    'desiredSpeed': 'desiredSpeed',
#    'bay': 'translate'
#}
customDict = {}
