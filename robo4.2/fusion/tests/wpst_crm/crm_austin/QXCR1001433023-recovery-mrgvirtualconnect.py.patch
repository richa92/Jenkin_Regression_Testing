diff --git a/tests/wpst_crm/crm_austin/lib/mrgvirtualconnect.py b/tests/wpst_crm/crm_austin/lib/mrgvirtualconnect.py
index c237638..d5a24e7 100644
--- a/tests/wpst_crm/crm_austin/lib/mrgvirtualconnect.py
+++ b/tests/wpst_crm/crm_austin/lib/mrgvirtualconnect.py
@@ -46,6 +46,34 @@ class VirtualConnect():
             self._log.error(self._msg)
             raise Exception(self._msg, e)
 
+    def _vcmOAConnectionRecovery(self, sleepSec=120):
+        """
+        This is to workaround the defect QXCR1001433023: OV 1.20.06-0207034 VCM Domain config NOT destroyed when moving to OneView
+        """
+        import pexpect
+        child=pexpect.spawn('ssh %s@%s' % (self._vc_credentials['vcmUsername'], self._vc_credentials['vcmIpAddress']))
+        child.expect('Password: ')
+        child.sendline('%s' % self._vc_credentials['vcmPassword'])
+        indexMatched=child.expect(['OA User Name  : ','->', pexpect.EOF, pexpect.TIMEOUT])
+        if indexMatched == 0:
+            logger.info("Recovering from vcDomainConfigOVBug(QXCR1001433023), please wait...")
+            child.sendline('%s' % self._oa_credentials['oaUsername'])
+            child.expect('OA Password   : ')
+            child.sendline('%s' % self._oa_credentials['oaPassword'])
+            time.sleep(180)
+            self.delete_domain()
+            time.sleep(sleepSec)
+            logger.info("Recovering from vcDomainConfigOVBug(QXCR1001433023) complete.")
+            return True
+        elif indexMatched == 1:
+            logger.info("Recovery from vcDomainConfigOVBug(QXCR1001433023) is not needed.")
+        elif indexMatched == 2:
+            logger.info("pexpect.exceptions.EOF was reached. Unable to identify if recovery from vcDomainConfigOVBug(QXCR1001433023) is needed.")
+        elif indexMatched == 3:
+            logger.info("pexpect.exceptions.TIMEOUT was reached. Unable to identify if recovery from vcDomainConfigOVBug(QXCR1001433023) is needed.")
+        return False
+
+
     @classmethod
     def sleep(cls):
         if cls.simulator:
@@ -55,14 +83,17 @@ class VirtualConnect():
         fileName = 'config.txt'
         self._vc.get_config(fileName)
 
-    def config_virtual_connect(self, config, import_domain, verbose, doubleDense):
+    def config_virtual_connect(self, config, import_domain, verbose, doubleDense, vcDomainConfigOVBug):
         self._logger._log_to_console_and_log_file("Configuring VC please wait...")
         try:
             if self._sim == 'True':
-                self._logger._log_to_console_and_log_file("Configuring VC Simulator please wait...")
+                self._logger._log_to_console_and_log_file("Configuring VC Simulator, please wait...")
                 self._vc.config_vc(config, self._oa_credentials)
             else:
-                self._logger._log_to_console_and_log_file("Configuring VC Real please wait...")
+                if vcDomainConfigOVBug is True:
+                    logger.info("Checking if recovery from vcDomainConfigOVBug(QXCR1001433023) is required, please wait...")
+                    self._vcmOAConnectionRecovery()
+                self._logger._log_to_console_and_log_file("Configuring VC Real, please wait...")
                 self._vc.config_vc(config, self._oa_credentials, import_domain, verbose, doubleDense)
         except Exception as e:
             msg = "Unable to configure VC"
