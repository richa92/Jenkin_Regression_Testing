*** Settings ***
Documentation		configures my dev enclosure 
...
...		
#Variables 		    C:\\rg-fusion\\fusion\\tests\\wpst_crm\\ci_fit\\config\\I13\\data_variables.py
Variables 		    data_variables.py
#Suite Setup   		VM setup and FTS       ${VM}
#Suite Teardown		Suite Teardown

Resource			resource.txt   


*** Test Cases ***
Setup
	Set Log Level	TRACE
	Sample
	#Test Specific Setup
	
*** Keywords ***
Sample
	Set Log Level	TRACE
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
    Add Ethernet Networks from ROBOT
    Add Users from XML  ${DATAFILE}
    Add Ethernet Networks from variable     ${ethernet_networks}
    Add Ethernet Networks from JSON     ${JSON}
    ${resp} =   fusion api get ethernet networks    param=?filter="'name'=='PYTHON-Tagged'"

Add Ethernet Networks from ROBOT
	[Documentation]
	Log to console and logfile  	Adding ETHERNET NETWORKS from ROBOT
    ${vlanId}		Convert To Integer	2000
 	${body} 		Create Dictionary	name=ROBOT-Tagged
 	...                                 type=ethernet-networkV3
	...									vlanId=${vlanId}
    ...									purpose=General
    ...									smartLink=${true}
    ...									privateNetwork=${false}
    ...                                 ethernetNetworkType=Tagged
	${resp} =   Fusion Api Create Ethernet Network		body=${body}
	${task} =	Wait For Task	${resp} 	10s     1s


Add Users from XML
	[Documentation]	Waits for a task to reach an end-state
	[Arguments]		${DATAFILE}
	Log to console and logfile  	Adding USERS from XML
	${users} = 	Get XML elements by XPATH	${DATAFILE}		users/user
	:FOR	${user}	IN	@{users}
	\		${resp} = 	Fusion Api Add User		body=${user.attrib}

Add Ethernet Networks from variable
	[Documentation]	Adds Ethernet networks to an appliance from a variable which contains a list of dicts with the entire payload
	[Arguments]		${networks}
	Log to console and logfile  	Adding ETHERNET NETWORKS from VARIABLE
	:FOR	${net}	IN	@{networks}
	\		${resp} = 	Fusion Api Create Ethernet Network		body=${net}
	\       ${task} =	Wait For Task	${resp} 	10s     1s

Add Ethernet Networks from JSON
    [Arguments]    ${filename}
	Log to console and logfile  	Adding ETHERNET NETWORKS from JSON

    ${output}=    OperatingSystem.Get File    ${filename}
    ${JSON}=    Evaluate    json.loads('''${output}''')    json
    Log    ${JSON}
    Set Suite Variable    ${JSON}    ${JSON}
	${resp} = 	Fusion Api Create Ethernet Network		body=${JSON}
	${task} =	Wait For Task	${resp} 	10s     1s

Get XML elements by XPATH
    [Documentation]	Returns XML elements matching XPATH
    ...	Usage: Get XML by XPATH	| <xml>	| <xpath>
    ...	<xml> can be an xml file, object or string
	...	${nets} = 	Get XML by XPATH	${xml}		fcnetworks/fcnetwork
	...	${nets} = 	Get XML by XPATH	${xml}		fcnetworks/fcnetwork[@name="fc-network-100"]
	[Arguments]	${xml}	${xpath}
	${elements} = 	Get Elements	${xml}	xpath=${xpath}
	[Return]	${elements}


Test Specific Setup
	Set Log Level	TRACE
	Log to console and logfile	[TEST-SPECIFIC SETUP]	
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}
	Run Keyword If	${users} is not ${null}	Add Users from variable				${users}
	Run Keyword If	${ethernet_networks} is not ${null}	Add Ethernet Networks from variable	${ethernet_networks}
	Run Keyword If	${ethernet_ranges} is not ${null}	Run Keyword for List	${ethernet_ranges}	Create Ethernet Range
	Run Keyword If	${network_sets} is not ${null}	Add Network Sets from variable		${network_sets}
	Run Keyword If	${fc_networks} is not ${null}	Add FC Networks from variable		${fc_networks}	
	Run Keyword If	${network_set_ranges} is not ${null}	Run Keyword for List	${network_set_ranges}	Create Network Set Range
	Create LIG, create enclosure group and then import enclosure
	${pools} = 	Create List		/rest/id-pools/vmac	/rest/id-pools/vwwn	/rest/id-pools/vsn
	Run Keyword for List	${pools}	Disable ALL Generated ID Ranges
	Run Keyword If	${ranges} is not ${null}	Add Ranges From variable	${ranges}
	Run Keyword If	${server_profiles} is not ${null}	Add Server Profiles from variable	${server_profiles}
	
	#Create and download support dump
	#${resp} = 	Fusion Api Download Support Dump	uri=/rest/appliance/support-dumps/Jenkins-HPOneView16118.rsn.hp.com-CI-2014_11_21-21_30_31.721789.sdmp	localfile=c:\\ChrisMeyersupport.sdmp

	
Create and download support dump
	Set Log Level	TRACE
	Log to console and logfile	[Create and Download Support Dump]	
	${body} = 	Create Dictionary	encrypt=${false}	errorCode=CI
	${resp} = 	Fusion Api Create Support Dump	${body}
	${uri} = 	Get From Dictionary	${resp}	uri
	${resp} = 	Fusion Api Download Support Dump	uri=${uri}	localfile=c:\\support2.sdmp
	
		
Create LIG, create enclosure group and then import enclosure
	Set Log Level 	TRACE
	${lig} = 	Copy Dictionary	${ligs['lig1']}
	${uplinkSets} = 	Copy List	${lig['uplinkSets']}
	${l} = 	Get Length	${uplinkSets}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris	
	\ 	Run Keyword If 	'${networkType}' == 'Ethernet'		Continue For Loop
	\	${networkUris} = 	Get FC Uris	${networks}	
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	${networkUris}			
	
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris	
	\ 	Run Keyword If 	'${networkType}' == 'FibreChannel'	Continue For Loop
	\	${networkUris} = 	Get Ethernet Uris	${networks}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	${networkUris}			
		
	${body} = 	Fusion Api Create LIG Payload	name=${lig['name']}
	...											interconnectMapTemplate=${lig['interconnectMapTemplate']}
	...											uplinkSets=${uplinkSets}
	Log to console and logfile	\n-Create LIG
	${resp} = 	Fusion Api Create LIG	${body}
	${task} =	Wait For Task	${resp} 	60s	2s
	${liguri} = 	Get From Dictionary	${task['associatedResource']}	resourceUri
		
	# Update logicalInterconnectGroupUri in ${enc_group}
	${l} = 	Get Length	${enc_group['interconnectBayMappings']}
	:FOR 	${x}	IN RANGE	0	${l}
	\	Set to dictionary	${enc_group['interconnectBayMappings'][${x}]}	logicalInterconnectGroupUri		${liguri}	

	${resp} =	Fusion Api Create Enclosure Group	${enc_group}
	${eguri} = 		Get From Dictionary	${resp}	uri	

	Set to Dictionary	${enc}	enclosureGroupUri	${eguri}	
	${resp} = 	Fusion Api Add Enclosure	${enc}
	${task} =	Wait For Task	${resp} 	6min	10s

Create Network Set range
	[Arguments]	${range}
	Set Log Level	TRACE
	Log to console and logfile  	Adding NETWORK SET RANGES	
	${body} = 	Copy Dictionary	${range}
	Remove From Dictionary	${body}	prefix	suffix	start	end
	${netlist} = 	Create List
	:FOR	${x}	IN RANGE	${range['start']}	${range['end']}+1
	\	Append To List	${netlist}	${range['prefix']}${x}${range['suffix']}
	${networkUris} = 	Get Ethernet URIs	${netlist}
	Set To Dictionary 	${body}	networkUris	${networkUris}
	
	# need to handle naative nets!
	${nativeNetworkUri} = 	Run Keyword If 	'${range['nativeNetworkUri']}' is not ${null}		Get Ethernet URI	${range['nativeNetworkUri']}
	Set To Dictionary 	${body}	nativeNetworkUri	${nativeNetworkUri}
	
	
	
	${resp} = 	Fusion Api Create Network Set		body=${body}
	[Return]	${resp}

Create Ethernet range
	[Arguments]	${range}
	Set Log Level	TRACE
	Log to console and logfile  	Adding ETHERNET NETWORK RANGES
	${body} = 	Copy Dictionary	${range}
	Remove From Dictionary	${body}	prefix	suffix	start	end
	
	:FOR	${x}	IN RANGE	${range['start']}	${range['end']}+1
	\	Set To Dictionary 	${body}	name	${range['prefix']}${x}${range['suffix']}
	\	Set To Dictionary 	${body}	vlanId	${x}	
	\	${resp} = 	Fusion Api Create Ethernet Network	body=${body}
	
VM setup and FTS
	[Arguments]		${VM}
	#VM setup		${VM}
	Fusion Api Login Appliance 		${APPLIANCE_IP}		${admin_credentials}

	First Time Setup	password=hpvse123
	
VM setup
	[Arguments]		${VM}
	Set Log Level	TRACE
	Log to console and logfile	[VM SETUP]
	${resp} = 	Connect to VI Server	${vcenter['server']}	${vcenter['user']}	${vcenter['password']}	
	Create VM Snapshot	${VM}	oob-snapshot	True	True
	Power On VM 	${VM}
	Sleep	2 min
	${IPS} = 	Get VM IPv4 Addresses	${VM}
	${APPLIANCE_IP} = 	Get From List	${IPS}	0
    Set Suite Variable		${APPLIANCE_IP}	${APPLIANCE_IP}
	