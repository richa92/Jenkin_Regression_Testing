*** Settings ***
Documentation
...     This Test Suite uses Administrator credentials to create Server Profiles with Managed Volumes.
...     Test Data is defined in Python Data Variable file.
...     TAGS:                      SERVER
Resource                        ../../../../Resources/api/fusion_api_resource.txt
Variables                       ./data_variables_bfs.py

*** Variables ***
${APPLIANCE_IP}                 10.10.3.80

*** Keywords ***
Wait For Server To Become Pingable
	[Documentation]	Waits for an appliance to become pingable
	[Arguments]		${appliance}	${timeout}=1 min	${interval}=5 s
	Log to console and logfile 		Pinging: ${appliance} ...
	Wait Until Keyword Succeeds		${timeout}	${interval}	Server is pingable 	${appliance}	

Server is pingable 
	[Arguments]		${appliance}
	Set Log Level	TRACE
	Run keyword if	os.name == "nt"	Windows ping	${appliance}
	...	ELSE	Unix ping	${appliance}
	
Windows ping
	[Arguments]		${host}
    ${Output}=    Run    ping -n 4 ${host}
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    TTL=
	[Return]	${Output}

*** Test Cases ***
Login
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
     
Creating Ethernet networks
 	Add Ethernet Networks from variable    ${ethernet_networks}
 	Verify Resources for List		   ${expected_ethernet_networks}  
 Creating FC networks	
 	Add FC Networks from variable     ${fc_networks}
 	Verify Resources for List		   ${expected_fc_networks}
Creating FCoE networks	
	Add FCoE Networks from variable    ${fcoe_networks}
	Verify Resources for List		   ${expected_fcoe_networks}	
Changing bandwidth for Ethernet networks
	Set Suite Variable		${net1_name}	            eth_100	
	Set Suite Variable		${type}	                ethernet
    Set Suite Variable 		${max_bw}				${20000}
    Set Suite Variable 		${typ_bw}				${10000}
    Set Suite Variable 		${TRUE}				    True 
    ${bw}		Create Dictionary	    maximumBandwidth=${max_bw}    									
    ...								    typicalBandwidth=${typ_bw}    
    ${conn1}    Create Dictionary       name=${net1_name}
    ...                                 type=${type}
    ...                                 bandwidth=${bw}    
    ${bandwidth_dict}       Create List         ${conn1} 
    Modify ConnectionTemplateURI    	${bandwidth_dict}   	${TRUE}  
Changing bandwidth for FC networks
	Set Suite Variable		${net1_name}	            FC_A
	Set Suite Variable		${net2_name}	            FC_B
	Set Suite Variable		${type}	                fc
    Set Suite Variable 		${max_bw}				${8000}
    Set Suite Variable 		${typ_bw}				${8000}
    Set Suite Variable 		${TRUE}				    True 
    ${bw}		Create Dictionary	    maximumBandwidth=${max_bw}    									
    ...								    typicalBandwidth=${typ_bw}    
    ${conn1}    Create Dictionary       name=${net1_name}
    ...                                 type=${type}
    ...                                 bandwidth=${bw}
    ${conn2}    Create Dictionary       name=${net2_name}
    ...                                 type=${type}
    ...                                 bandwidth=${bw}
    ${bandwidth_dict}       Create List         ${conn1}     
	...										    ${conn2}
    Modify ConnectionTemplateURI    	${bandwidth_dict}   	${TRUE}	    
Changing bandwidth for FCoE networks
	Set Suite Variable		${net1_name}	            FCoE_A201
	Set Suite Variable		${net2_name}	            FCoE_B200
	Set Suite Variable		${type}	                fcoe
    Set Suite Variable 		${max_bw}				${20000}
    Set Suite Variable 		${typ_bw}				${10000}
    Set Suite Variable 		${TRUE}				    True 
    ${bw}		Create Dictionary	    maximumBandwidth=${max_bw}    									
    ...								    typicalBandwidth=${typ_bw}    
    ${conn1}    Create Dictionary       name=${net1_name}
    ...                                 type=${type}
    ...                                 bandwidth=${bw}
    ${conn2}    Create Dictionary       name=${net2_name}
    ...                                 type=${type}
    ...                                 bandwidth=${bw}
    ${bandwidth_dict}       Create List         ${conn1}     
	...										    ${conn2}
    Modify ConnectionTemplateURI    	${bandwidth_dict}   	${TRUE}				
Creating LIG    
    Set Suite Variable 		${TRUE}				    True 
    Add LIG from variable       ${ligs}       
    
Creating EG
	${responses}=  Add Enclosure Group from variable      ${enc_groups} 
	Wait For Task2    ${responses}    timeout=300    interval=15 
	 
Adding Storage Systems,Pool & Volume
	Add Storage System     ${storage_systems}
	Sleep    10s	
	Edit Storage System    ${storage_systems}
	Verify Resources for List		   ${expected_storage_systems}   
	Edit Storage Pool       ${storage_pool}	
	Add Existing Storage Volumes Async     ${storage_volumes}	
	
Creating LE
	Add Logical Enclosure from variable     ${logical_enclosure}
	Verify Resource      ${expected_logical_enclosure}
	  	    
Add Server Profile having Managed Volumes with Primary and Secondary Connections,UEFI mode    
   Log to console and logfile    Powering off the server ${\n}${server_profiles[0]['serverHardwareUri']} 
   Power off Server    ${server_profiles[0]['serverHardwareUri']} 
   ${responses}=  Add Server Profile    ${server_profiles[0]}
   Wait For Task2    ${responses}    timeout=3000    interval=15
   Run Keyword If    ${expected_server_profiles} is not ${null}     Verify Resource     ${expected_server_profiles[0]}   
   Power on server     ${server_profiles[0]['serverHardwareUri']} 
   Sleep    120s
   Wait For Server To Become Pingable     10.10.3.84     3000     3  
   
Edit Server Profile to add extra Private and Shared volume 
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[0]['serverHardwareUri']} 
    Power off Server    ${edit_server_profiles[0]['serverHardwareUri']}   
    ${responses}=  Edit Server Profile    ${edit_server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_edit_server_profiles} is not ${null}     Verify Resource     ${expected_edit_server_profiles[0]}
    Power on server     ${edit_server_profiles[0]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3     
 
Edit Server Profile to remove extra Private volume
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[1]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[1]['serverHardwareUri']}  
	${responses}=  Edit Server Profile    ${edit_server_profiles[1]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_edit_server_profiles} is not ${null}     Verify Resource     ${expected_edit_server_profiles[1]}
 	Power on server     ${edit_server_profiles[1]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3 
   
Edit Server Profile to remove Secondary connection
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[2]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[2]['serverHardwareUri']}  
 	${responses}=  Edit Server Profile    ${edit_server_profiles[2]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${edit_server_profiles[2]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3 
 
Edit Server Profile to Change Primary to Secondary connection-Should Fail
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[3]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[3]['serverHardwareUri']}  
 	${responses}=  Edit Server Profile    ${edit_server_profiles[3]}
    Wait For Task    ${responses}    timeout=3000    interval=15     
    ${taskuri}=   Get From Dictionary    ${responses}    uri
    ${resp}=    Get resource by URI  ${taskuri}
    ${errmsg}=    Get From Dictionary		${resp['taskErrors'][0]}    message
    Should Be Equal    ${errmsg}     Secondary boot connection is not valid.
           
Edit Server Profile to Change Connection name
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[4]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[4]['serverHardwareUri']}   
 	${responses}=  Edit Server Profile    ${edit_server_profiles[4]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_edit_server_profiles} is not ${null}     Verify Resource     ${expected_edit_server_profiles[2]}
    Power on server     ${edit_server_profiles[4]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3 
    
Edit Server Profile to Boot Volume
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[5]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[5]['serverHardwareUri']}  
 	${responses}=  Edit Server Profile    ${edit_server_profiles[5]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_edit_server_profiles} is not ${null}     Verify Resource     ${expected_edit_server_profiles[3]}
    Power on server     ${edit_server_profiles[5]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3   
       
Deleting the Server Profile 
	Log to console and logfile    ${\n}Powering off the server ${edit_server_profiles[5]['serverHardwareUri']} 
	Power off Server    ${edit_server_profiles[5]['serverHardwareUri']} 
 	${responses}=  Remove Server Profile    ${edit_server_profiles[5]}
 	Wait For Task2    ${responses}    timeout=1000    interval=15
 
Create ServerProfile with Managed Volumes booting in UEFI Optimized mode
 	Log to console and logfile    ${\n}Powering off the server ${server_profiles[1]['serverHardwareUri']} 
 	Power off Server    ${server_profiles[1]['serverHardwareUri']} 
    ${responses}=  Add Server Profile    ${server_profiles[1]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_server_profiles} is not ${null}     Verify Resource     ${expected_server_profiles[1]}
    Power on server     ${server_profiles[1]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3 
    Log to console and logfile    ${\n}Powering off the server ${server_profiles[1]['serverHardwareUri']} 
    Power off Server    ${server_profiles[1]['serverHardwareUri']}
    Set Suite Variable 		${TRUE}				    True
    ${responses}=  Remove Server Profile    ${server_profiles[1]}    ${TRUE}
    Wait For Task2    ${responses}    timeout=1000    interval=15
 	  
Create ServerProfile with Managed Volumes booting in Legacy mode
	Log to console and logfile    ${\n}Powering off the server ${server_profiles[2]['serverHardwareUri']} 
 	Power off Server    ${server_profiles[2]['serverHardwareUri']} 
    ${responses}=  Add Server Profile    ${server_profiles[2]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_server_profiles} is not ${null}     Verify Resource     ${expected_server_profiles[2]}
    Power on server     ${server_profiles[2]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3
    Log to console and logfile    ${\n}Powering off the server ${server_profiles[2]['serverHardwareUri']}  
    Power off Server    ${server_profiles[2]['serverHardwareUri']}
    ${responses}=  Remove Server Profile    ${server_profiles[2]}
    Wait For Task2    ${responses}    timeout=1000    interval=15
 
Create ServerProfile with Managed Volumes by providing User defined WWPN,WWNN & MAC
	Log to console and logfile    ${\n}Powering off the server ${server_profiles[3]['serverHardwareUri']} 
	Power off Server    ${server_profiles[3]['serverHardwareUri']} 
    ${responses}=  Add Server Profile    ${server_profiles[3]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Run Keyword If    ${expected_server_profiles} is not ${null}     Verify Resource     ${expected_server_profiles[3]}
    Power on server     ${server_profiles[3]['serverHardwareUri']} 
    Sleep    120s
    Wait For Server To Become Pingable     10.10.3.84     3000     3
    Log to console and logfile    ${\n}Powering off the server ${server_profiles[3]['serverHardwareUri']}  
    Power off Server    ${server_profiles[3]['serverHardwareUri']}
    ${responses}=  Remove Server Profile    ${server_profiles[3]}
    Wait For Task2    ${responses}    timeout=1000    interval=15
 	
  