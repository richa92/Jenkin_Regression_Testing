*** Settings ***
Documentation       Feature Test: Cisco LS usecases
...                 Includes FC licensing for Potash API Tests
...
Variables     datavariables.py
#Suite Setup   Run FTS and test-specific setup
#Suite Teardown   Suite Teardown
Resource            ../../../resource/fusion_api_all_resource_files.txt
Library      Collections
Library      String
Library      json
Library      OperatingSystem

*** Variables ***
${SSH_PASS}                 hpvse1
${APPLIANCE_IP}    192.168.146.84
${liname}     SGH439WJKT-LIG-CISCO-Biggs-FEX-Bay-1-using-SAW
${ligname1}    EG logical interconnect group
${ligname}    LIG-CISCO-Biggs-FEX-Bay-1-using-SAW


*** Test Cases ***
login
   Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}


Create LSG
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    #${resp}=  Fusion Api Get LS    param=?filter="'name'=='LS1'"
    Remove All LS
    Remove All lsgs
    ${lsgs} =   Get Variable Value  ${lsgs}
    :FOR  ${lsg}  IN   @{lsgs}
    \   Add Logical Switch Group from variable    ${lsg}



Create LS with NExus5k,SNMPV1 and switch is BASIC_MANAGED
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All LS
    Add Logical Switch from variable    ${lscreate[0]}
    Sleep    120s
    validate_switch_infos    ${lscreate[0]['logicalSwitch']['name']}
    Update Ports     switch5k12   ${updateports}
    #Remove All LS



Create LS with NExus5k,SNMPV3 and switch is BASIC_MANAGED,Auth and Authprivacy
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All LS
    Add Logical Switch from variable    ${ls_auth_authpriv[0]}
    Sleep    120s
    validate_switch_infos    ${ls_auth_authpriv[0]['logicalSwitch']['name']}
    #Remove All LS


Create LS, validate LS BASIC_MANAGED,snmpV3,AuthPrivacy,AuthPrivacy

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All LS
    Add Logical Switch from variable    ${ls_apriv_apriv[0]}
    Sleep    120s
    validate_switch_infos    ${ls_apriv_apriv[0]['logicalSwitch']['name']}
    Remove All LS


Create LS, validate LS MONITORED,AuthPrivacy,Auth
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Remove All LS
    Add Logical Switch from variable    ${ls3[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls3[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS, validate LS BASIC_MANAGED,SNMPv1
    Remove All LS
    Add Logical Switch from variable    ${ls4[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls4[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS, validate LS with one switch BASIC_MANAGED,snmpV3,Auth
    Remove All LS
    Add Logical Switch from variable    ${ls5[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls5[0]['logicalSwitch']}    name
    #validate_switch_infos   ${lsname}
    Remove All LS


Create LS, validate LS of one switch BASIC_MANAGED,snmpV3,AuthPrivacy
    Remove All LS
    Add Logical Switch from variable    ${ls6[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls6[0]['logicalSwitch']}    name
    #validate_switch_infos   ${lsname}
    Remove All LS

Create LS, validate LS BASIC_MANAGED,Auth,AuthPrivacy,MD5,AES128
    Remove All LS
    Add Logical Switch from variable    ${ls7[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls7[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS, validate LS MONITORED,Auth,Auth
    Remove All LS
    Add Logical Switch from variable    ${ls8[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls8[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

Create LS, validate LS, MONOTORED,AuthP,AuthP
    Add Logical Switch from variable    ${ls9[0]}
    Sleep    120s
    ${lsname}=    Get from Dictionary    ${ls9[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS,validate LS nexus 6xxx switch BASIC_MANAGED,snmp version v1
    Remove All LS
    Add Logical Switch from variable    ${ls10[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls10[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

Create LS,validate LS Nexus 6xxxx switch Monitored,smpv3,AuthP,Auth
    Add Logical Switch from variable    ${ls11[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls11[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

Create LS,validate LS Nexus 6xxxx switch Monitored,smpv3,AuthP,snmpv1
    Remove All LS
    Add Logical Switch from variable    ${ls12[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls12[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

Create LS,validate LS Nexus 6xxxx switch Monitored,smpv3,Auth,Auth
    Remove All LS
    Add Logical Switch from variable    ${ls13[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls13[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

Create LS,validate LS Nexus 6xxx switch BASIC_MANAGED,snmpv3,v1,Auth
    Remove All LS
    Add Logical Switch from variable    ${ls14[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls14[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

*** comment ***
Create LS,validate LS BASIC_MANAGED,snmpv3,AuthP,AuthP,MD5,AES128 Nexus Switch 6xxx
    Remove All LS
    Add Logical Switch from variable    ${ls15[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls15[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS,Edit and validate LS
    #Remove All LS
    Add Logical Switch from variable    ${ls_create[0]}
    Sleep    60s
    Edit Logical Switch from variable   ${lsedit1_1[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit1[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}



Edit LS with Basic_managed,snmpv3,AuthPrivacy,and Validate LS
    Edit Logical Switch from variable   ${lsedit2[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit2[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS with BASIC_MANAGED,snmpv1,v3 and Validate LS
    Edit Logical Switch from variable   ${lsedit3[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit3[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS with BASIC_MANAGED,snmpv3,v1 and Validate LS
    Edit Logical Switch from variable   ${lsedit4[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit4[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS with BASIC_MANAGED,snmpv3,Auth,Auth and Validate LS
    Edit Logical Switch from variable   ${lsedit5[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit5[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS BASIC_MANAGED,snmpv3,AuthP,AuthP and Validate LS
    Edit Logical Switch from variable   ${lsedit6[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${lsedit6[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv3,SHA,Auth,AuthP,AES128 and Validate LS
    Edit Logical Switch from variable   ${lsedit7[0]}
    Sleep    100s
    ${lsname}=    Get from Dictionary    ${lsedit7[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS


Create LS,Edit and validate LS2 with snmp version v1
    Add Logical Switch from variable    ${ls10[0]}
    Sleep    60s
    Edit Logical Switch from variable   ${ls2edit1[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls2edit1[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv1 and snmpv3,AuthP,AES12  8 and Validate LS
    Edit Logical Switch from variable   ${ls2edit2[0]}
    Sleep    100s
    ${lsname}=    Get from Dictionary    ${ls2edit2[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv1 and snmpv3,Auth,AES128 and Validate LS
    Edit Logical Switch from variable   ${ls2edit3[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls2edit3[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv3,AuthP,snmp v1and Validate LS
    Edit Logical Switch from variable   ${ls2edit4[0]}
    Sleep    60s
    ${lsname}=    Get from Dictionary    ${ls2edit4[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv3,SHA,Auth,AuthP,AES128 and Validate LS2
    Edit Logical Switch from variable   ${ls2edit5[0]}
    Sleep    100s
    ${lsname}=    Get from Dictionary    ${ls2edit5[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}

Edit LS snmpv3,SHA,Auth,AES128 and Validate LS2
    Edit Logical Switch from variable   ${ls2edit6[0]}
    Sleep    100s
    ${lsname}=    Get from Dictionary    ${ls2edit6[0]['logicalSwitch']}    name
    validate_switch_infos   ${lsname}
    Remove All LS

*** comment ***

#Edit LSG and make LS consistent
    #Add Logical Switch from variable    ${ls1[0]}
    #${lsname}=    Get from Dictionary    ${ls1[0]['logicalSwitch']}    name

network as pre-requisites
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${ethnet}=  Get Variable Value   ${ethernet_networks}
  Run Keyword If   ${ethnet} is not ${null}    Add Ethernet Networks from variable    ${ethnet}

lig creation
    ${ligs} =     Copy List     ${ligs}
    Log to console and logfile  ${ligs}
    Add LIG from variable   ${ligs[0]}
    ${enc_groups1} =     Copy List     ${enc_groups}
    Add Enclosure Group from variable   ${enc_groups1[0]}
    ${encs} =   Copy List   ${encs}
    Add Enclosures from variable    ${encs}
    Power Off All Servers
    ${server_profiles} =    Get Variable Value      ${server_profiles1}
    Run Keyword If    ${server_profiles} is not ${null}         Add Server Profiles from variable     ${server_profiles}
    Run Keyword for List    ${servers}    Power on server
    Power on ALL servers
    Sleep    5min

verify fex operation of edit uplink and downlink
    Edit fex interconnect    ${edit_dwnlk1}
    Update Ports     switch5k12   ${updateports}



*** keywords ***

validate_switch_infos
    [arguments]    ${lsname}
    validate ls switch state   ${lsname}
    ${resp}=    fusion api get ls    param=?filter="'name'=='${lsname}'"
    ${data}=  get variable value  ${resp['members'][0]['logicalSwitchDomainInfo']['perSwitchDomain']}
    :FOR    ${x}    in  @{data}
    \   ValidateSwitchStatistics   ${x['uri']}    ${x['ipAddress']}
    \   ValidateSwitchGeneralInfo   ${x['ipAddress']}


validate cisco logical interconnect
    [Arguments]   ${swtch_mem}  ${ligname}  ${enclname}  ${iclist}
    ${encuri} =    get variable value    ${swtch_mem['enclosureUris'][0]}
    ${getenclresp}=    fusion_api_get_enclosures    uri=${encuri}
    #${getenclname} =    Get from Dictionary    ${getenclresp}    name
    should be equal    ${getenclresp['name']}    ${enclname}

    ${liguri} =    get variable value    ${swtch_mem['logicalInterconnectGroupUri']}
    ${getligresp} =    fusion_api_get_lig    uri=${liguri}
    ${getligname} =    Get from Dictionary    ${getligresp}    name
    should be equal    ${getligname}    ${ligname}
    should be equal  '${swtch_mem['stackingHealth']}'  'NotApplicable'
    should be equal  '${swtch_mem['consistencyStatus']}'  'CONSISTENT'
    ${length}=  Get Length  ${swtch_mem['interconnects']}
    ${inter_list}   create list
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${swtch_mem['interconnects'][${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${icname}=    Get from Dictionary    ${icmresponse}    name
    \    append tolist  ${inter_list}   ${icname}
    :FOR  ${x}  IN  @{iclist}
    \       should contain    ${inter_list}}   ${x}
    \      log to console   ${x} is found in ${iclist}

Edit Logical Switch from variable
    #[Documentation]    Edits a Logical Switch to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${ls}
    Log to Console and logfile    \nEditing Logical switch :${ls}
    ${lsguri} =    Get From Dictionary    ${ls['logicalSwitch']}    logicalSwitchGroupUri
    ${getlsguri}=    Common URI Lookup by name    ${lsguri}
    Set to Dictionary   ${ls['logicalSwitch']}    logicalSwitchGroupUri    ${getlsguri}

    ${uriname} =    Get From Dictionary    ${ls['logicalSwitch']}    uri
    @{words} =  Split String    ${uriname}  :
    ${type} =   Get From List   ${words}    0
    ${name} =   Get From List   ${words}    1
    ${lsuri} =      Get LS URI    ${name}
    Set to Dictionary   ${ls['logicalSwitch']}  uri   ${lsuri}
    ${resp}=  Fusion Api Get LS    param=?filter="'name'=='${name}'"
    ${swturilist}=  get variable value  ${resp['members'][0]['switchUris']}

    ${length}=  Get Length  ${swturilist}
    :FOR    ${swt}  IN RANGE    0   ${length}
    \    ${swturi}= get variable value    ${swturilist[${swt}]}
    \    Set to Dictionary  ${ls['logicalSwitch']['switchCredentialConfiguration'][${swt}]}    switchUri    ${swturi}
    ${resp} =   fusion_api_update_ls    ${ls}   ${lsuri}
    ${task} =   Wait For Task   ${resp}     10min   15s
    [Return]  ${task}

Edit Logical Switch group from variable
    #[Documentation]    Edits a Logical Switch group to an appliance from a variable which contains a request body to edit the LSG
    [Arguments]     ${lsg}
    Log to console and logfile      \nEditing LOGICAL SWITCH GROUP

    ${lsguri} =    Get From Dictionary    ${lsg}    uri
    ${getlsguri}=    Common URI Lookup by name    ${lsguri}
    Set to Dictionary   ${lsg}    uri    ${getlsguri}
    ${swmap} =  Get From Dictionary    ${lsg['switchMapTemplate']}    switchMapEntryTemplates
    :FOR    ${sw}   IN  @{swmap}
    \       ${swuri} =   Get From Dictionary   ${sw}   permittedSwitchTypeUri
    \       ${swuri} =   Common URI lookup by name  ${swuri}
    \       Set to dictionary   ${sw}  permittedSwitchTypeUri   ${swuri}
    Set to dictionary   ${lsg['switchMapTemplate']}   switchMapEntryTemplates    ${swmap}
    ${resp} =    fusion_api_edit_lsg    ${lsg}  ${getlsguri}
    ${task} =   fusion_api_appliance_setup.Wait For Task    ${resp}     2min    15s
    [Return]  ${task}

Update Ports
    #[Documentation]    Edits Switch port to an appliance from a variable which contains request body for the updateports
    [Arguments]   ${switchip}   ${update_ports}
    ${resp}=  Fusion Api Get LS
    :For  ${sw}  IN  @{resp['members']}
    \   ${persw}=   get variable value  ${sw['logicalSwitchDomainInfo']['perSwitchDomain']}
    \   perswitch   ${persw}   ${switchip}   ${update_ports}

perswitch
    [arguments]   ${sw}   ${switch_ip}  ${update_ports}
    :FOR  ${swtch}  IN  @{sw}
    \  run keyword If  '${swtch['ipAddress']}'!= '${switch_ip}'   Continue For Loop
    \  ${portname}=   get variable value   ${update_ports[0]['portName']}
    \  ${uri}=   get variable value   ${swtch['uri']}
    \  ${uri1}=   split string   ${uri}  /rest/switches/
    \  Set to Dictionary    ${update_ports[0]}    portId=${uri1[1]}:${portname}
    \  ${resp} =   fusion_api_edit_switch    body=${updateports}    uri=${uri}/update-ports
    \  ${task} =    Wait For Task   ${resp}     2min    15s

Edit fex interconnect
    #[Documentation]    Edits fex interconnect from the variable
    [Arguments]     ${icmbody}
    log to console and logfile   Editing interconnect port...
    ${icmuri}=    Get IC URI    ${icmbody[0]['interconnectName']}
    ${icuri} =   Remove String    ${icmuri}    /rest/interconnects/
    Set to Dictionary    ${icmbody[0]}    portId    ${icuri}:${icmbody[0]['portId']}
    ${resp}=    fusion_api_edit_interconnect_ports    body=${icmbody}  uri=${icmuri}
    ${task} =   fusion_api_appliance_setup.Wait For Task    ${resp}     3min    15s


validate ls switch state
   [Arguments]   ${ls}
   ${resp}=  Fusion Api Get LS    param=?filter="'name'=='${ls}'"
   ${psd}=  get variable value  ${resp['members'][0]['logicalSwitchDomainInfo']['perSwitchDomain']}
   ${vpc}=   create list   primary   secondary
   ${state}=  create list  Monitored  Configured
   sleep   60
   :FOR  ${swtch}  IN  @{psd}
   #\  run keyword If  '${swtch['ipAddress']}'!= '${switch_ip}'   Continue For Loop
   \  should contain  ${state}    ${swtch['state']}
   \  log to console and logfile    switch ${swtch['ipAddress']} state is ${swtch['state']}
   \  should contain  ${vpc}   ${swtch['vpcRole']}
   \  log to console and logfile    switch ${swtch['ipAddress']} vpc role is ${swtch['vpcRole']}


ValidateSwitchGeneralInfo
    [Arguments]     ${SWITCH_IP}
    ${resp}=    fusion_api_get_switch    param=?filter="'name'=='${SWITCH_IP}'"
    ${version}=    Get From Dictionary      ${resp['members'][1]}    firmwareVersion
    Log to Console    \nversion is:${version}
    ${model}=     Get From Dictionary    ${resp['members'][1]}    modelName
    Log to Console    \nmodel is:${model}
    ${chassisId}=    Get From Dictionary    ${resp['members'][1]}    chassisId
    Log to Console    \nchassissID is:${chassisId}
    ${switchname}=    Get From Dictionary    ${resp['members'][1]}    name
    Log to Console    \nchassissID is:${switchname}
    ${lsvpc}=    Get From Dictionary    ${resp['members'][1]}    logicalSwitchVPC
    ${memberId}=    Get From Dictionary    ${lsvpc}    memberId
    Log to Console    \nmemberId is:${memberId}
    ${swtcvpcrole}=    Get From Dictionary    ${lsvpc}    role
    Log to Console    \nrole is:${swtcvpcrole}
    Log to Console    **** login to SSH connection and get switch details****
    Open Connection and Log In    ${switchname}  ${SWITCH_USERNAME}  ${SWITCH_PASSWORD}
    ${result}=   Execute command   show version
    ${sysversion}=   Execute command   show version | grep "System version"
    Log to Console    \nResult is:${sysversion}

    @{words} =  Split String   ${sysversion}    :
    ${versionno} =    Get From List   ${words}    1
    Log to Console    \nversion number is:${versionno}
    should be equal    ${versionno.strip()}  ${version}

    ${vPC}=   Execute command   show vpc role | grep "vPC role"
    Log to Console    \nResult is:${vPC}
    @{words} =  Split String   ${vPC}    :
    ${vpcrole} =    Get From List   ${words}    1
    ${vpcstatus}=    Split String    ${vpcrole}    ,
    ${vpcrole}=    Get From List    ${vpcstatus}    0
    Log to Console    \nvpc role is:${vpcrole}
    should be equal    ${vpcrole.strip()}  ${swtcvpcrole}

    ${inventory}=   Execute command   show inventory

    ${inventory}=   Execute command   show inventory | grep "${chassisId}"
    Log to Console    \nResultgrepinventory is:${inventory}
    @{words} =  Split String   ${inventory}    ,
    ${modname} =    Get From List    ${words}    0
    @{pid} =  Split String   ${modname}    :
    ${productname} =    Get From List    ${pid}    1
    Log to Console    \npid is:${productname}
    should be equal    ${productname.strip()}  ${model}

    ${memid} =    Get From List    ${words}    1
    @{mid} =  Split String   ${memid}    :
    ${vid} =    Get From List    ${mid}    1
    Log to Console    \nvid is:${vid}
    #should be equal    ${vid.strip()}  ${memberId}

    ${interfaceoutput}=    Execute command    show interface brief
    Log to Console    \ninterface is :${interfaceoutput}

    ${resp}=    fusion_api_get_switch    param=?filter="'name'=='${SWITCH_IP}'"
    ${ports} =  Get From Dictionary     ${resp['members'][1]}   ports
    ${portdata}=    get variable value    ${ports[0]}
    ${vendorportname} =     Get From Dictionary     ${portdata}    vendorSpecificPortName
    ${vendorportnamel}=    Replace String    ${vendorportname}  Ethernet  Eth
    Log to Console    \nportname is:${vendorportnamel}
    ${speed} =      Get From Dictionary     ${portdata}    operationalSpeed
    ${portspeed} =    Remove String    ${speed}  Speed_
    Log to Console    \speed is:${portspeed}

    ${portStatus} =    Get From Dictionary    ${portdata}    portStatus
    Log to Console    \portStatus is:${portStatus}
    ${porttype} =    Get From Dictionary    ${portdata}    portType
    Log to Console    \porttype is:${porttype}
    ${interfaceoutput}=    Execute command    show interface brief
    ${Lines}=    Get Lines Containing String     ${interfaceoutput}      Eth1/
    ${linecount}=    Get Line Count    ${Lines}
    Log to Console    \nlinecount is:${linecount}
    @{linestr}=   Split to lines  ${Lines}


    :FOR    ${l}    IN RANGE    0   ${linecount}
    \    ${portdata}=   get variable value    ${ports[${l}]}
    \   ${vendorportname} =     Get From Dictionary     ${portdata}    vendorSpecificPortName
    \   ${speed} =      Get From Dictionary     ${portdata}    operationalSpeed
    \   ${portStatus} =    Get From Dictionary    ${portdata}    portStatus
    \   Log to Console    portstatus is:${portStatus}
    \   ${porttype} =    Get From Dictionary    ${portdata}    portType
    \   ${line} =    get variable value    ${linestr[${l}]}
    \   Log to Console    \nlines:${line}
    \   @{words} =    Split String    ${line}
    \   Log to Console    \nlines:${line}
    \   ${ethinttype} =    Get From List    ${words}    2
    \   Log to Console    \nethinterfacetype:${ethinttype}
    \   Run Keyword If          '${ethinttype}' != 'eth'            Continue For Loop
    \   ${mod} =    Get From List   ${words}    3
    \   Log to Console    \mod number is:${mod}
    \   ${status} =    Get From List    ${words}    4
    \   Log to Console    \status is:${status}
    \   ${switchspeed1} =    Get Slice From List     ${words}       -2
    \   ${switchspeed} =    Get From List    ${switchspeed1}    0
    \   Log to Console    \nspeed is :${switchspeed}
    \   ${portch1} =    Get Slice From List    ${words}    -1
    \   ${portch} =    Get From List    ${portch1}    0
    \   Log to Console    \nportch is:${portch}
    \   ${switch_porttype}=    Run Keyword If    '${mod}' == 'fabric' and '${status}' == 'up' and '${portch}' != '--'    Set Variable    Stacking    ELSE    Set Variable    Uplink
    \   Log to Console    Swicth port is:${switch_porttype}
    \   ${switch_portstatus}=    Run Keyword If    '${status}' == 'up'    Set Variable    Linked    ELSE    Set Variable    Unlinked
    \   Log to Console    Swicth port is:${switch_portstatus}
    \   should be equal    ${portStatus}  ${switch_portstatus}
    \   run keyword if   '${porttype}' != '${switch_porttype}'   Log to console and logfile     ${porttype} is not equal to ${switch_porttype}   WARN


Remove LS
    [Arguments]    ${lsname}
    ${resp} =    Fusion Api Delete LS    ${lsname}
    ${task} =    fusion_api_appliance_setup.Wait For Task   ${resp}     10min   15s
    [Return]  ${task}


ValidateSwitchStatistics
    [Arguments]    ${swtname}    ${switch_ip}
    ${response}=    fusion_api_get_switch    uri=${swtname}/statistics
    ${len} =    Get Length    ${response['genericPortStatistics']}
    Log to Console    len is:${len}
    ${ports} =  Get From Dictionary     ${response}    genericPortStatistics
    :FOR    ${x}    IN RANGE    0   ${len}
    \   ${ifInOctets} =     Get From Dictionary     ${ports[${x}]}    ifInOctets
    \   Log to Console    ifInOctets is:${ifInOctets}
    \   ${ifInUcastPkts} =  Get From Dictionary     ${ports[${x}]}    ifInUcastPkts
    \   Log to Console    ifInUcastPkts is:${ifInUcastPkts}
    \   ${ifOutOctets} =    Get From Dictionary     ${ports[${x}]}    ifOutOctets
    \   Log to Console    ifOutOctets is:${ifOutOctets}
    \   ${ifOutUcastPkts} =     Get From Dictionary     ${ports[${x}]}    ifOutUcastPkts
    \   Log to Console    Switch port is:${ifOutUcastPkts}
    \   ${portName} =   Get From Dictionary     ${ports[${x}]}    portName
    \   ${portNumber0}=         Split String        ${portName}     .
    \   ${portNumber1}=         Get From List       ${portNumber0}      0
    \   ${portNumber}=          Get From List       ${portNumber0}      1
    \   Log to Console    Switch port is:${portNumber}
    \   Log to Console    Switch port1 is:${portNumber1}
    \   Close All Connections
    \   Open Connection And Log In      ${switch_ip}  admin    Welcome@123
    \   Log to Console    *******sshconnec***************

    \   ${RxUnicastpackets}=   Execute command   show interface eth${portNumber1}/${portNumber} counters detailed | grep "Rx Unicast Packets"
    \   Run Keyword If          '${RxUnicastpackets}' == ''         Continue For Loop
    \   @{words} =  Split String   ${RxUnicastpackets}    :
    \   ${Rxunicastpacket} =    Get From List   ${words}    1
    \   ${RxUnicastpckt}=   get variable value    ${Rxunicastpacket.strip()}
    \   Log to Console    \nRxunicastpacket is:${RxUnicastpckt}

    \   ${Rxpackets}=   Execute command   show interface eth${portNumber1}/${portNumber} counters detailed | grep "Rx Packets"
    \   Run Keyword If          '${Rxpackets}' == ''            Continue For Loop
    \   @{words} =  Split String   ${Rxpackets}    :
    \   ${Rxpacket} =    Get From List   ${words}    1
    \   ${Rxpckt}=  get variable value    ${Rxpacket.strip()}
    \   Log to Console    \nRxpacket is:${Rxpckt}

    \   ${TxUnicastpackets}=   Execute command   show interface eth${portNumber1}/${portNumber} counters detailed | grep "Tx Unicast Packets"
    \   Run Keyword If          '${TxUnicastpackets}' == ''     Continue For Loop
    \   @{words} =  Split String   ${TxUnicastpackets}    :
    \   ${Txunicastpacket} =    Get From List   ${words}    1
    \   ${TxUnicastpckt}=   get variable value    ${Txunicastpacket.strip()}
    \   Log to Console    \nTxunicastpacket is:${TxUnicastpckt}

    \   ${Txpackets}=   Execute command   show interface eth${portNumber1}/${portNumber} counters detailed | grep "Tx Packets"
    \  Run Keyword If          '${Txpackets}' == ''            Continue For Loop
    \   @{words} =  Split String   ${Txpackets}    :
    \   ${Txpacket} =    Get From List   ${words}    1
    \   ${Txpckt}=  get variable value    ${Txpacket.strip()}
    \   Log to Console    \nRxpacket is:${Txpckt}

    \   ${resultifInOctetsval}=    Run Keyword If    '${Rxpckt}' >= '${ifInOctets}'    Set Variable    True    ELSE    Set Variable    False
    \   log to console and logfile   ${resultifInOctetsval}
    \   ${resultifOutOctetsval}=    Run Keyword If    '${Txpckt}' >= '${ifOutOctets}'    Set Variable    True    ELSE    Set Variable    False
    \   log to console and logfile   ${resultifOutOctetsval}
    \   ${resultifInUcastPktsval}=    Run Keyword If    '${RxUnicastpckt}' >= '${ifInUcastPkts}'    Set Variable    True    ELSE    Set Variable    False
    \   log to console and logfile      ${resultifInUcastPktsval}
    \   ${resultifOutUcastPktsval}=    Run Keyword If    '${TxUnicastpckt}' >= '${ifOutUcastPkts}'    Set Variable    True    ELSE    Set Variable    False
    \   log to console and logfile    ${resultifOutUcastPktsval}
    \   Close All Connections

validateswitchpluggableinfo
    [arguments]    ${icname}
    ${uri} =    Get IC URI    ${icname}
    Log to Console   getting pluggable info for ${icname}
    ${resp}=    fusion_api_get_interconnect    uri=${uri}/pluggableModuleInformation/
    ${targets}=        Get From Dictionary   ${resp}        _content
    ${data} =             json.loads          ${targets}
    :FOR    ${x}    in  @{data}
    \   ${portname} =    Get From Dictionary    ${x}    portName
    \   validateswitchpluggableinfo_data   ${icname}  ${portname}    ${x}


validateswitchpluggableinfo_data
    [Arguments]     ${icname1}  ${portname}    ${portapi}
    ${uri} =    Get IC URI    ${icname1}
    ${serialNumber}=   Get From Dictionary    ${portapi}    serialNumber
    ${serialNumber1}=   get variable value    ${serialNumber.strip()}
    ${extIdentifier}=    Get From Dictionary    ${portapi}    extIdentifier
    ${extIdentifier1}=  get variable value    ${extIdentifier.strip()}
    ${vendorPartNumber}=    Get From Dictionary    ${portapi}    vendorPartNumber
    ${vendorPartNumber1}=   get variable value    ${vendorPartNumber.strip()}
    ${vendorRevision}=    Get From Dictionary    ${portapi}    vendorRevision
    ${vendorRevision1}= get variable value    ${vendorRevision.strip()}
    ${resp} =    fusion_api_get_interconnect_ports   uri=${uri}

    :FOR   ${port}  IN   @{resp['members']}
    \   run keyword if  '${port['portName']}' != '${portname}'   Continue For Loop
    \   ${neighbor} =    Get From Dictionary    ${port}    neighbor
    \   ${remoteChassisId} =    Get From Dictionary    ${neighbor}    remoteChassisId
    \   ${remotePortId} =    Get From Dictionary    ${neighbor}    remotePortId
    \   Log to console    remoteChassisId:${remotePortId}
    \
    \   Open Connection And Log In      ${remoteChassisId}   admin   Welcome@123
    \   ${Rxpackets}=   Execute command   show interface ${remotePortId} transceiver
    \   ${serialnoinfo} =   Execute command   show interface ${remotePortId} transceiver | grep "serial"
    \   @{words} =  Split String   ${serialnoinfo}    is
    \   ${serialno} =    Get From List   ${words}    1
    \   ${serialno1}=   get variable value    ${serialno.strip()}
    #\  Log to Console    \serialno is:${serialno}
    \   ${partnoinfo} =   Execute command   show interface ${remotePortId} transceiver | grep "part"
    \   @{words} =  Split String   ${partnoinfo}    is
    \   ${partno} =    Get From List   ${words}    1
    \   ${partno1}= get variable value    ${partno.strip()}
    #\  Log to Console    \partno1 is:${partno1}
    \   ${revisioninfo} =   Execute command   show interface ${remotePortId} transceiver | grep "revision"
    \   @{words} =  Split String   ${revisioninfo}    revision is
    \   ${revision} =    Get From List   ${words}    1
    \   ${revision1}=   get variable value    ${revision.strip()}
    #\  Log to Console    \revision1 is:${revision1}
    \   ${output} =   Execute command   show interface ${remotePortId} transceiver | grep "extended"
    \   @{words} =  Split String   ${output}    number is
    \   ${cisco_extended} =    Get From List   ${words}    1
    \   ${trans_cisco_extended}=    get variable value    ${cisco_extended.strip()}
    #$\ Log to Console    \ntransceiver cisco extended is:${trans_cisco_extended}
    \   should be equal    ${serialNumber1}  ${serialno1}
    \   log to console    ${serialNumber1} is equal to ${serialno1}
    \   should be equal    ${vendorRevision1}  ${revision1}
    \   log to console    \nvendorRevision ${vendorRevision1} is equal to ${revision1}
    \   should be equal    ${vendorPartNumber1}  ${partno1}
    \   log to console   \nvendorpartname ${vendorPartNumber1} is equal to ${partno1}
    \   should be equal    ${extIdentifier1}  ${trans_cisco_extended}
    \   log to console    \nExtidentifier ${extIdentifier1} is equal to ${trans_cisco_extended}
    \   Close All Connections

