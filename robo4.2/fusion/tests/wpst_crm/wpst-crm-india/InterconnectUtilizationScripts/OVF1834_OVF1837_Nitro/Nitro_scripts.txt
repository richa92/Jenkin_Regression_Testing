*** Settings ***
Documentation       Feature Test: OVF1834_OVF1837
...                  Covered OVF1834 related testcases CPU MEMORY Utilization and OVF1837 Interconenct Health related testcases
...
Variables       Nitro_data_variables.py
Library     Nitro_data_variables
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library            SSHLibrary
Library            String
# Library            Telnet
Library             Dialogs
# Library             back_ping.py
# Library            ServerOperations
Resource           ../../../../resource/fusion_api_all_resource_files.txt
# Library               sample.py
Library               Process

*** Variables ***
${number}    5
${flag}    Windows
${APPLIANCE_IP}     192.168.145.26
# For SPP update need to place the SPP bundles in the following folder structure
${SPP_Path_old}             ${CURDIR}/SPP/HF_supported/${old_SPP_bundle}
${SPP_Path_new}             ${CURDIR}/SPP/HF_supported/${latest_SPP_bundle}
${unsupported_SPP_path}             ${CURDIR}/SPP/HF_unsupported/${unsupported_SPP_bundle}
${ICM_Scripts}             ${CURDIR}/cpufile.sh
${name}    pingServerIP.txt
${Enet_switch_ip}    192.168.144.119
${file_path}    ${CURDIR}/pingServerIP.txt
${stat}     statistics
${name}    serverip.txt
${time_out}    Request timed out
${Dest_unreachable}    Destination host unreachable.
${ENC_Serial}    CN77080KR1
${Bay_No}        2
${Action}        ReadCanmicBlocks
${ICM_Name}    CN77080KR1, interconnect 2
${Password}    hpvse1
# ${ICM_IP}       192.168.150.183
${filename}     cpufile.sh
${HOST}    192.168.145.26
${li_name}     LE-LIG_Nitro
# ${IPV6}        fe80::9edc:71ff:fe9b:9944
${POWER_OFF}    Off
${POWER_On}    On
${ICm_Name}    CN77080KR1, interconnect 2
${upper_CPU_MIB_ID}    1.3.6.1.4.1.11.5.7.5.9.1.81.1.67.0
${lower_CPU_MIB_ID}    1.3.6.1.4.1.11.5.7.5.9.1.4001.3.5.0
${Memory_MIB_ID}    1.3.6.1.4.1.11.5.7.5.9.1.81.1.72.0
${Injection_Warn}    warning
${Injection_critical}    critical
${Injection_Normal}    ok
${py_file}    em_cli.py
${py_cmd}    python3
${version}    3
${ICM_health_Critical}    Failed
${ICM_health_Default}    Ok
${ICM_health_Warn}    Degraded
${Lower_cpu_thershold_value}    20
${upper_cpu_thershold_value}    25
${Memory_thershold_value}    30
${Efuse_Action}    ReadCanmicBlocks
${Upper_Thre_Value_1}    30
${Upper_Thre_Value}    25
${State_Absent}    Absent
${State_Power_Off}             Maintenance
${State_Configured}             Configured
${POWER_STATE_OFF}    Off
${POWER_STATE_ON}        On

*** Test Cases ***

1 Login to Appliance and cleanup
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log to console and logfile  logging in appliance
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

    # Edit LI to edit the enableInterconnectAlert Utilization parameter in LI Level
    Edit LI        ${li_name}    ${li_enable}        ${varTrue}

OVF1834_IU_7_API_Verify whether CPU shows Upper THRESHOLD alert when it reaches the specified threshold
   [Documentation]     Simulate CPU and check for upper threshold alerts
    #Getting OneView password
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}

    # Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    # Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    ${Upper_Thre_Value}
    Log to console and logfile    \nUpper Threshold value is:${UT}

    # Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    10mins

OVF1834_IU_19_API_Verify CPU utilization details when we RESET the ICM_Critical Alert with Upper Threshold_gets Cleared
    [Documentation]    Reset the ICM and verify the alerts gets cleared
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}  ${Alert[1]}    ${alert_type}

    Reset interconnect        ${ICM_1}    ${RESET}    ${RESET_STATE}    ${IC_CONFIG_STATE}     ${POWER_ON}
    Sleep    3mins
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}    ${Alert[2]}    ${alert_type}
    # Reset interconnects        ${INTERCONNECTS1}    ${RESET}    ${RESET_STATE}    ${IC_CONFIG_STATE}     ${POWER_ON}

OVF1837_37_2 Validate the state of Interconnect Health_Reset_ICM_Critical health status
    [Documentation]    Injects the fault as critical in ICM then reset the ICM verifies the state of the health
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1
    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}
    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_critical}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Critical}
    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${critical_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_critical}
    Reset interconnect        ${ICM_1}    ${RESET}    ${RESET_STATE}    ${State_Configured}     ${POWER_On}
    Sleep    180
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_critical}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert


OVF1834_CPU_Lowershold_Warning Alert Verifications_ResetICM
    [Documentation]    simulate CPU until it reaches the Lowershold limit and verify the warning alerts also reset ICM
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}

    # Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    # Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    50
    Log to console and logfile    \nUpper Threshold value is:${UT}

    # Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    8mins

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}  ${Alert[1]}    ${alert_type_low}
    Reset interconnect       ${ICM_1}    ${RESET}    ${RESET_STATE}    ${IC_CONFIG_STATE}     ${POWER_ON}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}    ${Alert[2]}    ${alert_type_low}

OVF1834_31 Memory threshold_Reset ICM_Check for alerts cleared
    [Documentation]    Simulate Memory and check for alerts then do Reset verify alert should get cleared
    Log to console and logfile    \n Clear Alerts
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${Clear_alerts}    fusion_api_delete_alert

    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Edit Threshold Value    ${HOST}    ${Password}    ${ICM_IP}    ${Memory_MIB_ID}    30
    DD Command to increase Memory in interconnect    ${HOST}    ${ICM_IP}
    # DD Command to increase Memory in interconnect    ${HOST}    ${ICM_IP}
    Sleep    120
    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[1]}    ${alert_type_memory}
    Reset interconnect        ${ICM_1}    ${RESET}    ${RESET_STATE}    ${State_Configured}     ${POWER_ON}
    Sleep    120
    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[2]}    ${alert_type_memory}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

    ### Poweroff/on Scenarios
OVF1834_IU_18_API_Verify CPU utilization details when we power off the ICM_Critical Alert with Upper Threshold_gets Cleared
    [Documentation]    Poweroff the ICM and verify the CPU critical alert gets cleared

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}

    # Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    # Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    25
    Log to console and logfile    \nUpper Threshold value is:${UT}

    # Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    10mins

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}    ${Alert[1]}    ${alert_type}

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds

    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    # Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}    ${Alert[2]}    ${alert_type}


OVF1837_37_1 Validate the state of Interconnect Health_PowerOff_ICM_Critical health status
    [Documentation]    Inject the fault into ICM do Poweroff verifiy the health state

    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_critical}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Critical}

    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${critical_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_critical}

    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds

    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    # Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_critical}

    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}

    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

OVF1834_30 Memory threshold_Power off ICM_Check for alerts cleared
    [Documentation]    Simulate Memory and check for alerts then do poweroff verify alert should get cleared
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}
    Edit Threshold Value    ${HOST}    ${Password}    ${ICM_IP}    ${Memory_MIB_ID}    30
    DD Command to increase Memory in interconnect    ${HOST}    ${ICM_IP}
    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[1]}    ${alert_type_memory}

    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds

    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    # Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

    Sleep    60
    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[2]}    ${alert_type_memory}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert



OVF1834_IU_18_API_Verify CPU utilization details when we power off the ICM_Warning Alert with Lower Threshold_gets cleared
    [Documentation]    Poweroff the ICM and verify the CPU warning alerts gets cleared
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${EM_SN} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${MasterIcmBay} =   Get From List   ${Bay_words}    1
    ${Password}    Get OneView Password    ${HOST}    ${EM_SN}    ${Efuse_Action}    ${MasterIcmBay}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}

    #  Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    # Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${Password}    ${ICM_1}    50
    Log to console and logfile    \nUpper Threshold value is:${UT}

    # Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    10mins

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}    ${Alert[1]}    ${alert_type_low}

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds

    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    # Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}    ${Alert[2]}    ${alert_type_low}

    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

OVF1837_37_3 Validate the state of Interconnect Health_PowerOff_ICM_Warning health status
    [Documentation]    Injects the fault as warning and do poweroff and verify the ICM health state
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_Warn}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Warn}

    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${warning_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_warn}

    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds

    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    # Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    60

    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_warn}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

    Edit interconnects Power State    ${INTERCONNECTS1}    ${POWER_Off}    ${POWER_STATE}    ${IC_MAINTENANCE_STATE}
    Edit interconnects Power State    ${INTERCONNECTS1}    ${POWER_On}    ${POWER_STATE}    ${IC_CONFIG_STATE}

    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

OVF1837_37_4 validate the state of Interconnect Health_Reset_ICM_Warning health status
    [Documentation]    inject the fault into ICM and do Reset and verify the helath state
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_Warn}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Warn}

    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${warning_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_warn}
    Reset interconnect        ${ICM_1}    ${RESET}    ${RESET_STATE}    ${State_Configured}     ${POWER_On}
    Sleep    180
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_warn}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert


### efuse Scenarios
OVF1834_IU_8_API Verify whether CPU shows Upper THRESHOLD alert when it reaches the above the upper threshold limit_Perform EfuseOff/on_alert gets cleared
    [Documentation]    simulate the CPU and verify the upper thershold alerts
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    # Getting OneView password
    ${OV_Pwd}=    OneView Password    ${APPLIANCE_IP}   ${ENC_Serial}    ${Master_bay}    ${Action}
    Log to console and logfile    \nOneView Password is:${OV_Pwd}
    # Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${OV_pwd}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    ${OV_Pwd}=    OneView Password    ${APPLIANCE_IP}   ${ENC_Serial}    ${Master_bay}    ${Action}
    Log to console and logfile    \nOneView Password is:${OV_Pwd}
    # Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${OV_pwd}    ${ICM_1}    ${Upper_Thre_Value}
    Log to console and logfile    \nUpper Threshold value is:${UT}

    # Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    10mins

OVF1834_IU_8_API_1_API_Cehck for alerts and perform efuseon/off to clear the alerts
    [Documentation]    perform Efuse on/off and verify for cpu alerts gets cleared
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}  ${Alert[1]}    ${alert_type}

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Absent}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message    ${Critical_Message}    ${varTrue}    ${Alert[2]}    ${alert_type}

OVF1834_IU_18_API Verify the CPU warning alerts in the cpu section when it reaches the lower threshold limit-Efuse Scenario
    [Documentation]    simulateCPU untilit reaches the lower threshold limit and verify the alerts
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${OV_Pwd}=    OneView Password    ${APPLIANCE_IP}   ${ENC_Serial}    ${Master_bay}    ${Action}
    Log to console and logfile    \nOneView Password is:${OV_Pwd}
    #Changing threshold Values using snmp set commands
    ${LT} =    Edit Lower Threshold Value    ${APPLIANCE_IP}    ${OV_pwd}    ${ICM_1}    ${Lower_cpu_thershold_value}
    Log to console and logfile    \nLower Threshold value is:${LT}

    ${OV_Pwd}=    OneView Password    ${APPLIANCE_IP}   ${ENC_Serial}    ${Master_bay}    ${Action}
    Log to console and logfile    \nOneView Password is:${OV_Pwd}
    #Changing threshold Values using snmp set commands
    ${UT} =    Edit Upper Threshold Value    ${APPLIANCE_IP}    ${OV_pwd}    ${ICM_1}    50
    Log to console and logfile    \nUpper Threshold value is:${UT}

    #Increase Load through sh script
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}
    Remove Knowhosts File    ${HOST}
    Put CPUfile From OV to ICM via SSH Connection   ${HOST}    ${ICM_IP}    ${filename}
    Executing SHfile for high CPU load    ${HOST}    ${ICM_IP}   ${filename}
    Sleep    10mins


OVF1834_IU_18_API_1_API_Check for CPU warning alerts and perform efuseon/off to clear the Warning alerts
    [Documentation]    Perform Efuseon/off and verify the warning alerts gets cleared

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}    ${Alert[1]}    ${alert_type_low}

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Absent}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Wait Until Keyword Succeeds     5 min   15s    Validate Alert Message Warning    ${Warning_Message}    ${varTrue}    ${Alert[2]}    ${alert_type_low}

    ### Memory efuse Scenario


OVF1834_31 Memory threshold_Efuse ICM_Check for alerts cleared
   [Documentation]    Simulate Memory and do efuse and check for alerts cleared
    Log to console and logfile    \n Clear Alerts
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${Clear_alerts}    fusion_api_delete_alert
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1
    ${ICM_IP}    Get ICM IPV6    ${ICM_resp}

    ${ICM_2}    ${ICM_resp1}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}
    #${ICM_IP1}    Get ICM IPV6    ${ICM_resp1}

    ${Password}    Get OneView Password    ${HOST}    ${Master_ICM}    ${Efuse_Action}    ${Master_bay}

    Edit Threshold Value    ${HOST}    ${Password}    ${ICM_IP}    ${Memory_MIB_ID}    40
    #Edit Threshold Value    ${HOST}    ${Password}    ${ICM_IP1}    ${Memory_MIB_ID}    40


    DD Command to increase Memory in interconnect    ${HOST}    ${ICM_IP}
    #DD Command to increase Memory in interconnect    ${HOST}    ${ICM_IP}
    Sleep    120
    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[1]}    ${alert_type_memory}
    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Absent}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Validate Memory Alert Message    ${Memory_regex}    ${varTrue}    ${Alert[2]}    ${alert_type_memory}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

    ### Health Efuse Scenarios

OVF1837_37_2 Interconnect Health_Efuse_ICM_Critical health status
    [Documentation]    Injects the fault critical  in ICM do efuse and validate the health state
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_critical}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Critical}

    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${critical_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_critical}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Absent}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_critical}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

OVF1837_2 Interconnect Health_Efuse_ICM_Warning health status
    [Documentation]   Inject the fault as warning in ICMa nd do efuse and check for alerts cleared
    ${ICM_1}    ${ICM_resp}    Find Master potash bay    ${li_name}
    @{words} =  Split String    ${ICM_1}  ,
    ${Master_ICM} =   Get From List   ${words}    0
    ${Bay} =   Get From List   ${words}    1
    @{Bay_words} =  Split String    ${Bay}
    ${Master_bay} =   Get From List   ${Bay_words}    1

    ${ICM_2}    ${ICM_resp}    Find Subordinate potash bay    ${li_name}
    Log to console and logfile     ${ICM_2}

    ICMFaultInjection    ${HOST}    ${py_file}    ${li_name}    ${Injection_Warn}    ${Master_bay}    ${Master_ICM}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Warn}

    ${Alert_List}    Create List
    ${msg1}    Replace String Using Regexp    ${warning_Msg_Health}    xxx    ${Master_bay}
    Append to list    ${Alert_List}    ${msg1}
    Log to console and logfile    \n msg:${Alert_List}
    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[1]}    ${alert_type_health_warn}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Absent}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Open Connection And Log In      ${HOST}   root   hpvse1

    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Master_ICM} -o t
    ${eon}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Master_bay} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
    Close All Connections
    should contain   ${eon}  Accepted

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


    Validate Alert Message Health    ${Alert_List}    ${varTrue}    ${Alert[2]}    ${alert_type_health_warn}
    Validate Interconnect Health Status    ${ICM_1}    ${ICM_health_Default}
    Log to console and logfile    \n Clear Alerts
    ${Clear_alerts}    fusion_api_delete_alert

*** Keywords ***
Validate Alert Message Health
    [Documentation]    Validating the 'Active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${alert_type}
    [Arguments]     ${msg}    ${flag}    ${Alerts}    ${alert_type}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    Log to console and logfile    \n Resp:${Response}
    ${Count}    Get From Dictionary    ${Response}    count
    Log to console and logfile    \n Count:${Count}
    Run Keyword If    '${Count}'=='0'    Fail    "Failed as alert message is not found"
    ${Members}    Get From Dictionary    ${Response}    members
    Log to console and logfile    \n Members:${Members}
    ${AlertDesc1}    Create List
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
    \    ${AlertID}    Get From Dictionary    ${Alert}    alertTypeID
    \    Run Keyword If    '${AlertID}' != '${alert_type}'   Continue For Loop
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Append to List    ${AlertDesc1}    ${AlertDesc}
    \    Lists should be equal    ${AlertDesc1}    ${msg}

Get OneView Password
    [Documentation]    Password of oneview Appliance
    ...             Example:
    ...             OV_Pwd   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${EM_SN}    ${Action}    ${Master_Bay_No}
    Open Connection And Log In      ${HOST}   root   hpvse1
    Sleep   3s
    ${EM1}=  Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    ${password}=   Execute Command    curl --globoff -ki -x "" --request POST --header "x-auth-token:${XAUTH}" https://[${EM}]/rest/v1/InterconnectManager/${Master_Bay_No} -H 'Content-Type: application/json' -d '{"Action": "${Action}","List": [10]}' | grep } | python -mjson.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${lines}=    Split to Lines    ${password}
    ${lines1}=    Convert To List    ${lines}
    ${Return} =    Fetch from Right    ${lines[0]}    .
    ${Return1} =   Split String From Right    ${lines[1]}    |
    ${OV_Pwd} =   String.Replace String    ${Return}    |    ${Return1[1][0]}
    Close All Connections
    [Return]    ${OV_Pwd}

Verify Interconnect State
    [Documentation]    Verify Interconnect State
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

DD Command to increase Memory in interconnect
    [Documentation]    DD Command to increase Memory in interconnect
    ...             Example:
    ...             DD Command to increase Memory in interconnect   ${HOST}    ${IPV6}    ${filename}
    [Arguments]         ${HOST}    ${IPV6}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    Log to console    \n before interconnect login
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no root@${IPV6}%bond0
    SSHLibrary.Write    ${SSH_CMD}\n
    Sleep    30sec
    SSHLibrary.Write    UnoVista
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    cd /tmpfs/tmp
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    dd if=/dev/zero of=file.txt count=1024 bs=819200
    SSHLibrary.Write    \n

Validate Memory Alert Message
    [Documentation]    Validating the 'active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Memory Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${alert_type}
    [Arguments]     ${msg}    ${flag}    ${Alerts}    ${alert_type}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    ${Count}    Get From Dictionary    ${Response}    count
    Run Keyword If    '${Count}'=='0'    Fail    "Failed as alert message is not found"
    ${Members}    Get From Dictionary    ${Response}    members
    ${AlertDesc1}    Create List
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
    \    ${AlertID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Run Keyword If    '${AlertID}' != '${alert_type}'   Continue For Loop
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Append to List    ${AlertDesc1}    ${AlertDesc}
    \    Should contain match    ${AlertDesc1}   regexp=Memory Utilization for Interconnect\\s.*?\\shas crossed memory threshold of 30%.

Validate Interconnect Health Status
    [Documentation]    Gets the health status of the interconnect
    ...             Example:
    ...             Get Interconnect Health Status    ${Master_ICM}    ${ICM_health_Default}
    [Arguments]    ${Master_ICM}    ${ICM_health_State}
    ${ic} =     Get IC          ${Master_ICM}
    ${state} =     Get From IC    ${ic}   interconnectHardwareHealth
    log to console and logfile    ${state}
    Should Be Equal As Strings    ${state}    ${ICM_health_State}

Edit Threshold Value
    [Documentation]    Edits the threshold value for CPU Memory based on MIB ID
    ...             Example:
    ...             Efuse Interconnect   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${OV_pwd}    ${ICM_IP}    ${MIB_ID}    ${value}
    ${ICM_IPv6}=  catenate   SEPARATOR=   ${ICM_IP}%ens33
    Open Connection And Log In      ${HOST}   root   hpvse1
    Sleep    30
    ${Set_Threshold} =    Execute Command    snmpset -v3 -u OneView -a sha -A ${OV_pwd} -x AES -X ${OV_pwd} -l authPriv udp6:[${ICM_IPv6}] ${MIB_ID} i ${value}
    Log to console and logfile    \nthreshold output is:${Set_Threshold}
    ${Threshold_val} =    Execute Command    snmpwalk -v3 -u OneView -a sha -A ${OV_pwd} -x AES -X ${OV_pwd} -l authPriv udp6:[${ICM_IPv6}] ${MIB_ID}
    [Return]    ${Set_Threshold}    ${Threshold_val}

ICMFaultInjection
    [Documentation]    Injects faults into ICM like Warning_Critical_ok
    ...             Example:
    ...             ICMFaultInjection   ${HOST}    ${py_file}    ${li_name}    ${Injection}
    [Arguments]         ${HOST}    ${py_file}    ${li_name}    ${Injection}    ${Master_bay}    ${Master_ICM}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    SSHLibrary.Write    python3 ${py_file}\n
    Sleep    30sec
    SSHLibrary.write    ${Master_ICM}
    Sleep    60sec
    SSHLibrary.Read Until    [${Master_ICM}]#
    ${cmd}=  catenate   SEPARATOR=   ICMFaultInjection/${Master_bay}/OsHealth/${Injection}
    Log to console and log file    ${cmd}
    SSHLibrary.write    diag ${cmd}
    Sleep    40sec
    SSHLibrary.Close All Connections

Find Subordinate potash bay
    [Documentation]    Finds the Subordinate potash ICM and bay
    ...             Example:
    ...             Find Master potash bay    ${li_1}
    [Arguments]    ${li_1}
    ${li_uri} =     Get LI URI   ${li_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${interconnectslist} =     Get From Dictionary     ${getresp}  interconnects
    Log to console and logfile     ${interconnectslist}
    ${length}=  Get Length  ${interconnectslist}
    ${ipaddrlist} =     Create List
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${interconnectslist[${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${stackingrole}=    Get from Dictionary    ${icmresponse}    stackingDomainRole
    \    log to console and logfile    ${stackingrole}
    \    ${name} =    Get from Dictionary    ${icmresponse}    name
    \    log to console and logfile    ${name}
    \    Exit For Loop If     '${stackingrole}' == 'Subordinate'
    [Return]    ${name}    ${icmresponse}

Validate Alert Message Warning
    [Documentation]    Validating the 'Active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${alert_type}
    [Arguments]     ${msg}    ${flag}    ${Alerts}    ${alert_type}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    Log to console and logfile    \n Resp:${Response}
    ${Count}    Get From Dictionary    ${Response}    count
    Log to console and logfile    \n Count:${Count}
    Run Keyword If    '${Count}'=='0'    Fail    "Failed as alert message is not found"
    ${Members}    Get From Dictionary    ${Response}    members
    Log to console and logfile    \n Members:${Members}
    ${AlertDesc1}    Create List
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
    \    ${AlertID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Run Keyword If    '${AlertID}' != '${alert_type}'   Continue For Loop
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Append to List    ${AlertDesc1}    ${AlertDesc}
    \    Should contain match    ${AlertDesc1}   regexp=Interconnect CPU Utilization for\\s.*?\\shas crossed lower CPU threshold of 20%


Put CPUfile From OV to ICM via SSH Connection
    [Documentation]    Copies CPUfile from OneView to Master ICM using PUT file robot keyword
    ...             Example:
    ...             Put CPUfile From OV to ICM via SSH Connection    ${HOST}    ${IPV6}    ${filename}
    [Arguments]         ${HOST}    ${IPV6}    ${filename}
    SSHLibrary.Open Connection    ${IPV6}
    SSHLibrary.Login    root    UnoVista    120s
    SSHLibrary.Put File      ${ICM_Scripts}    /tmp    mode=0777
    SSHLibrary.Close All Connections

Put CPUfile From OV to ICM via SSH Connection1
    [Documentation]    Copies CPUfile from OneView to Master ICM using SCP Command
    ...             Example:
    ...             Put CPUfile From OV to ICM via SSH Connection    ${HOST}    ${IPV6}    ${filename}
    [Arguments]         ${HOST}    ${IPV6}    ${filename}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no root@${IPV6}%bond0
    Execute Command   ${SSH_CMD}\n
    Sleep    5sec
    SSHLibrary.Write    UnoVista
    SSHLibrary.Write    exit
    ${ICM_IPV6}=  catenate   SEPARATOR=   ${IPV6}%bond0
    ${scp_cmd}=  catenate   SEPARATOR=   /root/${filename} root@[${ICM_IPV6}]:/tmp
    ${scp_cmd}=  catenate   SEPARATOR=   /${filename} root@[${ICM_IPV6}]:/tmp
    SSHLibrary.Write    scp ${scp_cmd}\n\n
    Sleep    5sec
    SSHLibrary.Write    UnoVista
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o #UserKnownHostsFile=/dev/null root@${IPV6}%bond0
    SSHLibrary.Write    ${SSH_CMD}\n
    SSHLibrary.Write    UnoVista
    SSHLibrary.Close All Connections


Edit interconnects Power State
    [Documentation]    Editing Interconnect power state
    ...             Example:
    ...             Edit interconnects Power State    ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${IC_CONFIG_STATE}
    [Arguments]        ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${State}
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=${Powerstate}
    \   ...                             value=${Power_edit}
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   5min    10s
    \   ${valDict} =    Create Dictionary   status_code=${200}
    \   ...                                 taskState=Completed
    \   Validate Response   ${task}    ${valDict}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect Power State     ${interconnect}        ${Power_edit}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS}    ${State}



Validate Alert Message
    [Documentation]    Validating the 'Active' alert message for CPU with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${alert_type}
    [Arguments]     ${msg}    ${flag}    ${Alerts}    ${alert_type}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    Log to console and logfile    \n Resp:${Response}
    ${Count}    Get From Dictionary    ${Response}    count
    Log to console and logfile    \n Count:${Count}
    Run Keyword If    '${Count}'=='0'    Fail    "Failed as alert message is not found"
    ${Members}    Get From Dictionary    ${Response}    members
    Log to console and logfile    \n Members:${Members}
    ${AlertDesc1}    Create List
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
    \    ${AlertID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Run Keyword If    '${AlertID}' != '${alert_type}'   Continue For Loop
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Log to console and logfile    \n AlertDesc:${AlertDesc}
    \    Append to List    ${AlertDesc1}    ${AlertDesc}
    \    Should contain match    ${AlertDesc1}   regexp=CPU utilization for interconnect\\s .*? exceeded warning threshold of 25%
    run keyword if    '${flag}'=='True'   Should contain match     ${AlertDesc1}    regexp=CPU utilization for interconnect\\s .*? exceeded warning threshold of 25%    ELSE   Should Not contain match     ${AlertDesc1}    regexp=CPU utilization for interconnect\\s .*? exceeded warning threshold of 25%


OneView Password
    [Documentation]    Password of oneview Appliance
    ...             Example:
    ...             OneView Password   ${HOST}    ${EM_SN}    ${Bay_No}    ${Action}
    [Arguments]         ${HOST}    ${EM_SN}    ${Bay_No}    ${Action}
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep   3
    ${EM1}=  Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    Log to console    \nIPV6 address is: ${EM1}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    Log to console    \n IPV6 address is: ${EM}
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    Log to console    \n Auth is: ${XAUTH}
    ${password}=   Execute Command    curl --globoff -ki -x "" --request POST --header "x-auth-token:${XAUTH}" https://[${EM}]/rest/v1/InterconnectManager/${Bay_No} -H 'Content-Type: application/json' -d '{"Action": "${Action}","List": [10]}' | grep } | python -mjson.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${lines}=    Split to Lines                ${password}
    ${lines1}=    Convert To List    ${lines}
    ${Return} =    Fetch from Right    ${lines[0]}    .
    ${Return1} =   Split String From Right    ${lines[1]}    |
    ${OV_Pwd} =   String.Replace String    ${Return}    |    ${Return1[1][0]}
    Log to console    \nExpected password is:${OV_Pwd}
    [Return]    ${OV_Pwd}

Interconnect Login
    [Documentation]    Login into Interconnect
    ...             Example:
    ...             Interconnect Login   ${HOST}    ${ICM_IP}
    [Arguments]         ${HOST}    ${ICM_IP}
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Log to console and logfile    \nIP is ${IC_IP}
    ${ICM_IPv6}=  catenate   SEPARATOR=   ${IC_IP}%bond0
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep   3

Edit Upper Threshold Value
    [Documentation]    Edits the upper threshold value
    ...             Example:
    ...             Efuse Interconnect   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${OV_pwd}    ${ICM_Name}    ${Threshold}
    ${ICM_IP}   Get ICM IP   ${ICM_Name}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Log to console and logfile    \nIP is ${IC_IP}
    ${ICM_IPv6}=  catenate   SEPARATOR=   ${IC_IP}%ens33
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep    30
    ${Upper_Threshold} =    Execute Command    snmpset -v3 -u OneView -a sha -A ${OV_pwd} -x AES -X ${OV_pwd} -l authPriv udp6:[${ICM_IPv6}] 1.3.6.1.4.1.11.5.7.5.8.1.81.1.67.0 i ${Threshold}
    Log to console and logfile    \nUpper threshold output is:${Upper_Threshold}
    [Return]    ${Upper_Threshold}

Edit Lower Threshold Value
    [Documentation]    Password of oneview Appliance
    ...             Example:
    ...             Efuse Interconnect   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${OV_pwd}    ${ICM_Name}    ${Threshold}
    ${ICM_IP}   Get ICM IP   ${ICM_Name}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Log to console and logfile    \nIP is ${IC_IP}
    ${ICM_IPv6}=  catenate   SEPARATOR=   ${IC_IP}%ens33
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep    30
    ${Lower_Threshold} =    Execute Command    snmpset -v3 -u OneView -a sha -A ${OV_pwd} -x AES -X ${OV_pwd} -l authPriv udp6:[${ICM_IPv6}] 1.3.6.1.4.1.11.5.7.5.8.1.4001.3.5.0 i ${Threshold}
    Log to console and logfile    \nLower threshold output is:${Lower_Threshold}}
    [Return]    ${Lower_Threshold}

Increase Utilization Value
    [Documentation]    Utilization value increasing using shell script
    [Arguments]         ${ICM_IP}
    Open Connection     ${ICM_IP}     timeout=60s
    Login    root    UnoVista
    Sleep    3s
    SSHLibrary.Write    cd /tmpfs
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write    exit

Get IC
    [Documentation]    Get IC
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}


Get ICM IPV6
    [Documentation]    Get ICM IPV6
    [Arguments]        ${ic}
    # Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    # ${ic} =    Get IC        ${ICM_NAME}
    ${Ipv6_Address} =    Get Variable Value    ${ic['ipAddressList'][1]['ipAddress']}
    [Return]    ${Ipv6_Address}

Find Master potash bay
    [Documentation]    Finds the Master potash bay
    ...             Example:
    ...             Find Master potash bay    ${li_1}
    [Arguments]    ${li_1}
    ${li_uri} =     Get LI URI   ${li_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${interconnectslist} =     Get From Dictionary     ${getresp}  interconnects
    Log to console and logfile     ${interconnectslist}
    ${length}=  Get Length  ${interconnectslist}
    ${ipaddrlist} =     Create List
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${interconnectslist[${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${stackingrole}=    Get from Dictionary    ${icmresponse}    stackingDomainRole
    \    log to console and logfile    ${stackingrole}
    \    ${name} =    Get from Dictionary    ${icmresponse}    name
    \    log to console and logfile    ${name}
    \    Exit For Loop If     '${stackingrole}' == 'Master'
    [Return]    ${name}    ${icmresponse}


Executing SHfile for high CPU load1
    [Documentation]    Executes sh file for CPU simulation
    [Arguments]         ${HOST}    ${IPV6}    ${filename}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    Log to console    \n before interconnect login
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no root@${IPV6}%bond0
    SSHLibrary.Write    ${SSH_CMD}\n
    Sleep    30sec
    SSHLibrary.Write    UnoVista
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    cd /tmpfs/tmp
    SSHLibrary.Write   ls
    # SSHLibrary.Read Until    \nloop.sh
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    pwd
    SSHLibrary.Write    \n
    SSHLibrary.Write         sh cpufile.sh &
    Sleep    10mins
    SSHLibrary.Write    \n
    SSHLibrary.Write    \n
    Sleep    600sec
    # SSHLibrary.Close All Connections

Remove Knowhosts File
    [Documentation]    Icm login and remove the Knownhosts file
    [Arguments]         ${HOST}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    Log to console    \n Interconnect Login
    SSHLibrary.Write    cd /root/.ssh
    SSHLibrary.Write   ls
    SSHLibrary.Write   rm known_hosts
    SSHLibrary.Write   Yes
    SSHLibrary.Close All Connections

Executing SHfile for high CPU load
    [Documentation]    CPU Simulation by executing SH file script
    [Arguments]         ${HOST}    ${IPV6}    ${filename}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    Log to console    \n Interconnect Login
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no root@${IPV6}%bond0
    SSHLibrary.Write    ${SSH_CMD}\n
    Sleep    30sec
    SSHLibrary.Write    UnoVista
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    cd /tmpfs/tmp
    SSHLibrary.Write   ls
    # SSHLibrary.Read Until    \nloop.sh
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    pwd
    SSHLibrary.Write    \n
    # Start Command    sh loop.sh &
    # SSHLibrary.Write           nohup loop.sh &
    SSHLibrary.Write         sh cpufile.sh &
    # Process.Run process    sh loop.sh\n
    Sleep    10mins
    SSHLibrary.Write    \n
    SSHLibrary.Write    \n
    SSHLibrary.Close All Connections

Open Connection And Terminate Running job
    [Documentation]    Open Connection And Terminate Running job
    ...             Example:
    ...             Open Connection And Terminate Running job   ${HOST}    ${IPV6}    ${filename}
    [Arguments]         ${HOST}    ${IPV6}    ${filename}
    SSHLibrary.Open Connection    ${HOST}
    SSHLibrary.Login    root    hpvse1
    Sleep    8sec
    SSHLibrary.Write    ls\n
    Log to console    \n before interconnect login
    ${SSH_CMD}=  catenate   SEPARATOR=   ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no root@${IPV6}%bond0
    SSHLibrary.Write    ${SSH_CMD}\n
    Sleep    30sec
    SSHLibrary.Write    UnoVista
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n
    SSHLibrary.Write    cd /tmp
    SSHLibrary.Read Until    \n#
    SSHLibrary.Write    \n

Edit LI
    [Documentation]    Edits LI and update the enableInterconnectUtilizatinAlert Attribute
    [Arguments]        ${li}    ${li_set}    ${expected}
    ${body} =    Build LI body    ${li_set}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Set to Dictionary    ${body}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     240s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS1}    ${IC_CONFIG_STATE}

Build LI body
    [Documentation]    Building LI with enableInterconnectUtilizationAlert value
    ...             Example:
    ...             Build LI body  ${li}
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableInterconnectUtilizationAlert} =           Get Variable Value  ${liedit['enableInterconnectUtilizationAlert']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableInterconnectUtilizationAlert=${enableInterconnectUtilizationAlert}
    ...
    [Return]    ${body}

Perform an Update From Group
    [Documentation]    Performing update from Group in LI
    ...             Example:
    ...             Perform an Update From Group  ${li}   20min   1min
    [Arguments]        ${li}=${LE}-${LIG1}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Get LE URI
    [Documentation]    Getting LE uri
    ...             Example:
    ...             Get LE URI  ${LE}
    [Arguments]     ${LE}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${LE}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Perform Update From Group in LE
    [Documentation]    Performing update from Group in LE
    ...             Example:
    ...             Perform Update From Group in LE   ${LE}   20min   1min
    [Arguments]       ${le}     ${timeout}=15 min    ${interval}=15s
    ${le_uri}    Get LE URI    ${le}
    ${resp} =       Fusion Api Update Logical Enclosure    ${le_uri}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI Pause Flood Protection
    [Documentation]    Validating Pause Flood Protection in LI
    ...             Example:
    ...             ValidateLI Pause Flood Protection   ${li}    ${varFalse}
    [Arguments]        ${li_name}    ${expected}
    ${li_uri} =     Get LI URI   ${li_name}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${pfpFound} =     Get From Dictionary        ${es}    enablePauseFloodProtection
    ${status} =    Should Be Equal    ${pfpFound}    ${expected}
    run keyword if    '${status}'=='False'    Fail    "Pause flood protection value not same as expected"
    Log to console and logfile    \nSuccessfully Validated PauseFloodProtection value in LI

Edit LIG
    [Documentation]    Editing LIG
    ...             Example:
    ...             Edit LIG    ${lig}
    [Arguments]     ${lig}
    ${body} =   Build LIG body      ${lig}
    ${lig} =        Get LIG Member      ${LIGname}
    ${lig_uri} =    Get LIG Uri         ${LIGname}
    ${resp} =   Fusion Api Edit LIG    body=${body}    uri=${lig_uri}
    [Return]    ${resp}

Get Port Data From Port Name
    [Documentation]    Fetching given port information
    ...             Example:
    ...             Get Port Data From Port Name    ${ICM_NAME}      ${portName}
    [Arguments]        ${ICM_NAME}      ${portName}
    ${ic} =     Get IC      ${ICM_NAME}
    ${ports} =  Get From Dictionary     ${ic}    ports
    ${l} =     Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${port} =     Get From List   ${ports}    ${x}
    \     Exit For Loop If     '${port['portName']}' == '${portName}'
    [Return]    ${port}

Reset interconnects
    [Documentation]    Resetting the Interconnect
    ...             Example:
    ...             Reset interconnects    ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${IC_CONFIG_STATE}    ${IC_PowerState}
    [Arguments]        ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${State}    ${IC_PowerState}
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=${Powerstate}
    \   ...                             value=${Power_edit}
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   5min    10s
    \   ${valDict} =    Create Dictionary   status_code=${200}
    \   ...                                 taskState=Completed
    \   Validate Response   ${task}   ${valDict}
    \   Log to console and logfile  \nVerify ${interconnect} is ${Power_edit}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect Power State     ${interconnect}        ${IC_PowerState}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS}    ${State}
    \   Sleep    3mins

Reset interconnect
    [Documentation]    Resetting the Interconnect
    ...             Example:
    ...             Reset interconnect    ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${IC_CONFIG_STATE}    ${IC_PowerState}
    [Arguments]        ${ICM_1}    ${Power_edit}    ${Powerstate}    ${State_Configured}    ${IC_PowerState}
    #:FOR     ${interconnect}   IN   @{INTERCONNECTS}
    ${ic_uri} =    Get IC URI    ${ICM_1}
    ${body} =   Create Dictionary   op=replace
    ...                             path=${Powerstate}
    ...                             value=${Power_edit}
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    ${task} =   Wait for Task   ${resp}   5min    10s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}   ${valDict}
    Log to console and logfile  \nVerify ${ICM_1} is ${Power_edit}
    Wait Until Keyword Succeeds    600 s   15 s     Validate Interconnect Power State     ${ICM_1}        ${IC_PowerState}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Sleep    3mins

Validate Interconnect Power State
    [Documentation]    Validating the power state of Interconnect
    ...             Example:
    ...             Validate Interconnect Power State    ${ICM_1}    ${POWER_STATE}
    [Arguments]        ${ICM_NAME}        ${POWER_STATE}
    Log to console and logfile    \n\nPower State passed is ${POWER_STATE}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${powerState} =     Get From dictionary    ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}

Validate Interconnect state
    [Documentation]    Validate state of Interconnect module with the expected state
    ...             Example:
    ...             Validate Interconnect state    ${ICM_1}    ${IC_CONFIG_STATE}
    [Arguments]        ${ICM_NAME}    ${State}
    ${len_ic} =   Get Length   ${ICM_NAME}
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME[${x}]}'"
    \    ${ic_uri} =     Get From Dictionary     ${IC['members'][0]}     uri
    \    ${resp} =   fusion api get resource     ${ic_uri}
    \    ${resp_state}    convert_unicode_to_string    ${resp['state']}
    \    Should Be Equal As Strings     ${resp_state}    ${State}

Clear Interconnect Port Counters
    [Documentation]    Clearing Interconnect Port Counters
    ...             Example:
    ...             Clear Interconnect Port Counters    ${ICM_1}
    [Arguments]        ${ICM_1}
    ${icUri}       Get IC URI    ${ICM_1}
    ${body}        Create Dictionary
    ${resp}        Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Log to console and logfile    \n ${resp}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg=Clearing Interconnect Ports of ${ICM_1} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${ICM_1} cleared successfully
    Log to console and logfile      Waiting for 2 minutes for 'Clear port counters' to clear the statistics data
    Sleep    2 minutes

Re-apply Interconnect configuration
    [Documentation]    Reapplying the interconnect configuration
    ...             Example:
    ...             Re-apply Interconnect configuration    ${ICM_1}
    [Arguments]        ${ICM_1}
    ${icUri}        Get IC URI    ${ICM_1}
    ${resp}         fusion api reapply interconnect configuration        ${icUri}
    ${task}         Wait For Task   ${resp}     750s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}

Perform Enclosure Refresh
    [Documentation]    Performing refresh of enclosure
    ${encs} =   Fusion Api Get Enclosures
    :FOR    ${enc}  IN  @{encs['members']}
    \       ${resp} =      fusion_api_refresh_enclosure     uri=${enc['uri']}
    \       ${task} =     Wait For Task    ${resp}     600s    10s
    \       ${val} =       Create Dictionary   taskState=Completed
    \       ${result} =    Validate Response    ${task}    ${val}


Get Alert count
    [Documentation]    Validating the 'Active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    [Arguments]     ${Alerts}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filerter="alertState EQ '${Alerts}'"
    ${Count}    Get From Dictionary    ${Response}    count
    [Return]    ${Count}

Interconnect Firmware Update in LI
    [Documentation]    Performing IC firmware upgrade
    ...             Example:
    ...             Interconnect Firmware Update in LI    ${old_SPP_bundle}    ${LI}    @{INTERCONNECTS}    ${ic_firmwareVersion_old}
    [Arguments]         ${SPP_bundle}    ${LI}    ${INTERCONNECTS}    ${ic_firmwareVersion}
    ${resp}=   Fusion Api Get Firmware Driver    param=?filter="name='${SPP_bundle}'"    api=500
    Run Keyword If   ${resp['count']} == 0   Fail    msg=\n No SPP bundle found!!.Please upload the correct SPP bundle
    ${fw_uri_old}=   Get From Dictionary  ${resp['members'][0]}    uri
    ${li_uri} =     Get LI URI   ${LI}
    Set to dictionary     ${liupdate_body}     sppUri    ${fw_uri_old}
    ${response}=    Fusion Api Li Upgrade Firmware    ${liupdate_body}    ${li_uri}
    ${task} =     Wait For Task        ${response}   30min    1min
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200   fail    msg=\nLI Firmware update Failed.
    ...         ELSE    Log to console and logfile  \n\nLI FW Upgrade completed successfully

Firmware bundle upload
    [Documentation]    Uploading a firmware bundle
    ...             Example:
    ...             Firmware bundle upload    ${SPP_Path}
    [Arguments]         ${SPP_Path}
    ${resp} =     Fusion Api Upload Firmware Bundle    api=${300}    localfile=${SPP_Path}
    Log to console and logfile    Upload spp details ${resp}

Validate Interconnect firmware version
    [Documentation]    Verifying the interconnect firmware version
    ...             Example:
    ...             Validate Interconnect firmware version    ${INTERCONNECTS}    ${ic_firmwareVersion_new}
    [Arguments]         ${INTERCONNECTS}    ${ic_firmwareVersion}
    Log to console and logfile    \nValidating the interconnect firmware before update
    :FOR     ${IC}     IN   @{INTERCONNECTS}
    \     ${resp} =   Fusion Api Get Interconnect    param=?filter="'name' = '${IC}'"
    \     ${current_ic_fw_version} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    \     Run keyword unless    '${current_ic_fw_version}' == '${ic_firmwareVersion}'    Fail    "Firmware version mismatch"
    \     ...   ELSE     Log to console and logfile    \nFirmware version is verified for ${IC}

Restore From Backup
    [Documentation]    Restoring from backup
    ...             Example:
    ...             Restore From Backup
    ${status}=  Set Variable    ${EMPTY}
    ${Response}     Fusion Api Get Backup
    Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
    ${restore_body}     Create Dictionary   type=RESTORE
    ...                                     uriOfBackupToRestore=${Response['members'][0]['uri']}
    ${output}       Fusion Api Restore Backup       ${restore_body}
    Sleep   200sec
    Run keyword unless  ${output['status_code']}== 202  Fail    "Unable to perform the restore from backup operation"
    ${restore_resp}     Fusion API Get Restore Status
    Run keyword unless  ${restore_resp['status_code']}== 200    Fail    "Unable to get the restore details"
    :FOR    ${index}    IN RANGE    ${restore_resp['count']}
    \   Run Keyword If  '${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'        Continue For Loop
    \   ${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}
    :FOR    ${index}    IN RANGE    50
    \   sleep   60sec
    \   ${resp}     Fusion API Get Restore Status   ${restore_id}
    \   Run keyword unless  ${resp['status_code']}== 200    Fail    "Unable to get the restore id details"
    \   Run Keyword If  '${resp['progressStep']}' != 'COMPLETED'    Continue For Loop
    \   ${status} =    Set Variable    ${resp['status']}
    \   Run Keyword If  '${resp['progressStep']}' == 'COMPLETED'    Exit For Loop
    Should Be Equal    ${status}    SUCCEEDED
    Sleep    30
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Get IC1
    [Documentation]    Validating expected IC name with the value of name from response
    ...             Example:
    ...             Get IC   ${ICM_NAME}
    [Arguments]    ${ICM_NAME}
    ${resp}    fusion api get interconnect
    ${ics}    Get From Dictionary    ${resp}    members
    ${l}     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${ic}    Get From List    ${ics}    ${x}
    \    Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Efuse Interconnect
    [Documentation]    Performing Efuse of Interconnect
    ...             Example:
    ...             Efuse Interconnect   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${EM_SN}    ${Action}    ${Bay_No}
    Open Connection And Log In      ${HOST}   root   hpvse1
    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    ${efuse_operation}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Bay_No} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"${Action}"}'
    Close All Connections
    should contain   ${efuse_operation}  Accepted


Build LIG body
    [Documentation]    Building LiG body
    ...             Example:
    ...             Build LIG body    ${xlig}
    [Arguments]     ${xlig}
    ${xlig} =   fusion_api_appliance_setup.Copy Dictionary  ${xlig}
    ${uplinkSets} =     Copy List   ${xlig['uplinkSets']}
    ${l} =  Get Length  ${uplinkSets}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]}    networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]}    networkUris
    \   ${networks_native} =        Get From Dictionary     ${uplinkSets[${x}]}    nativeNetworkUri
    \   Run Keyword If  '${networkType}' == 'Ethernet'      Continue For Loop
    \   ${networkUris} =    Get FC Uris    ${networks}
    \   Set to dictionary   ${uplinkSets[${x}]}    networkUris    ${networkUris}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]}   networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]}    networkUris
    \   ${networks_native} =        Get From Dictionary     ${uplinkSets[${x}]}    nativeNetworkUri
    \   Run Keyword If  '${networkType}' == 'FibreChannel'  Continue For Loop
    \   ${networkUris} =    Get FCoE Uris   ${networks}
    \   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${ethernetUris_native} =   Get Ethernet URI   ${networks_native}
    \   ${networkUris} =    combine lists   ${networkUris}    ${ethernetUris}
    \   Set to dictionary   ${uplinkSets[${x}]}   networkUris    ${networkUris}
    \   Set to dictionary   ${uplinkSets[${x}]}   nativeNetworkUri    ${ethernetUris_native}
    ${name} =                       Get Variable Value  ${xlig['name']}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${xlig['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${xlig['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${xlig['fcoeSettings']}
    ${interconnectBaySet} =         Get Variable Value  ${xlig['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${xlig['interconnectMapTemplate']}
    ${redundancyType} =             Get Variable Value  ${xlig['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${xlig['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${xlig['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${xlig['snmpConfiguration']}
    ${enclosureIndexes} =           Get Variable Value  ${xlig['enclosureIndexes']}
    # ${uplinkSets} =                 Get Variable Value  ${xlig['uplinkSets']}
    ${body} =   Fusion Api Create LIG Payload   name=${name}
    ...                                         enclosureIndexes=${enclosureIndexes}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                         fcoeSettings=${fcoeSettings}
    ...                                         interconnectBaySet=${interconnectBaySet}
    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         redundancyType=${redundancyType}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                         uplinkSets=${uplinkSets}
    [Return]    ${body}

Remove All User
    [Documentation]    Removing all users from OneView
    ${users} =  Fusion Api Get User
    :FOR    ${user}    IN  @{users['members']}
    \       Continue For Loop If    '${user['userName']}'=='Administrator'
    \       Continue For Loop If    '${user['userName']}'=='administrator'
    \       Continue For Loop If    '${user['userName']}'=='HardwareSetup'
    \       ${resp} =   Fusion Api Remove User      uri=${user['uri']}



Get ICM IP
    [Documentation]    Fetching ICM IP
    ...             Example:
    ...             Get ICM IP    ${ICM_NAME}
    [Arguments]         ${ICM_NAME}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${address}=     Get From Dictionary     ${IC['members'][0]}   ipAddressList
    Log to console and logfile    Logged ipaddress list : ${address}
    ${ipaddress}=     Get From Dictionary     ${address[1]}   ipAddress
    # ${ipaddress}=     Get From Dictionary     ${address[0]}   ipAddress
    ${ipadress1}     Convert to String    ${ipaddress}
    [Return]    ${ipadress1}


Validate LIG LI Consistency
    [Documentation]    Validating LIG LI Consistency
    ...             Example:
    ...             Validate LIG LI Consistency    ${Consistency_State[0]}
    [Arguments]         ${expected}
    ${IC}=    Fusion Api Get LI
    Log to Console    \n ${IC}
    Run Keyword If  '${IC['members'][0]['consistencyStatus']}' != '${expected}'     Fail

POWER OFF ICM
    [Documentation]    POWER OFF ICM
    [Arguments]        ${ICM_NAME}
    # Log to console and logfile  -Issue powerControl Off
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC                  ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    Log to console    \n${uri}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}
    ${resp}        fusion api patch interconnect    body=${body}    uri=${uri}
    Log to console    \n${resp}
    sleep   90s


POWER ON ICM
    [Documentation]    POWER ON ICM
    [Arguments]        ${ICM_NAME}
    Log to console and logfile  -Issue powerControl On
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC                  ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    Log to console    \n${uri}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp}        fusion api patch interconnect    body=${body}    uri=${uri}
    Log to console    \n${resp}
    sleep   90s

Verify Interconnect Power State
    [Documentation]    Verify Interconnect Power State
    [Arguments]        ${ICM_NAME}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile  -Verify Power status
    ${ic} =     Get IC                  ${ICM_NAME}
    ${powerState} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}
    Log to console    \n\nPower State of the ICM is ${ICM_NAME}:${powerState}