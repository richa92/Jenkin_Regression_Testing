*** Keywords ***
Get Port URI
    [Documentation]     Gets Port URI given the Enclosure Serial No, Bay, port name
    ...    Ex:  Get Port URI    SGH751SLBK     5    Q2:1
    [Arguments]    ${ENC}    ${BAY}    ${Port_Name}
    ${pdict}=    Build PortUris dict    ${ENC}    ${BAY}
    #Log     ${pdict}    console=True
    ${port_uri}=   Get From Dictionary    ${pdict}    ${Port_Name}
    Log    \nPort URI for port ${Port_Name}: ${port_uri}    console=True
    [return]    ${port_uri}

Get Port URI By Name
    [Documentation]     Gets port URI using port full name
    ...    Ex: Get Port URI By Name    SGH751SLBK, interconnect 5, Q2:1
    [Arguments]    ${Port_Full_Name}
    ${ICM_Name}    ${Port_Name}=    Split String From Right    ${Port_Full_Name}    separator=,    max_split=1
    ${ICM_Name}=    Strip String    ${ICM_Name}
    ${Port_Name}=    Strip String    ${Port_Name}
    ${port_uri}=    Create IC Port URI    IC=${ICM_Name}    port=${Port_Name}
    Log    \nPort URI for port ${Port_Full_Name}: ${port_uri}    console=True
    [return]    ${port_uri}

Build PortUris dict
    [Documentation]  Build dictionary of port uris with port (X1..X2..) as the key
    [Arguments]    ${ENC1}    ${BAY}
    ${ics} =       Fusion Api Get Interconnect    param=?filter="'name'=='${ENC1}, interconnect ${BAY}'"
    ${ports} =     Get From Dictionary    ${ics['members'][0]}    ports
    ${pdict} =     Create Dictionary
    :FOR    ${port}    IN   @{ports}
    \    ${uri} =    Get From Dictionary    ${port}    uri
    \    ${p} =      Get From Dictionary    ${port}    name
    \    Set to dictionary    ${pdict}    ${p}    ${uri}
    [Return]    ${pdict}

Create RSPAN Session
    [Documentation]  Creates a RSPAN Session on a particular Interconnect
    [Arguments]     ${li_name}    ${body}    ${ENC}    ${BAY}
    ${li_uri}=    Get LI URI    ${li_name}
    ${remotePortMonitor_list}=    Get From Dictionary    ${body}    remotePortMonitor
    ${session_list}=    Create List
    :FOR    ${remotePortMonitor}    IN    @{remotePortMonitor_list}
    \    ${session}=    Create Remote Port Session Dictionary    ${remotePortMonitor}    ${ENC}    ${BAY}
    \    Append to List    ${session_list}    ${session}
    Set To Dictionary    ${body}    remotePortMonitor=${session_list}
    ${resp}=    fusion_api_update_li_port_monitor_configuration    body=${body}    uri=${li_uri}
    [Return]    ${resp}

Create Multiple RSPAN Sessions
    [Documentation]  Creates Multiple RSPAN Sessions
    [Arguments]     ${li_name}    ${body}
    ${li_uri}=    Get LI URI    ${li_name}
    ${remotePortMonitor_list}=    Get From Dictionary    ${body}    remotePortMonitor
    ${session_list}=    Create List
    :FOR    ${remotePortMonitor}    IN    @{remotePortMonitor_list}
    \    ${session}=    Create Remote Port Multiple Sessions Dictionary   ${remotePortMonitor}
    \    Append to List    ${session_list}    ${session}
    Set To Dictionary    ${body}    remotePortMonitor=${session_list}
    ${resp}=    fusion_api_update_li_port_monitor_configuration    body=${body}    uri=${li_uri}
    [Return]    ${resp}

Create Remote Port Multiple Sessions Dictionary
    [Documentation]    Create Remote Port Multiple Sessions Dictionary
    [Arguments]     ${remotePortMonitor}
    ${nw}=    Get From Dictionary    ${remotePortMonitor}    networkUri
    ${nw_uri}=     Get Ethernet URI    ${nw}
    ${mirror_to_port_name}=     Get From Dictionary    ${remotePortMonitor['mirrorToPort']}     portUri
    ${mirror_to_port_uri}=    Get Port URI By Name    ${mirror_to_port_name}
    ${monitored_port_list}=    Get From Dictionary    ${remotePortMonitor}     monitoredPorts
    ${port_list}=    Create List
    :FOR    ${monitored_port}   IN    @{monitored_port_list}
    \    ${port_name}=    Get From Dictionary    ${monitored_port}    portUri
    \    ${port_uri}=    Get Port URI By Name    ${port_name}
    \    Set to Dictionary    ${monitored_port}    portUri=${port_uri}
    \    Append To List    ${port_list}    ${monitored_port}
    Set to Dictionary    ${remotePortMonitor}    networkUri=${nw_uri}
    Set To Dictionary    ${remotePortMonitor}    monitoredPorts=${port_list}
    Set To Dictionary    ${remotePortMonitor['mirrorToPort']}    portUri=${mirror_to_port_uri}
    [Return]    ${remotePortMonitor}

Create Remote Port Session Dictionary
    [Documentation]    Create Remote Port Session Dictionary
    [Arguments]     ${remotePortMonitor}    ${ENC}    ${BAY}
    ${nw}=    Get From Dictionary    ${remotePortMonitor}    networkUri
    ${nw_uri}=     Get Ethernet URI    ${nw}
    ${mirror_to_port_name}=     Get From Dictionary    ${remotePortMonitor['mirrorToPort']}     portUri
    ${mirror_to_port_uri}=    Get Port URI    ${ENC}    ${BAY}    ${mirror_to_port_name}
    ${monitored_port_list}=    Get From Dictionary    ${remotePortMonitor}     monitoredPorts
    ${port_list}=    Create List
    :FOR    ${monitored_port}   IN    @{monitored_port_list}
    \    ${port_name}=    Get From Dictionary    ${monitored_port}    portUri
    \    ${port_uri}=    Get Port URI    ${ENC}    ${BAY}    ${port_name}
    \    Set to Dictionary    ${monitored_port}    portUri=${port_uri}
    \    Append To List    ${port_list}    ${monitored_port}
    Set to Dictionary    ${remotePortMonitor}    networkUri=${nw_uri}
    Set To Dictionary    ${remotePortMonitor}    monitoredPorts=${port_list}
    Set To Dictionary    ${remotePortMonitor['mirrorToPort']}    portUri=${mirror_to_port_uri}
    [Return]    ${remotePortMonitor}

Toggle LI Port Monitoring
    [Documentation]    Enable or Disable LI Port Monitoring.
    [Arguments]    ${li_name}    ${enable}=${FALSE}
    ${li_uri}=    Get LI URI    ${li_name}
    ${body} =     Fusion Api Get Li Port Monitor Configuration    ${li_uri}
    Remove From Dictionary      ${body}   headers  status   category   created   status_code   state   modified   description
    Set To Dictionary    ${body}    enablePortMonitor=${enable}
    ${resp}=    Fusion Api Update LI Port Monitor Configuration    body=${body}    uri=${li_uri}
    Wait For Task2    ${resp}    timeout=600    interval=10

Get LI Port Monitoring Status
    [Documentation]    Gets LI Port Monitoring Status
    [Arguments]    ${li_name}
    ${li_uri}=    Get LI URI    ${li_name}
    ${body} =     Fusion Api Get Li Port Monitor Configuration    ${li_uri}
    ${status}=    Get From Dictionary    ${body}    enablePortMonitor
    [Return]    ${status}

Clear All RSPAN Sessions
    [Documentation]    Deletes All RSPAN Sessions on thethe given LI
    [Arguments]    ${li_name}
    ${li_uri}=    Get LI URI    ${li_name}
    ${remote_port_monitor_list}=    Create List
    ${body}=    Create Dictionary    type=port-monitorV1    enablePortMonitor=${FALSE}    portMonitorType=Remote    remotePortMonitor=${remote_port_monitor_list}
    ${resp}=    fusion_api_update_li_port_monitor_configuration    body=${body}    uri=${li_uri}
    Wait For Task2    ${resp}    timeout=600    interval=10

Get List of Available Network And Port For Remote Port Monitor
    [Documentation]    Get List of Available Network And Port For Remote Port Monitor
    [Arguments]    ${li_name}
    ${li_uri}=    Get LI URI    ${li_name}
    ${resp}=    fusion_api_get_li    uri=${li_uri}    param=/availableNetworkAndPortsForRemotePortMonitor
    Log    ${resp}    console=True
    ${members}=    Get From Dictionary    ${resp}    members
    ${dict}=    Create Dictionary
    :FOR    ${member}    IN    @{members}
    \    ${mtp_list}=   Get List of Available Ports For Port Monitor For A Given Network    ${li_name}    ${member['networkUri']}
    \    Set To Dictionary    ${dict}    ${member['networkUri']}=${mtp_list}
    [Return]    ${dict}

Get List of Available Ports For Port Monitor For A Given Network
    [Documentation]    Get List of Available Ports For Port Monitor For A Given Network
    [Arguments]    ${li_name}    ${nw_uri}
    ${li_uri}=    Get LI URI    ${li_name}
    ${resp}=    fusion_api_get_li    uri=${li_uri}    param=/availableNetworkAndPortsForRemotePortMonitor
    ${members}=    Get From Dictionary    ${resp}    members
    :FOR    ${member}    IN    @{members}
    \    Exit For Loop If     '${member['networkUri']}' == '${nw_uri}'
    ${mtps}=    Get From Dictionary    ${member}     mirrorToPorts
    ${mtp_list}=    Create List
    :FOR     ${mtp}    IN     @{mtps}
    \    Append to List    ${mtp_list}    ${mtp['portUri']}
    [Return]    ${mtp_list}

Verify RSPAN Details In ICM
    [Documentation]    Verify RSPAN Details In ICM
    [Arguments]    ${EM_SN}    ${ICM_BAY}    ${rspan_data}
    Log     \nGetting ICM IP    console=True
    Sleep    3s
    ${ICM_IP}=    Get ICM IPV4   ${EM_SN}, interconnect ${ICM_BAY}
    Log     \nGetting ICM Password    console=True
    ${ICM_PWD}=    Get ICM Password    ${APPLIANCE_IP}   ${EM_SN}    ${ICM_BAY}
    ${table}=    get_rspan_details_from_ICM    ${ICM_IP}    OneView    ${ICM_PWD}
    Log    \nRSPAN Table from ICM is:\n ${table}    console=True
    ${destination_port_data}=   Get From Dictionary    ${rspan_data['remotePortMonitor'][0]['mirrorToPort']}   portUri
    ${nw_name_data}=     Get From Dictionary    ${rspan_data['remotePortMonitor'][0]}    networkUri
    ${monitored_port_data}=    Get From Dictionary    ${rspan_data['remotePortMonitor'][0]['monitoredPorts'][0]}    portUri
    ${nw_uri_data}=    Get Ethernet URI    ${nw_name_data}
    ${resp} =    Fusion Api Get Resource    uri=${nw_uri_data}
    ${nw_vlan_id_data}=    Get from Dictionary    ${resp}    vlanId
    ${nw_vlan_id_data}=    Convert To String    ${nw_vlan_id_data}
    ${data}=    Create Dictionary    destination_port=${destination_port_data}    nw_vlan_id=${nw_vlan_id_data}    monitored_port=${monitored_port_data}
    ${status}=    Run Keyword and Return Status    Dictionaries Should Be Equal   ${data}    ${table}
    [Return]    ${status}

Verify Multiple RSPAN Session Details In ICM
    [Documentation]    Verify Multiple RSPAN Session Details In ICM
    [Arguments]    ${EM_SN}    ${ICM_BAY}    ${rspan_data}
    Log     \nGetting ICM IP    console=True
    Sleep    3s
    ${ICM_IP}=    Get ICM IPV4   ${EM_SN}, interconnect ${ICM_BAY}
    Log     \nGetting ICM Password    console=True
    ${ICM_PWD}=    Get ICM Password    ${APPLIANCE_IP}   ${EM_SN}    ${ICM_BAY}
    ${table_icm}=    get_multi_rspan_details_from_ICM    ${ICM_IP}    OneView    ${ICM_PWD}
    Log    \nRSPAN Table from ICM is:\n ${table_icm}    console=True
    ${table_dto}=     get_rspan_details_from_data     ${rspan_data}
    ${l}=    Get Length   ${table_dto}
    :FOR    ${x}   IN RANGE  ${l}
    \    ${nw_name}=    Get From Dictionary    ${table_dto[${x}]}    nw_vlan_id
    \    ${nw_uri}=    Get Ethernet URI    ${nw_name}
    \    ${resp} =    Fusion Api Get Resource    uri=${nw_uri}
    \    ${nw_vlan_id}=    Get from Dictionary    ${resp}    vlanId
    \    ${nw_vlan_id}=    Convert To String    ${nw_vlan_id}
    \    Set To Dictionary    ${table_dto[${x}]}    nw_vlan_id=${nw_vlan_id}
    Log    \nRSPAN Table from ICM is:\n ${table_dto}    console=True
    ${status}=    Run Keyword and Return Status    Lists Should Be Equal   ${table_icm}    ${table_dto}
    [Return]    ${status}

Get ICM Password
    [Documentation]    Gets Interconnect SSH Password from OneView
    ...             Example:
    ...             Get ICM Password   ${HOST}    ${EM_SN}    ${Bay_No}
    [Arguments]    ${HOST}    ${EM_SN}    ${Bay_No}
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep   3
    ${EM1}=  Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    #Log to console    \nIPV6 address is: ${EM1}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    #Log to console    \n IPV6 address is: ${EM}
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    #Log to console    \n Auth is: ${XAUTH}
    ${password}=   Execute Command    curl --globoff -ki -x "" --request POST --header "x-auth-token:${XAUTH}" https://[${EM}]/rest/v1/InterconnectManager/${Bay_No} -H 'Content-Type: application/json' -d '{"Action": "ReadCanmicBlocks","List": [10]}' | grep } | python -mjson.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${lines} =    Split to Lines                ${password}
    ${lines1} =    Convert To List    ${lines}
    ${Return} =    Fetch from Right    ${lines[0]}    .
    ${Return1} =   Split String From Right    ${lines[1]}    |
    ${OV_Pwd} =   String.Replace String    ${Return}    |    ${Return1[1][0]}
    Log to console    \nPassword for the ICM is: ${OV_Pwd}
    [Return]    ${OV_Pwd}

Get ICM IPV4
    [Documentation]    Fetches ICM IP
    ...             Example:
    ...             Get ICM IP    ${ICM_NAME}
    [Arguments]         ${ICM_NAME}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${address}=     Get From Dictionary     ${IC['members'][0]}   ipAddressList
    #Log     Logged ipaddress list : ${address}    console=True
    :FOR     ${a}    IN     @{address}
    \    Continue For Loop If    '${a['ipAddressType']}'!='Ipv4Dhcp'
    \    ${ipaddress}=     Get From Dictionary     ${a}   ipAddress
    ${ipadress1}     Convert to String    ${ipaddress}
    Log     \nIPV4 for ICM ${ICM_NAME} is: ${ipadress1}    console=True
    [Return]    ${ipadress1}

Cleanup
    [Documentation]    Cleans Up All OneView Resources
    Set Suite Variable    ${WFT2_CONTINUE_ON_ERROR}    TRUE
    # Remove All OV Resources
    Remove All Server Profiles     force=${True}
    Remove All LEs    force=${True}    timeout=1800    interval=10
    Remove All Enclosure Groups
    Remove All LIGs
    Remove All Networks Sets Async
    Remove All Ethernet Networks Async

Cleanup LIG
    [Documentation]    Cleans Up All Existing LIGs And Dependent Resources
    Set Suite Variable    ${WFT2_CONTINUE_ON_ERROR}    TRUE
    # Remove All OV Resources
    Remove All Server Profiles     force=${True}
    Remove All LEs    force=${True}    timeout=1800    interval=10
    Remove All Enclosure Groups
    Remove All LIGs

Cleanup Server Profiles
    [Documentation]    Cleanup All Existing Server Profiles
    Set Suite Variable    ${WFT2_CONTINUE_ON_ERROR}    TRUE
    Remove All Server Profiles     force=${True}

Setup1
    [Documentation]
    Log     \n CREATING ETHERNET NETWORKS    console=True
    Run Keyword If  ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable   ${ethernet_networks}
    Log     \n CREATING NETWORK SETS    console=True
    Run Keyword If    ${networksets} is not ${null}      Add Network Sets from variable  ${networksets}

Setup2
    [Documentation]
    Log     \n CREATING LIG    console=True
    ${resp}=    Run Keyword If    ${ligs} is not ${null}   Add LIG from variable async new   ${ligs}
    Wait For Task2    ${resp}    timeout=200    interval=10
    Log     \n CREATING EG    console=True
    Run Keyword If    ${encl_group} is not ${null}      Add Enclosure Group from variable async    ${encl_group}
    Log     \n Adding Logical Enclosure    console=True
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}
