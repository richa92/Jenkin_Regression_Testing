*** Settings ***
Documentation       Suite_2 OVF4515 Pauseflood detection and protection using FusionLibrary API keywords
Variables       OVF4515_datavariable.py
Library     OVF4515_datavariable
Library         json
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         SSHLibrary
Library            SSHLibrary
Library            Telnet
Library             Dialogs
Library             back_ping.py
Resource               ../../../../Resources/api/fusion_api_resource.txt
#Resource            ../../../resource/fusion_api_all_resource_files.txt
#Suite Setup               Clean OV
#Suite Teardown     Clean OV

*** Variables ***
${number}    5
${flag}    Windows
${APPLIANCE_IP}     192.168.144.171
#For SPP update need to place the SPP bundles in the following folder structure
${SPP_Path_old}             ${CURDIR}/SPP/HF_supported/${old_SPP_bundle}
${SPP_Path_new}             ${CURDIR}/SPP/HF_supported/${latest_SPP_bundle}
#${unsupported_SPP_path}             ${CURDIR}/SPP/HF_unsupported/${unsupported_SPP_bundle}
${name}    pingServerIP.txt
${Enet_switch_ip}    192.168.144.119
${file_path}    ${CURDIR}/pingServerIP.txt
${stat}     statistics
${name}    serverip.txt
${time_out}    Request timed out
${Dest_unreachable}    Destination host unreachable.

*** Test Cases ***
1 Login to Appliance and Setup
	[Documentation]    Initial Setup
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    Log    logging in appliance
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

#Initial Setup
    ${l} =  Get Length  ${ethnets}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${enet_resp} =    Fusion Api Create Ethernet Network    body=${ethnets[${x}]}
    \   Run Keyword If  '${enet_resp['status_code']}' != '202'  Fail    ELSE    Log  \n-Networks created successfully
    Log  \n Creating LIG
    ${task} =   Add LIG from variable    ${ligs['lig1']}
    Run Keyword If  '${task['status_code']}' != '200'   fail    ELSE    Log  \n-LIG created successfully
#Create EG
${Enc_Body}     Copy Dictionary     ${enc_group_ME}
    ${eg_resp}    Add Enclosure Group from variable    ${Enc_Body}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  Log    EG created successfully
#Creating LE
    ${task} =   Add Logical Enclosure from variable     ${LE[0]}
    Run Keyword If  '${task['status_code']}' != '200'  Fail    ELSE  Log   \n-created LE successfully
Create Server Profile
    Power off ALL servers    PressAndHold
	Remove All Server Profiles
    ${responses}=   Add Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Sleep   5min
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

TC_34_OVF4515_API_37 Remove the server connections in server profile when Pause flood condition occurred and then check the behavior of pause flood protection on downlink port confirm that downlink port pause flood condition cleared or not and check the warning alert messages are shown on interconnect page
	[Documentation]    Remove the server connections in server profile when Pause flood condition occurred and then check the behavior of pause flood protection on downlink port confirm that downlink port pause flood condition cleared or not and check the warning alert messages are shown on interconnect page
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

    Power off ALL servers    PressAndHold
    Log      Waiting 2 minutes for server to Power OFF...
    Sleep   2min

#Remove server connection and validate pauseflood alert messages and port status
    Edit Server Profiles from variable    ${server_profiles1}
    ${responses}=   Edit Server Profile    ${server_profiles1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Log      Waiting 6 minutes for server to Power ON and boot...
    Sleep   8min
    Wait Until Keyword Succeeds    1 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PFD_PORT_STATUS_REASON}
    Log  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Wait Until Keyword Succeeds    1 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    1 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Power off ALL servers    PressAndHold
    Log      Waiting 2 minutes for server to Power OFF

TC_35_OVF4515_API_38 Re-add the removed server connections in server profile and then check the behavior of pause flood protection on downlink port confirm that downlink port pause flood condition cleared or not
	[Documentation]    Re-add the removed server connections in server profile and then check the behavior of pause flood protection on downlink port confirm that downlink port pause flood condition cleared or not
    ${responses}=   Edit Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Log      Waiting 6 minutes for server to Power ON and boot...
    Sleep   8min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PFD_PORT_STATUS_REASON}
    Log  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC36_OVF4515_API_39 Check the behavior of pause flood protection feature by Removing the uplinkset which is in pause flood condition, ensure that Downlink port pause flood condition not cleared, also respective warning alert should be active state in IC and server profile page
	[Documentation]    Check the behavior of pause flood protection feature by Removing the uplinkset which is in pause flood condition, ensure that Downlink port pause flood condition not cleared, also respective warning alert should be active state in IC and server profile page

    Wait Until Keyword Succeeds    5 min   15s    Power off ALL servers
    Remove All Server Profiles
    ${responses}=   Add Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Log    Waiting 5 minutes for server to boot
    Sleep   8min
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    5 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify Server Ping Fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#remove the uplinkset which is in pauseflood condition and verify the pauseflood alert messages and portstatus
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig6']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    20 min        1 min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON_NONE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    ${count}     Get Alert count   ${Alert[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_37_OVF4515_API_40 Check the behavior of pause flood protection feature/function  by re-adding the removed uplinkset and verify the uplink and downlink port status
	[Documentation]    Check the behavior of pause flood protection feature/function  by re-adding the removed uplinkset and verify the uplink and downlink port status
#Readding uplinkset and verify the pauseflood alert messages and portstatus
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['LIG1']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    20 min        1 min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify Server Ping Fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_38_OVF4515_API_41 Verify the pause flood condition should be cleared when disable the TOR port that is connected to Nitro uplink that is affected by pause flood condition
	[Documentation]    Verify the pause flood condition should be cleared when disable the TOR port that is connected to Nitro uplink that is affected by pause flood condition
#Enable the pauseflood condition verifying pause flood alert available and uplink downlink port status
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    ValidateLIG Pause Flood Protect     ${LIGname}   ${PFPtrue}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    25 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify Server Ping Fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Edit switchport to disable the uplink interface verifying pause flood alert available and uplink downlink port status
    Edit switch port    ${Enet_switch_ip}   ${switchport_interface}   ${disable_command}
    Wait Until Keyword Succeeds    30 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON_NONE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}

TC_39_OVF4515_API_42 Verify the pause flood condition should reappear when enable the TOR port that is connected to Nitro uplink that is affected by pause flood condition
	[Documentation]    Verify the pause flood condition should reappear when enable the TOR port that is connected to Nitro uplink that is affected by pause flood condition
    Edit switch port    ${Enet_switch_ip}   ${switchport_interface}   ${enable_command}
    Wait Until Keyword Succeeds    25 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    15 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Clear pauseflood condition by reset port protection and verify server ping successful
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
    Wait Until Keyword Succeeds     5 min   15s      Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_40_OVF4515_API_45 Verify the pause flood warning/critical alert messages on each server profile connections when server profile contains more than one connections
	[Documentation]    Verify the pause flood warning/critical alert messages on each server profile connections when server profile contains more than one connections
	Power off ALL servers    PressAndHold
	Remove All Server Profiles
    ${responses}=   Add Server Profile    ${server_profiles_multi_ICM1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles_1[0]['serverHardwareUri']}
    ${responses}=   Add Server Profile    ${server_profiles_2[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles_2[0]['serverHardwareUri']}
    Sleep   8min
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface_1}   ${ic_set_pf}

    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}     ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}     ${DL_PORT_NAME[1]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_2}     ${DL_PORT_NAME_ICM2[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_2}     ${DL_PORT_NAME_ICM2[1]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}

    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}        ${Alert_type[1]}

    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${DOWNLINK_MSG_2}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}

    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}


    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface_1}   ${ic_off_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_off_pf}
    Reset Loop and Pause Flood Protection    ${ICM_1}
    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}        ${Alert_type[1]}

    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${DOWNLINK_MSG_2}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}

    Wait Until Keyword Succeeds     10min    5s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}

TC_41_OVF_4515_API_46 Earlier warning/critical Alert message should be cleared and updated alert message should appear when two uplink ports affected by pause flood protection sequentially
	[Documentation]    Earlier warning/critical Alert message should be cleared and updated alert message should appear when two uplink ports affected by pause flood protection sequentially
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
	Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     340s    15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}   ${Alert_type[0]}
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig10']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    20 min        1 min
	Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[1]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface_1}   ${ic_set_pf}
    Wait Until Keyword Succeeds     340s    15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}   ${Alert_type[0]}
    Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[1]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     340s    5s      Validate Alert Message      ${UPLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_off_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface_1}   ${ic_off_pf}
    Wait Until Keyword Succeeds     340s    25s      Validate Alert Message      ${UPLINK_MSG1}    ${varTrue}    ${Alert[2]}   ${Alert_type[0]}
    Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
	Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[1]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig3']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    20 min        1 min

TC_42_OVF4515_API_49 Create pause flood condition on uplink ports then effuse on and effuse off the Nitro on the same slot then cross check the state of interconnect pause flood condition on downlink and uplink ports alert messages on interconnect and server page
	[Documentation]     Create pause flood condition on uplink ports then effuse on and effuse off the Nitro on the same slot then cross check the state of interconnect pause flood condition on downlink and uplink ports alert messages on interconnect and server page
#generating pauseflood condition in uplink and downlink ports
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

#Efuse interconnect and Verifying the pauseflood alert messages and portstatus
    Efuse Interconnect         ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    Wait Until Keyword Succeeds    5 min   15s    Validate Interconnect state    ${INTERCONNECTS}   ${IC_ABSENT_STATE}

	Efuse Interconnect         ${HOST}    ${EM_SN}    ${Efuse_Action[1]}    ${Bay_No[0]}
    Wait Until Keyword Succeeds    15 min   45s    Validate Interconnect state    ${INTERCONNECTS}   ${IC_CONFIG_STATE}
    Reset interconnects        ${INTERCONNECTS1}    ${RESET}    ${RESET_STATE}    ${IC_CONFIG_STATE}     ${POWER_ON}
    Sleep    5min
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

   	Wait Until Keyword Succeeds    15 min   15s    Verify Server Ping Successful    ${number}    ${IC_IP}    ${name}    ${flag}    ${file_path}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}

	Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}

#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_43_OVF4515_API_51 Verify that Reapply configuration via LE level should be success when Pause flood condition occurred ensure that Corresponding warning and critical alerts should not be cleared on Interconnects and server profile Page and cross check that uplink and downlink ports should be reflected with pause flood detected and check the uplink and downlink port state
	[Documentation]    Verify that Reapply configuration via LE level should be success when Pause flood condition occurred ensure that Corresponding warning and critical alerts should not be cleared on Interconnects and server profile Page and cross check that uplink and downlink ports should be reflected with pause flood detected and check the uplink and downlink port state
#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    5 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Perform re-apply configuration in LE and verify the pauseflood alert messages and portstatus
    ${le_uri} =     Get LE URI   ${LE_name}
    ${resp} =    Fusion Api Reapply Le Configuration    ${le_uri}
    ${task} =   Wait For Task    ${resp}    600s    2s
    ${valDict} =    Create Dictionary   status_code=${200}
    Validate Response   ${task}  ${valDict}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}
#Verifying server ping successful after clearing pauseflood condition
    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_44_OVF4515_API_52 Verify that Reapply configuration on LI should be success when Pause flood condition occurred ensure that Corresponding warning and critical alerts should not be cleared on Interconnects and server profile Page and cross check that uplink and downlink ports should be reflected with pause flood detected and check the uplink and downlink port state
	[Documentation]    Verify that Reapply configuration on LI should be success when Pause flood condition occurred ensure that Corresponding warning and critical alerts should not be cleared on Interconnects and server profile Page and cross check that uplink and downlink ports should be reflected with pause flood detected and check the uplink and downlink port state
#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    5 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Perform re-apply configuration in LI and verify the pauseflood alert messages and portstatus
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =    Fusion Api Reapply LI Configuration    ${li_uri}
    ${task} =   Wait For Task    ${resp}    600s    2s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}  ${valDict}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}
#Verifying server ping successful after clearing pauseflood condition
    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_45_OVF4515_API_54 Perform Backup and Restore operation when supported firmware version on Nitro module and then check behavior /default value of pause flood protection function
	[Documentation]    Perform Backup and Restore operation when supported firmware version on Nitro module and then check behavior /default value of pause flood protection function
#generating pauseflood condition in uplink and downlink ports

    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
 	Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}

    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds   10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Perform Backup Operation
    ${Response}     Fusion Api Create Backup
    Run keyword unless  ${Response['status_code']}== 202    Fail    "Unable to Create Backup"
    Sleep   180sec
    ${Response}     Fusion Api Get Backup
    Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
#Restore from backup and verify the pauseflood alert messages and portstatus are available
    Restore From Backup
    Sleep   120s
    Wait Until Keyword Succeeds    10 min   15s    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_46_OVF4515_API_55 Check the behavior of pause flood protection function when VP LAG feature enabled on Downlinks
    [Documentation]    Check the behavior of pause flood protection function when VP LAG feature enabled on Downlinks
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

	Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_off_pf}
    Reset Loop and Pause Flood Protection    ${ICM_1}
    ${Del_bond}    Build Commands For Delete Bonding    ${Delete_Network_bond}    ${Delete_bond_slave_1}    ${Delete_bond_slave_2}    ${ilo1_details}    ${server1_details}    ${up_interface}    ${Bond_1}

    Power off ALL servers    PressAndHold
	Remove All Server Profiles
    ${responses}=   Add Server Profile    ${server_profiles_LAG1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}

    Sleep   5min

    ${adapter}    Get Valid Interface List    ${ilo1_details}    ${server1_details}    ${up_interface}    ${down_interface}

    ${Len_of_adapter}    Get Length    ${adapter}
    ${Adapterlist}    Create list
    :FOR    ${x}    INRANGE    0    ${Len_of_adapter}
    \    ${temp}    Convert To String    ${adapter[${x}]}
    \    Append to list    ${Adapterlist}    ${temp}
    Log    ${Adapterlist}
    ${cmd_out}    Build Commands For Create Bonding    ${Adapter_1}    ${Adapter_2}    ${Create_bond}    ${Master_slave_1}    ${Master_slave_2}    ${Bond_slave_1}    ${Bond_slave_2}    ${Network_bond}    ${Master}    ${Modify_bond}    ${Modify_ip}    ${Modify_manual}    ${Adapterlist}    ${Bond_1}    ${space}    ${Ip_bond_1}    ${iLo1_details}    ${server1_details}


    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}   ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_off_pf}
    Reset Loop and Pause Flood Protection    ${ICM_1}
    ${Del_bond}    Build Commands For Delete Bonding    ${Delete_Network_bond}    ${Delete_bond_slave_1}    ${Delete_bond_slave_2}    ${ilo1_details}    ${server1_details}    ${up_interface}    ${Bond_1}

TC_47_OVF4515_API_56 Verify pause flood condition after firmware upgrade supported to supported version
	[Documentation]    Verify pause flood condition after firmware upgrade supported to supported version
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
#generating pauseflood condition in uplink and downlink ports

#verifying pauseflood alert messages are available in SP and interconnects page, also verifying the uplink and downlink port status
	Edit Pauseflood Condition    ${IC_IP}    ${uplink_interface}    ${ic_set_pf}
    Edit Pauseflood Condition    ${IC_IP}    ${downlink_interface}    ${ic_set_pf}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason     ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}    ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verifying server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    #Wait Until Keyword Succeeds    2 min   15s    Power off ALL servers
#upload firmware bundle
    Firmware bundle upload    ${SPP_Path_new}
    Sleep    120s
#upgrading firmware
    Validate Interconnect firmware version    ${INTERCONNECTS}    ${ic_firmwareVersion_old}
    Interconnect Firmware Update in LI    ${latest_SPP_bundle}    ${LI}    @{INTERCONNECTS}    ${ic_firmwareVersion_new}
    Validate Interconnect firmware version         ${INTERCONNECTS}    ${ic_firmwareVersion_new}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    ${resp}=   Fusion Api Remove Firmware Driver     uri=/rest/firmware-drivers/${latest_SPP_bundle_name}   api=${600}
    Power on server      ${SERVER_BAY}
    Log      Waiting 5 minutes for server to Power ON and boot
    Sleep   5min
#verifying pauseflood alert messages are unavailable in SP and interconnects page, also verifying the uplink and downlink port status
    Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    20 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    20 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    ${count}     Get Alert count    ${Alert[2]}
    #${count}     Get Alert count    ${Alert[1]}

    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}     ${Alert_type[0]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     1 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_48_OVF4515_API_58 Verify pause flood condition after refresh of server hardware
	[Documentation]    Verify pause flood condition after refresh of server hardware
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Power off ALL servers    PressAndHold
	Remove All Server Profiles
    ${responses}=   Add Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Sleep   5min
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

#generating pauseflood condition in uplink and downlink ports
	#Fetching ICM IP
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Verifying the pauseflood alert messages and portstatus after server hardware refresh
    Perform Server Hardware Refresh    ${SERVER_BAY}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_49_OVF4515_API_59 Verify pause flood condition after restarting the appliance
	[Documentation]    Verify pause flood condition after restarting the appliance
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
#generating pauseflood condition in uplink and downlink ports
 	Sleep    2 minutes
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Verifying the pauseflood alert messages and portstatus is same after restarting appliance
    ${resp} =     Fusion Api Appliance Shutdown     REBOOT
    sleep   180s
    Wait For Appliance To Become Pingable   ${APPLIANCE_IP}   20 min     3 min
    sleep   10min
    Wait Until Keyword Succeeds    40 min   15s    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Wait Until Keyword Succeeds    10 min   15s    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_50_OVF4515_API_60 Verify pause flood condition after deleting the network connected to the server profile in pause flood condition
	[Documentation]    Verify pause flood condition after deleting the network connected to the server profile in pause flood condition

    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Deleting networks and Verifying the pauseflood alert messages and portstatus
    ${resp} =   Fusion Api Delete Ethernet network  name=Net3
    ${resp} =   Fusion Api Delete Ethernet network  name=Net2
    ${resp} =   Fusion Api Delete Ethernet network  name=Net_1
    Wait For Task2    ${resp}    timeout=300    interval=30
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON_NONE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    ${count}     Get Alert count   ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_51_OVF4515_API_61 Verify pause flood condition after re-adding the deleted the network connected to the server profile in pause flood condition
	[Documentation]    Verify pause flood condition after re-adding the deleted the network connected to the server profile in pause flood condition
#Re-adding Ethernet network
#Re-adding Ethernet network
    Log  \n creating Ethernet Network
    ${l} =     Get Length  ${ethnets}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${enet_resp} =    Fusion Api Create Ethernet Network    body=${ethnets[${x}]}
    \   Run Keyword If  '${enet_resp['status_code']}' != '202'  Fail    \n\nFailed to create ethernet #network    ${enet_resp['message']}
    \   ...             ELSE    Log  \nSuccessfully created the ethernet network
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig3']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    30 min        1 min
    Power off ALL servers    PressAndHold

#Readding networks in server connections and Verifying the pauseflood alert messages and portstatus

    ${responses}=   Edit Server Profile    ${server_profiles1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15

    ${responses}=   Edit Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Log    Waiting 5 minutes for server to boot
    Sleep   7min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    10 min   15s    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_52_OVF4515_API_62 Verify pause flood condition after re-adding the deleted the network connected to the server profile in pause flood condition
	[Documentation]    Verify pause flood condition after re-adding the deleted the network connected to the server profile in pause flood condition
#Re-adding Ethernet network
    Log  \n creating Ethernet Network
    ${l} =     Get Length  ${ethnets}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${enet_resp} =    Fusion Api Create Ethernet Network    body=${ethnets[${x}]}
    \   Run Keyword If  '${enet_resp['status_code']}' != '202'  Fail    \n\nFailed to create ethernet #network    ${enet_resp['message']}
    \   ...             ELSE    Log  \nSuccessfully created the ethernet network
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig3']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    30 min        1 min
    Power off ALL servers    PressAndHold

#Readding networks in server connections and Verifying the pauseflood alert messages and portstatus

    ${responses}=   Edit Server Profile    ${server_profiles1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15

    ${responses}=   Edit Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    Power on server     ${server_profiles[0]['serverHardwareUri']}
    Log    Waiting 5 minutes for server to boot
    Sleep   7min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    10 min   15s    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_53_OVF4515_API_63 Verify pause flood condition after removing the uplinkport from the uplinkset the network connected to the server profile in pause flood condition
	[Documentation]    Verify pause flood condition after removing the uplinkport from the uplinkset the network connected to the server profile in pause flood condition

    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    #Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Edit LIG to remove uplink port and Verifying the pauseflood alert messages and portstatus
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig9']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds     10 min   15s      Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON_NONE}
    Wait Until Keyword Succeeds     10 min   15s      Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    #Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varFalse}    ${Alert[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#disabling the pauseflood condition
    #Edit Pauseflood Condition    ${IC_IP}    ${uplink_interface}    ${ic_off_pf}
    Edit Pauseflood Condition    ${IC_IP}    ${downlink_interface}    ${ic_off_pf}
    Reset Loop and Pause Flood Protection    ${ICM_1}

TC_54_OVF4515_API_64 Verify pause flood condition after removing the pauseflood condition and re-adding the removed uplinkport from the uplinkset the network connected to the server profile in pause flood condition
	[Documentation]    Verify pause flood condition after removing the pauseflood condition and re-adding the removed uplinkport from the uplinkset the network connected to the server profile in pause flood condition.
#Readding uplinkport and verifying the pauseflood alert messages and portstatus
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['LIG1']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    #Verifying pause flood alerts are not available

    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_55_OVF4515_API_66 Verify that server down link ports configured for FCoE can go to pause flood protected state in addition to ports configured for Ethernet
	[Documentation]    Verify that server down link ports configured for FCoE can go to pause flood protected state in addition to ports configured for Ethernet
#Creating FCoE network and adding it to uplinkset
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}

    ${resp}     Fusion Api Create Fcoe Network      body=${fcoenets[0]}
    Run Keyword If  '${resp['status_code']}' != '202'  Fail    ELSE  Log   \n-FCoE network created successfully
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['lig7']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    120 min        1 min
    Power off ALL servers    PressAndHold
    #Log      Waiting 2 minutes for server to Power OFF
    #Sleep   2min
#Editing server profil with FCoE connection
    ${responses}=   Edit Server Profile    ${server_profiles1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
	${responses}=   Edit Server Profile    ${server_profile_fcoe[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15

    Power on server     ${server_profiles[0]['serverHardwareUri']}

    Sleep   5min
#generating pauseflood condition in downlink ports and verifying pauseflood alerts
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}

#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    Power off ALL servers    PressAndHold
#removing FCoE connection from server profile and uplinkset
    ${responses}=   Edit Server Profile    ${server_profiles1[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
    ${responses}=   Edit Server Profile    ${server_profiles[0]}
    Wait For Task2    ${responses}    timeout=3000    interval=15
	${LIG_data} =   Create List
	Append to list    ${LIG_data}    ${ligs['LIG1']}
    ${resp}    Edit LIG    ${LIG_data}
    Wait For Task2    ${resp}    timeout=300    interval=15
    Perform an Update From Group    ${li}    120 min        1 min
    Power on server     ${server_profiles[0]['serverHardwareUri']}

    Sleep   5min

    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_off_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_off_pf}
    Reset Loop and Pause Flood Protection    ${ICM_1}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
	${count}     Get Alert count   ${Alert[0]}
	${count_locked}     Get Alert count   ${Alert[1]}
    Run Keyword If     ${count}!=0    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varFalse}    ${Alert[0]}    ${Alert_type[0]}
    Run Keyword If     ${count}!=0    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varFalse}    ${Alert[0]}    ${Alert_type[1]}
    Run Keyword If     ${count}!=0    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varFalse}    ${Alert[0]}    ${Alert_type[1]}
    Run Keyword If     ${count_locked}!=0    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varFalse}    ${Alert[1]}    ${Alert_type[2]}
    Run Keyword If     ${count_locked}!=0    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varFalse}    ${Alert[1]}    ${Alert_type[2]}
	${del_resp} =    Fusion Api Delete Alert
	${task}      Wait For Task     ${del_resp}    2min   20s
	Run keyword unless	${task['status_code']}== 200	Fail	"Unable to Clear Alert Message"

TC_56_OVF4515_API_69 Take a back up with uplink and downlink in pause flood condition Reset the pause flood condition and ensure that the alerts disappears at both up and down link ports Remove the condition that causes the PF to occur Now restore the configuration Verify that the critical alert at downlink and warning alerts at uplink re-appears after restore operation
	[Documentation]     Take a back up with uplink and downlink in pause flood condition Reset the pause flood condition and ensure that the alerts disappears
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
#generating pauseflood condition in uplink and downlink ports
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#verifying pauseflood alert messages are available in SP and interconnects page, also verifying the uplink and downlink port status
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verifying server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#Perform Backup Operation
	Log    \ncreate backup
    ${Response}     Fusion Api Create Backup
    Run keyword unless  ${Response['status_code']}== 202    Fail    "Unable to Create Backup"
    Sleep   200sec
    ${Response}     Fusion Api Get Backup
    Run keyword unless  ${Response['status_code']}== 200    Fail    "Unable to Get the latest backup"
#clear pauseflood condition and restore from backup
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    Log    \nrestore backup
    Restore From Backup
    Wait Until Keyword Succeeds    20 min   15s    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    ${count}     Get Alert count   ${Alert[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC_57_OVF4515_API_70 Verify that after remove and reinsert the server when the uplink and downlink ports are in pause flood condition it clear the Pause flood alerts in downlink and uplink ports
	[Documentation]    Verify that after remove and reinsert the server when the uplink and downlink ports are in pause flood condition it clear the Pause flood alerts in downlink and uplink ports
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
#generating pauseflood condition in uplink and downlink ports
    Validate Interconnect state    ${INTERCONNECTS}    ${IC_CONFIG_STATE}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
#Verifying the pauseflood alert messages and portstatus
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#verify server ping fails on pauseflood condition
    Verify Server Ping Fails        ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#efuse on/off server and Verifying the pauseflood alert messages and portstatus
    Efuse Server         ${HOST}    ${EM_SN}    ${Efuse_Action[0]}  ${Server_No}
    Efuse Server         ${HOST}    ${EM_SN}    ${Efuse_Action[1]}  ${Server_No}
    Log   \n Wait for the server to be added
    Sleep    6min
    Power on server      ${SERVER_BAY}
    Sleep    10min
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#Verify server ping fails on pauseflood condition
    Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds    5 min   15s    Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

TC58_OVF4515_API_71 When the ICM is maintenance state ie during support dump collection is it possible for the downlink ports to move to pause flood protected and uplink ports to pause flood detected condition if that condition is triggered
	[Documentation]    When the ICM is maintenance state ie during support dump collection is it possible for the downlink ports to move to pause flood protected and uplink ports to pause flood detected condition if that condition is triggered
#create LE support dump
	${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    ${le_uri} =    Get LE URI      ${LE_name}
    ${logicalEnclosureId}=    Fetch From Right        ${le_uri}      /
    ${payload} =    Build support dump payload      Mydump      ${true}
    ${Response}=    Fusion Api Get Logical Enclosure Support Dump   ${payload}   ${logicalEnclosureId}
#Generate pauseflood when ICM is in maintenance state
    Wait Until Keyword Succeeds    5 min   0.25s    Validate Interconnect state    ${INTERCONNECTS}    ${IC_MAINTENANCE_STATE}
    ${ICM_IP}   Get ICM IP   ${ICM_1}
    Set Global Variable    ${IC_IP}    ${ICM_IP}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_set_pf}
    Wait Until Keyword Succeeds    15s   1s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Wait Until Keyword Succeeds    15s   1s     Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    15s   1s     Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    ${count}     Get Alert count   ${Alert[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Run Keyword If    ${count}!=0     Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    ${task} =                       Wait For Task           ${Response}     45min    1min
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}

#verifying pauseflood alert messages are available in SP and interconnects page, also verifying the uplink and downlink port status
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[0]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[1]}    ${Alert_type[2]}
#clearing the pauseflood condition and performing reset port protection
    Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
#Verifying server ping successful after clearing pauseflood condition
    Wait Until Keyword Succeeds     5 min   15s      Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}

***Keywords***
ValidateLIG Pause Flood Protect
    [Documentation]    Validating if PauseFloodProtection value in LIG
    ...             Example:
    ...             ValidateLIG Pause Flood Protect   ${LIG}   ${varFalse}
    [Arguments]     ${LIGname}    ${PFPValue}
    ${ligResp} =         Get LIG Member      ${LIGname}
    ${es} =     Get From Dictionary        ${ligResp}    ethernetSettings
    ${pfp} =     Get From Dictionary        ${es}    enablePauseFloodProtection
    Should be Equal as Strings    ${pfp}        ${PFPValue}


Validate PortStatus And PortStatusReason
    [Documentation]    Validating if the ports contain the specified portstatus and portStatusReason
    ...             Example:
    ...             Validate PortStatus And PortStatusReason   ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    [Arguments]        ${ICM_NAME}      ${portName}          ${portStatus}      ${portStatusReason}
    ${l} =  Get Length  ${portName}

    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port}      Get Port Data From Port Name        ${ICM_NAME}    ${portName}
    \   ${pS}       Get From Dictionary     ${port}    portStatus
    \   ${pSR}      Get From Dictionary     ${port}    portStatusReason
    \   Should be Equal as Strings    ${pS}        ${portStatus}
	\   Log to console    Port status is ${pS}
	\   Log to console    Port status reason is ${portStatus}
    \   run keyword if    '${pS}'!='${portStatus}'    Fail    "Port Status is not matching"
    \   run keyword if    '${pSR}'!='${portStatusReason}'    Fail    "Port Status Reason is not matching"

Validate SubPortStatus And SubPortStatusReason
    [Documentation]    Validating if the subports contain the specified portstatus and portStatusReason
    ...             Example:
    ...             Validate SubPortStatus And SubPortStatusReason   ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}
    [Arguments]        ${ICM_NAME}      ${portName}          ${portStatus}      ${portStatusReason}
    ${l} =  Get Length  ${portName}

    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port}      Get Port Data From Port Name        ${ICM_NAME}    ${portName}

    \   ${subports}       Get From Dictionary     ${port}    subports
    \   ${subportSR}      Get From Dictionary     ${subports[0]}    portStatusReason
    \   ${subport_status}      Get From Dictionary     ${subports[0]}    portStatus
	\   Log to console    ${subports}    ${subportSR}
    \   run keyword if    '${subport_status}'!='${portStatus}'    Fail    " sub port Status is not matching"
    \   run keyword if    '${subportSR}'!='${portStatusReason}'    Fail    "sub Port Status Reason is not matching"

Edit LI
    [Documentation]    Editing LI and validating with expected Pauseflood condition
    ...             Example:
    ...             Edit LI   ${li}    ${li_disable}        ${varFalse}
    [Arguments]        ${li}    ${li_set}    ${expected}
    ${body} =    Build LI body    ${li_set}
	Log to console    ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Set to Dictionary    ${body}    id    ${id}
    Set to Dictionary    ${body}    dependentResourceUri    ${li_uri}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     240s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ValidateLI Pause Flood Protection   ${li}    ${expected}

Build LI body
    [Documentation]    Building LI with enablePauseFloodProtection value
    ...             Example:
    ...             Build LI body  ${li}
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enablePauseFloodProtection} =           Get Variable Value  ${liedit['enablePauseFloodProtection']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enablePauseFloodProtection=${enablePauseFloodProtection}
    ...
    [Return]    ${body}

Perform an Update From Group
    [Documentation]    Performing update from Group in LI
    ...             Example:
    ...             Perform an Update From Group  ${li}   20min   1min
    [Arguments]        ${li}=${LE}-${LIG1}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Get LE URI
    [Documentation]    Getting LE uri
    ...             Example:
    ...             Get LE URI  ${LE}
    [Arguments]     ${LE}
    ${resp} =   Fusion Api Get Logical Enclosure        param=?filter="'name'=='${LE}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Perform Update From Group in LE
    [Documentation]    Performing update from Group in LE
    ...             Example:
    ...             Perform Update From Group in LE   ${LE}   20min   1min
    [Arguments]       ${le}     ${timeout}=15 min    ${interval}=15s
    ${le_uri}    Get LE URI    ${le}
    ${resp} =       Fusion Api Update Logical Enclosure    ${le_uri}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI Pause Flood Protection
    [Documentation]    Validating Pause Flood Protection in LI
    ...             Example:
    ...             ValidateLI Pause Flood Protection   ${li}    ${varFalse}
    [Arguments]        ${li_name}    ${expected}
    ${li_uri} =     Get LI URI   ${li_name}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${pfpFound} =     Get From Dictionary        ${es}    enablePauseFloodProtection
    ${status} =    Should Be Equal    ${pfpFound}    ${expected}
    run keyword if    '${status}'=='False'    Fail    "Pause flood protection value not same as expected"
    #Log    \nSuccessfully Validated PauseFloodProtection value in LI



Get Port Data From Port Name
    [Documentation]    Fetching given port information
    ...             Example:
    ...             Get Port Data From Port Name    ${ICM_NAME}      ${portName}
    [Arguments]        ${ICM_NAME}      ${portName}
    ${ic} =     Get IC      ${ICM_NAME}
    ${ports} =  Get From Dictionary     ${ic}    ports
    ${l} =     Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${port} =     Get From List   ${ports}    ${x}
    \     Exit For Loop If     '${port['portName']}' == '${portName}'
    [Return]    ${port}

Edit Ports
    [Documentation]    Editing Interconnect ports
    ...             Example:
    ...             Edit Ports    ${downlink_port_disable}    ${interconnects}    ${downlink_ports}
    [Arguments]        ${Port}    ${interconnects}    ${ports}
    ${l}    Get Length    ${Port}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${uri} =    Get IC URI      ${interconnects[0]}
    \   @{id} =     Split String    ${uri}  /
    \   ${port_id} =    Get From List   ${id}   3
    \   ${portid}       catenate    ${port_id}:${ports[${x}]}
    #\   ${portid}       catenate    ${port_id}:${ports}
    \   ${portid1}    convert_unicode_to_string    ${portid}
    \   Set to Dictionary   ${Port[${x}]}  portId     ${portid1}
    \   ${temp_list} =  Create List     ${Port[${x}]}
    \   ${Resp}     Fusion Api Edit Interconnect Ports      ${temp_list}        ${uri}
	\	${LIG_data} =   Create List
	\	Append to list    ${LIG_data}    ${Resp}
    \   ${task} =    Wait For Task2     ${LIG_data}     300


Edit interconnects Power State
    [Documentation]    Editing Interconnect power state
    ...             Example:
    ...             Edit interconnects Power State    ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${IC_CONFIG_STATE}
    [Arguments]        ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${State}
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=${Powerstate}
    \   ...                             value=${Power_edit}
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   5min    10s
    \   ${valDict} =    Create Dictionary   status_code=${200}
    \   ...                                 taskState=Completed
    \   Validate Response   ${task}    ${valDict}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect Power State     ${interconnect}        ${Power_edit}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS}    ${State}

Reset interconnects
    [Documentation]    Resetting the Interconnect
    ...             Example:
    ...             Reset interconnects    ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${IC_CONFIG_STATE}    ${IC_PowerState}
    [Arguments]        ${INTERCONNECTS}    ${Power_edit}    ${Powerstate}    ${State}    ${IC_PowerState}
    :FOR     ${interconnect}   IN   @{INTERCONNECTS}
    \   ${ic_uri} =    Get IC URI    ${interconnect}
    \   ${body} =   Create Dictionary   op=replace
    \   ...                             path=${Powerstate}
    \   ...                             value=${Power_edit}
    \   ${body} =   Create list     ${body}
    \   ${resp} =   fusion api patch interconnect   body=${body}    uri=${ic_uri}
    \   ${task} =   Wait for Task   ${resp}   5min    10s
    \   ${valDict} =    Create Dictionary   status_code=${200}
    \   ...                                 taskState=Completed
    \   Validate Response   ${task}   ${valDict}
    \   Log  \nVerify ${interconnect} is ${Power_edit}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect Power State     ${interconnect}        ${IC_PowerState}
    \   Wait Until Keyword Succeeds    30 min   15s     Validate Interconnect state    ${INTERCONNECTS}    ${State}

Validate Interconnect Power State
    [Documentation]    Validating the power state of Interconnect
    ...             Example:
    ...             Validate Interconnect Power State    ${ICM_1}    ${POWER_STATE}
    [Arguments]        ${ICM_NAME}        ${POWER_STATE}

    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${powerState} =     Get From dictionary    ${IC['members'][0]}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}

Validate Interconnect state
    [Documentation]    Validate state of Interconnect module with the expected state
    ...             Example:
    ...             Validate Interconnect state    ${ICM_1}    ${IC_CONFIG_STATE}
    [Arguments]        ${ICM_NAME}    ${State}
    ${len_ic} =   Get Length   ${ICM_NAME}
    :FOR    ${x}    IN RANGE    0  ${len_ic}
    \    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME[${x}]}'"
    \    ${ic_uri} =     Get From Dictionary     ${IC['members'][0]}     uri
    \    ${resp} =   fusion api get resource     ${ic_uri}
    \    ${resp_state}    convert_unicode_to_string    ${resp['state']}
    \    Should Be Equal As Strings     ${resp_state}    ${State}

Clear Interconnect Port Counters
    [Documentation]    Clearing Interconnect Port Counters
    ...             Example:
    ...             Clear Interconnect Port Counters    ${ICM_1}
    [Arguments]        ${ICM_1}
    ${icUri}       Get IC URI    ${ICM_1}
    ${body}        Create Dictionary
    ${resp}        Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    ${task}    Wait for Task2   ${resp}   600    20
    Log  \n Interconnect Ports of ${ICM_1} cleared successfully

Re-apply Interconnect configuration
    [Documentation]    Reapplying the interconnect configuration
    ...             Example:
    ...             Re-apply Interconnect configuration    ${ICM_1}
    [Arguments]        ${ICM_1}
    ${icUri}        Get IC URI    ${ICM_1}
    ${resp}         fusion api reapply interconnect configuration        ${icUri}
    ${task}         Wait For Task   ${resp}     750s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}

Perform Enclosure Refresh
    [Documentation]    Performing refresh of enclosure
    ${encs} =   Fusion Api Get Enclosures
    :FOR    ${enc}  IN  @{encs['members']}
    \       ${resp} =      fusion_api_refresh_enclosure     uri=${enc['uri']}/refreshState
    \       ${task} =     Wait For Task    ${resp}     600s    10s
    \       ${val} =       Create Dictionary   taskState=Completed
    \       ${result} =    Validate Response    ${task}    ${val}

Perform Server Hardware Refresh
    [Documentation]    Performing server hardware refresh
    ...             Example:
    ...             Perform Server Hardware Refresh    ${server_hardware}
    [Arguments]        ${server_hardware}
    ${hardware} =   Get Server Hardware URI    ${server_hardware}
    ${resp} =      fusion_api_refresh_server_hardware       uri=${hardware}
    ${task} =      Wait For Task    ${resp}     350s    60s
    ${val} =       Create Dictionary   taskState=Completed
    ${result} =    Validate Response    ${task}    ${val}

Reset Loop and Pause Flood Protection
    [Documentation]    Performing reset loop and port protection
    ...             Example:
    ...             Reset Loop and Pause Flood Protection    ${ICM_1}
    [Arguments]        ${ICM_1}
    ${icUri}        Get IC URI    ${ICM_1}
    ${resp}         fusion api reset loop and pause flood protection        ${icUri}
    ${task}         Wait For Task   ${resp}     700s    10s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}

Get Alert count
    [Documentation]    Validating the 'Active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}
    [Arguments]     ${Alerts}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    ${Count}    Get From Dictionary    ${Response}    count
    [Return]    ${Count}

Edit Server Profiles from variable
    [Documentation]   Editing the existing Server Profiles
    ...             Example:
    ...             Edit Server Profiles from variable    ${profiles}
    [Arguments]     ${profiles}

    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   ${shuri} =  Get from Dictionary     ${profile}    serverHardwareUri
    \   ${name}    Get from Dictionary     ${profile}    name
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}    serverHardwareUri   ${uri}
    \   ${eg} =     Get from Dictionary     ${profile}    enclosureGroupUri
    \   ${uri} =    Common URI Lookup by name   ${eg}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary     ${profile}  enclosureUri
    \   ${uri} =    Common URI Lookup by name   ${enc}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   Update connections in profile    ${profile}
    \   ${resturi} =    Get Profile Uri    ${name}
    \   ${eTag} =   Get Profile ETag    ${name}
    \   Set to Dictionary   ${profile}  eTag     ${eTag}
    \   ${resp} =   Fusion Api Edit Server Profile   ${profile}     uri=${resturi}
    \   ${task} =   Wait For Task   ${resp}     timeout=10 mins      interval=10s
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   @{message} =    Get From dictionary     ${task}     taskErrors
        :FOR    ${mess}   IN   @{message}
        \   ${dict} =   Get from Dictionary     ${mess}     recommendedActions
        \   Run Keyword If  '${dict[0]}' == 'errormessage'  Exit For Loop
    \   Should Match Regexp     ${task_state}   ((?i)Warning|Error)

Get Profile Uri
    [Documentation]    Getting Server Profile URI
    ...             Example:
    ...             Get Profile Uri    ${name}
    [Arguments]    ${name}

    ${profiles} =   Fusion Api Get Server Profiles  param=?sort=name:ascending

    ${l} =  Get Length  ${profiles['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Log      ${profiles['members'][${x}]['name']}
    \   Run Keyword If  '${profiles['members'][${x}]['name']}' != '${name}'        Continue For Loop
    \   ${uri} =    Get From Dictionary     ${profiles['members'][${x}]}    uri
    [Return]    ${uri}

Get Profile ETag
    [Documentation]     Getting Server Profile Etag
    ...             Example:
    ...             Get Profile ETag    ${name}
    [Arguments]    ${name}

    ${profiles}    Fusion Api Get Server Profiles  param=?sort=name:ascending
    ${l} =  Get Length  ${profiles['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${profiles['members'][${x}]['name']}' != '${name}'        Continue For Loop
    \   ${eTag} =   Get From Dictionary     ${profiles['members'][${x}]}    eTag
    [Return]    ${eTag}


Interconnect Firmware Update in LI
    [Documentation]    Performing IC firmware upgrade
    ...             Example:
    ...             Interconnect Firmware Update in LI    ${old_SPP_bundle}    ${LI}    @{INTERCONNECTS}    ${ic_firmwareVersion_old}
    [Arguments]         ${SPP_bundle}    ${LI}    ${INTERCONNECTS}    ${ic_firmwareVersion}
    ${resp}=   Fusion Api Get Firmware Driver    param=?filter="name='${SPP_bundle}'"    api=500
    Run Keyword If   ${resp['count']} == 0   Fail    msg=\n No SPP bundle found!!.Please upload the correct SPP bundle
    ${fw_uri_old}=   Get From Dictionary  ${resp['members'][0]}    uri
    ${li_uri} =     Get LI URI   ${LI}
    Set to dictionary     ${liupdate_body}     sppUri    ${fw_uri_old}
    ${response}=    Fusion Api Li Upgrade Firmware    ${liupdate_body}    ${li_uri}
    ${task} =     Wait For Task        ${response}   30min    1min
    Run Keyword If  '${task['taskState']}' !='Completed' or ${task['status_code']} !=200   fail    msg=\nLI Firmware update Failed.
    ...         ELSE    Log  \n\nLI FW Upgrade completed successfully

Firmware bundle upload
    [Documentation]    Uploading a firmware bundle
    ...             Example:
    ...             Firmware bundle upload    ${SPP_Path}
    [Arguments]         ${SPP_Path}
    ${resp} =     Fusion Api Upload Firmware Bundle    api=${300}    localfile=${SPP_Path}


Validate Interconnect firmware version
    [Documentation]    Verifying the interconnect firmware version
    ...             Example:
    ...             Validate Interconnect firmware version    ${INTERCONNECTS}    ${ic_firmwareVersion_new}
    [Arguments]         ${INTERCONNECTS}    ${ic_firmwareVersion}

    :FOR     ${IC}     IN   @{INTERCONNECTS}
    \     ${resp} =   Fusion Api Get Interconnect    param=?filter="'name' = '${IC}'"
    \     ${current_ic_fw_version} =  Get From Dictionary  ${resp['members'][0]}    firmwareVersion
    \     Run keyword unless    '${current_ic_fw_version}' == '${ic_firmwareVersion}'    Fail    "Firmware version mismatch"
    \     ...   ELSE     Log    \nFirmware version is verified for ${IC}

Restore From Backup
	[Documentation]    Restore From Backup
	${status}=	Set Variable    ${EMPTY}
	${Response}		Fusion Api Get Backup
	Run keyword unless	${Response['status_code']}== 200	Fail	"Unable to Get the latest backup"
	${restore_body}		Create Dictionary	type=RESTORE
	...										uriOfBackupToRestore=${Response['members'][0]['uri']}
	${output}		Fusion Api Restore Backup		${restore_body}
	Sleep	200sec
	Run keyword unless	${output['status_code']}== 202	Fail	"Unable to perform the restore from backup operation"
	${restore_resp}		Fusion API Get Restore Status
	Run keyword unless	${restore_resp['status_code']}== 200	Fail	"Unable to get the restore details"
	:FOR	${index}	IN RANGE	${restore_resp['count']}
	\	Run Keyword If	'${restore_resp['members'][${index}]['backupIdToRestore']}' != '${Response['members'][0]['id']}'		Continue For Loop
	\	${restore_id} =    Set Variable    ${restore_resp['members'][${index}]['id']}

	:FOR	${index}	IN RANGE	50
	\	sleep	60sec
	\	${resp}		Fusion API Get Restore Status	${restore_id}
	#\	Log		"Restoring is in Progress..\n
	\	Run keyword unless	${resp['status_code']}== 200	Fail	"Unable to get the restore id details"
	\	Run Keyword If	'${resp['restorePhase']}' != 'COMPLETED'	Continue For Loop
	\	${status} =    Set Variable    ${resp['status']}
	\	Run Keyword If	'${resp['restorePhase']}' == 'COMPLETED'	Exit For Loop
	Should Be Equal    ${status}	SUCCEEDED
	Sleep    30
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Get IC
    [Documentation]    Validating expected IC name with the value of name from response
    ...             Example:
    ...             Get IC   ${ICM_NAME}
    [Arguments]    ${ICM_NAME}
    ${resp}    fusion api get interconnect
    ${ics}    Get From Dictionary    ${resp}    members
    ${l}     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${ic}    Get From List    ${ics}    ${x}
    \    Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Efuse Interconnect
    [Documentation]    Performing Efuse of Interconnect
    ...             Example:
    ...             Efuse Interconnect   ${HOST}    ${EM_SN}    ${Efuse_Action[0]}    ${Bay_No[0]}
    [Arguments]         ${HOST}    ${EM_SN}    ${Action}    ${Bay_No}
    Open Connection And Log In      ${HOST}   root   hpvse1
    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    ${efuse_operation}=   Execute Command   curl -i -X POST https://[${EM}]/rest/v1/InterconnectBays/${Bay_No} -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"${Action}"}'
    Close All Connections
    should contain   ${efuse_operation}  Accepted

Edit Pauseflood Condition
    [Documentation]    Creating Pauseflood condition with the commands in platform side
    ...             Example:
    ...             Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_set_pf}
    [Arguments]         ${SSH_SNMP_IP}   ${interface_name}   ${status}   ${SSH_USER}=root
    SSHLibrary.Open Connection     ${SSH_SNMP_IP}     timeout=120s
    Set Suite variable  ${SSH_PASS}     UnoVista
    SSHLibrary.Login               ${SSH_USER}     ${SSH_PASS}
    Log    Logged into the Snmp client : ${SSH_SNMP_IP}
	Log to console    Editting pauseflood condition
    SSHLibrary.Write    su - OneView
    Sleep    3s
    SSHLibrary.Write    configure terminal
    SSHLibrary.Read Until    (config)#
    SSHLibrary.Write    interface ${interface_name}
    Sleep    5sec
    SSHLibrary.Read Until    (config-if)#
    SSHLibrary.Write    pauseflood debug-status ${status}
    SSHLibrary.Write    exit
    SSHLibrary.Read Until    (config)#
    SSHLibrary.Write    exit
    SSHLibrary.Read Until    OneView#
    SSHLibrary.Write    exit

Edit switch port
    [Documentation]    Editing switch port
    ...             Example:
    ...             ${Enet_switch_ip}   ${switchport_interface}   ${disable_command}
    [Arguments]         ${Enet_switch_ip}   ${interface_name}   ${command}    ${SSH_USER}=admin
    Open Connection     ${Enet_switch_ip}     timeout=60s
    Set Suite variable  ${SSH_PASS}     welcome123
    Login               ${SSH_USER}     ${SSH_PASS}
    SSHLibrary.Write    sys
    SSHLibrary.Read Until    [HP]
    SSHLibrary.Write    interface ${interface_name}
    SSHLibrary.Read Until    [HP-${interface_name}]
    SSHLibrary.Write    ${command}
    Sleep   5sec
    SSHLibrary.Write    quit

Build support dump payload
    [Documentation]    Building the support dump payload
    ...             Example:
    ...             Build support dump payload    ${name}     ${encrypt}
    [Arguments]     ${name}     ${encrypt}
    ${payload_dict}=   Create Dictionary  errorCode=${name}
    ...                                   encrypt=${encrypt}
    ...                                   excludeApplianceDump=false
    [return]    ${payload_dict}

Clear Pause Flood condition
    [Documentation]    Clearing the Pauseflood condition
    ...             Example:
    ...             Clear Pause Flood condition    ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}    ${SERVER_PROF_MSG1}
    [Arguments]     ${IC_IP}   ${uplink_interface}   ${ic_off_pf}    ${downlink_interface}    ${UL_PORT_NAME[0]}    ${PORT_STATUS_LINK}    ${PORT_STATUS_REASON_ACTIVE}    ${DL_PORT_NAME[0]}   ${PORT_STATUS_REASON_OK}    ${UPLINK_MSG}    ${DOWNLINK_MSG}    ${SERVER_PROF_MSG}        ${SERVER_PROF_MSG1}
    Edit Pauseflood Condition   ${IC_IP}   ${uplink_interface}   ${ic_off_pf}
    Edit Pauseflood Condition   ${IC_IP}   ${downlink_interface}   ${ic_off_pf}
    Log to console    Resetting Loop and pause flood protection
	Reset Loop and Pause Flood Protection    ${ICM_1}
    Wait Until Keyword Succeeds    5 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Log  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Wait Until Keyword Succeeds    10 min   15s    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds    10 min   15s    Validate SubPortStatus And SubPortStatusReason    ${ICM_1}        ${DL_PORT_NAME[0]}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${UPLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[0]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     10 min   15s      Validate Alert Message      ${DOWNLINK_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[1]}
    Wait Until Keyword Succeeds     20 min   15s      Validate Alert Message      ${SERVER_PROF_MSG1}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
    Wait Until Keyword Succeeds     20 min   15s      Validate Alert Message      ${SERVER_PROF_MSG}    ${varTrue}    ${Alert[2]}    ${Alert_type[2]}
	${del_resp} =    Fusion Api Delete Alert
	Log to console    Deleting the alerts
	${task}      Wait For Task     ${del_resp}    2min   20s
	Run keyword unless	${task['status_code']}== 200	Fail	"Unable to Clear Alert Message"

Verify Port Statistics
    [Documentation]    Verifying port statistics
    ...             Example:
    ...             Verify Port Statistics   ${ic_uri_statistics}     ${port_counters_out_octets}    ${port_counters__out_NU_pkts}
    [Arguments]     ${ic_uri_statistics}     ${port_counters_out_octets}    ${port_counters__out_NU_pkts}    ${port_counters_In_NU_pkts}
    ${statistics_data}    Fusion Api Get Interconnect    ${ic_uri_statistics}

    ${port_counters_out_octets1}    Get from Dictionary    ${statistics_data['commonStatistics']}    rfc1213IfOutOctets
    Run Keyword If    '${port_counters_out_octets}' > ${port_counters_out_octets1}    Log   \n port counters are cleared    ELSE    Fail
    ${port_counters_out_NU_pkts1}    Get from Dictionary    ${statistics_data['commonStatistics']}    rfc1213IfOutNUcastPkts
    Run Keyword If    '${port_counters_out_NU_pkts}' > ${port_counters_out_NU_pkts1}    Log   \n port counters are cleared    ELSE    Fail
    ${port_counters_In_NU_pkts1}    Get from Dictionary    ${statistics_data['commonStatistics']}    rfc1213IfInNUcastPkts
    Run Keyword If    '${port_counters_In_NU_pkts}' > ${port_counters_In_NU_pkts1}    Log   \n port counters are cleared    ELSE    Fail



Remove All User
    [Documentation]    Removing all users from OneView
    ${users} =  Fusion Api Get User
    :FOR    ${user}    IN  @{users['members']}
    \       Continue For Loop If    '${user['userName']}'=='Administrator'
    \       Continue For Loop If    '${user['userName']}'=='administrator'
    \       Continue For Loop If    '${user['userName']}'=='HardwareSetup'
    \       ${resp} =   Fusion Api Remove User      uri=${user['uri']}

Efuse Server
    [Documentation]    Performing blade efuse
    ...             Example:
    ...             Efuse Server    ${HOST}    ${EM_SN}    ${Efuse_Action[0]}  ${Server_No}
    [Arguments]         ${HOST}    ${EM_SN}    ${Action}    ${Server_No}
    Open Connection And Log In      ${HOST}   root   hpvse1
    ${EM1}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    ${EM}=  catenate   SEPARATOR=   ${EM1}  %bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    ${eoff}=   Execute Command    curl -g -x "" -k -i -H "x-auth-token:${XAUTH}" -X POST https://[${EM}]/rest/v1/BladeBays/${Server_No} -d '{"Action":"${Action}"}'
    Close All Connections
    should contain   ${eoff}  Accepted
    Sleep    40sec

Get ICM IP
    [Documentation]    Fetching ICM IP
    ...             Example:
    ...             Get ICM IP    ${ICM_NAME}
    [Arguments]         ${ICM_NAME}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${address}=     Get From Dictionary     ${IC['members'][0]}   ipAddressList
    ${ipaddress}=     Get From Dictionary     ${address[0]}   ipAddress
    ${ipadress1}     Convert to String    ${ipaddress}
    [Return]    ${ipadress1}

Validate Alert Message
    [Documentation]    Validating the 'Active' alert message with a variable which contains the expected alert message
    ...             Example:
    ...             Validate Alert Message    ${UPLINK_MSG}    ${varTrue}    ${Alert[0]}    ${alert_type}
    [Arguments]     ${msg}    ${flag}    ${Alerts}    ${alert_type}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ '${Alerts}'"
    ${Count}    Get From Dictionary    ${Response}    count
    Run Keyword If    '${Count}'=='0'    Fail    "Failed as alert message is not found"
    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
	\    ${AlertID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
	\   Log to console     ${AlertDesc}
	\    Run Keyword If    '${AlertID}' != '${alert_type}'   Continue For Loop
	#\    Run Keyword If    '${AlertID}' != '${uplink_alert_type}' AND '${AlertID}' != '${downlink_alert_type}'   Continue For Loop
	#\    Run Keyword If    '${AlertID}' != 'swmon.pauseFloodDetected' AND '${AlertID}' != 'profilemgr.Connections.CONNECTION_SCMB_ERROR'   Continue For Loop
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Exit For Loop If     '${AlertDesc}' == '${msg}'
    run keyword if    '${flag}'=='True'   Should Be Equal As Strings     ${AlertDesc}    ${msg}    ELSE   Should Not Be Equal As Strings     ${AlertDesc}    ${msg}

Validate LIG LI Consistency
    [Documentation]    Validating LIG LI Consistency
    ...             Example:
    ...             Validate LIG LI Consistency    ${Consistency_State[0]}
    [Arguments]         ${expected}
    ${IC}=    Fusion Api Get LI
	Log to Console    \n ${IC}
	Run Keyword If 	'${IC['members'][0]['consistencyStatus']}' != '${expected}'		Fail

Get Valid Server IP list
	[Documentation]    Get Valid Server IP list
	[Arguments]    ${ilo_details}    ${server_details}    ${up_interface}    ${down_interface}    ${get_interface}
	${Adapter_list}    Get Valid Interface List    ${ilo_details}    ${server_details}    ${up_interface}    ${down_interface}
	${ifconfig_output_list}    Create List
	${Len_of_adapter}    Get Length    ${Adapter_list}
	:For    ${x}    INRANGE    0    ${Len_of_adapter}
	\    ${ifconfig_name}    Replace String Using Regexp    ${get_interface}    interface-name    ${Adapter_list[${x}]}
	\    ${Ip_output}    Get Valid Server IP    ${ilo_details}    ${server_details}    ${ifconfig_name}
	\    Log    ${Ip_output}
	\    Append to list    ${ifconfig_output_list}    ${Ip_output}
	${temp_list}    Convert To String    ${ifconfig_output_list}
	${ret}    Get Regexp Matches    ${temp_list}    inet (\\d+.\\d+.\\d+.\\d+)\\s+netmask
	${match} =    Create List
    ${length1} = 	Get Length	${ret}
    :FOR 	${x}	IN RANGE	0	${length1}
    \    Append To List   ${match}    ${ret[${x}]}
	${length} = 	Get Length	${match}
    ${Ip_List} =    Create List
	:FOR 	${x}	IN RANGE	0	${length}
	\    ${Ret}    ${match1}    Should Match Regexp    ${match[${x}]}    inet (\\d+.\\d+.\\d+.\\d+)\\s+netmask
	\    Log to console   values ${match[${x}]}
	\    Append To List   ${Ip_List}    ${match1}
	Log    ${Ip_List}
	[Return]    ${Ip_List}

Get Valid Interface List
	[Documentation]    Get Valid Interface List
	[Arguments]    ${ilo_details}    ${server_details}    ${up_interface}    ${down_interface}
	${ip_adapter}    Get Server IP Linux    ${ilo_details}    ${server_details}
	${ret}    Get Regexp Matches    ${ip_adapter}    \\d+:\\s+(.*):\\s+<BROADCAST
	${ret_1}    Get Regexp Matches    ${ip_adapter}    \\d+:\\s+(.*):\\s+<NO-CARRIER
	${Interface_list} =    Create List
    ${length} = 	Get Length	${ret}
    :FOR 	${x}	IN RANGE	0	${length}
    \    Append To List   ${Interface_list}    ${ret[${x}]}
	${length} = 	Get Length    ${Interface_list}
    ${Adapter_name} =    Create List
	:FOR 	${x}	IN RANGE	0	${length}
	\    ${ret}    ${match}    Should Match Regexp    ${Interface_list[${x}]}    \\d+:\\s+(.*):\\s+<BROADCAST
	\    Log to console   values ${match}
	\    Append To List   ${Adapter_name}    ${match}
	Remove Values From List    ${Adapter_name}    virbr0-nic
	Remove Values From List    ${Adapter_name}    ens2f4

	${Len_of_adapter}    Get Length    ${Adapter_name}
	${Adapter_list}    Create list
	:FOR    ${x}    INRANGE    0    ${Len_of_adapter}
	\    ${temp}    Convert To String    ${Adapter_name[${x}]}
	\    Append to list    ${Adapter_list}    ${temp}
	Log    ${Adapter_list}

	${Len_of_adapter_list}    Get Length    ${Adapter_list}
	:FOR    ${x}    INRANGE    0    ${Len_of_adapter_list}
	\    ${ifup_adapter}    Replace String Using Regexp   ${up_interface}    interface-name    ${Adapter_list[${x}]}
	\    Up the Interface    ${ilo_details}    ${server_details}    ${ifup_adapter}

	${Non_Interface_list} =    Create List
    ${length} = 	Get Length	${ret_1}
    :FOR 	${x}	IN RANGE	0	${length}
    \    Append To List   ${Non_Interface_list}    ${ret_1[${x}]}

	${length} = 	Get Length    ${Non_Interface_list}
    ${Non_Adapter_name} =    Create List
	:FOR 	${x}	IN RANGE	0	${length}
	\    ${ret}    ${match}    Should Match Regexp    ${Non_Interface_list[${x}]}    \\d+:\\s+(.*):\\s+<NO-CARRIER
	\    Log to console   values ${match}
	\    Append To List   ${Non_Adapter_name}    ${match}
	Remove Values From List    ${Non_Adapter_name}    virbr0
	Append To List   ${Non_Adapter_name}   ens2f4
	${Len_of_non_adapter}    Get Length    ${Non_Adapter_name}
	${Non_Adapter_list}    Create list
	:FOR    ${x}    INRANGE    0    ${Len_of_non_adapter}
	\    ${temp}    Convert To String    ${Non_Adapter_name[${x}]}
	\    Append to list    ${Non_Adapter_list}    ${temp}
	Log    ${Non_Adapter_list}

	${Len_of_non_adapter_list}    Get Length    ${Non_Adapter_list}
	:FOR    ${x}    INRANGE    0    ${Len_of_non_adapter_list}
	\    ${ifdown_adapter}    Replace String Using Regexp   ${down_interface}    interface-name    ${Non_Adapter_list[${x}]}
	\    Down the Interface    ${ilo_details}    ${server_details}    ${ifdown_adapter}

	[Return]    ${Adapter_list}

Get Valid Server IP
	[Documentation]    Get Valid Server IP
	[Arguments]         ${ilo_details}    ${server_details}    ${ifconfig_adapter_name}
	SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
	SSHLibrary.Write    ${server_details['username']}
	Sleep    10sec
	SSHLibrary.Write    ${server_details['password']}
	Sleep    10sec
	SSHLibrary.Read Until    ~]#
	SSHLibrary.write    ${ifconfig_adapter_name}
	Sleep    10sec
	${cmd_out}    SSHLibrary.Read
	Sleep    15sec
	SSHLibrary.Write    exit
	SSHLibrary.Read Until    localhost login:
	Sleep    5sec
	SSHLibrary.Close All Connections
	[Return]    ${cmd_out}

Get Server IP Linux
    [Documentation]    Gets the valid ip of the server.
    [Arguments]         ${linux_ilo_details}    ${linux_server_details}
    SSHLibrary.Open Connection     ${linux_ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login               ${linux_ilo_details['username']}     ${linux_ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    20sec
    SSHLibrary.Read
    Sleep    5sec
    SSHLibrary.Write     ${linux_server_details['username']}
    Sleep    10sec
    SSHLibrary.Write     ${linux_server_details['password']}
    Sleep    10sec
    SSHLibrary.Read
    SSHLibrary.Write     ip addr
    Sleep    10sec
	${stdout}    SSHLibrary.Read
	Sleep    15sec
	SSHLibrary.Write    exit
	SSHLibrary.Read Until    localhost login:
	Sleep    5sec
	SSHLibrary.Close All Connections
    [Return]    ${stdout}

Down the Interface
	[Documentation]    Down the Interface
	[Arguments]         ${ilo_details}    ${server_details}    ${ifdown_adapter}
	SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
	SSHLibrary.Write    ${server_details['username']}
	Sleep    10sec
	SSHLibrary.Write    ${server_details['password']}
	Sleep    10sec
	SSHLibrary.Read Until    ~]#
	SSHLibrary.write    ${ifdown_adapter}
	Sleep    10sec
	SSHLibrary.Write    exit
	SSHLibrary.Read Until    localhost login:
	Sleep    5sec
	SSHLibrary.Close All Connections

Up the Interface
	[Documentation]    Up the Interface
	[Arguments]         ${ilo_details}    ${server_details}    ${ifup_adapter}
	SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
	SSHLibrary.Write    ${server_details['username']}
	Sleep    10sec
	SSHLibrary.Write    ${server_details['password']}
	Sleep    10sec
	SSHLibrary.Read Until    ~]#
	SSHLibrary.write    ${ifup_adapter}
	Sleep    10sec
	SSHLibrary.Write    exit
	SSHLibrary.Read Until    localhost login:
	Sleep    5sec
	SSHLibrary.Close All Connections


Ping Server IP
    [Documentation]    Pinging the given server ip
    ...             Example:
    ...             Ping Server IP    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    [Arguments]         ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    startthread    ${number}    ${server_ip}    ${name}    ${flag}
    Sleep    20
    ${contents1}=    OperatingSystem.Get File    ${name}
	Log to console    \n ${contents1}
    [Return]     ${contents1}

Verify Server Ping Successful
    [Documentation]    Verifying if the server ping is successful by checking if loss is 0% and if it does not contain destination unreachable or Request timed out
    ...             Example:
    ...             Wait Until Keyword Succeeds     5 min   15s      Verify Server Ping Successful    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    [Arguments]         ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
	Log to console    Checking server ping Successfull

	${loss} =    Ping Server IP    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    ${match}   ${ret1}    Should Match Regexp    ${loss}    Lost\\s+=\\s+\\d+\\s+\\((\\d+%)\\s+loss\\)
    Run Keyword If    '${ret1}' == '0%'    Log    \n Pinging is successful    ELSE    Fail
    Should Not Contain    ${loss}    ${time_out}
    Should Not Contain    ${loss}    ${Dest_unreachable}

Verify Server Ping Fails
    [Documentation]    Verifying if server ping fails by checking if the response does not contain TTL=
    ...             Example:
    ...             Verify Server Ping Fails    ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
    [Arguments]         ${number}    ${server_ip}    ${name}    ${flag}    ${file_path}
	Log to console    Checking server ping to fail
    ${loss} =    Ping Server IP    ${number}    ${server_ip}    ${name}    ${flag}     ${file_path}
    Should Not Contain    ${loss}    TTL=

Clean OV
    [Documentation]    Cleaning the OV
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Power off ALL servers    control=PressAndHold
    Remove All Server Profiles
    Remove All LEs
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove All Network Sets
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks

Get Alert and Compliance Message
    [Documentation]    Get Alert and compliance messages from LI
    [Arguments]    ${Alert_list}    ${Compliance_name_list}
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    ${Get_event_details}    Fusion Api Get Alerts    ${Event_uri[0]}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    Lists Should Be Equal    ${Event_item_value}    ${Alert_list}
    [Return]    ${Event_item_value}

Get Event Item Value
    [Documentation]    Get the Event name corresponding to the compliance
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' != '${Compliance_name_list}'    Continue For Loop
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    ${actual_alert}    Built the Alert list    ${Event_item_value}
    [Return]    ${actual_alert}

Built the Alert list

    [Documentation]    Building the Alert list for Compliance alert verification
    [Arguments]    ${Qos_compliance_alert}

    ${Line_count}    Get Line Count    ${Qos_compliance_alert}
    ${Alert_List}    Create List
    :For    ${x}    INRANGE    0    ${Line_count}
    \    ${Get_line}    Get Line    ${Qos_compliance_alert}    ${x}
    \    Append to list    ${Alert_List}    ${Get_line}
    Sort List    ${Alert_List}
    [Return]    ${Alert_List}

Build Commands For Create Bonding
    [Documentation]    Building commands for bond creation or teaming the adapters
    [Arguments]    ${Adapter_1}    ${Adapter_2}    ${Create_bond}    ${Master_slave_1}    ${Master_slave_2}    ${Bond_slave_1}    ${Bond_slave_2}    ${Network_bond}    ${Master}    ${Modify_bond}    ${Modify_ip}    ${Modify_manual}    ${Adapterlist}    ${Bond}    ${space}    ${Ip_bond}    ${ilo_details}    ${server_details}
    ${Network_adapter_1}    Replace String Using Regexp   ${Adapter_1}    adapter1    ${Adapterlist[0]}
    ${Network_adapter_2}    Replace String Using Regexp   ${Adapter_2}    adapter2    ${Adapterlist[1]}
    ${Network_bond_1}    Replace String Using Regexp   ${Create_bond}    bond-name    ${Bond}
    ${Add_connection_1}    Replace String Using Regexp   ${Master_slave_1}    connection-name-1    ${Adapterlist[0]}
    ${Add_connection_2}    Replace String Using Regexp   ${Master_slave_2}    connection-name-2    ${Adapterlist[1]}
    ${Up_connection_1}    Replace String Using Regexp   ${Bond_slave_1}    connection-name-1    ${Adapterlist[0]}
    ${Up_connection_2}    Replace String Using Regexp   ${Bond_slave_2}    connection-name-2    ${Adapterlist[1]}
    ${Up_bond}    Replace String Using Regexp   ${Network_bond}    bond-name    ${Bond}
    ${Bond_name}    Replace String Using Regexp    ${Master}    bond-name    ${Bond}
    ${connection_1}    catenate    ${Add_connection_1}/${Bond_name}
    ${bond_connection_1}    Replace String Using Regexp    ${connection_1}    /    ${space}
    ${connection_2}    catenate    ${Add_connection_2}/${Bond_name}
    ${bond_connection_2}    Replace String Using Regexp    ${connection_2}    /    ${space}
    ${Assign_adapter}    Replace String Using Regexp    ${Modify_bond}    bond-name    ${Bond}
    ${Assign_ip}    Replace String Using Regexp    ${Modify_ip}    ip-address    ${Ip_bond}
    ${Combine_ip_adapter}    catenate    ${Assign_adapter}/${Assign_ip}
    ${Assign_ip_adapter}    Replace String Using Regexp    ${Combine_ip_adapter}    /    ${space}
    ${Assign_ip_netmask}    Replace String Using Regexp    ${Modify_manual}    netmask    ${Netmask}
    ${Assign_ip_address}    catenate    ${Assign_ip_adapter}/${Assign_ip_netmask}
    #${Up_interface}    Replace String Using Regexp    ${interface_up}    interface-name    ${Bond}
    #${Down_interface}    Replace String Using Regexp    ${down_interface}    interface-name    ${Bond}
    Log to console and logfile    ${Network_adapter_1}
    Log to console and logfile    ${Network_adapter_2}
    Log to console and logfile    ${Network_bond_1}
    Log to console and logfile    ${bond_connection_1}
    Log to console and logfile    ${bond_connection_2}
    Log to console and logfile    ${Up_connection_1}
    Log to console and logfile    ${Up_connection_2}
    Log to console and logfile    ${Up_bond}
    Log to console and logfile    ${Assign_ip_address}
    #Log to console and logfile    ${Down_interface}
    #Log to console and logfile    ${Up_interface}

    Log to console and logfile    *********Network bonding is about start*********
    ${cmd_out}    Create Network Bonding    ${ilo_details}    ${server_details}    ${Network_adapter_1}    ${Network_adapter_2}    ${Network_bond_1}    ${bond_connection_1}    ${bond_connection_2}    ${Up_connection_1}    ${Up_connection_2}    ${Up_bond}    ${Assign_ip_address}
    [Return]    ${cmd_out}

Build Commands For Delete Bonding
    [Documentation]    Build commands to delete the created Bond
    [Arguments]    ${Delete_Network_bond}    ${Delete_bond_slave_1}    ${Delete_bond_slave_2}    ${ilo_details}    ${server_details}    ${up_interface}    ${Bond}
    ${Delete_bond}    Replace String Using Regexp   ${Delete_Network_bond}    bond-name    ${Bond}
    Log to console and logfile    ${Delete_bond}
    ${cmd_out}    Delete Network Bonding    ${ilo_details}    ${server_details}    ${Delete_bond}
    ${ip_adapter}    Get Server IP Linux    ${ilo_details}    ${server_details}
    ${ret}    Get Regexp Matches    ${ip_adapter}    \\d+:\\s+(.*):\\s+<BROADCAST
    ${flag_list} =    Create List
    ${length} =     Get Length  ${ret}
    :FOR    ${x}    IN RANGE    0   ${length}
    \    Append To List   ${flag_list}    ${ret[${x}]}
    ${length} =     Get Length    ${flag_list}
    ${Adapter_name} =    Create List
    :FOR    ${x}    IN RANGE    0   ${length}
    \    ${ret}    ${match}    Should Match Regexp    ${flag_list[${x}]}    \\d+:\\s+(.*):\\s+<BROADCAST
    \    Log to console   values ${match}
    \    Append To List   ${Adapter_name}    ${match}
    Remove Values From List    ${Adapter_name}    virbr0-nic
    ${Len_of_adapter}    Get Length    ${Adapter_name}
    ${Adapterlist}    Create list
    :FOR    ${x}    INRANGE    0    ${Len_of_adapter}
    \    ${temp}    Convert To String    ${Adapter_name[${x}]}
    \    Append to list    ${Adapterlist}    ${temp}
    Log to console and logfile    ${Adapterlist}
    ${Delete_connection_1}    Replace String Using Regexp   ${Delete_bond_slave_1}    connection-name-1    ${Adapterlist[0]}
    ${Delete_connection_2}    Replace String Using Regexp   ${Delete_bond_slave_2}    connection-name-2    ${Adapterlist[1]}
    ${Network_adapter_1}    Replace String Using Regexp   ${up_interface}    interface-name    ${Adapterlist[0]}
    ${Network_adapter_2}    Replace String Using Regexp   ${up_interface}    interface-name    ${Adapterlist[1]}
    Log to console and logfile    ${Delete_connection_1}
    Log to console and logfile    ${Delete_connection_2}
    ${cmd}    Delete Network Slave    ${ilo_details}    ${server_details}    ${Delete_connection_1}    ${Delete_connection_2}    ${Network_adapter_1}    ${Network_adapter_2}

    [Return]    ${cmd}

Create Network Bonding
    [Documentation]    Team the adapters in the server.
    [Arguments]         ${ilo_details}    ${server_details}    ${Network_adapter_1}    ${Network_adapter_2}    ${Network_bond_1}    ${bond_connection_1}    ${bond_connection_2}    ${Up_connection_1}    ${Up_connection_2}    ${Up_bond}    ${Assign_ip_address}
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    #SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Write    ${server_details['username']}
    Sleep    10sec
    SSHLibrary.Write    ${server_details['password']}
    Sleep    10sec
    SSHLibrary.Read Until    ~]#
    SSHLibrary.Write    ${Network_adapter_1}
    Sleep    10sec
    SSHLibrary.Write    ${Network_adapter_2}
    Sleep    10sec
    SSHLibrary.Write    ${Network_bond_1}
    Sleep    10sec
    SSHLibrary.Write    ${bond_connection_1}
    Sleep    10sec
    SSHLibrary.Write    ${bond_connection_2}
    Sleep    10sec
    SSHLibrary.Write    ${Up_connection_1}
    Sleep    10sec
    SSHLibrary.Write    ${Up_connection_2}
    Sleep    10sec
    SSHLibrary.Write    ${Assign_ip_address}
    Sleep    10sec
    SSHLibrary.Write    ${Up_bond}
    Sleep    10sec
    SSHLibrary.Write    ${Up_interface}
    Sleep    10sec
    SSHLibrary.Write    ip addr
    Sleep    15sec
    ${stdout}    SSHLibrary.Read
    Log to console and logfile    ${stdout}
    SSHLibrary.Write    exit
    SSHLibrary.Read Until    localhost login:
    Sleep    5sec
    SSHLibrary.Close All Connections
    [Return]    ${stdout}

Delete Network Bonding
    [Documentation]    Delete the network bond created in the server.
    [Arguments]         ${ilo_details}    ${server_details}    ${Delete_bond}
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Write    ${server_details['username']}
    Sleep    10sec
    SSHLibrary.Write    ${server_details['password']}
    Sleep    10sec
    SSHLibrary.Read Until    ~]#
    SSHLibrary.Write    ${Delete_bond}
    Sleep    10sec
    SSHLibrary.Write    ip addr
    Sleep    10sec
    ${stdout}    SSHLibrary.Read
    Log to console and logfile    ${stdout}
    SSHLibrary.Write    exit
    SSHLibrary.Read Until    localhost login:
    Sleep    5sec
    SSHLibrary.Close All Connections
    [Return]    ${stdout}

Delete Network Slave
    [Documentation]    Delete the network bond slave in the server.
    [Arguments]         ${ilo_details}    ${server_details}    ${Delete_connection_1}    ${Delete_connection_2}    ${Network_adapter_1}    ${Network_adapter_2}
    SSHLibrary.Open Connection     ${ilo_details['ilo_ip']}     prompt=>     timeout=40s
    ${login}    SSHLibrary.Login    ${ilo_details['username']}     ${ilo_details['password']}
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     stop /system1/oemhp_VSP1
    SSHLibrary.Read Until Prompt
    SSHLibrary.Write     vsp
    Sleep    5sec
    SSHLibrary.Write    ${server_details['username']}
    Sleep    10sec
    SSHLibrary.Write    ${server_details['password']}
    Sleep    10sec
    SSHLibrary.Read Until    ~]#
    SSHLibrary.Write    ${Delete_connection_1}
    Sleep    10sec
    SSHLibrary.Write    ${Delete_connection_2}
    Sleep    10sec
    SSHLibrary.Write    ${Network_adapter_1}
    Sleep    10sec
    SSHLibrary.Write    ${Network_adapter_2}
    Sleep    10sec
    SSHLibrary.Write    ip addr
    Sleep    20sec
    ${stdout}    SSHLibrary.Read
    Log to console and logfile    ${stdout}
    SSHLibrary.Write    exit
    SSHLibrary.Read Until    localhost login:
    Sleep    5sec
    SSHLibrary.Close All Connections
    [Return]    ${stdout}