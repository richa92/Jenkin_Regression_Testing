*** Settings ***
Documentation       Feature Test: F669
Variables           data_variables.py
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             json
Library             OperatingSystem
Suite Setup         Load Test Data and Open Browser
*** Variables ***
${SSH_PASS}                     hpvse1
${DataFile}                 OVAData.xml
${APPLIANCE_IP}                 15.212.160.153
${BROWSER}                      Firefox
${SeleniumSpeed}                        0.1
${ApplianceUrl}                 https://15.212.160.153
${LE_name}                       LE
${file}                          fusion_dump.sdmp
${uname}                         root
${pwd}                           hpvse1
${ICM_1}                          EM1FFFF500, interconnect 1
${ICM_NAME}      EM1FFFF500, interconnect 1
${ICM_2}                        EM1FFFF500, interconnect 4
${ICM_NAME_1}                       EM1FFFF500, interconnect 4
${upgrade_bundle}    C:\\upgrade.iso
${downgrade_bundle}    C:\\downgrade.iso
@{port_list_exp}=    S6/S12
...            S12/S6
...            S5/S11
...            S11/S5
...            S4/S10
...            S10/S4
...            S3/S9
...            S9/S3
...            S2/S8
...            S8/S2
...            S1/S7
...            S7/S1
@{downlink_list_exp}=    6
...            12
...            5
...            11
...            4
...            10
...            3
...            9
...            2
...            8
...            1
...            7
${Unsupported_Alert}    crm.SylviteNotSupportedWithOtherIcmInTheSameBaySet
@{ICM_names}=    ${ICM_1}
...             ${ICM_2}
${ICM_Alert1_stg_star}           Staging started for the interconnect
${ICM_Alert1_stg_str_end}        \  with firmware version 1.04 from baseline
${ICM_Alert1_stg_succ}           Staging success for the interconnect
${ICM_Alert1_stg_succ_end}       \  with firmware version 1.04 from baseline
${ICM_Alert1_act_star}          Activation started for the interconnect
${ICM_Alert1_act_star_end}      \  with firmware version 1.04 from baseline
${ICM_Alert1_act_succ}          Activation success for the interconnect
${ICM_Alert1_act_succ_end}      \  with firmware version 1.04 from baseline
${ICM_Alert1_stg_star_1_end}    \  with firmware version 1.04 from baseline
${ICM_Alert1_stg_star_2_end}    \  with firmware version 1.04 from baseline
${ICM_Alert2_stg_star}           Staging started for the interconnect
${ICM_Alert2_stg_str_end}        \  with firmware version 1.08 from baseline
${ICM_Alert2_stg_succ}           Staging success for the interconnect
${ICM_Alert2_stg_succ_end}       \  with firmware version 1.08 from baseline
${ICM_Alert2_act_star}          Activation started for the interconnect
${ICM_Alert2_act_star_end}      \  with firmware version 1.08 from baseline
${ICM_Alert2_act_succ}          Activation success for the interconnect
${ICM_Alert2_act_succ_end}      \  with firmware version 1.08 from baseline
${ICM_Alert2_stg_star_1_end}    \  with firmware version 1.08 from baseline
${ICM_Alert2_stg_star_2_end}    \  with firmware version 1.08 from baseline
*** Test Cases ***
01 PreCondition Appliance LogIn EG LE ServerProfile
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Run Keyword for List    ${enc_groups}   Add Enclosure Group from variable
    Run Keyword for List    ${les}  Add Logical Enclosure from variable
    Power off ALL Servers
    Add Server Profiles from variable   ${server_profiles}
    
02 PreCondition PowerOn Server
    Power on server      EM1FFFF500, bay 3


03 Upload Upgrade Firmware Bundles to appliance
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${resp} =    Fusion Api Upload Firmware Bundle    ${upgrade_bundle}
    Log to console and logfile  -Firmware Upgrade Bundle uploaded successfully

04 Upload Downgrade Firmware Bundles to appliance
    ${resp} =    Fusion Api Upload Firmware Bundle    ${downgrade_bundle}
    Log to console and logfile  -Firmware Downgrade Bundle uploaded successfully

F669_TC_API_1 Check that the Sylvite IC is in the monitored state
    Set Log Level   TRACE
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC      ${ICM_NAME}
    ${state} =     Get From IC    ${ic}   state
    Should Be Equal As Strings    ${state}  Monitored

F669_TC_API_2 Verify the powerStatus of the Sylvite interconnect and verify it is On
    [Tags]      viewPower
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC      ${ICM_NAME}
    ${powerStatus} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerStatus}    On

F669_TC_API_3 Issue a powerControl Off, verify
    [Tags]  powerOff
    Log to console and logfile  -Issue powerControl Off
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri

    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    Log         ${resp}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Sleep    15s
    Log to console and logfile  -Verify it's off
    ${ic} =     Get IC          ${ICM_NAME}
    ${powerState} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerState}    Off

F669_TC_API_3 View the powerStatus of the interconnect and verify it is Off
    [Tags]      viewPower
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC          ${ICM_NAME}
    ${powerStatus} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerStatus}    Off

F669_TC_API_3 Verify the Interconnect state from EM Calls
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT_1}
    ${powerstate} =     Get From Dictionary     ${EMreturn}     PowerState
    Run Keyword If    ${powerstate}=="Off"      Log To Console  IC Sates as desired   ELSE     Fail

F669_TC_API_4 Issue a powerControl On, verify
    [Tags]  powerOn
    Log to console and logfile  -Issue powerControl On
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    Log         ${resp}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to console and logfile  -Verify it's on
    ${ic} =     Get IC      ${ICM_NAME}
    ${powerState} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerState}    On

F669_TC_API_4 Verify the Interconnect state from EM Calls
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT_1}
    ${powerstate} =     Get From Dictionary     ${EMreturn}     PowerState
    Run Keyword If    ${powerstate}=="On"   Log To Console  IC Sates as desired   ELSE     Fail

F669_TC_API_5 Issue a deviceResetControl Reset when ICM is powered off should not happen
    [Tags]  pos
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    # Power off interconnect
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    Log         ${resp}
    sleep   20s
    # Issue Reset request
    ${data} =   Create Dictionary   op=replace
    ...                             path=/deviceResetState
    ...                             value=Reset
    ${body} =   Create List     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Error

    Validate Response   ${task}    ${valDict}
    # Power On  ICM after test completes
        # Power off interconnect
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s

F669_TC_API_6 Issue a PowerOn Reset and UID ON in a single REquest
    [Tags]  pos
    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${body1} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body1} =   Create list     ${body1}
    ${body2} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=On
    ${body2} =   Create list     ${body2}
    ${body3} =   Create Dictionary   op=replace
    ...                             path=/deviceResetState
    ...                             value=Reset
    ${body3}=   Create list     ${body3}
    ${body}=     Combine Lists  ${body1}    ${body2}        ${body3}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Error
    Validate Response   ${task}    ${valDict}

F669_TC_API_5 Issue a uidLightControl On
    [Tags]  UIDon
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=On
    ${body} =   Create List     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to console and logfile  -Verify it's on
    ${ic} =     Get IC          ${ICM_NAME}
    ${uidLightStatus} =     Get From IC    ${ic}   uidState
    Should Be Equal As Strings    ${uidLightStatus}     On

F669_TC_API_5 Verify the UID state is ON from EM Calls
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT_1}
    ${uidstate} =   Get From Dictionary     ${EMreturn}     UidState
    Run Keyword If    ${uidstate}=="Lit"    Log To Console  UID state as desired   ELSE     Fail

F669_TC_API_5 Issue a uidLightControl Off
    [Tags]  UIDoff

    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=Off
    ${body} =   Create List     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to console and logfile  -Verify it's off
    ${ic} =     Get IC          ${ICM_NAME}
    ${uidLightStatus} =     Get From IC    ${ic}   uidState
    Should Be Equal As Strings    ${uidLightStatus}     Off

F669_TC_API_5 Verify the UID state is OFF from EM Calls
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT_1}
    ${uidstate} =   Get From Dictionary     ${EMreturn}     UidState
    Run Keyword If    ${uidstate}=="Off"    Log To Console  UID state as desired   ELSE     Fail


F669_TC_API_5 Verify Interconnect Details
    [Tags]  Details
    ${ic} =     Get IC          ${ICM_NAME}
    ${partNumber} =     Get From IC    ${ic}   partNumber
    ${model} =     Get From IC    ${ic}   model
    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    ${serialNumber} =     Get From IC    ${ic}   serialNumber
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT_1}
    Log         ${EMreturn}
    ${ProductName} =    Get From Dictionary         ${EMreturn}         Productname
    ${SerialNumber} =   Get From Dictionary         ${EMreturn}         Serialnumber
    ${PartNumber} =     Get From Dictionary         ${EMreturn}         Partnumber
    ${FirmwareVersion} =    Get From Dictionary         ${EMreturn}         FirmwareVersion
    #Run Keyword If    ${ProductName}==${model_exp}     Log To Console  UID state as desired   ELSE     Fail
    Run Keyword and Continue on Failure    Should Be Equal  '${ProductName}'        '${model}'      Product Name as desired
    Log to console and logfile          \n'${ProductName}' from EM matches '${model}' from Interconnect GET call
    Run Keyword and Continue on Failure    Should Be Equal  '${SerialNumber}'       '${serialNumber}'   Serial Number as desired
    Log to console and logfile          \n'${SerialNumber}' from EM matches '${serialNumber}' from Interconnect GET call
    Run Keyword and Continue on Failure    Should Be Equal  '${PartNumber}'     '${partNumber}'     Part Number as desired
    Log to console and logfile          \n'${PartNumber}' from EM matches '${partNumber}' from Interconnect GET call
    Run Keyword and Continue on Failure    Should Be Equal  '${FirmwareVersion}'        '${firmwareVersion}'    Part Number as desired
    Log to console and logfile          \n'${FirmwareVersion}' from EM matches '${firmwareVersion}' from Interconnect GET call

F669_TC_API_9 DeviceReset Issue a deviceResetControl Reset when in Normal
    [Tags]  pos
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/deviceResetState
    ...                             value=Reset
    ${body} =   Create List     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    Log     ${resp}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to console and logfile  -Verify it's reset
    ${ic} =     Get IC          ${ICM_NAME}
    ${deviceResetStatus} =     Get From IC    ${ic}   deviceResetState
    Should Be Equal As Strings    ${deviceResetStatus}  Normal

F669_TC_API_7 Issue a deviceResetControl Reset and Poweroff in a single request
    [Tags]  pos
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/deviceResetState
    ...                             value=Reset
    ${body} =   Create list     ${data}
    ${data} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    Append to List  ${body}     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    Log     ${resp}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Error
    Validate Response   ${task}    ${valDict}


F669_TC_API_10 PowerOnandUIDControlON in a SingleRequest
    [Tags]  powerOn
    Log to console and logfile  -Issue powerControl On
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${data}
    ${data} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=On
    Append to List  ${body}     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to console and logfile  -Verify it's ON
    ${ic} =     Get IC          ${ICM_NAME}
    ${powerstate} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerstate}  On
    Log to console and logfile  -Verify Uid state ON
    ${ic} =     Get IC          ${ICM_NAME}
    ${uidState} =     Get From IC    ${ic}   uidState
    Should Be Equal As Strings    ${uidState}  On

F669_TC_API_12 PowerOffandUIDControlOn in a SingleRequest
    [Tags]  powerOff
    Log to console and logfile  -Issue powerControl Off
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${data}
    ${data} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=On
    Append to List  ${body}     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   20s
    Log to console and logfile  -Verify it's OFF
    ${ic} =     Get IC          ${ICM_NAME}
    ${powerstate} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerstate}  Off
    Log to console and logfile  -Verify Uid state ON
    ${ic} =     Get IC          ${ICM_NAME}
    ${uidState} =     Get From IC    ${ic}   uidState
    Should Be Equal As Strings    ${uidState}  On

F669_TC_API_14 ResetAndUIDOn in a SingleRequest
    Run Keyword and Ignore Error    Write To ciDebug Log

    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    Log to console and logfile  -Power On ICM
    ${data} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    sleep   60s
    ${data} =   Create Dictionary   op=replace
    ...                             path=/deviceResetState
    ...                             value=Reset
    ${body} =   Create list     ${data}
    ${data} =   Create Dictionary   op=replace
    ...                             path=/uidState
    ...                             value=On
    Append to List  ${body}     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to console and logfile  -Verify Uid state ON
    ${ic} =     Get IC          ${ICM_NAME}
    ${uidState} =     Get From IC    ${ic}   uidState
    Should Be Equal As Strings    ${uidState}  On

F669_TC_API_16 Validate Uplink Port counts and corresponding downlink port data
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Log to console and logfile  -Powering On ICMs
    ${ic} =     Get IC      ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    ${data} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${data}
    ${resp} =   fusion api patch interconnect   body=${body}    uri=${uri}
    ${task} =   Wait for Task   ${resp}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    ${port_name_list} =     Create List
    ${downlink_ports} =     Create List
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${interconnect} =           fusion_api_get_interconnect          uri=${uri}
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    Log         ${ports}
    ${l} =  Get Length  ${ports}
    Log     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log         ${port_list}
    \   ${portType} =   Get From Dictionary     ${port_list}        portType
    \   Run Keyword If      '${portType}' == 'Downlink'     Continue For Loop
    \   ${port_name} =      Get From Dictionary     ${port_list}        portName
    \   ${neighbor} =       Get From Dictionary     ${port_list}        neighbor
    \   ${downlink_port} =      Get From Dictionary     ${neighbor}     remotePortId
    \   Append To List      ${port_name_list}       ${port_name}
    \   Append To List      ${downlink_ports}       ${downlink_port}
    # [Return]  ${port_name_list}
    Log         ${port_name_list}
    Log         ${downlink_ports}
    Log to console and log file         \n Validating the uplink ports displayed
    Lists Should Be Equal               ${port_name_list}       ${port_list_exp}
    Lists Should Be Equal               ${downlink_ports}       ${downlink_list_exp}
    Log to console and log file         \nUplink ports displayed in correct manner ${port_name_list}
    Log to console and log file         \nCorresponding downlink ports displayed in correct manner ${downlink_ports}

F669_TC_API_21 Downlink Edit- Disable Ports
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_disable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_disable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     30s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   30s
    Log to Console  \nDownlink port edit completed

F669_TC_API_21 Validate Port Status at interconnects after disabling downlink port
    ${port_status}=         Get PortStatus from Ports               ${downlink_disable}
    Should be Equal as Strings    ${port_status}        Disabled
    Log to console and logfile      \nPort status is '${port_status}' - reflected in correct manner


F669_TC_API_22 Downlink Edit- Enable Ports
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_enable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_enable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     30s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   30s
    Log to Console  \nDownlink port edit completed

F669_TC_API_22 Validate Port Status at interconnects after downlink port edit
    ${port_status}=         Get PortStatus from Ports               ${downlink_enable}
    Should be Equal as Strings    ${port_status}        Normal
    Log to console and logfile      \nPort status is enabled - reflected in correct manner

13 Sylvite in Un-supported Bay Set Alert validation
      #${alerts} =    fusion_api_get_alerts    /rest/alerts
      ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ 'Active'"
      Log to Console    ${Response}
      ${Count}    Get From Dictionary    ${Response}    count
      Return From Keyword If    '${Count}'=='0'    msg=No active alert events found
      ${Members}    Get From Dictionary    ${Response}    members
      :FOR    ${Index}    IN RANGE    0    ${Count}
      \    ${Alert}    Get From List    ${Members}    ${Index}
      \    # Select only the most recent events - skip any before that
      \    ${AlertTypeId}    Get From Dictionary    ${Alert}    alertTypeID
      \    Run Keyword If    '${AlertTypeId}'=='${Unsupported_Alert}'    Exit For Loop
      ${Alert_desc}    Get From Dictionary    ${Alert}    description
      Log       ${Alert_desc}

F669_TC_API_15 Collect Logical Enclosure Support Dump
    Get Enclosure Support Dump      ${LE_name}      ${file}

F669_TC_API_17 Firmware Upgrade on LE Shared Infrastructure
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Power off ALL Servers
    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers
    ${le}=      Get LE              ${LE_name}
    Log         ${le}
    ${le_uri}=      Get from LE         ${le}       uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}
    Log         {le_uri}
    ${body}=                Build LE SPP Body           ${le_spp_upgrade}
    Log         ${body}
    ${resp} =   Fusion Api Le Firmware Update       body=${body}        uri=${le_uri}           headers=${headers}
    Log         ${resp}
    ${task} =       Wait For Task   ${resp}     60 min      15s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to Console  \nSylvite Firmware Upgrade completed successfully

F669_TC_API_17 verifyalerts
      Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
      ${alerts} =    fusion_api_get_alerts    /rest/alerts
      # Log to Console    ${alerts}
      Log     ${alerts}
      : FOR    ${ICM_NAME}    IN    @{ICM_names}

      \    ${Al_stg_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_stg_star}    ${ICM_Alert2_stg_str_end}
      \    Log to Console    ${Al_stg_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_str}     Expected Error Message Not seen

      \    ${Al_stg_suc}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_stg_succ}    ${ICM_Alert2_stg_succ_end}
      \    Log to Console    ${Al_stg_suc}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_suc}     Expected Error Message Not seen

      \    ${Al_act_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_act_star}    ${ICM_Alert2_act_star_end}
      \    Log to Console    ${Al_act_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_str}     Expected Error Message Not seen

      \    ${Al_act_succ}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_act_succ}    ${ICM_Alert2_act_succ_end}
      \    Log to Console    ${Al_act_succ}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_succ}    Expected Error Message Not seen

    Fusion Api Logout Appliance
    Log to Console      \nFirmware Alert validation complete

F669_TC_API_17 Validate LE state after LE firmwareupgrade is complete
    [Tags]  Details
    sleep   30s
    Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
    ${le}=      Get LE              ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent
    Log to Console      \nLE state is 'Consistent' as expected

F669_TC_API_17 Validate Interconnect Firmware Version for ICM1
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Validate Interconnect firmware version              ${ICM_1}                @{TestData.TB_interconnect_FVT_1}

F669_TC_API_17 Validate Interconnect Firmware Version for ICM3
    Validate Interconnect firmware version              ${ICM_2}                @{TestData.TB_interconnect_FVT_2}


F669_TC_API_20 Firmware Downgrade on LE
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers
    ${le}=      Get LE              ${LE_name}
    Log         ${le}
    ${le_uri}=      Get from LE         ${le}       uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}
    Log         {le_uri}
    ${body}=                Build LE SPP Body           ${le_spp_downgrade}
    Log         ${body}
    ${resp} =   Fusion Api Le Firmware Update       body=${body}        uri=${le_uri}       headers=${headers}
    Log         ${resp}
    ${task} =       Wait For Task   ${resp}     60 min      15s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Sleep    300s
    Log to Console  \nSylvite Firmware Downgrade completed successfully

F669_TC_API_20 verifyalerts
      Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
      ${alerts} =    fusion_api_get_alerts    /rest/alerts
      # Log to Console    ${alerts}
      Log     ${alerts}
      : FOR    ${ICM_NAME}    IN    @{ICM_names}
      \    ${Al_stg_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert1_stg_star}    ${ICM_Alert1_stg_str_end}
      \    Log to Console    ${Al_stg_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_str}     Expected Error Message Not seen

      \    ${Al_stg_suc}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert1_stg_succ}    ${ICM_Alert1_stg_succ_end}
      \    Log to Console    ${Al_stg_suc}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_suc}     Expected Error Message Not seen

      \    ${Al_act_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert1_act_star}    ${ICM_Alert1_act_star_end}
      \    Log to Console    ${Al_act_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_str}     Expected Error Message Not seen

      \    ${Al_act_succ}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert1_act_succ}    ${ICM_Alert1_act_succ_end}
      \    Log to Console    ${Al_act_succ}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_succ}    Expected Error Message Not seen

    Fusion Api Logout Appliance
    Log to Console      \nFirmware Alert validation complete

F669_TC_API_20 Validate LE state after LE firmwareupgrade is complete
    [Tags]  Details
    Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
    sleep   30s
    ${le}=      Get LE              ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent
    Log to Console      \nLE state is 'Consistent' as expected

F669_TC_API_20 Validate Interconnect Firmware Version ICM1
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Validate Interconnect firmware version              ${ICM_1}                @{TestData.TB_interconnect_FVT_1}

F669_TC_API_20 Validate Interconnect Firmware Version ICM2
    Validate Interconnect firmware version              ${ICM_2}                @{TestData.TB_interconnect_FVT_2}

F669_TC_API_18 Firmware Upgrade on LE SharedInfrastructureAndProfiles
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Power off ALL Servers
    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers
    ${le}=      Get LE              ${LE_name}
    Log         ${le}
    ${le_uri}=      Get from LE         ${le}       uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}
    Log         {le_uri}
    ${body}=                Build LE SPP Body           ${le_spp_upgrade_profiles}
    Log         ${body}
    ${resp} =   Fusion Api Le Firmware Update       body=${body}        uri=${le_uri}           headers=${headers}
    Log         ${resp}
    ${task} =       Wait For Task   ${resp}     60 min      15s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Sleep    300s
    Log to Console  \nSylvite Firmware Upgrade completed successfully

F669_TC_API_18 verifyalerts
      Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
      ${alerts} =    fusion_api_get_alerts    /rest/alerts
      # Log to Console    ${alerts}
      Log     ${alerts}
      : FOR    ${ICM_NAME}    IN    @{ICM_names}
      \    ${Al_stg_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_stg_star}    ${ICM_Alert2_stg_str_end}
      \    Log to Console    ${Al_stg_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_str}     Expected Error Message Not seen

      \    ${Al_stg_suc}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_stg_succ}    ${ICM_Alert2_stg_succ_end}
      \    Log to Console    ${Al_stg_suc}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_stg_suc}     Expected Error Message Not seen

      \    ${Al_act_str}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_act_star}    ${ICM_Alert2_act_star_end}
      \    Log to Console    ${Al_act_str}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_str}     Expected Error Message Not seen

      \    ${Al_act_succ}    Catenate    SEPARATOR= ${ICM_NAME}    ${ICM_Alert2_act_succ}    ${ICM_Alert2_act_succ_end}
      \    Log to Console    ${Al_act_succ}
      \    Run Keyword and Continue on Failure     Should Contain       '${alerts}'       ${Al_act_succ}    Expected Error Message Not seen

    Fusion Api Logout Appliance
    Log to Console      \nFirmware Alert validation complete

F669_TC_API_18 Validate LE state after LE firmwareupgrade is complete
    [Tags]  Details
    sleep   30s
    Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
    ${le}=      Get LE              ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent
    Log to Console      \nLE state is 'Consistent' as expected

F669_TC_API_18 Validate Interconnect Firmware Version for ICM1
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Validate Interconnect firmware version              ${ICM_1}                @{TestData.TB_interconnect_FVT_1}

F669_TC_API_18 Validate Interconnect Firmware Version for ICM3
    Validate Interconnect firmware version              ${ICM_2}                @{TestData.TB_interconnect_FVT_2}

F669_TC_API_19 Firmware Upgrade on LE Enclosure ONLY - Should not update ICM
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${resp} =    Fusion Api Get Logical Enclosure
    ${headers} =   Get From Dictionary     ${resp}  headers
    ${le}=      Get LE              ${LE_name}
    Log         ${le}
    ${le_uri}=      Get from LE         ${le}       uri
    ${etag}=      Get from LE         ${le}       eTag
    Set To Dictionary    ${headers}    If-Match    ${etag}
    Log         {le_uri}
    ${body}=                Build LE SPP Body           ${le_upgrade_linkmodule}
    Log         ${body}
    ${resp} =   Fusion Api Le Firmware Update       body=${body}        uri=${le_uri}           headers=${headers}
    Log         ${resp}
    ${task} =       Wait For Task   ${resp}     60 min      15s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    Log to Console  \nSylvite Firmware Upgrade completed successfully

F669_TC_API_19 Validate LE state after LE firmwareupgrade is complete
    [Tags]  Details
    sleep   300s
    Fusion Api Login Appliance          ${APPLIANCE_IP}         ${admin_credentials}
    ${le}=      Get LE              ${LE_name}
    ${le_state}=        Get from LE         ${le}       state
    Should Be Equal As Strings    ${le_state}       Consistent
    Log to Console      \nLE state is 'Consistent' as expected

F669_TC_API_19 Validate Interconnect Firmware Version for ICM1
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    Validate Interconnect firmware version              ${ICM_1}                @{TestData.TB_interconnect_FVT_1}

F669_TC_API_19 Validate Interconnect Firmware Version for ICM3
    Validate Interconnect firmware version              ${ICM_2}                @{TestData.TB_interconnect_FVT_2}

*** Keywords ***
Log into Fusion appliance as Administrator
    ${user} =  Get Data By Property  ${TestData.users}  name  Administrator
    Fusion UI Login to Appliance   ${user[0].name}

Validate Interconnects
    [Arguments]     ${ICM_NAME}     ${ltlv}     ${rtlv}     ${explldp}
    ${ic} =     Get IC      ${ICM_NAME}
    ${enableRichTLV} =          Get From IC    ${ic}   enableRichTLV
    ${enableTaggedLldp} =       Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =             Get from IC     ${ic}       lldpIpAddress
    Should be Equal as Strings    ${enableRichTLV}      ${rtlv}
    Should be Equal as Strings    ${enableTaggedLldp}       ${ltlv}
    Should be Equal as Strings    ${lldpip}     ${explldp}

Validate Interconnect firmware version
    [Arguments]    ${ICM}               @{TestData.TB_interconnect_FVT}
    ${ic} =     Get IC          ${ICM}
    ${firmwareVersion} =     Get From IC    ${ic}   firmwareVersion
    Log to console and logfile          \nFirmwareVersion from ICM '${ICM}' is '${firmwareVersion}'
    # ${serialNumber} =     Get From IC    ${ic}   serialNumber
    ${EMreturn}=        tbird_fetch_icm_data_from_em            @{TestData.TB_interconnect_FVT}
    # Log           ${EMreturn}
    ${FirmwareVersion} =    Get From Dictionary         ${EMreturn}         FirmwareVersion
    Should be Equal as Strings    ${FirmwareVersion}     ${firmwareVersion}
    Run Keyword and Continue on Failure    Should Be Equal  '${FirmwareVersion}'        '${firmwareVersion}'    Part Number as desired
    Log to console and logfile          \n'${FirmwareVersion}' from EM matches '${firmwareVersion}' from Interconnect GET call

Build LE SPP Body
    [Arguments]     ${le_spp}

    ${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
    ${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
    ${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
    ${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}
    ${updateFirmwareOnUnmanagedInterconnect} =              Get Variable Value  ${le_spp['updateFirmwareOnUnmanagedInterconnect']}
    ${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
    ${value_dict} =    Create Dictionary   firmwareBaselineUri=${firmwareBaselineUri}
    ...                             forceInstallFirmware=${forceInstallFirmware}
    ...                             firmwareUpdateOn=${firmwareUpdateOn}
    ...                             logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}
    ...                             updateFirmwareOnUnmanagedInterconnect=${updateFirmwareOnUnmanagedInterconnect}
    ...                             validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ${value} =   Create list     ${value_dict}
    Log         ${value_dict}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/firmware
    ...                             value=${value_dict}
    ${body} =   Create list     ${body}
    [Return]    ${body}

KC Load Test Data
    Set Log Level    TRACE
    Load Test Data  ${DataFile}

Load Test Data and Open Browser
    Set Log Level    TRACE
    Load Test Data  ${DataFile}
    Log Variables
    Open Browser  ${ApplianceUrl}  ${Browser}
    Maximize Browser Window
    Set Selenium Speed  ${SeleniumSpeed}

Get PortId from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${interconnect} =           fusion_api_get_interconnect           uri=${uri}
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log         ${ports}
    ${l} =  Get Length  ${ports}
    Log     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_id} =    Get From Dictionary     ${port_list}        portId

    [Return]    ${port_id}
    Log         ${port_id}

Get PortStatus from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2 - Fetched from datafile
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${interconnect} =           fusion_api_get_interconnect           uri=${uri}
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log         ${ports}
    ${l} =  Get Length  ${ports}
    Log     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_status} =    Get from Dictionary     ${port_list}        portHealthStatus
    [Return]    ${port_status}
    Log         ${port_status}


Build Ports Edit Body
    [Arguments]     ${port_id}          ${downlink_edit}
    ${interconnectName} =           Get Variable Value  ${downlink_edit['interconnectName']}
    ${enabled} =           Get Variable Value  ${downlink_edit['enabled']}
    ${portName} =           Get Variable Value  ${downlink_edit['portName']}
    ${type} =           Get Variable Value  ${downlink_edit['type']}
    ${edit_body} =  Create Dictionary   interconnectName=${interconnectName}
    ...                             enabled=${enabled}
    ...                             portName=${portName}
    ...                             portId=${port_id}
    ...                             type=${type}
    ${edit_body} =   Create list     ${edit_body}
    [Return]    ${edit_body}
    Log         ${edit_body}

Get IC
    [Arguments]     ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log     ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log     ${ic}

Get LE
    [Arguments]     ${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log     ${resp}
    ${les} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${les}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${le} =     Get From List   ${les}    ${x}
    \   Exit For Loop If    '${le['name']}' == '${LE_name}'
    [Return]    ${le}
    Log     ${le}

Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}

Create Logical Enclosure
    [Arguments]     ${LE NAME}=${LE Name}   ${EG Name}=${EG Name}

    # Get enclosureGroupUri
    ${Response}=            Fusion Api Get Enclosure Groups     param=?filter="name=${EG NAME}"
    ${members}=             Get From Dictionary                 ${Response}     members
    ${member}=              Get From List                       ${members}      0
    ${enclosureGroupUri}=   Get From Dictionary                 ${member}       uri

    # Get enclosureUri
    ${Response}=        Fusion Api Get Enclosures
    ${members}=         Get From Dictionary     ${Response}     members
    ${member}=          Get From List           ${members}      0
    ${enclosureUri}=    Get From Dictionary     ${member}       uri
    ${enclosureUris}=   Create List             ${enclosureUri}

    # Build Payload
    ${LE Payload}=      Fusion API Create Logical Enclosure Payload     name=${LE Name}
    ...                 enclosureGroupUri=${enclosureGroupUri}
    ...                 enclosureUris=${enclosureUris}

    # Create Logical Enclosure
    ${Response}=        Fusion Api Create Logical Enclosure         body=${LE Payload}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate create Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure.

    [Return]    ${Response}

Get Enclosure Support Dump
    [Arguments]                ${le}         ${file}
    ${le}=      Get LE           ${le}
    ${logicalEnclosureUri}=     Get from LE         ${le}       uri
    ${logicalEnclosureId}=      Fetch From Right        ${logicalEnclosureUri}      /

    # Build LE Support Dump Payload
    ${encrypt}=         Convert to Integer      1
    ${applianceDump}=   Convert to Integer      0
    ${LE SupportDump Payload}=                  Create Dictionary   errorCode=API-TEST      encrypt=${encrypt}
    #...                 includeApplianceDump=${applianceDump}

    # Create Enclosure Support Dump
    ${Response}=        Fusion Api Get Logical Enclosure Support Dump   body=${LE SupportDump Payload}
    ...                 id=${logicalEnclosureId}
    ${status_code}=     Get From Dictionary     ${Response}             status_code
    Should Be Equal as Strings                  ${status_code}          202
    ...                 msg=Failed to initiate Create Enclosure Support Dump.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     1200s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure Support Dump.

    # Download Generated Support Dump file
    ${associatedResource}=      Get From Dictionary     ${task}                 associatedResource
    ${supportDumpUri}=          Get From Dictionary     ${associatedResource}   resourceUri

    ${Response}=        Fusion Api Download Support Dump            uri=${supportDumpUri}   localfile=${file}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      200
    ...                 msg=Failed to Download Enclosure Support Dump.

    [Return]    ${Response}

Delete Logical Enclosure
    ${Response}=        Fusion Api Delete Logical Enclosure         name=${LE Name}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate delete Logical Enclosure.
    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to delete Logical Enclosure.

Verify Enclosure in Monitored State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Monitored   msg=Enclosure ${ENC Serial Number} not in Monitored state.

Verify Enclosure in Configured State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Configured      msg=Enclosure ${ENC Serial Number} not in Configured state.




#FTS
    #Set Log Level  DEBUG
    #Get VM IP   ${VM}
    #First Time Setup                   password=hpvse123

Test Specific Setup
    Set Log Level   TRACE
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =  Get Variable Value    ${ethernet_networks}
    Run Keyword If  ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable  ${ethernet_networks}
    #${ethernet_ranges} =   Get Variable Value  ${ethernet_ranges}
    #Run Keyword If ${ethernet_ranges} is not ${null}       Run Keyword for List    ${ethernet_ranges}  Create Ethernet Range
    #${fc_networks} =   Get Variable Value  ${fc_networks}
    #Run Keyword If ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    #${fcoe_networks} = Get Variable Value  ${fcoe_networks}
    #Run Keyword If ${fcoe_networks} is not ${null}    Add FCoE Networks from variable      ${fcoe_networks}
    #${licenses} =  Get Variable Value  ${licenses}
    #Run Keyword If ${licenses} is not ${null}      Add Licenses from variable      ${licenses}
    #Login all users     ${users}

Run FTS and test-specific setup
    Set Log Level   TRACE
    #FTS
    Test Specific Setup
