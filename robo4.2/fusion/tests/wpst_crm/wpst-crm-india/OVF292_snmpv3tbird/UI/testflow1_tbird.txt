*** Settings ***
Documentation
Resource    SNMPV3-CONFIG.txt
Resource                    C:/3.10_new_checkin/fusion/tests/wpst_crm/resources/resource.txt
Force Tags    Buildup
Suite Setup    Load Test Data and Open Browser
Suite Teardown    Logout And Close All Browsers
Library    Dialogs
Library    String
Library                Collections
Library                json
Library                OperatingSystem
#Library                Selenium2Library
Library                BuiltIn
Variables           data_variables.py
Library             apic.py
Library             SSHLibrary


*** Variables ** *
${SSH_PASS}                     hpvse1
#${APPLIANCE_IP}                    15.212.136.104
${APPLIANCE_IP}                     192.168.144.146
${OA_HOST}          192.168.144.133
${OA_USER}          Administrator
${OA_PASS}              Admin
${APIC_USER}                    admin
${APIC_PASS}                    password
${SSH_PASS}                     hpvse1
${inform}                                 False
${MIB_down}             IF-MIB::linkDown
${MIB_up}               IF-MIB::linkUp
${ICM_IP}          192.168.146.17
${State_Power_Off}             Maintenance
${State_Configured}             Configured


${snmp_utils_ip}                192.168.148.49
${snmp_utils_userid}            root
${snmp_utils_password}          hpvse1
${ICM_1}                     RAVIENCL10, interconnect 3
${ICM_2}                     RAVIENCL10, interconnect 6




${OA_HOST}            192.168.144.133
${OA_USER}            Administrator
${OA_PASS}                Admin
${BAY}                2

${DataFile}                         ./test_flow.xml

*** Test Cases ***
OVF293_UI_TC_00 Log into fusion as Administrator and create networks,LIG ,EG ,Enclosure and a Server profile
    [Documentation]    Log into Appliance as Administrator
    Log To Console    *********Log into Appliance as Administrator****************
    ${user} =    Get Data By Property    ${TestData.users}    name    Administrator
    fusion_ui_login_to_appliance    ${user[0].name}
    Log to Console    Successfully logged in as Administrator

OVF293_UI_TC_PRE1 create networks,LIG ,EG ,Enclosure
    [Documentation]    CREATE NETWORKS AND LIG
    Log to Console    **********CREATE ETHERNET NETWORK**********
    Fusion UI Create Ethernet Network    @{TestData.networks_addtbird}

    Log To Console    ******CREATE LIG**********
    ${Status}=    fusion_ui_create_tbird_logical_interconnect_group    @{TestData.ligs_addtbird}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}

OVF293_UI_TC_PRE2 Create EG
    [Documentation]    CREATE EG
    Log To Console    ******CREATE EG**********
    ${Status}=    fusion_ui_create_tbird_enclosure_group    @{TestData.encgroups_addtbird}

OVF293_UI_TC_PRE3 Create a Logical Enclosure
    [Documentation]    ADD LOGICAL ENCLOSURE
    Log To Console    ******CREATING LOGICAL ENCLOSURE******
    ${Status}=    fusion_ui_create_tbird_logical_enclosure    @{TestData.LogicalEnclosures}
    Run Keyword If    '${Status}' == 'True'    Log to Console    Successfully added LE    ELSE    fail

OVF293_UI_TC_PRE4 Verify LIG
    [Documentation]    VERIFY LIG
    Log To Console    ******VERIFY LIG**********
    ${Status}=    fusion_ui_verify_logical_interconnect_group_tbird             @{TestData.ligs_verifylig}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}


OVF293_UI_TC_155_1 Retrieve User Name and AuthProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR AUTH PROTOCOLS
     Open Connection               192.168.148.49
     Login                   root        hpvse1
      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User1 -a SHA -A password123 -t 30 -l authNoPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.5 
    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and AuthProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthProtoMIB output       ${tbird_user_proto_priv_all}                  ${user_AuthProto}

    Log to Console                       ${status}

    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}
    Close All Connections



OVF293_UI_TC_156_1 Retrieve User Name and PrivProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR PRIVACY PROTOCOLS
    Open Connection               192.168.148.49

      Login                   root        hpvse1

      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User1 -a SHA -A password123 -t 30 -l authNoPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.8

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and PrivProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthPrivMIB output       ${tbird_user_proto_priv_all}                  ${user_AuthProto}

    Log to Console                       ${status}

    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}


    Close All Connections

OVF293_UI_TC_133 Remove users from LIG
    [Documentation]    EDIT LIG
    Log To Console    ******EDIT LIG BY REMOVING SNMPV3 USERS **********
    ${Status}=    fusion_ui_edit_logical_interconnect_group_tbird    @{TestData.ligs_edittbird1}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}


    Log To Console    ******EDIT LIG BY ADDING 10 SNMPV3 USERS **********
    ${Status}=    fusion_ui_edit_logical_interconnect_group_tbird    @{TestData.ligs_addmd5tbird}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}

    Log To Console    ******UPDATE FROM GROUP **********
    ${Status}=    fusion_ui_update_logical_interconnect_from_group    @{TestData.li_ufg1tbird}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF293_UI_TC_155_2 Retrieve User Name and AuthProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR AUTH PROTOCOLS
     Open Connection               192.168.148.49
     Login                   root        hpvse1
      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User1 -a SHA -A password123 -x DES -X password123 -t 30 -l authPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.5

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and AuthProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthProtoMIB output       ${tbird_user_proto_priv_1}                  ${user_AuthProto}

    Log to Console                       ${status}

    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}

    Close All Connections

OVF293_UI_TC_156_2 Retrieve User Name and PrivProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR PRIV PROTOCOLS
    Open Connection               192.168.148.49

      Login                   root        hpvse1

      Log to Console                \n Executing snmpBulkWalk on Priv Proto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User1 -a SHA -A password123 -x DES -X password123 -t 30 -l authPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.8

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and PrivProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthPrivMIB output       ${tbird_user_proto_priv_1}                  ${user_AuthProto}

    Log to Console                       ${status}

    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}


    Close All Connections

OVF293_UI_TC_142 Edit LI to remove users
    [Documentation]    EDIT LI
    Log To Console    ******EDIT LI TO REMOVE SNMP USERS **********
    ${Status}=    fusion_ui_edit_logical_interconnects    @{TestData.li_remove_user}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Log To Console    ******EDIT LI TO ADD SNMP USERS **********
    ${Status}=    fusion_ui_edit_logical_interconnects    @{TestData.li_add_user}
    Run Keyword And Continue On Failure   Should Be Equal    '${Status}'    'True'    ${Status}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF293_UI_TC_155_3 Retrieve User Name and AuthProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR AUTH PROTOCOLS
     Open Connection               192.168.148.49
     Login                   root        hpvse1
      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User10 -a SHA -A password123 -x AES -X password123 -t 30 -l authPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.5

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and AuthProto from MIB output                         ${output1}
    ${Status}=                Validate UserName and AuthProtoMIB output       ${tbird_user_proto_priv_2}                  ${user_AuthProto}
    Log to Console                       ${status}
    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}
    Close All Connections

OVF293_UI_TC_155_4 Retrieve User Name and PrivProto from MIB output and validate LI
    [Documentation]    VALIDATE MIB FOR PRIV PROTOCOLS
   Open Connection               192.168.148.49

      Login                   root        hpvse1

      Log to Console                \n Executing snmpBulkWalk on Priv Proto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u User10 -a SHA -A password123 -x AES -X password123 -t 30 -l authPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.8

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and PrivProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthPrivMIB output       ${tbird_user_proto_priv_2}                  ${user_AuthProto}

    Log to Console                       ${status}

    Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}


    Close All Connections

OVF_293_UI_TC_PRE_TRAP kill trap
    Kill snmptrapd demon

OVF293_UI_TC_182 Generate Traps_ For User_AuthPriv_LinkDown
      Open Connection               192.168.148.49
      Login                   root        hpvse1
      Sleep  2
      Set Client Configuration            timeout=16 seconds
      Write       resize
      ${output}=              Start Command                             snmptrapd -f -C -c /etc/snmp/snmptrapd.conf -Le -L f /etc/messages
      Close All Connections

    Log to Console    **************Disable the uplink port**********
    fusion_ui_edit_interconnect    ${TestData.interconnects_tbird[0]}
    sleep   100s


    Log to console **** Validate Trap received ****
     Open Connection               192.168.148.49
     Login                   root        hpvse1
     Sleep  2
     Set Client Configuration            timeout=16 seconds
     Write       resize
     ${trapoutput}=                Write       cd /etc
     ${trapoutput}=                Read until         etc]#
      ${trapoutput2}=               Write              tail -n 3 messages
      ${trapoutput1}=               Read until         etc]#
      Log to Console                ${trapoutput1}
      ${string}=              Should contain                ${trapoutput1}                ${MIB_down}
      ${string}=              Should contain                ${trapoutput1}                ${ICM_IP}
      Log to Console               Successfully validated in the trap that ${ICM_IP} status is ${MIB_down}

    Fusion UI Logout of Appliance
    Log to Console    Logout Completed

    Log To Console    *********Log into Appliance as Administrator****************
    ${user} =    Get Data By Property    ${TestData.users}    name    Administrator
    fusion_ui_login_to_appliance    ${user[0].name}
    Log to Console    Successfully logged in as Administrator

OVF_293_UI_TC_179 Generate Traps_ For User_AuthPriv_LinkUp
    Log to Console    **************Enable the uplink port**********
    fusion_ui_edit_interconnect    ${TestData.interconnects_enable_tbird[0]}
    sleep   100s

    Log to console *** Validate Trap received***
      Open Connection               192.168.148.49
      Login                   root        hpvse1
      Sleep  2
      Set Client Configuration            timeout=16 seconds
      Write       resize
      ${trapoutput}=                Write       cd /etc
      ${trapoutput}=                Read until         etc]#
      ${trapoutput2}=               Write              tail -n 3 messages
      ${trapoutput1}=               Read until         etc]#
      Log to Console                ${trapoutput1}
      ${string}=              Should contain                ${trapoutput1}                ${MIB_up}
      ${string}=              Should contain                ${trapoutput1}                ${ICM_IP}
      Log to Console               Successfully validated in the trap that ${ICM_IP} status is ${MIB_up}

OVF_293_UI_TC_146 poweroff interconnect
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    OA CLI POWEROFF    ${OA_HOST}    ${OA_USER}    ${OA_PASS}   INTERCONNECT    ${BAY}
    Log to Console  Waiting for interconnect removal  to complete
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}


    Log to Console    poweron interconnect
    OA CLI POWERON    ${OA_HOST}    ${OA_USER}    ${OA_PASS}   INTERCONNECT    ${BAY}
    Log to Console  Waiting for interconnect claim process to complete
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Sleep    15 minutes 30 seconds

    Log to Console    Validate Cold Start Trap received
    Open Connection               192.168.148.49
    Login                   root        hpvse1
    Sleep    2
    Set Client Configuration            timeout=16 seconds
    Write       resize
    ${trapoutput}=                Write       cd /etc
    ${trapoutput}=                Read until         etc]#
    ${getfile}=             SSHLibrary.Get File                 //etc//messages               C:\\
    ${trap_coldstart}=                  OperatingSystem.Grep File                 C:\\messages                  SNMPv2-MIB::coldStart
    Log to Console          ${trap_coldstart}
    ${trap_coldstart}=                  Should contain                ${trap_coldstart}            SNMPv2-MIB::coldStart

OVF_293_UI_TC_TRAP_CLEANUP kill trap
    Kill snmptrapd demon
*** Keywords ***

Get IC
    [Documentation]    Gets Interconnect Information
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log        ${ic}

Verify Interconnect State
    [Documentation]    Verifying interconnect state
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Kill snmptrapd demon
    [Documentation]    Kill existing daemon
    Open Connection               192.168.148.49
    Login                   root        hpvse1
    ${output}=                Execute Command                           ps -e | grep snmptrapd
    ${status}=                Run Keyword If                '${output}'!=''               Kill Process Id         ${output}
    ...                             ELSE              Log to Console                'Trapd daemon not running'

Kill Process Id
    [Documentation]    Kill existing process
    [Arguments]     ${output}
    ${pid1}=                        Split String            ${output}
    ${pid}=                   Get from List           ${pid1}           0
    Log to Console                          snmptrapd pid is '${pid}'
    ${output}=                Execute Command                           kill -9 ${pid}
    ${output1}=               Execute Command                           ps -e | grep snmptrapd
    Log to Console                        ${output1}
    Run Keyword and Continue on Failure    Should Be Equal  '${output1}'        ''    snmptrapd demon not killed
    Close All Connections


KC Load Test Data
    [Documentation]    KC Load Test Data
    Set Log Level    TRACE
    Load Test Data  ${DataFile}


Retrieve username and AuthProto from MIB output
    [Documentation]    Retrieve username and AuthProto from MIB output
    [Arguments]     ${output}
    ${lines}=    Split to Lines                ${output}
    ${lines1}=    Convert To List    ${lines}
    ${UserProto_list}=              Create List
      :For     ${line}  IN  @{lines1}
    \       ${words}=               Split String            ${line}                 =
    \       ${word_username}=             Get from List        ${words}       0
    \       ${word_uname}=                      Split String            ${word_username}                  .
    \       ${user_name1}=                      Get from List           ${word_uname}            -1
    \       ${user_name}=                       Remove String           ${user_name1}            "
    \       ${user_name}=           Strip String            ${user_name}
    \       ${word_proto}=                Get from List        ${words}       1
    \       ${word_proto1}=               Split String            ${word_proto}           ::
    \       ${word_protocol}=             Get from List           ${word_proto1}          1
    \       ${auth_protocol}=             Set Variable If
    \       ...                                                   '${word_protocol}'=='usmHMACSHAAuthProtocol'                      SHA1
    \       ...                                                   '${word_protocol}'=='usmHMACMD5AuthProtocol'                      MD5
    \       ...                                                   '${word_protocol}'=='usmNoAuthProtocol'                     None
    \       ${user_proto} =         Create Dictionary   user=${user_name}
    ...                             auth=${auth_protocol}
    \       Append to List                ${UserProto_list}             ${user_proto}
    [Return]                  ${UserProto_list}


Create UserProto Data
      [Documentation]    Create UserAuth Data
      [Arguments]     ${user_proto_priv}
      ${user_proto}                 Create List
      ${l} =  Get Length            ${user_proto_priv}
      :FOR    ${x}    IN RANGE    0   ${l}
      \           ${user_name}=                 Get from Dictionary           ${user_proto_priv[${x}]}            user
      \           ${auth_protocol}=             Get from Dictionary           ${user_proto_priv[${x}]}            auth
      \           ${user_auth_proto} =   Create Dictionary   user=${user_name}
      ...                             auth=${auth_protocol}
      \       Append to List                ${user_proto}                 ${user_auth_proto}
      [Return]                        ${user_proto}

Create UserPriv Data
      [Documentation]    Create UserPriv Data
      [Arguments]     ${user_proto_priv}
      ${user_priv}                  Create List
      ${l} =  Get Length            ${user_proto_priv}
      :FOR    ${x}    IN RANGE    0   ${l}
      \           ${user_name}=                 Get from Dictionary           ${user_proto_priv[${x}]}            user
      \           ${priv_protocol}=             Get from Dictionary           ${user_proto_priv[${x}]}            priv
      \           ${user_priv_proto} =   Create Dictionary   user=${user_name}
      ...                             priv=${priv_protocol}
      \       Append to List                ${user_priv}                  ${user_priv_proto}
      [Return]                        ${user_priv}


Validate UserName and AuthProtoMIB output
      [Documentation]    Validate UserName and AuthProtoMIB output
      [Arguments]     ${expected_UserAuthProto}                   ${actual_UserAuthProto}

      Sort List         ${actual_UserAuthProto}
      ${expected_UserAuthProto}=                Create UserProto Data         ${expected_UserAuthProto}
      ${expected_UserAuthProto}=                Convert to List               ${expected_UserAuthProto}
      Sort List         ${expected_UserAuthProto}
      Log to console          \nExpected UserAuthProto is '${expected_UserAuthProto}'
      Log to console          \nActual UserAuthProto is '${actual_UserAuthProto}'
      ${status}=        Run Keyword And Return Status             Lists Should Be Equal                  ${expected_UserAuthProto}                 ${actual_UserAuthProto}
      [Return]          ${status}

Retrieve username and PrivProto from MIB output
    [Documentation]    Retrieve username and PrivProto from MIB output
    [Arguments]     ${output}
    ${lines}=    Split to Lines                ${output}
    ${lines1}=     Convert to List               ${lines}
    #${user_list}=            Create List
    ${UserPriv_list}=         Create List
      :For     ${line}  IN  @{lines1}
    \       ${words}=               Split String            ${line}                 =
    \       ${word_username}=             Get from List        ${words}       0
    \       ${word_uname}=                      Split String            ${word_username}                  .
    \       ${user_name1}=                      Get from List           ${word_uname}            -1
    \       ${user_name}=                       Remove String           ${user_name1}            "
    \       ${user_name}=           Strip String            ${user_name}
    \       ${word_priv}=                 Get from List        ${words}       1
    \       ${word_priv1}=                Split String            ${word_priv}            ::
    \       ${word_privilege}=                  Get from List           ${word_priv1}            1
    \       ${priv_protocol}=             Set Variable If
    \       ...                                                   '${word_privilege}'=='usmDESPrivProtocol'                   DES
    \       ...                                                   '${word_privilege}'=='usmNoPrivProtocol'                          None
    \       ...                                                   '${word_privilege}'=='snmpPrivProtocols.4'                              AES-128
    \       ${priv_protocol} =      Create Dictionary   user=${user_name}
    ...                             priv=${priv_protocol}
    \       Append to List                ${UserPriv_list}              ${priv_protocol}
    [Return]                  ${UserPriv_list}



Validate UserName and AuthPrivMIB output
      [Documentation]    Validate UserName and AuthPrivMIB output
      [Arguments]     ${expected_UserPrivProto}                   ${actual_UserPrivProto}
      Sort List         ${actual_UserPrivProto}
      ${expected_UserPrivProto}=                Create UserPriv Data          ${expected_UserPrivProto}
      ${expected_UserPrivProto}=                Convert to List               ${expected_UserPrivProto}
      Sort List         ${expected_UserPrivProto}
      Log to console          \nExpected UserPrivProto is '${expected_UserPrivProto}'
      Log to console          \nActual UserAuthProto is '${actual_UserPrivProto}'

      ${status}=        Run Keyword And Return Status             Lists Should Be Equal                  ${expected_UserPrivProto}                 ${actual_UserPrivProto}
      [Return]          ${status}

Execute snmpbulkwalk Command and validate for Authentication Protocols
      [Documentation]    snmpbulkwalk Command and validate for Authentication Protocols
      [Arguments]     ${user_proto_priv}        ${ICM_IP}         ${OID}
      Log to Console                      \n Input data is : ${user_proto_priv}
      Log to Console                      \n\n
      Open Connection               ${snmp_utils_ip}
      Login                   ${snmp_utils_userid}          ${snmp_utils_password}
      ${l} =  Get Length            ${user_proto_priv}
      #Log to Console                      \n Length is : ${l}
      :FOR    ${x}    IN RANGE    0   ${l}
      \           ${user_name}=     Get from Dictionary           ${user_proto_priv[${x}]}            user
      \           ${auth_protocol}=    Get from Dictionary           ${user_proto_priv[${x}]}            auth
      \           ${auth_protocol}=             Get Substring           ${auth_protocol}            0                 3
      \           ${priv_protocol}=             Get from Dictionary           ${user_proto_priv[${x}]}            priv
      \           ${priv_protocol2}=                  Get Substring           ${priv_protocol}        0                 3
      \           ${priv_protocol}=             Set Variable if
      \           ...                                 '${priv_protocol}'=='None'                None
      \           ...                                 '${priv_protocol}'!='None'                ${priv_protocol2}

      \           ${auth_password}=             Get from Dictionary           ${user_proto_priv[${x}]}            auth_pass
      \           ${priv_password}=             Get from Dictionary           ${user_proto_priv[${x}]}            priv_pass
      \           ${sec_level}=                 Set Variable if
      \           ...                                 '${priv_protocol}'=='None'                authNoPriv
      \           ...                                 '${priv_protocol}'!='None'                authPriv
      \           Log to Console                Performing MIB walk for '${user_name}' with SecurityLevel '${sec_level}' AuthProtocol '${auth_protocol}' PrivacyProtocol '${priv_protocol}'
      \           ${command}=             Set Variable if
      \           ...                           '${priv_protocol}'=='None'                snmpbulkwalk -v 3 -u ${user_name} -a ${auth_protocol} -A ${auth_password} -t 30 -l ${sec_level} -c public ${ICM_IP} ${OID}
      \           ...                           '${priv_protocol}'!='None'                snmpbulkwalk -v 3 -u ${user_name} -a ${auth_protocol} -A ${auth_password} -x ${priv_protocol} -X ${priv_password} -t 30 -l ${sec_level} -c public ${ICM_IP} ${OID}
      \           Log to Console          Executing Command                   ${command}
      \           ${output}=              Execute Command                           ${command}
    \       ${user_AuthProto}=            Retrieve username and AuthProto from MIB output                              ${output}
    \       ${Status}=              Validate UserName and AuthProtoMIB output       ${user_proto_priv}                  ${user_AuthProto}
    \       Log to Console                      ${status}
      \           Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}
    #Close All Snmp Connections
    Close All Connections

Execute snmpbulkwalk Command and validate for Privacy Protocols
      [Documentation]    snmpbulkwalk Command and validate for Privacy Protocols
      [Arguments]     ${user_proto_priv}        ${ICM_IP}         ${OID}
      Open Connection               ${snmp_utils_ip}
      Login                   ${snmp_utils_userid}          ${snmp_utils_password}
      ${l} =  Get Length            ${user_proto_priv}
      :FOR    ${x}    IN RANGE    0   ${l}
      \           ${user_name}=                 Get from Dictionary           ${user_proto_priv[${x}]}            user
      \           ${auth_protocol}=             Get from Dictionary           ${user_proto_priv[${x}]}            auth
      \           ${auth_protocol}=             Get Substring           ${auth_protocol}            0                 3
      \           ${priv_protocol}=             Get from Dictionary           ${user_proto_priv[${x}]}            priv
      \           ${priv_protocol2}=                  Get Substring           ${priv_protocol}        0                 3
      \           ${priv_protocol}=             Set Variable if
      \           ...                                 '${priv_protocol}'=='None'                None
      \           ...                                 '${priv_protocol}'!='None'                ${priv_protocol2}

      \           ${auth_password}=             Get from Dictionary           ${user_proto_priv[${x}]}            auth_pass
      \           ${priv_password}=             Get from Dictionary           ${user_proto_priv[${x}]}            priv_pass
      \           ${sec_level}=                 Set Variable if
      \           ...                                 '${priv_protocol}'=='None'                authNoPriv
      \           ...                                 '${priv_protocol}'!='None'                authPriv
      \           Log to Console                Performing Privacy protocol MIB walk for '${user_name}' with SecurityLevel '${sec_level}' AuthProtocol '${auth_protocol}' PrivacyProtocol '${priv_protocol}'
      \           ${command}=             Set Variable if
      \           ...                           '${priv_protocol}'=='None'                snmpbulkwalk -v 3 -u ${user_name} -a ${auth_protocol} -A ${auth_password} -t 30 -l ${sec_level} -c public ${ICM_IP} ${OID}
      \           ...                           '${priv_protocol}'!='None'                snmpbulkwalk -v 3 -u ${user_name} -a ${auth_protocol} -A ${auth_password} -x ${priv_protocol} -X ${priv_password} -t 30 -l ${sec_level} -c public ${ICM_IP} ${OID}
      \           Log to Console          Executing Command                   ${command}
      \           ${output}=              Execute Command                           ${command}
    \       ${user_Priv_Proto}=           Retrieve username and PrivProto from MIB output                              ${output}
    \       Log to Console                         ${user_proto_priv}
    \       ${Status}=              Validate UserName and AuthPrivMIB output        ${user_proto_priv}                  ${user_Priv_Proto}
    \       Log to Console                      ${status}
      \           Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}
    #Close All Snmp Connections
    Close All Connections
    Close All Connections


    Tbird Retrieve User Name and AuthPro from MIB output and validate
     [Documentation]    Retrieve username and AuthProto from MIB output for TBird and validate the output
      Open Connection               192.168.148.49

      Login                   root        hpvse1

      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u potashuser -a SHA -A qwer1234 -t 30 -l authNoPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.5

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and AuthProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthProtoMIB output       ${tbird_user_proto_priv}                  ${user_AuthProto}

    #Log to Console                       ${status}

      #Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}

    Close All Snmp Connections

    Close All Connections



Tbird Retrieve User Name and PrivProto from MIB output and validate
     [Documentation]    Retrieve username and PrivProto and validate the same from MIB output for TBird
      Open Connection               192.168.148.49

      Login                   root        hpvse1

      Log to Console                \n Executing snmpBulkWalk on Authproto MIB

    ${output}=                Execute Command                           snmpbulkwalk -v 3 -u potashuser -a SHA -A qwer1234 -t 30 -l authNoPriv -c public 192.168.146.17 .1.3.6.1.6.3.15.1.2.2.1.8

    ${output1} =              filter_default_users                ${output}

    ${user_AuthProto}=        Tbird Retrieve username and PrivProto from MIB output                         ${output1}

    ${Status}=                Validate UserName and AuthProtoMIB output       ${tbird_user_proto_priv}                  ${user_AuthProto}

    #Log to Console                       ${status}

      #Run Keyword And Continue On Failure   Should Be Equal   '${Status}'   'True'   ${Status}

    Close All Snmp Connections

    Close All Connections





Tbird Retrieve username and AuthProto from MIB output
      [Documentation]    Retrieve username and Authprotocol from MIB output for TBird
      [Arguments]     ${output}

    #${lines}=                Split to Lines                ${output}

    #${lines1}=               Convert to List               ${output}

    #${user_list}=            Create List

    ${UserProto_list}=              Create List

      :For     ${line}  IN  @{output}

    \       ${words}=               Split String            ${line}                 =

    \       ${word_username}=             Get from List        ${words}       0

    \       ${word_uname}=                      Split String            ${word_username}                  .

    \       ${user_name1}=                      Get from List           ${word_uname}            -1

    \       ${user_name}=                       Remove String           ${user_name1}            "

    \       ${user_name}=           Strip String            ${user_name}

    \       ${word_proto}=                Get from List        ${words}       1

    \       ${word_proto1}=               Split String            ${word_proto}           ::

    \       ${word_protocol}=             Get from List           ${word_proto1}          1

    \       ${auth_protocol}=             Set Variable If

    \       ...                                                   '${word_protocol}'=='usmHMACSHAAuthProtocol'                      SHA1

    \       ...                                                   '${word_protocol}'=='snmpAuthProtocols.5'                   SHA256

    \       ...                                                   '${word_protocol}'=='snmpAuthProtocols.6'                   SHA384

    \       ...                                                   '${word_protocol}'=='snmpAuthProtocols.7'                   SHA512

    \       ...                                                   '${word_protocol}'=='usmNoAuthProtocol'                           None

    \       ${user_proto} =         Create Dictionary   user=${user_name}

    ...                             auth=${auth_protocol}

    \       Append to List                ${UserProto_list}             ${user_proto}

    [Return]                  ${UserProto_list}



Tbird Retrieve username and PrivProto from MIB output
     [Documentation]    Retrieve username and privprotocol from MIB output for TBird

      [Arguments]     ${output}

    ${UserPriv_list }=              Create List

      :For     ${line}  IN  @{output}

    \       ${words}=               Split String            ${line}                 =

    \       ${word_username}=             Get from List        ${words}       0

    \       ${word_uname}=                      Split String            ${word_username}                  .

    \       ${user_name1}=                      Get from List           ${word_uname}            -1

    \       ${user_name}=                       Remove String           ${user_name1}            "

    \       ${user_name}=           Strip String            ${user_name}

    \       ${word_priv}=                 Get from List        ${words}       1

    \       ${word_priv1}=                Split String            ${word_priv}            ::

    \       ${word_privilege}=                  Get from List           ${word_priv1}            1

    \       ${priv_protocol}=             Set Variable If

    \       ...                                                   '${word_privilege}'=='snmpPrivProtocols.3'                        3DES

    \       ...                                                   '${word_privilege}'=='snmpPrivProtocols.4'                              AES128

    \       ...                                                   '${word_privilege}'=='snmpPrivProtocols.5'                              AES192

    \       ...                                                   '${word_privilege}'=='snmpPrivProtocols.6'                              AES256

    \       ...                                                   '${word_privilege}'=='usmNoPrivProtocol'                          None
    \       ...                                                   '${word_privilege}'=='usmDESPrivProtocol'                          DES

    \       ${priv_protocol} =      Create Dictionary   user=${user_name}

    ...                             priv=${priv_protocol}

    \       Append to List                ${UserPriv_list}              ${priv_protocol}

    [Return]                  ${UserPriv_list}





 Validate Trap received
      [Documentation]    Validate traps received
      [Arguments]     ${MIB}        ${ICM_IP}
      Open Connection               192.168.148.49
      Login                   root        hpvse1
      Sleep  2
      Set Client Configuration            timeout=16 seconds
      Write       resize
      ${trapoutput}=                Write       cd /etc
      ${trapoutput}=                Read until         etc]#
      ${trapoutput2}=               Write              tail -n 50 messages
      ${trapoutput1}=               Read until         etc]#
      ${getfile}=             SSHLibrary.Get File                 //etc//messages               C:\\
      Log to Console                ${trapoutput1}
      ${string}=              Should contain                ${trapoutput1}                ${MIB}
      Log to Console            \n\n Expected MIB Compared with the Actual MIB: ${MIB}
      ${string}=              Should contain                ${trapoutput1}                ${ICM_IP}
      Log to Console            \n\n Expected Interconnect IP Compared with the Actual ICM : ${ICM_IP}
      ${string}=              Should contain                ${trapoutput1}                "port19"
      Log to Console            \n\n Expected Port Compared with the Actual port : port19

