*** Settings ** *
Documentation        Feature Test:  OV292 FIPS
...                  This set of test cases is to verify the feature SNMPv3 synergy FIPS testing
...
Variables               data_variables.py
Resource                ../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library

*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                  192.168.144.146
${LIG_FIPS}                          LIG_FIPS
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT
${State_Configured}             Configured

***Test Cases***
OVF292_API_TC_29 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES128

    Log to console    Create LIG group
    # LIG with Ethernet Modules
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${resp} =    Create LIG      ${FIPS_ligs_tbird_SE_Multi_LIG_Scenario}
    Log to console and logfile    \n\nLIG Created Successfully1:${resp}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES128['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES128['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES128['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_30 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES192

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES192['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES192['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES192['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_31 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES256

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES256['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES256['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA256_AES256['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_39 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES128

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES128['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES128['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES128['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_40 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES192

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES192['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES192['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES192['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_46 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES256

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES256['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES256['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA384_AES256['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_49 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES128

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES128['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES128['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES128['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_50 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES192

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES192['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES192['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES192['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_51 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES256

    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES256['snmpUsers']}    ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES256['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_FIPS_ligs_AuthPriv_SHA512_AES256['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully with all combinations

OVF292_API_TC_136 Inform configured wwithout the associated user having an EngineID configured
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_edit_snmp_user_no_engineid['snmpUsers']}    ${OVF292_FIPS_edit_snmp_user_no_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_137 EngineID given for a trap

    Log to console and logfile    \nEngineID given for a trap
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_edit_snmp_user_no_engineid['snmpUsers']}    ${OVF292_FIPS_edit_snmp_user_no_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

    Log to console and logfile    \nEngineID given for a trap
    ${body} =    Build LIG body    ${OVF292_FIPS_add_trap_engineid['lig1']}
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_add_trap_engineid['snmpUsers']}    ${OVF292_FIPS_add_trap_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_engineid_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_engineid_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_140 Adding More than 10 traps
    Log to console and logfile    \n Maximum snmp traps Allowed To Be Added
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_maximum_No_Of_traps['snmpUsers']}    ${OVF292_FIPS_maximum_No_Of_traps['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_Traps['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_Traps['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_141 More than 10 users
    Log to console and logfile    \n Maximum SnmpUsers Allowed To Be Added
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_maximum_No_Of_Users['snmpUsers']}    ${OVF292_FIPS_maximum_No_Of_Users['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_users['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_142 Length validations of all fields
    Log to console and logfile    \nLength validation of password fields
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_invalid_length_Auth_Phrase['snmpUsers']}    ${OVF292_FIPS_invalid_length_Auth_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_length['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_length['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_143 user configured in a trap or inform does not exist in the user configuration
    Log to console and logfile    \nuser configured in a trap or inform does not exist in the user configuration
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_Add_trap_invalid_user['snmpUsers']}    ${OVF292_FIPS_Add_trap_invalid_user['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_146 user has authenticity configured and is missing an associated password

    Log to console and logfile    \nMissing Auth Privilege Phrase Password
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_missing_Auth_Pass_Phrase['snmpUsers']}    ${OVF292_FIPS_missing_Auth_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_147 user has privacy configured and is missing an associated password
    Log to console and logfile    \nMissing priv Privilege Phrase Password
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_missing_Auth_Priv_Pass_Phrase['snmpUsers']}    ${OVF292_FIPS_missing_Auth_Priv_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_148 user has privacy configured and does not have authentication configured

    Log to console and logfile    \nMissing Auth phrase in a AuthPriv user
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_missing_Auth_Phrase['snmpUsers']}    ${OVF292_FIPS_missing_Auth_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_149 user has an invalid format

    Log to console and logfile    \nInvalidvalues Username
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_Invalidvalues_UserName['snmpUsers']}    ${OVF292_FIPS_Invalidvalues_UserName['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_user['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_150 Given authentication password has an invalid format

    Log to console and logfile    \nInvalid Auth Phrase Password Verification
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_Invalidvalues_AuthPassPhrase['snmpUsers']}    ${OVF292_FIPS_Invalidvalues_AuthPassPhrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_151 given privacy password has an invalid format

    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_Invalidvalues_Auth_Priv_Pass_Phrase['snmpUsers']}    ${OVF292_FIPS_Invalidvalues_Auth_Priv_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_lig}    ${valDict}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_152 given EngineID has an invalid format
    Log to console and logfile    \n given EngineID has an invalid format
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_invalid_engineid['snmpUsers']}    ${OVF292_FIPS_invalid_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    Log to console and logfile    \nMessage:${resp}
    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_153 given destination host has an invalid format
    Log to console and logfile    \n given destination host has an invalid format
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_invalid_format['snmpUsers']}    ${OVF292_FIPS_invalid_format['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_154 trap has a port that is configured beyond the acceptable range
    Log to console and logfile    \n given destination host has an invalid format
    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${OVF292_FIPS_invalid_port['snmpUsers']}    ${OVF292_FIPS_invalid_port['trapDestinations']}
    Log to console and logfile    \n\nLIG Edited Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Edited Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_port['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

*** Keywords ***
Create LIG
    [Documentation]    Suite Setup Tasks
    [Arguments]        ${body1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${body}    Build LIG body    ${body1}
    Log to console and logfile    \n-Creating LIG ${body}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    [Return]    ${resp}

Edit LIG body for SNMP
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG_FIPS}    ${snmpusers}    ${trapdestination}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG_FIPS}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=true
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}

Verify Interconnect State
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Verify LI Consistency State
    [Documentation]    Verify LI Consistency State
    [Arguments]        ${li}    ${State}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}

Get IC
    [Documentation]    Getting IC state
    [Arguments]        ${ICM_NAME}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log        ${ic}

Verify SNMP Users
    [Documentation]    Verifying SNMP Users
    [Arguments]        ${lig}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${lig_uri} =    Get LIG URI    ${lig}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}

    # For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}

    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
    Log to console and logfile    SNMP Users are successfully Verified