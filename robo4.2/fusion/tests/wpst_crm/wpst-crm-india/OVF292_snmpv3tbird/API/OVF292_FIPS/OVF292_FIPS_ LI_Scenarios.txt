*** Settings ** *
Documentation        Feature Test:  OV292
...                  This set of test cases is to verify the feature SNMPv3 synergy related testing
Variables               data_variables.py
Resource                ../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library

*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                  192.168.144.146
${li}                            LE-LIG_FIPS
${lig}                          LIG_FIPS
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT
${State_Configured}             Configured
${ICM_1}                     RAVIENCL10, interconnect 3

*** Test Cases ** *

OVF292_API_TC_29 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES128
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_30 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES192
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination1}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination1}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_31 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_256 And Privacy AES256
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination2}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination2}
    Verify SNMP Users Edit LI  ${li}    ${li_Create_user}

OVF292_API_TC_39 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES128
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination3}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination3}
    Verify SNMP Users Edit LI  ${li}    ${li_Create_user}

OVF292_API_TC_40 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES192
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination4}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination4}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_46 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES256
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination5}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination5}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_49 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES128
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination6}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination6}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_50 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES192
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination7}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination7}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_51 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES256
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination8}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination8}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_136 Inform configured without the associated user having an EngineID configured

    # Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_no_engine_id}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    # Error Verification
    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_137 EngineID given for a trap

    ${resp1}=    Edit LI        ${li}   ${edit_li_trap_engineid}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_engineid_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_engineid_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_140 Adding More than 10 traps

    ${resp1}=    Edit LI        ${li}   ${edit_li_max_trap}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_Traps['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_Traps['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_141 More than 10 users

    ${resp1}=    Edit LI        ${li}   ${edit_li_max_users}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_users['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_142 Length validations of all fields
    ${resp1}=    Edit LI        ${li}   ${edit_li_length_validate}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_length['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_length['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_143 user configured in a trap or inform does not exist in the user configuration
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_user_in_trap}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_146 user has authenticity configured and is missing an associated password

    ${resp1}=    Edit LI        ${li}   ${li_missing_Auth_Pass_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_147 user has privacy configured and is missing an associated password

    ${resp1}=    Edit LI        ${li}   ${li_missing_priv_Pass_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_148 user has privacy configured and does not have authentication configured

    ${resp1}=    Edit LI        ${li}   ${li_missing_auth_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_149 user has an invalid format

    ${resp1}=    Edit LI        ${li}   ${li_invalid_username}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_user['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_150 Given authentication password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_auth_pwd}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_151 given privacy password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_priv_pwd}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_152 given EngineID has an invalid format
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_engineid}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_153 given destination host has an invalid format
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_format}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_154 trap has a port that is configured beyond the acceptable range
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_port}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_port['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_20 AddsnmpUser_MandatoryAttributeCheck_Name
    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    ${resp1}=    Edit LI        ${li}   ${Mandatory_Attribute_Check_Name}
    ${message} =    Get Variable Value  ${error_Mandatory_Attribute_Check['message']}
    ${errorCode} =    Get Variable Value  ${error_Mandatory_Attribute_Check['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}
    
OVF292_API_TC_21 AddsnmpUser_MandatoryAttributeCheck_AuthAlgo
    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    ${resp1}=    Edit LI        ${li}   ${Mandatory_Attribute_Check_Authlgo}
    ${message} =    Get Variable Value  ${error_Mandatory_Attribute_Check['message']}
    ${errorCode} =    Get Variable Value  ${error_Mandatory_Attribute_Check['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_22 AddsnmpUser_MandatoryAttributeCheck_AuthPassPhrase

    Log to console and logfile    \nInvalid Auth Password Phrase MandatoryAttribute Check Verification
    ${resp1}=    Edit LI        ${li}   ${Mandatory_Attribute_Check_AuthPassPhrase}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}
    
OVF292_API_TC_23 AddsnmpUser_MandatoryAttributeCheck_PrivAlgorithm

    Log to console and logfile    \n Auth Privilege Phrase MandatoryAttribute Check Verification
    ${resp1}=    Edit LI        ${li}   ${Mandatory_Attribute_Check_Auth_Priv_PassPhrase}
    ${message} =    Get Variable Value  ${error_Mandatory_Attribute_Check['message']}
    ${errorCode} =    Get Variable Value  ${error_Mandatory_Attribute_Check['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}
    
OVF292_API_TC_24 AddsnmpUser_Passphrase_LengthCheck

    Log to console and logfile    \n Password Phrase Length Verification
    ${resp1}=    Edit LI        ${li}   ${Password_Length_Check}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}
    Log to console and logfile    \n Password Phrase Length Verification is less than 8 ....verified successfully!!!!

OVF292_API_TC_168 LIGedits Update From Group from LI

    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${edit_lig_UFG_LI_Add_User['snmpUsers']}    ${edit_lig_UFG_LI_Add_User['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_Add_User['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details
    Verify LI Consistency State    ${li}    ${Inconsistent_State}
    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Verify LI Consistency State    ${li}    ${consistent_State}

OVF292_API_TC_171 LIGedits Update From Group from LI Add Trap details at LIG such that inconsistency is created at LI level Perform Update from Group

    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${edit_lig_UFG_LI_Add_trap['snmpUsers']}    ${edit_lig_UFG_LI_Add_trap['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Verify LI Consistency State    ${li}    ${Inconsistent_State}

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Verify LI Consistency State    ${li}    ${consistent_State}

OVF292_API_TC_172 LIGedits Update From Group from Editing user details wrt to Auth protocol details at LIG such that inconsistency is created at LI level Perform Update from Group

    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${edit_lig_UFG_LI_edit_User_Auth['snmpUsers']}    ${edit_lig_UFG_LI_edit_User_Auth['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Verify LI Consistency State    ${li}    ${Inconsistent_State}

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Verify LI Consistency State    ${li}    ${Inconsistent_State}

    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_edit_User_Auth['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details

OVF292_API_TC_173 LIGedits Update From Group from Editing user details wrt to Privacy protocol details at LIG such that inconsistency is created at LI level Perform Update from Group

    ${lig_edit}    Get LIG member    ${LIG_FIPS}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_FIPS}    ${edit_lig_UFG_LI_edit_User_AuthPriv['snmpUsers']}    ${edit_lig_UFG_LI_edit_User_AuthPriv['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Verify LI Consistency State    ${li}    ${Inconsistent_State}

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}

    Verify LI Consistency State    ${li}    ${consistent_State}

    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_edit_User_AuthPriv['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}

    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_FIPS}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details

OVF292_API_TC_175 Edits Update From Group Editing user details wrt to Auth protocol at LI level creates inconsistency at LI level Perform Update from Group

    ${resp1}=    Edit LI        ${li}   ${edit_li_UFG_LI_edit_User_Auth}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_UFG_LI_edit_User_Auth['snmpConfiguration']}

    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    # Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}
    Verify LI Consistency State    ${li}    ${Inconsistent_State}
    Perform an Update From Group    ${li}    120 min        1 min
    Verify LI Consistency State    ${li}    ${consistent_State}

OVF292_API_TC_179 LI Edits Update From Group Editing user details wrt to remove users at LI level creates inconsistency at LI level Perform Update from Group

    ${resp1}=    Edit LI        ${li}   ${edit_li_UFG_LI_Remove_Users}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_UFG_LI_Remove_Users}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    # Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}
    Verify LI Consistency State    ${li}    ${Inconsistent_State}
    Perform an Update From Group    ${li}    120 min        1 min
    Verify LI Consistency State    ${li}    ${consistent_State}

*** Keywords ***

Verify Interconnect State
    [Documentation]    Interconnect state verification
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get SNMPUSers from Data
    [Documentation]   Getting SNMPUser from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}

Edit LI
    [Documentation]   Editing the existing LI
    [Arguments]        ${li}        ${li_body}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    [Return]    ${respl}

Verify SNMP Users Edit LI
    [Documentation]   Verifying SNMP Users Edit LI
    [Arguments]        ${li}        ${data_users}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    #  For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    ${Level}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}

    # User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
    
Get SNMPTrap IP from Data
    [Documentation]   Getting SNMPTrap IP from Data
    [Arguments]    ${li_body}   
    Log to console and logfile    \n\nResp Content Is: ${li_body}   
    ${len1} =     Get Length    ${li_body}
    ${li_Create_traps_ip}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trapips} =     Get From Dictionary    ${li_body}    ${x}
    \    ${list_trapips}=    Get From Dictionary    ${trapips}    trapDestination
    \    Append To List    ${li_Create_traps_ip}    ${list_trapips}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_ip}
    [Return]    ${li_Create_traps_ip}
    
Get SNMPUser name from Data  
    [Documentation]   Getting SNMPUser name from Data
    [Arguments]    ${li_body}   
    Log to console and logfile    \n\nResp Content Is: ${li_body}   
    ${len1} =     Get Length    ${li_body}
    ${li_Create_traps_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_user} =     Get From Dictionary    ${li_body}    ${x}
    \    ${list_trap_users}=    Get From Dictionary    ${trap_user}    userName
    \    Append To List    ${li_Create_traps_user}    ${list_trap_users}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_user}
    [Return]    ${li_Create_traps_user}     


Verify SNMP Trap Destination Edit LI
    [Documentation]   Verifying SNMP Trap Destination Edit LI
    [Arguments]        ${li}        ${data_users}    ${trap_destinations}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    #  Trap Details
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    Log to console and logfile    Length..${len}
    ${trap_dest}=    Create List
    ${trap_dest_ips}=    Create List
    ${inform}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${trap_dest}    ${list_trap}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}

    # User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Verify LI Consistency State
    [Documentation]   Verifying LI Consistency State
    [Arguments]        ${li}    ${State}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}

Get IC
    [Documentation]   Interconnect state details
    [Arguments]        ${ICM_NAME}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log        ${ic}

Perform an Update From Group
    [Documentation]  Performing an Update From Group
    [Arguments]        ${li}=${li}    ${timeout}=5 min     ${interval}=15s
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}