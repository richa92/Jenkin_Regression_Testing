*** Settings ** *
Documentation        Feature Test:  OV292
...                  This set of test cases is to verify the feature SNMPv3 synergy related testing
...
Variables               data_variables.py
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library

*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                  192.168.144.146
${li}                           RAVIENCL10-LIG1
${LIG1}                          LIG1
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT
${State_Configured}             Configured
${ICM_1}                     RAVIENCL10, interconnect 3

*** Test Cases ** *

OVF292_API_TC_136 Inform configured without the associated user having an EngineID configured

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_no_engine_id['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Error Verification

    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_137 EngineID given for a trap

    ${resp1}=    Edit LI        ${li}   ${edit_li_trap_engineid['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_engineid_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_engineid_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_140 Adding More than 10 traps

    ${resp1}=    Edit LI        ${li}   ${edit_li_max_trap['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_Traps['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_Traps['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_141 More than 10 users

    ${resp1}=    Edit LI        ${li}   ${edit_li_max_users['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_users['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_142 Length validations of all fields
    ${resp1}=    Edit LI        ${li}   ${edit_li_length_validate['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_length['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_length['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}


OVF292_API_TC_143 user configured in a trap or inform does not exist in the user configuration
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_user_in_trap['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

 OVF292_API_TC_146 user has authenticity configured and is missing an associated password

    ${resp1}=    Edit LI        ${li}   ${li_missing_Auth_Pass_Phrase['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_147 user has privacy configured and is missing an associated password
    ${resp1}=    Edit LI        ${li}   ${li_missing_priv_Pass_Phrase['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_148 user has privacy configured and does not have authentication configured

    ${resp1}=    Edit LI        ${li}   ${li_missing_auth_Phrase['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_149 user has an invalid format

    ${resp1}=    Edit LI        ${li}   ${li_invalid_username['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_user['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_150 Given authentication password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_auth_pwd['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_151 given privacy password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_priv_pwd['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_152 given EngineID has an invalid format
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_engineid['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_153 given destination host has an invalid format
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_format['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_154 trap has a port that is configured beyond the acceptable range
    ${resp1}=    Edit LI        ${li}   ${edit_li_invalid_port['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_port['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

    Fusion Api Logout Appliance

*** Keywords ***

Verify Interconnect State
    [Documentation]    Interconnect state verification
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get SNMPUSers from Data
    [Documentation]    Getting SNMPUSers from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List
    #${li_Create_user_Sec_Level}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}

Edit LI
    [Documentation]    Perform Edit LI
    [Arguments]        ${li}        ${li_body}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    #${task} =  Wait For Task   ${respl}    300s    2s
    #Run Keyword If '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    [Return]    ${respl}

Verify SNMP Users Edit LI
    [Documentation]    Verifying SNMP Users after edit LI
    [Arguments]        ${li}        ${data_users}    ${Security_Level}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    ${Level}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${User_Sec_Level}=    Get From Dictionary    ${users}    securityLevel
    \    Append To List    ${Level}    ${User_Sec_Level}
    #User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Verify SNMP Trap Destination Edit LI
    [Documentation]    Verifying SNMP TRap Destinations after edit LI
    [Arguments]        ${li}        ${data_users}    ${trap_destinations}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    # Trap Details
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    Log to console and logfile    Length..${len}
    ${trap_dest}=    Create List
    ${trap_dest_ips}=    Create List
    ${inform}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${trap_dest}    ${list_trap}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${User_Sec_Level}=    Get From Dictionary    ${traps}    inform
    \    Append To List    ${Level}    ${User_Sec_Level}
    #User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
