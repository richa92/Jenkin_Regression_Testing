*** Settings ** *
Documentation        Feature Test:  OVF292
...                  This set of test cases is to verify the feature SNMPV3 IN Syneregy Module
...
Variables               data_variables.py
Resource                ../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library


*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                  192.168.144.146
${li}                           LE-LIG1
${LIG1}                          LIG1
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT
${State_Configured}             Configured
${ICM_1}                     RAVIENCL10, interconnect 3
${TRAP}                      True
${Def_Port}                  163


*** Test Cases ** *

OVF292_API_TC_105 Add Trap- SnmpV3 disabled
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_destination['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_destination}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    #Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_add_trap_destination['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_add_trap_destination['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_add_trap_destination['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}

OVF292_API_TC_106 Add Trap destination- When no snmp users are available
    #Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_remove_user['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_remove_user['snmpConfiguration']}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_no_user['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Error Verification
    ${message} =    Get Variable Value  ${error_wrong_user['message']}
    ${errorCode} =    Get Variable Value  ${error_wrong_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_107 Add Trap Inform messages disabled Trap Type As Trap

   ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_type_inform['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp1}    300s    2s
   Run Keyword If   '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_add_trap_type_inform['snmpConfiguration']}

   Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_107 Add Trap Inform messages disabled Trap Type As Trap and Add Inform Trap Type Inform Engine Id specified
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${inform_status}=        Get Trap Destinations Trap Type    ${li}
   Should Be Equal As Strings    ${inform_status}    ${TRAP}

OVF292_API_TC_108 Add Inform Toggle Trap Type to Inform No EngineId specified
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_no_engine_id['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Error Verification

    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}


OVF292_API_TC_110 Add Trap- Non-default port

   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_non_default_port['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp1}    300s    2s
   Run Keyword If   '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   Log to console and logfile    \n Response is:${resp1}
   ${port_num}=    Get Port from LI Trap Destination    ${li}
   Should Not Be Equal As Integers    ${port_num[0]}    ${Def_Port}


OVF292_API_TC_111 Add Trap Invalid port
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_invalid_port['snmpConfiguration']}
   Log to console and logfile        \tResponse is ${resp1}
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   #Error Verification
   ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
   ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp1}    ${valDict}


OVF292_API_TC_112 Add Trap Invalid Engine Id
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_invalid_engine_id['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Error Verification

    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}


OVF292_API_TC_114 Add Trap Inform Maximum number validation

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${edit_li_add_trap_max['snmpConfiguration']}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Error Verification

    ${message} =    Get Variable Value  ${error_Maximum_No_of_Traps['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_Traps['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}


OVF292_API_TC_118 Modify snmp Trap Trap address

    ${resp1}=    Edit LI        ${li}   ${edit_li_edit_trap_address['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Log to console and logfile        \tResponse is ${resp1}
    #Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_edit_trap_address['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_edit_trap_address['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_edit_trap_address['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}


OVF292_API_TC_121 Modify snmp Trap Modify User Name

    ${resp1}=    Edit LI        ${li}   ${edit_li_edit_trap_user_name['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Log to console and logfile        \tResponse is ${resp1}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_edit_trap_user_name['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_edit_trap_user_name['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}


OVF292_API_TC_127 Modify snmp Trap V1V2 To V3 trap With no snmpuser

    ${resp1}=    Edit LI        ${li}   ${edit_li_edit_trap_snmpv1['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Log to console and logfile        \tResponse is ${resp1}

OVF292_API_TC_128 Modify snmp Trap V1V2 To V3 trap
    Log to console and logfile        \nModify SnmpV1 to SNMPv3
    ${resp1}=    Edit LI        ${li}   ${edit_li_edit_trap_snmpv1_to_snmpv3['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Log to console and logfile        \tResponse is ${resp1}

OVF292_API_TC_129 Modify snmp Trap V3 to V1 V2 trap
    Log to console and logfile        \nModify SnmpV3 to SNMPv1
    ${resp1}=    Edit LI        ${li}   ${edit_li_edit_trap_snmpv3_to_snmpv1['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Log to console and logfile        \tResponse is ${resp1}

OVF292_API_TC_133 Remove snmp trap entries
    Log to console and logfile         \nRemove snmp trap entries
    ${resp1}=    Edit LI        ${li}   ${edit_li_remove_trap_entries['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Log to console and logfile        \nTraps are removed successfully...


OVF292_API_TC_133a Modify snmp User Auth and Privacy details

   ${resp1}=    Edit LI        ${li}   ${edit_li_edit_snmp_user_AuthandAuthpriv}
   ${task} =    Wait For Task   ${resp1}    300s    2s
   Run Keyword If   '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Log to console and logfile        \tResponse is ${resp1}
   ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_edit_snmp_user_AuthandAuthpriv['snmpConfiguration']}
   Verify SNMP Users Edit LI   ${li}    ${li_Create_user}


OVF292_API_TC_168 LIGedits Update From Group from LI



    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_UFG_LI_Add_User['snmpUsers']}    ${edit_lig_UFG_LI_Add_User['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_Add_User['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}


OVF292_API_TC_171 LIGedits Update From Group from LI Add Trap details at LIG such that inconsistency is created at LI level Perform Update from Group




    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_UFG_LI_Add_trap['snmpUsers']}    ${edit_lig_UFG_LI_Add_trap['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}




OVF292_API_TC_172 LIGedits Update From Group from Editing user details wrt to Auth protocol details at LIG such that inconsistency is created at LI level Perform Update from Group



    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_UFG_LI_edit_User_Auth['snmpUsers']}    ${edit_lig_UFG_LI_edit_User_Auth['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}

    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_edit_User['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details


OVF292_API_TC_173 LIGedits Update From Group from Editing user details wrt to Privacy protocol details at LIG such that inconsistency is created at LI level Perform Update from Group


    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_UFG_LI_edit_User_AuthPriv['snmpUsers']}    ${edit_lig_UFG_LI_edit_User_AuthPriv['trapDestinations']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


    Log to console and logfile    \nPerform Update from group after inconsistency
    Perform an Update From Group    ${li}    120 min        1 min
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}

    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_UFG_LI_edit_User_AuthPriv['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}

    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details


OVF292_API_TC_175 Edits Update From Group Editing user details wrt to Auth protocol at LI level creates inconsistency at LI level Perform Update from Group

    ${resp1}=    Edit LI        ${li}   ${edit_li_UFG_LI_edit_User_Auth['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_UFG_LI_edit_User_Auth['snmpConfiguration']}

    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    #Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_UFG_LI_edit_User_Auth['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}
    Perform an Update From Group    ${li}    120 min        1 min


OVF292_API_TC_179 LI Edits Update From Group Editing user details wrt to remove users at LI level creates inconsistency at LI level Perform Update from Group

    ${resp1}=    Edit LI        ${li}   ${edit_li_UFG_LI_Remove_Users['snmpConfiguration']}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_UFG_LI_Remove_Users}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    #Verify trap destinations
    Log to console and logfile        \tICM state is ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_UFG_LI_Remove_Users['trapDestinations']}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}     ${li_trap_ip}
    Perform an Update From Group    ${li}    120 min        1 min


*** Keywords ***
Edit LIG body for SNMP
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG1}    ${snmpusers}    ${trapdestination}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=true
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}


Build LI body
    [Documentation]    LI Body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...
    [Return]    ${body}

Verify Interconnect State
    [Documentation]    Interconnect state verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get SNMPTrap IP from Data
    [Documentation]   Getting SNMPTrap IP from Data
    [Arguments]    ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_body}
    ${len1} =     Get Length    ${li_body}
    ${li_Create_traps_ip}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trapips} =     Get From Dictionary    ${li_body}    ${x}
    \    ${list_trapips}=    Get From Dictionary    ${trapips}    trapDestination
    \    Append To List    ${li_Create_traps_ip}    ${list_trapips}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_ip}
    [Return]    ${li_Create_traps_ip}

Get SNMPUser name from Data
    [Documentation]   Getting SNMPUser name from Data
    [Arguments]    ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_body}
    ${len1} =     Get Length    ${li_body}
    ${li_Create_traps_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_user} =     Get From Dictionary    ${li_body}    ${x}
    \    ${list_trap_users}=    Get From Dictionary    ${trap_user}    userName
    \    Append To List    ${li_Create_traps_user}    ${list_trap_users}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_user}
    [Return]    ${li_Create_traps_user}


Get SNMPUSers from Data
    [Documentation]   Getting SNMPUser from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}

    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}


Get Trap Destinations IPs
    [Documentation]   Getting Trap Destinations IPs
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${li_Create_traps_ip}=    Create List
    ${trap_type_list}=    Create List
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trapips} =     Get From Dictionary    ${trap_dest_dict}    ${x}
    \    ${list_trapips}=    Get From Dictionary    ${trapips}    trapDestination
    \    Append To List    ${li_Create_traps_ip}    ${list_trapips}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_ip}
    [Return]    ${li_Create_traps_ip}

Get Trap Destinations Trap Type
    [Documentation]   Getting Trap Destinations Trap Type
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${trap_type_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_type}=    Get From Dictionary    ${trap_dest_dict[0]}    inform
    \    Append To List    ${trap_type_list}    ${trap_type}
    Log to console and logfile    \n\nTrap Type is: ${trap_type}
    [Return]   ${trap_type}

Get Trap Destinations Engine ID
    [Documentation]   Getting Trap Destinations Engine ID
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${Engine_ID_Details}=    Get From Dictionary    ${trap_dest_dict[0]}    engineId
    \    Append To List    ${engine_id_list}    ${Engine_ID_Details}
    Log to console and logfile    \n\nUsers are: ${engine_id_list}
    [Return]    ${engine_id_list}


Get Port from LI Trap Destination
    [Documentation]   Getting Port from LI Trap Destination
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${port}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${port_no}=    Get From Dictionary    ${trap_dest_dict[0]}    port
    \    Append To List    ${port}    ${port_no}
    Log to console and logfile    \n\nPorts are: ${port}
    [Return]    ${port}

Edit LI
    [Documentation]   Editing the existing LI
    [Arguments]        ${li}        ${li_body}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    #${task} =  Wait For Task   ${respl}    300s    2s
    #Run Keyword If '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    [Return]    ${respl}


Verify SNMP Users Edit LI
    [Documentation]   Verifying SNMP Users Edit LI
    [Arguments]        ${li}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List

    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}

    #User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}



Verify SNMP Trap Destination Edit LI
    [Documentation]   Verifying SNMP Trap Destination Edit LI
    [Arguments]        ${li}        ${data_users}    ${Actual_trap_destinations}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    ${Expcted_trap_dest}=    Create List
    ${inform}=    Create List
    ${traps}=    Create List
    ${user_trap_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${Expcted_trap_dest}    ${list_trap}
    \    Log to console and logfile    trap is..${Expcted_trap_dest}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${Trap_type}=    Get From Dictionary    ${traps}    inform
    \    Append To List    ${inform}    ${Trap_type}
    \    ${user_trap}=    Get From Dictionary    ${traps}    userName
    \    Append To List    ${user_trap_list}    ${user_trap}
    #Trap IP Details
    ${len}    Get Length    ${Actual_trap_destinations}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Expcted_trap_dest}    ${Actual_trap_destinations[${x}]}
    #User name
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${user_trap_list}    ${data_users[${x}]}


Validate SNMP Trap Destinations Edit LI
    [Documentation]   Validate SNMP Trap Destination Edit LI
    [Arguments]  ${li}      ${edit_li_body}
    ${li_trap_ip} =    Get SNMPTrap IP from Data   ${edit_li_body['trapDestinations']}
    ${trap_user} =    Get SNMPUser name from Data   ${edit_li_body['user']}
    Log to console and logfile        \tTrap IP is ${li_trap_ip}
    Log to console and logfile        \tTrap User is ${trap_user}
    Verify SNMP Trap Destination Edit LI    ${li}    ${trap_user}    ${li_trap_ip}

Verify LI Consistency State
    [Documentation]   Verifying LI Consistency State
    [Arguments]        ${li}    ${State}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}




Get IC
    [Documentation]   Interconnect state details
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log        ${ic}


Perform an Update From Group
    [Documentation]  Performing an Update From Group
    [Arguments]        ${li}=${li}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}



Verify SNMP Users
    [Documentation]    Verifying SNMP Users
    [Arguments]        ${lig}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${lig_uri} =    Get LIG URI    ${lig}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}


    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}

    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

    #\    List Should Contain Value    ${Create_user}    ${data_users}
    #Log to console and logfile    list of SNMP User Name List..${Create_user}
    #List Should Contain Value    ${Create_user}    ${data_users}
    Log to console and logfile    SNMP Users are successfully Verified


