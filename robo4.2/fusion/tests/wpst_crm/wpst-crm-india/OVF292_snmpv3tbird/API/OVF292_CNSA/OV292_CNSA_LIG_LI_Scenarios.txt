*** Settings ** *
Documentation        Feature Test:  OV292
...                  This set of test cases is to verify the feature SNMPv3 synergy related testing
...
Variables               data_variables.py
Resource                ../../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library

*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                  192.168.144.146
${li}                            LE-LIG_CNSA
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT
${State_Configured}             Configured
${LIG_CNSA}                     LIG_CNSA

*** Test Cases ** *
OVF292_API_TC_41 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES256
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${resp} =    Create LIG      ${CNSA_ligs_tbird_SE_Multi_LIG_Scenario}
    Log to console and logfile    \n\nLIG Created Successfully1:${resp}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_AuthPriv_SHA384_AES256['snmpUsers']}    ${OVF292_CNSA_ligs_AuthPriv_SHA384_AES256['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_CNSA_ligs_AuthPriv_SHA384_AES256['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_CNSA}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully ith all combinations

OVF292_API_TC_51 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES256
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_AuthPriv_SHA512_AES256['snmpUsers']}    ${OVF292_CNSA_ligs_AuthPriv_SHA512_AES256['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user wwith auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    # Verify SNMP Users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_snmp_users} =           Get Variable Value  ${OVF292_CNSA_ligs_AuthPriv_SHA512_AES256['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG_CNSA}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully ith all combinations

OVF292_API_TC_77 Add snmp User _Un supported Auth Algorithm MD5

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_Auth_MD5['snmpUsers']}    ${OVF292_CNSA_ligs_Auth_MD5['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    ${message} =    Get Variable Value  ${error_unsupported_protocol['message']}
    ${errorCode} =    Get Variable Value  ${error_unsupported_protocol['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}


OVF292_API_TC_78 Add snmp User _Un supported Priv Algorithm MD5 with AES128
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_AuthPriv_MD5_AES128['snmpUsers']}    ${OVF292_CNSA_ligs_AuthPriv_MD5_AES128['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    ${message} =    Get Variable Value  ${error_unsupported_protocol['message']}
    ${errorCode} =    Get Variable Value  ${error_unsupported_protocol['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}


OVF292_API_TC_80 Add snmp User_Validate Pass phrase length for Privacy Algorithm
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_AuthPriv_Pass_length['snmpUsers']}    ${OVF292_CNSA_ligs_AuthPriv_Pass_length['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_142 Length validations of all fields
    Log to console and logfile    \nLength validation of password fields
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_invalid_length_Auth_Phrase['snmpUsers']}    ${OVF292_CNSA_ligs_invalid_length_Auth_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

OVF292_API_TC_136 Inform configured without the associated user having an EngineID configured

    Log to console and logfile    \nInform configured without the associated user having an EngineID configured
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_user_no_engineid['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_user_no_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \n
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_137 EngineID given for a trap

    Log to console and logfile    \nEngineID given for a trap
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_user_no_engineid_trap['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_user_no_engineid_trap['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}

    Log to console and logfile    \nEngineID given for a trap
    ${body} =    Build LIG body    ${add_trap_engineid['lig1']}
    ${resp_lig} =    Fusion Api Create LIG    ${body}
    ${message} =    Get Variable Value  ${error_engineid_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_engineid_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_140 Adding More than 10 traps
    Log to console and logfile    \n Maximum snmp traps Allowed To Be Added
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_maximum_No_Of_traps['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_maximum_No_Of_traps['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_Traps['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_Traps['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_141 More than 10 users
    Log to console and logfile    \n Maximum SnmpUsers Allowed To Be Added
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_maximum_No_Of_Users['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_maximum_No_Of_Users['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_users['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_143 user configured in a trap or inform does not exist in the user configuration
    Log to console and logfile    \nuser configured in a trap or inform does not exist in the user configuration
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_Add_trap_invalid_user['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_Add_trap_invalid_user['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_lig}    ${valDict}

OVF292_API_TC_146 user has authenticity configured and is missing an associated password

    Log to console and logfile    \nMissing Auth Privilege Phrase Password
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Pass_Phrase['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_147 user has privacy configured and is missing an associated password

    Log to console and logfile    \nMissing priv Privilege Phrase Password
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Priv_Pass_Phrase['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Priv_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_148 user has privacy configured and does not have authentication configured
    Log to console and logfile    \nMissing Auth phrase in a AuthPriv user
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Phrase['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_missing_Auth_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_149 user has an invalid format
    Log to console and logfile    \nInvalidvalues Username
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_UserName['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_UserName['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_user['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_150 Given authentication password has an invalid format
    Log to console and logfile    \nInvalid Auth Phrase Password Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_AuthPassPhrase['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_AuthPassPhrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_151 given privacy password has an invalid format
    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_Auth_Priv_Pass_Phrase['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_Invalidvalues_Auth_Priv_Pass_Phrase['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_152 given EngineID has an invalid format
    Log to console and logfile    \n given EngineID has an invalid format
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_invalid_engineid['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_invalid_engineid['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_153 given destination host has an invalid format
    Log to console and logfile    \n given destination host has an invalid format
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_invalid_format['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_invalid_format['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_154 trap has a port that is configured beyond the acceptable range
    Log to console and logfile    \n given destination host has an invalid format
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG_CNSA}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG_CNSA}    ${OVF292_CNSA_ligs_edit_snmp_invalid_port['snmpUsers']}    ${OVF292_CNSA_ligs_edit_snmp_invalid_port['trapDestinations']}
    Log to console and logfile    \n\nLIG Created Successfully5:${lig_snmp}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${message} =    Get Variable Value  ${error_invalid_port['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF292_API_TC_LI_29 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_384 And Privacy AES128
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_liedit_li_add_trap_destination}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${OVF292_CNSA_liedit_li_add_trap_destination}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}

OVF292_API_TC_LI_30 LI_AddsnmpUser_SecLevel_AuthPriv_Authentication SHA_512 And Privacy AES256
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_add_trap_dest_User}
    ${task} =   Wait For Task   ${resp1}    300s    2s
    Run Keyword If  '${resp1['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${li_Create_user} =    Get SNMPUSers from Data    ${OVF292_CNSA_edit_li_add_trap_dest_User}
    Verify SNMP Users Edit LI 1   ${li}    ${li_Create_user}

OVF292_API_TC_LI_136 LI_Inform configured without the associated user having an EngineID configured

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_no_engine_id}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    # Error Verification
    ${message} =    Get Variable Value  ${error_missing_engineid['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_engineid['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_LI_137 LI_EngineID given for a trap
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_trap_engineid}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_engineid_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_engineid_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_141_LI LI_More than 10 users
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_max_users}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_Maximum_No_of_users['message']}
    ${errorCode} =    Get Variable Value  ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_142_LI LI_Length validations of all fields
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_length_validate}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_length['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_length['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_143_LI LI_user configured in a trap or inform does not exist in the user configuration
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_user_in_trap}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_snmp_user_in_trap['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_146_LI LI_user has authenticity configured and is missing an associated password

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_missing_Auth_Pass_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_147_LI LI_user has privacy configured and is missing an associated password

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_missing_priv_Pass_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_148_LI LI_user has privacy configured and does not have authentication configured

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_missing_auth_Phrase}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_149_LI LI_user has an invalid format

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_username}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_user['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_150_LI LI_Given authentication password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_auth_pwd}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_151_LI LI_given privacy password has an invalid format

    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_priv_pwd}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_152_LI LI_given EngineID has an invalid format
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_engineid}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_153_LI LI_given destination host has an invalid format
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_format}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}

OVF292_API_TC_154_LI LI_trap has a port that is configured beyond the acceptable range
    ${resp1}=    Edit LI        ${li}   ${OVF292_CNSA_edit_li_invalid_port}
    Log to console and logfile        \tResponse is ${resp1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    ${message} =    Get Variable Value  ${error_invalid_port['message']}
    ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp1}    ${valDict}
    Fusion Api Logout Appliance

*** Keywords ***
Create LIG
    [Documentation]    Suite Setup Tasks
    [Arguments]        ${body1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${body}    Build LIG body    ${body1}
    Log to console and logfile    \n-Creating LIG ${body}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    [Return]    ${resp}

Edit LIG body for SNMP
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG_FIPS}    ${snmpusers}    ${trapdestination}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG_FIPS}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=true
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}

Verify Interconnect State
    [Documentation]    Interconnect state verification
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get SNMPUSers from Data
    [Documentation]   Getting SNMPUser from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}

Get Trap Destinations IPs
    [Documentation]   Getting Trap Destinations IPs
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${li_Create_traps_ip}=    Create List
    ${trap_type_list}=    Create List
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trapips} =     Get From Dictionary    ${trap_dest_dict}    ${x}
    \    ${list_trapips}=    Get From Dictionary    ${trapips}    trapDestination
    \    Append To List    ${li_Create_traps_ip}    ${list_trapips}
    Log to console and logfile    \n\nTrap Ips are are: ${li_Create_traps_ip}
    [Return]    ${li_Create_traps_ip}

Get Trap Destinations Trap Type
    [Documentation]   Getting  Trap Destinations Trap Type
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${trap_type_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_type}=    Get From Dictionary    ${trap_dest_dict[0]}    inform
    \    Append To List    ${trap_type_list}    ${trap_type}
    Log to console and logfile    \n\nTrap Type is: ${trap_type}
    [Return]   ${trap_type}

Get Trap Destinations Engine ID
    [Documentation]   Getting  Trap Destinations Engine ID
    [Arguments]    ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    ${snmp_config}=    Get From Dictionary    ${resp_li}    snmpConfiguration
    ${trap_dest_dict}=    Get From Dictionary    ${snmp_config}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${Engine_ID_Details}=    Get From Dictionary    ${trap_dest_dict[0]}    engineId
    \    Append To List    ${engine_id_list}    ${Engine_ID_Details}
    Log to console and logfile    \n\nUsers are: ${engine_id_list}
    [Return]    ${engine_id_list}

Edit LI
    [Documentation]    Performing Edit LI
    [Arguments]        ${li}        ${li_body}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    [Return]    ${respl}

Verify SNMP Users Edit LI
    [Documentation]    Verifying SNMP Users Edit LI
    [Arguments]        ${li}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    # For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    ${Level}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${User_Sec_Level}=    Get From Dictionary    ${users}    securityLevel
    \    Append To List    ${Level}    ${User_Sec_Level}
    # User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Verify SNMP Trap Destination Edit LI
    [Documentation]    Verifying SNMP Trap Destination Edit LI
    [Arguments]        ${li}        ${data_users}    ${trap_destinations}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}
    # Trap Details
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    Log to console and logfile    Length..${len}
    ${trap_dest}=    Create List
    ${trap_dest_ips}=    Create List
    ${inform}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${trap_dest}    ${list_trap}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${User_Sec_Level}=    Get From Dictionary    ${traps}    inform
    \    Append To List    ${Level}    ${User_Sec_Level}
    # User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Verify LI Consistency State
    [Documentation]    Verifying LI Consistency State
    [Arguments]        ${li}    ${State}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}

Get IC
    [Documentation]    Getting InterConnect Details
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log        ${ic}

Perform an Update From Group
    [Documentation]    Performing an Update From Group
    [Arguments]        ${li}=${li}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Verify SNMP Users
    [Documentation]    Verifying SNMP Users
    [Arguments]        ${lig}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${lig_uri} =    Get LIG URI    ${lig}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}
    # For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}

    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
    Log to console and logfile    SNMP Users are successfully Verified
