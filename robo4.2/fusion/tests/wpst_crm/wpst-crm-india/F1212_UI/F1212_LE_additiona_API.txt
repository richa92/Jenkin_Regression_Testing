*** Settings ***
Documentation       Feature   Test: F1212
...                 Hill  Firmware Update test to include all interconnect types: Ethernet, FC interconnects
...
Variables           data_variables.py
#Suite Setup        Run FTS and test-specific setup
#Suite Teardown     Suite Teardown
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             SSHLibrary
Test Setup         KC Load Test Data

*** Variables ***
${LE_name}                     SGH420HHYA
${firmwareVersion_upgrade}     3.01
${SSH_PASS}                     hpvse1
${DataFile}         ./OVAData.xml
${APPLIANCE_IP}                 15.212.136.115
${ICM_NAME1}                         SGH420HHYA, interconnect 3
${ICM_NAME2}                         SGH420HHYA, interconnect 4
${ICM_NAME3}                         SGH420HHYA, interconnect 6
${ICM_NAME4}                         SGH420HHYA, interconnect 7
${ICM_NAME5}                         SGH420HHYA, interconnect 1
${ICM_NAME6}                         SGH420HHYA, interconnect 2
${BAY1}                              1
${IP}                           10.10.0.12

${Last_AlertID}            0
${Starting_AlertID}        1

${LE_URIvalue_one}            /rest/index/resources?category=tasks&start=0&query=%22parentTaskUri%3A%27%2Frest%2Ftasks%2F



${LE_URIvalue_two}             %27%22&_

${LE_Downgrade_alerts_message}      No update required. Selected enclosure firmware is older than the firmware that is already installed.

${E_value}                       No update required. Selected firmware is already installed in the logical interconnect
${RR_BB}                         Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_st_succ}                 Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${RR_BB_act_suc}                 Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_act_str}                 Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert1}                    Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert2}                    Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${ICM_Alert3}                    Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline
${ICM_Alert4}                    Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.01 v7.2.1_38 from baseline

${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
# ${LE_N_Alert2}                    No update required. Selected firmware is already installed in the logical interconnect
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect

${E-value}                       No update required. Selected firmware is already installed in the logical interconnect
${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect


${ICM_Alert1_stg_star}           Staging started for the interconnect
${ICM_Alert1_stg_str_end}        \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline


${ICM_Alert1_stg_succ}           Staging success for the interconnect
${ICM_Alert1_stg_succ_end}       \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
${ICM_Alert1_act_star_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
${ICM_Alert1_act_succ_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#1 4.40 2014-10-12T08:56:22Z    4.40 2014-10-12T08:56:22Z
${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline

${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline


#${ICM_Alert1_stg_star}           Staging started for the interconnect
${HICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_stg_succ}           Staging success for the interconnect
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_act_star}          Activation started for the interconnect
${HICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_act_succ}          Activation success for the interconnect
${HICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#1 4.40 2014-10-12T08:56:22Z(4.50 2016-04-14T07:06:49Z)    4.40 2014-10-12T08:56:22Z  (4.50 2016-04-14T07:06:49Z)
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline

#${HICM_Alert1_stg_star_3_end}    \  with firmware version 3.05 v7.2.1_45 from baseline
${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline


@{LI_u_vc_names}=    ${ICM_NAME3}

@{LI_vc_names}=    ${ICM_NAME5}
...             ${ICM_NAME6}

@{LI_names}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME4}

@{LI_namesall}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME3}
...             ${ICM_NAME4}
...             ${ICM_NAME5}
...             ${ICM_NAME6}


*** Test Cases ***

TC01 Verify that Update from group orrefresh operation done at LE level while LI firmware upgrade is in progress
    [Documentation]    "3.1.2 : Verify that ‘Update from group’ or ‘refresh’ operation done at LE level while LI firmware upgrade is in progress"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_54 LE FW Update: Verify that Update from group or refresh operation done at LE level while LI firmware upgrade is in progress

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${le}=    Get LE    ${LE_name}
    Log to Console         ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    Log to Console         {le_uri}
    ${body}=    Build LE SPP Body Hill    ${hple_spp_bb_upgrade_lw_with_flag_h}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}
    ${resp}=    fusion_api_update_logical_enclosure_from_group    ${le_uri}
    Log to Console         ${resp}
    ${task} =    Wait For Taskufg1    ${resp}    10 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Sleep   19 minutes 1 seconds


    Fusion Api Logout Appliance

#######Downgrade FW of LE--without force option-Shared Infrastructure ######## ###############

TC02 Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page
    [Documentation]    "3.1.2 F1212_TC_API_74 and F1212_TC_API_59: Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_74 and F1212_TC_API_59:  Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${le}=    Get LE    ${LE_name}
    Log to Console         ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    Log to Console         {le_uri}
    ${body}=    Build LE SPP Body Hill    ${hple_spp_bb_upgrade_no_flag}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}
    Log to Console         ${resp}
    ${task} =    Wait For Task1    ${resp}    45 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Warning
    Validate Response    ${task}    ${valDict}

    ${location} =       Get Variable Value      ${resp['location']}
    ${task_uri} =       Get Variable Value          ${location}
    Log to Console    taskuribheema value ${task_uri}
    Log to Console    parurivalue ${task_uri}

    ${parnt_uri} =     Fetch From Right    ${task_uri}    tasks/
    Log to Console    Bheemajja ${parnt_uri}

    ${LE_URI_task_rest} =    Catenate    SEPARATOR=${parnt_uri}    ${LE_URIvalue_one}    ${LE_URIvalue_two}

#   ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console      ${LE_URI_task_rest}
    ${alerts} =    fusion_api_get_alerts    ${LE_URI_task_rest}
    Log to Console    ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen

#   : FOR    ${LE_ALERT}    IN    @{LE_N__dwn_Alerts}
#    \    Run Keyword and Continue on Failure      Should Contain       '${alerts}'     ${LE_ALERT}     Expected Error Message Not seen
#    Should Match Regexp    ${alerts}    ${Alert_Msg_APInew_2nd}
#   Log to Console    Found the alert message on activity rest call ${Found_alerts}
    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${LE_Downgrade_alerts_message}  Expected Error Message Not seen

    Fusion Api Logout Appliance
################# Verify the alert message appears when try to set firmware baseline which is same as currently installed version and don’t check the force installation option in  firmware update operation on LE page ###############

TC03 Verify the alert message appears when try to set firmware baseline which is same as currently installed version and dont check the force installation option in firmware update operation on LE page
    [Documentation]    "3.1.2 :Verify the alert message appears when try to set firmware baseline which is same as currently installed version and don’t check the force installation option in  firmware update operation on LE page"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_66: LE FW Update: Verify the alert message appears when try to set firmware baseline which is same as currently installed version and don’t check the force installation option in  firmware update operation on LE page

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${le}=    Get LE    ${LE_name}
    Log to Console         ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    Log to Console         {le_uri}
    ${body}=    Build LE SPP Body Hill    ${hple_spp_bb_nw_same_h}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}
    Log to Console         ${resp}
    ${task} =    Wait For Task1    ${resp}    45 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   Log to Console    ${alerts}

    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${LE_N_Alert2}  Expected Error Message Not seen
    Log to Console    Found the alert message ${LE_N_Alert2}
    Fusion Api Logout Appliance

TC04 Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page
    [Documentation]    "3.1.2 F1212_TC_API_74 and F1212_TC_API_59: Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_74 and F1212_TC_API_59:  Verify proper error message and resolution is appeared when try to downgrading firmware (with lesser version/same version) without selecting force option (shared infra/shared infra and profiles/OA only).on LE page

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${le}=    Get LE    ${LE_name}
    Log to Console         ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    Log to Console         {le_uri}
    ${body}=    Build LE SPP Body Hill    ${hple_spp_bb_upgrade_no_flag}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}
    Log to Console         ${resp}
    ${task} =    Wait For Task1    ${resp}    45 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Warning
    Validate Response    ${task}    ${valDict}


    ${location} =       Get Variable Value      ${resp['location']}
    ${task_uri} =       Get Variable Value          ${location}
    Log to Console    taskuribheema value ${task_uri}
    Log to Console    parurivalue ${task_uri}

    ${parnt_uri} =     Fetch From Right    ${task_uri}    tasks/
    Log to Console    Bheemajja ${parnt_uri}

    ${LE_URI_task_rest} =    Catenate    SEPARATOR=${parnt_uri}    ${LE_URIvalue_one}    ${LE_URIvalue_two}

#   ${alerts} =    fusion_api_get_alerts    /rest/alerts
    Log to Console      ${LE_URI_task_rest}
    ${alerts} =    fusion_api_get_alerts    ${LE_URI_task_rest}
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen

#   : FOR    ${LE_ALERT}    IN    @{LE_N__dwn_Alerts}
#    \    Run Keyword and Continue on Failure      Should Contain       '${alerts}'     ${LE_ALERT}     Expected Error Message Not seen
#    Should Match Regexp    ${alerts}    ${Alert_Msg_APInew_2nd}
#   Log to Console    Found the alert message on activity rest call ${Found_alerts}
    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${LE_Downgrade_alerts_message}  Expected Error Message Not seen

    Fusion Api Logout Appliance
TC05 Verify FW update fails with error when rigger LE FW update while LE update from group is in progress.
    [Documentation]    "3.1.2 :Verify FW update fails with error when rigger LE FW update while LE update from group is in progress."
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_81 LE FW Update: Verify FW update fails with error when rigger LE FW update while LE update from group is in progress.

    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    ${le}=    Get LE    ${LE_name}
    Log to Console         ${le}
    ${le_uri}=    Get from LE    ${le}    uri
    Log to Console         {le_uri}
    ${body}=    Build LE SPP Body Hill    ${hple_spp_bb_upgrade_lw_with_flag_h}
    Log to Console         ${body}
    ${resp} =    Fusion Api Le Firmware Update    body=${body}    uri=${le_uri}
    ${resp}=    fusion_api_update_logical_enclosure_from_group    ${le_uri}
    Log to Console         ${resp}
    ${task} =    Wait For Taskufg1    ${resp}    10 min    5s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}



    Fusion Api Logout Appliance

*** Keywords ***

Log into Fusion appliance as Administrator
    ${user} =  Get Data By Property  ${TestData.users}  name  Administrator
    Fusion UI Login to Appliance   ${user[0].name}

Validate Interconnects
    [Arguments]     ${ICM_NAME}     ${ltlv}     ${rtlv}     ${explldp}
    ${ic} =     Get IC      ${ICM_NAME}
    ${enableRichTLV} =          Get From IC    ${ic}   enableRichTLV
    ${enableTaggedLldp} =       Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =             Get from IC     ${ic}       lldpIpAddress
    Should be Equal as Strings    ${enableRichTLV}      ${rtlv}
    Should be Equal as Strings    ${enableTaggedLldp}       ${ltlv}
    Should be Equal as Strings    ${lldpip}     ${explldp}


KC Load Test Data
    Set Log Level    TRACE
    Load Test Data  ${DataFile}

Load Test Data and Open Browser
    Set Log Level    TRACE
    Load Test Data  ${DataFile}
    Log Variables
    Open Browser  ${ApplianceUrl}  ${Browser}
    Maximize Browser Window
    Set Selenium Speed  ${SeleniumSpeed}

Get PortId from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log to Console             ${uri}
    ${interconnect} =           fusion_api_get_interconnect_ports           uri=${uri}              param='\ports'
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log to Console         ${ports}
    ${l} =  Get Length  ${ports}
    Log to Console     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log to Console         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_id} =    Get From Dictionary     ${port_list}        portId

    [Return]    ${port_id}
    Log to Console         ${port_id}

Get PortStatus from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2 - Fetched from datafile
    ${ic} =     Get IC          ${ICM_NAME}
    ${uri} =     Get From IC    ${ic}   uri
    Log to Console             ${uri}
    ${interconnect} =           fusion_api_get_interconnect_ports           uri=${uri}              param='\ports'
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log to Console         ${ports}
    ${l} =  Get Length  ${ports}
    Log to Console     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log to Console         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_status} =    Get from Dictionary     ${port_list}        portHealthStatus
    [Return]    ${port_status}
    Log to Console         ${port_status}


Build Ports Edit Body
    [Arguments]     ${port_id}          ${downlink_edit}
    ${interconnectName} =           Get Variable Value  ${downlink_edit['interconnectName']}
    ${enabled} =           Get Variable Value  ${downlink_edit['enabled']}
    ${portName} =           Get Variable Value  ${downlink_edit['portName']}
    ${type} =           Get Variable Value  ${downlink_edit['type']}
    ${edit_body} =  Create Dictionary   interconnectName=${interconnectName}
    ...                             enabled=${enabled}
    ...                             portName=${portName}
    ...                             portId=${port_id}
    ...                             type=${type}
    ${edit_body} =   Create list     ${edit_body}
    [Return]    ${edit_body}
    Log to Console         ${edit_body}

Build LE SPP body1
    [Arguments]     ${le_spp}
    #${liedit} =    Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${force} =              Get Variable Value  ${li_spp['force']}


    ${body} =   Fusion Api Build LE spp Body    command=${command}
    ...                                         sppUri=${sppUri}
    ...                                         force=${force}
    ...
    [Return]    ${body}



Build LE SPP Body
    [Arguments]     ${le_spp}

    ${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
    ${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
    ${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
    ${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}
    ${updateFirmwareOnUnmanagedInterconnect} =              Get Variable Value  ${le_spp['updateFirmwareOnUnmanagedInterconnect']}
    ${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
    ${value_dict} = Create Dictionary   firmwareBaselineUri=${firmwareBaselineUri}
    ...                             forceInstallFirmware=${forceInstallFirmware}
    ...                             firmwareUpdateOn=${firmwareUpdateOn}
    ...                             logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}
    ...                             updateFirmwareOnUnmanagedInterconnect=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ...                             validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ${value} =   Create list     ${value_dict}
    Log to Console         ${value_dict}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/firmware
    ...                             value=${value_dict}
    ${body} =   Create list     ${body}
    [Return]    ${body}

Build LE SPP Body Hill
    [Arguments]     ${le_spp}

    ${firmwareBaselineUri} =           Get Variable Value  ${le_spp['firmwareBaselineUri']}
    ${forceInstallFirmware} =              Get Variable Value  ${le_spp['forceInstallFirmware']}
    ${firmwareUpdateOn} =              Get Variable Value  ${le_spp['firmwareUpdateOn']}
    ${logicalInterconnectUpdateMode} =              Get Variable Value  ${le_spp['logicalInterconnectUpdateMode']}

    ${validateIfLIFirmwareUpdateIsNonDisruptive} =              Get Variable Value  ${le_spp['validateIfLIFirmwareUpdateIsNonDisruptive']}
    ${value_dict} = Create Dictionary   firmwareBaselineUri=${firmwareBaselineUri}
    ...                             forceInstallFirmware=${forceInstallFirmware}
    ...                             firmwareUpdateOn=${firmwareUpdateOn}
    ...                             logicalInterconnectUpdateMode=${logicalInterconnectUpdateMode}

    ...                             validateIfLIFirmwareUpdateIsNonDisruptive=${validateIfLIFirmwareUpdateIsNonDisruptive}
    ${value} =   Create list     ${value_dict}
    Log to Console         ${value_dict}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/firmware
    ...                             value=${value_dict}
    ${body} =   Create list     ${body}
    [Return]    ${body}


Build LI SPP body
    [Arguments]     ${li_spp}
    ${liedit} =     Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${force} =              Get Variable Value  ${li_spp['force']}


    ${body} =   Fusion Api Create LI spp Body   command=${command}
    ...                                         sppUri=${sppUri}
    ...                                         force=${force}
    ...
    [Return]    ${body}

Get IC
    [Arguments]     ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log to Console     ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log to Console     ${ic}

Get ICBAYNUMBER
    [Arguments]     ${ICM_NAME}
    ${ic} =     Get IC          ${ICM_NAME}
    ${val}=    Fetch From Right    ${ic}    1
    Log to Console     ${val}
    [Return]    ${val}


Get LE
    [Arguments]     ${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log to Console     ${resp}
    ${les} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${les}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${le} =     Get From List   ${les}    ${x}
    \   Exit For Loop If    '${le['name']}' == '${LE_name}'
    [Return]    ${le}
    Log to Console     ${le}

Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}

Create Logical Enclosure
    [Arguments]     ${LE NAME}=${LE Name}   ${EG Name}=${EG Name}

    # Get enclosureGroupUri
    ${Response}=            Fusion Api Get Enclosure Groups     param=?filter="name=${EG NAME}"
    ${members}=             Get From Dictionary                 ${Response}     members
    ${member}=              Get From List                       ${members}      0
    ${enclosureGroupUri}=   Get From Dictionary                 ${member}       uri

    # Get enclosureUri
    ${Response}=        Fusion Api Get Enclosures
    ${members}=         Get From Dictionary     ${Response}     members
    ${member}=          Get From List           ${members}      0
    ${enclosureUri}=    Get From Dictionary     ${member}       uri
    ${enclosureUris}=   Create List             ${enclosureUri}

    # Build Payload
    ${LE Payload}=      Fusion API Create Logical Enclosure Payload     name=${LE Name}
    ...                 enclosureGroupUri=${enclosureGroupUri}
    ...                 enclosureUris=${enclosureUris}

    # Create Logical Enclosure
    ${Response}=        Fusion Api Create Logical Enclosure         body=${LE Payload}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate create Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure.

    [Return]    ${Response}

Get Enclosure Support Dump
    [Arguments]                ${le}         ${file}
    # Get Logical Enclosure Id
    #${Response}=                Fusion Api Get Logical Enclosure
    #${members}=                 Get From Dictionary     ${Response}                 members
    #${member}=                  Get From List           ${members}                  0
    ${le}=      Get LE
    ${logicalEnclosureUri}=     Get from LE         ${le}       uri
    ${logicalEnclosureId}=      Fetch From Right        ${logicalEnclosureUri}      /

    # Build LE Support Dump Payload
    ${encrypt}=         Convert to Integer      1
    ${applianceDump}=   Convert to Integer      0
    ${LE SupportDump Payload}=                  Create Dictionary   errorCode=API-TEST      encrypt=${encrypt}
    #...                 includeApplianceDump=${applianceDump}

    # Create Enclosure Support Dump
    ${Response}=        Fusion Api Get Logical Enclosure Support Dump   body=${LE SupportDump Payload}
    ...                 id=${logicalEnclosureId}
    ${status_code}=     Get From Dictionary     ${Response}             status_code
    Should Be Equal as Strings                  ${status_code}          202
    ...                 msg=Failed to initiate Create Enclosure Support Dump.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to Create Enclosure Support Dump.

    # Download Generated Support Dump file
    ${associatedResource}=      Get From Dictionary     ${task}                 associatedResource
    ${supportDumpUri}=          Get From Dictionary     ${associatedResource}   resourceUri

    ${Response}=        Fusion Api Download Support Dump            uri=${supportDumpUri}   localfile=${file}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      200
    ...                 msg=Failed to Download Enclosure Support Dump.

    [Return]    ${Response}

Delete Logical Enclosure
    ${Response}=        Fusion Api Delete Logical Enclosure         name=${LE Name}
    ${status_code}=     Get From Dictionary     ${Response}         status_code
    Should Be Equal as Strings                  ${status_code}      202
    ...                 msg=Failed to initiate delete Logical Enclosure.

    # Wait for task to complete
    ${task} =                       Wait For Task           ${Response}     300s    30s
    ${status_code}=                 Get From Dictionary     ${task}         status_code
    Should Be Equal as Strings      ${status_code}          200             msg=Failed to delete Logical Enclosure.

Verify Enclosure in Monitored State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Monitored   msg=Enclosure ${ENC Serial Number} not in Monitored state.

Verify Enclosure in Configured State
    ${Enc}=         Get Enclosure     ${ENC Serial Number}
    ${state}=       Get From Dictionary     ${Enc}       state
    # Should be Equal as Strings    ${state}                Configured      msg=Enclosure ${ENC Serial Number} not in Configured state.

Wait For Taskufg1
    [Documentation]    Waits for a task to reach an end-state
    [Arguments]     ${resp} ${timeout}=60 s ${interval}=2 s
    #Log to console \n
    ${task} =   Wait Until Keyword Succeeds    ${timeout}   ${interval}    Task Reached Endstateufg1    ${resp}
    [Return]    ${task}


Task Reached Endstateufg1
    [Arguments] ${resp}

    Set Log Level   TRACE
    #Should Contain ${resp} uri
    ${location} =       Get Variable Value      ${resp['location']}
#   ${task_uri} =       Get Variable Value          ${location}
    ${task_uri} =       Get From Dictionary     ${resp}    uri
    ${task} =           Fusion Api Get Task     uri=${task_uri}
    ${task_state} =     Get From Dictionary     ${task}     taskState
    ${task_category} =  Get From Dictionary     ${task}     category
    ${task_name} =      Get From Dictionary     ${task}     name
    ${resource} =       Get From Dictionary     ${task['associatedResource']}   resourceName
    ${resource_uri} =   Get From Dictionary     ${task['associatedResource']}   resourceUri
    Log to console and logfile      \t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
    Should Match Regexp ${task_state}   ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]    ${task}

Wait For Task
    [Documentation]     Waits for a task to reach an end-state
    [Arguments]         ${resp}                         ${timeout}=60s      ${interval}=2s
    Log to console      \n
    ${task} =           Wait Until Keyword Succeeds     ${timeout}          ${interval}     Task Reached Endstate   ${resp}
    ${NicelyFormattedJsonString}                        dumps               ${task}         indent=${4}
    ...                 sort_keys=${True}
    Log to Console                 ${NicelyFormattedJsonString}
    [Return]            ${task}

Task Reached Endstate
    [Arguments]             ${resp}
    Set Log Level           TRACE
    Should Contain          ${resp}                 uri
    ${task_uri} =           Get From Dictionary     ${resp}                         uri
    ${task} =               Fusion Api Get Task     uri=${task_uri}
    ${task_state} =         Get From Dictionary     ${task}                         taskState
    ${task_category} =      Get From Dictionary     ${task}                         category
    ${task_name} =          Get From Dictionary     ${task}                         name
    ${resource} =           Get From Dictionary     ${task['associatedResource']}   resourceName
    ${resource_uri} =       Get From Dictionary     ${task['associatedResource']}   resourceUri
    Log To Console          \t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}
    Should Match Regexp     ${task_state}           ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]                ${task}


Validate Activity
    [Arguments]    ${Alert_List}            ${Expected_Alerts}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary      ${Alert}        uri
    \    ${alertState}     Get From Dictionary      ${Alert}        alertState
    \    ${alertTypeID}    Get From Dictionary      ${Alert}        alertTypeID
    \    ${description1}    Get From Dictionary     ${Alert}        description
    \    Run Keyword If     '${description1}' == '${Expected_Alerts}'       Exit For Loop
    \    ${description}    Get From Dictionary      ${Alert}        description
    \    ${uri}    Get From Dictionary      ${Alert}        uri

    #\   Run Keyword     Should Not Contain Match    '${description}'       '${Expected_Alerts}'        Continue For Loop
    \    Log to console and logfile             Activity exists
         [Return]    ${uri}
         Log to Console         ${uri}


Validate Activity Alerts
    [Arguments]    ${Alert_List}        ${Expected_Alerts}

    :FOR    ${Alert}    IN    @{Alert_List}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

 Validate Activity Alerts1
    [Arguments]    ${Bay}    ${Expected_Alerts}
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*EnclosureManager\/${Bay}.*

    :FOR    ${Alert}    IN    @{Alert_List}

    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Run Keyword And Continue On Failure
    ...    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

ConnectOA_get_Firmversion

    Open Connection      ${IP}
    ${output} = Login    Administrator    Admin
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 3    return_stderr=True    return_rc=True
    Log to Console         ${stdout}
    ${FirmwareICVersion}=    Get Lines Containing String    ${stdout}   Firmware Version:
    Log to Console             ${FirmwareICVersion}
    [Return]    ${FirmwareICVersion}


Close SSH Connection
    [Documentation]    Exits the current SSH session
    Close Connection

Fusion Api Get Activity Alerts
    [Documentation]    Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceUri
    \    ${alertState}    Get From Dictionary    ${Alert}    alertState
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}

    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    Log to Console         ${Alert_List}
    [Return]    ${Alert_List}

