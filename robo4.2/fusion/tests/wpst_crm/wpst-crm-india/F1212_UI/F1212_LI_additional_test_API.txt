*** Settings ***
Documentation       Feature    test  :  Firmware   update F1212 feature of Hill Module
...                 on Enclosure G3,G2 G1
Variables           data_variables.py

Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             String
Library             json
Library             OperatingSystem
Library             SSHLibrary
Library             Selenium2Library
Library             Validation_c7k_firmware_version

*** Variables ***
${SSH_PASS}                 hpvse1
${DataFile}                 ./OVAData.xml
${APPLIANCE_IP}             10.10.0.215
${X-API-VERSION}            300
${li}                         SGH420HHYA-LIG_B1
${ExpectedErrorMsg1}=       Activate operation is not allowed at this state. One or more interconnects may not have been baselined to this firmware or all interconnects are already activated/activating to this baseline
${IP}                      10.10.0.12
${ICM_NAME1}                         SGH420HHYA, interconnect 3
${ICM_NAME2}                         SGH420HHYA, interconnect 4
${ICM_NAME3}                         SGH420HHYA, interconnect 6
${ICM_NAME4}                         SGH420HHYA, interconnect 7
${ICM_NAME5}                         SGH420HHYA, interconnect 1
${ICM_NAME6}                         SGH420HHYA, interconnect 2
${BAY1}                              1
${IP}                           10.10.0.12
${statuscode400}           \'status_code\'\: 400


${LE_Downgrade_alerts_message}      No update required. Selected enclosure firmware is older than the firmware that is already installed.


${E-value}                       No update required. Selected firmware is already installed in the logical interconnect
${RR_BB}                         Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_st_succ}                 Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ExpectedErrorLiMsg1}=         Unable to update firmware for the logical interconnect SGH420HHYA-LIG_B1 as an attempt was made to downgrade the firmware without selecting the force option.
${ExpectedErrorLiMsg3}=           Retry the downgrade operation by selecting force option in the logical interconnect firmware update page.


${RR_BB_act_suc}                 Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${RR_BB_act_str}                 Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert1}                    Staging started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert2}                    Staging success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${ICM_Alert3}                    Activation success for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert4}                    Activation started for the interconnect SGH420HHYA, interconnect 3 with firmware version 3.00 v7.2.1_33 from baseline

${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect

${E-value}                       No update required. Selected firmware is already installed in the logical interconnect
${LE_N_Alert1}                  No update required. Selected firmware is already installed for the Onboard Administrator.
${LE_N_Alert2}                  No update required. Selected firmware is already installed in the logical interconnect


${ICM_Alert1_stg_star}           Staging started for the interconnect
${ICM_Alert1_stg_str_end}        \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline


${ICM_Alert1_stg_succ}           Staging success for the interconnect
${ICM_Alert1_stg_succ_end}       \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline

${ICM_Alert1_act_star}          Activation started for the interconnect
${ICM_Alert1_act_star_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${HICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

${ICM_Alert1_act_succ}          Activation success for the interconnect
${ICM_Alert1_act_succ_end}      \  with firmware version 3.00 v7.2.1_33 from baseline
${ICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#1 4.40 2014-10-12T08:56:22Z    4.40 2014-10-12T08:56:22Z
${ICM_Alert1_stg_star_1_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline

${ICM_Alert1_stg_star_2_end}    \  with firmware version 4.40 2014-10-12T08:27:55Z from baseline
${HICM_Alert1_stg_star_2_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline


#${ICM_Alert1_stg_star}           Staging started for the interconnect
${HICM_Alert1_stg_str_end}        \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_stg_succ}           Staging success for the interconnect
${HICM_Alert1_stg_succ_end}       \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_act_star}          Activation started for the interconnect
${HICM_Alert1_act_star_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#${ICM_Alert1_act_succ}          Activation success for the interconnect
${HICM_Alert1_act_succ_end}      \  with firmware version 3.05 v7.2.1_45 from baseline

#1 4.40 2014-10-12T08:56:22Z(4.50 2016-04-14T07:06:49Z)    4.40 2014-10-12T08:56:22Z  (4.50 2016-04-14T07:06:49Z)
${HICM_Alert1_stg_star_1_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline

#${HICM_Alert1_stg_star_3_end}    \  with firmware version 3.05 v7.2.1_45 from baseline
${HICM_Alert1_stg_star_3_end}    \  with firmware version 4.50 2016-04-14T07:06:49Z from baseline


@{LI_u_vc_names}=    ${ICM_NAME3}

@{LI_vc_names}=    ${ICM_NAME5}
...             ${ICM_NAME6}

@{LI_names}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME4}

@{LI_namesall}=    ${ICM_NAME1}
...             ${ICM_NAME2}
...             ${ICM_NAME3}
...             ${ICM_NAME4}
...             ${ICM_NAME5}
...             ${ICM_NAME6}



*** Test Cases ***


TC01 Verify that oneview thrown error when Set blank value for Delay field on LI activation page
    [Documentation]     "3.1.2 F1212_TC_API_56 : Verify that oneview thrown error when Set blank value for Delay field on LI activation page"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_56: Verify that oneview thrown error when Set blank value for Delay field on LI activation page

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

#   ${del_resp}=    fusion_api_delete_alert    /rest/alerts
#   Log to Console    ${del_resp}

    ${li_uri} =     Get LI URI   ${li}

    ${resp1} =   Fusion Api Li Upgrade Firmware   body=${Demo_New_li_spp_upgrade_li_tst_delay_empty}        uri=${li_uri}
    Log to Console     ${resp1}
    Run Keyword and Continue on Failure    Should Contain       '${resp1}'      ${statuscode400}    Expected Error Message Not seen




    Fusion Api Logout Appliance



TC02 Verify that oneview should throw proper error message when Dont select any VC for selective activation case via LI
    [Documentation]         "3.1.2 F1212_TC_API_55 : Verify that oneview should throw proper error message when Dont select any VC for selective activation case via LI"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_55: Verify that oneview should throw proper error message when Dont select any VC for selective activation case via LI
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    Log to Console    List Value ${interconnectsurilist}

    ${body} =    Build SelectiveInterconnects SPP body    ${Demo_li_spp_upgrade5_test_higher}    ${interconnectsurilist}

    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware    body=${body}      uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    1 min       2s

    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =   Create Dictionary   status_code=${400}
#   ...                                 taskState=Completed
    Validate Response   ${task}  ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
#   Sleep   1 minutes 1 seconds

    Fusion Api Logout Appliance



TC03 Verify the alert message appears when try to set firmware baseline to the lower version and dont check the force installation flag(option) in downgrade firmware update operation In LI page
    [Documentation]         "3.1.2 F1212_TC_API_58 :Verify the alert message appears when try to set firmware baseline to the lower version and dont check the force installation flag(option) in downgrade firmware update operation In LI page"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_58: Verify the alert message appears when try to set firmware baseline to the lower version and dont check the force installation flag(option) in downgrade firmware update operation In LI page

    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

#   ${body} =   Build LI SPP body   ${li_spp_upgrade6_downgrade_version_hh}
    #${body} = json.loads()
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${li_spp_upgrade6_downgrade_version_hh}        uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    60 min      15s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Warning
    Validate Response      ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds

    ${alerts} =    fusion_api_get_alerts    /rest/alerts

    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen

#   : FOR    ${LE_ALERT}    IN    @{LE_N_Alerts}
    Log to Console      ${ExpectedErrorLiMsg1}
    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${ExpectedErrorLiMsg1}  Expected Error Message Not seen
    Log to Console      ${ExpectedErrorLiMsg3}
    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${ExpectedErrorLiMsg3}  Expected Error Message Not seen

    Fusion Api Logout Appliance

TC04 Verify the alert message appears when try to set firmware baseline which is same as currently installed version and dont check the force installation option in  firmware update operation on LI page
    [Documentation]     "3.1 :Verify the alert message appears when try to set firmware baseline which is same as currently installed version and dont check the force installation option in  firmware update operation on LI page"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_65 --> Verify the alert message appears when try to set firmware baseline which is same as currently installed version and dont check the force installation option in  firmware update operation on LI page


    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

#   ${body} =   Build LI SPP body   ${New_li_spp_upgrade_li_tst_same_hh}
    #${body} = json.loads()
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${New_li_spp_upgrade_li_tst_same_hh}       uri=${li_uri}
    Log to Console     ${resp1}
    ${task} =       Wait For Task   ${resp1}    10 min      15s
    Log to Console      "Hi am in validate"
    Log to Console     ${task}
    Log to Console      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response      ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds

    ${alerts} =    fusion_api_get_alerts    /rest/alerts
#   Log to Console    ${alerts}
    Log to Console     ${alerts}
#    Run Keyword and Continue on Failure       Should Contain       '${Alert_List}'     ${RR_BB}    Expected Error Message Not seen

#   : FOR    ${LE_ALERT}    IN    @{LE_N_Alerts}
    Log to Console      ${ExpectedErrorMsgLEb1}

    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${ExpectedErrorMsgLEb1}     Expected Error Message Not seen
    Log to Console      ${E_value}
    Run Keyword and Continue on Failure    Should Contain       '${alerts}'     ${E_value}  Expected Error Message Not seen

    Fusion Api Logout Appliance

TC05 Appliance Login and create users to validates previlages
    [Documentation]     "3.1 :Verify that FW update option is available only to Administrator and server Admin and not to other users"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_71--> Verify that FW update option is available only to Administrator and server Admin and not to other users
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}

TC06 Previleges validation NetworkAdmin
    [Documentation]     "3.1 :Verify that FW update option is available only to Administrator and server Admin and not to other users"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_71--> Verify that FW update option is available only to Administrator and server Admin and not to other users
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${network_admin}
#   Log to console and logfile      Trying to trigger firmware update  as NetworkAdmin user Should be allowed
    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to console and logfile      ${del_resp}

#   ${body} =   Build LI SPP body   ${Demo_New_li_spp_upgrade_li_tst_h}
#   Log to console and logfile      ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${Demo_New_li_spp_upgrade_li_tst_h}        uri=${li_uri}
    Log to console and logfile      ${resp1}
    ${task} =     Wait For Task    ${resp1}    45 min    5s

    Log to console and logfile      ${task}

    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response      ${task}     ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
    Sleep   1 minutes 1 seconds
    Log to console and logfile      \nSuccessfully Validated NetworkAdmin has privileges to trigger firmware update operation

TC07 Previleges validation StorageAdmin
    [Documentation]     "3.1 :Verify that FW update option is available only to Administrator and server Admin and not to other users"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_71--> Verify that FW update option is available only to Administrator and server Admin and not to other users
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${storage_admin}
    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}
    Log to console and logfile      Trying to trigger firmware update via storageAdmin user should not be allowed
#   ${body} =   Build LI SPP body   ${Demo_New_li_spp_upgrade_li_tst_h}
#   Log to console and logfile      ${body}
#   ${li_uri} =     Get LI URI   ${li}
    Log to console and logfile      yes: ${li_uri}
    ${resp} =     Fusion Api Li Upgrade Firmware    body=${Demo_New_li_spp_upgrade_li_tst_h}        uri=${li_uri}
    Log to console and logfile      ${resp}
#   ${task} =     Wait For Task    ${resp1}    44 min    5s

    ${valDict} =    Create Dictionary    status_code=${401}
    Validate Response     ${resp}    ${valDict}
    Log to console and logfile       \nTrying to firmware update for storageAdmin user Should not be allowed
#   Log to console and logfile    \nSuccessfully Validated StorageAdmin user does not have perimition to trigger firmware update
    Fusion Api Logout Appliance


TC08 Previleges validation ServerAdmin
    [Documentation]     "3.1 :Verify that FW update option is available only to Administrator and server Admin and not to other users"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_71--> Verify that FW update option is available only to Administrator and server Admin and not to other users
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${server_admin}
    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}
#   Log to console and logfile    Trying to trigger firmware update  for serverAdmin user Should not be allowed
#   ${body} =   Build LI SPP body   ${Demo_New_li_spp_upgrade_li_tst_h}

    ${li_uri} =     Get LI URI   ${li}

    ${resp} =   Fusion Api Li Upgrade Firmware  body=${Demo_New_li_spp_upgrade_li_tst_h}        uri=${li_uri}
    Log to console and logfile      ${resp}
#   ${task} =     Wait For Task    ${resp1}    44 min    5s

    ${valDict} =    Create Dictionary     status_code=${401}
    Validate Response    ${resp}    ${valDict}
    Log to console and logfile    Successfully Validated serverAdmin User has no privilege to trigger firmware update
    Fusion Api Logout Appliance

TC09 Previleges validation backupAdmin
    [Documentation]     "3.1 :Verify that FW update option is available only to Administrator and server Admin and not to other users"
    Log to Console    Testcase_ID: TP section 3.1.2 F1212_TC_API_71--> Verify that FW update option is available only to Administrator and server Admin and not to other users
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${backup_admin}
    ${del_resp}=    fusion_api_delete_alert    /rest/alerts
    Log to Console    ${del_resp}

    Log to console and logfile    Trying to firmware update for backupAdmin user Should not be allowed to perform operation
#   ${body} =   Build LI SPP body   ${Demo_New_li_spp_upgrade_li_tst_h}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${Demo_New_li_spp_upgrade_li_tst_h}        uri=${li_uri}
    Log to console and logfile      ${resp1}
#   ${task} =     Wait For Task    ${resp1}    44 min    5s

    ${valDict} =    Create Dictionary     status_code=${401}
    Validate Response    ${resp1}    ${valDict}
    Log to console and logfile    \nSuccessfully Validated backupAdmin User has no privilege for firmware update operation to trigger
    Fusion Api Logout Appliance

TC10 Verify that oneview should provide proper error message when try to perform Activate Firmware without performing staging firmware for later activation
    [Documentation]     "3.1.2 :Verify that oneview should provide proper error message when try to perform Activate Firmware without performing staging firmware for later activation"
    Log to Console    Testcase_ID: TP section 1.3.1.2 API Test Cases F1212_TC_API_91 LE FW Update: Verify that oneview should provide proper error message when try to perform Activate Firmware without performing staging firmware for later activation


    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}

#   ${del_resp}=    fusion_api_delete_alert    /rest/alerts
#   Log to Console    ${del_resp}

#   ${body} =   Build LI SPP body   ${Demo_li_spp_upgrade5_test_higher}
#   Log to Console     ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp1} =  Fusion Api Li Upgrade Firmware  body=${Demo_li_spp_upgrade5_test_higher}        uri=${li_uri}
    Log to Console     ${resp1}
    ${message_responce}=    Get From Dictionary    ${resp1}    message
#   Log to console     ${message_responce}

    Should Match Regexp     ${message_responce}    ${ExpectedErrorMsg1}
    ${valDict} =    Create Dictionary   status_code=${400}
    ...                                 errorCode=ACTIVATE_OPERATION_NOT_ALLOWED
    Validate Response   ${resp1}    ${valDict}
    Log to Console  \nStage Firmware Upgrade complete
#   Sleep   1 minutes 1 seconds

    Fusion Api Logout Appliance

*** Keywords ***

Fusion Api Get Activity Alerts
    [Documentation]        Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceUri
    \    ${alertState}    Get From Dictionary    ${Alert}    alertState
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}

    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    Log to Console         ${Alert_List}
    [Return]    ${Alert_List}

Fusion Api Get Activity Alerts_new
    [Arguments]    ${Starting_AlertID}=1        ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts

    [Return]    ${Response}


Validate Activity
    [Arguments]    ${Alert_List}            ${Expected_Alerts}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary      ${Alert}        uri
    \    ${alertState}     Get From Dictionary      ${Alert}        alertState
    \    ${alertTypeID}    Get From Dictionary      ${Alert}        alertTypeID
    \    ${description1}    Get From Dictionary     ${Alert}        description
    \    Log to Console    ${description1}
#    \    ${description2}    Get From Dictionary        ${Alert}        taskStatus
#   \    Run Keyword and Continue on Failure       Should Contain       '${Alert}'      ${description1}     Expected Error Message Not seen
    \    Run Keyword If     '${description1}' == '${Expected_Alerts}'       Exit For Loop
    \    ${description}    Get From Dictionary      ${Alert}        description
    \    ${uri}    Get From Dictionary      ${Alert}        uri

    \    Run Keyword     Should Not Contain Match    '${description}'       '${Expected_Alerts}'        Continue For Loop
    \    Log to console and logfile             Activity exists    '${description1}'
         [Return]    ${uri}
#        Log to Console         ${uri}

Open SSH to OA
    [Documentation]        Connect to Virtual Connect Interconnect via SSH
    #[Documentation]        Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]    ${IP}=${OA_CREDENTIAL_DATA['oaIpAddress']}   ${USERNAME}=${OA_CREDENTIAL_DATA['oaUsername']}    ${PASSWORD}=${OA_CREDENTIAL_DATA['oaPassword']}
    ...             ${PROMPT}=>    ${TIMEOUT}=${120}
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection      ${IP}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 4    return_stderr=True    return_rc=True
    ${OAVersion}=    Get Lines Containing String    ${stdout}   Firmware Ver.
     ${OAVersion}=      Fetch From Right      ${OAVersion}   :
    Log to console and logfile    \n Open SSH Connection to Onboard Administrator ${IP} ....
    Log to console and logfile    OA Firmware Ver: ${OAVersion}
    Set Suite Metadata     OA Firmware Version    ${OAVersion}
    [Return]    ${Id}  ${OAVersion}

ConnectOA_get_Firmversion
    Open Connection      ${IP}
    ${output} = Login    Administrator    Admin
    ${stdout}    ${stderr}    ${rc}=    Execute Command    show interconnect info 4    return_stderr=True    return_rc=True
    Log to Console         ${stdout}
    ${OAVersion}=    Get Lines Containing String    ${stdout}   Firmware Version:
    Log to Console             ${OAVersion}
    [Return]    ${OAVersion}


Close SSH Connection
    [Documentation]        Exits the current SSH session
    Close Connection

Build LI SPP body

    [Arguments]     ${li_spp}
    ${liedit} =     Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${ethernetActivationDelay} =              Get Variable Value  ${li_spp['ethernetActivationDelay']}
    ${ethernetActivationType} =              Get Variable Value  ${li_spp['ethernetActivationType']}
    ${fcActivationDelay} =              Get Variable Value  ${li_spp['fcActivationDelay']}
    ${fcActivationType} =              Get Variable Value  ${li_spp['fcActivationType']}
    ${force} =              Get Variable Value  ${li_spp['force']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}





#   ${body} =   Fusion Api Create LI spp Body   command=${command}
#   ...                                         ethernetActivationDelay=${ethernetActivationDelay}
#   ...                                         ethernetActivationType=${ethernetActivationType}
#   ...                                         fcActivationDelay=${fcActivationDelay}
#   ...                                         fcActivationType=${fcActivationType}
#   ...                                         force=${force}
#   ...                                         sppUri=${sppUri}
#   ...

    ${body} =   Fusion Api Create LI spp Body   sppUri=${sppUri}
    ...                                         command=${command}
    ...                                         force=${force}
    ...                                         ethernetActivationType=${ethernetActivationType}
    ...                                         ethernetActivationDelay=${ethernetActivationDelay}
    ...                                         fcActivationType=${fcActivationType}
    ...                                         fcActivationDelay=${fcActivationDelay}
    ...
    [Return]    ${body}

00 Appliance LogIn
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =  Get Variable Value    ${ethernet_networks1}
    Run Keyword If  ${ethernet_networks1} is not ${null}    Add Ethernet Networks from variable ${ethernet_networks1}

00 Create LIG, create enclosure group and import enclosure
    [Tags]  14
    ${body} =   Build LIG body      ${ligs['lig1']}
    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}     60s 2s
    Add Enclosure Group from variable       ${enc_group}
    Add Enclosures from variable   ${encs}

00 Create server profile and ping blade
    [Tags]  15
    Power off ALL servers
    ${profiles} =     Copy List     ${server_profiles}
    Add Server Profiles from variable   ${profiles}
    Power on server      SGH411DFYA, bay 6
    Log to console and logfile      Waiting 10 minutes for server to boot...
    Sleep   10min
    Wait For Appliance To Become Pingable   10.10.2.31






#Get IC
#   [Arguments]     ${ICM_NAME}
#    ${resp} =   fusion api get interconnect
#    Log to Console        ${resp}
#    ${ics} =     Get From Dictionary     ${resp}    members
#   ${l} =  Get Length  ${ics}
#   :FOR    ${x}    IN RANGE    0   ${l}
#    \   ${ic} =     Get From List   ${ics}    ${x}
#   \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
#   [Return]    ${ic}
#   Log to Console     ${ic}

Get LE
    [Arguments]     ${LE_NAME}
    ${resp} =   fusion api get Logical Enclosure
    Log to Console     ${resp}
    ${les} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${les}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${le} =     Get From List   ${les}    ${x}
    \   Exit For Loop If    '${le['name']}' == '${LE_name}'
    [Return]    ${le}
    Log to Console     ${le}

Get from LE
    [Arguments]     ${le}   ${element}
    ${return} =     Get From Dictionary     ${le}   ${element}
    [Return]    ${return}


APIC INVENTORY SYNC
    [Documentation]        issues a inventory synch at APIC
    [Arguments]        ${APIC_HOST}    ${APIC_USER}     ${APIC_PASS}
    Open Connection     ${APIC_HOST}     timeout=20s
    Login               ${APIC_USER}     ${APIC_PASS}
    Write    cd /aci/vm-networking/policies/vmware/vmm-domains/HPVC-WPST-DVS/controllers/10.10.3.74
    Read Until    admin@apic1:10.10.3.74>
    Write    moset inventory-trigger-state triggered
    Sleep       10secs
    Log to console and logfile          Triggering inventory re-synch at APIC nodes
    Write    moconfig commit
    Sleep       15secs
    Close All Connections
    Sleep       120secs

APIC LogIn and Validate FabricNodes
    [Arguments]     ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}       ${IPList}
    APIC INVENTORY SYNC             ${APIC_HOST}    ${APIC_USER}        ${APIC_PASS}
    Log to console      Wait time for APIC to reflect CRM changes
    ${token} =      Fusion Apic Api Login Appliance         ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}
    ${apic_ip} =    Get Variable Value  ${apic_ip}
    ${status} =         Fusion Apic Get fabricNodes         ${APIC_APPLIANCE_IP}        ${token}    ${IPList}
    run keyword if  '${status}'=='False'    Fail    'fabricNodes information did not match'

Edit LIG
    [Arguments]     ${lig}  ${li}   ${LLDPIP}   ${ltlv} ${rtlv}
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    Log to console and logfile    ${body}
    ${lig} =        Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =   Fusion Api Edit LIG body=${body}        uri=${lig_uri}
    ${task} =   Wait For Task   ${resp}     120s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response      ${task}     ${valDict}
    Perform an Update From Group    ${li}   120 min     1 min
    ValidateLI LLDP Ip Address  ${li}   ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV  ${li}   ${ltlv} ${rtlv}

ValidateLI LLDP Ip Address
    [Arguments]     ${li}   ${LLDPIP}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =   Fusion Api Get Li   ${li_uri}
    ${es} =     Get From Dictionary     ${resp} ethernetSettings
    ${ip} =     Get From Dictionary     ${es}   lldpIpv4Address
    ${status} = Should Be Equal ${ip}   ${LLDPIP}
    run keyword if  '${status}'=='False'    Fail    "LLDP Ip Address is not calculated in correct manner"

ValidateLI TaggedLLDP and RICH TLV
    [Arguments]     ${li}   ${ltlv} ${rtlv}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to Console     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${LLDPTLV} =    Get From Dictionary     ${es}   enableTaggedLldp
    ${RichTLV} =    Get From Dictionary     ${es}   enableRichTLV
    Should Be Equal As Strings  ${ltlv} ${LLDPTLV}
    Should Be Equal As Strings  ${rtlv} ${RichTLV}

Get IC
    [Arguments]     ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log to Console     ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${ics}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \   Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}
    Log to Console     ${ic}

Validate Interconnects
    [Arguments]     ${ICM_NAME}     ${ltlv}     ${rtlv}     ${LLDPIP}
    Log to console and logfile    Validating Interconnects for LLDP and taggedTLV and RichTLV flags
    ${ic} =     Get IC      ${ICM_NAME}
    ${enableRichTLV} =          Get From IC    ${ic}   enableRichTLV
    ${enableTaggedLldp} =       Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =             Get from IC     ${ic}       lldpIpv4Address
    Should be Equal as Strings    ${enableRichTLV}      ${rtlv}
    Should be Equal as Strings    ${enableTaggedLldp}       ${ltlv}
    Should be Equal as Strings    ${lldpip}     ${LLDPIP}

Perform an Update From Group
    [Arguments]     ${li}=${LE}-${LIG1} ${timeout}=5 min    ${interval}=15s
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =       Fusion Api Update from group    ${li_uri}
    ${task} =       Wait For Task   ${resp}     ${timeout}      ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response      ${task}     ${valDict}

Edit LI
    [Arguments]     ${li}   ${li_set1}  ${LLDPIP}   ${ltlv}     ${rtlv}
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${body} =   Build LI body   ${li_set1}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =   Fusion Api Get Li   ${li_uri}
    Log to Console   ${resp}
    ${es} =     Get From Dictionary     ${resp} ethernetSettings
    ${uri} =    Get From Dictionary     ${es}       uri
    ${id} =     Get From Dictionary     ${es}       id
    Log to Console     ${id}
    Set to Dictionary   ${body} id  ${id}
    Log to Console   ${body}
    ${resp1} =  Fusion Api Update LI Ethernet Settings  body=${body}        uri=${li_uri}
    Log to Console   ${resp1}
    ${task} =   Wait For Task   ${resp1}    120s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response      ${task}     ${valDict}
    ValidateLI LLDP Ip Address  ${li}   ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV  ${li}   ${ltlv} ${rtlv}

Build LI body
    [Arguments]     ${liedit}
    ${liedit} =     Copy Dictionary ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableRichTLV} =           Get Variable Value  ${liedit['enableRichTLV']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}


    ${body} =   Fusion Api Create LI Settings Payload   type=${type}
    ...                                         enableRichTLV=${enableRichTLV}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...
    [Return]    ${body}

Build SelectiveInterconnects SPP body

    [Arguments]     ${li_spp}    ${selectiveinterconnecturis}
    ${liedit} =     Copy Dictionary ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${ethernetActivationDelay} =              Get Variable Value  ${li_spp['ethernetActivationDelay']}
    ${ethernetActivationType} =              Get Variable Value  ${li_spp['ethernetActivationType']}
    ${fcActivationDelay} =              Get Variable Value  ${li_spp['fcActivationDelay']}
    ${fcActivationType} =              Get Variable Value  ${li_spp['fcActivationType']}
    ${force} =              Get Variable Value  ${li_spp['force']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${selectiveinterconnecturisvalue}=   Get From List    ${selectiveinterconnecturis}    0
    ${interconnects}=     Get Variable Value  ${selectiveinterconnecturisvalue['interconnects']}





#   ${body} =   Fusion Api Create LI spp Body   command=${command}
#   ...                                         ethernetActivationDelay=${ethernetActivationDelay}
#   ...                                         ethernetActivationType=${ethernetActivationType}
#   ...                                         fcActivationDelay=${fcActivationDelay}
#   ...                                         fcActivationType=${fcActivationType}
#   ...                                         force=${force}
#   ...                                         sppUri=${sppUri}
#   ...
    @{body} =     Create Dictionary

    Append to List    @{body}    ${sppUri}
    Append to List    @{body}    ${command}
    Append to List    @{body}    ${interconnects}
    Append to List    @{body}    ${force}
    Append to List    @{body}    ${ethernetActivationType}
    Append to List    @{body}    ${ethernetActivationDelay}
    Append to List    @{body}    ${fcActivationType}
    Append to List    @{body}    ${fcActivationDelay}

#   ${body} =   fusion_api_create_li_spp_body_active    sppUri=${sppUri}
#   ...                                         command=${command}
#   ...                                         interconnects=${interconnects}
#   ...                                         force=${force}
#   ...                                         ethernetActivationType=${ethernetActivationType}
#   ...                                         ethernetActivationDelay=${ethernetActivationDelay}
#   ...                                         fcActivationType=${fcActivationType}
#   ...                                         fcActivationDelay=${fcActivationDelay}
#   ...
    [Return]    @{body}


SSH to host and ping x
    [Documentation]        SSH's to a given host, then pings an IP from that host
    [Arguments]        ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}
    ${Output}=    Execute Command    ping -c 4 ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    ttl=
    Close All Connections

Add LIG from variable
    [Documentation]     Adds an LIG to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${ligx}
    Log to Console     Adding LIG ${ligx}
    ${ligx} =   Copy Dictionary ${ligs['${ligx}']}

    ${name} =                       Get Variable Value  ${ligx['name']}
    ${enclosureIndexes} =           Get Variable Value  ${ligx['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${ligx['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${ligx['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${ligx['fcoeSettings']}
    ${internalNetworkUris} =        Get Variable Value  ${ligx['internalNetworkUris']}
    ${interconnectBaySet} =         Get Variable Value  ${ligx['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${ligx['interconnectMapTemplate']}
    ${qosConfiguration} =           Get Variable Value  ${ligx['qosConfiguration']}
    ${redundancyType} =             Get Variable Value  ${ligx['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${ligx['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${ligx['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${ligx['snmpConfiguration']}
    ${uplinkSets} =                 Get Variable Value  ${ligx['uplinkSets']}
    #${uplinkSets} =    Copy List   ${ligx['uplinkSets']}
    ${l} =  Get Length  ${uplinkSets}


    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
    \   Run Keyword If  '${networkType}' == 'FibreChannel'  Continue For Loop
    #\  ${networkUris} =    Get FCoE Uris   ${networks}
    #\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    #\   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \   ${networkUris} =    Get Ethernet URIs   ${networks}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris     ${networkUris}
    \   ${nativeNetworkUri} =   Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri    ${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]} nativeNetworkUri     ${nativeNetworkUri}


    Log to Console   ${uplinkSets}
    ${body} =   Fusion Api Create LIG Payload   name=${name}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                         interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                         uplinkSets=${uplinkSets}

    ${resp} =   Fusion Api Create LIG   ${body}
    ${task} =   Wait For Task   ${resp}     60s    2s
    ${liguri} =     Get From Dictionary ${task['associatedResource']}   resourceUri
    [Return]    ${resp}

#FTS
    #Set Log Level  DEBUG
    #Get VM IP   ${VM}
    #First Time Setup                   password=hpvse123

Test Specific Setup
    Set Log Level   TRACE
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile  [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${users} =  Get Variable Value  ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =  Get Variable Value    ${ethernet_networks}
    Run Keyword If  ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable  ${ethernet_networks}
    #${ethernet_ranges} =   Get Variable Value  ${ethernet_ranges}
    #Run Keyword If ${ethernet_ranges} is not ${null}       Run Keyword for List    ${ethernet_ranges}  Create Ethernet Range
    #${fc_networks} =   Get Variable Value  ${fc_networks}
    #Run Keyword If ${fc_networks} is not ${null}    Add FC Networks from variable      ${fc_networks}
    #${fcoe_networks} = Get Variable Value  ${fcoe_networks}
    #Run Keyword If ${fcoe_networks} is not ${null}    Add FCoE Networks from variable      ${fcoe_networks}
    #${licenses} =  Get Variable Value  ${licenses}
    #Run Keyword If ${licenses} is not ${null}      Add Licenses from variable      ${licenses}
    #Login all users     ${users}

Run FTS and test-specific setup
    Set Log Level   TRACE
    #FTS
    Test Specific Setup
