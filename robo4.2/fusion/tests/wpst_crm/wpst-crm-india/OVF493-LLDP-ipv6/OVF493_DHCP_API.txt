*** Settings ***
Documentation        Feature Test: OVF493
...                  Covered OVF493 related testcases all modes of lldp addr mode with EG DHCP mode
...
Variables              data_variables.py
Resource                 ../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library
Library                apic.py
Test Setup             KC Load Test Data
Library                Telnet

*** Variables ***
${SSH_PASS}                     hpvse1
${DataFile}            ./OVAData.xml
${APPLIANCE_IP}                    192.168.144.144
${APIC_APPLIANCE_IP}            192.168.146.176
${RTtrue}                    True
${TLtrue}                     True
${RTfalse}                     False
${TLfalse}                     False
${LLDPDisabledIP}

${APIC_HOST}                     192.168.144.116
${APIC_USER}                    admin
${APIC_PASS}                    Welcome@123
${POWER_STATE_OFF}    Off
${POWER_STATE_ON}        On
${enc_serial}        EM1FFFF500
${bay_2}                        2
${FUSION_NIC}                bond0
${FUSION_IP}                15.212.160.153
${FUSION_SSH_USERNAME}        root
${FUSION_SSH_PASSWORD}        hpvse1
${FUSION_PROMPT}            #
${FUSION_TIMEOUT}            10
${State_Power_Off}             Maintenance
${State_Configured}             Configured
${State_Efuse_Off}            Absent
${Value}                    15.212.137.0
${APIC_TOPOLOGY_li_1}                comp/prov-VMware/ctrlr-[Tbird_DVS]-10.10.3.74/hv-host-314
${li_1}                          LE-LIG
${lig_1}                        LIG
${APIC_IPList_disabled_li_1}    15.212.160.80,15.212.137.81
${APIC_IPList_enabled_li_1}         192.168.147.171
${APIC_IPList_enabled_li_1_ipv6}        fe80::d2bf:9cff:feda:7a58
${APIC_IPList_Bay1Off_li_1}        192.168.148.171
${APIC_IPList_Bay1Off_li_1_ipv6}        fe80::5eb9:1ff:fe47:cd0a
${bay_1}             3
${ICM_1}                     EM1FFFF500, interconnect 3
${ICM_2}                     EM1FFFF500, interconnect 6
${host}             192.168.146.176
${user_name}        Administrator
${password}         12iso*help
${Verify LI lldpaddrmode}    IPV4
${defaultIpmode}            IPV4
${lldpipv6addr}    IPV6
${lldpbothaddrmode}    BOTH_IPV4_IPV6
${enablemode}    enablelldp
${disablemode}    disablelldp
${efusemode}    efuse
${poweroffmode}    poweroff

*** Test Cases ***
00 Appliance LogIn
    [Documentation]    Login Appliance
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${users} =    Get Variable Value   ${users}
    Run Keyword If  ${users} is not ${null}    Add Users from variable              ${users}
    ${ethernet_networks} =    Get Variable Value    ${ethernet_networks1}
    Run Keyword If    ${ethernet_networks1} is not ${null}    Add Ethernet Networks from variable    ${ethernet_networks1}


01 Create LIG
    #Create LIG, create enclosure group and import enclosure
    [Documentation]    Create LIG
    Log to console    Create LIG group
    ${body} =   Build LIG body    ${ligs_tbird_SE_Multi_LIG['lig1']}
    Log to console        ${body}
    ${resp} =     Fusion Api Create LIG    ${body}
    Log to console    Create LIG group
    Log to console    \n
    Log to console        ${resp}
    ${task} =    Wait For Task    ${resp}     60s    2s
    Log to console        ${task}
    Log to console    Created LIG successfully

02 Add Enclosure Group from variable
    [Documentation]    Add Enclosure Group from variable
    Create EG        ${enc_group_tbird_SE_dhcp}

03 Create LE
    [Documentation]    Create LE
    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    ${les} =    Get Variable Value    ${les_tbird_SE_Multi_LIG}
    Log to console and logfile    \n\n${les}
    Run Keyword If    ${les} is not ${null}                    Run Keyword for List    ${les}      Add Logical Enclosure from variable

    Wait Until Keyword Succeeds    1200 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_On}
    Wait Until Keyword Succeeds    1200 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Power_On}

04 Create ServerProfiles
    [Documentation]    Create ServerProfiles
    #Create server profile and ping blade
    Power off ALL servers
    ${profiles} =    Copy List    ${server_profiles_tbird_Multi_LIG}
    Add Server Profiles from variable    ${profiles}
    Power on server      EM1FFFF500, bay 4
    Log to console and logfile      Waiting 10 minutes for server to boot...

OVF493_TC_API_01 Default values Verify LIG
    [Documentation]    Default values Verify LIG
   Verify LIG lldpaddrmode    ${lig_1}    ${defaultIpmode}
   ValidateLIG TaggedLLDP and RICH TLV    ${lig_1}    ${RTfalse}
   ValidateLI TaggedLLDP and RICH TLV    ${li_1}    ${RTfalse}

OVF493_TC_API_2,OVF493_TC_API_34 First LIG-Edit LIG-lldp ipv4addrmode -EnableTaggedLldp - Update from Group - Validate LLDP Ip Address
    [Documentation]    Edit LIG-UFG in LI-Ipv4-check for lldp packets
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligT']}    ${li_1}    ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_2,OVF493_TC_API_34 Validation-After EDit LIG-UFG-ipv4-validateLLDPAddress
    [Documentation]    After EDit LIG-UFG-ipv4-validateLLDPAddress
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Verify LI lldpaddrmode    ${li_1}    ${Verify LI lldpaddrmode}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}

OVF493_TC_API_38 Wireshark validation after enabling lldp-LIG-ipv4 mode
    [Documentation]    Wireshark validation-ipv4-afterUFG
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}

OVF493_TC_API_40 Leaf validation after enabling lldp-LIG-ipv4 mode
    [Documentation]    Leaf validtaion-ipv4-afterUFG
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"


OVF493_TC_API_37 Edit LIG-ipv4 mode -DisableTaggedLldp - Update from Group - Validate LLDP Ip Address
    [Documentation]    Edit LIG-ipv4-disableLLDP-UFG-ValidateIPaddress
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligF']}    ${li_1}    ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 Validation-Validate lldp IP Address in LI-ipv4 mode-after UFG-Disabling LLDP tagging
    [Documentation]    Validation-Validate lldp IP Address in LIG-ipv4 mode-after Disabling LLDP tagging
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    #Validation-Validate lldp IP Address in LIG after Disabling LLDP tagging
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}

OVF493_TC_API_37 Validate Master potash bay ip in Leaf - ipv4 mode - disabled lldp-After Edit LIG,UFG
    [Documentation]    Validate Master potash bay ip-ipv4 mode-disabled lldp cases-LIG-UFG
    # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 seconds
    ${ipv4_addr} =    Master potash bay ipv4    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list}     ${ipv4_addr}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}    ${ip_addr_list}    ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

OVF493_TC_API_3,OVF493_TC_API_35 Edit LIG ipv6 addr mode -EnableTaggedLldp - Update from Group - Validate LLDP Ip Address
    [Documentation]    Edit LIG-ipv6mode-UFG-ValidateLLDP
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligTipv6']}    ${li_1}    ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Verify LIG lldpaddrmode    ${lig_1}    ${lldpipv6addr}
    Verify LI lldpaddrmode    ${li_1}    ${lldpipv6addr}


OVF493_TC_API_3,OVF493_TC_API_35 Validation-After EDit LIG-UFG-ipv6-validateLLDPAddress
    [Documentation]    Edit LIG-ipv6mode-UFG-ValidateLLDP
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address        ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6        ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6        ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_39 Wireshark validation after enabling lldp-LIG-ipv6 mode
    [Documentation]    Wireshark validation-ipv6-afterUFG
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_40 Leaf validation after enabling lldp-LIG-ipv6 mode
    [Documentation]    Leaf validtaion-ipv6-afterUFG
    # Validation APIC and Leaf validation
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_IPv6_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_37 Edit LIG- ipv6 addr mode -DisableTaggedLldp - Update from Group - Validate LLDP Ip Address-ipv6
    [Documentation]    Edit LIG-ipv6addrmode-DisableTaggedLldp-UFG
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligFipv6']}    ${li_1}    ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    # Validation-Validate lldp IP Address in LIG after Disabling LLDP tagging

 OVF493_TC_API_37 Validation-Validate lldp IP Address in LIG-ipv6 mode-after UFG-Disabling LLDP tagging
     [Documentation]    Validation-Validate lldp IP Address in LIG-ipv6 mode-after Disabling LLDP tagging
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 LeafValidate Master potash bay ip - ipv6 mode - disabled lldp
     [Documentation]    Validate Master potash bay ip-ipv6 mode-disabled lldp cases-LIG-UFG
     # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 seconds
    ${ipv6_addr} =    Master potash bay ipv6    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list} ${ipv6_addr}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}    ${ip_addr_list}    ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

OVF493_TC_API_4,OVF493_TC_API_36 First LIG-Edit LIG both ipv6 and ipv4 addr mode -EnableTaggedLldp - Update from Group - Validate LLDP Ip Address
    [Documentation]    Edit LIG-ipv6andipv4modes-UFG-ValidateLLDP
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligTboth']}    ${li_1}    ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    Verify LIG lldpaddrmode    ${lig_1}    ${lldpbothaddrmode}
    Verify LI lldpaddrmode    ${li_1}    ${lldpbothaddrmode}


OVF493_TC_API_4,OVF493_TC_API_36 Validation-After EDit LIG-UFG-both-validateLLDPAddress
    [Documentation]    Edit LIG-bothmode-UFG-ValidateLLDP
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address        ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6        ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6        ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_38,OVF493_TC_API_39 Wireshark validation after enabling lldp-LIG-both ipv4 ipv6 mode
    [Documentation]    Wireshark validation-both modes-afterUFG
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}        ${LLDPEnabledIP_li_1}     ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_40 Leaf validation after enabling lldp-LIG-both ipv4 ipv6 mode
    [Documentation]    Leaf validtaion-bothmodes-afterUFG
    # Validation APIC and Leaf validation
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_37 Edit LIG both ipv6 and ipv4 addr mode -DisableTaggedLldp - Update from Group - Validate LLDP Ip Address
    [Documentation]    Edit LIG-ipv6andipv4mode-DisableTaggedLldp-UFG from LI
    Edit LIG    ${edit_ligs_tbird_SE_LIG['ligFboth']}    ${li_1}    ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_37 Validation-Validate lldp IP Address in LI,interconnects-both modes- After UFG-Disabling LLDP tagging
    [Documentation]    Validation-Validate lldp IP Address in LI,interconnects-both modes- After UFG-Disabling LLDP tagging
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}

OVF493_TC_API_37 Validate Master potash bay ip in Leaf - both ipv4 ipv6 mode-disabledlldp-Edit LIG-UFG
    [Documentation]    Validate Master potash bay ip-bothmodes-disabled lldp cases-LIG-UFG in LI
    # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 seconds
    ${ipv4_addr} =    Master potash bay ipv4    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list} ${ipv4_addr}
    Log to console and logfile    ${ip_addr_list}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}  ${ip_addr_list}  ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_5 Edit LI- EnableTaggedLldp-lldpipv4addrmode- Validate LI LLDP Ip Address
    [Documentation]    Edit LI-EnableTaggedLldp-lldpipv4addrmode- Validate LI LLDP Ip Address
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set1}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify LI lldpaddrmode    ${li_1}    ${Verify LI lldpaddrmode}


OVF493_TC_API_5 Validation-After EDit LI-ipv4-validateLLDPAddress
    [Documentation]    Validation-After EDit LI-ipv4-validateLLDPAddress
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}        ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}        ${TLtrue}    ${LLDPEnabledIP_li_1}

OVF493_TC_API_38 Wireshark validation after enabling lldp-LI-ipv4 mode
     [Documentation]     Wireshark validation after enabling lldp in LI with ipv4 mode
     # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}

OVF493_TC_API_40 Leaf validation after enabling lldp-LI-ipv4 mode
     [Documentation]      Leaf validation after enabling lldp in LI-ipv4 mode
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}



OVF493_TC_API_37 Edit LI-DisableTaggedLldp-ipv4 mode - Validate LLDP Ip Address
    [Documentation]      Edit LI-DisableTaggedLldp-ipv4 mode-Validate LLDP Ip Address
    #Editing the First Logical Interconnect-LE-LIG for LLDP Disabled
    Edit LI        ${li_1}    ${li_set3}        ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}



OVF493_TC_API_37 Validation-Validate lldp IP Address in LI,after Edit LI-ipv4-Disable LLDP
    [Documentation]        Validation-Validate lldp IP Address in LI,after Edit LI-ipv4-Disable LLDP
    # Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}

OVF493_TC_API_37 Validate Master potash bay ip in Leaf-ipv4 mode -disabled lldp-Edit LI
    [Documentation]    Validate Master potash bay ip in Leaf-ipv4 mode -disabled lldp-EditLI
    # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 second
    ${ipv4_addr} =    Master potash bay ipv4    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list} ${ipv4_addr}
    Log to console and logfile    ${ip_addr_list}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}  ${ip_addr_list}  ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"


OVF493_TC_API_6 Edit LI-Ipv6 mode-EnableTaggedLldp - Validate LLDP Ip Address
    [Documentation]    Edit LI -Ipv6 mode-EnableTaggedLldp - Validate LLDP Ip Address
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set5}        ${TLtrue}
    Verify LI lldpaddrmode    ${li_1}    ${lldpipv6addr}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Validate Interconnects IPv6


 OVF493_TC_API_6 Validation-After EDit LI-ipv6-validateLLDPAddress
    [Documentation]    Validation-After EDit LI-ipv6-validateLLDPAddress
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_39 Wireshark validation after enabling lldp-LI-ipv6 mode
    [Documentation]    Wireshark validation after enabling lldp-LI-ipv6 mode
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_40 Leaf validation after enabling lldp-LI-ipv6 mode
    [Documentation]    Leaf validation after enabling lldp-LI-ipv6 mode
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_IPv6_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 Edit LI-Ipv6mode-DisableTaggedLldp - Validate LLDP Ip Address
    [Documentation]    Edit LI-Ipv6mode-DisableTaggedLldp - Validate LLDP Ip Address
    #Editing the First Logical Interconnect-LE-LIG for LLDP Disabled
    Edit LI        ${li_1}    ${li_set6}        ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_37 Validation-Validate lldp IP Address in LI,after Edit LI-ipv6-Disable LLDP
    [Documentation]        Validation-Validate lldp IP Address in LI,after Edit LI-ipv6-Disable LLDP
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    # Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 Validate Master potash bay ip in Leaf - ipv6 mode - disabled lldp-Edit LI
    [Documentation]      Validate Master potash bay ip in Leaf - ipv6 mode - disabled lldp
    # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 seconds
    #${ip_addr_list} =    Master potash bay ipv6    ${li_1}
    ${ipv6_addr} =    Master potash bay ipv6    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list} ${ipv6_addr}
    Log to console and logfile    ${ip_addr_list}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}    ${ip_addr_list}    ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"



OVF493_TC_API_7 Edit LI - both ipv4 ipv6 mode-EnableTaggedLldp - Validate LLDP Ip Address
    [Documentation]    Edit LI - both ipv4 ipv6 mode-EnableTaggedLldp - Validate LLDP Ip Address
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set7}        ${TLtrue}
    Verify LI lldpaddrmode    ${li_1}    ${lldpbothaddrmode}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_7 Validation-After EDit LI-both ipv4ipv6-validateLLDPAddress
    [Documentation]    Validation-After EDit LI-both ipv4 ipv6-validateLLDPAddress
     Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Validate Interconnects            ${ICM_1}        ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}        ${TLtrue}    ${LLDPEnabledIP_li_1}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}


OVF493_TC_API_38,OVF493_TC_API_39 Wireshark validation after enabling lldp-LI-both ipv4 ipv6 mode
    [Documentation]     Wireshark validation after enabling lldp-LI-both ipv4 ipv6 mode
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}        ${LLDPEnabledIP_li_1}     ${LLDPEnabledIP_IPv6_li_1}


OVF493_TC_API_40 Leaf validation after enabling lldp-LI-both ipv4 ipv6 mode
    [Documentation]    Leaf validation after enabling lldp-LI-both ipv4 ipv6 mode
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_37 Edit LI with both ipv4 ipv6 mode-DisableTaggedLldp-Validate LLDP Ip Address
    [Documentation]    Edit LI with both ipv4 ipv6 mode-DisableTaggedLldp-Validate LLDP Ip Address
    #Editing the First Logical Interconnect-LE-LIG for LLDP Disabled
    Edit LI        ${li_1}    ${li_set8}        ${TLfalse}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 Validation-Validate lldp IP Address in LI,after Edit LI-ipv4ipv6bothmodes-Disable LLDP
    [Documentation]        Validation-Validate lldp IP Address in LI,after Edit LI-ipv4ipv6 both modes-Disable LLDP
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Validate Interconnects            ${ICM_1}        ${TLfalse}    ${LLDPDisabledIP}
    Validate Interconnects            ${ICM_2}        ${TLfalse}    ${LLDPDisabledIP}
    # Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPDisabledIP}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_37 Validate Master potash bay ip in Leaf-disabled lldp-Edit LI-both ipv4 ipv6 mode
    [Documentation]    Validate Master potash bay ip in Leaf - both ipv4 ipv6 mode - disabled lldp
    # Adding sleep since there is some time involved for the ip changes to reflect in interconnects
    Sleep    8 minutes 10 seconds
    ${ipv4_addr} =    Master potash bay ipv4    ${li_1}
    ${ip_addr_list} =   Create List
    Append To List  ${ip_addr_list} ${ipv4_addr}
    Log to console and logfile    ${ip_addr_list}
    ${status}=    leaf_validate    @{Testdata.SE_switches_lldp_disabled_cases}  ${ip_addr_list}  ${disablemode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"


OVF493_TC_API_12 Poweroff Setup-Enable Tagged LLDP-IPV4 addr mode at LI, before Power off Action
    [Documentation]    Poweroff Setup-Enable Tagged LLDP-IPV4 addr mode at LI, before Power off Action
    #Log to Console    Enabling Tagged LLDP at LI before Power off Action
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set1}        ${TLtrue}
    Verify LI lldpaddrmode    ${li_1}    ${Verify LI lldpaddrmode}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    #Validate Interconnect

OVF493_TC_API_12 Verify ipv4 addr in interconnects- LLDP enabled-ipv4 mode- before power off
    [Documentation]    Verify ipv4 addr in interconnects- LLDP enabled-ipv4 mode- before power off
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}     ${LLDPEnabledIP_li_1}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_12 Poweroff the Interconnect - ipv4 mode and verify the Power state of the interconnects
    [Documentation]    Poweroff the Interconnect - ipv4 mode and verify the Power state of the interconnects
    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
OVF493_TC_API_12 Verify ipv4 address - LI,interconnects - after poweroff
    [Documentation]    Verify ipv4 address - LI,interconnects - after poweroff
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${RECALCIP_li_1} =    Get ICM IPV4    ${ICM_2}
    ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    #Validate Interconnect
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}

OVF493_TC_API_12 Wireshark Validation-ipv4 mode-LI after Poweroff
    [Documentation]    Wireshark Validation-ipv4 mode-LI after Poweroff
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_li_1} =    Get ICM IPV4    ${ICM_2}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${RECALCIP_li_1}


OVF493_TC_API_12 leaf Validation-ipv4 mode-LI after Poweroff
    [Documentation]    leaf Validation-ipv4 mode-LI after Poweroff
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${poweroffmode}
    run keyword if    '${status}' == 'False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_12 Power_on interconnect and wait for the interconnects to get configured
    [Documentation]    Power_on interconnect and wait for the interconnects to get configured
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

OVF493_TC_API_12 After Power on-Verify ipv4 addr on LI,ICM
    [Documentation]    After Power on-Verify ipv4 addr on LI,ICM
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Sleep    60
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}

OVF493_TC_API_12 Wireshark uplink Validation - ipv4 mode - After Poweron - LI
    [Documentation]    Wireshark uplink Validation - ipv4 mode - After Poweron - LI
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    #APIC Validations after enabled the LLDP

OVF493_TC_API_12 Leaf Switch Validation - ipv4 mode - After Power on - LI
    [Documentation]    Leaf Switch Validation - ipv4 mode - After Power on - LI
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_13 Poweroff Setup - Enable Tagged LLDP- IPV6 addr mode at LI, before Power off Action
    [Documentation]
    Log to Console    Enabling Tagged LLDP at LI before Power off Action
    Edit LI        ${li_1}    ${li_set5}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    #Validate Interconnect
OVF493_TC_API_13 Verify ipv6 addr in interconnects - LLDP enabled - ipv6 addr mode- before power off
    [Documentation]    Verify ipv6 addr in interconnects - LLDP enabled - ipv6 addr mode- before power off
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_13 Poweroff the Interconnect - ipv6 mode and verify the Power state of the interconnects
    [Documentation]    Poweroff the Interconnect - ipv6 mode and verify the Power state of the interconnects
    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
OVF493_TC_API_13 Verify ipv6 address of LI,interconnects - after poweroff - ipv6 mode
    [Documentation]    Verify ipv6 address of LI,interconnects - after poweroff - ipv6 mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    #${RECALCIP_li_1} =    Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_2}
    #ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${RECALCIP_IPv6_li_1}
    #Validate Interconnect
    #Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${RECALCIP_IPv6_li_1}

OVF493_TC_API_13 Wireshark Validation -ipv6 addr mode- after Poweroff
    [Documentation]    Wireshark Validation -ipv6 addr mode- after Poweroff
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_2}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${RECALCIP_IPv6_li_1}
    #Sleep    2 minutes 10 seconds

OVF493_TC_API_13 leaf Validation-ipv6 addr mode- after Poweroff
    [Documentation]    leaf Validation-ipv6 addr mode- after Poweroff
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${poweroffmode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_13 Power_On interconnect - ipv6 mode and wait for the interconnects to get configured
    [Documentation]    Power_On interconnect - ipv6 mode and wait for the interconnects to get configured
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

OVF493_TC_API_13 After Power on,Verify ipv6 addr on LI,ICM - ipv6 mode
    [Documentation]    After Power on,Verify ipv6 addr on LI,ICM - ipv6 mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Sleep    60
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_13 Wireshark uplink Validation- ipv6 mode - After interconnect is powered on
    [Documentation]    Wireshark uplink Validation- ipv6 mode - After interconnect is powered on
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120


OVF493_TC_API_13 Leaf Switch Validation- ipv6 mode - After interconnect is powered on
    [Documentation]    Leaf Switch Validation- ipv6 mode - After interconnect is powered on
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_14 Poweroff Setup - Enable Tagged LLDP - Both IPV4 IPV6 addr mode- LI, before Power off Action
    [Documentation]    Poweroff Setup - Enable Tagged LLDP - Both IPV4 IPV6 addr mode- LI, before Power off Action
    Log to Console    Enabling Tagged LLDP at LI before Power off Action
    Edit LI        ${li_1}    ${li_set7}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify LI lldpaddrmode    ${li_1}    ${lldpbothaddrmode}

    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    #Validate Interconnect
OVF493_TC_API_14 Verify ipv4 and ipv6 addr in interconnects- LLDP enabled - both addr mode-before Poweroff
    [Documentation]    Verify ipv4 and ipv6 addr in interconnects- LLDP enabled - both addr mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}     ${LLDPEnabledIP_li_1}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_14 Poweroff the Interconnect-both addr mode-Verify the Power state of the interconnects
    [Documentation]    Poweroff the Interconnect-both addr mode-Verify the Power state of the interconnects
    POWER OFF ICM    ${ICM_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_OFF}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    Sleep    1 minutes 30 seconds
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging
OVF493_TC_API_14 Verify ipv4 and ipv6 address LI,interconnects after poweroff- both modes
    [Documentation]    Verify ipv4 and ipv6 address LI,interconnects after poweroff- both modes
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${RECALCIP_li_1} =    Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_2}
    ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${RECALCIP_IPv6_li_1}
    #Validate Interconnect
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${RECALCIP_IPv6_li_1}

OVF493_TC_API_14 Wireshark Validation both modes after Poweroff
    [Documentation]    Wireshark Validation both modes after Poweroff
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_li_1} =    Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_2}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}        ${RECALCIP_li_1}     ${RECALCIP_IPv6_li_1}
    #Sleep    2 minutes 10 seconds

OVF493_TC_API_14 leaf Validation both modes after Poweroff
    [Documentation]    leaf Validation both modes after Poweroff
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${poweroffmode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Power_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_14 Power_on interconnect and wait for the interconnects to get configured - both modes
    [Documentation]    Power_on interconnect and wait for the interconnects to get configured - both modes
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    POWER ON ICM        ${ICM_1}
    Sleep    60
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

OVF493_TC_API_14 After Power on,Verify ipv4 and ipv6 addr on LI,ICM - both modes
    [Documentation]    After Power on,Verify ipv4 and ipv6 addr on LI,ICM - both modes
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Sleep    60
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_14 Wireshark uplink Validation - both ipv4 ipv6 modes - After interconnect is powered on
    [Documentation]    Wireshark uplink Validation - both ipv4 ipv6 modes - After interconnect is powered on
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120

OVF493_TC_API_14 Leaf Switch Validation - both ipv4 ipv6 modes - After interconnect is powered on
    [Documentation]    Leaf Switch Validation - both ipv4 ipv6 modes - After interconnect is powered on
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_15 EFUSE_ON interconnect-LI lldpenabled- ipv4 mode and verify the Ip
    [Documentation]    EFUSE_ON interconnect-LI lldpenabled- ipv4 mode and verify the Ip
    Log to Console    Enabling Tagged LLDP at LI before EfuseOn Action
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set1}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify LI lldpaddrmode    ${li_1}    ${Verify LI lldpaddrmode}


OVF493_TC_API_15 Verify ipv4 addr in LI, interconnects- LLDP enabled-before Efuse-ipv4 mode
    [Documentation]    Verify ipv4 addr in LI, interconnects- LLDP enabled-before Efuse-ipv4 mode
    #Validate Interconnect
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}     ${LLDPEnabledIP_li_1}

OVF493_TC_API_15 Perform Efuse on ICM-ipv4 mode
    [Documentation]    Perform Efuse on ICM-ipv4 mode
    EFUSE ON ICM        ${bay_1}   ${enc_serial}    ${ICM_1}
    Sleep    3 minutes 30 seconds
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Efuse_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging

OVF493_TC_API_15 Verify Recal ip in LI,interconencts-ipv4 mode after Efuse on
    [Documentation]    Verify Recal ip in LI,interconencts-ipv4 mode after Efuse on
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${RECALCIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}

OVF493_TC_API_15 Wireshark validation- ipv4 mode - after Efuse on
    [Documentation]    Wireshark validation- ipv4 mode - after Efuse on
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_li_1} =     Get ICM IPV4    ${ICM_2}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${RECALCIP_li_1}


OVF493_TC_API_15 Leaf validate-ipv4 after Efuse on
    [Documentation]    Leaf validate-ipv4 after Efuse on
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${efusemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_18 EFUSE_OFF interconnect-ipv4 mode and verify the Ip being updated
    [Documentation]    EFUSE_OFF interconnect and verify the Ip being updated
    Log to Console    Enabling Tagged LLDP at LI before EfuseON Action
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    EFUSE OFF ICM       ${bay_1}    ${enc_serial}    ${ICM_1}
    Sleep   1 minutes 1 seconds
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_18 Verify ipv4 addr-ipv4 mode after Efuse off
    [Documentation]    Verify ipv4 addr after Efuse off
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    #${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    #ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}

OVF493_TC_API_18 Wireshark Validation-ipv4 mode-after efuse off
    [Documentation]   Wireshark Validation-ipv4 mode-after efuse off
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}
    Sleep    2 minutes 10 seconds

OVF493_TC_API_18 Leaf validation - ipv4 mode after efuse off
    [Documentation]    Leaf validation - ipv4 mode after efuse off
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

OVF493_TC_API_16 EFUSE_ON interconnect-LI lldpenabled- ipv6 mode and verify the Ip
    [Documentation]    EFUSE_ON interconnect-LI lldpenabled- ipv6 mode and verify the Ip
    Log to Console    Enabling Tagged LLDP at LI before EfuseOn Action
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set5}        ${TLtrue}
    Verify LI lldpaddrmode    ${li_1}    ${lldpipv6addr}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_16 Verify ipv6 addr in LI, interconnects- LLDP enabled-before Efuse-ipv6 mode
    [Documentation]    Verify ipv6 addr in LI, interconnects- LLDP enabled-before Efuse-ipv6 mode
    #Validate Interconnect
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    #Log to Console    !!!Test Step 5 is completed Successfully!!!

VF493_TC_API_16 Perform Efuse on ICM-ipv6 mode
    [Documentation]    Perform Efuse on ICM-ipv6 mode
    EFUSE ON ICM        ${bay_1}   ${enc_serial}    ${ICM_1}
    Sleep    3 minutes 30 seconds
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Efuse_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging

OVF493_TC_API_16 Verify Recal ip in Li,interconencts-ipv6 mode after efuse on
    [Documentation]    Verify Recal ip in Li,interconencts-ipv6 mode after efuse on
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    #${RECALCIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_2}
    #ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${RECALCIP_IPv6_li_1}
    #Validate Interconnect
    #Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${RECALCIP_IPv6_li_1}
    ##Verifying APIC Level Changes
    #${status}=            APIC LogIn and Validate Topology                  ${APIC_APPLIANCE_IP}          ${apic_admin_credentials}     ${APIC_TOPOLOGY_li_1}      ${APIC_IPList_Bay1Off_li_1}
    #run keyword if    '${status}'=='False'    Fail    'Topology did not match'
    ##${status}=            APIC LogIn and Validate Topology                  ${APIC_APPLIANCE_IP}          ${apic_admin_credentials}     ${APIC_TOPOLOGY_li_1}      ${APIC_IPList_enabled_li_1}
    ##run keyword if  '${status}'=='True'    Fail    'Unwanted topology deducted'

OVF493_TC_API_16 Wireshark validation- ipv6 mode-after efuse on
    [Documentation]    Wireshark validation- ipv6 mode-after efuse on
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_2}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${RECALCIP_IPv6_li_1}

    #APIC Validations after enabled the LLDP&Leaf Validation after  Efuse On
OVF493_TC_API_16 Leaf validate-ipv6- after efuse on
    [Documentation]    Leaf validate-ipv6- after efuse on
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${efusemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_19 EFUSE_OFF interconnect ipv6 mode and verify the Ip being updated
    [Documentation]    EFUSE_OFF interconnect ipv6 mode and verify the Ip being updated
    Log to Console    Enabling Tagged LLDP at LI before EfuseON Action
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    EFUSE OFF ICM       ${bay_1}    ${enc_serial}    ${ICM_1}
    Sleep   1 minutes 1 seconds
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_19 Verify ipv6 addr after efuse off - ipv6 mode
    [Documentation]     Verify ipv6 addr after efuse off - ipv6 mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}


OVF493_TC_API_19 Wireshark Validation-ipv6 mode-after efuse off
    [Documentation]    Wireshark Validation-ipv6 mode-after efuse off
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}

OVF493_TC_API_19 Leaf validation - ipv6 mode after efuse off
    [Documentation]      Leaf validation - ipv6 mode after efuse off
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    #APIC Validations after enabled the LLDP
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

OVF493_TC_API_17 EFUSE_ON interconnect - LI lldp enabled- both ipv4 ipv6 mode and verify the Ip4,ipv6 addr
    [Documentation]    EFUSE_ON interconnect - LI lldp enabled- both ipv4 ipv6 mode and verify the Ip4,ipv6 addr
    Log to Console    Enabling Tagged LLDP at LI before EfuseOn Action
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set7}        ${TLtrue}
    Verify LI lldpaddrmode    ${li_1}    ${lldpbothaddrmode}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

 OVF493_TC_API_17 Verify ipv4ipv6 both addr in LI, interconnects-LLDP enabled-before Efuse-both mode
    [Documentation]    Verify ipv4 addr in LI, interconnects-LLDP enabled-before Efuse-both mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}     ${LLDPEnabledIP_li_1}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    #Log to Console    !!!Test Step 5 is completed Successfully!!!

VF493_TC_API_17 Perform Efuse on ICM-both mode
    [Documentation]    Perform Efuse on ICM-both mode
    EFUSE ON ICM        ${bay_1}   ${enc_serial}    ${ICM_1}
    Sleep    3 minutes 30 seconds
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Efuse_Off}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Validation-Validate lldp IP Address in LI,after Enabling LLDP tagging

OVF493_TC_API_17 Verify Recal ip in Li,interconnects both ipv4 ipv6 mode after efuse on
    [Documentation]      Verify Recal ip in Li,interconnects both ipv4 ipv6 mode after efuse on
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${RECALCIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_2}
    ValidateLI LLDP Ip Address        ${li_1}    ${RECALCIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${RECALCIP_IPv6_li_1}
    #Validate Interconnect
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${RECALCIP_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${RECALCIP_IPv6_li_1}

OVF493_TC_API_17 Wireshark validation - both ipv4 ipv6 mode-after efuse on
    [Documentation]      Wireshark validation - both ipv4 ipv6 mode-after efuse on
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${RECALCIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${RECALCIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_2}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}        ${RECALCIP_li_1}     ${RECALCIP_IPv6_li_1}
    Sleep    2 minutes 10 seconds


OVF493_TC_API_17 Leaf validate-both modes- after efuse on
    [Documentation]    Leaf validate-both modes- after efuse on
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_2}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${efusemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_20 EFUSE_OFF interconnect both ipv4 ipv6 mode and verify the Ip being updated
    [Documentation]    EFUSE_OFF interconnect both ipv4 ipv6 mode and verify the Ip being updated
    Log to Console    Enabling Tagged LLDP at LI before EfuseON Action
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    EFUSE OFF ICM       ${bay_1}    ${enc_serial}    ${ICM_1}
    Sleep   1 minutes 1 seconds
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Sleep    120
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_20 Verify ipv4,ipv6 addr after efuse off - both mode
    [Documentation]    Verify ipv4,ipv6 addr after efuse off - both mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

OVF493_TC_API_20 Wireshark Validation-both mode-after efuse off
    [Documentation]     Wireshark Validation-both mode-after efuse off
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}    ${LLDPEnabledIP_IPv6_li_1}


OVF493_TC_API_20 Leaf validation -both mode after efuse off
    [Documentation]    Leaf validation -both mode after efuse off
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    #APIC Validations after enabled the LLDP
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if    '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"


OVF493_TC_API_65 Enable Tagged LLDP-IPV4 addr mode at LI, before disable downlink
    [Documentation]    Enable Tagged LLDP-IPV4 addr mode at LI, before disable downlink
    #Log to Console    Enabling Tagged LLDP at LI before Power off Action
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set1}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify LI lldpaddrmode    ${li_1}    ${Verify LI lldpaddrmode}
    ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}

OVF493_TC_API_65 Downlink Edit- Disable Ports- ICM1
    [Documentation]    Downlink Edit- Disable Ports- ICM1
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_disable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_disable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   5mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after disabling downlink port
    [Documentation]    Validate Port Status at interconnects after disabling downlink por
    ${port_status}=         Get PortStatus from Ports               ${downlink_disable}
    Should be Equal as Strings    ${port_status}        Unlinked
    Log to console and logfile      \nPort status is '${port_status}' - reflected in correct manner
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Verify ipv4 addr in interconnects- LLDP enabled-ipv4 mode- after disable the downlink Ports
    [Documentation]     Verify ipv4 addr in interconnects- LLDP enabled-ipv4 mode- after disable the downlink Ports
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Sleep    60
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_65 Wireshark uplink Validation - ipv4 mode - After disable downlink Port - LI
    [Documentation]    Wireshark uplink Validation - ipv4 mode - After disable downlink Port - LI
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    #APIC Validations after enabled the LLDP

OVF493_TC_API_65 Leaf Switch Validation - ipv4 mode - After disable downlink Port - LI
    [Documentation]    Leaf Switch Validation - ipv4 mode - After disable downlink Port - LI
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_65 Downlink Edit- Enable Ports-ipv4mode
    [Documentation]   Downlink Edit- Enable Ports-ipv4mode
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_enable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_enable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   2mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after Enable downlink port Edit- ipv4mode
    [Documentation]    Validate Port Status at interconnects after Enable downlink port Edit- ipv4mode
    ${port_status}=         Get PortStatus from Ports               ${downlink_enable}
    Should be Equal as Strings    ${port_status}        Linked
    Log to console and logfile      \nPort status is enabled - reflected in correct manner
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Enable Tagged LLDP- IPV6 addr mode at LI, before before disable downlink
    [Documentation]    Enable Tagged LLDP- IPV6 addr mode at LI, before before disable downlink
    Log to Console    Enabling Tagged LLDP at LI before Power off Action
    #${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    Edit LI        ${li_1}    ${li_set5}        ${TLtrue}
    #Verify LI lldpaddrmode    ${li_1}    ${lldpipv6addr}
    #ValidateLI LLDP Ip Address        ${li_1}    ${LLDPEnabledIP_li_1}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    #Validate Interconnect

OVF493_TC_API_65 Downlink Edit- Disable Ports- ICM1-ipv6mode
    [Documentation]    Downlink Edit- Disable Ports- ICM1-ipv6mode
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_disable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_disable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   2mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after disabling downlink port-ipv6mode
    [Documentation]    Validate Port Status at interconnects after disabling downlink port-ipv6mode
    ${port_status}=         Get PortStatus from Ports               ${downlink_disable}
    Should be Equal as Strings    ${port_status}        Unlinked
    Log to console and logfile      \nPort status is '${port_status}' - reflected in correct manner
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Verify ipv6 addr in interconnects - LLDP enabled - ipv6 addr mode- after disable downlink port-ipv6mode
    [Documentation]    Verify ipv6 addr in interconnects - LLDP enabled - ipv6 addr mode- after disable downlink port-ipv6mode
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    #Validate Interconnects IPv6
    ${LLDPEnabledIP_IPv6_li_1} =    Get ICM IPV6    ${ICM_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Wireshark uplink Validation- ipv6 mode - After disable downlink port-ipv6mode
    [Documentation]    Wireshark uplink Validation- ipv6 mode - After disable downlink port-ipv6mode
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120
    #APIC Validations after enabled the LLDP

OVF493_TC_API_65 Leaf Switch Validation- ipv6 mode - After disable downlink port-ipv6mode
    [Documentation]    Leaf Switch Validation- ipv6 mode - After disable downlink port-ipv6mode
    ${LLDPEnabledIP_li_1} =     Get ICM IPV6    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Downlink Edit- Enable Ports-ipv6mode
    [Documentation]    Downlink Edit- Enable Ports-ipv6mode
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_enable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_enable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   2mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after Enable downlink port Edit- ipv6mode
    [Documentation]    Validate Port Status at interconnects after Enable downlink port Edit- ipv6mode
    ${port_status}=         Get PortStatus from Ports               ${downlink_enable}
    Should be Equal as Strings    ${port_status}        Linked
    Log to console and logfile      \nPort status is enabled - reflected in correct manner
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Enable Tagged LLDP - Both IPV4 IPV6 addr mode- LI, disabling downlink port
    [Documentation]    Enable Tagged LLDP - Both IPV4 IPV6 addr mode- LI, disabling downlink port
    Log to Console    Enabling Tagged LLDP at LI before Power off Action
    Edit LI        ${li_1}    ${li_set7}        ${TLtrue}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    Verify LI lldpaddrmode    ${li_1}    ${lldpbothaddrmode}

    #Verify Interconnect Power state
    Verify Interconnect Power State     ${ICM_1}        ${POWER_STATE_ON}
    Verify Interconnect Power State     ${ICM_2}        ${POWER_STATE_ON}
    #Validate Interconnect

OVF493_TC_API_65 Downlink Edit- Disable Ports- ICM1-Both mode
    [Documentation]    Downlink Edit- Disable Ports- ICM1-Both mode
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_disable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_disable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   2mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after disabling downlink port-Both mode
    [Documentation]    Validate Port Status at interconnects after disabling downlink port-Both mode
    ${port_status}=         Get PortStatus from Ports               ${downlink_disable}
    Should be Equal as Strings    ${port_status}        Unlinked
    Log to console and logfile      \nPort status is '${port_status}' - reflected in correct manner
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}



OVF493_TC_API_65 After disabling downlink port-Both mode -Verify ipv4 and ipv6 addr on LI,ICM - LLDP enabled
    [Documentation]    After disabling downlink port-Both mode -Verify ipv4 and ipv6 addr on LI,ICM - LLDP enabled
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Sleep    60
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    ValidateLI LLDP Ip Address    ${li_1}    ${LLDPEnabledIP_li_1}
    ValidateLI LLDP Ipv6 Address    ${li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_li_1}
    Validate Interconnects Ipv6            ${ICM_1}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}
    Validate Interconnects Ipv6            ${ICM_2}    ${TLtrue}    ${LLDPEnabledIP_IPv6_li_1}

    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds        600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}


OVF493_TC_API_65 Wireshark uplink Validation - both ipv4 ipv6 modes - After disable downlink port
    [Documentation]   Wireshark uplink Validation - both ipv4 ipv6 modes - After disable downlink port
    # Adding sleep since there is some time involved for the ip changes to reflect in switch side
    Sleep    2 minutes 10 seconds
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${LLDPEnabledIP_IPv6_li_1} =     Get ICM IPV6    ${ICM_1}
    Wireshark capture and validate management address TLV against expected both modes              ${host}         ${user_name}        ${password}         ${LLDPEnabledIP_li_1}    ${LLDPEnabledIP_IPv6_li_1}
    Log to Console    !!!Waiting time to perform the leaf validations!!!
    Sleep    120

OVF493_TC_API_65 Leaf Switch Validation - both ipv4 ipv6 modes - After disable downlink port
    [Documentation]    Leaf Switch Validation - both ipv4 ipv6 modes - After disable downlink port
    ${LLDPEnabledIP_li_1} =     Get ICM IPV4    ${ICM_1}
    ${ipaddrlist} =     Create List
    Append To List  ${ipaddrlist}   ${LLDPEnabledIP_li_1}
    ${status}=    leaf_validate   @{Testdata.SE_switches_taggedenabled_li_1_dhcp}    ${ipaddrlist}    ${enablemode}
    run keyword if  '${status}'=='False'    Fail    'Management Ip Address mismatch at Leaf switch"

    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF493_TC_API_65 Downlink Edit- Enable Ports-bothmodes
    [Documentation]    Downlink Edit- Enable Ports-bothmodes
    Fusion Api Login Appliance      ${APPLIANCE_IP}     ${admin_credentials}
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${port_id}=         Get PortId from Ports           ${downlink_enable}
    ${body}=            Build Ports Edit Body           ${port_id}          ${downlink_enable}
    Log         ${body}
    ${resp}=        fusion_api_edit_interconnect_ports          ${body}         ${uri}
    ${task} =       Wait For Task   ${resp}     2mins
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   2mins
    Log to Console  \nDownlink port edit completed

OVF493_TC_API_65 Validate Port Status at interconnects after Enable downlink port Edit- bothmodes
    [Documentation]    Validate Port Status at interconnects after Enable downlink port Edit- bothmodes
    ${port_status}=         Get PortStatus from Ports               ${downlink_enable}
    Should be Equal as Strings    ${port_status}        Linked
    Log to console and logfile      \nPort status is enabled - reflected in correct manner
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    2400 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

*** Keywords ***

KC Load Test Data
    [Documentation]    KC Load Test Data
    Set Log Level    TRACE
    Load Test Data  ${DataFile}

Wireshark capture and validate management address TLV against expected
    [Documentation]    Wireshark capture and validate management address TLV against expected
    [Arguments]     ${host}         ${user_name}        ${password}         ${management_address_expected}
    Telnet.Open Connection          ${host}
    Set Timeout             30 seconds
    Telnet.Login                Administrator       12iso*help          login_prompt=login:         password_prompt=password:
    Telnet.Write            cd C:\\Program Files\\Wireshark
    ${cd}          Telnet.Read
    Log to Console          ${ cd }
    Set Timeout             2 minutes
    Set Prompt              C:\\Program Files\\Wireshark>
    Telnet.Write            tshark.exe -i "New NIC Team" -V -f "ether proto 0x88cc" -c 1
    ${output}         Telnet.Read Until Prompt
    Log to Console          ${ output }
    Telnet.Close All Connections
    ${mgmt_address}=    management_address_output    ${ output }
    Log to Console          ${mgmt_address}
    Should be Equal as Strings          ${mgmt_address}             ${management_address_expected}

Wireshark capture and validate management address TLV against expected both modes
    [Documentation]    Wireshark capture and validate management address TLV against expected both modes
    [Arguments]     ${host}         ${user_name}        ${password}         ${management_address_expected}        ${management_address_expected_ipv6}
    Telnet.Open Connection          ${host}
    Set Timeout             30 seconds
    Telnet.Login                Administrator       12iso*help          login_prompt=login:         password_prompt=password:
    Telnet.Write            cd C:\\Program Files\\Wireshark
    ${cd}          Telnet.Read
    Log to Console          ${ cd }
    Set Timeout             2 minutes
    Set Prompt              C:\\Program Files\\Wireshark>
    Telnet.Write            tshark.exe -i "New NIC Team" -V -f "ether proto 0x88cc" -c 1
    ${output}         Telnet.Read Until Prompt
    Log to Console          ${ output }
    Telnet.Close All Connections
    ${mgmt_address}=    management_address_output_both_modes    ${ output }
    ${mgmt_address_ipv4}=            Get from List     ${mgmt_address}            0
    ${mgmt_address_ipv6}=            Get from List     ${mgmt_address}            1
    #Log to Console          ${mgmt_address}
    Should be Equal as Strings         ${mgmt_address_ipv4}             ${management_address_expected}
    Should be Equal as Strings         ${mgmt_address_ipv6}             ${management_address_expected_ipv6}


Get IC
    [Documentation]    Get IC
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}


Get ICM IPV4
    [Documentation]    Get ICM IPV4
    [Arguments]        ${ICM_NAME}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =    Get IC        ${ICM_NAME}
    ${Ipv4_Address} =    Get Variable Value    ${ic['ipAddressList'][0]['ipAddress']}
    [Return]    ${Ipv4_Address}

Get ICM IPV6
    [Documentation]    Get ICM IPV6
    [Arguments]        ${ICM_NAME}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =    Get IC        ${ICM_NAME}
    ${Ipv6_Address} =    Get Variable Value    ${ic['ipAddressList'][1]['ipAddress']}
    [Return]    ${Ipv6_Address}

Validate Interconnects
    [Documentation]    Validate Interconnects
    [Arguments]        ${ICM_NAME}        ${ltlv}        ${LLDPIP}
    Log to console and logfile    Validating Interconnects for lldpipV4 of ${ICM_NAME}
    ${ic} =     Get IC        ${ICM_NAME}
    ${enableTaggedLldp} =         Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =                Get from IC     ${ic}        lldpIpv4Address
    Should be Equal as Strings    ${enableTaggedLldp}        ${ltlv}
    Should be Equal as Strings    ${lldpip}        ${LLDPIP}
    Log to console and logfile    Actual lldpipV4 <${lldpip}> compared with Expected lldpipV4 <${LLDPIP}> for ${ICM_NAME}

Build SUBNET Body
    [Documentation]    Build SUBNET Body
      [Arguments]       ${subnet}       ${SUBNET_SELECT}
      Log                 "Deba ":${subnet}
      ${subnet_ret}=     Create Dictionary
      :For  ${subnetdetails}  IN   @{subnet}
      \        Log         ${subnetdetails}
      \     ${networkId} =   Get From Dictionary   ${subnetdetails}  networkId
      \        Log            ${networkId}
      \        Log            ${SUBNET_SELECT}
      \        Run Keyword If    '${networkId}'!='${SUBNET_SELECT}'        Continue For Loop
      \        Log             "Deba Matching ":${subnetdetails}
      \        ${subnet_ret}=        Copy Dictionary        ${subnetdetails}
      Log         "Deb Subnet_ret":${subnet_ret}
      [Return]    ${subnet_ret}

Build IPRange Body
    [Documentation]    Build IPRange Body
      [Arguments]       ${ipv4ranges}       ${NETWORK_ID}        ${RANGE_NAME}
      ${subnets}=    Get Subnet        ${NETWORK_ID}
      ${uri}=         Get from Subnet         ${subnets}              uri
      ${ipv4_1}=  Create List
      :For  ${ipv4}  IN   @{ipv4ranges}
      \           ${name} =   Get From Dictionary   ${ipv4}  name
      \           #Log            ${name}
      \              #Log             ${RANGE_NAME}
      \           Run Keyword If    '${name}'!='${RANGE_NAME}'        Continue For Loop
      \              #Log            ${uri}
      \           Set to dictionary            ${ipv4}             subnetUri=${uri}
      \              #Log            ${ipv4}
      \           Append to List    ${ipv4_1}        ${ipv4}
      [Return]   ${ipv4_1}


Get Subnet
    [Documentation]    Get Subnet
    [Arguments]             ${NETWORK_ID}
    ${resp} =   fusion api get ipv4 subnet
    ${subnetcounts} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${subnetcounts}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${subnet} =     Get From List   ${subnetcounts}    ${x}
    \    Exit For Loop If     '${subnet['networkId']}' == '${NETWORK_ID}'
    [Return]    ${subnet}


Get from Subnet
    [Documentation]    Get from Subnet
    [Arguments]     ${subnet_list}       ${element}
    ${return} =     Get From Dictionary     ${subnet_list}            ${element}
    [Return]    ${return}


Create EG Body with Associate Range
    [Documentation]    Adds Enclosure Group to an appliance from a variable which contains a list of dicts with the entire payload and also Associate a Range
    [Arguments]        ${enc_groups}        ${enc_group_name}    ${rangeuri}
    #[Arguments]        ${networks}        ${networkname}    ${NETWORK_ID}
    Log        ${enc_group_name}
    Log        ${enc_groups}
    Log        ${rangeuri}
    Log to console and logfile      Adding ENCLOSURE GROUP
    :FOR    ${enc_group1}    IN    @{enc_groups}
    \        ${enc_group_name1} =        Get From Dictionary        ${enc_group1}        name
    \        Log     ${enc_group_name1}
    \        Run Keyword If    '${enc_group_name1}'!='${enc_group_name}'        Continue For Loop
    \        Set to dictionary            ${enc_group1}             ipRangeUris=${rangeuri}
    \        ${enc_group_body}=    Copy Dictionary     ${enc_group1}
    \        Log        ${enc_group_body}
    Log to console and logfile      EDITING LIG GROUP
    ${l} =     Get Length    ${enc_group_body['interconnectBayMappings']}
    :FOR     ${x}    IN RANGE    0    ${l}
    \    ${liguri} =     Get From Dictionary    ${enc_group_body['interconnectBayMappings'][${x}]}    logicalInterconnectGroupUri
    \    Log to console and logfile      EDITING LIG GROUP:${liguri}
    \   Continue For Loop If    '${liguri}' == 'None'
    \    ${liguri} =     Common URI Lookup by name    ${liguri}
    \    Log to console and logfile      EDITING LIG GROUP1:${liguri}
    \    Set to dictionary    ${enc_group_body['interconnectBayMappings'][${x}]}    logicalInterconnectGroupUri        ${liguri}
    \    Log to console and logfile      EDITING LIG GROUP Body:${enc_group_body}
    [Return]    ${enc_group_body}




Build LI SPP body
    [Documentation]    Build LI SPP body
    [Arguments]        ${li_spp}
    ${liedit} =     Copy Dictionary    ${li_spp}
    ${command} =                       Get Variable Value  ${li_spp['command']}
    ${sppUri} =           Get Variable Value  ${li_spp['sppUri']}
    ${force} =              Get Variable Value  ${li_spp['force']}


    ${body} =     Fusion Api Create LI spp Body    command=${command}
    ...                                         sppUri=${sppUri}
    ...                                         force=${force}
    ...
    [Return]    ${body}

APIC INVENTORY SYNC
    [Documentation]    issues a inventory synch at APIC
    [Arguments]           ${APIC_HOST}    ${APIC_USER}        ${APIC_PASS}
    Open Connection     ${APIC_HOST}     timeout=20s
    Login               ${APIC_USER}     ${APIC_PASS}
    Write    cd /aci/vm-networking/policies/vmware/vmm-domains/Tbird_DVS/controllers/10.10.3.74
    Write    bash
    Read Until    admin@apic1:10.10.3.74>
    Write    moset inventory-trigger-state triggered
    Sleep         10secs
    Log to console and logfile            Triggering inventory re-synch at APIC nodes
    Write    moconfig commit
    Sleep         15secs
    Close All Connections
    Sleep         40secs

APIC LogIn and Validate FabricNodes
    [Documentation]    PIC LogIn and Validate FabricNodes
    [Arguments]        ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}        ${IPList}
    APIC INVENTORY SYNC                ${APIC_HOST}    ${APIC_USER}        ${APIC_PASS}
    Log to console        Wait time for APIC to reflect CRM changes
    ${token} =         Fusion Apic Api Login Appliance         ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}
    ${apic_ip} =    Get Variable Value    ${apic_ip}
    ${status} =         Fusion Apic Get fabricNodes         ${APIC_APPLIANCE_IP}        ${token}    ${IPList}
    run keyword if  '${status}'=='False'    Fail    'fabricNodes information did not match'

APIC LogIn and Validate Topology
    [Documentation]    APIC LogIn and Validate Topology
    [Arguments]     ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}       ${APIC_TOPOLOGY}        ${NODE_IP}
    APIC INVENTORY SYNC             ${APIC_HOST}    ${APIC_USER}        ${APIC_PASS}
    Log to console      Wait time for APIC to reflect CRM changes
    ${token} =      loginApic       ${APIC_APPLIANCE_IP}        ${apic_admin_credentials}
    ${apic_ip} =    Get Variable Value  ${apic_ip}
    ${status} =         validate_Apic_topology     ${APIC_APPLIANCE_IP}        ${token}    ${APIC_TOPOLOGY}     ${NODE_IP}
    [Return]    ${status}

Edit LIG
    [Documentation]   Edit LIG
    [Arguments]        ${lig}    ${li}    ${ltlv}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    ${lig} =         Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}
    Log to console and logfile    ${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Perform an Update From Group    ${li}    120 min        1 min
    #ValidateLI LLDP Ip Address    ${li}    ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV        ${li}    ${ltlv}

Edit LIG1
    [Documentation]    Edit LIG1
    [Arguments]        ${lig}    ${li}    ${LLDPIP}    ${ltlv}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    ${lig} =         Get LIG Member      ${LIG2}
    ${lig_uri} =    Get LIG Uri         ${LIG2}
    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}
    Log to console and logfile    ${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Perform an Update From Group    ${li}    120 min        1 min
    ValidateLI LLDP Ip Address    ${li}    ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV        ${li}    ${ltlv}

Edit LI
    [Documentation]    Edit LI
    [Arguments]        ${li}    ${li_set}    ${ltlv}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =    Build LI body    ${li_set}
    Log    ${body}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log    ${resp}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${body}    id    ${id}
    Log    ${body}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    Log    ${resp1}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    #ValidateLI LLDP Ip Address    ${li}    ${LLDPIP}
    ValidateLI TaggedLLDP and RICH TLV    ${li}    ${ltlv}

ValidateLI TaggedLLDP and RICH TLV
    [Documentation]    ValidateLI TaggedLLDP and RICH TLV
    [Arguments]     ${li}   ${ltlv}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${LLDPTLV} =    Get From Dictionary     ${es}   enableTaggedLldp
    Should Be Equal As Strings    ${ltlv}    ${LLDPTLV}
    Log to console and logfile    Tagged LLDP <${ltlv}> compared with TaggedLldp in LI <${LLDPTLV}>


ValidateLIG TaggedLLDP and RICH TLV
    [Documentation]    ValidateLIG TaggedLLDP and RICH TLV
    [Arguments]     ${lig}   ${ltlv}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${LLDPTLV} =    Get From Dictionary     ${es}   enableTaggedLldp
    Should Be Equal As Strings    ${ltlv}    ${LLDPTLV}
    Log to console and logfile    Tagged LLDP <${ltlv}> compared with TaggedLldp in LIG <${LLDPTLV}>

Build LI body
    [Documentation]    Build LI body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}
    ${lldpIpAddressMode} =              Get Variable Value  ${liedit['lldpIpAddressMode']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...                                         lldpIpAddressMode=${lldpIpAddressMode}
    ...
    [Return]    ${body}

ValidateLI LLDP Ip Address
    [Documentation]    ValidateLI LLDP Ip Address
    [Arguments]        ${li}    ${LLDPIP}
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${ip} =     Get From Dictionary        ${es}    lldpIpv4Address
    ${status} =    Should Be Equal    ${ip}    ${LLDPIP}
    run keyword if    '${status}'=='False'    Fail    "LLDP Ip Address is not calculated in correct manner"
    Log to console and logfile    Actual lldpipV4 <${ip}> compared with Expected lldpipV4 <${LLDPIP}> for ${li}

ValidateLI LLDP Ipv6 Address
    [Documentation]    ValidateLI LLDP Ipv6 Address
    [Arguments]        ${li}    ${LLDPIP}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${ip} =     Get From Dictionary        ${es}    lldpIpv6Address
    ${status} =    Should Be Equal    ${ip}    ${LLDPIP}
    run keyword if    '${status}'=='False'    Fail    "LLDP Ip Address is not calculated in correct manner"
    Log to console and logfile    Actual lldpipV6 <${ip}> compared with Expected lldpipV6 <${LLDPIP}> for ${li}

Validate Interconnects1
    [Documentation]    Validate Interconnects1
    [Arguments]        ${ICM_NAME}        ${ltlv}        ${LLDPIP}
    Log to console and logfile    Validating Interconnects for lldpipV4 of ${ICM_NAME}
    ${ic} =     Get IC        ${ICM_NAME}
    ${enableTaggedLldp} =         Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =                Get from IC     ${ic}        lldpIpv4Address
    Should be Equal as Strings    ${enableTaggedLldp}        ${ltlv}
    Should be Equal as Strings    ${lldpip}        ${LLDPIP}
    Log to console and logfile    Actual lldpipV4 <${lldpip}> compared with Expected lldpipV4 <${LLDPIP}> for ${ICM_NAME}

Validate Interconnects Ipv6
    [Documentation]    Validate Interconnects Ipv6
    [Arguments]        ${ICM_NAME}        ${ltlv}        ${LLDPIP_IPv6}
    Log to console and logfile    Validating Interconnects for TaggedLLDP of ${ICM_NAME}
    ${ic} =     Get IC        ${ICM_NAME}
    ${enableTaggedLldp} =         Get From IC    ${ic}   enableTaggedLldp
    ${lldpip} =                Get from IC     ${ic}        lldpIpv6Address
    Should be Equal as Strings    ${enableTaggedLldp}        ${ltlv}
    Should be Equal as Strings    ${lldpip}        ${LLDPIP_IPv6}
    Log to console and logfile    Actual lldpipV6 <${lldpip}> compared with Expected lldpipV6 <${LLDPIP_IPv6}> for ${ICM_NAME}

Verify LIG lldpaddrmode
    [Documentation]    Verify LIG lldpaddrmode
     [Arguments]    ${LIG1}  ${lldpaddrmode}
    #${LIG1} =    Get from dictionary    ${body}    'name'
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =    fusion_api_get_lig   ${lig_uri}
    Log to console and logfile    ${resp}
    ${eth_settings} =    get variable value    ${resp['ethernetSettings']}
    Log to console and logfile    ${eth_settings}
    #${enableTaggedLldp} =    get variable value    ${eth_settings['enableTaggedLldp']}
    #Log to console and logfile    ${enableTaggedLldp}
    ${lldpIpAddressMode} =    get variable value    ${eth_settings['lldpIpAddressMode']}
    Log to console and logfile    ${lldpIpAddressMode}
    #should be equal    '${enableTaggedLldp}'  '${lldpenablestatus}'
    should contain    ${lldpIpAddressMode}  ${lldpaddrmode}

Master potash bay ip
    [Documentation]    Master potash bay ip
    [Arguments]    ${li_1}
    ${li_uri} =     Get LI URI   ${li_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${interconnectslist} =     Get From Dictionary     ${getresp}  interconnects
    Log to console and logfile     ${interconnectslist}
    ${length}=  Get Length  ${interconnectslist}
    ${ipaddrlist} =     Create List
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${interconnectslist[${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${stackingrole}=    Get from Dictionary    ${icmresponse}    stackingDomainRole
    \    ${lldpIpv4Address} =    Get from Dictionary    ${icmresponse}    lldpIpv4Address
    \    log to console and logfile    ${lldpIpv4Address}
    \    Append To List ${ipaddrlist}   ${lldpIpv4Address}
    \    log to console and logfile    ${stackingrole}
    \    ${lldpIpv6Address} =    Get from Dictionary    ${icmresponse}    lldpIpv6Address
    \    log to console and logfile    ${lldpIpv6Address}
    \    Append To List ${ipaddrlist}   ${lldpIpv6Address}
    \    Exit For Loop If     '${stackingrole}' == 'Master'
    [Return]    ${ipaddrlist}

Master potash bay ipv4
    [Documentation]    Master potash bay ipv4
    [Arguments]    ${li_1}
    ${li_uri} =     Get LI URI   ${li_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${interconnectslist} =     Get From Dictionary     ${getresp}  interconnects
    Log to console and logfile     ${interconnectslist}
    ${length}=  Get Length  ${interconnectslist}
    #${ipaddrlist} =    Create List
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${interconnectslist[${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${stackingrole}=    Get from Dictionary    ${icmresponse}    stackingDomainRole
    \    ${ipAddressList} =    Get from Dictionary    ${icmresponse}    ipAddressList
    \    log to console and logfile    ${ipAddressList}
    \    ${ipv4addrlist} =   get variable value    ${ipAddressList[0]}
    \    ${ipv4addr} =   Get from Dictionary    ${ipv4addrlist}    ipAddress
    \    log to console and logfile    ${ipv4addr}
    \    ${addrtype} =   Get from Dictionary    ${ipv4addrlist}    ipAddressType
    \    log to console and logfile    ${addrtype}
    #\    Append To List    ${ipaddrlist}   ${ipv4addr}
    \    log to console and logfile    ${stackingrole}
    \    ${name} =    Get from Dictionary    ${icmresponse}    name
    \    log to console and logfile    ${name}
    \    Exit For Loop If     '${stackingrole}' == 'Master'
    [Return]    ${ipv4addr}

Master potash bay ipv6
    [Documentation]    Master potash bay ipv6
    [Arguments]    ${li_1}
    ${li_uri} =     Get LI URI   ${li_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${interconnectslist} =     Get From Dictionary     ${getresp}  interconnects
    Log to console and logfile     ${interconnectslist}
    ${length}=  Get Length  ${interconnectslist}
    #${ipaddrlist} =    Create List
    :FOR    ${icm}  IN RANGE    0   ${length}
    \    ${icmuri} =   get variable value    ${interconnectslist[${icm}]}
    \    ${icmresponse} =   Fusion Api Get Interconnect    uri=${icmuri}
    \    ${stackingrole}=    Get from Dictionary    ${icmresponse}    stackingDomainRole
    \    ${ipAddressList} =    Get from Dictionary    ${icmresponse}    ipAddressList
    \    log to console and logfile    ${ipAddressList}
    \    ${ipv6addrlist} =   get variable value    ${ipAddressList[1]}
    \    ${ipv6addr} =   Get from Dictionary    ${ipv6addrlist}    ipAddress
    \    log to console and logfile    ${ipv6addr}
    \    ${addrtype} =   Get from Dictionary    ${ipv6addrlist}    ipAddressType
    \    log to console and logfile    ${addrtype}
    #\    Append To List    ${ipaddrlist}   ${ipv6addr}
    \    log to console and logfile    ${stackingrole}
    \    ${name} =    Get from Dictionary    ${icmresponse}    name
    \    log to console and logfile    ${name}
    \    Exit For Loop If     '${stackingrole}' == 'Master'
    [Return]    ${ipv6addr}

Verify LI lldpaddrmode original
    [Documentation]    Verify LI lldpaddrmode original
    [Arguments]    ${li}  ${lldpaddrmode}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${lldpIpAddressMode} =    Get From Dictionary     ${es}   lldpIpAddressMode
    should contain    ${lldpIpAddressMode}  ${lldpaddrmode}

Verify LI lldpaddrmode
    [Documentation]    V
     [Arguments]    ${li}  ${lldpaddrmode}
    #${LIG1} =    Get from dictionary    ${body}    'name'
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =    fusion_api_get_li   ${li_uri}
    Log to console and logfile    ${resp}
    ${eth_settings} =    get variable value    ${resp['ethernetSettings']}
    Log to console and logfile    ${eth_settings}
    #${enableTaggedLldp} =    get variable value    ${eth_settings['enableTaggedLldp']}
    #Log to console and logfile    ${enableTaggedLldp}
    ${lldpIpAddressMode} =    get variable value    ${eth_settings['lldpIpAddressMode']}
    Log to console and logfile    ${lldpIpAddressMode}
    #should be equal    '${enableTaggedLldp}'  '${lldpenablestatus}'
    should contain    ${lldpIpAddressMode}  ${lldpaddrmode}

Perform an Update From Group
    [Documentation]    Perform an Update From Group
    [Arguments]        ${li}=${LE}-${LIG1}    ${timeout}=10 min     ${interval}=15s
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


POWER OFF ICM
    [Documentation]    POWER OFF ICM
    [Arguments]        ${ICM_NAME}
    Log to console and logfile  -Issue powerControl Off
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC                  ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    Log to console    \n${uri}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=Off
    ${body} =   Create list     ${body}
    ${resp}        fusion api patch interconnect    body=${body}    uri=${uri}
    Log to console    \n${resp}
    sleep   90s


POWER ON ICM
    [Documentation]    POWER ON ICM
    [Arguments]        ${ICM_NAME}
    Log to console and logfile  -Issue powerControl On
    Run Keyword and Ignore Error    Write To ciDebug Log
    ${ic} =     Get IC                  ${ICM_NAME}
    ${uri} =    Get From IC     ${ic}   uri
    Log to console    \n${uri}
    ${body} =   Create Dictionary   op=replace
    ...                             path=/powerState
    ...                             value=On
    ${body} =   Create list     ${body}
    ${resp}        fusion api patch interconnect    body=${body}    uri=${uri}
    Log to console    \n${resp}
    sleep   90s

Verify Interconnect Power State
    [Documentation]    Verify Interconnect Power State
    [Arguments]        ${ICM_NAME}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile  -Verify Power status
    ${ic} =     Get IC                  ${ICM_NAME}
    ${powerState} =     Get From IC    ${ic}   powerState
    Should Be Equal As Strings    ${powerState}    ${POWER_STATE}
    Log to console    \n\nPower State of the ICM is ${ICM_NAME}:${powerState}

Verify Interconnect State
    [Documentation]    Verify Interconnect State
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get PortId from Ports
    [Documentation]    Get PortId from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${interconnect} =           fusion_api_get_interconnect           uri=${uri}
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log         ${ports}
    ${l} =  Get Length  ${ports}
    Log     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_id} =    Get From Dictionary     ${port_list}        portId

    [Return]    ${port_id}
    Log         ${port_id}

Get PortStatus from Ports
    [Documentation]    Get PortStatus from Ports
    [Arguments]     ${downlink_edit}
    #Port number Eg: d2 - Fetched from datafile
    ${ic} =     Get IC          ${ICM_1}
    ${uri} =     Get From IC    ${ic}   uri
    Log             ${uri}
    ${interconnect} =           fusion_api_get_interconnect           uri=${uri}
    ${ports} =  Get From Dictionary     ${interconnect}     ports
    ${port_number} =           Get Variable Value  ${downlink_edit['portName']}
    Log         ${ports}
    ${l} =  Get Length  ${ports}
    Log     ${l}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${port_list} =   Get From List   ${ports}    ${x}
    \   Log         ${port_list}
    \   ${portName} =   Get From Dictionary     ${port_list}        portName
    \   Run Keyword If  '${portName}' != '${port_number}'       Continue For Loop
    \   ${port_status} =    Get from Dictionary     ${port_list}        portStatus
    [Return]    ${port_status}
    Log         ${port_status}


Build Ports Edit Body
    [Documentation]    Build Ports Edit Body
    [Arguments]     ${port_id}          ${downlink_edit}
    ${interconnectName} =           Get Variable Value  ${downlink_edit['interconnectName']}
    ${enabled} =           Get Variable Value  ${downlink_edit['enabled']}
    ${portName} =           Get Variable Value  ${downlink_edit['portName']}
    ${type} =           Get Variable Value  ${downlink_edit['type']}
    ${edit_body} =  Create Dictionary   interconnectName=${interconnectName}
    ...                             enabled=${enabled}
    ...                             portName=${portName}
    ...                             portId=${port_id}
    ...                             type=${type}
    ${edit_body} =   Create list     ${edit_body}
    [Return]    ${edit_body}
    Log         ${edit_body}

EFUSE ON ICM
    [Documentation]    EFUSE ON ICM
        [Arguments]            ${bay}        ${enc_serial}      ${ICM_NAME}
        Open Connection And Log In      ${APPLIANCE_IP}
        ${EM_IP} =        Get EM IP
        Log to console    ${EM_IP}
        ${EM_TOKEN} =        Get EM Token    ${enc_serial}
        Log to console    ${EM_TOKEN}
        Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
        ${ic} =     Get IC                  ${ICM_NAME}
        ${uri} =    Get From IC     ${ic}   uri
        Log to console    ${uri}
        EFuse ICM   EFuseOn    ${bay}
        Log to console and logfile            \tWaiting for ICM in Bay:${bay} to reach state:Absent
        #Wait Until Keyword Succeeds     10 min   5s      IC reached state    ${ic['uri']}    Absent
        Wait Until Keyword Succeeds    600 s   10 s    Verify Interconnect State    ${ICM_NAME}    Absent


EFUSE OFF ICM
    [Documentation]    EFUSE OFF ICM
        [Arguments]            ${bay}        ${enc_serial}      ${ICM_NAME}
        Open Connection And Log In      ${APPLIANCE_IP}
        ${EM_IP} =        Get EM IP
        Log to console    ${EM_IP}
        ${EM_TOKEN} =        Get EM Token    ${enc_serial}
        Log to console    ${EM_TOKEN}
        ${ic} =     Get IC                  ${ICM_NAME}
        ${uri} =    Get From IC     ${ic}   uri
        Log to console    ${uri}
        EFuse ICM   EFuseOff    ${bay}
        Log to console and logfile            \tWaiting for ICM in Bay:${bay} to reach state:Configured|Monitored
        Wait Until Keyword Succeeds     30 min   5s      IC reached state    ${ic['uri']}    Configured|Monitored
        #EFuse ICM   EFuseOff    ${bay}    ${EM_IP}    ${EM_TOKEN}        ${FUSION_NIC}

Get EM IP
    [Documentation]    Get EM IP
    Set Log Level    TRACE
    # Get EM IP
    # TODO:  going to need to see how this works with multiple EM's
    log to console    \n\nHELLO
    ${EM_IP} =        Execute Command        lldpcli show neighbor
    ${m}    ${EM_IP} =  Should Match Regexp     ${EM_IP}    (?im)MgmtIP:\\s*(\\S*:\\S*:\\S*:\\S*:\\S*:\\S*)
    #${m}    ${EM_IP} =  Should Match    ${EM_IP}    "fe80::377d:ba56:25b8:44d4"
    Set Suite Variable    ${EM_IP}
    log to console     EM IP: ${EM_IP}
    [Return]    ${EM_IP}

Get EM Token
    [Documentation]    Get EM Token
    [Arguments]     ${enc_serial}
    # Get EM token
    ${EM_TOKEN} =  Execute Command     /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${enc_serial} -o t
    ${EM_TOKEN}    Should Match Regexp    ${EM_TOKEN}    (?i)\\S*
    Set Suite Variable    ${EM_TOKEN}   ${EM_TOKEN}
    log to console     EM TOKEN: ${EM_TOKEN}
    [Return]    ${EM_TOKEN}

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${FUSION_IP}      ${USERNAME}=${FUSION_SSH_USERNAME}
    ...                         ${PASSWORD}=${FUSION_SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${FUSION_TIMEOUT}    ${ALIAS}=Fusion_SSH
    Log Many                    ${IP}                   ${USERNAME}     ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    Set Default Configuration   prompt=${PROMPT}        timeout=${TIMEOUT}
    ${Id}=                      Open Connection         ${IP}    alias=${ALIAS}
    ${Output}=                  Login                   ${USERNAME}     ${PASSWORD}
    [Return]                    ${Id}

Logout of Fusion Via SSH
    [Documentation]     Exits the current Bash SSH session
    ...                 Example:\n| Logout Of Fusion Via SSH |
    Close Connection

Execute SSH Command
    [Documentation]     Executes given command on the Fusion SSH shell
    ...                 Example:\n| Execute CLI Command | show enclosure list |
    [Arguments]         ${Command}      ${PROMPT}=#
    log to console    \nComamnd is:${Command}
    Login to Fusion via SSH
    SSHLibrary.Write            ${Command1}
    SSHLibrary.Write            ${Command}
    ${Output}=          Read until      ${PROMPT}
    log to console    \nOUtput from SSH is :${Output}
    Logout of Fusion Via SSH
    [Return]            ${Output}

EFuse ICM
    [Documentation]    Perform an efuse action on a ICM bay. Action = EFuseOff | EFuseOn
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log to console and logfile      \t Issuing ${Action} for ICM:${BayNumber}
    ${Output}    Execute Command
    ...    curl -ikX POST -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/InterconnectBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=EFuse action failed \n${Output}



SSH to host and ping x
    [Documentation]    SSH's to a given host, then pings an IP from that host
    [Arguments]           ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}
    ${Output}=    Execute Command    ping -c 4 ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    ttl=
    Close All Connections

Add LIG from variable
    [Documentation]    Adds an LIG to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]        ${ligx}
    Log       Adding LIG ${ligx}
    ${ligx} =     Copy Dictionary    ${ligs['${ligx}']}

    ${name} =                       Get Variable Value  ${ligx['name']}
    ${enclosureIndexes} =           Get Variable Value  ${ligx['enclosureIndexes']}
    ${enclosureType} =              Get Variable Value  ${ligx['enclosureType']}
    ${ethernetSettings} =           Get Variable Value  ${ligx['ethernetSettings']}
    ${fcoeSettings} =               Get Variable Value  ${ligx['fcoeSettings']}
    ${internalNetworkUris} =        Get Variable Value  ${ligx['internalNetworkUris']}
    ${interconnectBaySet} =         Get Variable Value  ${ligx['interconnectBaySet']}
    ${interconnectMapTemplate} =    Get Variable Value  ${ligx['interconnectMapTemplate']}
    ${qosConfiguration} =           Get Variable Value  ${ligx['qosConfiguration']}
    ${redundancyType} =             Get Variable Value  ${ligx['redundancyType']}
    ${stackingMode} =               Get Variable Value  ${ligx['stackingMode']}
    ${telemetryConfiguration} =     Get Variable Value  ${ligx['telemetryConfiguration']}
    ${snmpConfiguration} =          Get Variable Value  ${ligx['snmpConfiguration']}
    ${uplinkSets} =                 Get Variable Value  ${ligx['uplinkSets']}
    #${uplinkSets} =     Copy List    ${ligx['uplinkSets']}
    ${l} =     Get Length    ${uplinkSets}


    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${networkType} =     Get From Dictionary     ${uplinkSets[${x}]}    networkType
    \    ${networks} =         Get From Dictionary        ${uplinkSets[${x}]}    networkUris
    \   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
    \     Run Keyword If     '${networkType}' == 'FibreChannel'    Continue For Loop
    #\    ${networkUris} =     Get FCoE Uris    ${networks}
    #\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    #\   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \    ${networkUris} =     Get Ethernet URIs    ${networks}
    \    Set to dictionary    ${uplinkSets[${x}]}    networkUris        ${networkUris}
    \   ${nativeNetworkUri} =     Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri    ${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]}    nativeNetworkUri     ${nativeNetworkUri}


    Log   ${uplinkSets}
    ${body} =     Fusion Api Create LIG Payload    name=${name}
    ...                                         enclosureType=${enclosureType}
    ...                                         ethernetSettings=${ethernetSettings}
    ...                                            interconnectMapTemplate=${interconnectMapTemplate}
    ...                                         stackingMode=${stackingMode}
    ...                                         telemetryConfiguration=${telemetryConfiguration}
    ...                                         snmpConfiguration=${snmpConfiguration}
    ...                                            uplinkSets=${uplinkSets}

    ${resp} =     Fusion Api Create LIG    ${body}
    ${task} =    Wait For Task    ${resp}     60s       2s
    ${liguri} =     Get From Dictionary    ${task['associatedResource']}    resourceUri
    [Return]    ${resp}

#FTS
    #Set Log Level    DEBUG
    #Get VM IP   ${VM}
    #First Time Setup                    password=hpvse123

Test Specific Setup
    [Documentation]    Test Specific Setup
    Set Log Level    TRACE
    Run Keyword and Ignore Error    Write To ciDebug Log
    Log to console and logfile    [TEST-SPECIFIC SETUP]
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${users} =    Get Variable Value    ${users}
    Run Keyword If    ${users} is not ${null}    Add Users from variable                ${users}
    ${ethernet_networks} =    Get Variable Value    ${ethernet_networks}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${ethernet_networks}
    #${ethernet_ranges} =    Get Variable Value    ${ethernet_ranges}
    #Run Keyword If    ${ethernet_ranges} is not ${null}        Run Keyword for List    ${ethernet_ranges}    Create Ethernet Range
    #${fc_networks} =    Get Variable Value    ${fc_networks}
    #Run Keyword If    ${fc_networks} is not ${null}    Add FC Networks from variable        ${fc_networks}
    #${fcoe_networks} =    Get Variable Value    ${fcoe_networks}
    #Run Keyword If    ${fcoe_networks} is not ${null}    Add FCoE Networks from variable        ${fcoe_networks}
    #${licenses} =    Get Variable Value    ${licenses}
    #Run Keyword If    ${licenses} is not ${null}        Add Licenses from variable        ${licenses}
    #Login all users     ${users}

Run FTS and test-specific setup
    [Documentation]    Run FTS and test-specific setup
    Set Log Level    TRACE
    #FTS
    Test Specific Setup
