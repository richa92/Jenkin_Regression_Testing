** Settings ***
Documentation       Feature Test: OVF629: Pause Flood detection/protection
...                 All VC modules with 4.20 firmware or above
...                 OA FW 4.50 and above
...                 Copy the med_config utility to simulate injection of pause frames to /images/archives/ folder of VC
...                 Change the med_config file permission to executable mode
...

Variables           data_variables.py
Resource            ../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             FusionLibrary

*** Test Cases ***
01 Verify pause flood protect value from VC switch
    ${cliCmd}       Set Variable    show switch_config/sw_port_protect
    ${cliOutput}    Run VC CLI CMD    ${DEVICE}    ${BAY1}   ${cliCmd}   ${BAY1_IP}
    Log to console and logfile    \nCLI Output ${cliOutput}
    Should Contain    ${cliOutput}    config_pause_protect=enabled

02 Verify the Default value of Pause flood protection when creating LIG & LI
    Log to console and logfile    \nLogin to appliance\n
    Fusion Api Login Appliance         ${APPLIANCE_IP}     ${admin_credentials}
    Log to console and logfile    \nCreating Ethernet Networks
    ${ethernet_networks}      Get Variable Value    ${ethernet_networks}
    Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable    ${ethernet_networks}
    Log to console and logfile    \nCreating Logical Interconnect Group
    ${response}     Add LIG from variable   ${ligs[0]}
    Log to console and logfile    \nLIG created successfully
    Log to console and logfile    \nCreating Enclosure Group
    ${enc_groups1}      Copy List     ${enc_groups}
    Add Enclosure Group from variable   ${enc_groups1[0]}
    Log to console and logfile    \nEG created successfully
    Log to console and logfile    \nVerify the Default value of Pause flood protection after LIG creation
    ValidateLIG Pause Flood Protect     ${LIGname}   ${PFPtrue}
    Log to console and logfile    \nAdding enclosure
    Add Enclosures from variable    ${encs}
    Log to console and logfile   \nEnclosure has been added successfully
    Log to console and logfile    \nVerify the Default value of Pause flood protection after LI creation
    ValidateLI Pause Flood Protect      ${li}   ${PFPtrue}

03 Verify pause flood condition on uplink port
    Log to console and logfile    \nInject Pause flood
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Inject Pause flood to single port       ${BAY4_IP}  ${UL_PORT_X1_NUMBER}    ${UL_PF_OPTION}   ${BAY4}
    Log to console and logfile    \nCreate server profile and ping blade
    Power off ALL servers
    ${profiles}      Copy List     ${server_profiles}
    Log to console and logfile    \n${profiles}
    Add Server Profiles from variable    ${profiles}
    Power on server      ${SERVER_BAY}
    Log to console and logfile      Waiting 2 minutes for server to boot...
    Sleep   2min
    Log to console and logfile    \nVerify port status with pause flood
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Uplink Port status and reason for the uplink port X1, ICM 4
    Validate PortStatus And PortStatusReason    ${ICM_4}      ${UL_PORT_NAME_X1}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s       Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s       Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console  \nVerify pause flood op status from VC switch for the uplink port X5, ICM 1
    ${cliCmd}       Set Variable    show /ports/port21/port_protect
    ${cliOutput}    Run VC CLI CMD      ${DEVICE}    ${BAY1}   ${cliCmd}    ${BAY1_IP}
    Log to console and logfile    \nCLI Output ${cliOutput}
    Should Contain    ${cliOutput}    op_pause_flood_status=in_pause_condition
    Log to Console  \nVerify pause flood op status from VC switch for the uplink port X1, ICM 4
    ${cliCmd}       Set Variable    show /ports/port33/port_protect
    ${cliOutput}    Run VC CLI CMD     ${DEVICE}    ${BAY4}  ${cliCmd}   ${BAY4_IP}
    Log to console and logfile    \nCLI Output ${cliOutput}
    Should Contain    ${cliOutput}    op_pause_flood_status=in_pause_condition
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected

04 Update from group by removing the Uplink port in pause flood condition
    Edit LIG    ${ligs[5]}
    Log to console and logfile    \nLIG updated successfully
    Log to console and logfile    \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_NONE}
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after update from group
    Log to Console    \nAdding back the removed port to Uplink set
    Edit LIG    ${ligs[0]}
    Log to console and logfile    \nLIG updated successfully

05 Update from group by removing the Uplink set with a port in pause flood condition
    Edit LIG    ${ligs[4]}
    Log to console and logfile  \nLIG updated successfully
    Log to console and logfile    \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_NONE}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after update from group

06 Update from group by removing Uplink set which does not have a port in pause flood condition
    Log to console and logfile    \nUpdate from group to move back to initial status
    Edit LIG    ${ligs[0]}
    Log to console and logfile    \nLIG updated successfully
    Log to console and logfile    \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Log to console and logfile    \nInject pause flood to uplink & downlink ports
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after update from group
    Edit LIG    ${ligs[1]}
    Log to console and logfile      \nLIG updated successfully
    Log to console and logfile      \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console    \nSuccessfully Verified Port Status Reason for PauseFloodDetected after update from group

07 Update from group in pause flood condition by disabling pause flood condition
    Edit LIG    ${ligs[2]}
    Log to console and logfile    \nLIG updated successfully
    Log to console and logfile    \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Log to Console    \nSuccessfully Verified Port Status Reason for PauseFloodDetected after update from group

08 Update from group in pause flood condition by re-enabling pause flood condition
    Edit LIG    ${ligs[3]}
    Log to console and logfile    \nLIG updated successfully
    Log to console and logfile    \nProceeding to LI update from group
    Perform an Update From Group    ${li}    120 min        1 min
    Log to console and logfile    \nLI update from group successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Log to Console    \nSuccessfully Verified Port Status Reason for PauseFloodDetected after update from group

09 Edit LI - Disable PauseFloodProtection
    Log to console and logfile    \nInject Pause flood
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Edit LI        ${li}    ${li_disable}        ${varFalse}
    sleep   60s
    Log to console and logfile    \nLI update successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after LI update

10 Edit LI - Enable PauseFloodProtection
    Edit LI        ${li}    ${li_enable}        ${varTrue}
    sleep   90s
    Log to console and logfile    \nLI update successfully completed
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_ACTIVE}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Log to Console    \nSuccessfully Verified Port Status Reason for PauseFloodDetected after LI update

11 Edit port - Disable Uplink port
    Log to console and logfile    \nInject Pause flood
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    ${portResp}     Get Port Data From Port Name    ${ICM_1}        ${UL_PORT_NAME}
    ${icUri}        Get IC URI    ${ICM_1}
    ${editBody}     Build Port Edit Body    ${portResp}     ${DISABLE_PORT}
    ${resp}         fusion_api_edit_interconnect_ports          ${editBody}         ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Disabling the uplink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PORT_STATUS_DISABLED}
    Log to Console  \nValidate Downlink Port status and reason after Disabling the uplink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console  \nUplink port edit(Disable) completed

12 Edit port - Enable Uplink port
    ${portResp}     Get Port Data From Port Name    ${ICM_1}        ${UL_PORT_NAME}
    ${icUri}        Get IC URI    ${ICM_1}
    ${editBody}     Build Port Edit Body    ${portResp}     ${ENABLE_PORT}
    ${resp}         fusion_api_edit_interconnect_ports          ${editBody}         ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Enabling the uplink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason after Enabling the uplink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console  \nUplink port edit(re-enable) completed

13 Edit port - Disable Downlink port
    ${portResp}     Get Port Data From Port Name    ${ICM_1}        ${DL_PORT_NAME}
    ${icUri}        Get IC URI    ${ICM_1}
    ${editBody}     Build Port Edit Body    ${portResp}     ${DISABLE_PORT}
    ${resp}         fusion_api_edit_interconnect_ports          ${editBody}         ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Disabling the downlink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason after Disabling the downlink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PORT_STATUS_DISABLED}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Log to Console  \nDownlink port edit(disable) completed

14 Edit port - Enable Downlink port
    ${portResp}     Get Port Data From Port Name    ${ICM_1}        ${DL_PORT_NAME}
    ${icUri}        Get IC URI    ${ICM_1}
    ${editBody}     Build Port Edit Body    ${portResp}     ${ENABLE_PORT}
    ${resp}         fusion_api_edit_interconnect_ports          ${editBody}         ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Enabling the downlink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason after Enabling the downlink port
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console  \nDownlink port edit(re-enable) completed

15 Re-apply Interconnect configuration
    ${icUri}        Get IC URI    ${ICM_1}
    ${resp}         fusion api reapply interconnect configuration        ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Re-apply config of ICM completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason after Re-apply config of ICM completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console  \nRe-apply Interconnect configuration completed

16 Re-apply Logical Interconnect configuration
    ${li_uri}       Get LI URI    ${li}
    ${resp}         Fusion Api Reapply LI Configuration    ${li_uri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Re-apply config of LI completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason after Re-apply config of LI completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}

17 Pause Flood condition on multiple ports of same ICM
    Inject Pause flood to single port    ${BAY1_IP}  ${UL_PORT_X8_NUMBER}  ${UL_PF_OPTION}   ${BAY1}
    sleep    30s
    Log to Console  \nValidate Uplink Port status and reason for the uplink port X5
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Uplink Port status and reason for the Stacking(uplink) port X8
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${STACKING_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_STACKING_MSG}

18 Remove the server connections in Pause flood condition
    ${profiles}    Copy List   ${server_profiles1}
    Power off ALL servers
    Log to console and logfile      Waiting 2 minutes for server to Power OFF...
    Sleep   2min
    Edit Server Profiles from variable    ${profiles}
    Power on server      ${SERVER_BAY}
    Log to console and logfile      Waiting 2 minutes for server to Power ON and boot...
    Sleep   2min
    Log to Console  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}

19 Add the server connections back and verify the ports Pause flood condition
    Log to Console  \n===Add connections back===
    Power off ALL servers
    Log to console and logfile      Waiting 2 minutes for server to Power OFF...
    Sleep   2min
    ${profiles} =   Copy List   ${server_profiles}
    Edit Server Profiles from variable  ${profiles}
    Power on server      ${SERVER_BAY}
    Log to console and logfile      Waiting 2 minutes for server to Power ON and boot...
    Sleep   2min
    Log to Console  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}

20 Pause flood condition on across interconnect ports
    Inject Pause flood to single port    ${BAY2_IP}  ${UL_PORT_X8_NUMBER}  ${UL_PF_OPTION}    ${BAY2}
    Inject Pause flood to single port    ${BAY4_IP}  ${UL_PORT_X1_NUMBER}  ${UL_PF_OPTION}    ${BAY4}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason for the uplink port X5, ICM 1
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Uplink Port status and reason for the Stacking(uplink) port X8, ICM 1
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${STACKING_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Downlink Port status and reason for downlink port in pause flood detected condition , ICM 1
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Uplink Port status and reason for the uplink port X1, ICM 4
    Validate PortStatus And PortStatusReason    ${ICM_4}      ${UL_PORT_NAME_X1}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidate Uplink Port status and reason for the Stacking(uplink) port X8 of ICM 4
    Validate PortStatus And PortStatusReason    ${ICM_2}      ${STACKING_PORT_NAME}     ${PORT_STATUS_LINK}      ${PFD_PORT_STATUS_REASON}

21 Reset Loop and Pause Flood Protection
    ${icUri}        Get IC URI    ${ICM_1}
    ${resp}         fusion api reset loop and pause flood protection        ${icUri}
    ${task}         Wait For Task   ${resp}     30s
    ${valDict}      Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response   ${task}    ${valDict}
    sleep   60s
    Log to Console  \nValidate Uplink Port status and reason after Reset Loop and Pause Flood Protection completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_ACTIVE}
    Log to Console  \nValidate Stacking Port status and reason after Reset Loop and Pause Flood Protection completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${STACKING_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_NONE}
    Log to Console  \nValidate Downlink Port status and reason after Reset Loop and Pause Flood Protection completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}

22 EFUSE_OFF interconnect other than the port which has pause flood detected port
    Log to console and logfile    \nInject Pause flood
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    ${bayNo}        Get IC Bay Number   ${ICM_2}
    ${icUri}        Get IC URI    ${ICM_2}
    Wait Until Keyword Succeeds     120s    5s     IC reached state    ${icUri}    Configured
    OA CLI EFUSE        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${bayNo}    ${ACTIONOFF}
    Wait Until Keyword Succeeds     12min    5s     IC reached state    ${icUri}    Absent
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after Efuse OFF completed
    OA CLI EFUSE        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${bayNo}    ${ACTIONON}
    Wait Until Keyword Succeeds     12min    5s     IC reached state    ${icUri}    Configured
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after Efuse ON completed

23 Power_Off interconnect and verify the port which has pause flood detected port
    ${bayNo}           Get IC Bay Number   ${ICM_1}
    ${icUri}           Get IC URI    ${ICM_1}
    Wait Until Keyword Succeeds     120s    5s     IC reached state    ${icUri}    Configured|Monitored
    OA CLI POWEROFF    ${OA_HOST}    ${OA_USER}    ${OA_PASS}   INTERCONNECT    ${bayNo}
    Wait Until Keyword Succeeds     5min   10s    IC reached power state    ${icUri}    powerState    Off
    Wait Until Keyword Succeeds     5min   10s    IC reached state    ${icUri}    Maintenance
    Wait Until Keyword Succeeds     3min    5s     Active Alert Message Should Be    ${POWER_OFF_MSG}
    Log to Console    \nVerify Uplink port status and reason
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PORT_STATUS_REASON_NONE}
    Log to Console    \nVerify Downlink port status and reason
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}   ${PORT_STATUS_REASON_NONE}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after interconnect Power OFF completed

24 Power_On interconnect and verify the port which has pause flood detected port
    ${bayNo}          Get IC Bay Number   ${ICM_1}
    ${icUri}          Get IC URI    ${ICM_1}
    Wait Until Keyword Succeeds     5min   10s    IC reached state    ${icUri}    Maintenance
    OA CLI POWERON    ${OA_HOST}    ${OA_USER}    ${OA_PASS}   INTERCONNECT    ${bayNo}
    Wait Until Keyword Succeeds     5min   10s    IC reached power state    ${icUri}    powerState    On
    Wait Until Keyword Succeeds     3min    5s     Active Alert Message Should Be    ${POWER_ON_MSG}
    Wait Until Keyword Succeeds     5min       30s    IC reached state    ${icUri}    Configured|Monitored
    Log to Console    \nVerify Downlink port status and reason
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_LINK}     ${PORT_STATUS_REASON_OK}
    Log to Console    \nVerify Uplink port status and reason
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${UL_PORT_NAME}     ${PORT_STATUS_LINK}     ${PORT_STATUS_REASON_ACTIVE}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after interconnect Power ON completed

25 EFUSE_OFF interconnect which has pause flood detected port
    ${bayNo}          Get IC Bay Number   ${ICM_1}
    ${icUri}          Get IC URI    ${ICM_1}
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Wait Until Keyword Succeeds     120s    5s     IC reached state    ${icUri}    Configured
    OA CLI EFUSE        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${bayNo}    ${ACTIONOFF}
    Wait Until Keyword Succeeds     12min    5s     IC reached state    ${icUri}    Absent
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_UNKNOWN}   ${PORT_STATUS_REASON_NONE}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after Efuse OFF completed
    OA CLI EFUSE        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${bayNo}    ${ACTIONON}
    Wait Until Keyword Succeeds     12min    5s     IC reached state    ${icUri}    Configured
    Validate PortStatus And PortStatusReason    ${ICM_1}        ${DL_PORT_NAME}     ${PORT_STATUS_LINK}   ${PORT_STATUS_REASON_OK}
    Log to Console    \n Successfully Verified Port Status Reason for PauseFloodDetected after Efuse ON completed

26 Reset the VC interconnect module having the pause flood impacted ports
    ${icUri}          Get IC URI    ${ICM_1}
    Log to Console    \nInject Pause frames to Uplink and Downlink ports
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Sleep    2 minutes
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}     ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}       ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    Log to Console    \nReset VC Interconnect Bay 1
    ${bayNo}          Get IC Bay Number   ${ICM_1}
    Log to Console    \nReset VC Interconnect Bay ${bayNo}
    Run VC Restart OA CMD       ${bayNo}
    Wait Until Keyword Succeeds     12min    5s     IC reached state    ${icUri}    Configured
    Log to Console  \nValidating Uplink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_ACTIVE}
    Log to Console  \nValidating Downlink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}

27 Disable Pause flood protection from switch using VCLI command
    Log to Console    \nInject Pause frames to Uplink and Downlink ports
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Sleep    2 minutes
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}     ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}       ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    ${cliCmd}       Set Variable    set switch_config/sw_port_protect config_pause_protect=disabled
    Run VC CLI CMD      ${DEVICE}    ${BAY1}  ${cliCmd}   ${BAY1_IP}
    ${cliCmd1}      Set Variable    show switch_config/sw_port_protect
    ${cliOutput}    Run VC CLI CMD      ${DEVICE}    ${BAY1}  ${cliCmd1}    ${BAY1_IP}
    Log to console and logfile    \nCLI Output ${cliOutput}
    Should Contain    ${cliOutput}    config_pause_protect=disabled
    Log to console and logfile      Waiting for 2 minutes 'set /switch_config/sw_port_protect config_pause_protect=disabled' to disable pause flood...
    Sleep    2 minutes
    Log to Console  \nValidating Uplink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_ACTIVE}
    Log to Console  \nValidating Downlink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}
    Log to Console    \nEnable Pause flood protection back for further testing
    ${cliCmd}       Set Variable    set switch_config/sw_port_protect config_pause_protect=enabled
    Run VC CLI CMD      ${DEVICE}    ${BAY1}  ${cliCmd}    ${BAY1_IP}
    ${cliCmd1}      Set Variable    show switch_config/sw_port_protect
    ${cliOutput}    Run VC CLI CMD      ${DEVICE}    ${BAY1}  ${cliCmd1}    ${BAY1_IP}
    Log to console and logfile    \nCLI Output ${cliOutput}
    Should Contain    ${cliOutput}    config_pause_protect=enabled

28 Reset Pause flood protection from switch using VCLI command
    Log to Console    \nInject Pause frames to Uplink and Downlink ports
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Sleep    2 minutes
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}     ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}       ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    ${cliCmd}       Set Variable    reset switch_config/sw_port_protect
    ${cliOutput}    Run VC CLI CMD     ${DEVICE}    ${BAY1}  ${cliCmd}    ${BAY1_IP}
    Log to console and logfile      Waiting for 2 minutes 'reset switch_config/sw_port_protect' to reset pause flood...
    Sleep    2 minutes
    Log to Console  \nValidating Uplink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_ACTIVE}
    Log to Console  \nValidating Downlink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_LINK}      ${PORT_STATUS_REASON_OK}

29 Clear port counters in Pause flood condition
    [Documentation]    issues an /statistics/reset API call to Interconnect.
    ...   <TODO> Need to modigy the status_code to check for 202
    ...   and then verify the task completion for the test success
    Log to Console    \nInject Pause frames to Uplink and Downlink ports
    Inject Pause flood detection to port    ${BAY1_IP}  ${UL_PORT_X5_NUMBER}  ${DL_PORT_NUMBER}   ${UL_PF_OPTION}  ${DL_PF_OPTION}    ${BAY1}
    Log to console and logfile      Waiting for 2 minutes to inject pause frames to uplink & downlink ports...
    Sleep    2 minutes
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}     ${PFD_PORT_STATUS_REASON}
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}       ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}
    ${icUri}       Get IC URI    ${ICM_1}
    ${body}        Create Dictionary
    Log to Console and Logfile    \nClearing Interconnect Port Counters\n
    ${resp}        Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Run Keyword If  ${resp['status_code']} != 200    fail    msg=Clearing Interconnect Ports of ${ICM_1} Failed
    ...         ELSE    Log to console and logfile  \n Interconnect Ports of ${ICM_1} cleared successfully
    Log to console and logfile      Waiting for 2 minutes for 'Clear port counters' to clear the statistics data...
    Sleep    2 minutes
    Log to Console  \nValidating Uplink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${DL_PORT_NAME}     ${PORT_STATUS_UNLINK}     ${PFD_PORT_STATUS_REASON}
    Log to Console  \nValidating Downlink Port status and reason after VC Reset Interconnect completed
    Validate PortStatus And PortStatusReason    ${ICM_1}      ${UL_PORT_NAME}     ${PORT_STATUS_LINK}       ${PFD_PORT_STATUS_REASON}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${UPLINK_MSG}
    Wait Until Keyword Succeeds     120s    5s      Active Alert Message Should Be      ${DOWNLINK_MSG}

30 Clean up the appliance
    [Tags]  1
    Log to Console    \n===  Clean up the appliance and logout  ===
    CLEAN UP

*** Keywords ***
CLEAN UP
    Power off ALL servers
    Remove All Server Profiles
    Remove All Enclosures
    Remove All Enclosure Groups
    Remove All LIGs
    Remove All Ethernet Networks
    Fusion Api Logout Appliance

OA CLI POWEROFF
    [Documentation]    issues an POWEROFF command to the given Device\Bay.
    ...   {DEVICE} = <SERVER | INTERCONNECT>
    ...   {BAY} = desired bay for given device  { ALL | <bay number> [{ , | - } <bay number>]}
    [Arguments]         ${OA_HOST}    ${OA_USER}     ${OA_PASS}    ${DEVICE}    ${BAY}
    Open Connection     ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=10s
    Login               ${OA_USER}     ${OA_PASS}
    sleep   10s
    Write    POWEROFF ${DEVICE} ${BAY}
    Close All Connections

OA CLI POWERON
    [Documentation]    issues an POWERON command to the given Device\Bay.
    ...   {DEVICE} = <SERVER | INTERCONNECT>
    ...   {BAY} = desired bay for given device  { ALL | <bay number> [{ , | - } <bay number>]}
    [Arguments]        ${OA_HOST}    ${OA_USER}     ${OA_PASS}    ${DEVICE}    ${BAY}
    Open Connection     ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=10s
    Login               ${OA_USER}     ${OA_PASS}
    Write    POWERON ${DEVICE} ${BAY}
    Close All Connections

OA CLI EFUSE
    [Documentation]    issues an EFUSE Action to the given Device\Bay.
    ...   {DEVICE} = <BLADE|IOM|NETTRAY|SWM|FAN|OA|EM>
    ...   {BAY} = desired bay for given device
    ...   {ACTION} = <ON|OFF>
    [Arguments]         ${OA_HOST}    ${OA_USER}     ${OA_PASS}    ${DEVICE}    ${BAY}    ${ACTION}
    Open Connection     ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=20s
    Login               ${OA_USER}     ${OA_PASS}
    Write    ++diag--
    Read Until    diag>
    Write    efuse ${DEVICE} ${BAY} ${ACTION}
    Close All Connections

ValidateLI Pause Flood Protect
    [Arguments]     ${li}   ${PFPtrue}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${pfp} =    Get From Dictionary     ${es}   enablePauseFloodProtection
    Should Be Equal As Strings    ${pfp}    ${PFPtrue}
    Log to console and logfile    \nSuccessfully Validated default PauseFloodProtection from LI

ValidateLIG Pause Flood Protect
    [Arguments]     ${LIGname}   ${PFPtrue}
    ${ligResp} =         Get LIG Member      ${LIGname}
    ${es} =     Get From Dictionary        ${ligResp}    ethernetSettings
    ${pfp} =     Get From Dictionary        ${es}    enablePauseFloodProtection
    Log to console and logfile    \n\n\nDefault value of PauseFloodProtection data from LIG is ${pfp}
    Should be Equal as Strings    ${pfp}        ${PFPtrue}
    Log to console and logfile    \nSuccessfully Validated default PauseFloodProtection from LIG

Run VC CLI CMD
    [Documentation]    SSH's to a given VC ICM and run the VC CLI command
    [Arguments]         ${DEVICE}    ${BAY}   ${cliCmd}   ${BAY_NO}
    ${rootPwd}          OA ICM Token        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${BAY}
    Open Connection     ${BAY_NO}     timeout=60s
    Run Keyword If      '${SSH_PASS}' is ${null}      Set Suite variable  ${SSH_PASS}     ${rootPwd}
    Login               ${VC_USER}     ${rootPwd}
    Write    cli
    Read Until    CLI->
    Write    ${cliCmd}
    ${OUTPUT1}         Read Until    CLI->
    [Return]          ${OUTPUT1}
    Close All Connections

Run VC Restart OA CMD
    [Documentation]    SSH to OA and run a OA CLI command to restart VC module
    ...   {BAY} = desired interconnect bay number   eg.
    [Arguments]          ${BAY}
    Open Connection      ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=10s
    Login                ${OA_USER}     ${OA_PASS}
    Read Until    >
    Write    restart interconnect ${BAY}
    Read Until    Are you sure you want to reset the Interconnect?
    Write   yes
    Close All Connections

SSH to host and run med_config
    [Documentation]    SSH's to a given host exectute script /images/archives/med_config
    [Arguments]        ${HOST}   ${PORT_NAME}    ${PF_OPTION}   ${BAY_NO}
    ${rootPwd}         OA ICM Token        ${OA_HOST}    ${OA_USER}        ${OA_PASS}    ${DEVICE}    ${BAY_NO}
    Open Connection    ${HOST}     timeout=60s
    Run Keyword If     '${SSH_PASS}' is ${null}      Set Suite variable  ${SSH_PASS}     ${rootPwd}
    Login              ${VC_USER}     ${rootPwd}
    ${medCmd}        Set Variable     /images/archives/med_config 5 ${PORT_NAME} ${PF_OPTION}
    ${Output}        Execute Command    ${medCmd}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    [Return]    ${Output}
    Close All Connections

OA ICM Token
    [Documentation]    Reads block 16 of ISIMIC block and reads IOM's root password
    ...   {DEVICE} = <BLADE|IOM|NETTRAY|SWM|FAN|OA|EM>
    ...   {BAY} = desired bay for given device
    [Arguments]          ${OA_HOST}    ${OA_USER}           ${OA_PASS}    ${DEVICE}    ${BAY}
    Open Connection      ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=10s
    Login                ${OA_USER}     ${OA_PASS}
    Write    ++diag--
    Read Until    diag>
    ${OUTPUT}=          Write    ${DEVICE} ${BAY} rdblock 16
    ${OUTPUT1}=         Read Until    diag>
    #Log to console and logfile            ${OUTPUT1}
    ${Lines}=   Split To Lines   ${OUTPUT1}
    ${Lines1}=      Convert To List         ${Lines}
    ${Line}=    Get from List        ${Lines1}        3
    ${Line1}=    Get from List        ${Lines1}        5
    #Log to console and logfile            ${Line}
    #Log to console and logfile            ${Line1}
    ${matches}=         Split String       ${Line}        |
    ${match}=    Get from List        ${matches}        1
    ${match}=    Strip String    ${match}    characters=*.*
    ${matches1}=         Split String       ${Line1}        |
    ${match1}=    Get from List        ${matches1}        1
    ${stripped}=    Strip String    ${match1}    characters=*.*
    ${Token}=  catenate   SEPARATOR=   ${match}  ${stripped}
    Log to console and logfile            ${Token}
    [Return]          ${Token}
    Close All Connections

VC Reset IO
    [Documentation]    Resets the IO of specified interconnect
    ...   usage: RESET_IO <1 - 8>|all [{delay secs} [NumPass] [PassDelay]]
    [Arguments]          ${OA_HOST}    ${OA_USER}           ${OA_PASS}    ${BAY}
    Open Connection      ${OA_HOST}     prompt=${OA_CLI_PROMPT}    timeout=10s
    Login                ${OA_USER}     ${OA_PASS}
    Write    ++diag--
    Read Until    diag>
    Write    reset_io ${BAY}
    ${OUTPUT1}=         Read Until    diag>
    Log to console and logfile    ${OUTPUT1}
    Close All Connections

Get IC Bay Number
    [Documentation]    Gets the interconnect bay number from the bay name
    [Arguments]        ${ICM_NAME}
    ${ic}       Get IC      ${ICM_NAME}
    ${icLoc}    Get From Dictionary     ${ic}   interconnectLocation
    ${locEntry}     Get From Dictionary     ${icLoc}   locationEntries
    ${l}        Get Length    ${locEntry}
    :FOR    ${index}    IN RANGE    0    ${l}
    \    ${entry}        Get From List    ${locEntry}    ${index}
    \    ${value}        Get From Dictionary    ${entry}    value
    \    Exit For Loop If     '${entry['type']}' == 'Bay'
    Log to console and logfile    Interconnect Bay number is ${value}
    [Return]    ${value}

Get IC
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get Port Data From Port Name
    [Arguments]        ${ICM_NAME}      ${portName}
    ${ic} =     Get IC      ${ICM_NAME}
    ${ports} =  Get From Dictionary     ${ic}    ports
    ${l} =     Get Length    ${ports}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${port} =     Get From List   ${ports}    ${x}
    \     Exit For Loop If     '${port['portName']}' == '${portName}'
    [Return]    ${port}

Validate PortStatus And PortStatusReason
    [Arguments]        ${ICM_NAME}      ${portName}          ${portStatus}      ${portStatusReason}
    Log to console and logfile    Validating Interconnects for Pause Flood Detection port status and reason
    ${port}      Get Port Data From Port Name        ${ICM_NAME}    ${portName}
    ${pS}       Get From Dictionary     ${port}    portStatus
    ${pSR}      Get From Dictionary     ${port}    portStatusReason
    Log to console and logfile  ${pS}
    Log to console and logfile  ${pSR}
    Should be Equal as Strings    ${pS}        ${portStatus}
    run keyword if    '${pS}'!='${portStatus}'    Fail    "Port Status is not matching"
    run keyword if    '${pSR}'!='${portStatusReason}'    Fail    "Port Status Reason is not matching"

Edit LIG
    [Arguments]     ${lig}
    ${body} =   Build LIG body      ${lig}
    ${lig} =        Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    Log to console and logfile      LIG URI
    Log to console and logfile      ${lig_uri}
    ${resp} =   Fusion Api Edit LIG  body=${body}        uri=${lig_uri}
    Log to console and logfile      ${resp}
    ${task} =   Wait For Task   ${resp}     120s
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Log to console and logfile  valdict
    Log to console and logfile  ${valDict}
    Log to console and logfile  task
    Log to console and logfile  ${task}
    ${p} =  Validate Response   ${task}  ${valDict}
    Log to console and logfile  validate rep
    Log to console and logfile  ${p}

Perform an Update From Group
    [Arguments]        ${li}=${LE}-${LIG1}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build Port Edit Body
    [Arguments]     ${portResp}     ${togglePort}
    Log to Console      \nPort enable state will be ${togglePort}
    ${associatedUplinkSetUri}         Get Variable Value  ${portResp['associatedUplinkSetUri']}
    ${interconnectName}         Get Variable Value  ${portResp['interconnectName']}
    ${portType}                 Get Variable Value  ${portResp['portType']}
    ${portId}                   Get Variable Value  ${portResp['portId']}
    ${portHealthStatus}         Get Variable Value  ${portResp['portHealthStatus']}
    ${capability}               Get Variable Value  ${portResp['capability']}
    ${configPortTypes}          Get Variable Value  ${portResp['configPortTypes']}
    ${enabled}                  Get Variable Value  ${togglePort}
    ${portName}                 Get Variable Value  ${portResp['portName']}
    ${portStatus}               Get Variable Value  ${portResp['portStatus']}
    ${type}                     Get Variable Value  ${portResp['type']}
    ${edit_body}                Create Dictionary   associatedUplinkSetUri=${associatedUplinkSetUri}
    ...                             interconnectName=${interconnectName}
    ...                             portType=${portType}
    ...                             portId=${portId}
    ...                             portHealthStatus=${portHealthStatus}
    ...                             capability=${capability}
    ...                             configPortTypes=${configPortTypes}
    ...                             enabled=${enabled}
    ...                             portName=${portName}
    ...                             portStatus=${portStatus}
    ...                             type=${type}
    ${edit_body}                Create list     ${edit_body}
    [Return]    ${edit_body}

Inject Pause flood detection to port
    [Arguments]     ${BAY_IP}   ${UL_PORT_NUMBER}   ${DL_PORT_NUMBER}   ${UL_PF_OPTION}   ${DL_PF_OPTION}    ${BAY_NO}
    ${medConfigResponse} =      SSH to host and run med_config      ${BAY_IP}  ${UL_PORT_NUMBER}  ${UL_PF_OPTION}   ${BAY_NO}
    Should Not Contain    ${medConfigResponse}  Invalid value specified for op_pause_flood_status
    ${medConfigResponse1} =     SSH to host and run med_config      ${BAY_IP}  ${DL_PORT_NUMBER}  ${DL_PF_OPTION}   ${BAY_NO}
    Should Not Contain    ${medConfigResponse1}  Invalid value specified for op_pause_flood_status
    Sleep    30s

Inject Pause flood to single port
    [Arguments]     ${BAY_IP}   ${PORT_NUMBER}   ${PF_OPTION}   ${BAY_NO}
    ${medConfigResponse} =      SSH to host and run med_config      ${BAY_IP}  ${PORT_NUMBER}  ${PF_OPTION}   ${BAY_NO}
    Should Not Contain    ${medConfigResponse}  Invalid value specified for op_pause_flood_status
    Sleep    30s

Edit LI
    [Arguments]        ${li}    ${li_set}    ${expected}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =    Build LI body    ${li_set}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log   ${resp}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${body}    id    ${id}
    Log   ${body}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    Log   ${resp1}
    ${task} =    Wait For Task     ${resp1}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ValidateLI Pause Flood Protection   ${li}    ${expected}

Build LI body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enablePauseFloodProtection} =           Get Variable Value  ${liedit['enablePauseFloodProtection']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enablePauseFloodProtection=${enablePauseFloodProtection}
    ...
    [Return]    ${body}

ValidateLI Pause Flood Protection
    [Arguments]        ${li}    ${expected}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${pfpFound} =     Get From Dictionary        ${es}    enablePauseFloodProtection
    ${status} =    Should Be Equal    ${pfpFound}    ${expected}
    run keyword if    '${status}'=='False'    Fail    "Pause flood protection value not same as expected"

Edit Server Profiles from variable
    [Documentation]   Edits Server Profiles to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]     ${profiles}
    Log to console and logfile      Editing SERVER PROFILES
    :FOR    ${profile}  IN  @{profiles}
    \   ${profile} =    Copy Dictionary     ${profile}
    \   Log to console and logfile  ${profile}
    \   ${shuri} =  Get from Dictionary     ${profile}    serverHardwareUri
    \   Log to console and logfile  ${shuri}
    \   ${uri} =    Get Server Hardware URI     ${shuri}
    \   Set to Dictionary   ${profile}  serverHardwareUri   ${uri}
    \   Log to console and logfile  ${uri}
    \   ${eg} =     Get from Dictionary     ${profile}    enclosureGroupUri
    \   Log to console and logfile  ${eg}
    \   ${uri} =    Common URI Lookup by name   ${eg}
    \   Log to console and logfile  ${uri}
    \   Set to Dictionary   ${profile}  enclosureGroupUri   ${uri}
    \   ${enc} =    Get from Dictionary     ${profile}  enclosureUri
    \   Log to console and logfile  ${enc}
    \   ${uri} =    Common URI Lookup by name   ${enc}
    \   Log to console and logfile  ${uri}
    \   Set to Dictionary   ${profile}  enclosureUri    ${uri}
    \   ${connections} =    Get From Dictionary     ${profile}  connections
    \   Log to console and logfile  ${connections}
    \   ${connections} =    Lookup Connection Uris  ${connections}
    \   Log to console and logfile  ${connections}
    \   Set to Dictionary   ${profile}  connections     ${connections}
    \   ${resturi} =    Get Profile Uri
    \   ${eTag} =   Get Profile ETag
    \   Log to console and logfile  ${resturi}
    \   Log to console and logfile  ${eTag}
    \   Set to Dictionary   ${profile}  eTag     ${eTag}
    \   ${resp} =   Fusion Api Edit Server Profile   ${profile}     uri=${resturi}
    \   Log to console and logfile  ${resp}
    \   ${task} =   Wait For Task   ${resp}     timeout=5 mins      interval=10s
    \   Log to console and logfile  ${task}
    \   ${task_state} =     Get From dictionary     ${task}     taskState
    \   @{message} =    Get From dictionary     ${task}     taskErrors
        :FOR    ${mess}   IN   @{message}
        \   Log to console and logfile  Errorfromoneview
        \   ${dict} =   Get from Dictionary     ${mess}     recommendedActions
        \   Log to console and logfile  ${dict[0]}
        \   Log to console and logfile  Errorfromdata
        \   Log to console and logfile    errormessage
        \   Run Keyword If  '${dict[0]}' == 'errormessage'  Exit For Loop
    \   Log to console and logfile    ${task}
    \   Log to console and logfile    ${message}
    \   Log to console and logfile    ${task_state}
    \   Should Match Regexp     ${task_state}   ((?i)Warning|Error)

Get Profile Uri
    [Documentation]     Getting Server Profile Templates to an appliance from a variable which contains a list of dicts with the entire payload
    Log to console and logfile      Getting SERVER PROFILE
    ${profiles} =   Fusion Api Get Server Profiles  param=?sort=name:ascending
    Log to console and logfile      ${profiles}
    ${l} =  Get Length  ${profiles['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Log to console and logfile      ${profiles['members'][${x}]['name']}
    \   Run Keyword If  '${profiles['members'][${x}]['name']}' != 'Sp_PauseFlood'        Continue For Loop
    \   ${uri} =    Get From Dictionary     ${profiles['members'][${x}]}    uri
    Log to console and logfile      ${uri}
    [Return]    ${uri}

Get Profile ETag
    [Documentation]     Getting Server Profile Templates to an appliance from a variable which contains a list of dicts with the entire payload
    Log to console and logfile      Getting SERVER PROFILE
    ${profiles}    Fusion Api Get Server Profiles  param=?sort=name:ascending
    Log to console and logfile      ${profiles}
    ${l} =  Get Length  ${profiles['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Log to console and logfile      ${profiles['members'][${x}]['name']}
    \   Run Keyword If  '${profiles['members'][${x}]['name']}' != 'Sp_PauseFlood'        Continue For Loop
    \   ${eTag} =   Get From Dictionary     ${profiles['members'][${x}]}    eTag
    Log to console and logfile  ${eTag}
    [Return]    ${eTag}

IC reached power state
    [Arguments]     ${uri}   ${key}   ${state}
    Set Log Level   TRACE
    ${resp} =   fusion api get resource     ${uri}
    Log to console and logfile      \t ${uri}: ${resp['${key}']}
    Should Match Regexp     ${resp['${key}']}    ${state}
    [Return]    ${resp}

Active Alert Message Should Be
    [Arguments]     ${msg}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?filter="alertState EQ 'Active'"
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No active alert events found
    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}        Get From List    ${Members}    ${Index}
    \    ${AlertDesc}    Get From Dictionary    ${Alert}    description
    \    Exit For Loop If     '${AlertDesc}' == '${msg}'
    run keyword if    '${AlertDesc}'!='${msg}'    Fail    "Failed as alert message is not found"
    Log to console and logfile       \nSuccessfully validated the alert message ${AlertDesc}