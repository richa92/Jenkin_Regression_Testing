*** Settings ***
Documentation        Feature Test:  OVF223
...                  This set of test cases is to verify the feature OVF223 related to Interconnect settings,Internal Networks
...
Variables              C7k_data_variables.py
Variables              Expected_messages.py
Resource               ../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                Selenium2Library
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Telnet
Library                Dialogs
Library                String
Library         SSHLibrary
Library         data_variables
Variables       data_variables.py
Library         Multialert.py

*** Variables ***
${APPLIANCE_IP}    15.212.136.118

*** Test Cases ***
# Interconnect Settings

Initial Setup
    [Documentation]    Initial Setup
    Set Log Level    TRACE
    ${Login_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless  ${Login_resp[0]['status_code']}== 200   Fail    "Unable to Login"

    Remove All Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove All Network Sets
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks

    :For    ${Enet}    IN    @{Ethernet}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create Ethernet network"

    :For    ${Fcnet}    IN    @{FcNet}
    \    ${Fcnet_resp}    Fusion Api Create Fc Network    ${Fcnet}
    \    Run keyword unless ${Fcnet_resp['status_code']}== 202  Fail    "Unable to Create Fc network"

    :For    ${Fcoe_net}    IN    @{FcoeNet}
    \    ${Fcoenet_resp}    Fusion Api Create Fcoe Network    ${Fcoe_net}
    \    Run keyword unless ${Fcoenet_resp['status_code']}== 202    Fail    "Unable to Create Fcoe network"

    ${body} =   Build LIG body      ${LIGS_TB}
    Log to console and logfile    ${body}
    ${lig_resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s
    Run Keyword If  '${lig_resp['status_code']}' != '202'   fail    ELSE    Log to Console  \n-LIG  created successfully

    ${eg_resp}    Add Enclosure Group from variable    ${enc_group}
    Log to console    \n Resp is : ${eg_resp}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-EG created successfully

    Add Enclosures from variable     ${encs}
    Log to console and logfile    Enclosure imported succesfully

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Set Global Variable    ${LIURI}    ${li_uri}

OVF223_TC_1_LIG_IS_COMPLIANCE_ALERT-OVF223_TC_2_LIG_IS_COMPLIANCE_EVENT
    [Documentation]    Preconditions-LIG with IGMP Disabled- Edit LIG -Enable IGMP-Check for Compliance alert and events in LI
    # validation LI-LIG-disable IgmpSnooping before enable

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    # Enable IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_C7K_enable_Igmp['lig_E_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console    \nValue:${Ethernet_settings}

    ${Ethernet_settings_Enable} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_Enable}    Convert To String    ${Ethernet_settings_Enable}
    Log to console    \nIinterval:${Ethernet_settings_IGMP_Enable}
    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_Enable}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_alert}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_4_LIG_IS_IGMP_DISABLE_EVENT
    [Documentation]    Preconditions-LIG with IGMP Disabled- Edit LIG -Enable IGMP-Check for Compliance alert and events in LI
    # LIG -US should be disabled

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    # validation before enable US - LIG-LI - disable US
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    # LIG - US enable
    Edit LIG    ${edit_ligs_C7K_disable_Igmp['lig_D_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}
    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console    \nValue:${Ethernet_settings}

    ${Ethernet_settings_Disable} =    Get From Dictionary     ${Ethernet_settings}   enableIgmpSnooping
    ${Ethernet_settings_IGMP_Disable}    Convert To String    ${Ethernet_settings_Disable}
    Log to console    \nIinterval:${Ethernet_settings_IGMP_Disable}


    ${Alert_list}    Built the Alert list    ${IGMP_SNOOPING_DISABLED}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_6_LIG_IS_IGMP_ENABLE_ALL_EVENT

    [Documentation]    Edit LIG-Check for the Compliance alert and events in LI

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Edit LIG    ${edit_ligs_C7K_enable_Igmp_lldp['lig_E_IGMP_LLDP']}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console    \nValue:${Ethernet_settings}

    ${lig_storm_threshold} =    Get From Dictionary     ${Ethernet_settings}   stormControlThreshold
    ${lig_storm_thre_string}    Convert To String    ${lig_storm_threshold}
    Log to console    \n\nStorm Value:${lig_storm_thre_string}
    ${lig_strom_polling_interval} =    Get From Dictionary     ${Ethernet_settings}   stormControlPollingInterval
    ${lig_storm_interval}    Convert To String    ${lig_strom_polling_interval}
    Log to console    \n\nStorm Value1:${lig_storm_interval}
    ${Ethernet_settings_Enable} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_Enable}    Convert To String    ${Ethernet_settings_Enable}
    Log to console    \n\nInterval:${Ethernet_settings_IGMP_Enable}

    ${Alert_list}    Create list
    ${Alert_IGMP_Enabled}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_Enable}
    ${Alert_Storm_Enabled}    Replace String Using Regexp   ${STROM_CONTROL_ENABLED}    XXX    ${lig_storm_thre_string}
    ${Alert_Storm_Interval}    Replace String Using Regexp   ${Alert_Storm_Enabled}    YYY    ${lig_storm_interval}
    Log to console    \n\nInterval:${Alert_IGMP_Enabled}
    Log to console    \n\nInterval:${Alert_Storm_Interval}
    Append to list    ${Alert_list}    ${Alert_IGMP_Enabled}
    Append to list    ${Alert_list}    ${Alert_Storm_Interval}
    Append to list    ${Alert_list}    ${TAGGED_LLDP_ENABLED}
    Sort list    ${Alert_list}
    Log to console    \n\Sorted List:${Alert_list}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_9_LI_IS_COMPLIANCE_ALERT-OVF223_TC_10_LI_IS_COMPLIANCE_EVENT

    [Documentation]    Edit LI-Check for the Compliance alert and events in LI

    Edit LIG    ${edit_ligs_C7K_disable_Igmp['lig_D_IGMP']}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${li_enable_igmp}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${li_enable_igmp}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Alert_list}    Built the Alert list    ${IGMP_SNOOPING_DISABLED}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_12_LI_IS_IGMP_DISABLE_EVENT

    [Documentation]    Edit LI-Check for the Compliance alert and events in LI

    # Enable IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_C7K_enable_Igmp['lig_E_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    #Edit LI    ${li_disable_igmp}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${li_disable_igmp}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${li_disable_igmp}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_alert}


    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_14_LI_IS_IGMP_ENABLE_ALL_EVENT

    [Documentation]    Edit LI-Check for the Compliance alert and events in LI

    Edit LIG    ${edit_ligs_C7K_disable_Igmp['lig_D_IGMP']}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    #Edit LI    ${li_enable_lldp_storm_igmp}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${li_enable_lldp_storm_igmp}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${li_enable_lldp_storm_igmp}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${All_ICM_Alert}    Create list
    Append to list    ${All_ICM_Alert}    ${IGMP_SNOOPING_DISABLED}
    Append to list    ${All_ICM_Alert}    ${STROM_CONTROL_DISABLED}
    Append to list    ${All_ICM_Alert}    ${TAGGED_LLDP_DISABLED}
    Sort list    ${All_ICM_Alert}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${All_ICM_Alert}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_18_LI_IS_IGMP_EDIT_ALL_EVENT-OVF223_TC_19_LI_IS_UPDATEFROMGROUP

    [Documentation]    Edit LI-Check for the Compliance alert and events in LI-Perform Update from Group-Check is the alerts cleared

    Edit LIG    ${edit_ligs_C7K_enable_Igmp_lldp_Dis_storm_loop['lig_E_IGMP_LLDP_D_storm_loop']}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    #Edit LI    ${li_D_IGMP_LLDP_E_storm_loop}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${li_D_IGMP_LLDP_E_storm_loop}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${li_D_IGMP_LLDP_E_storm_loop}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    Log to console    \nValue is:${Ethernet_settings_interval}
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}
    Log to console    \nValue1 is:${Ethernet_settings_IGMP_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}
    Log to console    \nIGMP Alert is:${IGMP_Snooping_alert}
    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    #Log to console    \nIPv6 Alert is:${IPV6}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}
    Log to console    \nIPV4 and IPv6 Alert is:${IPV4_IPV6}

    ${AllCompliance_edit_LIG}    Create list
    Append to list    ${AllCompliance_edit_LIG}    ${IGMP_Snooping_alert}
    Append to list    ${AllCompliance_edit_LIG}    ${STROM_CONTROL_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${NETWORK_LOOP_PROTECTION_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${PAUSE_FLOOD_PROTECTION_ENABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${TAGGED_LLDP_ENABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${IPV4_IPV6}
    Log to console    \nComplete Alert_list is:${AllCompliance_edit_LIG}
    Sort list    ${AllCompliance_edit_LIG}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${AllCompliance_edit_LIG}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_21_LI_LIG_IS_SAME_CHANGES

    [Documentation]    Edit LI-Check for the Compliance alert and events in LI-Edit LIG-Check the alerts are cleared

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    #Edit LI    ${li_D_IGMP_LLDP_E_storm_loop}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${li_D_IGMP_LLDP_E_storm_loop}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${li_D_IGMP_LLDP_E_storm_loop}        uri=${li_uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    # Alert Validations
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}
    Log to console    \nIGMP Alert is:${IGMP_Snooping_alert}
    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}
    Log to console    \nIPv6 Alert is:${IPV4_IPV6}

    ${AllCompliance_edit_LIG}    Create list
    Append to list    ${AllCompliance_edit_LIG}    ${IGMP_Snooping_alert}
    Append to list    ${AllCompliance_edit_LIG}    ${STROM_CONTROL_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${NETWORK_LOOP_PROTECTION_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${PAUSE_FLOOD_PROTECTION_ENABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${TAGGED_LLDP_ENABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${IPV4_IPV6}
    Sort list    ${AllCompliance_edit_LIG}
    Log to console    \nAfter sorting:${AllCompliance_edit_LIG}

    #${Alert_list}    Built the Alert list    ${AllCompliance_edit_LIG}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${AllCompliance_edit_LIG}     ${Compliance_namelist[0]}
    Log to console and logfile    ${Alert_message}

    Edit LIG    ${edit_ligs_C7K_disable_Igmp_lldp_enable_storm_loop['lig_D_IGMP_LLDP_E_storm_loop']}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

Cleanup for Internal Networks
    [Documentation]    Pre_Condition before Editing the Internal network Compliance
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${Clear_alerts}    fusion_api_delete_alert

    # Removing Uplinkset and Internal Networks
    Edit LIG    ${edit_ligs_C7K_Internal_network['lig_Ethernet_default_settings']}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}


*** Keywords ***

Get LIG member
    [Documentation]    Get LIG member
    [Arguments]    ${LIG1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}

Edit LIG
    [Documentation]   Edit LIG
    [Arguments]        ${lig}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    ${lig} =         Get LIG Member      ${LIG_1}
    ${lig_uri} =    Get LIG Uri         ${LIG_1}
    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}
    Log to console and logfile    ${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Edit LI
    [Documentation]    Edit LI
    [Arguments]    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log    ${resp}
    ${tc} =     Get From Dictionary        ${resp}    telemetryConfiguration
    ${uri} =     Get From Dictionary        ${tc}        uri
    #Set to Dictionary    ${body}    uri    ${uri}
    #Log    ${body}
    ${resp1} =     fusion_api_update_li_telemetry_configuration    body=${body}        uri=${uri}
    Log    ${resp1}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build Edit LIG Body

    [Documentation]    Build LIG body to edit LIG
    [Arguments]    ${LIGS_TB}    ${Edit_Lig}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Edit_lig_body}    Copy Dictionary    ${Edit_Lig}
    Set To Dictionary    ${Edit_lig_body}    fabricUri    ${Get_lig_body[0]['fabricUri']}
    Set To Dictionary    ${Edit_lig_body}    snmpConfiguration    ${Get_lig_body[0]['snmpConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    interconnectMapTemplate    ${Get_lig_body[0]['interconnectMapTemplate']}
    Set To Dictionary    ${Edit_lig_body}    scopesUri    ${Get_lig_body[0]['scopesUri']}
    Set To Dictionary    ${Edit_lig_body}    created    ${Get_lig_body[0]['created']}
    Set To Dictionary    ${Edit_lig_body}    eTag    ${Get_lig_body[0]['eTag']}
    Set To Dictionary    ${Edit_lig_body}    modified    ${Get_lig_body[0]['modified']}
    Set To Dictionary    ${Edit_lig_body}    uri    ${Get_lig_body[0]['uri']}
    Sleep    90

    [Return]    ${Edit_lig_body}    ${lig_uri}


Built the Alert list
    [Documentation]    Build the alert message list and sort list
    [Arguments]    ${Alert_message_compliance}
    ${Line_count}    Get Line Count    ${Alert_message_compliance}
    ${Alert_List}    Create List
    :For    ${x}    INRANGE    0    ${Line_count}
    \    ${Get_line}    Get Line    ${Alert_message_compliance}    ${x}
    \    Append to list    ${Alert_List}    ${Get_line}
    Log to console and logfile    ${Alert_List}
    Sort List    ${Alert_List}
    Log to console    \n\nAlert:${Alert_List}
    [Return]    ${Alert_List}

Get Alert and Compliance Message

    [Documentation]    Get Compliance alert messages corresponding to the activity performed
    [Arguments]    ${Alert_message_compliance}    ${Compliance_name_list}
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    ${Get_event_details}    Fusion Api Get Alerts    ${Event_uri[0]}
    \    Log to console and logfile    ${Get_event_details}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    Log to console    \nEvent Details is:${Event_Details}
    \    ${Count}    Get Length    ${Event_Details}
    \    Log to console    \nCount is:${Count}
    \    ${Event_item_value}    Get Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    Log to console    \n\nEvent Item value is:${Event_item_value}
    \    Lists Should Be Equal    ${Event_item_value}    ${Alert_message_compliance}
    [Return]    ${Event_item_value}

Get Event Item Value
    [Documentation]    Get the Event name corresponding to the compliance
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' != '${Compliance_name_list}'    Continue For Loop
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \   Log to console and logfile    ${Event_item_value}
    \    ${actual_alert}    Built the Alert list    ${Event_item_value}
    [Return]    ${actual_alert}

Validate LIG LI Consistency
    [Documentation]    Validating LIG LI Consistency status
    ...             Example:
    ...             Validate LIG LI Consistency    ${Consistency_State[0]}
    [Arguments]         ${expected}
    ${IC}=    Fusion Api Get LI
    Log to Console    \n ${IC}
    Run Keyword If  '${IC['members'][0]['consistencyStatus']}' != '${expected}'     Fail

Perform an Update From Group
    [Documentation]    Perform LI Update from group
    [Arguments]        ${li_uri}    ${timeout}=25 min     ${interval}=15s
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI Telemetryconfig
    [Documentation]    ValidateLI TaggedLLDP and RICH TLV
    [Arguments]     ${li}   ${US_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    Log to console and logfile    ${es}
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}
    Log to console and logfile    Utilization sampling <${US_val}> compared with utilization sampling in LI <${enableTelemetry}>


ValidateLIG Telemetryconfig
    [Documentation]    ValidateLIG TaggedLLDP and RICH TLV
    [Arguments]     ${lig}   ${US_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    Log to console and logfile    ${es}
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}
    Log to console and logfile    Tagged LLDP <${US_val}> compared with utilization sampling in LIG <${enableTelemetry}>


Perform an LE Update
    [Documentation]    Performing an LE update from group
    [Arguments]       ${le}     ${timeout}=35 min    ${interval}=25s
    ${resp} =       Fusion Api Update Logical Enclosure from Group    ${le}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI IGMPsnooping
    [Documentation]    ValidateLI TaggedLLDP and RICH TLV
    [Arguments]     ${li}   ${IS_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${enableIgmpSnooping} =    Get From Dictionary     ${es}   enableIgmpSnooping
    Should Be Equal As Strings    ${IS_val}    ${enableIgmpSnooping}
    Log to console and logfile    IgmpSnoopingvalue <${IS_val}> compared with enableIgmpSnooping in LI <${enableIgmpSnooping}>


ValidateLIG IGMPsnooping
    [Documentation]    ValidateLIG TaggedLLDP and RICH TLV
    [Arguments]     ${lig}   ${IS_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${enableIgmpSnooping} =    Get From Dictionary     ${es}   enableIgmpSnooping
    Should Be Equal As Strings    ${IS_val}    ${enableIgmpSnooping}
    Log to console and logfile    IgmpSnoopingvalue <${IS_val}> compared with enableIgmpSnooping in LIG <${enableIgmpSnooping}>

Get Alert and Multi Compliance Message
    [Documentation]    Get the Multi Compliance alert message according to the activity performed
    [Arguments]    ${Alert_message_compliance}    ${Multi_count}    ${Compliance_name_list}
    ${Crm_Compliance}    Create list
    ${Associate_uri_list}    Create list
    ${Each_Compliance_Alert_list}    Create list
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    Append to list    ${Crm_Compliance}    ${AlertID}
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    Append to list    ${Associate_uri_list}    ${Event_uri[0]}
    Log to console and logfile    ${Associate_uri_list}

    ${Compliance_count}    Get Length    ${Crm_Compliance}
    Run Keyword If    '${Compliance_count}' == '${Multi_count}'    Log to console and logfile    Multi_${Compliance_count}_Compliance    ELSE    Fail

    ${Complete_Compliance_alert_list}    Create list
    :For    ${x}    INRANGE    0    ${Compliance_count}
    \   ${Get_event_details}    Fusion Api Get Alerts    ${Associate_uri_list[${x}]}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Multi Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    ${Alerts_each_complaince_count}    Get Length    ${Event_item_value}
    \    ${Combined_list_each_compliance}    combine_sublist    ${Event_item_value}
    \    Append to list    ${Complete_Compliance_alert_list}    ${Combined_list_each_compliance}

    ${Complete_Compliance_alert_message}    combine_sublist    ${Complete_Compliance_alert_list}

    ${Combined_list_count}    Get Length    ${Complete_Compliance_alert_message}
    ${Compliance_list_count}    Get Length    ${Compliance_name_list}
    Run Keyword If    '${Combined_list_count}' != '${Compliance_list_count}'  Remove Duplicates    ${Complete_Compliance_alert_message}    ELSE    Sort list    ${Complete_Compliance_alert_message}

    Sort list    ${Complete_Compliance_alert_message}

    List Should Not Contain Duplicates    ${Complete_Compliance_alert_message}

    Lists Should Be Equal    ${Complete_Compliance_alert_message}    ${Alert_message_compliance}

Get Multi Event Item Value
    [Documentation]    Get Multi Event Item value corresponding to the alerts
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    ${Alerts_each_Compliance}    Create list
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' == 'correctiveAction' or '${Get_event_name}' == 'resourceUri'  Continue For Loop
    \    List Should Contain Value    ${Compliance_name_list}    ${Get_event_name}
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    ${Actual_Alert}    Built the Alert list    ${Event_item_value}
    \    Append to list    ${Alerts_each_Compliance}    ${Actual_Alert}

    [Return]    ${Alerts_each_Compliance}


Edit LI Internal Networks
    [Documentation]    Performing edit LI
    [Arguments]        ${li}        ${li_body}     ${headers}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    ${respl} =    Fusion Api Update LI Internal Networks    body=${li_body}    uri=${li_uri}    headers=${headers}
    #log to console  Editing Li with internal networks ${respl}
    ${task} =  Wait For Task   ${respl}    300s    2s
    [Return]    ${respl}

Build SNMP LIG body
    [Documentation]    Build SNMP body to edit LIG
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    modified   ${Get_lig_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    created    ${Get_lig_body[0]['snmpConfiguration']['created']}

    [Return]    ${Edit_lig_body}

Verify Interconnect State
    [Documentation]    Verify the interconnect state
    ...             Example:
    ...             Verify Interconnect State    ${interconnectname_1}    ${IC_Configured}
    [Arguments]        ${interconnectname_1}        ${IC_Configured}
    ${ic} =    Get IC    ${interconnectname_1}
    ${State} =    Get From IC        ${ic}    state
    Log to Console and logfile    ${State}
    Log to console and logfile    Interconnect state is ${interconnectname_1}:${State}
    Should Be Equal As Strings    ${State}    ${IC_Configured}

Get IC
    [Documentation]    Get IC by name
    ...             Example:
    ...             Get IC    ${ICM_NAME}
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get from IC
    [Documentation]    Get the required element from the interconnect
    ...             Example:
    ...             Get from IC    ${ic}    ${element}
    [Arguments]     ${ic}   ${element}
    ${return} =     Get From Dictionary     ${ic}   ${element}
    [Return]    ${return}

Edit LI Ethernet Settings
    [Documentation]    Edits LI
    [Arguments]        ${body}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log    ${resp}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${body}    id    ${id}
    Log    ${body}

    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    Log    ${resp1}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build LI body
    [Documentation]    Builds LI body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}
    ${lldpIpAddressMode} =              Get Variable Value  ${liedit['lldpIpAddressMode']}
    ${enableIgmpSnooping} =              Get Variable Value  ${liedit['enableIgmpSnooping']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...                                         lldpIpAddressMode=${lldpIpAddressMode}
    ...                                         enableIgmpSnooping=${enableIgmpSnooping}
    [Return]    ${body}

Verify LI/LIG Consistent Status
    [Documentation]    Verify the consistency status of
    [Arguments]    ${Expected_Consistency_Status}    ${li}=${LE}-${LIG}
    ${Li_resp}= Fusion Api Get Li
    ${l} =  Get Length  ${Li_resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Li_resp['members'][${x}]['name']}' != '${li}'        Continue For Loop
    \   Should Be Equal As Strings  ${Li_resp['members'][${x}]['consistencyStatus']}    ${Expected_Consistency_Status}
    Log to console and logfile    LI/LIG are ${Expected_Consistency_Status}.

Perform an LI Update From Group
    [Documentation]    Perform an LI Update From Group
    ...             Example:
    ...             Perform an LI Update From Group    ${li}    ${interval}
    [Arguments]       ${li}=${LE}-${LIG1}     ${timeout}=25 min    ${interval}=15s
    ${resp} =       Fusion Api Update from group    ${li}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build SNMP LI body
    [Documentation]    Build SNMP body to edit LI
    [Arguments]    ${Snmp_body}    ${True_false}
    ${Get_li}    Fusion Api Get Li
    ${Get_li_body}    Copy Dictionary    ${Get_li['members']}
    Set To Dictionary    ${Snmp_body}    modified   ${Get_li_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Snmp_body}    created    ${Get_li_body[0]['snmpConfiguration']['created']}
    Set To Dictionary    ${Snmp_body}    enabled    ${True_False}
    Set To Dictionary    ${Snmp_body}    readCommunity    ${Public}

    [Return]    ${Snmp_body}

Build Ethernet Setting LIG body
    [Documentation]    Build Ethernet settings body to edit LIG
    [Arguments]    ${Edit_lig_body}    ${True_False}
    ${Get_lig}    Fusion Api Get Li
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['modified']}
    ${Created}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['created']}
    ${Id}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['id']}
    ${Name}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['name']}
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['uri']}
    ${DependentResourceUri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    uri    ${Uri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Edit_lig_body}

Build Telementry Configuration LIG body
    [Documentation]    Build Telementry Configuration body to edit LIG
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['ligs'][0]['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     modified
    ${Created}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     created
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     uri
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    created   ${Created}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    uri   ${Uri}

    [Return]    ${Edit_lig_body}

Build Ethernet Setting LI body
    [Documentation]    Build Ethernet settings body to edit LI
    [Arguments]    ${Ether_settings}    ${True_False}    ${li}=${LE}-${LIG}
    ${Get_ICMsetting_config}    Fusion Api Get Li
    ${l} =  Get Length  ${Get_ICMsetting_config['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Get_ICMsetting_config['members'][${x}]['name']}' != '${li}'      Continue For Loop
    \   ${ICM_setting_Uri}    Get Variable Value    ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['uri']}
    \   ${Modified}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['modified']}
    \   ${Created}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['created']}
    \   ${Id}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['id']}
    \   ${Name}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['name']}
    \   ${DependentResourceUri}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    uri    ${ICM_setting_Uri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Ether_settings}

Edit Enclosure Group from variable

    [Documentation]    Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}    ${headers}
    fusion_api_appliance_setup.Log to console and logfile   \nAdding ENCLOSURE GROUP ${enc_group['name']}
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   @{words} =  Split String    ${liguri}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${liguri} =     Get LIG URI ${eg}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${Get_EG}    Fusion Api Get Enclosure Groups
    ${EG_uri}    Get Variable Value    ${Get_EG['members'][0]['uri']}
    ${Modified}    Get Variable Value   ${Get_EG['members'][0]['modified']}
    ${Created}    Get Variable Value   ${Get_EG['members'][0]['created']}
    ${Associate_uri}    Get Variable Value   ${Get_EG['members'][0]['associatedLogicalInterconnectGroups']}
    ${Scopes_Uri}    Get Variable Value   ${Get_EG['members'][0]['scopesUri']}
    ${Etag}    Get Variable Value   ${Get_EG['members'][0]['eTag']}
    Set To Dictionary    ${enc_group}    modified   ${Modified}
    Set To Dictionary    ${enc_group}    created   ${Created}
    Set To Dictionary    ${enc_group}    associatedLogicalInterconnectGroups   ${Associate_uri}
    Set To Dictionary    ${enc_group}    eTag   ${Etag}
    Set To Dictionary    ${enc_group}    scopesUri   ${Scopes_Uri}
    Set To Dictionary    ${enc_group}    uri   ${EG_uri}
    ${resp} =   fusion_api_edit_enclosure_group    body=${enc_group}    uri=${EG_uri}
    [Return]   ${resp}

