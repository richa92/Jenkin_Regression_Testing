*** Settings ***
Documentation        Feature Test:  OVF223
...                  This set of test cases is to verify the feature OVF223 related to Interconnect settings
...
Variables              data_variables.py
Library                data_variables
Resource               ../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                SSHLibrary
Library                Selenium2Library
Library                Telnet
Library                Dialogs
Library                FusionLibrary
Library                RoboGalaxyLibrary
Library                String
Variables              Expected_messages.py
Library                Multi_alert.py

*** Variables ***
${APPLIANCE_IP}                 15.212.136.134

*** Test Cases ***
Initial Setup

    [Documentation]    Edit LIG-Disable US-Check for alert message in LI
    Set Log Level    TRACE
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}

    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove All Network Sets
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks

    :For    ${Enet}    IN    @{Ethernet}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"

    ${body} =   Build LIG body      ${LIGS_TBird}
    Log to console and logfile    ${body}
    ${lig_resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s
    Run Keyword If  '${lig_resp['status_code']}' != '202'   fail    ELSE    Log to Console  \n-LIG  created successfully

    ${eg_resp}    Add Enclosure Group from variable    ${enc_group_Tbird}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  log to console   \n-EG created successfully

    ${le_resp}    Add Logical Enclosure from variable    ${Logiacl_Enclosure_Tbird}
    Run Keyword If  '${le_resp['status_code']}' != '200'  Fail    ELSE  log to console   \n-LE created successfully

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Set Global Variable    ${LIURI}    ${li_uri}

    #Ethernet_Settings
OVF223_TC_1_LIG_IS_COMPLIANCE_ALERT-OVF223_TC_2_LIG_IS_COMPLIANCE_EVENT
    [Documentation]    Edit LIG -Enable IGMP-Check for Compliance alert and events in LI
    # validation LI-LIG-disable IgmpSnooping before enable

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    # Enable IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_tbird_enable_Igmp['lig_E_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_3_LIG_IS_IGMP_ENABLE_EVENT
    [Documentation]    Edit LIG -change Enable Vlan to Enable IGMP-Check for Compliance alert and events in LI

    # EnableVlan IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_tbird_enable_vlan_Igmp['lig_E_vlan_IGMP']}

    # validation after enable IGMP - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    # Perform LE update to reflect chnages of lig in li also
    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    # validation of LIG-LI-enable IGMP
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Edit LIG    ${edit_ligs_tbird_enable_Igmp['lig_E_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_Vlan_ids} =    Get From Dictionary     ${Ethernet_settings}   igmpSnoopingVlanIds
    ${Ethernet_settings_IGMP_Vlan_ids}    Convert To String    ${Ethernet_settings_Vlan_ids}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_DISABLED_VLAN_IDS}    XXX    ${Ethernet_settings_IGMP_Vlan_ids}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_alert}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_4_LIG_IS_IGMP_DISABLE_EVENT
    [Documentation]    Edit LIG -Disable IGMP-Check for Compliance alert and events in LI

    # Preconditions-LIG-enable IGMP

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    # validation of IGMP in LIg-LI
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    # EditLIG - IGMP disable
    Edit LIG    ${edit_ligs_tbird_disable_Igmp['lig_D_IGMP']}

    # validation of IGMP in LIg
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${IGMP_SNOOPING_DISABLED}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_5_LIG_IS_IGMP_ENABLE_VLAN_EVENT
    [Documentation]    Preconditions-LIG with IGMP Disabled- Edit LIG -Enable IGMP-Check for Compliance alert and events in LI

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    # validation before enable US - LIG-LI - disable US
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Edit LIG    ${edit_ligs_tbird_enable_vlan_Igmp['lig_E_vlan_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}
    ${Ethernet_settings_Vlan_ids} =    Get From Dictionary     ${Ethernet_settings}   igmpSnoopingVlanIds
    ${Ethernet_settings_IGMP_Vlan_ids}    Convert To String    ${Ethernet_settings_Vlan_ids}

    ${Vlan_id_msg}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_VLAN_INTERVAL}    XXX    ${Ethernet_settings_IGMP_Vlan_ids}
    ${IGMP_Snooping_interval_vlanid}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${Ethernet_settings_IGMP_interval}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_interval_vlanid}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_6_LIG_IS_IGMP_ENABLE_ALL_EVENT

    [Documentation]    Edit LIG -IGMP Enable all event-Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_disable_Igmp['lig_D_IGMP']}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Edit LIG    ${edit_ligs_tbird_enable_Igmp_lldp['lig_E_IGMP_LLDP']}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}
    ${Ethernet_settings_Threshold} =    Get From Dictionary     ${Ethernet_settings}   stormControlThreshold
    ${Ethernet_settings_IGMP_stormControlThreshold}    Convert To String    ${Ethernet_settings_Threshold}
    ${Ethernet_settings_Polling} =    Get From Dictionary     ${Ethernet_settings}   stormControlPollingInterval
    ${Ethernet_settings_IGMP_stormControlPollingInterval}    Convert To String    ${Ethernet_settings_Polling}

    ${IGMP_interval}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}
    ${Strom_control_threshold}    Replace String Using Regexp   ${STROM_CONTROL_ENABLED}    XXX    ${Ethernet_settings_IGMP_stormControlThreshold}
    ${Strom_control_threshold_polling}    Replace String Using Regexp   ${Strom_control_threshold}    YYY    ${Ethernet_settings_IGMP_stormControlPollingInterval}

    ${IGMP_Alert_list}    Create list
    Append to list    ${IGMP_Alert_list}    ${IGMP_interval}
    Append to list    ${IGMP_Alert_list}    ${Strom_control_threshold_polling}
    Append to list    ${IGMP_Alert_list}    ${TAGGED_LLDP_ENABLED}

    Sort list    ${IGMP_Alert_list}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${IGMP_Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_7_LIG_IS_IGMP_ENABLE_VALN_ALL_EVENT

    [Documentation]    Edit LIG -IGMP Enable Vlan all event-Check for Compliance alert and events in LI

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    Edit LIG    ${edit_ligs_tbird_enableVlan_Igmp_lldpIPV6['lig_EVlan_IGMP_LLDPV6']}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_Vlan_ids} =    Get From Dictionary     ${Ethernet_settings}   igmpSnoopingVlanIds
    ${Ethernet_settings_IGMP_Vlan_ids}    Convert To String    ${Ethernet_settings_Vlan_ids}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_VLAN_IDS}    XXX    ${Ethernet_settings_IGMP_Vlan_ids}
    ${IPV4}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV4_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV4}    YYY    ${IPV6_ONLY}

    ${IPv4_6_Alert_list}    Create list
    Append to list    ${IPv4_6_Alert_list}    ${IGMP_Snooping_alert}
    Append to list    ${IPv4_6_Alert_list}    ${IPV4_IPV6}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${IPv4_6_Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_8_LIG_IS_LLDP_IPV4_EVENT

    [Documentation]    Edit LIG -LLDP IPv4 event-Check for Compliance alert and events in LI

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    ${edit_lig_enableigmp_ipv4} =    Copy Dictionary    ${edit_ligs_tbird_enableVlan_Igmp_lldpIPV6['lig_EVlan_IGMP_LLDPV6']}
    ${es} =    Get From Dictionary        ${edit_lig_enableigmp_ipv4}    ethernetSettings
    Set to Dictionary    ${es}    lldpIpAddressMode    IPV4

    Edit LIG    ${edit_lig_enableigmp_ipv4}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}

    ${Alert_list}    Built the Alert list    ${IPV4_IPV6}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_9_LI_IS_COMPLIANCE_ALERT-OVF223_TC_10_LI_IS_COMPLIANCE_EVENT

    [Documentation]    Edit LI -Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_disable_Igmp['lig_D_IGMP']}

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Edit LI Ethernet Settings    ${li_enable_igmp}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${IGMP_SNOOPING_DISABLED}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}


OVF223_TC_11_LI_IS_IGMP_ENABLE_EVENT

    [Documentation]    Edit LI -IGMP Enable event-Check for Compliance alert and events in LI

    # EnableVlan IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_tbird_enable_vlan_Igmp['lig_E_vlan_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_Vlan_ids} =    Get From Dictionary     ${Ethernet_settings}   igmpSnoopingVlanIds
    ${Ethernet_settings_IGMP_Vlan_ids}    Convert To String    ${Ethernet_settings_Vlan_ids}

    ${IGMP_snooping_vlan_id}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_VLAN_IDS}    XXX    ${Ethernet_settings_IGMP_Vlan_ids}

    ${Alert_list}    Built the Alert list    ${IGMP_snooping_vlan_id}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_12_LI_IS_IGMP_DISABLE_EVENT

    [Documentation]    Edit LI -IGMP disable event-Check for Compliance alert and events in LI

    # Enable IgmpSnooping-LIG
    Edit LIG    ${edit_ligs_tbird_enable_Igmp['lig_E_IGMP']}

    # validation after enable US - LIG
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    Edit LI Ethernet Settings    ${li_disable_igmp}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}

    ${Alert_list}    Built the Alert list    ${IGMP_Snooping_alert}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_13_LI_IS_IGMP_ENABLE_VLAN_EVENT

    [Documentation]    Edit LI -IGMP Enable Vlan event-Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_disable_Igmp['lig_D_IGMP']}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valF}
    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    Edit LI Ethernet Settings    ${li_enable_Vlan_igmp}

    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${IGMP_SNOOPING_DISABLED}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_14_LI_IS_IGMP_ENABLE_ALL_EVENT

    [Documentation]    Edit LI -IGMP Enable All event-Check for Compliance alert and events in LI

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valF}

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    Edit LI Ethernet Settings    ${li_enable_lldp_storm_igmp}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${All_ICM_Alert}    Create list
    Append to list    ${All_ICM_Alert}    ${IGMP_SNOOPING_DISABLED}
    Append to list    ${All_ICM_Alert}    ${STROM_CONTROL_DISABLED}
    Append to list    ${All_ICM_Alert}    ${TAGGED_LLDP_DISABLED}
    Sort list    ${All_ICM_Alert}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${All_ICM_Alert}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_15_LI_IS_IGMP_ENABLE_VLAN_ALL_EVENT

    [Documentation]    Edit LI -IGMP Enable Vlan all event-Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_enable_Igmp_lldp['lig_E_IGMP_LLDP']}

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    Edit LI Ethernet Settings    ${li_enable_vlan_lldp_storm_ipv6}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_Vlan_ids} =    Get From Dictionary     ${Ethernet_settings}   igmpSnoopingVlanIds
    ${Ethernet_settings_IGMP_Vlan_ids}    Convert To String    ${Ethernet_settings_Vlan_ids}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_DISABLED_VLAN_IDS}    XXX    ${Ethernet_settings_IGMP_Vlan_ids}
    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}

    ${Enable_vlan_Alert_list}    Create list
    Append to list    ${Enable_vlan_Alert_list}    ${IGMP_Snooping_alert}
    Append to list    ${Enable_vlan_Alert_list}    ${IPV4_IPV6}
    Sort list    ${Enable_vlan_Alert_list}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Enable_vlan_Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${Clear_alerts}    fusion_api_delete_alert

OVF223_TC_16_LI_IS_LLDP_IPV4_EVENT

    [Documentation]    Edit LI -Enable LLDP IPv4 event-Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_enableVlan_Igmp_lldpIPV6['lig_EVlan_IGMP_LLDPV6']}

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}

    ${li_enable_vlan_lldp_storm_ipv6_ipv4} =    Copy Dictionary    ${li_enable_vlan_lldp_storm_ipv6}
    Set to Dictionary    ${li_enable_vlan_lldp_storm_ipv6_ipv4}    lldpIpAddressMode    IPV4

    Edit LI Ethernet Settings    ${li_enable_vlan_lldp_storm_ipv6_ipv4}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${IPV4}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV4_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV4}    YYY    ${IPV6_ONLY}

    ${Alert_list}    Built the Alert list    ${IPV4_IPV6}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

OVF223_TC_17_LIG_IS_IGMP_EDIT_ALL_EVENT

    [Documentation]    Edit LI -IGMP All event-Check for Compliance alert and events in LI

    Edit LIG    ${edit_ligs_tbird_enable_Igmp_lldp_Dis_storm_loop['lig_E_IGMP_LLDP_D_storm_loop']}

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    Edit LIG    ${edit_ligs_tbird_disable_Igmp_lldp_enable_storm_loop['lig_D_IGMP_LLDP_E_storm_loop']}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_Threshold} =    Get From Dictionary     ${Ethernet_settings}   stormControlThreshold
    ${Ethernet_settings_IGMP_stormControlThreshold}    Convert To String    ${Ethernet_settings_Threshold}
    ${Ethernet_settings_Polling} =    Get From Dictionary     ${Ethernet_settings}   stormControlPollingInterval
    ${Ethernet_settings_IGMP_stormControlPollingInterval}    Convert To String    ${Ethernet_settings_Polling}
    ${Ethernet_settings_Tx_Interval} =    Get From Dictionary     ${Ethernet_settings}   macRefreshInterval
    ${Ethernet_settings_IGMP_Tx_Interval}    Convert To String    ${Ethernet_settings_Tx_Interval}

    ${Strom_control_threshold}    Replace String Using Regexp   ${STROM_CONTROL_ENABLED}    XXX    ${Ethernet_settings_IGMP_stormControlThreshold}
    ${Strom_control_threshold_polling}    Replace String Using Regexp   ${Strom_control_threshold}    YYY    ${Ethernet_settings_IGMP_stormControlPollingInterval}
    ${IGMP_Tx_Interval}    Replace String Using Regexp   ${NETWORK_LOOP_PROTECTION_ENABLED}    XXX    ${Ethernet_settings_IGMP_Tx_Interval}
    ${IPV4}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV4_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV4}    YYY    ${IPV6_ONLY}

    ${AllCompliance_edit_LIG}    Create list
    Append to list    ${AllCompliance_edit_LIG}    ${Strom_control_threshold_polling}
    Append to list    ${AllCompliance_edit_LIG}    ${IGMP_Tx_Interval}
    Append to list    ${AllCompliance_edit_LIG}    ${IGMP_SNOOPING_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${PAUSE_FLOOD_PROTECTION_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${TAGGED_LLDP_DISABLED}
    Append to list    ${AllCompliance_edit_LIG}    ${IPV4_IPV6}

    #${Alert_list}    Built the Alert list    ${AllCompliance_edit_LIG}    ${Multi_three_compliance_list[3]}
    Sort list    ${AllCompliance_edit_LIG}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${AllCompliance_edit_LIG}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}


OVF223_TC_18_LI_IS_IGMP_EDIT_ALL_EVENT-OVF223_TC_19_LI_IS_UPDATEFROMGROUP

    [Documentation]    Edit LI -IGMP Edit all event-Check for Compliance alert and events in LI-Update from group

    Edit LIG    ${edit_ligs_tbird_enable_Igmp_lldp_Dis_storm_loop['lig_E_IGMP_LLDP_D_storm_loop']}

    ${le_uri}    Get LE URI    ${LE}
    ${Le_update_resp}    Perform an LE Update    ${le_uri}
    Log to console and logfile    ${Le_update_resp}

    ${Clear_alerts}    fusion_api_delete_alert

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    Edit LI Ethernet Settings    ${li_D_IGMP_LLDP_E_storm_loop}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}
    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}

    ${AllCompliance_edit_LI}    Create list
    Append to list    ${AllCompliance_edit_LI}    ${IGMP_Snooping_alert}
    Append to list    ${AllCompliance_edit_LI}    ${STROM_CONTROL_DISABLED}
    Append to list    ${AllCompliance_edit_LI}    ${NETWORK_LOOP_PROTECTION_DISABLED}
    Append to list    ${AllCompliance_edit_LI}    ${PAUSE_FLOOD_PROTECTION_ENABLED}
    Append to list    ${AllCompliance_edit_LI}    ${TAGGED_LLDP_ENABLED}
    Append to list    ${AllCompliance_edit_LI}    ${IPV4_IPV6}

    #${Alert_list}    Built the Alert list    ${AllCompliance_edit_LI}    ${Multi_three_compliance_list[3]}

    Sort list    ${AllCompliance_edit_LI}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${AllCompliance_edit_LI}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    ${Clear_alerts}    fusion_api_delete_alert


OVF223_TC_21_LI_LIG_IS_SAME_CHANGES

    [Documentation]    Edit LI -Check for Compliance alert and events in LI-Edit LIG-Check that the alerts cleared

    ValidateLIG IGMPsnooping    ${LIG_1}   ${IGMP_valT}
    ValidateLI IGMPsnooping    ${LE}-${LIG_1}    ${IGMP_valT}

    Edit LI Ethernet Settings    ${li_D_IGMP_LLDP_E_storm_loop}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${IGMP_Snooping_alert}    Replace String Using Regexp   ${IGMP_SNOOPING_ENABLED_WITH_INTERVAL}    XXX    ${Ethernet_settings_IGMP_interval}
    ${IPV6}    Replace String Using Regexp   ${LLDP_IPADDRESS_MODE_MOD}    XXX    ${IPV6_ONLY}
    ${IPV4_IPV6}    Replace String Using Regexp   ${IPV6}    YYY    ${IPV4_ONLY}

    ${AllCompliance_edit_LI}    Create list
    Append to list    ${AllCompliance_edit_LI}    ${IGMP_Snooping_alert}
    Append to list    ${AllCompliance_edit_LI}    ${STROM_CONTROL_DISABLED}
    Append to list    ${AllCompliance_edit_LI}    ${NETWORK_LOOP_PROTECTION_DISABLED}
    Append to list    ${AllCompliance_edit_LI}    ${PAUSE_FLOOD_PROTECTION_ENABLED}
    Append to list    ${AllCompliance_edit_LI}    ${TAGGED_LLDP_ENABLED}
    Append to list    ${AllCompliance_edit_LI}    ${IPV4_IPV6}

    Sort list    ${AllCompliance_edit_LI}

    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${AllCompliance_edit_LI}    ${Multi_three_compliance_list[3]}
    Log to console and logfile    ${Alert_message}

    Edit LIG    ${edit_ligs_tbird_disable_Igmp_lldp_enable_storm_loop['lig_D_IGMP_LLDP_E_storm_loop']}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    ${Clear_alerts}    fusion_api_delete_alert
*** Keywords ***
Build Edit LIG Body
    [Documentation]    Build LIG Body for LIG Edit operation
    [Arguments]    ${LIGS_TB}    ${Edit_Lig}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Edit_lig_body}    Copy Dictionary    ${Edit_Lig}
    Set To Dictionary    ${Edit_lig_body}    snmpConfiguration    ${Get_lig_body[0]['snmpConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    telemetryConfiguration    ${Get_lig_body[0]['telemetryConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    ethernetSettings    ${Get_lig_body[0]['ethernetSettings']}
    Set To Dictionary    ${Edit_lig_body}    qosConfiguration    ${Get_lig_body[0]['qosConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    fabricUri    ${Get_lig_body[0]['fabricUri']}
    Set To Dictionary    ${Edit_lig_body}    interconnectMapTemplate    ${Get_lig_body[0]['interconnectMapTemplate']}
    Set To Dictionary    ${Edit_lig_body}    scopesUri    ${Get_lig_body[0]['scopesUri']}
    Set To Dictionary    ${Edit_lig_body}    created    ${Get_lig_body[0]['created']}
    Set To Dictionary    ${Edit_lig_body}    eTag    ${Get_lig_body[0]['eTag']}
    Set To Dictionary    ${Edit_lig_body}    modified    ${Get_lig_body[0]['modified']}
    Set To Dictionary    ${Edit_lig_body}    uri    ${Get_lig_body[0]['uri']}
    Sleep    10
    [Return]    ${Edit_lig_body}    ${lig_uri}

Get Alert and Compliance Message
    [Documentation]    Get Alert and compliance messages from LI
    [Arguments]    ${Alert_list}    ${Compliance_name_list}
    #${Alert_list} =    Built the Alert list    ${Alert_message_compliance}
    #Sort List    ${Alert_list}
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    ${Get_event_details}    Fusion Api Get Alerts    ${Event_uri[0]}
    \    Log to console and logfile    ${Get_event_details}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    Lists Should Be Equal    ${Event_item_value}    ${Alert_list}
    [Return]    ${Event_item_value}

Get Event Item Value
    [Documentation]    Get the Event name corresponding to the compliance
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' != '${Compliance_name_list}'    Continue For Loop
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    Log to console and logfile    ${Event_item_value}
    \    ${actual_alert}    Built the Alert list    ${Event_item_value}
    [Return]    ${actual_alert}

Build SNMP LI body
    [Documentation]    Build SNMP body for LI Edit
    [Arguments]    ${Snmp_body}    ${True_false}
    ${Get_li}    Fusion Api Get Li
    ${Get_li_body}    Copy Dictionary    ${Get_li['members']}
    Set To Dictionary    ${Snmp_body}    modified   ${Get_li_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Snmp_body}    created    ${Get_li_body[0]['snmpConfiguration']['created']}
    Set To Dictionary    ${Snmp_body}    enabled    ${True_False}


    [Return]    ${Snmp_body}

Build Ethernet Setting LIG body
    [Documentation]    Build Ethernet Setting body for LIG Edit
    [Arguments]    ${Edit_lig_body}    ${True_False}
    ${Get_lig}    Fusion Api Get Li
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['modified']}
    ${Created}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['created']}
    ${Id}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['id']}
    ${Name}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['name']}
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['uri']}
    ${DependentResourceUri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    uri    ${Uri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Edit_lig_body}

Build Telementry Configuration LIG body
    [Documentation]    Build Telementry Configuration body for LIG Edit
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TBird['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     modified
    ${Created}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     created
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     uri
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    created   ${Created}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    uri   ${Uri}

    [Return]    ${Edit_lig_body}

Edit Enclosure Group from variable

    [Documentation]    Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}    ${headers}
    fusion_api_appliance_setup.Log to console and logfile   \nAdding ENCLOSURE GROUP ${enc_group['name']}
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   @{words} =  Split String    ${liguri}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${liguri} =     Get LIG URI ${eg}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${Get_EG}    Fusion Api Get Enclosure Groups
    ${EG_uri}    Get Variable Value    ${Get_EG['members'][0]['uri']}
    ${Modified}    Get Variable Value   ${Get_EG['members'][0]['modified']}
    ${Created}    Get Variable Value   ${Get_EG['members'][0]['created']}
    ${Associate_uri}    Get Variable Value   ${Get_EG['members'][0]['associatedLogicalInterconnectGroups']}
    ${Scopes_Uri}    Get Variable Value   ${Get_EG['members'][0]['scopesUri']}
    ${Etag}    Get Variable Value   ${Get_EG['members'][0]['eTag']}
    Set To Dictionary    ${enc_group}    modified   ${Modified}
    Set To Dictionary    ${enc_group}    created   ${Created}
    Set To Dictionary    ${enc_group}    associatedLogicalInterconnectGroups   ${Associate_uri}
    Set To Dictionary    ${enc_group}    eTag   ${Etag}
    Set To Dictionary    ${enc_group}    scopesUri   ${Scopes_Uri}
    Set To Dictionary    ${enc_group}    uri   ${EG_uri}
    ${resp} =   fusion_api_edit_enclosure_group    body=${enc_group}    uri=${EG_uri}    headers=${headers}
    [Return]   ${resp}

Build Ethernet Setting LI body
    [Documentation]    Build Ethernet Setting body for LI Edit
    [Arguments]    ${Ether_settings}    ${True_False}    ${li}=${LE}-${LIG}
    ${Get_ICMsetting_config}    Fusion Api Get Li
    ${l} =  Get Length  ${Get_ICMsetting_config['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Get_ICMsetting_config['members'][${x}]['name']}' != '${li}'      Continue For Loop
    \   ${ICM_setting_Uri}    Get Variable Value    ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['uri']}
    \   ${Modified}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['modified']}
    \   ${Created}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['created']}
    \   ${Id}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['id']}
    \   ${Name}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['name']}
    \   ${DependentResourceUri}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    uri    ${ICM_setting_Uri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Ether_settings}

Build Qos body
    [Documentation]    Build for LI/LIG Edit
    [Arguments]    ${Qos_Fcoe}    ${Qos_classname}    ${Share}    ${Total_band}    ${class_enable}    ${Dot1p_value}
    ${Qos_body}    Copy Dictionary    ${Qos_Fcoe}
    ${Qos_traffic_count}    Get Length    ${Qos_body['activeQosConfig']['qosTrafficClassifiers']}
    :For    ${x}    INRANGE    0    ${Qos_traffic_count}
    \     ${Class_name}    Get From Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    className
    \     Run Keyword If    '${Class_name}'!='${Qos_classname}'    Continue for loop
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    bandwidthShare    ${Share}
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    enabled    ${class_enable}
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    egressDot1pValue    ${Dot1p_value}
    Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][0]['qosTrafficClass']}    bandwidthShare    ${Total_band}
    [Return]    ${Qos_body}

Perform an LI Update From Group
    [Documentation]    Perform an LI Update From Group
    ...             Example:
    ...             Perform an LI Update From Group    ${li}    ${interval}
    [Arguments]       ${li}=${LE}-${LIG1}     ${timeout}=45 min    ${interval}=15s
    ${resp} =       Fusion Api Update from group    ${li}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Verify LI/LIG Consistent Status
    [Documentation]    Get LI for Verification of LI/LIG Consistency status
    [Arguments]    ${Expected_Consistency_Status}    ${li}=${LE}-${LIG}
    Sleep    90
    ${Li_resp}= Fusion Api Get Li
    ${l} =  Get Length  ${Li_resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Li_resp['members'][${x}]['name']}' != '${li}'        Continue For Loop
    \   Should Be Equal As Strings  ${Li_resp['members'][${x}]['consistencyStatus']}    ${Expected_Consistency_Status}
    Log to console and logfile    LI/LIG are ${Expected_Consistency_Status}.

Verify Interconnect State
    [Documentation]    Verify the interconnect state
    ...             Example:
    ...             Verify Interconnect State    ${interconnectname_1}    ${IC_Configured}
    [Arguments]        ${interconnectname_1}        ${IC_Configured}
    ${ic} =    Get IC    ${interconnectname_1}
    ${State} =    Get From IC        ${ic}    state
    Log to Console and logfile    ${State}
    Log to console and logfile    Interconnect state is ${interconnectname_1}:${State}
    Should Be Equal As Strings    ${State}    ${IC_Configured}

Get IC
    [Documentation]    Get IC by name
    ...             Example:
    ...             Get IC    ${ICM_NAME}
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get from IC
    [Documentation]    Get the required element from the interconnect
    ...             Example:
    ...             Get from IC    ${ic}    ${element}
    [Arguments]     ${ic}   ${element}
    ${return} =     Get From Dictionary     ${ic}   ${element}
    [Return]    ${return}

Edit LIG Internal Networks
    [Documentation]    Editing LIG
    ...             Example:
    ...             Edit LIG    ${lig}
    [Arguments]    ${lig}
    ${body} =   Build LIG body    ${lig}
    log to console  Editing Li with snmp ${body}
    #${lig} =        Get LIG Member      ${LIGname}
    #${lig_uri} =    Get LIG Uri         ${LIGname}
    #${resp} =   Fusion Api Edit LIG    body=${body}    uri=${lig_uri}
    [Return]    ${body}

Create LIG
    [Documentation]    Suite Setup Tasks
    [Arguments]        ${body1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Log to console and logfile    \n-Creating LIG ${body1}
    ${body}    Build LIG body    ${body1}
    Log to console and logfile    \n-Creating LIG ${body}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    [Return]    ${resp}

Get LIG member
    [Documentation]    Get LIG member
    [Arguments]    ${LIG1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}

Edit LIG
    [Documentation]   Edits LIG
    [Arguments]        ${lig}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    ${lig} =         Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}
    Log to console and logfile    ${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Validate LIG LI Consistency
    [Documentation]    Validating LIG LI Consistency status
    ...             Example:
    ...             Validate LIG LI Consistency    ${Consistency_State[0]}
    [Arguments]         ${expected}
    ${IC}=    Fusion Api Get LI
    Log to Console    \n ${IC}
    Run Keyword If  '${IC['members'][0]['consistencyStatus']}' != '${expected}'     Fail

Edit LI
    [Documentation]    Edits LI
    [Arguments]    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log    ${resp}
    ${tc} =     Get From Dictionary        ${resp}    telemetryConfiguration
    ${uri} =     Get From Dictionary        ${tc}        uri
    #Set to Dictionary    ${body}    uri    ${uri}
    #Log    ${body}
    ${resp1} =     fusion_api_update_li_telemetry_configuration    body=${body}        uri=${uri}
    Log    ${resp1}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Perform an Update From Group
    [Documentation]    Performs an LI update form group
    [Arguments]        ${li_uri}    ${timeout}=45 min     ${interval}=15s
    # ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI Telemetryconfig
    [Documentation]    ValidateLI utilization sampling-Telemetry configuration
    [Arguments]     ${li}   ${US_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    Log to console and logfile    ${es}
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}
    Log to console and logfile    Utilization sampling <${US_val}> compared with utilization sampling in LI <${enableTelemetry}>


ValidateLIG Telemetryconfig
    [Documentation]    ValidateLIG utilization sampling-Telemetry configuration
    [Arguments]     ${lig}   ${US_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    Log to console and logfile    ${es}
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}
    Log to console and logfile    Utilization sampling <${US_val}> compared with utilization sampling in LIG <${enableTelemetry}>

Perform an LE Update
    [Documentation]    Performing an LE update from group
    [Arguments]       ${le}     ${timeout}=45 min    ${interval}=25s
    ${resp} =       Fusion Api Update Logical Enclosure from Group    ${le}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Get Qos Classifiers Value
    [Documentation]    Get Qos Classifiers Value for LIG Edit
    [Arguments]    ${Class_Name_qos}    ${Parameter}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TBird['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members'][0]['qosConfiguration']['activeQosConfig']['qosTrafficClassifiers']}
    ${Qos_classifier_count}    Get Length    ${Get_lig_body}

    :For    ${x}    INRANGE    0    ${Qos_classifier_count}
    \    ${classname}    Get From Dictionary    ${Get_lig_body[${x}]['qosTrafficClass']}    className
    \    Run Keyword If    '${classname}' != '${Class_Name_qos}'    Continue For Loop
    \    ${Qos_traffic_Value}    Get From Dictionary    ${Get_lig_body[${x}]['qosTrafficClass']}    ${Parameter}
    \    ${Qos_traffic_classifier_Value}    Convert To String    ${Qos_traffic_Value}

    [Return]    ${Qos_traffic_classifier_Value}

Get Qos Classifiers Value LI
    [Documentation]    Get Qos Classifiers Value for LI Edit
    [Arguments]    ${Class_Name_qos}    ${Parameter}
    ${Get_li}    Fusion Api Get Li
    ${Get_li_body}    Copy Dictionary    ${Get_li['members'][0]['qosConfiguration']['activeQosConfig']['qosTrafficClassifiers']}
    ${Qos_classifier_count}    Get Length    ${Get_li_body}

    :For    ${x}    INRANGE    0    ${Qos_classifier_count}
    \    ${classname}    Get From Dictionary    ${Get_li_body[${x}]['qosTrafficClass']}    className
    \    Run Keyword If    '${classname}' != '${Class_Name_qos}'    Continue For Loop
    \    ${Qos_traffic_Value}    Get From Dictionary    ${Get_li_body[${x}]['qosTrafficClass']}    ${Parameter}
    \    ${Qos_traffic_classifier_Value}    Convert To String    ${Qos_traffic_Value}

    [Return]    ${Qos_traffic_classifier_Value}

Edit LI Ethernet Settings
    [Documentation]    Edits LI
    [Arguments]        ${body}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    #${body} =    Build LI body    ${body}
    Log    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    Log    ${resp}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id
    Log        ${id}
    Set to Dictionary    ${body}    id    ${id}
    Log    ${body}

    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}
    Log    ${resp1}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build LI body
    [Documentation]    Builds LI body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}
    ${lldpIpAddressMode} =              Get Variable Value  ${liedit['lldpIpAddressMode']}
    ${enableIgmpSnooping} =              Get Variable Value  ${liedit['enableIgmpSnooping']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...                                         lldpIpAddressMode=${lldpIpAddressMode}
    ...                                         enableIgmpSnooping=${enableIgmpSnooping}
    [Return]    ${body}

ValidateLI IGMPsnooping
    [Documentation]    ValidateLI IGMP snooping attribute
    [Arguments]     ${li}   ${IS_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${enableIgmpSnooping} =    Get From Dictionary     ${es}   enableIgmpSnooping
    Should Be Equal As Strings    ${IS_val}    ${enableIgmpSnooping}
    Log to console and logfile    IgmpSnoopingvalue <${IS_val}> compared with enableIgmpSnooping in LI <${enableIgmpSnooping}>

ValidateLIG IGMPsnooping
    [Documentation]    ValidateLIG IGMP snooping attribute
    [Arguments]     ${lig}   ${IS_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log to console and logfile     ${getresp}
    ${es} =     Get From Dictionary     ${getresp}  ethernetSettings
    Log to console and logfile    ${es}
    ${enableIgmpSnooping} =    Get From Dictionary     ${es}   enableIgmpSnooping
    Should Be Equal As Strings    ${IS_val}    ${enableIgmpSnooping}
    Log to console and logfile    IgmpSnoopingvalue <${IS_val}> compared with enableIgmpSnooping in LIG <${enableIgmpSnooping}>

Build SNMP body
    [Documentation]    Build SNMP body for LIG Edit
    [Arguments]    ${Edit_lig_body}     ${True_False}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['ligs'][0]['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    modified   ${Get_lig_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    created    ${Get_lig_body[0]['snmpConfiguration']['created']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    enabled    ${True_False}
    #Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    readCommunity    ${Public}

    [Return]    ${Edit_lig_body}

Login to OneView via REST
    [Documentation]     Login to the appliance with the credentials
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Get Alert and Multi Compliance Message
    [Documentation]    Get Alert Messages from Multi Compliance Alerts
    [Arguments]    ${Alert_message_compliance}    ${Multi_count}    ${Compliance_name_list}
    ${Crm_Compliance}    Create list
    ${Associate_uri_list}    Create list
    ${Each_Compliance_Alert_list}    Create list
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    Append to list    ${Crm_Compliance}    ${AlertID}
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    Append to list    ${Associate_uri_list}    ${Event_uri[0]}
    Log to console and logfile    ${Associate_uri_list}

    ${Compliance_count}    Get Length    ${Crm_Compliance}
    Run Keyword If    '${Compliance_count}' == '${Multi_count}'    Log to console and logfile    Multi_${Compliance_count}_Compliance    ELSE    Fail

    ${Complete_Compliance_alert_list}    Create list
    :For    ${x}    INRANGE    0    ${Compliance_count}
    \   ${Get_event_details}    Fusion Api Get Alerts    ${Associate_uri_list[${x}]}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Multi Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    ${Alerts_each_complaince_count}    Get Length    ${Event_item_value}
    \    ${Combined_list_each_compliance}    combine_sublist    ${Event_item_value}
    \    Append to list    ${Complete_Compliance_alert_list}    ${Combined_list_each_compliance}

    ${Complete_Compliance_alert_message}    combine_sublist    ${Complete_Compliance_alert_list}

    ${Combined_list_count}    Get Length    ${Complete_Compliance_alert_message}
    ${Compliance_list_count}    Get Length    ${Compliance_name_list}
    Run Keyword If    '${Combined_list_count}' != '${Compliance_list_count}'  Remove Duplicates    ${Complete_Compliance_alert_message}    ELSE    Sort list    ${Complete_Compliance_alert_message}

    Sort list    ${Complete_Compliance_alert_message}

    #Remove Duplicates    ${Complete_Compliance_alert_message}

    List Should Not Contain Duplicates    ${Complete_Compliance_alert_message}

    Lists Should Be Equal    ${Complete_Compliance_alert_message}    ${Alert_message_compliance}

Get Multi Event Item Value
    [Documentation]    Get Event Item Values from Multi Compliance Alert
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    ${Alerts_each_Compliance}    Create list
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' == 'correctiveAction' or '${Get_event_name}' == 'resourceUri'  Continue For Loop
    \    List Should Contain Value    ${Compliance_name_list}    ${Get_event_name}
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    ${Actual_Alert}    Built the Alert list    ${Event_item_value}
    \    Append to list    ${Alerts_each_Compliance}    ${Actual_Alert}

    [Return]    ${Alerts_each_Compliance}

Built the Alert list

    [Documentation]    Building the Alert list for Compliance alert verification
    [Arguments]    ${Qos_compliance_alert}

    ${Line_count}    Get Line Count    ${Qos_compliance_alert}
    ${Alert_List}    Create List
    :For    ${x}    INRANGE    0    ${Line_count}
    \    ${Get_line}    Get Line    ${Qos_compliance_alert}    ${x}
    \    Append to list    ${Alert_List}    ${Get_line}
    Sort List    ${Alert_List}
    Log to console and logfile    ${Alert_List}

    [Return]    ${Alert_List}

Edit LI Internal Networks
    [Documentation]    Performing edit LI in Internal Networks Event
    [Arguments]        ${li}        ${li_body}     ${headers}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    ${respl} =    Fusion Api Update LI Internal Networks    body=${li_body}    uri=${li_uri}    headers=${headers}
    #log to console  Editing Li with internal networks ${respl}
    ${task} =  Wait For Task   ${respl}    300s    2s
    [Return]    ${respl}

Build SNMP LIG body
    [Documentation]    Build SNMP body for LIG Edit
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    modified   ${Get_lig_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    created    ${Get_lig_body[0]['snmpConfiguration']['created']}

    [Return]    ${Edit_lig_body}

Build Uplink set body

    [Documentation]    Build Uplink set body for LI Edit
    [Arguments]    ${Edit_LI_US}    ${LIURI}

    ${uplink_resp}    Fusion Api Get Uplink Set    param=?filter="'name'=='${Edit_LI_US['name']}'"
    ${upset_members}    Get Variable Value    ${uplink_resp['members'][0]}
    ${upset_uri}    Get Variable Value    ${upset_members['uri']}
    ${US_Body}    Copy Dictionary    ${Edit_LI_US}
    Set To Dictionary    ${US_Body}    uri    ${upset_uri}
    Set To Dictionary    ${US_Body}    logicalInterconnectUri    ${LIURI}

    [Return]    ${US_Body}    ${upset_uri}