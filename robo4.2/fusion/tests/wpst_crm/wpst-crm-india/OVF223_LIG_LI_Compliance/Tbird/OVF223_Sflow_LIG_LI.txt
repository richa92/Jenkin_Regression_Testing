*** Settings ***
Documentation        Feature Test:  OVF223
...                  This set of test cases is to verify the feature OVF223 related to Interconnect settings
...
Variables              data_variables.py
Library                data_variables
Resource               ../../../../resource/fusion_api_all_resource_files.txt
Library                Collections
Library                json
Library                OperatingSystem
Library                SSHLibrary
Library                Selenium2Library
Library                Telnet
Library                Dialogs
Library                FusionLibrary
Library                RoboGalaxyLibrary
Library                String
Variables              Expected_messages.py
Library                Multialert.py

*** Variables ***
${APPLIANCE_IP}                 15.212.136.164

*** Test Cases ***

Initial setup
    [Documentation]    Creating initial setup
    Set Log Level    TRACE
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}

    Clean OV
    Create Subnet

    # Adding Ethernet network with subnet_ret
    Set to dictionary    ${ethnets[0]}    subnetUri        ${net_uri1}
    :For    ${Enet}    IN    @{ethnets}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"

    ${body} =   Build LIG body      ${LIG_sFlow['lig_sFlow_setup']}

    ${lig_resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s
    Run Keyword If  '${lig_resp['status_code']}' != '202'   fail    ELSE    Log    \n-LIG created successfully

    ${Enc_Body}     Copy Dictionary     ${enc_group_Tbird}
    ${eg_resp}    Add Enclosure Group from variable    ${Enc_Body}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  Log    \n-EG created successfully
    ${LE_Body}     Copy Dictionary     ${Logiacl_Enclosure_Tbird}
    ${le_resp}    Add Logical Enclosure from variable    ${LE_Body}
    Run Keyword If  '${le_resp['status_code']}' != '200'  Fail    ELSE  Log    \n-LE created successfully


OVF223_TC_1_LIG_SFLOW_ENABLE Verify that Enabling the Slow in LIG creates an event in LI
    [Documentation]    Enabling sFlow in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}


    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_ENABLED}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_2_LIG_SFLOW_DISABLE Verify that disabling the Slow in LIG creates an event in LI
    [Documentation]    Disabling sFlow in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valF}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valF}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_DISABLED}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${sFlow_valF}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_3_LIG_SFLOW_AGENTIP_STATIC Verify that by Changing the Agent IP from DHCP to IP Static will create an Event in LI
    [Documentation]    Change Agent IP to Static in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[1]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_AGENT_CONFIG_IP_MODE}    XXX    ${SFLOW_DHCP}
    ${Sflow_mode_to_static}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${SFLOW_STATIC}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_to_static}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${sFlow_valT}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_4_LIG_SFLOW_AGENTIP_IPPOOL Verify that by Changing the Agent IP from DHCP to IP Pool will create an Event in LI
    [Documentation]    Change Agent IP to IP Pool in LIG and verify alerts

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[2]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_AGENT_CONFIG_IP_MODE}    XXX    ${SFLOW_DHCP}
    ${Sflow_mode_to_ip_pool}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${SFLOW_IP_POOL}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_to_ip_pool}
    # check for events

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_5_LIG_SFLOW_COLLECTOR Verify that by by adding a Collector in the LIG will create an Event in LI
    [Documentation]   Add collector in LIG and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_ADD}    Replace String Using Regexp   ${SFLOW_COLLECTOR_ADDED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_ADD}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_6_LIG_SFLOW_COLLECTOR_EDIT_NAME Verify that by by editing the collector name from collect1 to Collect_edit in the LIG will create an Event in LI
    [Documentation]   Edit collector name in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_name}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}


    ${SFLOW_COLLECTOR_NAME}    Replace String Using Regexp   ${SFLOW_COLLECTOR_NAME_MOD}    YYY    ${sflow_add_collector[0]['name']}
    ${SFLOW_COLLECTOR_NAME_EDIT}    Replace String Using Regexp   ${SFLOW_COLLECTOR_NAME}    ZZZ    ${sflow_edit_collector_name[0]['name']}
    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_NAME_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_7_LIG_SFLOW_COLLECTOR_EDIT_DATAGRAM Verify that by by editing the Datagram size in LIG will create an Event in LI
    [Documentation]   Edit collector datagram size in LIG and verify alerts
    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${sflow} =     Get From Dictionary     ${getresp}  sflowConfiguration
    ${sflow_collector_maxDatagramSize} =    Get From Dictionary     ${sflow['sflowCollectors'][0]}   maxDatagramSize
    ${split_port_maxDatagramSize}     include_thousand_sep    ${sflow_collector_maxDatagramSize}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_datagram}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_DATAGRAM}    Replace String Using Regexp   ${SFLOW_COLLECTOR_DATAGRAM_MOD}    XXX    ${sflow_edit_collector_enable[0]['name']}
    ${SFLOW_COLLECTOR_DATAGRAM}    Replace String Using Regexp   ${SFLOW_DATAGRAM}    YYY    ${split_port_maxDatagramSize}
    ${SFLOW_COLLECTOR_DATAGRAM_EDIT}    Replace String Using Regexp   ${SFLOW_COLLECTOR_DATAGRAM}    ZZZ    ${sflow_edit_collector_datagram[0]['maxDatagramSize']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_DATAGRAM_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_8_LIG_SFLOW_COLLECTOR_EDIT_HEADER_256 Verify that by by editing the Header size in LIG will create an Event in LI
    [Documentation]   Edit collector header size to 256 in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_256}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}
    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    maxHeaderSize
    ${sflow_Mode}    Convert to String   ${sflow}

    ${sflow_name} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_name}"

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${sflow_Mode}

    ${value_new} =     Get From Dictionary     ${sflowCollectors_header_256[0]}    maxHeaderSize

    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${value_new}

    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_9_LIG_SFLOW_COLLECTOR_EDIT_HEADER_512 Verify that by by editing the Header size in LIG will create an Event in LI
    [Documentation]   Edit collector header size to 512 in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_512}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}
    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    maxHeaderSize
    ${sflow_Mode}    Convert to String   ${sflow}

    ${sflow_name} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_name}"

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${sflow_Mode}

    ${value_new} =     Get From Dictionary     ${sflowCollectors_header_512[0]}    maxHeaderSize

    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${value_new}

    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_10_LIG_SFLOW_COLLECTOR_EDIT_HEADER_1024 Verify that by by editing the Header size in LIG will create an Event in LI
    [Documentation]   Edit collector header size to 1024 in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_1024}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}
    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    maxHeaderSize
    ${sflow_Mode}    Convert to String   ${sflow}
    ${sflow_name} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${sflow} =     Get From Dictionary     ${getresp}  sflowConfiguration
    ${maxHeaderSize} =    Get From Dictionary     ${sflow['sflowCollectors'][0]}   maxHeaderSize
    ${split_maxHeaderSize}     include_thousand_sep    ${maxHeaderSize}


    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_name}"

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${sflow_Mode}

    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${split_maxHeaderSize}

    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_12_LIG_SFLOW_COLLECTOR_EDIT_DISABLE Verify that by by editing the collection and making it disable in LIG will create an Event in LI
    [Documentation]   Disable collector in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_disable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_DISABLE}    Replace String Using Regexp   ${SFLOW_COLLECTOR_COLLECTION_DISABLED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_DISABLE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_11_LIG_SFLOW_COLLECTOR_EDIT_ENABLE Verify that by by editing the collection and making it enable in LIG will create an Event in LI
    [Documentation]   Enable collector in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}


    ${SFLOW_COLLECTOR_ENABLE}    Replace String Using Regexp   ${SFLOW_COLLECTOR_COLLECTION_ENABLED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_ENABLE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_14_LIG_SFLOW_COLLECTOR_EDIT_PORT Verify that by by editing the Port in LIG will create an Event in LI
    [Documentation]   Enable collector Port in LIG and verify alerts

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${sflow} =     Get From Dictionary     ${getresp}  sflowConfiguration
    ${sflow_collector_port} =    Get From Dictionary     ${sflow['sflowCollectors'][0]}   port
    ${split_port_inital}     include_thousand_sep    ${sflow_collector_port}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_port_edit}

    ${lig_uri} =     Get LIG URI   ${LIG_1}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${sflow} =     Get From Dictionary     ${getresp}  sflowConfiguration
    ${sflow_collector_port} =    Get From Dictionary     ${sflow['sflowCollectors'][0]}   port
    ${split_port_update}     include_thousand_sep    ${sflow_collector_port}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${String_replace}    Replace String Using Regexp   ${SFLOW_COLLECTOR_PORT_MOD}    XXX    ${sflow_add_collector[0]['name']}
    ${SFLOW_COLLECTOR_EDIT}    Replace String Using Regexp   ${String_replace}    YYY    ${split_port_inital}
    ${SFLOW_COLLECTOR_PORT_EDIT}    Replace String Using Regexp   ${SFLOW_COLLECTOR_EDIT}    ZZZ    ${split_port_update}


    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_PORT_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_13_LIG_SFLOW_COLLECTOR_DELETE Verify that by by Deleting an existing collector in LIG will create an Event in LI
    [Documentation]   Delete collector in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_REMOVED}    Replace String Using Regexp   ${SFLOW_COLLECTOR_REMOVED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_REMOVED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_15_LIG_SFLOW_2_COLLECTOR Verify that by Adding the 2nd collector in LIG will create an Event in LI
    [Documentation]   Add second collector in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_2nd_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_ADDED}    Replace String Using Regexp   ${SFLOW_COLLECTOR_ADDED}    XXX    ${sflow_add_2nd_collector[1]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_16_LIG_SFLOW_PORT_ADD Verify that by Adding a Port in LIG will create an Event in LI
    [Documentation]   Add second collector in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_PORT_ADDED}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_ADDED}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_PORT_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_18_LIG_SFLOW_PORT_SAMPLING_DISABLE Verify that by disabling the sampling in LIG will create an Event in LI
    [Documentation]   Disable sampling in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_disable}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_PORT_ADDED}    Replace String Using Regexp   ${SFLOW_SAMPLING_CONFIGURATION_REMOVED}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_PORT_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_17_LIG_SFLOW_PORT_SAMPLING_ENABLE Verify that by enabling the samplingin LIG will create an Event in LI
    [Documentation]   Enable sampling in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_PORT_ADDED}    Replace String Using Regexp   ${SFLOW_SAMPLING_CONFIGURATION_ADDED}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_PORT_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_19_LIG_SFLOW_PORT_SAMPLING_EGRESS Verify that by changing direction to Egress in LIG will create an Event in LI
    [Documentation]   Edit sampling direction to Egress in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_egress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[1]}
    ${SFLOW_SAMPLING_EGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[0]}
    ${SFLOW_SAMPLING_EGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_EGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_EGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_20_LIG_SFLOW_PORT_SAMPLING_INGRESS Verify that by changing direction to Ingress in LIG will create an Event in LI
    [Documentation]   Edit sampling direction to Ingress in LIG and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[0]}
    ${SFLOW_SAMPLING_IGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[2]}
    ${SFLOW_SAMPLING_IGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_IGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_IGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_21_LIG_SFLOW_PORT_SAMPLING_BOTH Verify that by changing direction to Both in LIG will create an Event in LI
    [Documentation]   Edit sampling direction to Both in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[2]}
    ${SFLOW_SAMPLING_IGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[1]}
    ${SFLOW_SAMPLING_IGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_IGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_IGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_22_LIG_SFLOW_PORT_SAMPLING_RATE Verify that by changing Rate in LIG will create an Event in LI
    [Documentation]   Edit sampling rate in LIG and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_rate_edit}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${rate}     Convert to integer    ${sflow_ports_sampling_rate_edit[0]['sflowConfigurationModes'][0]['samplingRate']}

    ${split_port_rate}     include_thousand_sep    ${rate}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_RATE_MOD}    XXX    ${split_port_rate}
    ${SFLOW_SAMPLING_RATE_EDIT}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_RATE_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}         ${sflow_edit_collector_enable}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_24_LIG_SFLOW_PORT_POLLING_DISABLE Verify that by changing Polling to disable in LIG will create an Event in LI
    [Documentation]   Disable polling in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_polling_disable}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_POLLING_DISABLE}    Replace String Using Regexp   ${SFLOW_POLLING_CONFIGURATION_REMOVED}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_POLLING_DISABLE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_23_LIG_SFLOW_PORT_POLLING_ENABLE Verify that by changing Polling to enable in LIG will create an Event in LI
    [Documentation]  Enable polling in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}


    ${SFLOW_POLLING_ENABLE}    Replace String Using Regexp   ${SFLOW_POLLING_CONFIGURATION_ADDED}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_POLLING_ENABLE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_25_LIG_SFLOW_PORT_ADD_1_PORT Verify that by adding a single port in LIG will create an Event in LI

    [Documentation]   Add single port in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_single_port_add}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SINGLE_PORT_ADD}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_ADDED}    XXX    ${Interconnect_1}:${sflow_ports_single_port_add[1]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SINGLE_PORT_ADD}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}         ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_26_LIG_SFLOW_PORT_ADD_MULTIPLE_PORT Verify that by adding Multiple porta in LIG will create an Event in LI
    [Documentation]   Add muliple port in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SINGLE_PORT_ADD}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_ADDED}    XXX    ${Interconnect_1}:${sflow_ports_single_port_add[1]['portName']},${sflow_ports_multiple_port_add[2]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SINGLE_PORT_ADD}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

OVF223_TC_28_LIG_SFLOW_PORT_DELETE_MULTIPLE_PORT Verify that by Deleting 2 ports in LIG will create an Event in LI
    [Documentation]   Deleting 2 ports in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_edit_collector_enable}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SINGLE_PORT_ADD}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_REMOVED}    XXX    ${Interconnect_1}:${sflow_ports_multiple_port_add[2]['portName']},${sflow_ports_single_port_add[1]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SINGLE_PORT_ADD}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_27_LIG_SFLOW_PORT_EDIT_COLLECTOR Verify that by edit and chenaging the collector 1 to collector 2 in ports in LIG will create an Event in LI
    [Documentation]   Change collector 1 to collector 2 in LIG and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_2nd_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_collector2}     ${sflow_add_2nd_collector}

    ${SFLOW_PORT}    Replace String Using Regexp   ${SFLOW_POLLING_COLLECTOR_MOD}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}
    ${SFLOW_POLLING_COLLECTOR_CHANGE}    Replace String Using Regexp   ${SFLOW_PORT}    YYY    ${sflow_edit_collector_name[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_POLLING_COLLECTOR_CHANGE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_29_LIG_SFLOW_SAME_CHANGES_LIG_LI Verify that by adding changes in LI will clear the events in LI
    [Documentation]   Applying same changes in LI and verify that alerts are being cleared
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs

    ${body} =   Build LIG body      ${LIG_sFlow['lig_sFlow_setup']}

    ${lig_resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s
    Run Keyword If  '${lig_resp['status_code']}' != '202'   fail    ELSE    Log    \n-LIG  created successfully
    ${Enc_Body}     Copy Dictionary     ${enc_group_Tbird}
    ${eg_resp}    Add Enclosure Group from variable    ${Enc_Body}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  Log    \n-EG created successfully
    ${LE_Body}     Copy Dictionary     ${Logiacl_Enclosure_Tbird}
    ${le_resp}    Add Logical Enclosure from variable    ${LE_Body}
    Run Keyword If  '${le_resp['status_code']}' != '200'  Fail    ELSE  Log    \n-LE created successfully

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_ADD}    Replace String Using Regexp   ${SFLOW_COLLECTOR_ADDED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_ENABLED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_add_collector}

    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

# ############################### LI Scenarios############################################

OVF223_TC_30_LI_SFLOW_UFG Verify that by UFG LI will clear the events in LI
    [Documentation]   Perform UFG in LI and verify that alerts are being cleared
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs

    ${body} =   Build LIG body      ${LIG_sFlow['lig_sFlow_setup']}

    ${lig_resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s
    Run Keyword If  '${lig_resp['status_code']}' != '202'   fail    ELSE    Log    \n-LIG  created successfully
    ${Enc_Body}     Copy Dictionary     ${enc_group_Tbird}
    ${eg_resp}    Add Enclosure Group from variable    ${Enc_Body}
    Run Keyword If  '${eg_resp['status_code']}' != '201'  Fail    ELSE  Log   \n-EG created successfully
    ${LE_Body}     Copy Dictionary     ${Logiacl_Enclosure_Tbird}
    ${le_resp}    Add Logical Enclosure from variable    ${LE_Body}
    Run Keyword If  '${le_resp['status_code']}' != '200'  Fail    ELSE  Log   \n-LE created successfully

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_ENABLED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts


OVF223_TC_32_LI_SFLOW_DISABLE Verify that disabling the Slow in LI creates an event in LI
    [Documentation]   Disable sFlow in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valT}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valF}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

OVF223_TC_31_LI_SFLOW_ENABLE Verify that Enabling the Slow in LI creates an event in LI
    [Documentation]   Enable sFlow in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valF}    ${sflowPorts_initial}     ${sflowCollectors_initial}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    ValidateLI sflowConfiguration    ${LE}-${LIG_1}   ${IGMP_valF}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Alert_list}    Built the Alert list    ${SFLOW_CONFIGURATION_DISABLED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_33_LI_SFLOW_AGENTIP_STATIC Verify that by Changing the Agent IP from DHCP to IP Static will create an Event in LI
    [Documentation]   Change AgentIP to static in LI and verify alerts
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data_static}    ${sFlow_net}     ${ipMode[1]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_AGENT_CONFIG_IP_MODE}    XXX    ${SFLOW_STATIC}
    ${Sflow_mode_to_static}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${SFLOW_DHCP}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_to_static}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}


OVF223_TC_34_LI_SFLOW_AGENTIP_IPPOOL Verify that by Changing the Agent IP from DHCP to IP Pool will create an Event in LI
    [Documentation]   Change AgentIP to static in LI and verify alerts
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[2]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_AGENT_CONFIG_IP_MODE}    XXX    ${SFLOW_IP_POOL}

    ${Sflow_mode_to_ip_pool}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${SFLOW_DHCP}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_to_ip_pool}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_35_LI_SFLOW_COLLECTOR Verify that by by adding a Collector in LI will create an Event in LI
    [Documentation]   Add collector in LI and verify alerts
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_AGENT_CONFIG_IP_MODE}    XXX    ${SFLOW_DHCP}

    ${SFLOW_COLLECTOR_ADDED}    Replace String Using Regexp   ${SFLOW_COLLECTOR_ADDED}    XXX    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_ADDED}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_36_LI_SFLOW_COLLECTOR_EDIT_NAME Verify that by by editing the collector name from collect1 to Collect_edit in LI will create an Event in LI
    [Documentation]   Edit collector name in LI and verify alerts
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_name}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_COLLECTOR_NAME}    Replace String Using Regexp   ${SFLOW_COLLECTOR_NAME_MOD}    YYY    ${sflow_edit_collector_name[0]['name']}
    ${SFLOW_COLLECTOR_NAME_EDIT}    Replace String Using Regexp   ${SFLOW_COLLECTOR_NAME}    ZZZ    ${sflow_add_collector[0]['name']}


    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_NAME_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_37_LI_SFLOW_COLLECTOR_EDIT_DATAGRAM Verify that by by editing the Datagram size in LI will create an Event in LI
    [Documentation]   Edit collector datagram in LI and verify alerts

    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxDatagramSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxDatagramSize
    ${split_port_maxDatagramSize}     include_thousand_sep    ${sflow_collector_maxDatagramSize}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_datagram}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_DATAGRAM}    Replace String Using Regexp   ${SFLOW_COLLECTOR_DATAGRAM_MOD}    XXX    ${sflow_edit_collector_enable[0]['name']}
    ${SFLOW_COLLECTOR_DATAGRAM}    Replace String Using Regexp   ${SFLOW_DATAGRAM}    YYY    ${sflow_edit_collector_datagram[0]['maxDatagramSize']}
    ${SFLOW_COLLECTOR_DATAGRAM_EDIT}    Replace String Using Regexp   ${SFLOW_COLLECTOR_DATAGRAM}    ZZZ    ${split_port_maxDatagramSize}

    ${Alert_list}    Built the Alert list    ${SFLOW_COLLECTOR_DATAGRAM_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_38_LI_SFLOW_COLLECTOR_EDIT_HEADER_256 Verify that by by editing the Header size in LI will create an Event in LI
    [Documentation]   Edit collector header size to 256 in LI and verify alerts

    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}
    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${initial_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_256}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${updated_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

   ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_edit_collector_enable[0]['name']}"

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${updated_maxHeaderSize}
    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${initial_maxHeaderSize}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts


OVF223_TC_39_LI_SFLOW_COLLECTOR_EDIT_HEADER_512 Verify that by by editing the Header size in LI will create an Event in LI
    [Documentation]   Edit collector header size to 512 in LI and verify alerts
    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${initial_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_512}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${updated_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

   ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_edit_collector_enable[0]['name']}"
    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${updated_maxHeaderSize}
    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${initial_maxHeaderSize}

    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_40_LI_SFLOW_COLLECTOR_EDIT_HEADER_1024 Verify that by by editing the Header size in LI will create an Event in LI
    [Documentation]   Edit collector header size to 1024 in LI and verify alerts
    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${initial_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_header_1024}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${getresp} =    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_collector_maxHeaderSize} =    Get From Dictionary     ${getresp['sflowCollectors'][0]}   maxHeaderSize
    ${updated_maxHeaderSize}     include_thousand_sep    ${sflow_collector_maxHeaderSize}

   ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_HEADER_MOD}    XXX    "${sflow_edit_collector_enable[0]['name']}"

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${updated_maxHeaderSize}
    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${initial_maxHeaderSize}

    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_enable}
    Validate LIG LI Consistency    ${Consistency_State[0]}
    Clear Alerts

OVF223_TC_42_LI_SFLOW_COLLECTOR_EDIT_DISABLE Verify that by by editing the collection and making it disable in LI will create an Event in LI
    [Documentation]   Disable collector in LI and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_disable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${sflow_Mode}    Convert to String   ${sflow}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_COLLECTION_ENABLED}    XXX    ${sflow_Mode}

    ${Alert_list}    Built the Alert list    ${Vlan_id_msg}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_41_LI_SFLOW_COLLECTOR_EDIT_ENABLE Verify that by by editing the collection and making it Enabling in LI will create an Event in LI
    [Documentation]   Enable collector in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_disable}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${sflow_Mode}    Convert to String   ${sflow}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_COLLECTION_DISABLED}    XXX    ${sflow_Mode}

    ${Alert_list}    Built the Alert list    ${Vlan_id_msg}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts


OVF223_TC_43_LI_SFLOW_COLLECTOR_DELETE Verify that by by Deleting an existing collector in LI will create an Event in LI
    [Documentation]   Delete collector in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflowCollectors_initial}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow} =  Set Variable   ${sflow_add_collector[0]['name']}

    ${sflow_Mode}    Convert to String   ${sflow}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_REMOVED}    XXX    ${sflow_Mode}

    ${Alert_list}    Built the Alert list    ${Vlan_id_msg}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_44_LI_SFLOW_COLLECTOR_EDIT_PORT Verify that by by editing the Port in LI will create an Event in LI
    [Documentation]   Edit collector port in LI and verify alerts

    ${resp3}    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}

    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_edit_collector_port_edit}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow_name} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    name

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_PORT_MOD}    XXX    ${sflow_name}

    ${sflow} =     Get From Dictionary     ${resp['sflowCollectors'][0]}    port

    ${String1}    include_thousand_sep    ${sflow}

    ${String2}=    Set Variable    ${sflow_add_collector[0]['port']}

    ${String21}=    Convert To Integer    ${String2}
    ${String3}    include_thousand_sep    ${String21}

    ${Sflow_mode_collector}    Replace String Using Regexp   ${Vlan_id_msg}    YYY    ${String1}

    ${Sflow_mode_Coll1}      Replace String Using Regexp    ${Sflow_mode_collector}    ZZZ    ${String3}
    ${Alert_list}    Built the Alert list    ${Sflow_mode_Coll1}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_45_LI_SFLOW_2_COLLECTOR Verify that by Adding the 2nd collector in LI will create an Event in LI
    [Documentation]   Add second collector in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_2nd_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${sflow} =     Get From Dictionary     ${sflow_add_2nd_collector[1]}    name

    ${sflow_Mode}    Convert to String   ${sflow}

    ${Vlan_id_msg}    Replace String Using Regexp   ${SFLOW_COLLECTOR_REMOVED}    XXX    ${sflow_Mode}

    ${Alert_list}    Built the Alert list    ${Vlan_id_msg}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts


OVF223_TC_46_LI_SFLOW_PORT_ADD Verify that by Adding a Port in LI will create an Event in LI
    [Documentation]   Add port in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflowPorts_initial}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}
    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_ADDED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_48_LI_SFLOW_PORT_SAMPLING_DISABLE Verify that by Disabling the sampling in LI will create an Event in LI
    [Documentation]   Disable sampling in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_disable}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_sampling_disable[0]['portName']}
    ${New_alert}    Replace String Using Regexp   ${SFLOW_SAMPLING_CONFIGURATION_ADDED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_47_LI_SFLOW_PORT_SAMPLING_ENABLE Verify that by Enabling the sampling in LI will create an Event in LI
    [Documentation]   Enable sampling in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_disable}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_SAMPLING_CONFIGURATION_REMOVED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_49_LI_SFLOW_PORT_SAMPLING_EGRESS Verify that by changing direction to Egress in LI will create an Event in LI
    [Documentation]   Change direction to Egress in LI and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_egress}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[0]}
    ${SFLOW_SAMPLING_EGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[1]}
    ${SFLOW_SAMPLING_EGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_EGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_EGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_50_LI_SFLOW_PORT_SAMPLING_INGRESS Verify that by changing direction to Ingress in LI will create an Event in LI
    [Documentation]   Change direction to Ingress in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_egress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}


    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[2]}
    ${SFLOW_SAMPLING_IGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[0]}
    ${SFLOW_SAMPLING_IGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_IGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_IGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_51_LI_SFLOW_PORT_SAMPLING_BOTH Verify that by changing direction to Both in LI will create an Event in LI
    [Documentation]   Change direction to both in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_egress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_DIRECTION_MOD}    XXX    ${sampling_direction[1]}
    ${SFLOW_SAMPLING_IGRESS}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${sampling_direction[2]}
    ${SFLOW_SAMPLING_IGRESS_PORT}    Replace String Using Regexp   ${SFLOW_SAMPLING_IGRESS}    ZZZ    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_IGRESS_PORT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_52_LI_SFLOW_PORT_SAMPLING_RATE Verify that by changing Rate in LI will create an Event in LI
    [Documentation]   Change sampling rate in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_rate_edit}     ${sflow_add_collector}
    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${rate}     Convert to integer    ${sflow_ports_sampling_ingress[0]['sflowConfigurationModes'][0]['samplingRate']}
    ${split_port_rate}     include_thousand_sep    ${rate}

    ${SFLOW_SAMPLING_INITIAL}    Replace String Using Regexp   ${SFLOW_PORT_SAMPLING_RATE_MOD}    XXX    ${split_port_rate}
    ${SFLOW_SAMPLING_RATE_EDIT}    Replace String Using Regexp   ${SFLOW_SAMPLING_INITIAL}    YYY    ${Interconnect_1}:${sflow_ports_add[0]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SAMPLING_RATE_EDIT}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_54_LI_SFLOW_PORT_POLLING_DISABLE Verify that by changing Polling to Disabling in LI will create an Event in LI
    [Documentation]   Disable polling in LI and verify alerts
    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}
    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_polling_disable}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_polling_disable[0]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_POLLING_CONFIGURATION_ADDED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_53_LI_SFLOW_PORT_POLLING_ENABLE Verify that by changing Polling to Enable in LI will create an Event in LI
    [Documentation]   Enable polling in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_polling_disable}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}


    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_sampling_ingress[0]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_POLLING_CONFIGURATION_REMOVED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_55_LI_SFLOW_PORT_ADD_1_PORT Verify that by adding a single port in LI will create an Event in LI
    [Documentation]   Add port in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_single_port_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_single_port_add[1]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_REMOVED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts


OVF223_TC_56_LI_SFLOW_PORT_ADD_MULTIPLE_PORT Verify that by adding Multiple porta in LI will create an Event in LI
    [Documentation]   Add multiple port in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_collector}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_add_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${resp}    Fetch sFlow data   ${LE}-${LIG_1}

    ${new_var} =  Set Variable   ${Interconnect_1}:${sflow_ports_single_port_add[1]['portName']},${sflow_ports_multiple_port_add[2]['portName']}

    ${New_alert}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_REMOVED}    XXX    ${new_var}

    ${Alert_list}    Built the Alert list    ${New_alert}
    # check for events
    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Clear Alerts

OVF223_TC_58_LI_SFLOW_PORT_DELETE_MULTIPLE_PORT Verify that by Deleting 2 ports in LI will create an Event in LI
    [Documentation]   Delete multiple port in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_multiple_port_add}     ${sflow_edit_collector_enable}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[1]}

    ${SFLOW_SINGLE_PORT_ADD}    Replace String Using Regexp   ${SFLOW_CONFIGURATION_PORT_REMOVED}    XXX    ${Interconnect_1}:${sflow_ports_single_port_add[1]['portName']},${sflow_ports_multiple_port_add[2]['portName']}

    ${Alert_list}    Built the Alert list    ${SFLOW_SINGLE_PORT_ADD}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_57_LI_SFLOW_PORT_EDIT_COLLECTOR Verify that by edit and chenaging the collector 1 to collector 2 in ports in LI will create an Event in LI
    [Documentation]   Change collector from collector1 to collector2 in LI and verify alerts

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_add_2nd_collector}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_collector2}     ${sflow_add_2nd_collector}

    ${SFLOW_PORT}    Replace String Using Regexp   ${SFLOW_POLLING_COLLECTOR_MOD}    XXX    ${Interconnect_1}:${sflow_ports_add[0]['portName']}
    ${SFLOW_POLLING_COLLECTOR_CHANGE}    Replace String Using Regexp   ${SFLOW_PORT}    YYY    ${sflow_add_collector[0]['name']}

    ${Alert_list}    Built the Alert list    ${SFLOW_POLLING_COLLECTOR_CHANGE}

    ${Alert_message}    Get Alert and Compliance Message    ${Alert_list}    ${Multi_three_compliance_list[6]}

    Edit LIG sFlow   ${Edit_LIG_sFlow_enabled['lig_E_sFlow']}    ${sFlow_data}    ${sFlow_net}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

    Clear Alerts

OVF223_TC_59_LI_ALL_COMPLIANCE_EVENT Verify that on LI page changing Uplink Set,QoS, SNMP,sFlow, Utilization Sampling,Interconnect Setting, Switch Map Internal Network, Sflow will show an Compliance Alert in LI Page
    [Documentation]   Verify multicompliance alert in LI

    # # add network

    :For    ${Enet}    IN    @{Ethernet}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"
    # ###edit lig to initial

    ${body} =   Build LIG body      ${LIGS_TBird}

    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri


    ${lig_resp}    Fusion Api Edit Lig    ${body}     uri=${lig_uri}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}


    ${Add_Net_1_uri}    Create List
    ${Add_Net_2_uri}    Create List

    :For    ${x}    INRANGE    1    3
    \   ${Get_Network_uri}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='Net_${x}'"
    \   ${Enet_uri}    Get Variable Value    ${Get_Network_uri['members'][0]['uri']}
    \   ${Network_uri}    convert_unicode_to_string    ${Enet_uri}
    \   Append to List    ${Add_Net_${x}_uri}    ${Network_uri}
    Set Global Variable    ${Net1_uri}    ${Add_Net_1_uri}
    Set Global Variable    ${Net2_uri}    ${Add_Net_2_uri}
    Set To Dictionary    ${Ethernet_settings_2['ethernetSettings']}    enableIgmpSnooping    ${Igmp_enable}
    Set To Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    sampleInterval    ${Sample_interval}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Set Global Variable    ${LI_URI}    ${li_uri}

   ${US_Body}    Copy Dictionary    ${Edit_LI_US}
    Set To Dictionary    ${US_Body}    logicalInterconnectUri    ${LI_URI}
    Set To Dictionary    ${US_Body}    networkUris    ${Net1_uri}
    ${Create_uplink}    Fusion Api Create Uplink Set    ${US_Body}
    ${task} =   Wait For Task    ${Create_uplink}    400s    2s

    ${Internal_network}    Fusion Api Update LI Internal Networks    ${Net2_uri}    ${LI_URI}
    ${task} =   Wait For Task    ${Internal_network}    900s    2s

    ${Edit_snmp}    Build SNMP LI body    ${SNMP_Config}    ${Snmp_True}
    Set To Dictionary    ${Edit_snmp}    readCommunity    ${Public}
    ${Edit_snmp_li}    Fusion Api Update snmp configuration    ${Edit_snmp}    ${LI_URI}
    ${task} =   Wait For Task    ${Edit_snmp_li}    400s    2s

    ${Qos_Edit}    Fusion Api Update qos aggregated configuration    ${Qos_Fcoe}    ${LI_URI}
    ${task} =   Wait For Task    ${Qos_Edit}    1100s    2s

    ${Get_telementry_config}    Fusion Api Get Li
    ${l} =  Get Length  ${Get_telementry_config['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If     '${Get_telementry_config['members'][${x}]['name']}' != '${LE}-${LIG_1}'     Continue For Loop
    \   ${Telementry_Uri}    Get Variable Value    ${Get_telementry_config['members'][${x}]['telemetryConfiguration']['uri']}
    Remove from Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    category
    ${Edit_telementry_li}    Fusion Api Update LI Telemetry Configuration    ${Utilization_sampling_2['telemetryConfiguration']}    ${Telementry_Uri}
    ${task} =   Wait For Task    ${Edit_telementry_li}    400s    2s

    ${ICM_setting_body}    Build Ethernet Setting LI body    ${Ethernet_settings}    ${Igmp_enable}    ${LE}-${LIG_1}
    ${Edit_ICM_Setting_li}    Fusion Api Update LI Ethernet Settings    ${ICM_setting_body['ethernetSettings']}    ${LI_URI}
 
    ${task} =   Wait For Task    ${Edit_ICM_Setting_li}    400s    2s

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${Ethernet[0]['name']}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    # ###### verify alerts
    ${Alert_list}    Create list
    ${lig_uri} =     Get LIG URI   ${LIGS_TB_HA['name']}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${Ethernet_settings} =     Get From Dictionary     ${getresp}  ethernetSettings
    ${Ethernet_settings_interval} =    Get From Dictionary     ${Ethernet_settings}   igmpIdleTimeoutInterval
    ${Ethernet_settings_IGMP_interval}    Convert To String    ${Ethernet_settings_interval}

    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    ${lig_sampleint} =    Get From Dictionary     ${es}   sampleInterval
    ${lig_sampleint1}    Convert To String    ${lig_sampleint}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    ${li_sampleint} =    Get From Dictionary     ${es}   sampleInterval
    ${li_sampleint1}    Convert To String    ${li_sampleint}

    ${Uplinkset_Name}    Convert To String    ${US_Body['name']}
    Set Global Variable    ${Uplink_set1_Name}    ${Uplinkset_Name}
    ${Uplinkset_alert}    Replace String Using Regexp   ${LOGICAL_UPLINK_REMOVED}    XXX    ${Uplink_set1_Name}

    Append to list    ${Alert_list}    ${Uplinkset_alert}

    ${msg2}    Replace String Using Regexp   ${TELEMETRY_SAMPLE_INTERVAL_COLLECTION_COMPLIANCE_MESSAGE}    XXX    ${li_sampleint1}
    ${Telemetry_alert}    Replace String Using Regexp   ${msg2}    YYY    ${lig_sampleint1}

    Append to list    ${Alert_list}    ${Telemetry_alert}

    ${Internal_net_alert}    Replace String Using Regexp   ${INTENRAL_NETWORK_TO_BE_REMOVED_COUNT}    XXX    Net_2
    Append to list    ${Alert_list}    ${Internal_net_alert}

    ${msg1}    Replace String Using Regexp   ${QOS_CONFIG_TYPE_MODIFIED}    XXX    ${CUSTOM_WITH_FCOE}
    ${msg2}    Replace String Using Regexp   ${msg1}    YYY    ${PASSTHROUGH}
    ${Qos_Passthrough_Fcoe}    Replace String Using Regexp   ${msg2}    ZZZ    ${ACTIVE_QOS_CONFIGURATION}


    Append to list    ${Alert_list}    ${Qos_Passthrough_Fcoe}


    Append to list    ${Alert_list}    ${SFLOW_CONFIGURATION_REMOVED}
    Append to list    ${Alert_list}    ${SNMP_V1_V2_DISABLE}
    Append to list    ${Alert_list}    ${IGMP_SNOOPING_DISABLED}

    Sort list    ${Alert_list}

    ${Alert_message}    Get Alert and Multi Compliance Message    ${Alert_list}    ${Multi_count[0]}    ${Multi_three_compliance_list}

OVF223_TC_60_LI_ALL_COMPLIANCE_ALERT Verify that UFG in LI as in LIG page will clear all the Alerts
    [Documentation]   Perform update from group in LI and verify alerts are cleared
    ${body} =   Build LIG body      ${LIGS_TBird}

    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri

    ${lig_resp}    Fusion Api Edit Lig    ${body}     uri=${lig_uri}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ${Add_Net_1_uri}    Create List
    ${Add_Net_2_uri}    Create List
    :For    ${x}    INRANGE    1    3
    \   ${Get_Network_uri}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='Net_${x}'"
    \   ${Enet_uri}    Get Variable Value    ${Get_Network_uri['members'][0]['uri']}
    \   ${Network_uri}    convert_unicode_to_string    ${Enet_uri}
    \   Append to List    ${Add_Net_${x}_uri}    ${Network_uri}
    Set Global Variable    ${Net1_uri}    ${Add_Net_1_uri}
    Set Global Variable    ${Net2_uri}    ${Add_Net_2_uri}

    Set To Dictionary    ${Ethernet_settings_2['ethernetSettings']}    enableIgmpSnooping    ${Igmp_enable}
    Set To Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    sampleInterval    ${Sample_interval}
    ${sflow_data}    Build SFlow LIG body   ${sFlow_data}    ${Ethernet[0]['name']}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}
    ${Edit_lig_body}    ${lig_uri}    Build Edit LIG Body    ${LIGS_TB_HA}    ${Edit_Lig}
    Set To Dictionary    ${Edit_lig_body['uplinkSets'][0]}    networkUris    ${Net1_uri}
    Set To Dictionary    ${Edit_lig_body}    qosConfiguration    ${Qos_Fcoe}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    enabled    ${Snmp_True}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    readCommunity    ${Public}
    Set To Dictionary    ${Edit_lig_body}    ethernetSettings    ${Ethernet_settings_2['ethernetSettings']}
    Set To Dictionary    ${Edit_lig_body}    telemetryConfiguration    ${Utilization_sampling_2['telemetryConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    internalNetworkUris    ${Net2_uri}
    Set To Dictionary    ${Edit_lig_body}    sflowConfiguration    ${sflow_data}


    ${edit_LIG_resp}    Fusion Api Edit Lig    ${Edit_lig_body}    ${lig_uri}
    ${task} =   Wait For Task    ${edit_LIG_resp}    400s    2s
    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ValidateLIG sflowConfiguration    ${LIG_1}    ${sFlow_valT}

    Validate LIG LI Consistency    ${Consistency_State[0]}

OVF223_TC_61_LIG_LI_ALL_COMPLIANCE_SAMECHANGE Verify that making same change in LI as in LIG page will clear all the Alerts
    [Documentation]   Making same changes in LI and verify alerts are cleared

    ${body} =   Build LIG body      ${LIGS_TBird}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri


    ${lig_resp}    Fusion Api Edit Lig    ${body}     uri=${lig_uri}
    ${task} =   Wait For Task    ${lig_resp}    400s    2s

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Perform an Update From Group    ${li_uri}

    ${Add_Net_1_uri}    Create List
    ${Add_Net_2_uri}    Create List
    :For    ${x}    INRANGE    1    3
    \   ${Get_Network_uri}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='Net_${x}'"
    \   ${Enet_uri}    Get Variable Value    ${Get_Network_uri['members'][0]['uri']}
    \   ${Network_uri}    convert_unicode_to_string    ${Enet_uri}
    \   Append to List    ${Add_Net_${x}_uri}    ${Network_uri}
    Set Global Variable    ${Net1_uri}    ${Add_Net_1_uri}
    Set Global Variable    ${Net2_uri}    ${Add_Net_2_uri}

    Set To Dictionary    ${Ethernet_settings_2['ethernetSettings']}    enableIgmpSnooping    ${Igmp_enable}
    Set To Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    sampleInterval    ${Sample_interval}
    ${sflow_data}    Build SFlow LIG body   ${sFlow_data}    ${Ethernet[0]['name']}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}
    ${Edit_lig_body}    ${lig_uri}    Build Edit LIG Body    ${LIGS_TB_HA}    ${Edit_Lig}
    Set To Dictionary    ${Edit_lig_body['uplinkSets'][0]}    networkUris    ${Net1_uri}
    Set To Dictionary    ${Edit_lig_body}    qosConfiguration    ${Qos_Fcoe}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    enabled    ${Snmp_True}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    readCommunity    ${Public}
    Set To Dictionary    ${Edit_lig_body}    ethernetSettings    ${Ethernet_settings_2['ethernetSettings']}
    Set To Dictionary    ${Edit_lig_body}    telemetryConfiguration    ${Utilization_sampling_2['telemetryConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    internalNetworkUris    ${Net2_uri}
    Set To Dictionary    ${Edit_lig_body}    sflowConfiguration    ${sflow_data}


    ${edit_LIG_resp}    Fusion Api Edit Lig    ${Edit_lig_body}    ${lig_uri}
    ${task} =   Wait For Task    ${edit_LIG_resp}    400s    2s

    Validate LIG LI Consistency    ${Consistency_State[1]}
    ${Add_Net_1_uri}    Create List
    ${Add_Net_2_uri}    Create List

    :For    ${x}    INRANGE    1    3
    \   ${Get_Network_uri}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='Net_${x}'"
    \   ${Enet_uri}    Get Variable Value    ${Get_Network_uri['members'][0]['uri']}
    \   ${Network_uri}    convert_unicode_to_string    ${Enet_uri}
    \   Append to List    ${Add_Net_${x}_uri}    ${Network_uri}
    Set Global Variable    ${Net1_uri}    ${Add_Net_1_uri}
    Set Global Variable    ${Net2_uri}    ${Add_Net_2_uri}
    Set To Dictionary    ${Ethernet_settings_2['ethernetSettings']}    enableIgmpSnooping    ${Igmp_enable}
    Set To Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    sampleInterval    ${Sample_interval}

    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    Set Global Variable    ${LI_URI}    ${li_uri}

   ${US_Body}    Copy Dictionary    ${Edit_LI_US}
    Set To Dictionary    ${US_Body}    logicalInterconnectUri    ${LI_URI}
    Set To Dictionary    ${US_Body}    networkUris    ${Net1_uri}
    ${Create_uplink}    Fusion Api Create Uplink Set    ${US_Body}
    ${task} =   Wait For Task    ${Create_uplink}    400s    2s

    ${Internal_network}    Fusion Api Update LI Internal Networks    ${Net2_uri}    ${LI_URI}
    ${task} =   Wait For Task    ${Internal_network}    900s    2s

    ${Edit_snmp}    Build SNMP LI body    ${SNMP_Config}    ${Snmp_True}
    Set To Dictionary    ${Edit_snmp}    readCommunity    ${Public}
    ${Edit_snmp_li}    Fusion Api Update snmp configuration    ${Edit_snmp}    ${LI_URI}
    ${task} =   Wait For Task    ${Edit_snmp_li}    400s    2s

    ${Qos_Edit}    Fusion Api Update qos aggregated configuration    ${Qos_Fcoe}    ${LI_URI}
    ${task} =   Wait For Task    ${Qos_Edit}    1100s    2s

    ${Get_telementry_config}    Fusion Api Get Li
    ${l} =  Get Length  ${Get_telementry_config['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    Run Keyword If     '${Get_telementry_config['members'][${x}]['name']}' != '${LE}-${LIG_1}'     Continue For Loop
    \   ${Telementry_Uri}    Get Variable Value    ${Get_telementry_config['members'][${x}]['telemetryConfiguration']['uri']}
    Remove from Dictionary    ${Utilization_sampling_2['telemetryConfiguration']}    category
    ${Edit_telementry_li}    Fusion Api Update LI Telemetry Configuration    ${Utilization_sampling_2['telemetryConfiguration']}    ${Telementry_Uri}
    ${task} =   Wait For Task    ${Edit_telementry_li}    400s    2s

    ${ICM_setting_body}    Build Ethernet Setting LI body    ${Ethernet_settings}    ${Igmp_enable}    ${LE}-${LIG_1}
    ${Edit_ICM_Setting_li}    Fusion Api Update LI Ethernet Settings    ${ICM_setting_body['ethernetSettings']}    ${LI_URI}
    ${task} =   Wait For Task    ${Edit_ICM_Setting_li}    400s    2s

    Update Sflow Configuration In LI    ${LE}-${LIG_1}    ${sFlow_data}    ${Ethernet[0]['name']}     ${ipMode[0]}    ${sFlow_valT}    ${sflow_ports_sampling_ingress}     ${sflow_edit_collector_enable}

    Validate LIG LI Consistency    ${Consistency_State[0]}

*** Keywords ***

Clean OV
    [Documentation]    Cleaning OV
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove All Network Sets
    Remove ALL Ethernet Networks
    REMOVE ALL SUBNET
    Remove ALL FC Networks
    Remove ALL FCoE Networks

Build Edit LIG Body
    [Documentation]    Build LIG Body for LIG Edit operation
    [Arguments]    ${LIGS_TB}    ${Edit_Lig}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${lig_uri}    Get From Dictionary    ${Get_lig['members'][0]}    uri
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Edit_lig_body}    Copy Dictionary    ${Edit_Lig}
    Set To Dictionary    ${Edit_lig_body}    snmpConfiguration    ${Get_lig_body[0]['snmpConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    telemetryConfiguration    ${Get_lig_body[0]['telemetryConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    ethernetSettings    ${Get_lig_body[0]['ethernetSettings']}
    Set To Dictionary    ${Edit_lig_body}    qosConfiguration    ${Get_lig_body[0]['qosConfiguration']}
    Set To Dictionary    ${Edit_lig_body}    fabricUri    ${Get_lig_body[0]['fabricUri']}
    Set To Dictionary    ${Edit_lig_body}    interconnectMapTemplate    ${Get_lig_body[0]['interconnectMapTemplate']}
    Set To Dictionary    ${Edit_lig_body}    scopesUri    ${Get_lig_body[0]['scopesUri']}
    Set To Dictionary    ${Edit_lig_body}    created    ${Get_lig_body[0]['created']}
    Set To Dictionary    ${Edit_lig_body}    eTag    ${Get_lig_body[0]['eTag']}
    Set To Dictionary    ${Edit_lig_body}    modified    ${Get_lig_body[0]['modified']}
    Set To Dictionary    ${Edit_lig_body}    uri    ${Get_lig_body[0]['uri']}
    Sleep    10
    [Return]    ${Edit_lig_body}    ${lig_uri}

Get Alert and Compliance Message
    [Documentation]    Get Alert and compliance messages from LI
    [Arguments]    ${Alert_list}    ${Compliance_name_list}

    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    ${Get_event_details}    Fusion Api Get Alerts    ${Event_uri[0]}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    Lists Should Be Equal    ${Event_item_value}    ${Alert_list}
    [Return]    ${Event_item_value}

Get Event Item Value
    [Documentation]    Get the Event name corresponding to the compliance
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' != '${Compliance_name_list}'    Continue For Loop
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    ${actual_alert}    Built the Alert list    ${Event_item_value}
    [Return]    ${actual_alert}

Build SNMP LI body
    [Documentation]    Build SNMP body for LI Edit
    [Arguments]    ${Snmp_body}    ${True_false}
    ${Get_li}    Fusion Api Get Li
    ${Get_li_body}    Copy Dictionary    ${Get_li['members']}
    Set To Dictionary    ${Snmp_body}    modified   ${Get_li_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Snmp_body}    created    ${Get_li_body[0]['snmpConfiguration']['created']}
    Set To Dictionary    ${Snmp_body}    enabled    ${True_False}


    [Return]    ${Snmp_body}

Build Ethernet Setting LIG body
    [Documentation]    Build Ethernet Setting body for LIG Edit
    [Arguments]    ${Edit_lig_body}    ${True_False}
    ${Get_lig}    Fusion Api Get Li
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['modified']}
    ${Created}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['created']}
    ${Id}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['id']}
    ${Name}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['name']}
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['uri']}
    ${DependentResourceUri}    Get Variable Value   ${Get_lig_body[0]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    uri    ${Uri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Edit_lig_body['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Edit_lig_body}

Build Telementry Configuration LIG body
    [Documentation]    Build Telementry Configuration body for LIG Edit
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TBird['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${Modified}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     modified
    ${Created}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     created
    ${Uri}    Get Variable Value   ${Get_lig_body[0]['telemetryConfiguration']}     uri
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    modified   ${Modified}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    created   ${Created}
    Set To Dictionary    ${Edit_lig_body['telemetryConfiguration']}    uri   ${Uri}

    [Return]    ${Edit_lig_body}

Edit Enclosure Group from variable

    [Documentation]    Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}    ${headers}
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   @{words} =  Split String    ${liguri}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${liguri} =     Get LIG URI ${eg}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${Get_EG}    Fusion Api Get Enclosure Groups
    ${EG_uri}    Get Variable Value    ${Get_EG['members'][0]['uri']}
    ${Modified}    Get Variable Value   ${Get_EG['members'][0]['modified']}
    ${Created}    Get Variable Value   ${Get_EG['members'][0]['created']}
    ${Associate_uri}    Get Variable Value   ${Get_EG['members'][0]['associatedLogicalInterconnectGroups']}
    ${Scopes_Uri}    Get Variable Value   ${Get_EG['members'][0]['scopesUri']}
    ${Etag}    Get Variable Value   ${Get_EG['members'][0]['eTag']}
    Set To Dictionary    ${enc_group}    modified   ${Modified}
    Set To Dictionary    ${enc_group}    created   ${Created}
    Set To Dictionary    ${enc_group}    associatedLogicalInterconnectGroups   ${Associate_uri}
    Set To Dictionary    ${enc_group}    eTag   ${Etag}
    Set To Dictionary    ${enc_group}    scopesUri   ${Scopes_Uri}
    Set To Dictionary    ${enc_group}    uri   ${EG_uri}
    ${resp} =   fusion_api_edit_enclosure_group    body=${enc_group}    uri=${EG_uri}    headers=${headers}
    [Return]   ${resp}

Build Ethernet Setting LI body
    [Documentation]    Build Ethernet Setting body for LI Edit
    [Arguments]    ${Ether_settings}    ${True_False}    ${li}=${LE}-${LIG}
    ${Get_ICMsetting_config}    Fusion Api Get Li
    ${l} =  Get Length  ${Get_ICMsetting_config['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Get_ICMsetting_config['members'][${x}]['name']}' != '${li}'      Continue For Loop
    \   ${ICM_setting_Uri}    Get Variable Value    ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['uri']}
    \   ${Modified}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['modified']}
    \   ${Created}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['created']}
    \   ${Id}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['id']}
    \   ${Name}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['name']}
    \   ${DependentResourceUri}    Get Variable Value   ${Get_ICMsetting_config['members'][${x}]['ethernetSettings']['dependentResourceUri']}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    modified   ${Modified}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    created    ${Created}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    id    ${Id}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    name    ${Name}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    uri    ${ICM_setting_Uri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    dependentResourceUri    ${DependentResourceUri}
    Set To Dictionary    ${Ether_settings['ethernetSettings']}    enableIgmpSnooping    ${True_False}

    [Return]    ${Ether_settings}

Build Qos body
    [Documentation]    Build for LI/LIG Edit
    [Arguments]    ${Qos_Fcoe}    ${Qos_classname}    ${Share}    ${Total_band}    ${class_enable}    ${Dot1p_value}
    ${Qos_body}    Copy Dictionary    ${Qos_Fcoe}
    ${Qos_traffic_count}    Get Length    ${Qos_body['activeQosConfig']['qosTrafficClassifiers']}
    :For    ${x}    INRANGE    0    ${Qos_traffic_count}
    \     ${Class_name}    Get From Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    className
    \     Run Keyword If    '${Class_name}'!='${Qos_classname}'    Continue for loop
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    bandwidthShare    ${Share}
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    enabled    ${class_enable}
    \     Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][${x}]['qosTrafficClass']}    egressDot1pValue    ${Dot1p_value}
    Set To Dictionary    ${Qos_body['activeQosConfig']['qosTrafficClassifiers'][0]['qosTrafficClass']}    bandwidthShare    ${Total_band}
    [Return]    ${Qos_body}

Perform an LI Update From Group
    [Documentation]    Perform an LI Update From Group
    ...             Example:
    ...             Perform an LI Update From Group    ${li}    ${interval}
    [Arguments]       ${li}=${LE}-${LIG1}     ${timeout}=45 min    ${interval}=15s
    ${resp} =       Fusion Api Update from group    ${li}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Verify LI/LIG Consistent Status
    [Documentation]    Get LI for Verification of LI/LIG Consistency status
    [Arguments]    ${Expected_Consistency_Status}    ${li}=${LE}-${LIG}
    Sleep    90
    ${Li_resp}= Fusion Api Get Li
    ${l} =  Get Length  ${Li_resp['members']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   Run Keyword If  '${Li_resp['members'][${x}]['name']}' != '${li}'        Continue For Loop
    \   Should Be Equal As Strings  ${Li_resp['members'][${x}]['consistencyStatus']}    ${Expected_Consistency_Status}

Verify Interconnect State
    [Documentation]    Verify the interconnect state
    ...             Example:
    ...             Verify Interconnect State    ${interconnectname_1}    ${IC_Configured}
    [Arguments]        ${interconnectname_1}        ${IC_Configured}
    ${ic} =    Get IC    ${interconnectname_1}
    ${State} =    Get From IC        ${ic}    state
    Should Be Equal As Strings    ${State}    ${IC_Configured}

Get IC
    [Documentation]    Get IC by name
    ...             Example:
    ...             Get IC    ${ICM_NAME}
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get from IC
    [Documentation]    Get the required element from the interconnect
    ...             Example:
    ...             Get from IC    ${ic}    ${element}
    [Arguments]     ${ic}   ${element}
    ${return} =     Get From Dictionary     ${ic}   ${element}
    [Return]    ${return}

Edit LIG Internal Networks
    [Documentation]    Editing LIG
    ...             Example:
    ...             Edit LIG    ${lig}
    [Arguments]    ${lig}
    ${body} =   Build LIG body    ${lig}
    # ${lig} =        Get LIG Member      ${LIGname}
    # ${lig_uri} =    Get LIG Uri         ${LIGname}
    # ${resp} =   Fusion Api Edit LIG    body=${body}    uri=${lig_uri}
    [Return]    ${body}

Create LIG
    [Documentation]    Suite Setup Tasks
    [Arguments]        ${body1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${body}    Build LIG body    ${body1}

    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    [Return]    ${resp}

Get LIG member
    [Documentation]    Get LIG member
    [Arguments]    ${LIG1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}

Edit LIG
    [Documentation]   Edits LIG
    [Arguments]        ${lig}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${body} =   Build LIG body      ${lig}
    ${lig} =         Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}
    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}

    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Validate LIG LI Consistency
    [Documentation]    Validating LIG LI Consistency status
    ...             Example:
    ...             Validate LIG LI Consistency    ${Consistency_State[0]}
    [Arguments]         ${expected}
    ${IC}=    Fusion Api Get LI

    Run Keyword If  '${IC['members'][0]['consistencyStatus']}' != '${expected}'     Fail

Edit LI
    [Documentation]    Edits LI
    [Arguments]    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${tc} =     Get From Dictionary        ${resp}    telemetryConfiguration
    ${uri} =     Get From Dictionary        ${tc}        uri
    ${resp1} =     fusion_api_update_li_telemetry_configuration    body=${body}        uri=${uri}
    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Perform an Update From Group
    [Documentation]    Performs an LI update form group
    [Arguments]        ${li_uri}    ${timeout}=45 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

ValidateLI Telemetryconfig
    [Documentation]    ValidateLI utilization sampling-Telemetry configuration
    [Arguments]     ${li}   ${US_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}

ValidateLIG Telemetryconfig
    [Documentation]    ValidateLIG utilization sampling-Telemetry configuration
    [Arguments]     ${lig}   ${US_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${es} =     Get From Dictionary     ${getresp}  telemetryConfiguration
    ${enableTelemetry} =    Get From Dictionary     ${es}   enableTelemetry
    Should Be Equal As Strings    ${US_val}    ${enableTelemetry}

Perform an LE Update
    [Documentation]    Performing an LE update from group
    [Arguments]       ${le}     ${timeout}=45 min    ${interval}=25s
    ${resp} =       Fusion Api Update Logical Enclosure from Group    ${le}
    ${task} =       Wait For Task       ${resp}     ${timeout}        ${interval}
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Get Qos Classifiers Value
    [Documentation]    Get Qos Classifiers Value for LIG Edit
    [Arguments]    ${Class_Name_qos}    ${Parameter}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TBird['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members'][0]['qosConfiguration']['activeQosConfig']['qosTrafficClassifiers']}
    ${Qos_classifier_count}    Get Length    ${Get_lig_body}

    :For    ${x}    INRANGE    0    ${Qos_classifier_count}
    \    ${classname}    Get From Dictionary    ${Get_lig_body[${x}]['qosTrafficClass']}    className
    \    Run Keyword If    '${classname}' != '${Class_Name_qos}'    Continue For Loop
    \    ${Qos_traffic_Value}    Get From Dictionary    ${Get_lig_body[${x}]['qosTrafficClass']}    ${Parameter}
    \    ${Qos_traffic_classifier_Value}    Convert To String    ${Qos_traffic_Value}

    [Return]    ${Qos_traffic_classifier_Value}

Get Qos Classifiers Value LI
    [Documentation]    Get Qos Classifiers Value for LI Edit
    [Arguments]    ${Class_Name_qos}    ${Parameter}
    ${Get_li}    Fusion Api Get Li
    ${Get_li_body}    Copy Dictionary    ${Get_li['members'][0]['qosConfiguration']['activeQosConfig']['qosTrafficClassifiers']}
    ${Qos_classifier_count}    Get Length    ${Get_li_body}

    :For    ${x}    INRANGE    0    ${Qos_classifier_count}
    \    ${classname}    Get From Dictionary    ${Get_li_body[${x}]['qosTrafficClass']}    className
    \    Run Keyword If    '${classname}' != '${Class_Name_qos}'    Continue For Loop
    \    ${Qos_traffic_Value}    Get From Dictionary    ${Get_li_body[${x}]['qosTrafficClass']}    ${Parameter}
    \    ${Qos_traffic_classifier_Value}    Convert To String    ${Qos_traffic_Value}

    [Return]    ${Qos_traffic_classifier_Value}

Edit LI Ethernet Settings
    [Documentation]    Edits LI
    [Arguments]        ${body}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    # ${body} =    Build LI body    ${body}
    ${li_uri} =     Get LI URI   ${LE}-${LIG_1}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${es} =     Get From Dictionary        ${resp}    ethernetSettings
    ${uri} =     Get From Dictionary        ${es}        uri
    ${id} =     Get From Dictionary        ${es}        id

    Set to Dictionary    ${body}    id    ${id}
    ${resp1} =     Fusion Api Update LI Ethernet Settings    body=${body}        uri=${li_uri}

    ${task} =    Wait For Task     ${resp1}     600s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build LI body
    [Documentation]    Builds LI body
    [Arguments]        ${liedit}
    ${liedit} =     Copy Dictionary    ${liedit}
    ${type} =                       Get Variable Value  ${liedit['type']}
    ${enableTaggedLldp} =              Get Variable Value  ${liedit['enableTaggedLldp']}
    ${lldpIpAddressMode} =              Get Variable Value  ${liedit['lldpIpAddressMode']}
    ${enableIgmpSnooping} =              Get Variable Value  ${liedit['enableIgmpSnooping']}
    ${body} =     Create Dictionary                type=${type}
    ...                                         enableTaggedLldp=${enableTaggedLldp}
    ...                                         lldpIpAddressMode=${lldpIpAddressMode}
    ...                                         enableIgmpSnooping=${enableIgmpSnooping}
    [Return]    ${body}

ValidateLI IGMPsnooping
    [Documentation]    ValidateLI IGMP snooping attribute
    [Arguments]     ${li}   ${IS_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}


ValidateLIG IGMPsnooping
    [Documentation]    ValidateLIG IGMP snooping attribute
    [Arguments]     ${lig}   ${IS_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    Log     ${getresp}


Build SNMP body
    [Documentation]    Build SNMP body for LIG Edit
    [Arguments]    ${Edit_lig_body}     ${True_False}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['ligs'][0]['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    modified   ${Get_lig_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    created    ${Get_lig_body[0]['snmpConfiguration']['created']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    enabled    ${True_False}

    [Return]    ${Edit_lig_body}

Login to OneView via REST
    [Documentation]     Login to the appliance with the credentials
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Get Alert and Multi Compliance Message
    [Documentation]    Get Alert Messages from Multi Compliance Alerts
    [Arguments]    ${Alert_message_compliance}    ${Multi_count}    ${Compliance_name_list}
    ${Crm_Compliance}    Create list
    ${Associate_uri_list}    Create list
    ${Each_Compliance_Alert_list}    Create list
    ${Get_Alerts}    Fusion Api Get Alerts
    ${Get_alert_count}    Get From Dictionary    ${Get_Alerts}    count
    :For    ${x}    INRANGE    0    ${Get_alert_count}
    \    ${Alertstate}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertState
    \    Run Keyword If    '${Alertstate}' != 'Active'    Continue For Loop
    \    ${AlertID}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    alertTypeID
    \    Run Keyword If    '${AlertID}' != 'crm.complianceChange'    Continue For Loop
    \    Append to list    ${Crm_Compliance}    ${AlertID}
    \    ${Event_uri}    Get From Dictionary    ${Get_Alerts['members'][${x}]}    associatedEventUris
    \    Append to list    ${Associate_uri_list}    ${Event_uri[0]}

    ${Compliance_count}    Get Length    ${Crm_Compliance}
    Run Keyword If    '${Compliance_count}' == '${Multi_count}'    Log    Multi_${Compliance_count}_Compliance    ELSE    Fail

    ${Complete_Compliance_alert_list}    Create list
    :For    ${x}    INRANGE    0    ${Compliance_count}
    \   ${Get_event_details}    Fusion Api Get Alerts    ${Associate_uri_list[${x}]}
    \    ${Event_Details}    Get From Dictionary    ${Get_event_details}    eventDetails
    \    ${Count}    Get Length    ${Event_Details}
    \    ${Event_item_value}    Get Multi Event Item Value    ${Count}    ${Event_Details}    ${Compliance_name_list}
    \    ${Alerts_each_complaince_count}    Get Length    ${Event_item_value}
    \    ${Combined_list_each_compliance}    combine_sublist    ${Event_item_value}
    \    Append to list    ${Complete_Compliance_alert_list}    ${Combined_list_each_compliance}

    ${Complete_Compliance_alert_message}    combine_sublist    ${Complete_Compliance_alert_list}

    ${Combined_list_count}    Get Length    ${Complete_Compliance_alert_message}
    ${Compliance_list_count}    Get Length    ${Compliance_name_list}
    Run Keyword If    '${Combined_list_count}' != '${Compliance_list_count}'  Remove Duplicates    ${Complete_Compliance_alert_message}    ELSE    Sort list    ${Complete_Compliance_alert_message}

    Sort list    ${Complete_Compliance_alert_message}

    List Should Not Contain Duplicates    ${Complete_Compliance_alert_message}

    Lists Should Be Equal    ${Complete_Compliance_alert_message}    ${Alert_message_compliance}

Get Multi Event Item Value
    [Documentation]    Get Event Item Values from Multi Compliance Alert
    [Arguments]    ${count}    ${event_details}    ${Compliance_name_list}
    ${Alerts_each_Compliance}    Create list
    :For    ${x}    INRANGE    0    ${count}
    \    ${Get_event_name}    Get From Dictionary    ${event_details[${x}]}    eventItemName
    \    Run Keyword If    '${Get_event_name}' == 'correctiveAction' or '${Get_event_name}' == 'resourceUri'  Continue For Loop
    \    List Should Contain Value    ${Compliance_name_list}    ${Get_event_name}
    \    ${Event_item_value}    Get From Dictionary    ${event_details[${x}]}    eventItemValue
    \    ${Actual_Alert}    Built the Alert list    ${Event_item_value}
    \    Append to list    ${Alerts_each_Compliance}    ${Actual_Alert}

    [Return]    ${Alerts_each_Compliance}

Built the Alert list

    [Documentation]    Building the Alert list for Compliance alert verification
    [Arguments]    ${Qos_compliance_alert}

    ${Line_count}    Get Line Count    ${Qos_compliance_alert}
    ${Alert_List}    Create List
    :For    ${x}    INRANGE    0    ${Line_count}
    \    ${Get_line}    Get Line    ${Qos_compliance_alert}    ${x}
    \    Append to list    ${Alert_List}    ${Get_line}
    Sort List    ${Alert_List}

    [Return]    ${Alert_List}

Edit LI Internal Networks
    [Documentation]    Performing edit LI in Internal Networks Event
    [Arguments]        ${li}        ${li_body}     ${headers}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    ${respl} =    Fusion Api Update LI Internal Networks    body=${li_body}    uri=${li_uri}    headers=${headers}
    ${task} =  Wait For Task   ${respl}    300s    2s
    [Return]    ${respl}

Build SNMP LIG body
    [Documentation]    Build SNMP body for LIG Edit
    [Arguments]    ${Edit_lig_body}
    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    modified   ${Get_lig_body[0]['snmpConfiguration']['modified']}
    Set To Dictionary    ${Edit_lig_body['snmpConfiguration']}    created    ${Get_lig_body[0]['snmpConfiguration']['created']}

    [Return]    ${Edit_lig_body}

Build Uplink set body

    [Documentation]    Build Uplink set body for LI Edit
    [Arguments]    ${Edit_LI_US}    ${LIURI}

    ${uplink_resp}    Fusion Api Get Uplink Set    param=?filter="'name'=='${Edit_LI_US['name']}'"
    ${upset_members}    Get Variable Value    ${uplink_resp['members'][0]}
    ${upset_uri}    Get Variable Value    ${upset_members['uri']}
    ${US_Body}    Copy Dictionary    ${Edit_LI_US}
    Set To Dictionary    ${US_Body}    uri    ${upset_uri}
    Set To Dictionary    ${US_Body}    logicalInterconnectUri    ${LIURI}

    [Return]    ${US_Body}    ${upset_uri}


### sflow ###

Edit LIG sFlow
    [Documentation]   Edits LIG
    [Arguments]        ${lig}    ${sFlow_data}    ${Net_name}     ${sFlow_Mode}    ${sFlow_enabled}    ${sflowPorts}     ${sflowCollectors}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_data}   Copy Dictionary    ${lig}
    ${sFlow_body}     Build SFlow LIG body   ${sFlow_data}    ${Net_name}    ${sFlow_Mode}    ${sFlow_enabled}     ${sflowPorts}    ${sflowCollectors}

    ${body} =   Build LIG body      ${lig_data}
    Set to Dictionary    ${body}     sflowConfiguration    ${sFlow_body}

    ${lig} =         Get LIG Member      ${LIG1}
    ${lig_uri} =    Get LIG Uri         ${LIG1}

    ${resp} =     Fusion Api Edit LIG    body=${body}        uri=${lig_uri}

    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

Build SFlow LIG body
    [Documentation]    Build SNMP body for LIG Edit
    [Arguments]    ${sFlow_data}    ${Net_name}    ${sFlow_Mode}    ${sFlow_enabled}     ${sflowPorts}    ${sflowCollectors}

    ${Get_lig}    Fusion Api Get Lig    param=?filter="'name'=='${LIGS_TB['name']}'"
    ${Get_lig_body}    Copy Dictionary    ${Get_lig['members']}
    ${sFlow_data_body}    Copy Dictionary    ${sFlow_data}
    Set To Dictionary    ${sFlow_data_body}    enabled   ${sFlow_enabled}
    ${net_uri}    Get Ethernet URI    ${Net_name}
    Set To Dictionary    ${sFlow_data_body}    sflowCollectors   ${sflowCollectors}
    Set To Dictionary    ${sFlow_data_body}    sflowPorts   ${sflowPorts}
    Set To Dictionary    ${sFlow_data_body['sflowNetwork']}    uri   ${net_uri}
    Set To Dictionary    ${sFlow_data_body['sflowAgents'][0]}    ipMode   ${sFlow_Mode}

    [Return]    ${sFlow_data_body}


ValidateLIG sflowConfiguration
    [Documentation]    ValidateLIG sflowConfiguration attribute
    [Arguments]     ${lig}   ${sf_val}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${getresp} =    Fusion Api Get Lig   ${lig_uri}
    ${sflow} =     Get From Dictionary     ${getresp}  sflowConfiguration
    ${sflow_vlaue} =    Get From Dictionary     ${sflow}   enabled
    Should Be Equal As Strings    ${sf_val}    ${sflow_vlaue}
    Log    sflowConfiguration <${sf_val}> compared with sflow_vlaue in LIG <${sflow_vlaue}>


ValidateLI sflowConfiguration
    [Documentation]    ValidateLI sflowConfiguration attribute
    [Arguments]     ${li}   ${sf_val}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}/sflow-configuration

    ${sflow} =     Get From Dictionary     ${getresp}  enabled
    Should Be Equal As Strings    ${sf_val}    ${sflow}
    Log    sflowConfiguration <${sf_val}> compared with sflowConfiguration in LI <${sflow}>

Fetch sFlow data
    [Documentation]    Get sFlow data
    [Arguments]     ${li}
    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    Fusion Api Get Li   ${li_uri}/sflow-configuration
    [Return]    ${getresp}

Build SUBNET Body
    [Documentation]    building subnet data
    [Arguments]       ${subnet}       ${SUBNET_SELECT}
    ${subnet_ret}=     Create Dictionary
    :For  ${subnetdetails}  IN   @{subnet}
    \        Log         ${subnetdetails}
    \     ${networkId} =   Get From Dictionary   ${subnetdetails}  networkId
    \        Run Keyword If    '${networkId}'!='${SUBNET_SELECT}'        Continue For Loop
    \        ${subnet_ret}=        Copy Dictionary        ${subnetdetails}
    [Return]    ${subnet_ret}

Get Subnet
    [Documentation]    Fetches subnet data
    [Arguments]             ${NETWORK_ID}
    ${resp} =   fusion api get ipv4 subnet
    ${subnetcounts} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${subnetcounts}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${subnet} =     Get From List   ${subnetcounts}    ${x}
    \    Exit For Loop If     '${subnet['networkId']}' == '${NETWORK_ID}'
    [Return]    ${subnet}


Get from Subnet
    [Documentation]    Fetches from subnet data
    [Arguments]     ${subnet_list}       ${element}
    ${return} =     Get From Dictionary     ${subnet_list}            ${element}
    [Return]    ${return}

Update Sflow Configuration In LI
    [Documentation]    Get sFlow data
    [Arguments]    ${li}   ${sFlow_data}    ${Net_name}    ${sFlow_Mode}    ${sFlow_enabled}     ${sflowPorts}    ${sflowCollectors}

    ${sFlow_data_body}    Copy Dictionary    ${sFlow_data}
    Set To Dictionary    ${sFlow_data_body}    enabled   ${sFlow_enabled}
    ${net_uri}    Get Ethernet URI    ${Net_name}
    Set To Dictionary    ${sFlow_data_body}    sflowCollectors   ${sflowCollectors}
    Set To Dictionary    ${sFlow_data_body}    sflowPorts   ${sflowPorts}
    Set To Dictionary    ${sFlow_data_body['sflowNetwork']}    uri   ${net_uri}
    Set To Dictionary    ${sFlow_data_body['sflowAgents'][0]}    ipMode   ${sFlow_Mode}

    ${li_uri} =     Get LI URI   ${li}
    ${getresp} =    fusion_api_update_sflow_configuration   uri=${li_uri}    body=${sFlow_data_body}
    ${task}     Wait for task    ${getresp}    10min     1min
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


Create Subnet
    [Documentation]    Creates subnet to assign ipv4
    Log     \ncreating subnet
    # CREATE SUBNET
    ${sub} =        Build SUBNET Body       ${subnet}       15.212.136.0
    ${resp} =           fusion_api_create_ipv4_subnet    body=${sub}
    ${net_uri} =    Get From Dictionary    ${resp}    uri
    Set Global Variable    ${net_uri1}    ${net_uri}

# CREATE RANGE
    ${range}=   Build IPRange Body      ${ipv4range}      15.212.136.0      Test
    :For  ${x}  in  @{range}
    \   ${resp}=  fusion_api_create_ipv4_range      ${x}
    \   ${valDict} =    Create Dictionary       status_code=${200}
    \   Validate Response   ${resp}   ${valDict}

Build IPRange Body
    [Documentation]    Create ipv4 range
    [Arguments]       ${ipv4range}       ${NETWORK_ID}        ${RANGE_NAME}
    ${subnets}=    Get Subnet        ${NETWORK_ID}
    ${uri}=         Get from Subnet         ${subnets}              uri
    ${ipv4_1}=  Create List
    :For  ${ipv4}  IN   @{ipv4range}
    \           ${name} =   Get From Dictionary   ${ipv4}  name
    \           Run Keyword If    '${name}'!='${RANGE_NAME}'        Continue For Loop
    \           Set to dictionary            ${ipv4}             subnetUri=${uri}
    \           Append to List    ${ipv4_1}        ${ipv4}
    [Return]   ${ipv4_1}

REMOVE ALL SUBNET
    [Documentation]    Remove all subnets
    Log     \nRemoving subnet
    Sleep    5s
    ${subnet}    fusion_api_get_ipv4_subnet
    :FOR    ${snet}    IN    @{subnet['members']}
    \    ${resp} =    fusion_api_delete_ipv4_subnet    uri=${snet['uri']}
    \    ${task} =    fusion_api_appliance_setup.Wait For Task     ${resp}    240s    10s    status_code=${204}
    \    ${valDict} =    Create Dictionary   status_code=${204}
        ...                                 taskState=Completed
    \   ${result} =    fusion_api_validation.Validate Response    ${task}    ${val}

Clear Alerts
    [Documentation]    Clear all the alerts
    ${del_resp} =    Fusion Api Delete Alert
    ${task}      Wait For Task     ${del_resp}    2min   20s
    Run keyword unless  ${task['status_code']}== 200    Fail    "Unable to Clear Alert Message"
