*** Settings ***
Documentation       Feature Test: These test cases intended to test Load Balancing - OVF494 for Potash
...
Variables            data_lacp_demo.py
Library              data_lacp_demo.py
Resource			 resource.py
Resource            ../../../../Resources/api/fusion_api_resource.txt
Library             Collections
Library             json
Library             BuiltIn
Library             OperatingSystem
Library             RoboGalaxyLibrary
Library             FusionLibrary
#Resource            Temp-Resource.txt
#Library                C:/Apri20_4.20/fusion/tests/wpst_crm/feature_tests/TBIRD/FVT/fvt_api.py
Library                C:/fusion_15_feb/fusion/tests/wpst_crm/feature_tests/TBIRD/FVT/fvt_api.py

Suite Setup               Fusion Api Login Appliance        ${APPLIANCE_IP}     ${admin_credentials}    #Suite Setup Tasks
Suite Teardown            Fusion Api Logout Appliance    #Suite Teardown Tasks

*** Variables ***
${APPLIANCE_IP}      192.168.144.199
${State_Configured}             Configured

*** Test Cases ***

TC01: Add Base Resources
    [Tags]    TC01
    Run Keyword If  ${ethernet_networks} is not ${null}    Create Bulk Ethernet Networks   ${ethernet_networks}     timeout=300  interval=10

TC02: Add LIG and Create LE
    [Tags]    TC02
    ${resp}=    Run Keyword If    ${ligs} is not ${null}   Add LIG from variable async    ${ligs}
    Wait For Task2    ${resp}    timeout=200    interval=10
    Run Keyword If    ${encl_group} is not ${null}      Add Enclosure Group from variable async    ${encl_group}
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}


TC03: Create Server Profile
    [Tags]    TC03
    Power off Servers in Profiles  ${server_profiles}
    ${resp}=    Add Server Profiles from variable    ${server_profiles}
    Wait For Task2  ${resp}    timeout=600    interval=10

Power On Server
    Power on Servers in Profiles  ${server_profiles}



#-----------------LIG SCENARIOS------------

OVF494_API_TC_38_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing	${Load_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_24_EDIT_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing	${Load_Source_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_39_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_34_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_40_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_29_EDIT_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_41_EDIT_SOURCE_AND_DESTINATION_MAC_TO_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_19_EDIT_SOURCE_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_42_EDIT_SOURCE_AND_DESTINATION_MAC_TO_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_14_EDIT_SOURCE_MAC_TO_DESTINATION_AND_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_13_EDIT_SOURCE_MAC_TO_DESTINATION_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_23_EDIT_DESTINATION_MAC_TO_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_20_EDIT_SOURCE_IP_TO_DESTINATION_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_31_EDIT_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_37_EDIT_SOURCE_AND_DESTINATION_IP_TO_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_15_EDIT_SOURCE_MAC_TO_DESTINATION_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_28_EDIT_DESTINATION_IP_TO_DESTINATION_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_27_EDIT_DESTINATION_MAC_TO_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_16_EDIT_SOURCE_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_36_EDIT_SOURCE_AND_DESTINATION_IP_TO_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_22_EDIT_SOURCE_IP_TO_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_17_EDIT_SOURCE_MAC_TO_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_21_EDIT_SOURCE_IP_TO_DESTINATION_AND_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_33_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_25_EDIT_DESTINATION_MAC_TO_DESTINATION_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_30_EDIT_DESTINATION_IP_TO_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_18_EDIT_SOURCE_IP_TO_DESTINATION_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_26_EDIT_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_35_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_IP_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Destination_Ip}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_32_EDIT_DESTINATION_IP_TO_SOURCE_MAC_IN_LIG
    Edit Lig For Uplinkset Loadbalancing    ${Load_Source_Mac}
    Compare_Ufg_Consistency
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}



#-------------LI SCENARIOS

OVF494_API_TC_68_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_53_EDIT_DESTINATION_MAC_TO_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_52_EDIT_SOURCE_IP_TO_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_45_EDIT_SOURCE_MAC_TO_DESTINATION_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_61_EDIT_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_63_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_56_EDIT_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_67_EDIT_SOURCE_AND_DESTINATION_IP_TO_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_47_EDIT_SOURCE_MAC_TO_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_49_EDIT_SOURCE_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_69_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_65_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_62_EDIT_DESTINATION_IP_TO_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_46_EDIT_SOURCE_MAC_TO_DESTINATION_AND_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_64_EDIT_SOURCE_AND_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_71_EDIT_SOURCE_AND_DESTINATION_MAC_TO_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_48_EDIT_SOURCE_IP_TO_DESTINATION_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_55_EDIT_DESTINATION_MAC_TO_DESTINATION_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_59_EDIT_DESTINATION_IP_TO_DESTINATION_AND_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_70_EDIT_SOURCE_AND_DESTINATION_MAC_TO_DESTINATION_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_60_EDIT_DESTINATION_IP_TO_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_51_EDIT_SOURCE_IP_TO_DESTINATION_AND_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_66_EDIT_SOURCE_AND_DESTINATION_IP_TO_SOURCE_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_IP_Snmp}       ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_50_EDIT_SOURCE_IP_TO_DESTINATION_IP_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Ip}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationIp'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_IP_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_58_EDIT_DESTINATION_IP_TO_DESTINATION_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_57_EDIT_DESTINATION_MAC_TO_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_44_EDIT_SOURCE_MAC_TO_DESTINATION_AND_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_72_EDIT_SOURCE_AND_DESTINATION_MAC_TO_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_43_EDIT_SOURCE_MAC_TO_DESTINATION_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'DestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Destination_Mac_Snmp}     ${ICM_3_ENC1}   ${ICM_6_ENC2}

OVF494_API_TC_54_EDIT_DESTINATION_MAC_TO_DESTINATION_AND_SOURCE_MAC_IN_LI
    ${resp}=    Set To LI LoadBalance   ${Load_Source_Destination_Mac}
    ${loadBalancingMode}=    Get Load Balancing Mode from LI Uplink Set   ${US_Name}
    Run Keyword If     '${loadBalancingMode}' != 'SourceAndDestinationMac'    FAIL     msg="Load Balancing Mode in US is not updated".
    Verify The Result In ICM    ${Source_Destination_Mac_Snmp}      ${ICM_3_ENC1}   ${ICM_6_ENC2}

Nitro_LACP_TC_79_DELETE_PORT_TO_US_LIG
	${lig_edit}	   Get LIG member	 ${LIG_NAME}
	${lig_uri}	  Get Variable Value	${lig_edit['uri']}
	${up_set_lig}= 	Get From Dictionary   ${lig_edit}   uplinkSets
	${port_info}=  	Get from Dictionary   ${up_set_lig[0]}	logicalPortConfigInfos
	Set to Dictionary 	${up_set_lig[0]}	logicalPortConfigInfos=${Del_port_uplink}
	Set to Dictionary 	${lig_edit}		uplinkSets=${up_set_lig}
	${resp}	   Fusion Api Edit LIG	  ${lig_edit}   ${lig_uri}
	Wait For Task2	  ${resp}	timeout=2m   interval=10
	Verify_UFG_Consistency
	Verify The Result In ICM	${Source_Mac_Snmp}   ${ICM_2_ENC1}	 ${ICM_5_ENC2}

Nitro_LACP_TC_78_ADD_PORT_TO_US_LIG
	${lig_edit}	   Get LIG member	 ${LIG_NAME}
	${lig_uri}	  Get Variable Value	${lig_edit['uri']}
	${up_set_lig}= 	Get From Dictionary	 	${lig_edit}		uplinkSets
	${port_info}=  	Get from Dictionary		${up_set_lig[0]}   logicalPortConfigInfos
	Set to Dictionary 	${up_set_lig[0]}	logicalPortConfigInfos=${Add_port_uplink}
	Set to Dictionary 	${lig_edit}		uplinkSets=${up_set_lig}
	${resp}	   Fusion Api Edit LIG	  ${lig_edit}	 ${lig_uri}
	Wait For Task2	  ${resp}	timeout=2m	  interval=10
	Verify_UFG_Consistency
	Verify The Result In ICM	${Source_Mac_Snmp}   ${ICM_2_ENC1}   ${ICM_5_ENC2}

Nitro_LACP_TC_09_DELETE_NETWORK_TO_UPLINK
	${li_uri}=   Get LI URI	  ${LI_NAME}
	${resp}=	Fusion Api Get Li   ${li_uri}
	${resp} = 	 Fusion Api Delete Uplink Set	name=${US_Del_Port[0]['name']}
	Log	to console 	${resp}


*** Keywords ***

Verify The Result In ICM
    [Documentation]     Verify after login to the icm the Load Balancing value and the port counter
    [Arguments]     ${loadbalancing_mode}   ${ICM_3_ENC1}   ${ICM_6_ENC2}
    ${ICM_IP}=    Get ICM IPV4    ${ICM_3_ENC1}
    ${ICM_PWD}=    Get ICM Password    ${APPLIANCE_IP}   EM_SN=${ENC1}    Bay_No=3
    ${ether_lb}=   Get ICM LoadBalance Details    ${ICM_IP}    OneView    ${ICM_PWD}
    ${ICM_IP}=    Get ICM IPV4    ${ICM_6_ENC2}
    ${ICM_PWD}=    Get ICM Password    ${APPLIANCE_IP}   EM_SN=${ENC2}    Bay_No=6
    ${ether_lb6}=   Get ICM LoadBalance Details    ${ICM_IP}    OneView    ${ICM_PWD}
    ${ether_counter}=   Get ICM Port Counters Details    ${ICM_IP}    OneView    ${ICM_PWD}
    Log to console    ICM LoadBalance Value from bay 3 Console: ${ether_lb}    console=True
    Log to console    ICM LoadBalance Value from bay 6 Console: ${ether_lb6}    console=True
    Log to console    ICM LoadBalance Value from bay Console: ${ether_counter}    console=True
    Should Be Equal As Strings      ${ether_lb}     ${ether_lb6}
    Should Be Equal As Strings      ${ether_lb}     ${loadbalancing_mode}

Clear Interconnect Port Counters
    [Documentation]    Clearing Interconnect Port Counters
    ...             Example:
    ...             Clear Interconnect Port Counters    ${ICM_3_ENC1}
    [Arguments]        ${ICM_3_ENC1}
    ${icUri}       Get IC URI    ${ICM_3_ENC1}
    ${body}        Create Dictionary
    ${resp}        Fusion Api clear Interconnect Ports    ${body}    ${ic_uri}
    Wait For Task2   ${resp}    timeout=800    interval=10
    Sleep    1 minutes

Verify US from Variable
    [Documentation]
    [Arguments]    ${us_name}    ${us_variable}
    ${resp} =    fvt_api_get_uplink_set_by_name     ${us_name}
    ${ulss}=   return uplink   ${us_variable}
    :FOR  ${x}  IN   @{ulss}
    \   ${uri}=  Get Uplinkset URI   ${x['name']}
    \   set to dictionary  ${x}   uri=${uri}
    ${status}=    fusion_api_validate_response_follow    ${ulss[0]}    ${resp}    wordy=True
    [return]     ${status}

Verify Interconnect State
    [Arguments]    ${ICM_NAME}    ${POWER_STATE}
    ${ic}    Get IC    ${ICM_NAME}
    ${State}    Get From IC    ${ic}    state
    Log    \nICM state is ${ICM_NAME}:${State}    console=True
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get IC
    [Arguments]    ${ICM_NAME}
    ${resp}    fusion api get interconnect
    ${ics}    Get From Dictionary    ${resp}    members
    ${l}     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${ic}    Get From List    ${ics}    ${x}
    \    Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get Load Balancing Mode from LI Uplink Set
    [Arguments]    ${US_Name}
    ${us_uri}=    Get Uplink Set URI     ${US_Name}
    ${USData}=    Get Resource by URI   ${us_uri}
    ${loadBalancingMode}=    Get From Dictionary    ${USData}    loadBalancingMode
    Log    \nLoadBalanceMode in US ${US_Name} is: ${loadBalancingMode}     console=True
    [return]    ${loadBalancingMode}

Edit Uplinkset new
    [arguments]    ${uls}
    ${ulss}=   return uplink   ${uls}
    :FOR  ${x}  IN   @{ulss}
    \   ${uri}=  Get Uplinkset URI   ${x['name']}
    \   set to dictionary  ${x}   uri=${uri}
    \   ${resp}=  fusion_api_edit_uplink_set   body=${x}   uri=${uri}
    [return]   ${resp}

return uplink
    [arguments]   ${uplinkSets}
    ${l} =  Get Length  ${uplinkSets}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   Run Keyword If  '${networkType}' == 'Ethernet'      Continue For Loop
    \   ${networkUris} =    Get FC Uris ${networks}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris ${networkUris}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${networkType} =    Get From Dictionary     ${uplinkSets[${x}]} networkType
    \   ${networks} =       Get From Dictionary     ${uplinkSets[${x}]} networkUris
    \   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
    \   Run Keyword If  '${networkType}' == 'FibreChannel'  Continue For Loop
    \   ${networkUris} =    Get FCoE Uris   ${networks}
    \   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
    \   Set to dictionary   ${uplinkSets[${x}]} networkUris     ${networkUris}
    \   ${nativeNetworkUri} =   Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri    ${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]} nativeNetworkUri     ${nativeNetworkUri}
    \   ${LI}=  Get LI URI   ${uplinkSets[${x}]['logicalInterconnectUri']}
    \   set to dictionary    ${uplinkSets[${x}]}   logicalInterconnectUri   ${LI}
    \   ${privatevlan}=    Get From Dictionary    ${uplinkSets[${x}]}    privateVlanDomains
    \   ${privatevlanbody}=    Create LIG Private VLAN Payload    ${privatevlan}
    [return]     ${uplinkSets}

Create LIG Private VLAN Payload
    [Documentation]
    [Arguments]    ${privatevlan}
    ${l} =  Get Length  ${privatevlan}
    :FOR    ${x}    IN RANGE  0  ${l}
    \   ${status} =    Run Keyword and Return Status     Dictionary Should Contain Key    ${privatevlan[${x}]}    primaryNetwork
    \   Continue For Loop If    '${status}' == 'False'
    \   ${primarynetwork}=   Get From Dictionary    ${privatevlan[${x}]['primaryNetwork']}    uri
    \   ${primarynetworkuri}=    Get Ethernet URI    ${primarynetwork}
    \   Set To Dictionary    ${privatevlan[${x}]['primaryNetwork']}    uri    ${primarynetworkuri}
    :FOR    ${x}    IN RANGE  0  ${l}
    \   ${status} =    Run Keyword and Return Status     Dictionary Should Contain Key    ${privatevlan[${x}]}    isolatedNetwork
    \   Continue For Loop If    '${status}' == 'False'
    \   ${isolatedNetwork}=   Get From Dictionary    ${privatevlan[${x}]['isolatedNetwork']}    uri
    \   ${isolatedNetworkuri}=    Get Ethernet URI    ${isolatedNetwork}
    \   Set To Dictionary    ${privatevlan[${x}]['isolatedNetwork']}    uri    ${isolatedNetworkuri}
    [return]    ${privatevlan}

Get ICM Password
    [Documentation]    Gets Interconnect SSH Password from OneView
    ...             Example:
    ...             Get ICM Password   ${HOST}    ${EM_SN}    ${Bay_No}
    [Arguments]         ${HOST}    ${EM_SN}    ${Bay_No}
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep   3
    ${EM1}=  Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    Log to console    \nIPV6 address is: ${EM1}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    Log to console    \n IPV6 address is: ${EM}
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    Log to console    \n Auth is: ${XAUTH}
    ${password}=   Execute Command    curl --globoff -ki -x "" --request POST --header "x-auth-token:${XAUTH}" https://[${EM}]/rest/v1/InterconnectManager/${Bay_No} -H 'Content-Type: application/json' -d '{"Action": "ReadCanmicBlocks","List": [10]}' | grep } | python -mjson.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${lines} =    Split to Lines                ${password}
    ${lines1} =    Convert To List    ${lines}
    ${Return} =    Fetch from Right    ${lines[0]}    .
    ${Return1} =   Split String From Right    ${lines[1]}    |
    ${OV_Pwd} =   String.Replace String    ${Return}    |    ${Return1[1][0]}
    Log to console    \nExpected password is:${OV_Pwd}
    [Return]    ${OV_Pwd}

Get ICM IPV4
    [Documentation]    Fetches ICM IP
    ...             Example:
    ...             Get ICM IP    ${ICM_NAME}
    [Arguments]         ${ICM_NAME}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${address}=     Get From Dictionary     ${IC['members'][0]}   ipAddressList
    Log     Logged ipaddress list : ${address}    console=True
    :FOR     ${a}    IN     @{address}
    \    Continue For Loop If    '${a['ipAddressType']}'!='Ipv4Dhcp'
    \    ${ipaddress}=     Get From Dictionary     ${a}   ipAddress
    ${ipadress1}     Convert to String    ${ipaddress}
    [Return]    ${ipadress1}

Get ICM LoadBalance Details
    [Documentation]
    [Arguments]         ${ICM_IP}    ${uname}    ${password}
    ${ether_counter}=    get_etherchannel_loadbalance_from_icm    ${ICM_IP}    OneView    ${password}    'show etherchannel load-balance\n'
    ${ether_counter}=    Strip String    ${ether_counter}    mode=both
    [return]    ${ether_counter}

Get ICM Port Counters Details
    [Documentation]
    [Arguments]         ${ICM_IP}    ${uname}    ${password}
    ${ether_lb}=    get_etherchannel_port_counter_from_icm    ${ICM_IP}    OneView    ${password}    'show int co Ten-GigabitEthernet 0/0/1:1 ; show inter co Ten-GigabitEthernet 0/0/2:1 ; show int co Ten-GigabitEthernet 1/0/1:1; show int co Ten-GigabitEthernet 1/0/2:1\n'
    ${ether_lb}=    Strip String    ${ether_lb}    mode=both
    [return]    ${ether_lb}

Edit Lig For Uplinkset Loadbalancing
    [Arguments]    ${Load_balance}
    ${lig_edit}    Get LIG member    ${LIG_NAME}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${up_set_lig}=  Get From Dictionary     ${lig_edit}     uplinkSets
    Set to dictionary   ${up_set_lig[0]}        loadBalancingMode=${Load_balance}
    Set to Dictionary   ${lig_edit} 	uplinkSets=${up_set_lig}
    ${resp}    Fusion Api Edit LIG    ${lig_edit}    ${lig_uri}
    Wait For Task2    ${resp}   timeout=2m    interval=10

Compare_Ufg_Consistency
    Check LI Status    ${LI_NAME}    NOT_CONSISTENT
    ${li_uri}=      Get LI URI   ${LI_NAME}
    ${resp}=    Fusion Api Update From Group    ${li_uri}   api=1200
    Wait For Task2    ${resp}    timeout=400    interval=10
    Check LI Status    ${LI_NAME}    CONSISTENT


Set To LI LoadBalance
    [Documentation]
    [Arguments]     ${Load_Balance}
    ${us_uri}=    Get Uplink Set URI     ${US_Name}
    ${LI_body} =    Copy Dictionary     ${li_uplink_sets_LoadBalancing}
    Set to dictionary		${LI_body[0]}	loadBalancingMode=${Load_Balance}
    ${resp}=    Edit UplinkSet new  ${LI_body}
    ##Log to Console    ${resp}
    Wait For Task2   ${resp}    timeout=800    interval=10
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_3_ENC1}   ${State_Configured}
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_6_ENC2}   ${State_Configured}
    ${consistencyStatus}=     Get Logical Interconnect Status  ${li_name}
    #Log to Console    LI Consistency Status is: ${consistencyStatus}
    #Logical Interconnect Consistency Status Should Be    ${li_name}    NOT_CONSISTENT
    Clear Interconnect Port Counters    ${ICM_3_ENC1}
    Clear Interconnect Port Counters    ${ICM_6_ENC2}