*** Settings ** *
Documentation        Feature Test:  OVF293 SNMPv3
...                  This set of test cases is to verify the feature SNMPv3 related testing in C7000
...
Variables           Copy of data_variables.py
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             FusionLibrary
Library             BuiltIn

*** Variables ** *
${SSH_PASS}                     hpvse1
${DataFile}                     ./OVAData.xml
${APPLIANCE_IP}                192.168.146.34
${inform}                       False
${li}                            SGH411DFYA-LIG_New1
${ICM_1}                        SGH411DFYA, interconnect 1
${ICM_2}                        SGH411DFYA, interconnect 2
${State_Configured}             Configured
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT



*** Test Cases ***



OVF293_API_TC_03 AddsnmpUser_ DefaultAttributes_NOAUTHNOPRIV

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    Log to console and logfile    \nDefault Attributes No Auth No Priv
    ${resp} =    Create LIG      ${LIG_new}
    Log to console and logfile    \n\nLIG Created Successfully:${resp}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    Set Global Variable    ${LIG_URI}    ${lig_uri}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Default_NoAuthNoPriv['snmpUsers']}    ${SNMPV3_body_Default_NoAuthNoPriv['trapDestinations']}    ${SNMPV3_body_Default_NoAuthNoPriv['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}


OVF293_API_TC_05 AddsnmpUser_SecLevel_Authentication_AuthNprotocolMD5
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_MD5['snmpUsers']}    ${SNMPV3_body_Auth_MD5['trapDestinations']}    ${SNMPV3_body_Auth_MD5['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    ${lig_name} =           Get Variable Value  ${LIG1}
    #${lig_snmp_configuration} =           Get Variable Value  ${add_snmp_lig_Auth_MD5['lig1']['snmpConfiguration']}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_MD5['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication with MD5

OVF293_API_TC_06 AddsnmpUser_SecLevel_Authentication_AuthNprotocolSHA1
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_SHA['snmpUsers']}    ${SNMPV3_body_Auth_SHA['trapDestinations']}    ${SNMPV3_body_Auth_SHA['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_name} =           Get Variable Value  ${LIG1}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_SHA['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication with SHA1

OVF293_API_TC_08 AddsnmpUser_SecLevel_AuthPriv_Authentication MD5 And Privacy DES

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_Priv_MD5_DES['snmpUsers']}    ${SNMPV3_body_Auth_Priv_MD5_DES['trapDestinations']}     ${SNMPV3_body_Auth_Priv_MD5_DES['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_name} =           Get Variable Value  ${LIG1}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_Priv_MD5_DES['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication with MD5 and DES


OVF293_API_TC_09 AddsnmpUser_SecLevel_AuthPriv_Authentication MD5 And Privacy AES128

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_Priv_MD5_AES128['snmpUsers']}    ${SNMPV3_body_Auth_Priv_MD5_AES128['trapDestinations']}    ${SNMPV3_body_Auth_Priv_MD5_AES128['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_name} =           Get Variable Value  ${LIG1}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_Priv_MD5_AES128['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication Privacy with MD5 AND AES128

OVF293_API_TC_12 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA1 And Privacy DES

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_Priv_SHA_DES['snmpUsers']}    ${SNMPV3_body_Auth_Priv_SHA_DES['trapDestinations']}    ${SNMPV3_body_Auth_Priv_SHA_DES['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_name} =           Get Variable Value  ${LIG1}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_Priv_SHA_DES['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication Privacy with MD5 AND AES128

OVF293_API_TC_13 AddsnmpUser_SecLevel_AuthPriv_Authentication SHA1 And Privacy AES128

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_Auth_Priv_SHA_AES128['snmpUsers']}    ${SNMPV3_body_Auth_Priv_SHA_AES128['trapDestinations']}    ${SNMPV3_body_Auth_Priv_SHA_AES128['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     180 s    10 s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_name} =           Get Variable Value  ${LIG1}
    ${lig_snmp_users} =           Get Variable Value  ${SNMPV3_body_Auth_Priv_SHA_AES128['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Verify SNMP Users     ${lig_name}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication Privacy with MD5 AND AES128


OVF293_API_TC_54 Add Trap_SnmpV3 disabled
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_snmp_disable['snmpUsers']}    ${SNMPV3_body_snmp_disable['trapDestinations']}    ${SNMPV3_body_snmp_disable['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_trap_USername} =    Get LIG SNMP Users From Data    ${SNMPV3_body_snmp_disable}
    ${lig_Trap_Ip} =    Get LIG SNMP TrapDestinations From Data    ${SNMPV3_body_snmp_disable}
    Verify SNMP Trap Destination Edit LIG    ${LIG1}    ${lig_trap_USername}   ${lig_Trap_Ip}


OVF293_API_TC_55 Add Trap destination- When no snmp users are available
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${SNMPV3_body_snmp_lig_trap_destinations_no_users['snmpUsers']}    ${SNMPV3_body_snmp_lig_trap_destinations_no_users['trapDestinations']}    ${SNMPV3_body_snmp_lig_trap_destinations_no_users['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_lig_trap_destinations_without_users['snmpUsers']}    ${snmp_lig_trap_destinations_without_users['trapDestinations']}    ${snmp_lig_trap_destinations_without_users['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${task}
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_no_users['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_no_users['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}



OVF293_API_TC_56 Add Trap Inform messages disabled Trap Type As Trap
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_lig_trap_destinations_type_Trap['snmpUsers']}    ${snmp_lig_trap_destinations_type_Trap['trapDestinations']}    ${snmp_lig_trap_destinations_type_Trap['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Run Keyword If  '${resp['status_code']}' == '202'    Log to console  \nStatus Code: ${resp['status_code']} \nSuccessfully!! Edited the LIG for snmpV3 single user with auth & priv protocols and trap details\n
    ...    ELSE    FAIL
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
   ${trap_type} =    Get Trap Destinations Trap Type LIG    ${LIG1}
   Log to console and logfile    \n Trap is ${trap_type[0]}
   Should Be Equal As Strings    ${trap_type[0]}     ${inform}

OVF293_API_TC_57 Add Inform-Toggle Trap Type to Inform-No EngineId specified
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_lig_trap_destinations_type_Inform_wo_engineID['snmpUsers']}    ${snmp_lig_trap_destinations_type_Inform_wo_engineID['trapDestinations']}    ${snmp_lig_trap_destinations_type_Inform_wo_engineID['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Should Be Equal    ${Err_message}    ${error_engine_id_missing['message']}
    Should Be Equal    ${Err_Code}    ${error_engine_id_missing['errorCode']}
    Log to console and logfile    \n Error is :${Err_message}:${Err_Code}




OVF293_API_TC_59 Add Trap-Non-default port
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_lig_trap_dest_add_non_def_port['snmpUsers']}    ${snmp_lig_trap_dest_add_non_def_port['trapDestinations']}    ${snmp_lig_trap_dest_add_non_def_port['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${Port} =    Get Trap Destinations Port Details LIG    ${LIG1}
    ${Port_No} =           Get Variable Value  ${snmp_lig_trap_dest_add_non_def_port['trapDestinations']}
    ${Port_val} =           Get From Dictionary    ${Port_No[0]}    port
    Should Be Equal As Strings    ${Port_val}     ${Port[0]}

OVF293_API_TC_64 Add Trap_Inform-Maximum number validation
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_traps['snmpUsers']}    ${snmp_traps['trapDestinations']}    ${snmp_traps['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n task is :${resp}
    #${task} =    Wait For Task     ${resp}     120s
    #${valDict} =     Create Dictionary    status_code=${200}
    #...                                 taskState=Completed
    #Validate Response    ${task}    ${valDict}





OVF293_API_TC_68 Modify snmp Trap-Trap address
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_trap_Address['snmpUsers']}    ${lig_snmp_trap_Address['trapDestinations']}    ${lig_snmp_trap_Address['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n task is :${resp}
    ${task} =    Wait For Task     ${resp}     120s
   ${lig_trap_USername} =    Get LIG SNMP Users From Data    ${lig_snmp_trap_Address}
   ${lig_Trap_Ip} =    Get LIG SNMP TrapDestinations From Data    ${lig_snmp_trap_Address}
   Verify SNMP Trap Destination Edit LIG    ${LIG1}    ${lig_trap_USername}    ${lig_Trap_Ip}



OVF293_API_TC_69 Modify snmp Trap-Inform
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_trap_Inform['snmpUsers']}    ${lig_snmp_trap_Inform['trapDestinations']}    ${lig_snmp_trap_Inform['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${trap_type} =    Get Trap Destinations Trap Type LIG    ${LIG1}
    Log to console and logfile    \n Trap Destinations are:${trap_type[0]}
    Run Keyword If    "${trap_type[0]}" != "False"    Get Trap Destinations Engine ID LIG    ${LIG1}

OVF293_API_TC_70 Modify snmp Port
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_trap_port['snmpUsers']}    ${lig_snmp_trap_port['trapDestinations']}    ${lig_snmp_trap_port['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${Port_Number} =    Get Trap Destinations Port Details LIG    ${LIG1}
    Log to console and logfile    \n Port after edit is ${Port_Number[0]}

OVF293_API_TC_71 Modify snmp Trap_Modify User Name

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_user_name['snmpUsers']}    ${lig_snmp_user_name['trapDestinations']}    ${lig_snmp_user_name['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    #Verify SNMP Users
    ${lig_snmp_users} =           Get Variable Value  ${lig_snmp_user_name['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}

OVF293_API_TC_73 Modify snmp Trap Type Change trap type from Trap to Inform
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_trap_type_inform['snmpUsers']}    ${lig_snmp_trap_type_inform['trapDestinations']}    ${lig_snmp_trap_type_inform['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
    ${lig_snmp_traps} =           Get Variable Value  ${lig_snmp_trap_type_inform['trapDestinations']}
    ${len1} =     Get Length    ${lig_snmp_traps}
    ${lig_trap_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_traps}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    inform
    \    Append To List    ${lig_trap_list}    ${list_user_1}
    \    ${trap_type} =    Get Trap Destinations Trap Type LIG    ${LIG1}
    \    Log to console and logfile    \n Trap is ${trap_type}
    \    List Should Contain Value    ${lig_trap_list}    ${trap_type[${x}]}

OVF293_API_TC_74 Modify snmp Trap-Modify security level

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_security_level['snmpUsers']}    ${lig_snmp_security_level['trapDestinations']}    ${lig_snmp_security_level['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}

OVF293_API_TC_75 Modify snmp Trap-With invalid port

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_invalid_port['snmpUsers']}    ${lig_snmp_invalid_port['trapDestinations']}    ${lig_snmp_invalid_port['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
    ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
    Log to console and logfile    \nMessage:${message}
    ${valDict} =     Create Dictionary    status_code=${400}
    ...                                 message=${message}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp}    ${valDict}

OVF293_API_TC_76 Modify snmp inform-With invalid EngineId

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${lig_snmp_invalid_engineID['snmpUsers']}    ${lig_snmp_invalid_engineID['trapDestinations']}    ${lig_snmp_invalid_engineID['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_invalid_engine_id['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_invalid_engine_id['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}





OVF293_API_TC_16 AddsnmpUser_DuplicateNamesNotAllowed


    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_user_duplicate_error['snmpUsers']}    ${snmp_user_duplicate_error['trapDestinations']}    ${snmp_user_duplicate_error['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_lig['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_lig['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}


OVF293_API_TC_17 AddsnmpUser_Invalidvalues_UserName


    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Invalidvalues_UserName['snmpUsers']}    ${snmp_Invalidvalues_UserName['trapDestinations']}    ${snmp_Invalidvalues_UserName['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_invalid_user['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_invalid_user['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}


OVF293_API_TC_18 AddsnmpUser_Invalidvalues_AuthPassPhrase


    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Invalidvalues_AuthPassPhrase['snmpUsers']}    ${snmp_Invalidvalues_AuthPassPhrase['trapDestinations']}    ${snmp_Invalidvalues_AuthPassPhrase['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_missing_credential['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_missing_credential['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}



OVF293_API_TC_19 AddsnmpUser_Invalidvalues_PrivPassPhrase
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Invalidvalues_Auth_Priv_Pass_Phrase['snmpUsers']}    ${snmp_Invalidvalues_Auth_Priv_Pass_Phrase['trapDestinations']}    ${snmp_Invalidvalues_Auth_Priv_Pass_Phrase['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_invalid_Priv_password['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_invalid_Priv_password['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}


OVF293_API_TC_20 AddsnmpUser_MandatoryAttributeCheck_Name
    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Mandatory_Attribute_Check_Name['snmpUsers']}    ${snmp_Mandatory_Attribute_Check_Name['trapDestinations']}    ${snmp_Mandatory_Attribute_Check_Name['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_Mandatory_Attribute_Check2['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_Mandatory_Attribute_Check2['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}





OVF293_API_TC_21 AddsnmpUser_MandatoryAttributeCheck_AuthAlgo
    Log to console and logfile    \nInvalid Auth Privilege Phrase Password Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Mandatory_Attribute_Check_Authlgo['snmpUsers']}    ${snmp_Mandatory_Attribute_Check_Authlgo['trapDestinations']}    ${snmp_Mandatory_Attribute_Check_Authlgo['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_Mandatory_Attribute_Check2['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_Mandatory_Attribute_Check2['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}



OVF293_API_TC_22 AddsnmpUser_MandatoryAttributeCheck_AuthPassPhrase

    Log to console and logfile    \nInvalid Auth Password Phrase MandatoryAttribute Check Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Mandatory_Attribute_Check_AuthPassPhrase['snmpUsers']}    ${snmp_Mandatory_Attribute_Check_AuthPassPhrase['trapDestinations']}    ${snmp_Mandatory_Attribute_Check_AuthPassPhrase['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_invalid_Auth_password['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}



OVF293_API_TC_23 AddsnmpUser_MandatoryAttributeCheck_PrivAlgorithm

    Log to console and logfile    \n Auth Privilege Phrase MandatoryAttribute Check Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Mandatory_Attribute_Check_Auth_Priv_PassPhrase['snmpUsers']}    ${snmp_Mandatory_Attribute_Check_Auth_Priv_PassPhrase['trapDestinations']}    ${snmp_Mandatory_Attribute_Check_Auth_Priv_PassPhrase['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_Mandatory_Attribute_Check4['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_Mandatory_Attribute_Check4['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}



OVF293_API_TC_24 AddsnmpUser_Passphrase_LengthCheck

    Log to console and logfile    \n Password Phrase Length Verification
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Password_Length_Check['snmpUsers']}    ${snmp_Password_Length_Check['trapDestinations']}    ${snmp_Password_Length_Check['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_invalid_Auth_password['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_invalid_Auth_password['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}
    Log to console and logfile    \n Password Phrase Length Verification is less than 8 ....verified successfully!!!!


OVF293_API_TC_25 AddsnmpUser_MaximumSnmpUsersAllowedToBeAdded

    Log to console and logfile    \n Maximum SnmpUsers Allowed To Be Added
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${snmp_Maximum_No_Of_Users['snmpUsers']}    ${snmp_Maximum_No_Of_Users['trapDestinations']}    ${snmp_Maximum_No_Of_Users['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    Log to console and logfile    \n resp:${resp}
    ${task} =    Wait For Task     ${resp}     120s
    ${Error} =    Get Variable Value  ${task['taskErrors']}
    Log to console and logfile    \n Error is :${Error}
    ${Err_message} =    Get From Dictionary  ${Error[0]}    message
    ${Err_Code} =    Get From Dictionary  ${Error[0]}       errorCode
    Lists Should Be Equal    ${Err_message}    ${error_Maximum_No_of_users['message']}
    Lists Should Be Equal    ${Err_Code}    ${error_Maximum_No_of_users['errorCode']}
    Log to console and logfile    \n Error Message successfully compared with errorcode:${Err_message}:${Err_Code}




OVF293_API_TC_36 Modify snmp User_ Auth and Privacy details
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${add_lig_snmpv3_edit_user['snmpUsers']}    ${add_lig_snmpv3_edit_user['trapDestinations']}    ${add_lig_snmpv3_edit_user['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    Sleep         10secs

    #Verify SNMP Users
    ${lig_snmp_users} =           Get Variable Value  ${add_lig_snmpv3_edit_user['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details


OVF293_API_TC_37 Modify snmp User_ Security levels Auth to AuthPriv
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_snmpv3_users_AuthtoAuthPriv['snmpUsers']}    ${edit_lig_snmpv3_users_AuthtoAuthPriv['trapDestinations']}    ${edit_lig_snmpv3_users_AuthtoAuthPriv['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    Sleep         10secs

    #Verify SNMP Users
    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_snmpv3_users_AuthtoAuthPriv['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details


OVF293_API_TC_38 Modify snmp User_ Sec Level AuthPriv to None
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_snmpv3_users_AuthPrivtoNone['snmpUsers']}    ${edit_lig_snmpv3_users_AuthPrivtoNone['trapDestinations']}    ${edit_lig_snmpv3_users_AuthPrivtoNone['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    Sleep         10secs

    #Verify SNMP Users
    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_snmpv3_users_AuthPrivtoNone['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details


OVF293_API_TC_39 Modify snmp User_ Sec Level Auth to None
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${lig_edit}    Get LIG member    ${LIG1}
    ${lig_uri}    Get Variable Value    ${lig_edit['uri']}
    ${lig_snmp}    Edit LIG body for SNMP    ${LIG1}    ${edit_lig_snmpv3_users_AuthtoNone['snmpUsers']}    ${edit_lig_snmpv3_users_AuthtoNone['trapDestinations']}    ${edit_lig_snmpv3_users_AuthtoNone['v3Enabled']}
    Set To Dictionary    ${lig_edit}    eTag=
    Set To Dictionary    ${lig_edit}    snmpConfiguration=${lig_snmp}
    ${resp}    fusion_api_edit_lig    body=${lig_edit}    uri=${LIG_URI}
    ${task} =    Wait For Task     ${resp}     120s
    Log to console and logfile    \n task is :${resp}
    Sleep         10secs

    #Verify SNMP Users
    ${lig_snmp_users} =           Get Variable Value  ${edit_lig_snmpv3_users_AuthtoNone['snmpUsers']}
    ${len1} =     Get Length    ${lig_snmp_users}
    ${lig_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${lig_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${lig_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nResp Content Is: ${lig_Create_user}
    Verify SNMP Users     ${LIG1}    ${lig_Create_user}
    Log to console and logfile    \nUsers are verified successfully Security Level Authentication and Privacy Details
    Fusion Api Logout Appliance



*** Keywords ***

Create LIG
    [Documentation]    Suite Setup Tasks
    [Arguments]        ${body1}
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    ${body}    Build LIG body    ${body1}
    Log to console and logfile    \n-Creating LIG ${body}
    ${resp}    Fusion Api Create LIG    ${body}
    ${task} =   Wait For Task   ${resp}    60s  2s
    [Return]    ${resp}

Get LIG member
    [Documentation]    Get LIG member
    [Arguments]    ${LIG1}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_edit}    Get Variable Value    ${lig_get['members'][0]}
    [Return]    ${lig_edit}


Edit LIG body for SNMP
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG1}    ${snmpusers}    ${trapdestination}    ${v3Enabled}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=${v3Enabled}
    Set To Dictionary    ${lig_snmp}    snmpUsers=${snmpusers}
    Set To Dictionary    ${lig_snmp}    trapDestinations=${trapdestination}
    [Return]    ${lig_snmp}




Disable SNMPV3
    [Documentation]    Edit LIG for SNMPv3
    [Arguments]    ${LIG1}    ${V3Enabled}
    ${lig_get}    Fusion Api Get Lig    param=?filter=name=${LIG1}
    ${lig_snmp}    Get Variable Value    ${lig_get['members'][0]['snmpConfiguration']}
    Set To Dictionary    ${lig_snmp}    v3Enabled=${V3Enabled}
    [Return]    ${lig_snmp}

Get IC
    [Documentation]    Get Interconnect Details
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}


Verify LI Consistency State
    [Documentation]    Verify LI Consistency State
    [Arguments]        ${li}    ${State}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}
    Sleep    15s


Verify Interconnect State
    [Documentation]    Verify Interconnect State
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get Trap Destinations Engine ID LIG
    [Documentation]    Getting Trap Destinations Engine ID LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${trap_dest_dict}=    Get From Dictionary    ${resp_lig['snmpConfiguration']}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${Engine_ID_Details}=    Get From Dictionary    ${trap_dest_dict[0]}    engineId
    \    Append To List    ${engine_id_list}    ${Engine_ID_Details}
    Log to console and logfile    \n\nEngine IDs are: ${engine_id_list}
    [Return]    ${engine_id_list}

Get Trap Destinations Port Details LIG
    [Documentation]    Getting Trap Destinations Port Details LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    log to console    LI URI is ${lig_uri}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${lig_trap_dest_dict}=    Get From Dictionary    ${resp_lig['snmpConfiguration']}    trapDestinations
    ${len1} =     Get Length    ${lig_trap_dest_dict}
    ${lig_port_number}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${port_number}=    Get From Dictionary    ${lig_trap_dest_dict[0]}    port
    \    Append To List    ${lig_port_number}    ${port_number}
    Log to console and logfile    \n\nPort is: ${lig_port_number}
    [Return]   ${lig_port_number}

Get Trap Destinations Trap Type LIG
    [Documentation]    Getting Trap Destinations Trap Type LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    log to console    LI URI is ${lig_uri}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${lig_snmp_config}=    Get From Dictionary    ${resp_lig}    snmpConfiguration
    ${lig_trap_dest_dict}=    Get From Dictionary    ${lig_snmp_config}    trapDestinations
    ${len1} =     Get Length    ${lig_trap_dest_dict}
    ${lig_trap_type_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_type}=    Get From Dictionary    ${lig_trap_dest_dict[0]}    inform
    \    Append To List    ${lig_trap_type_list}    ${trap_type}
    Log to console and logfile    \n\nTrap Type is: ${lig_trap_type_list}
    [Return]   ${lig_trap_type_list}

Get LIG SNMP Users From Data
    [Documentation]    Getting LIG SNMP Users From Data
    [Arguments]        ${lig_body}
    #${lig_snmp_config} =           Get Variable Value  ${lig_body['snmpConfiguration']}
    ${lig_snmp_trapdestinations} =           Get Variable Value  ${lig_body['trapDestinations']}
    Log to console and logfile    \Types are :${lig_snmp_trapdestinations}
    ${len} =     Get Length    ${lig_snmp_trapdestinations}
    Log to console and logfile    Length..${len}
    ${USer_name}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${lig_snmp_trapdestinations}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    userName
    \    Append To List    ${USer_name}    ${list_user}
    Log to console and logfile    \Types are :${lig_snmp_trapdestinations}
    Log to console and logfile    \Users are :${USer_name}
    [Return]    ${USer_name}

Get LIG SNMP TrapDestinations From Data
    [Documentation]    Getting LIG SNMP TrapDestinations From Data
    [Arguments]        ${lig_body}
    #${lig_snmp_config} =           Get Variable Value  ${lig_body['snmpConfiguration']}
    ${lig_snmp_trapdestinations} =           Get Variable Value  ${lig_body['trapDestinations']}
    ${len} =     Get Length    ${lig_snmp_trapdestinations}
    Log to console and logfile    Length..${len}
    ${Trap_Destination_Ip}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${lig_snmp_trapdestinations}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    trapDestination
    \    Append To List    ${Trap_Destination_Ip}    ${list_user}
    Log to console and logfile    \nTypes are :${lig_snmp_trapdestinations}
    Log to console and logfile    \nTrap are :${Trap_Destination_Ip}
    [Return]    ${Trap_Destination_Ip}

Verify SNMP Trap Destination Edit LIG
    [Documentation]    Verifying SNMP Trap Destination Edit LIG
    [Arguments]        ${lig}        ${data_users}    ${trap_destinations}
    Log to console and logfile    Validating Interconnects for SNMP
    log to console    Verify LIG with snmp in LIG ${lig}
    ${lig_uri} =    Get LIG URI    ${lig}
    log to console  Verify LIG with snmp in LIG ${lig_uri}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}
    log to console    Verify LIG with snmp in LIG ${Resp_Lig}

    # Trap Details
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    LIG SNMP Config..${snmp_config}
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    Log to console and logfile    Length..${len}
    ${trap_dest}=    Create List
    ${trap_dest_ips}=    Create List
    ${trap_dest_user}=    Create List
    ${inform}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${trap_dest}    ${list_trap}
    \    ${list_trap_users}=    Get From Dictionary    ${traps}    userName
    \    Append To List    ${trap_dest_user}    ${list_trap_users}
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${trap_dest_user}    ${data_users[${x}]}
    ${len}    Get Length    ${trap_destinations}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${trap_dest}    ${trap_destinations[${x}]}
    \    log to console    Verify LIG with snmp in LIG  traps and Users

Edit LIG
    [Documentation]    Performing Edit LIG
    [Arguments]        ${lig_body}    ${lig}
    ${body} =    Build LIG body      ${lig_body}
    ${lig_uri} =    Get LIG URI    ${lig}
    Log to console and logfile    \n\nUri Is: ${lig_uri}
    ${resp1} =    Fusion Api Edit LIG    body=${body}    uri=${lig_uri}
    Log to console and logfile    \n\nOutput Is: ${resp1}
    [Return]    ${resp1}

Verify SNMP Users
    [Documentation]    Verifying SNMP Users
    [Arguments]        ${lig}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${lig_uri} =    Get LIG URI    ${lig}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}
    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
    Log to console and logfile    SNMP Users are successfully Verified

Get SNMPUSers from Data
    [Documentation]    Getting SNMPUSers from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}

Verify SNMP Users Edit LI
    [Documentation]    Verifying SNMP Users Edit LI
    [Arguments]        ${li}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp_li}

    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    #User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Edit LI
    [Documentation]    Performing Edit LI
    [Arguments]        ${li}        ${li_body}
    #Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    [Return]    ${respl}

Perform an Update From Group
    [Documentation]    Performing Update From Group
    [Arguments]        ${li}=${li}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
