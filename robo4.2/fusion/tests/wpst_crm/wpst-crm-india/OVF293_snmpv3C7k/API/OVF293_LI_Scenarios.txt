*** Settings ** *
Documentation        Feature Test:  OVF293 SNMPv3
...                  This set of test cases is to verify the feature SNMPv3 related testing in C7000
...
Variables           data_variables.py
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library             Collections
Library             json
Library             OperatingSystem
Library             Selenium2Library
Library             FusionLibrary
Library             BuiltIn

*** Variables ** *
${SSH_PASS}                     hpvse1
${APPLIANCE_IP}                192.168.147.196
${inform}                       False
${li}                            SGH411DFYA-LIG_New1
${ICM_1}                        SGH411DFYA, interconnect 1
${ICM_2}                        SGH411DFYA, interconnect 2
${State_Configured}             Configured
${Inconsistent_State}           NOT_CONSISTENT
${consistent_State}             CONSISTENT


*** Test Cases ***

OVF293_API_TC_37 Modify snmp User_Security levels Auth to AuthPriv

    #Add snmp users by editing the LI_Auth and AuthPassPhrase
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_to_authpriv['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Users from LI for Auth and Privacy Details
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_auth_to_authpriv['snmpConfiguration']}
    Verify SNMP Users Edit LI    ${li}    ${li_Create_user}

OVF293_API_TC_36 LI_Modify snmp User_AuthPassPhrase and Privacypassphrase Details

    #Add snmp users by editing the LI_Auth and AuthPassPhrase
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_authpass_to_authprivpass['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Users from LI for Auth and Privacy Details
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_authpass_to_authprivpass['snmpConfiguration']}
    Verify SNMP Users Edit LI    ${li}    ${li_Create_user}

OVF293_API_TC_38 Modify snmp User_Sec Level AuthPriv to None

    #Edit snmp users by editing the LI_Security levels AuthPriv to None
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_seclev_AuthPrivtoNone['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Users from LI for Security levels Auth to AuthPriv
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_seclev_AuthPrivtoNone['snmpConfiguration']}
    Verify SNMP Users Edit LI    ${li}    ${li_Create_user}

OVF293_API_TC_39 Modify snmp User_ Sec Level Auth to None
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_seclev_AuthtoNone['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Users from LI for Security levels Auth to AuthPriv
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_seclev_AuthtoNone['snmpConfiguration']}
    Verify SNMP Users Edit LI    ${li}    ${li_Create_user}

OVF293_API_TC_41 Modify_snmp_User_invalid_Auth_PassPhrase

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_to_authpriv['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
    #Verify Users from LI for Auth and Privacy Details
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_auth_to_authpriv['snmpConfiguration']}
    Verify SNMP Users Edit LI    ${li}    ${li_Create_user}

OVF293_API_TC_42 Modify snmp User_invalid AuthPriv Pass Phrase
   #Edit snmp users by editing the LI_Invalid Name
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_snmp_users_AuthPriv_Invalid_PassPhrase['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_44 Modify snmp User_Authentication Algorithm empty
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_snmp_Auth_Algorithm_empty['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_missing_Parameter['message']}
   ${errorCode} =    Get Variable Value  ${error_missing_Parameter['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_45 Modify snmp User_Authentication Passphrase empty
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_snmp_Auth_Passphrase_empty['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_missing_credential['message']}
   ${errorCode} =    Get Variable Value  ${error_missing_credential['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_46 Modify snmp User_Privacy Algorithm empty
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_snmp_AuthPriv_Passphrase_empty['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_credential_operation_failed['message']}
   ${errorCode} =    Get Variable Value  ${error_credential_operation_failed['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${500}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}
   Fusion Api Logout Appliance

OVF293_API_TC_47 Modify snmp User_Users with no Edit Privileges
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${users} =    Get Variable Value    ${users}
    Run Keyword If    ${users} is not ${null}    Add Users from variable                ${users}
    #Network Admin
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${network_admin}
    Log to console and logfile    \n Trying to Add users in LI as NetworkAdmin user Should be allowed
    ${respl} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    ${task} =   Wait For Task   ${respl}    300s    2s
    Run Keyword If  '${respl['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
    Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
    #Verify Users from LI for Auth and Privacy Details
    ${li_Create_user} =    Get SNMPUSers from Data    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    Verify SNMP Users Edit LI   ${li}    ${li_Create_user}
    Fusion Api Logout Appliance
    #Server Admin
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${server_admin}
    Log to console and logfile    \n ***Server Admin**** \n
    Log to console and logfile    \n Trying to Add users in LIG as ServerAdmin user Should be allowed
    ${resp_li_server_admin} =    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    Log to console and logfile    \n resp is ${resp_li_server_admin}
    ${errorCode} =    Get Variable Value  ${error_server_admin['errorCode']}
    ${valDict} =     Create Dictionary    status_code=${403}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_li_server_admin}    ${valDict}
    Log to console and logfile    \n Unable to add Users in LI as ServerAdmin user
    Fusion Api Logout Appliance
    #Storage Admin
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${storage_admin}
    Log to console and logfile    \n ***Storage Admin**** \n
    Log to console and logfile    \n\n Trying to Add users in LIG as Storage user Should be allowed
    ${resp_li_server_admin}=    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    Log to console and logfile    \n resp is ${resp_li_server_admin}
    ${errorCode} =    Get Variable Value  ${error_server_admin['errorCode']}
    ${valDict} =     Create Dictionary    status_code=${403}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_li_server_admin}    ${valDict}
    Log to console and logfile    \n Unable to add Users in LI as StorageAdmin user
    Fusion Api Logout Appliance
    #Backup Admin
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${backup_admin}
    Log to console and logfile    \n ***Backup Admin*** \n
    Log to console and logfile    \n Trying to Add users in LI as Backup user Should be allowed
    ${resp_li_server_admin}=    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    Log to console and logfile    \n resp is for Backup ${resp_li_server_admin}
    ${errorCode} =    Get Variable Value  ${error_server_admin['errorCode']}
    ${valDict} =     Create Dictionary    status_code=${403}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_li_server_admin}    ${valDict}
    Log to console and logfile    \n resp is ${resp_li_server_admin}
    Log to console and logfile    \n Unable to add Users in LI as Backup Admin user
    Fusion Api Logout Appliance
    #Read_Only Admin
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${read_only}
    Log to console and logfile    \n ***readonly Admin*** \n
    Log to console and logfile    \n Trying to Add users in LIG as read_only user Should be allowed
    ${resp_li_server_admin}=    Edit LI    ${li}    ${edit_li_exiting_snmp_users_auth_and_passphrase['snmpConfiguration']}
    Log to console and logfile    \n resp is for Readonly ${resp_li_server_admin}
    ${errorCode} =    Get Variable Value  ${error_server_admin['errorCode']}
    ${valDict} =     Create Dictionary    status_code=${403}
    ...                                 errorCode=${errorCode}
    Validate Response    ${resp_li_server_admin}    ${valDict}
    Log to console and logfile    \n Unable to add Users in LI as Backup Admin user
    Fusion Api Logout Appliance

OVF293_API_TC_54 Add Trap-SnmpV3 disabled
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_disabled_add_trap_destination['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp_li}  300s    2s
   Run Keyword If   '${resp_li['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_enabled_add_trap_destination['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp_li}  300s    2s
   Run Keyword If   '${resp_li['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully

OVF293_API_TC_55 Add Trap destination-When no snmp users are available
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_snmp_no_snmp_users['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_no_users['message']}
   ${errorCode} =    Get Variable Value  ${error_no_users['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_56 Add Trap Inform messages disabled Trap Type As Trap
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_exiting_inform_disabled_Trap_type['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp_li}  300s    2s
   Run Keyword If   '${resp_li['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF293_API_TC_57 Add Inform-Toggle Trap Type to Inform No EngineId specified
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_enabled_add_trap_inform_No_EngineId['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_58 Add Inform Trap Type Inform Engine Id specified
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   #Add snmp trap destinations after LI_SNMPV3 Disabled
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_enabled_add_trap_destination['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp_li}  300s    2s
   Run Keyword If   '${resp_li['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}

OVF293_API_TC_86 Configuring snmpV3 user given in one or more traps
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_add_more_than_one_user_trap_destination['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_unique_trap_ip['message']}
   ${errorCode} =    Get Variable Value  ${error_unique_trap_ip['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_88 EngineID given for a trap
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_engine_id_trap['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_engine_id_for_inform['message']}
   ${errorCode} =    Get Variable Value  ${error_engine_id_for_inform['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_89 Authenticity configuration set with improper credentials
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_auth_improper_credential['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_Auth_password['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_Auth_password['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_90 Privacy configuration set with improper credentials
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_priv_improper_credential['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_Priv_password['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_Priv_password['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_91 Adding More than 6 traps
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_add_max_traps['snmpConfiguration']}

   ${message} =    Get Variable Value  ${error_max_traps['message']}
   ${errorCode} =    Get Variable Value  ${error_max_traps['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_92 Adding More than 6 Users
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${ edit_li_snmpv3_add_max_users ['snmpConfiguration']}

   ${message} =    Get Variable Value  ${error_max_users['message']}
   ${errorCode} =    Get Variable Value  ${error_max_users['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_95 user configured in a trap or inform does not exist in the user configuration
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${ edit_li_snmpv3_trap_user_doesnot_exists ['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_trap_with_non_existing_users['message']}
   ${errorCode} =    Get Variable Value  ${error_trap_with_non_existing_users['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_98 user has authenticity configured and is missing an associated password
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_auth_missing_pwd['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_credential_operation_failed['message']}
   ${errorCode} =    Get Variable Value  ${error_credential_operation_failed['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${500}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_99 user has privacy configured and is missing an associated password
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_priv_missing_pwd['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_credential_operation_failed['message']}
   ${errorCode} =    Get Variable Value  ${error_credential_operation_failed['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${500}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_101 user has an invalid format
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_user_invalid['snmpConfiguration']}
   ${task} =    Wait For Task   ${resp_li}  300s    2s
   Run Keyword If   '${resp_li['status_code']}' != '202'   Fail    ELSE    Log to Console  \n-LI  Edited successfully
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_1}    ${State_Configured}
   Wait Until Keyword Succeeds    600 s    10 s    Verify Interconnect State    ${ICM_2}    ${State_Configured}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_user_invalid_add['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_user['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_user['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_104 EngineID given for a trap
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_engine_id_invalid['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_engine_id['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_engine_id['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_105 Given destination host has an invalid format
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_host_invalid['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_trap_ip['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_trap_ip['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}

OVF293_API_TC_106 trap has a port that is configured beyond the acceptable range
   Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
   ${resp_li}=    Edit LI    ${li}    ${edit_li_snmpv3_invalid_range['snmpConfiguration']}
   ${message} =    Get Variable Value  ${error_invalid_port['message']}
   ${errorCode} =    Get Variable Value  ${error_invalid_port['errorCode']}
   Log to console and logfile    \nMessage:${message}
   ${valDict} =     Create Dictionary    status_code=${400}
   ...                                 message=${message}
   ...                                 errorCode=${errorCode}
   Validate Response    ${resp_li}    ${valDict}


*** Keywords ***
Get IC
    [Documentation]    Get Interconnect Details
    [Arguments]        ${ICM_NAME}
    ${resp} =   fusion api get interconnect
    Log        ${resp}
    ${ics} =     Get From Dictionary     ${resp}    members
    ${l} =     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \   ${ic} =     Get From List   ${ics}    ${x}
    \     Exit For Loop If     '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Verify LI Consistency State
    [Documentation]    Verify LI Consistency State
    [Arguments]        ${li}    ${State}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    ${resp} =     Fusion Api Get Li    ${li_uri}
    ${LI_Consistent_state} =     Get From Dictionary        ${resp}    consistencyStatus
    Should Be Equal As Strings    ${LI_Consistent_state}    ${State}
    Log to console and logfile    \n\nConsistent state Is: ${LI_Consistent_state}
    Sleep    15s

Verify Interconnect State
    [Documentation]    Verify Interconnect State
    [Arguments]        ${ICM_1}        ${POWER_STATE}
    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${ic} =        Get IC        ${ICM_1}
    ${State} =    Get From IC        ${ic}    state
    Log to console and logfile        \tICM state is ${ICM_1}:${State}
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get Trap Destinations Engine ID LIG
    [Documentation]    Getting Trap Destinations Engine ID LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${trap_dest_dict}=    Get From Dictionary    ${resp_lig['snmpConfiguration']}    trapDestinations
    ${len1} =     Get Length    ${trap_dest_dict}
    ${engine_id_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${Engine_ID_Details}=    Get From Dictionary    ${trap_dest_dict[0]}    engineId
    \    Append To List    ${engine_id_list}    ${Engine_ID_Details}
    Log to console and logfile    \n\nEngine IDs are: ${engine_id_list}
    [Return]    ${engine_id_list}

Get Trap Destinations Port Details LIG
    [Documentation]    Getting Trap Destinations Port Details LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${lig_trap_dest_dict}=    Get From Dictionary    ${resp_lig['snmpConfiguration']}    trapDestinations
    ${len1} =     Get Length    ${lig_trap_dest_dict}
    ${lig_port_number}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${port_number}=    Get From Dictionary    ${lig_trap_dest_dict[0]}    port
    \    Append To List    ${lig_port_number}    ${port_number}
    Log to console and logfile    \n\nPort is: ${lig_port_number}
    [Return]   ${lig_port_number}

Get Trap Destinations Trap Type LIG
    [Documentation]    Getting Trap Destinations Trap Type LIG
    [Arguments]    ${lig}
    ${lig_uri} =     Get LIG URI   ${lig}
    ${resp_lig} =    Fusion Api Get Lig    ${lig_uri}
    ${lig_snmp_config}=    Get From Dictionary    ${resp_lig}    snmpConfiguration
    ${lig_trap_dest_dict}=    Get From Dictionary    ${lig_snmp_config}    trapDestinations
    ${len1} =     Get Length    ${lig_trap_dest_dict}
    ${lig_trap_type_list}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${trap_type}=    Get From Dictionary    ${lig_trap_dest_dict[0]}    inform
    \    Append To List    ${lig_trap_type_list}    ${trap_type}
    Log to console and logfile    \n\nTrap Type is: ${lig_trap_type_list}
    [Return]   ${lig_trap_type_list}

Get LIG SNMP Users From Data
    [Documentation]    Getting LIG SNMP Users From Data
    [Arguments]        ${lig_body}
    ${lig_snmp_config} =           Get Variable Value  ${lig_body['snmpConfiguration']}
    ${lig_snmp_trapdestinations} =           Get Variable Value  ${lig_snmp_config['trapDestinations']}
    ${len} =     Get Length    ${lig_snmp_trapdestinations}
    Log to console and logfile    Length..${len}
    ${USer_name}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${lig_snmp_trapdestinations}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    userName
    \    Append To List    ${USer_name}    ${list_user}
    Log to console and logfile    \Types are :${lig_snmp_trapdestinations}
    Log to console and logfile    \Users are :${USer_name}
    [Return]    ${USer_name}

Get LIG SNMP TrapDestinations From Data
    [Documentation]    Getting LIG SNMP TrapDestinations From Data
    [Arguments]        ${lig_body}
    ${lig_snmp_config} =           Get Variable Value  ${lig_body['snmpConfiguration']}
    ${lig_snmp_trapdestinations} =           Get Variable Value  ${lig_snmp_config['trapDestinations']}
    ${len} =     Get Length    ${lig_snmp_trapdestinations}
    Log to console and logfile    Length..${len}
    ${Trap_Destination_Ip}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${lig_snmp_trapdestinations}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    trapDestination
    \    Append To List    ${Trap_Destination_Ip}    ${list_user}
    Log to console and logfile    \Types are :${lig_snmp_trapdestinations}
    Log to console and logfile    \Trap are :${Trap_Destination_Ip}
    [Return]    ${Trap_Destination_Ip}

Verify SNMP Trap Destination Edit LIG
    [Documentation]    Verifying SNMP Trap Destination Edit LIG
    [Arguments]        ${lig}        ${data_users}    ${trap_destinations}
    log to console  Verify LIG with snmp in LIG ${lig}
    ${lig_uri} =    Get LIG URI    ${lig}
    log to console  Verify LIG with snmp in LIG ${lig_uri}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}
    # Trap Details
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    LIG SNMP Config..${snmp_config}
    ${snmp_trap_details} =     Get From Dictionary       ${snmp_config}    trapDestinations
    Log to console and logfile    SNMP TRap Destinations...${snmp_trap_details}
    ${len} =     Get Length    ${snmp_trap_details}
    Log to console and logfile    Length..${len}
    ${trap_dest}=    Create List
    ${trap_dest_ips}=    Create List
    ${trap_dest_user}=    Create List
    ${inform}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${traps} =     Get From Dictionary    ${snmp_trap_details}    ${x}
    \    ${list_trap}=    Get From Dictionary    ${traps}    trapDestination
    \    Append To List    ${trap_dest}    ${list_trap}
    \    ${list_trap_users}=    Get From Dictionary    ${traps}    userName
    \    Append To List    ${trap_dest_user}    ${list_trap_users}
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${trap_dest_user}    ${data_users[${x}]}
    ${len}    Get Length    ${trap_destinations}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${trap_dest}    ${trap_destinations[${x}]}
    \    log to console Verify LIG with snmp in LIG  traps and Users

Edit LIG
    [Documentation]    Performing Edit LIG
    [Arguments]        ${lig_body}    ${lig}
    ${body} =    Build LIG body      ${lig_body}
    ${lig_uri} =    Get LIG URI    ${lig}
    Log to console and logfile    \n\nUri Is: ${lig_uri}
    ${resp1} =    Fusion Api Edit LIG    body=${body}    uri=${lig_uri}
    Log to console and logfile    \n\nOutput Is: ${resp1}
    [Return]    ${resp1}

Verify SNMP Users
    [Documentation]    Verifying SNMP Users
    [Arguments]        ${lig}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${lig_uri} =    Get LIG URI    ${lig}
    ${Resp_Lig} =     fusion_api_get_lig    ${lig_uri}
    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${Resp_Lig}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}
    Log to console and logfile    SNMP Users are successfully Verified

Get SNMPUSers from Data
    [Documentation]    Getting SNMPUSers from Data
    [Arguments]    ${li_body}
    ${li_snmp_configuration} =           Get Variable Value  ${li_body}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_configuration}
    ${li_snmp_users} =           Get Variable Value  ${li_snmp_configuration['snmpUsers']}
    Log to console and logfile    \n\nResp Content Is: ${li_snmp_users}
    ${len1} =     Get Length    ${li_snmp_users}
    ${li_Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len1}
    \    ${users1} =     Get From Dictionary    ${li_snmp_users}    ${x}
    \    ${list_user_1}=    Get From Dictionary    ${users1}    snmpV3UserName
    \    Append To List    ${li_Create_user}    ${list_user_1}
    Log to console and logfile    \n\nUsers are: ${li_Create_user}
    [Return]   ${li_Create_user}

Verify SNMP Users Edit LI
    [Documentation]    Verifying SNMP Users Edit LI
    [Arguments]        ${li}        ${data_users}
    Log to console and logfile    Validating Interconnects for SNMP
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp_li} =    Fusion Api Get Li    ${li_uri}
    #For Single & Multiple users
    ${snmp_config} =     Get From Dictionary        ${resp_li}    snmpConfiguration
    Log to console and logfile    SNMP Config..${snmp_config}
    ${snmp_users} =     Get From Dictionary       ${snmp_config}    snmpUsers
    Log to console and logfile    SNMP Users...${snmp_users}
    ${len} =     Get Length    ${snmp_users}
    Log to console and logfile    Length..${len}
    ${Create_user}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    \    ${list_user}=    Get From Dictionary    ${users}    snmpV3UserName
    \    Append To List    ${Create_user}    ${list_user}
    \    ${users} =     Get From Dictionary    ${snmp_users}    ${x}
    #User Names
    ${len}    Get Length    ${data_users}
    :For    ${x}    In Range    0    ${len}
    \    List Should Contain Value    ${Create_user}    ${data_users[${x}]}

Edit LI
    [Documentation]    Performing Edit LI
    [Arguments]        ${li}        ${li_body}
    # Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}
    ${li_uri} =     Get LI URI   ${li}
    log to console    LI URI is ${li_uri}
    ${resp} =    Fusion Api Get Li    ${li_uri}
    log to console  Editing Li with snmp ${resp}
    ${respl} =    Fusion Api Update snmp configuration    body=${li_body}    uri=${li_uri}
    log to console  Editing Li with snmp ${respl}
    [Return]    ${respl}

Perform an Update From Group
    [Documentation]    Performing Update From Group
    [Arguments]        ${li}=${li}    ${timeout}=5 min     ${interval}=15s
    ${li_uri} =    Get LI URI    ${li}
    ${resp} =         Fusion Api Update from group    ${li_uri}
    ${task} =        Wait For Task     ${resp}     ${timeout}        ${interval}
    ${valDict} =     Create Dictionary    status_code=${200}
    ...                                 taskState=Completed
    Validate Response    ${task}    ${valDict}
