*** Settings ***
Documentation     OVF582-TBird/Hafnium:Add Private Network Support
Library         json
Library         OperatingSystem
Library         FusionLibrary
Library         RoboGalaxyLibrary
Library         Collections
Library         data_variables
Variables       data_variables.py
Resource        ../../../resource/fusion_api_all_resource_files.txt
Suite Setup     Cleanup For Suite
Suite Teardown      Cleanup For Suite

*** Test Cases ***
OVF582_API_TC_03:04:05:06:07 Verify Network & Infrastructure Administrator can Create\edit the network and Server,Storage,Backup Admin cannot Edit\create a networks
    [Documentation]    Verification of Network & Infrastructure Administrator can Create\edit the network and Server,Storage,Backup Admin cannot Edit\create a network
    # login into Administrator
    Set Log Level    TRACE
    ${Login_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless    ${Login_resp[0]['status_code']}== 200    Fail    "Unable to Login"

    # Create networks
    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet_1[0]}
    ${task} =   Wait For Task   ${Enet1_resp}     240s    2s
    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"

    # Make body to set the Private network feature enabled
    ${resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet_1[0]['name']}'"
    ${Enet_uri}    Get Variable Value    ${resp['members'][0]['uri']}
    ${Enet_CT}    Get Variable value    ${resp['members'][0]['connectionTemplateUri']}
    ${Enet}    Copy Dictionary    ${Enet_1[0]}
    Set To Dictionary    ${Enet}    privateNetwork    ${pnet_true}
    Set To Dictionary    ${Enet}    connectionTemplateUri    ${Enet_CT}

    # edit the network with Private feature enabled
    ${Enet_1_edit}    Fusion Api Edit Ethernet Network    ${Enet}    ${Enet_uri}
    ${task} =   Wait For Task   ${Enet_1_edit}     240s    2s
    Run Keyword If    '${Enet_1_edit['status_code']}' != '202'    Fail    ELSE    Log to console and logfile    \n-Network Edited Successfully..

    # Add all users in Oneview
    ${user_length} =    Get Length    ${users}
    :For    ${x}    INRANGE    0    ${user_length}
    \    ${Add_Users}    Fusion Api Add User    ${users[${x}]}
    \    Run Keyword If  '${Add_Users['status_code']}' != '200'  Fail    ELSE  log to console   \n-Created '${users[${x}]['permissions'][0]['roleName']}' user successfully

    # logout of Administrator login
    ${Logout_resp}    Fusion Api Logout Appliance
    Run Keyword If    '${Logout_resp['status_code']}' != '204'   Fail    ELSE    Log to console  \n-Successfully logged out of the appliance

    # login to each user network,server,storage and backup respectively
    # check whether the network admin alone can be able to create and edit the networks and other users server,storage and backup  should not create/edit network
    :For    ${x}    INRANGE    0    ${user_length}
    \    ${log_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${different_user_admin[${x}]}
    \    Run keyword unless    ${log_resp[0]['status_code']}== 200    Fail    "Unable to Login"
    \    Log to console and logfile    \n-Logged in as ${different_user_admin[${x}]['userName']}..

    \    ${resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet_1[0]['name']}'"
    \    ${Enet_uri}    Get Variable Value    ${resp['members'][0]['uri']}
    \    ${Enet_CT}    Get Variable Value    ${resp['members'][0]['connectionTemplateUri']}
    \    Set To Dictionary    ${Enet_1[0]}    connectionTemplateUri    ${Enet_CT}
    \    Run Keyword If    '${different_user_admin[${x}]['userName']}' == 'Networkadmin'    Log to console and logfile    \n-Network expected to be edited\created successfully..
    \    ...               ELSE    Log to console and logfile    \n-Network should not be edited\created..
    # checking whether network can be edited or not for all user login
    \    ${Enet_1_edit}    Fusion Api Edit Ethernet Network    ${Enet_1[0]}    ${Enet_uri}
    \    Run Keyword If    '${Enet_1_edit['status_code']}' != '202'    Log to console and logfile    \n-Network cannot be edited and ${Enet_1_edit['message']}
    \    ...            ELSE    Log to console and logfile    \n-Network Edited Successfully
    # checking whether network can be created or not for all user login
    \    ${Enet2_resp}    Fusion Api Create Ethernet Network    ${Enet_1[1]}
    \    Run keyword If    ${Enet2_resp['status_code']}!= 202    Log to console and logfile    \n-Network cannot be created and ${Enet2_resp['message']}
    \    ...              ELSE    Log to console and logfile    \n-Network created successfully
    \    ${Logout_resp}    Fusion Api Logout Appliance
    \    Run Keyword If    '${Logout_resp['status_code']}' != '204'   Fail    ELSE    Log to console  \n-Successfully logged out of the appliance

OVF582_API_TC_38 Verify the private network configuration is available in the oneview
    [Documentation]    Verification of the private network configuration is available in the oneview
    Set Log Level    TRACE
    ${Login_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless    ${Login_resp[0]['status_code']}== 200    Fail    "Unable to Login"

    ${Enet_resp}    Fusion Api Create Ethernet Network    ${Enet[0]}
    ${task} =   Wait For Task   ${Enet_resp}     240s    2s
    Run keyword unless    ${Enet_resp['status_code']}== 202    Fail    "Unable to Create network"

    ${pri_net_resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet[0]['name']}'"
    ${Validate_net}    Copy Dictionary    ${pri_net_resp['members'][0]}
    Dictionary Should Contain Key    ${Validate_net}    privateNetwork
    ${value}    Get Variable Value    ${Validate_net['privateNetwork']}
    Run Keyword If    '${value}' == 'True'    Log to console and logfile    \n-private network is supported..    ELSE    Fail

OVF582_API_TC_39 Verify the private network is available in the oneview and verify that enable and disable option are working fine
    [Documentation]    Verification of the private network is available in the oneview and verify that enable and disable option are working fine.
    ${Login_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}

    ${Enet_resp}    Fusion Api Create Ethernet Network    ${Enet[1]}
    ${task} =   Wait For Task   ${Enet_resp}     240s    2s
    Run keyword unless    ${Enet_resp['status_code']}== 202   Fail    "Unable to Create network"

    ${resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet[1]['name']}'"
    ${pnet_enable}    Get Variable Value    ${resp['members'][0]['privateNetwork']}
    Run Keyword If    '${pnet_enable}' == 'True'    Log to console and logfile    \n-The Private network is in enabled mode..
    ...              ELSE     Fail

    ${Enet_uri}    Get Variable Value    ${resp['members'][0]['uri']}
    ${Enet_CT}    Get Variable value    ${resp['members'][0]['connectionTemplateUri']}
    ${Edit_network}    Copy Dictionary    ${Enet[1]}
    Set To Dictionary    ${Edit_network}    privateNetwork    ${pnet_false}
    Set To Dictionary    ${Edit_network}    connectionTemplateUri    ${Enet_CT}

    ${Enet_1_edit}    Fusion Api Edit Ethernet Network    ${Edit_network}     ${Enet_uri}
    ${task} =   Wait For Task   ${Enet_1_edit}     240s    2s
    Run Keyword If    '${Enet_1_edit['status_code']}' != '202'    Fail    ELSE    Log to console and logfile    \n-Network Edited Successfully

    ${resp1}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet[1]['name']}'"
    ${pnet_disable}    Get Variable Value    ${resp1['members'][0]['privateNetwork']}
    Run Keyword If    '${pnet_disable}' == 'False'    Log to console and logfile    \n-The Private network is in disabled mode..    ELSE     Fail

OVF582_API_TC_40 Verify the private network is available for all the three private networks
    [Documentation]    Verification of the private network is available for all the three private networks
    :For    ${Enet}    IN    @{Enet_types}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    ${task} =   Wait For Task   ${Enet1_resp}     240s    2s
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"
    \    Log to console and logfile    \n-${Enet['ethernetNetworkType']} network is created..

    ${len}    Get Length    ${Enet_types}
    :For    ${x}    INRANGE    0    ${len}
    \    ${ethernet_resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enet_types[${x}]['name']}'"
    \    ${private_enable}    Copy Dictionary    ${ethernet_resp['members'][0]}
    \    Dictionary Should Contain Key    ${private_enable}    privateNetwork
    \    ${value}    Get Variable Value    ${private_enable['privateNetwork']}
    \    Run Keyword If    '${value}' == 'True'    Log to console and logfile    \n-private network is supported..    ELSE    Fail

OVF582_API_TC_41 Verify the private network feature is not available for Fc network
    [Documentation]     Verification of the private network feature is not available for Fc network

    # Check whether FC can be created when Private network feature set to True
    ${pnet_fc}    Fusion Api Create Fc Network    ${FC_net[0]}
    Run Keyword If    '${pnet_fc['status_code']}' == '400'    Log to console and logfile    The FC network cannot be created with private network..    ELSE    Fail
    Log to console and logfile    \n-${pnet_fc['message']}

    # create FC network
    ${pnet_fc1}    Fusion Api Create Fc Network    ${FC_net[1]}
    ${task} =   Wait For Task   ${pnet_fc1}     240s    2s
    Run Keyword If    '${pnet_fc1['status_code']}' != '202'    Fail    ELSE    Log to console and logfile    The FC network is created successfully..

    # validate that Private network feature is not available for the created FC network
    ${Validate_net}    Copy Dictionary    ${pnet_fc1}
    Dictionary Should not Contain Key    ${Validate_net}    privateNetwork

OVF582_API_TC_42 Verify the private network feature is not available for FCOe network
    [Documentation]    Verification of the private network feature is not available for FCeO network

    # Check whether FCOe can be created when Private network feature set to True
    ${pnet_fcoe}    Fusion Api Create Fcoe Network    ${Fceo_net[0]}
    Run Keyword If    '${pnet_fcoe['status_code']}' == '400'    Log to console and logfile    The Fceo network cannot be created with private network..    ELSE    Fail

    #  Create Fcoe network
    ${pnet_fcoe1}    Fusion Api Create Fcoe Network    ${Fceo_net[1]}
    ${task} =   Wait For Task   ${pnet_fcoe1}     240s    2s
    Run Keyword If    '${pnet_fcoe1['status_code']}' != '202'    Fail    ELSE    Log to console and logfile    The FCeo network is created successfully..

    # validate that Private network feature is not available for the created FCOe network
    ${Validate_net}    Copy Dictionary    ${pnet_fcoe1}
    Dictionary Should not Contain Key    ${Validate_net}    privateNetwork

OVF582_API_TC_43 Verify the networks with same VLAN Id cannot be added together in an uplink set
    [Documentation]    Verification of the networks with same VLAN Id cannot be added together in an uplink set
    Set Log Level    TRACE
    ${Login_resp}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Run keyword unless  ${Login_resp[0]['status_code']}== 200    Fail    "Unable to Login"
    :For    ${Enet}    IN    @{Enet_vlan}
    \    ${Enet1_resp}    Fusion Api Create Ethernet Network    ${Enet}
    \    Run keyword unless    ${Enet1_resp['status_code']}== 202    Fail    "Unable to Create network"

    ${body}    Build LIG body    ${LIGS_TB['ligsup_vlan'][0]}
    ${lig_resp}    Fusion Api Create LIG    ${body}
    Run Keyword If    '${lig_resp['message']}' == '${Alert_Message_uplinkset}'    Log to console and logfile    \n-The Network with the same VLAN Id cannot be added in the uplink set..
    ...             ELSE    Fail

OVF582_API_TC_44 Verify OneView allows to create network on VLAN Id:4095
    [Documentation]     Verification of OneView allows to create network on VLAN Id:4095
    ${Enet_resp}    Fusion Api Create Ethernet Network    ${Enet_4095}
    Run keyword If    '${Enet_resp['message']}' == '${Alert_message_network}'    Log to console and logfile    \n-Oneview doesn't allow to create network with VLAN Id 4095..
    ...             ELSE    Fail

OVF582_API_TC_56 Verify the private network support is available on OneView network set
    [Documentation]    Verification of the private network support is available on OneView network set
    ${networks} =   Fusion Api Get Ethernet Networks
    :FOR    ${net}  IN  @{networks['members']}
    \       Log to console  \n-Removing: ${net['name']}
    \       ${resp} =   Fusion Api Delete Ethernet Network      uri=${net['uri']}
    \       ${task} =   Wait For Task   ${resp}     240s    2s

    ${bulk_net}=    Fusion Api Create Ethernet Bulk Networks    ${Enet_bulk}
    ${task} =   Wait For Task   ${bulk_net}     2000s   100s
    Run keyword If    ${bulk_net['status_code']} == 202    Log to console and logfile    \n-Bulk networks are created successfully...
    ...            ELSE    Fail

    ${bulk_networks} =    Fusion Api Get Ethernet Networks
    Log to console and logfile    \n${bulk_networks}
    ${len}    Get Variable Value    ${bulk_networks['count']}
    ${bulk_uri} =    Create List
    :For    ${x}    INRANGE    0    ${len}
    \   ${net_uri}    Get Variable Value   ${bulk_networks['members'][${x}]['uri']}
    \   Append to List   ${bulk_uri}    ${net_uri}
    \   ${privateNetwork}    Get Variable Value   ${bulk_networks['members'][${x}]['privateNetwork']}
    \   Run keyword If    ${privateNetwork} == 'True'    Log to console and logfile    \n-Private network is enabled for network ${bulk_networks['members'][${x}]['name']}
    Log to console and logfile    \n${bulk_uri}
    Set To dictionary    ${network_sets}    networkUris    ${bulk_uri}

    ${net_set} =    Fusion Api Create Network Set   body=${network_sets}
    ${task} =   Wait For Task   ${net_set}     240s    2s
    Run Keyword If    '${net_set['status_code']}' == '202'    Log to console and logfile    \n-Netset is created..
    ...              ELSE    Fail
    ${Validate_net}    Copy Dictionary    ${net_set}
    Dictionary Should not Contain Key    ${Validate_net}    privateNetwork


*** Keywords ***

Validate Private Network support
    [Documentation]    Keyword to Validate all passed networks contains Private network as enabled
    ...             Example:
    ...             Validate Private Network support    ${Enets}
    [Arguments]    ${Enets}
    :For    ${x}    INRANGE    0    2
    \    ${pri_net_resp}    Fusion Api Get Ethernet Networks    param=?filter="'name'=='${Enets[${x}]['name']}'"
    \    ${Validate_net}    Copy Dictionary    ${pri_net_resp['members'][0]}
    \    Dictionary Should Contain Key    ${Validate_net}    privateNetwork
    \    ${value}    Get Variable Value    ${Validate_net['privateNetwork']}
    \    Run Keyword If    '${value}' == 'True'    Log to console and logfile    \n-private network is enabled..    ELSE    Fail

Login to OneView via REST
    [Documentation]     Login to the appliance with the credentials
    [Tags]  add   POSITIVE
    Set Log Level    TRACE
    ${resp}     Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}

Cleanup For Suite
    [Documentation]    Returns appliance to a 'clean' state by removing all resources\enclosures
    Log to console and logfile  [Cleanup]
    Login to OneView via REST
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove All Network Sets
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove All FCoE Networks