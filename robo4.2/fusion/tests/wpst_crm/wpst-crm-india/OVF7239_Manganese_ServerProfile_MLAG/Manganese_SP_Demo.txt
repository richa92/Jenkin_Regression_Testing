*** Settings ***
Documentation          This set of test cases is to verify Manganese/Mellanox Server Profile Features
Variables              data_manganese_sp.py
Library                data_manganese_sp.py
Library                Collections
Resource               ../../../../Resources/api/fusion_api_resource.txt
Resource               ../../../resource/fusion_api_appliance_setup.txt
Resource               ../../../resource/fusion_api_validation.txt
Library                ../../feature_tests/TBIRD/FVT/fvt_api.py

Suite Setup            Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
Suite Teardown         Fusion Api Logout Appliance

*** Variables ***
${APPLIANCE_IP}                  192.168.151.210
${ICM_MELLANOX_1}                ${ENC1}, interconnect 3
${ICM_MELLANOX_2}                ${ENC1}, interconnect 6
@{ICM_LIST}                      ${ICM_MELLANOX_1}    ${ICM_MELLANOX_2}
@{LI_LIST}                       ${LI_NAME_MELLANOX}
${State_Configured}              Configured
${State_Power_Off}               Maintenance
${State_Efuse_Off}               Absent
${POWER_STATE_OFF}               Off
${POWER_STATE_ON}                On

*** Test Cases ***
Setup - Add Base Resources
    [Tags]     TC01    Setup
    Set Library Search Order    common
    Cleanup
    Run Keyword If    ${ethernet_networks_tagged} is not ${null}    Create Bulk Ethernet Networks   ${ethernet_networks_tagged}     timeout=600    interval=10
    Run Keyword If    ${ethernet_networks_other} is not ${null}      Add Ethernet Networks from variable async    ${ethernet_networks_other}
    Run Keyword If    ${bulk_networksets} is not ${null}      Add Network Sets from variable  ${bulk_networksets}

TC01-a: Create LIG (SideA)
    [Tags]     TC01-a
    [Setup]    Cleanup LIG
    ${resp}=    Run Keyword If    ${lig_mellanox_sideA} is not ${null}   Add LIG from variable async   ${lig_mellanox_sideA}
    Wait For Task2    ${resp}    timeout=200    interval=10

TC01-b: Add EG and LE (SideA)
    [Tags]     TC01-b
    Run Keyword If    ${encl_group_sideA} is not ${null}      Add Enclosure Group from variable async    ${encl_group_sideA}
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}

TC01-c: Verify Manganese Inerconnect goes to Configured State (SideA)
    [Tags]    TC01-c
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_1}    ${State_Configured}

TC01-d: Create LIG (SideA with Untagged US)
    [Tags]     TC01-d
    [Setup]    Cleanup LIG
    ${resp}=    Run Keyword If    ${lig_mellanox_sideA_untagged} is not ${null}   Add LIG from variable async   ${lig_mellanox_sideA_untagged}
    Wait For Task2    ${resp}    timeout=200    interval=10

TC01-e: Add EG and LE (SideA with Untagged US)
    [Tags]     TC01-e
    Run Keyword If    ${encl_group_sideA} is not ${null}      Add Enclosure Group from variable async    ${encl_group_sideA}
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}

TC01-f: Verify Manganese Inerconnect goes to Configured State (SideA with Untagged US)
    [Tags]    TC01-f
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_1}    ${State_Configured}

TC02-a: Create LIG (Redundant)
    [Tags]     TC02-a
    [Setup]    Cleanup LIG
    ${resp}=    Run Keyword If    ${lig_mellanox_redundant} is not ${null}   Add LIG from variable async   ${lig_mellanox_redundant}
    Wait For Task2    ${resp}    timeout=200    interval=10

TC02-b: Add EG and LE (Redundant)
    [Tags]     TC02-b
    Run Keyword If    ${encl_group} is not ${null}      Add Enclosure Group from variable async    ${encl_group}
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}

TC02-c: Verify Manganese Inerconnect goes to Configured State (Redundant)
    [Tags]    TC02-c
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_1}    ${State_Configured}
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_2}    ${State_Configured}

TC02-d: Create LIG (Redundant)
    [Tags]     TC02-d
    ${resp}=    Run Keyword If    ${lig_mellanox_redundant_untagged} is not ${null}   Add LIG from variable async   ${lig_mellanox_redundant_untagged}
    Wait For Task2    ${resp}    timeout=200    interval=10

TC02-e: Add EG and LE (Redundant)
    [Tags]     TC02-e
    Run Keyword If    ${encl_group} is not ${null}      Add Enclosure Group from variable async    ${encl_group}
    Run Keyword If    ${logical_encl} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl}

TC02-f: Verify Manganese Inerconnect goes to Configured State (Redundant)
    [Tags]    TC02-f
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_1}    ${State_Configured}
    Wait Until Keyword Succeeds    300 s    10 s    Verify Interconnect State    ${ICM_MELLANOX_2}    ${State_Configured}

TC03: Create Full Flex LI
    [Tags]    TC03-a
    Cleanup LIG
    ${resp}=    Run Keyword If    ${lig_potash} is not ${null}   Add LIG from variable async   ${lig_potash}
    Wait For Task2    ${resp}    timeout=200    interval=10
    ${resp}=    Run Keyword If    ${lig_nitro} is not ${null}   Add LIG from variable async   ${lig_nitro}
    Wait For Task2    ${resp}    timeout=200    interval=10
    ${resp}=    Run Keyword If    ${lig_mellanox_redundant} is not ${null}   Add LIG from variable async   ${lig_mellanox_redundant}
    Wait For Task2    ${resp}    timeout=200    interval=10
    Run Keyword If    ${encl_group_full} is not ${null}      Add Enclosure Group from variable async    ${encl_group_full}
    Sleep    60s
    Run Keyword If    ${logical_encl_full} is not ${null}      Add Logical Enclosure from lists Async    ${logical_encl_full}

TC03: Verify VLANs in Mellanox switch
    [Tags]    TC03-b
    ${icm_vlan_table}=    Get VLAN Details From Mellanox ICM    SGH822WFT4    3
    ${status}=    Verify Scale VLAN Details In Mellanox Switch    ${icm_vlan_table}    ${MAX_NETWORKS}
    Run Keyword If    '${status}' == '${False}'    FAIL

TC04: Create Server Profiles with connections containing bulk networks
    [Tags]    TC04
    Power off Servers in Profiles    ${server_profile_data}
    ${resp}=    Add Server Profiles from variable   ${server_profile_data}
    Wait For Task2  ${resp}    timeout=600    interval=10

TC05-a: Unassign Server profiles
    [Tags]    TC05-a
    [Setup]    Set Library Search Order    common
    ${resp} =   Fusion Api Get Server Profiles
    ${profile_list} =   Get From Dictionary   ${resp}   members
    Unassign Server Profiles   ${profile_list}    timeout=60m   interval=15s  waitForTask=${True}    parallelAssign=${False}

TC05-b: Reassign Server Profiles
     [Tags]    TC05-b
     [Setup]    Set Library Search Order    common    fusion_api_appliance_setup
     ${resp}=    Edit Server Profiles from variable    ${server_profile_data}
     Wait For Task2  ${resp}    timeout=600    interval=10

TC06: Verify Create Server Profiles with s-channels fails
    [Tags]    TC06
    [Setup]    Set Library Search Order    server_profile    fusion_api_appliance_setup
    ${resp}=    Add Server Profiles from variable   ${server_profile_schannel}
    Wait For Task2  ${resp}    timeout=600    interval=10
    ...    PASS=((?i)Error|Terminated)
    ...    VERBOSE=True
    ...    errorMessage=PORT_NOT_FOUND_ON_CONNECTION

TC07: Verify Create Server Profiles with invalid speed fails
    [Tags]    TC07
    ${resp}=    Add Server Profiles from variable   ${server_profile_unsupported_connection_speed}
    Wait For Task2  ${resp}    timeout=600    interval=10
    ...    PASS=((?i)Error|Terminated)
    ...    VERBOSE=False
    ...    errorMessage=CONNECTIONS_BANDWIDTH_ERROR

*** Keywords ***
Cleanup
    [Documentation]
    Set Suite Variable    ${WFT2_CONTINUE_ON_ERROR}    TRUE
    # Remove All OV Resources
    Remove All Server Profiles     force=${True}
    Remove All LEs    force=${True}    timeout=1800    interval=10
    Remove All Enclosure Groups
    Remove All LIGs
    Remove All Networks Sets Async
    Remove All Ethernet Networks Async

Cleanup LIG
    [Documentation]
    Set Suite Variable    ${WFT2_CONTINUE_ON_ERROR}    TRUE
    Remove All Server Profiles     force=${True}
    Remove All LEs    force=${True}    timeout=1800    interval=10
    Remove All Enclosure Groups
    Remove All LIGs

Verify Interconnect State
    [Arguments]    ${ICM_NAME}    ${POWER_STATE}
    ${ic}    Get IC    ${ICM_NAME}
    ${State}    Get From IC    ${ic}    state
    Log        \tICM ${ICM_NAME} state is :${State}    console=True
    Should Be Equal As Strings    ${State}    ${POWER_STATE}

Get IC
    [Arguments]    ${ICM_NAME}
    ${resp}    fusion api get interconnect
    ${ics}    Get From Dictionary    ${resp}    members
    ${l}     Get Length    ${ics}
    :FOR    ${x}    IN RANGE    0    ${l}
    \    ${ic}    Get From List    ${ics}    ${x}
    \    Exit For Loop If    '${ic['name']}' == '${ICM_NAME}'
    [Return]    ${ic}

Get ICM Password
    [Documentation]    Gets Interconnect SSH Password from OneView
    ...             Example:
    ...             Get ICM Password   ${HOST}    ${EM_SN}    ${Bay_No}
    [Arguments]    ${HOST}    ${EM_SN}    ${Bay_No}
    Open Connection    ${HOST}
    Login    root    hpvse1
    Sleep   3
    ${EM1}=  Execute Command    /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN}
    ${EM}=  catenate   SEPARATOR=   ${EM1}%bond0
    ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
    ${password}=   Execute Command    curl --globoff -ki -x "" --request POST --header "x-auth-token:${XAUTH}" https://[${EM}]/rest/v1/InterconnectManager/${Bay_No} -H 'Content-Type: application/json' -d '{"Action": "ReadCanmicBlocks","List": [10]}' | grep } | python -mjson.tool | grep Data | cut -d "\\"" -f 4 | base64 -d | hexdump -C
    ${lines} =    Split to Lines                ${password}
    ${lines1} =    Convert To List    ${lines}
    ${Return} =    Fetch from Right    ${lines[0]}    .
    ${Return1} =   Split String From Right    ${lines[1]}    |
    ${OV_Pwd} =   String.Replace String    ${Return}    |    ${Return1[1][0]}
    Log to console    \nPassword for the ICM is: ${OV_Pwd}
    [Return]    ${OV_Pwd}

Get ICM IPV4
    [Documentation]    Fetches ICM IP
    ...             Example:
    ...             Get ICM IP    ${ICM_NAME}
    [Arguments]         ${ICM_NAME}
    ${IC}=    Fusion Api Get Interconnect    param=?filter="'name'=='${ICM_NAME}'"
    ${address}=     Get From Dictionary     ${IC['members'][0]}   ipAddressList
    :FOR     ${a}    IN     @{address}
    \    Continue For Loop If    '${a['ipAddressType']}'!='Ipv4Dhcp'
    \    ${ipaddress}=     Get From Dictionary     ${a}   ipAddress
    ${ipadress1}     Convert to String    ${ipaddress}
    Log     \nIPV4 for ICM ${ICM_NAME} is: ${ipadress1}    console=True
    [Return]    ${ipadress1}

Get VLAN Details From Mellanox ICM
    [Documentation]
    [Arguments]    ${EM_SN}    ${ICM_BAY}
    Log     \nGetting ICM IP    console=True
    Sleep    3s
    ${ICM_IP}=    Get ICM IPV4   ${EM_SN}, interconnect ${ICM_BAY}
    Log     \nGetting ICM Password    console=True
    ${ICM_PWD}=    Get ICM Password    ${APPLIANCE_IP}   ${EM_SN}    ${ICM_BAY}
    ${table}=    get_vlan_details_from_manganese    ${ICM_IP}    OneView    ${ICM_PWD}
    [Return]     ${table}

Verify Scale VLAN Details In Mellanox Switch
    [Documentation]
    [Arguments]    ${ICM_VLAN_Table}    ${MAX_VLAN_NETWORKS}
    ${VLANs_Status}=    Set Variable    ${True}
    ${vlan_list}=    Create List
    :FOR     ${vlan_dict}    IN   @{ICM_VLAN_Table}
    \    ${vlan}=    Get From Dictionary    ${vlan_dict}    VLAN
    \    Append to List    ${vlan_list}    ${vlan}
    :FOR     ${VLAN}    IN RANGE    2    ${MAX_VLAN_NETWORKS}
    \    ${VLAN}=    Convert To String     ${VLAN}
    \    ${status}=    Run Keyword And Return Status    List Should Contain Value   ${vlan_list}    ${VLAN}
    \    ${VLANs_Status}=    Run Keyword If    '${status}' == '${False}'    Set Variable     ${False}
    \    Run Keyword If    '${status}' == '${False}'    Log    VLAN ${VLAN} is missing in switch    console=TRUE
    [Return]    ${VLANs_Status}
