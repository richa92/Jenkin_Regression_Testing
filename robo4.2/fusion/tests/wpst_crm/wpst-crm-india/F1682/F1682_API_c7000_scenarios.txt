*** Settings ***
Documentation		Feature Test: F1682 AutoNegotiation Tests
...                 Includes API tests for C7000
...
Variables     data_variables_c7k.py
#Suite Setup   Run FTS and test-specific setup
#Suite Teardown   Suite Teardown
Resource            ../../../resource/fusion_api_all_resource_files.txt
Library      Collections
Library      json
Library      OperatingSystem

*** Variables ***
${SSH_PASS}                 hpvse1
${APPLIANCE_IP}    192.168.148.24
${VM}     ${APPLIANCE_IP} 




















*** Test Cases ***


# Setup information
#Bay5  Supreshaw -connection- Q1=Splitter,Q2-HP-CR4,Q3-CiscoCU,Q4-AOC,   Bay 6 Q1-ciscoACU
#Nexus 9K switch
#VLAN used  = vlan10,  with IP address - 25.25.26.1/24
# IP address for server - 25.25.26.2  in Server Bay 1 - Gen8, 

initial cleanup
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  power off all servers
  Remove All Server Profiles
  Remove All Enclosures
  Remove All Enclosure Groups
  Remove All LIGs
  Remove ALL Ethernet Networks

network as pre-requisites
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${ethnet}=  Get Variable Value   ${ethernet_networks}
  Run Keyword If   ${ethnet} is not ${null}    Add Ethernet Networks from variable    ${ethnet}
  ${fcnet}=  Get Variable Value   ${fc_networks}
  Run Keyword If   ${fcnet} is not ${null}   Add FC Networks from variable     ${fcnet}
  ${fcoenet}=   Get Variable Value   ${fcoe_networks}
  Run Keyword If   ${fcoenet} is not ${null}   Add FCoE Networks from variable   ${fcoenet} 

 

F1682_TC_API_48_c7K: Create Uplink from LIG with Q2.1,Q2.2=Auto & Q1.1=40G successully
  [Documentation]  covers F1682_TC_API_47_c7K,F1682_TC_API_48_c7K,F1682_TC_UI_3_c7K,
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_48}=  Get Variable Value   ${lig_c7k_f1682_1}
  ${lig_48a}=   ReplaceLIG uplink with newuplink    ${lig_48}   ${uplinkSets_48}
  ${resp}=  Add LIG from variable    ${lig_48a}

  
F1682_TC_API_48_1_c7K: Create Uplink from LIG with Q2.1=2G, Q2.2=8G ,Q1.1 = 10G
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_481}=  Get Variable Value   ${lig_c7k_f1682_1}
  ${lig_481a}=   ReplaceLIG uplink with newuplink    ${lig_481}   ${uplinkSets_481}
  ${liguri}=   Get LIG URI      ${lig_481a['name']}
  ${body} =   Build LIG body      ${lig_481a}
  ${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
  should be equal as numbers 	${resp['status_code']}   400
  should contain    ${resp['errorCode']}   INVALID_JSON_DATA_TYPE
 
  
F1682_TC_API_49_c7K: Verify error when LIG Edit Uplink with Q1.1=Auto,Q2.1=Speed40G and Q2.2=Auto,
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_49}=  Get Variable Value   ${lig_c7k_f1682_1}
  ${lig_49a}=   ReplaceLIG uplink with newuplink    ${lig_49}   ${uplinkSets_49}
  ${liguri}=   Get LIG URI      ${lig_49a['name']}
  ${body} =   Build LIG body      ${lig_49a}
  ${resp} =	Fusion Api Edit Lig		${body}		${liguri}	

  Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"  

  ${task} =	Wait For Task 	${resp} 	30s	 2s
  ${taskerror}=   get variable value    ${task['taskErrors'][0]}
    should contain    ${taskerror['message']}   ${message1}
    should contain    ${taskerror['recommendedActions']}   ${recomact1}
    
    
F1682_TC_API_50_c7K: EditLIG Uplink Q1.1,Q2.1&Q4.1 with 40G successfully
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${lig_50}=  Get Variable Value   ${lig_c7k_f1682_1}
   ${lig_50a}=   ReplaceLIG uplink with newuplink    ${lig_50}   ${uplinkSets_50}
   ${liguri}=   Get LIG URI      ${lig_50a['name']}
	${body} =   Build LIG body      ${lig_50a}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	${task} =	Wait For Task 	${resp} 	30s 	2s
	Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"
    

F1682_TC_API_50_1_c7K: EditLIG Uplink Q1.1,Q2.2&Q4.1 having 40G successfully
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${lig_501}=  Get Variable Value   ${lig_c7k_f1682_1}
   ${lig_501a}=   ReplaceLIG uplink with newuplink    ${lig_501}   ${uplinkSets_50_1}
   ${liguri}=   Get LIG URI      ${lig_501a['name']}
	${body} =   Build LIG body      ${lig_501a}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	${task} =	Wait For Task 	${resp} 	30s	  2s
	${taskerror}=   get variable value    ${task['taskErrors'][0]}
    should contain    ${taskerror['message']}   ${msg50_1}
    should contain    ${taskerror['recommendedActions']}   ${recom50_1}  


F1682_TC_API_51_C7K: Verify Error when invalid values used for Desired sepeed
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}

   ${lig_51}=  Get Variable Value   ${lig_c7k_f1682_1}
   ${lig_51a}=   ReplaceLIG uplink with newuplink    ${lig_51}   ${uplinkSets_51}
	${liguri}=   Get LIG URI      ${lig_51a['name']}
	${body} =   Build LIG body      ${lig_51a}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	should contain    '${resp['errorCode']}'   INVALID_JSON_DATA_TYPE


Prereq:add enclosure
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   Remove All LIGs
   ${lig_1enc}=  Get Variable Value   ${lig_c7k_f1682}
   ${lig_1enca}=   ReplaceLIG uplink with newuplink    ${lig_1enc}   ${uplinkSets_39}
   ${resp}=  Add LIG from variable    ${lig_1enca}
   ${enc_groups} =	Get Variable Value	${enc_groups}
	Run Keyword If	${enc_groups} is not ${null}	Run Keyword for List	${enc_groups}	Add Enclosure Group from variable
    ${encs} =	Get Variable Value	${encs}
	Run Keyword If	${encs} is not ${null}					Add Enclosures from variable	${encs}
	Power Off All Servers
	${server_profiles} =	Get Variable Value	${server_profiles}
	Run Keyword If	${server_profiles} is not ${null}		Add Server Profiles from variable	${server_profiles}

    Power on ALL servers

    sleep  60
 

F1682_TC_API_6:c7K- verify EditLIG-Speed Change in Uplink and port addition makes LI inconsistent or compliance
    [Documentation]   F1682_TC_API_38_1 C7k: LIG compliance,F1682_TC_UI_22_1:c7K- compliance
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s

    get li compliance    ${LI}   CONSISTENT
    validate desiredspeed   uplink1   Q1.1  Speed40G
    validate desiredspeed   uplink1   Q2.1  Auto
    log to console and logfile   " edit LIG Q2.1 to Speed40G,and make compliance nonconsistent
    ${lig_6}=  Get Variable Value   ${lig_c7k_f1682}
    ${lig_6a}=   ReplaceLIG uplink with newuplink    ${lig_6}   ${uplinkSets_6_compliance}
    ${liguri}=   Get LIG URI      ${lig_6a['name']}
	${body} =   Build LIG body      ${lig_6a}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"
	${task} =	Wait For Task 	${resp} 	30s 	2s
	get li compliance    ${LI}   NOT_CONSISTENT
	${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s
    sleep  10
    validate desiredspeed   uplink1   Q1.1  Speed40G
    validate desiredspeed   uplink1   Q2.1  Speed40G
    get li compliance    ${LI}   CONSISTENT
 
    ${uls_LI_comp}=   return uplink   ${Uplinkset_LI_compliance}
    :FOR  ${x}  IN   @{uls_LI_comp}
    \   ${uri}=  Get Uplinkset URI   ${x['name']}  
    #  add a line to check warning by removing force from uplink uri below
    \   ${resp}=  fusion_api_edit_uplink_set   body=${x}   uri=${uri}?force=true
    \   should be equal as numbers   ${resp['status_code']}  202
    \   sleep  10
	validate desiredspeed   uplink1   Q1.1  Speed40G
	validate desiredspeed   uplink1   Q2.1  Auto
	get li compliance    ${LI}   NOT_CONSISTENT  
     

F1682_TC_API_40_c7K: Create Uplink from LI via API
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    remove all uplinks       
    ${uplinkSets_40}=  get variable value   ${Uplinkset40} 
    ${uplinkset40}=   return uplink   ${uplinkSets_40}
    ${resp}=  fusion_api_create_uplink_set   body=${uplinkset40[0]}  param=?force=true  
    should be equal as numbers   ${resp['status_code']}  202
	validate desiredspeed   uplink1   Q1.1  Auto
	

F1682_TC_API_41_c7K: verify LI Edit uplink error when Q2.2=40G,Q2.1=Auto and Q1.1=40G
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplinkset41}=   return uplink   ${Uplinkset41}
    ${resp}=  fusion_api_create_uplink_set   body=${uplinkset41[0]}
    should be equal as numbers   ${resp['status_code']}  400
	validate desiredspeed   uplink1   Q1.1  Auto
	Should match    ${resp['errorCode']}   CRM_INVALID_40GB_DESIRED_PORT_SPEED
	Should match    ${resp['message']}    Port speed of 40 Gb/s is invalid for uplink port Q2.2.


F1682_TC_API_41_1_c7K: verify LIEdit uplink error when Port Q2.2 = Auto and Q2.1,Q1.1 = 40G
    [Documentation]  covers F1682_TC_UI_5_c7K,F1682_TC_API_41_1_c7K    
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplinkset41}=   return uplink   ${Uplinkset41_1}
    ${resp}=  fusion_api_create_uplink_set   ${uplinkset41[0]}
    should be equal as numbers   ${resp['status_code']}  400
    Should match    ${resp['errorCode']}   CRM_INVALID_UPLINKSET_SPLIT_AND_UNSPLIT_PORTS
	Should match    ${resp['message']}    The uplink set cannot contain both 40 Gb/s ports and ports that require the use of a splitter cable.
	validate desiredspeed   uplink1   Q1.1  Auto


F1682_TC_API_42_c7K: Verify LIcreate Uplinks with all Qx.1 ports =40G is successful
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    remove all uplinks
    ${uplinkSets_42}=  get variable value   ${Uplinkset42} 
    ${uplinkset42}=   return uplink   ${uplinkSets_42}
    :FOR  ${x}  IN   @{uplinkset42}  
    \   ${resp}=  fusion_api_create_uplink_set   body=${x}      param=?force=true
    \   wait for task   ${resp}   100  10
	validate desiredspeed   uplink1   Q1.1  Speed40G
	validate desiredspeed   uplink2   Q2.1  Speed40G
	validate desiredspeed   uplink3   Q3.1  Speed40G
	validate desiredspeed   uplink4   Q4.1  Speed40G
    

F1682_TC_API_42_2c7K: Verify Edit Uplinks with all Qx.1 ports =40G is successful
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplinkSets_422}=  get variable value   ${Uplinkset42_2} 
    ${uplinkset422}=   return uplink   ${uplinkSets_422}
    :FOR  ${x}  IN   @{uplinkset422}
    \   log to console and logfile   creating uplinkset ${x['name']}
    \   ${uri}=  Get Uplinkset URI   ${x['name']}  
    \   ${resp}=  fusion_api_edit_uplink_set   body=${x}   uri=${uri}?force=true
    \   should be equal as numbers   ${resp['status_code']}  202
	\   wait for task   ${resp}   100   10
    \   sleep   10
	validate desiredspeed   uplink1   Q1.1  Auto
	validate desiredspeed   uplink2   Q2.1  Speed40G
	validate desiredspeed   uplink3   Q3.1  Speed40G
	validate desiredspeed   uplink4   Q4.1  Auto

F1682_TC_API_43_c7K: veify Uplink create with Q1.x,Q2.x, X1,X2=Auto is successful
    [Documentation]  Q1.1,Q1.4,Q3.1,Q3.4,Q2.1,Q2.4,Q4.1,Q4.4=Auto, x1, x2, x3 ports = Auto    
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    remove all uplinks
    sleep   10 
    ${uplinkset43}=   return uplink   ${Uplinkset43}
    :FOR  ${x}  IN   @{uplinkset43}  
    \   ${resp}=  fusion_api_create_uplink_set   body=${x}     param=?force=true
    \   should be equal as numbers   ${resp['status_code']}  202
    \   wait for task   ${resp}   100   10
	\   sleep  30
	validate desiredspeed   uplink1   Q1.1  Auto
	validate desiredspeed   uplink1   Q1.4  Auto
	validate desiredspeed   uplink1   Q2.1  Auto
	validate desiredspeed   uplink1   Q2.4  Auto
	validate desiredspeed   uplink1   Q3.1  Auto
	validate desiredspeed   uplink1   Q3.2  Auto
	validate desiredspeed   uplink1   X1  Auto
	validate desiredspeed   uplink4   Q4.1  Auto
	validate desiredspeed   uplink4   Q4.4  Auto
	validate desiredspeed   uplink4   Q3.4  Auto
	validate desiredspeed   uplink4   X2  Auto
	validate desiredspeed   uplink4   X3  Auto



F1682_TC_78.1_Func c7K updatefromGroup
    [Documentation]  covers  tc_78.1,F1682_TC_69_Func_C7K: update from Group
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    fusion_api_delete_uplink_set     uplink1  

    wait until interconnect is configured    ${icm5}
	${lig_781}=  get variable value   ${lig_c7k_f1682}
    lig edit and update from grp     ${lig_781}   ${uplinkSets_781}   ${LI}
    wait until interconnect is configured    ${icm5}
	sleep   200
    validate desiredspeed   uplink1   Q1.1  Speed40G
	validate desiredspeed   uplink1   Q2.1  Auto
	${msg}=  fetch active alerts
    ${ms}=  get matches   ${msg}     For uplink set uplink1, uplink ports {"name":"SGH439WJKT, interconnect 5*
    should contain  ${ms[0]}   Q2.2
    should contain  ${ms[0]}   Q2.1
    should contain  ${ms[0]}   Q2.3
    should contain  ${ms[0]}   Q2.4
    should contain  ${ms[0]}   non operational  


F1682_TC_69.1_Func_C7K: update from Group
    [Documentation]  covers  tc_69.1,F1682_TC_69.2_Func_C7K
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${resp}=   fusion_api_delete_uplink_set     uplink1
    sleep   10
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplinkSets_691}   ${LI}
    validate desiredspeed   uplink1   X1   Auto
    sleep  150
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplinkSets_692}   ${LI}
    validate desiredspeed   uplink1   Q1.1  Speed40G
	validate desiredspeed   uplink1   X1  Auto
    
    
F1682_TC_API_42_1_c7K: Verify LI-create Uplinks error,when Uplink1 Q1.1=40G and uplink2 Q1.2=Auto  
    [Documentation]  Also adress F1682_TC_UI_15_c7K
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplinkSets_6_compliance}   ${LI}
    validate desiredspeed   uplink1   Q1.1  Speed40G
	validate desiredspeed   uplink1   Q2.1  Speed40G
	sleep   200
	validate port status    ${icm5}   Q1.1    Linked    Speed_10G
    validate port status   ${icm5}   Q2.1    Linked    Speed_40G 
    ${Uplinkset42_1}=   return uplink   ${Uplinkset42_1}
    ${resp}=  fusion_api_create_uplink_set   ${Uplinkset42_1[0]}   param=?force=true
    should be equal as numbers   ${resp['status_code']}  400
    Should match    ${resp['errorCode']}   CRM_INVALID_UPLINKSET_FORTYG_SPEED_PORTS_EXIST
	Should match    ${resp['message']}    Port(s) Q1.1 are used by other uplink sets as 40 Gb/s ports and conflict with port selections in this uplink set.
    Should match    ${resp['recommendedActions'][0]}   Remove port(s) Q1.2 from this uplink set to proceed.
     
F1682_TC_68_Func_C7K: verify Alert when LI is Created with LIG-Qx.1= 40GB, Nexus 9K,but4X10G splitter is used
    [DOcumentation]  covers tc_89 to TC96.Ensure connection-Q1=Splitter,Q2-HP-CR4,Q3-CiscoCU,Q4-AOC,Q1(bay6)-ciscoACU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplink_TC_68}   ${LI}
    validate desiredspeed   uplink1   Q1.1  Speed40G 
    sleep   200
	validate port status    ${icm5}   Q1.1    Linked    Speed_10G
    
    ${msg}=  fetch active alerts 
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
	#should contain  ${msg}  ${msg3}
    #should contain  ${msg}   ${resol2}

F1682_TC_69_Func_C7K: Verify Alert when LI is Created withQ1.1toQ1.4=Auto, but 40G cable is connected to Nexus 9K
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplink_TC_69}   ${LI}
    validate desiredspeed   uplink1   Q2.1  Auto
    validate desiredspeed   uplink1   Q2.2  Auto
    validate desiredspeed   uplink1   Q2.3  Auto
    validate desiredspeed   uplink1   Q2.4  Auto
	sleep   200
    validate port status    ${icm5}   Q2.1    Unlinked    Speed_0M
    validate port status    ${icm5}   Q2.2    Unlinked    Speed_0M
    validate port status    ${icm5}   Q2.3    Unlinked    Speed_0M
    validate port status    ${icm5}   Q2.4    Unlinked    Speed_0M
    ${msg}=  fetch active alerts 
    ${ms}=  get matches   ${msg}     For uplink set uplink1, uplink ports {"name":"SGH439WJKT, interconnect 5*
    log to console and logfile   ${ms}   
    should contain  ${ms[0]}   Q2.2
    should contain  ${ms[0]}   Q2.1
    should contain  ${ms[0]}   Q2.3
    should contain  ${ms[0]}   Q2.4
    should contain  ${ms[0]}   non operational

F1682_TC_69_Func_C7K_part2: Verify Alert when LI is Created withQ1.1toQ1.4=Auto, but 40G cable is connected to Nexus 9K
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplink_TC_69_2}   ${LI}
    validate desiredspeed   uplink1   Q4.1  Auto
    validate desiredspeed   uplink1   Q4.2  Auto
    validate desiredspeed   uplink1   Q4.3  Auto
    validate desiredspeed   uplink1   Q4.4  Auto
	sleep   200
    validate port status    ${icm5}   Q4.1    Linked    Speed_40G
    validate port status    ${icm5}   Q4.2    Unlinked    Speed_0M
    validate port status    ${icm5}   Q4.3    Unlinked    Speed_0M
    validate port status    ${icm5}   Q4.4    Unlinked    Speed_0M
    
    ${msg}=  fetch active alerts 
    ${ms}=  get matches   ${msg}     For uplink set uplink1, uplink ports {"name":"SGH439WJKT, interconnect 5*  
    log to console and logfile   ${ms}
    should contain  ${ms[0]}   Q4.2
    should contain  ${ms[0]}   Q4.3
    should contain  ${ms[0]}   Q4.4
    should contain  ${ms[0]}   non operational
    

F1682_TC_95_link_c7K: verify,Q1:1=Auto,Link=Down & X1=Auto,Link=up when connected to Nexus9K using HPCR10G cable
    [Documentation]  using Q2:1 instead of Q1.1, with X1 connected via CU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp   ${lig_c7k_f1682}   ${uplink_TC_95}   ${LI}
    validate desiredspeed   uplink1   Q2.1  Auto
    validate desiredspeed   uplink1   X1  Auto
	sleep   300
    validate port status    ${icm5}   Q2.1    Unlinked    Speed_0M
    validate port status    ${icm5}   X1    Linked    Speed_10G
    ${msg}=  fetch active alerts 
    ${ms}=  get matches   ${msg}     For uplink set uplink1, uplink ports {"name":"SGH439WJKT, interconnect 5*
    log to console  ${ms}
    should contain  ${ms[0]}  Q2.1
    should contain  ${ms[0]}   non operational


TC_Func to verify traffic passes in Splitter cable in Auto and 40G mode.
    [DOcumentation]  covers tc_89 to TC96.Ensure connection-Q1=Splitter,Q2-HP-CR4,Q3-CiscoCU,Q4-AOC,Q1(Bay6)-ciscoACU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${interconn_1}=  get variable value   ${interconn_1}
    lig edit and update from grp   ${lig_c7k_f1682}   ${LIF_pingQ1}   ${LI}
	sleep   200
    validate desiredspeed   uplink1   Q1.1  Auto
    validate port status    ${icm5}   Q1.1    Linked    Speed_10G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
	lig edit and update from grp   ${lig_c7k_f1682}   ${LIF_pingQ1_1}   ${LI}
	sleep   200
    validate desiredspeed   uplink1   Q1.1  Speed40G
    validate port status    ${icm5}   Q1.1    Linked    Speed_10G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    
TC_Func to verify traffic passes in HPCR4 cables in Auto and 40G mode.
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp  ${lig_c7k_f1682}   ${LIF_pingQ2}   ${LI} 
    validate desiredspeed   uplink1   Q2.1  Auto
	sleep   200
    validate port status    ${icm5}   Q2.1    Unlinked    Speed_0M
    SSH to switch and ping x negative   ${tor_switch_ip}   ${server_ip}
    
    lig edit and update from grp  ${lig_c7k_f1682}   ${LIF_pingQ2_1}  ${LI}
	sleep   200
    validate desiredspeed   uplink1   Q2.1  Speed40G
    validate port status    ${icm5}   Q2.1    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}


TC_Func to verify traffic passes in CISCO CU cables in Auto and 40G mode.
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}    
    lig edit and update from grp   ${lig_c7k_f1682}   ${LIF_pingQ3}  ${LI} 
	sleep   200
    validate desiredspeed   uplink1   Q3.1  Auto
    validate port status    ${icm5}   Q3.1    Unlinked    Speed_0M
    SSH to switch and ping x negative   ${tor_switch_ip}   ${server_ip}
	
	lig edit and update from grp   ${lig_c7k_f1682}   ${LIF_pingQ3_1}  ${LI} 
	sleep   200
    validate desiredspeed   uplink1   Q3.1  Speed40G
    validate port status    ${icm5}   Q3.1    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    
TC_Func to verify traffic passes in HPAOC cables in Auto and 40G mode.
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}   
    lig edit and update from grp    ${lig_c7k_f1682}   ${LIF_pingQ4}   ${LI} 
	sleep   200
    validate desiredspeed   uplink1   Q4.1  Auto
    validate port status    ${icm5}   Q4.1    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    
    lig edit and update from grp    ${lig_c7k_f1682}   ${LIF_pingQ4_1}   ${LI} 
	sleep   200
    validate desiredspeed   uplink1   Q4.1  Speed40G
    validate port status    ${icm5}   Q4.1    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    
TC_Func to verify traffic passes in HP CR4 JScables in Auto and 40G mode.
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    lig edit and update from grp    ${lig_c7k_f1682}   ${LIF_pingQ61}   ${LI} 
    sleep   200
    validate desiredspeed   uplink1   Q1.1  Auto
    validate port status    ${icm6}   Q1.1    Unlinked    Speed_0M
    Log to console and logfile   verify ping tests dont pass in Q1.1Bay6=CISCO ACU cable
    SSH to switch and ping x negative   ${tor_switch_ip}   25.25.26.5
    
    lig edit and update from grp    ${lig_c7k_f1682}   ${LIF_pingQ61_1}   ${LI}    
    sleep   300
    validate desiredspeed   uplink1   Q1.1  Speed40G
    validate port status    ${icm6}   Q1.1    Linked    Speed_40G
    Log to console and logfile   verify ping tests pass in Q1.1Bay6=CISCO ACU cable
    SSH to switch and ping x   ${tor_switch_ip}   25.25.26.5


    
F1682_TC_112_C7K:Interconnect powerCycle when Q1.1=40G,and veify AN=Disabled, traffic restored 
  [Documentation]  using Q2.1 and 1.1 to accomodate all scenarios
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${interconn_1}=  get variable value   ${interconn_1}
  lig edit and update from grp   ${lig_c7k_f1682}   ${interconn_1}   ${LI}
  sleep   200
  validate desiredspeed    uplink2   Q2.1  Speed40G
  validate desiredspeed    uplink1   Q1.1  Auto
  validate desiredspeed   uplink1   Q1.2  Auto
  validate desiredspeed   uplink1   Q4.1  Auto
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G 
  validate port status    ${icm5}   Q1.2    Linked    Speed_10G
  validate port status    ${icm5}   Q4.1    Linked    Speed_40G
  
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
  
  Log to console and logfile   Powercycle the interconnect
  OA CLI POWEROFF  ${encs[0]['hostname']}  Administrator  Admin  INTERCONNECT  5   
  sleep   20
  OA CLI POWERON  ${encs[0]['hostname']}  Administrator  Admin  INTERCONNECT  5
  ${al}=  fetch active alerts
  sleep   20
  wait until interconnect is configured   ${icm5}
  validate desiredspeed    uplink2   Q2.1  Speed40G
  validate desiredspeed    uplink1   Q1.1  Auto
  validate desiredspeed   uplink1   Q1.2  Auto
  validate desiredspeed   uplink1   Q4.1  Auto
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G 
  validate port status    ${icm5}   Q1.2    Linked    Speed_10G
  validate port status    ${icm5}   Q4.1    Linked    Speed_40G
  
  OA CLI EFUSE   ${encs[0]['hostname']}  Administrator  Admin  IOM  5  OFF
  Sleep     100
  OA CLI EFUSE   ${encs[0]['hostname']}  Administrator  Admin  IOM  5  ON
  sleep   20
  wait until interconnect is configured   ${icm5}
  
  validate desiredspeed    uplink2   Q2.1  Speed40G
  validate desiredspeed    uplink1   Q1.1  Auto
  validate desiredspeed   uplink1   Q1.2  Auto
  validate desiredspeed   uplink1   Q4.1  Auto
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G 
  validate port status    ${icm5}   Q1.2    Linked    Speed_10G
  validate port status    ${icm5}   Q4.1    Linked    Speed_40G
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
  
  
initial cleanup
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  power off all servers
  Remove All Server Profiles
  Remove All Enclosures
  Remove All Enclosure Groups
  Remove All LIGs
  Remove ALL Ethernet Networks

*** comment ***
F1682_TC_API_46_c7K: Verify Alert when Q1:=40G, and Supershaw is downgraded to <4.50
    [Documentation]   also covers F1682_TC_API_45_c7K,F1682_TC_API_44_c7K
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${resp} =  Fusion Api Upload Firmware Bundle      localfile=C:\\Downloads\\Software\\Custom_spp_for_C7K_icm_version_4_6\\cust-upgrade-rpm-4-6-c7k-22-11-2016latest.iso
    Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to upload"
    ${resp} =  Fusion Api Upload Firmware Bundle      localfile=C:\\Downloads\\Software\\Custom_Spp_forC7K_icm_version_4_40\\bp-C7K-VC440-2015-11-05-01.iso
    Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to upload"
    
    ${resp}=   fusion_api_delete_uplink_set     uplink1
    ${resp}=   fusion_api_delete_uplink_set     uplink2
    ${resp}=   fusion_api_delete_uplink_set     uplink3
    ${resp}=   fusion_api_delete_uplink_set     uplink4
    
    ${liuri}=  Get LI URI   ${LI} 
    wait until interconnect is configured   ${icm5}
    wait until interconnect is configured   ${icm6}
    Log to console and logfile    upgrade firmware to 4.6
    ${resp}=   fusion_api_li_upgrade_firmware   uri=${liuri}   body=${li_FW_46}
    Wait For Task 	${resp} 	25min 	2min
    ${Uls44}=  get variable value   ${Uplinkset44}
    ${uls44}=   return uplink   ${Uls44}
    ${resp}=  fusion_api_create_uplink_set   body=${uls44[0]}     param=?force=true
    should be equal as numbers   ${resp['status_code']}  202
    validate desiredspeed   uplink1   Q1.1  Speed40G
    wait until interconnect is configured   ${icm5}
    wait until interconnect is configured   ${icm6}
    
     ${liuri}=  Get LI URI   ${LI}    
     Log to console and logfile    downgrade firmware to 4.4
     ${resp}=   fusion_api_li_upgrade_firmware   uri=${liuri}   body=${li_fW_44}
     ${task} =	Wait For Task 	${resp} 	25min 	2min
     wait until interconnect is configured   ${icm5}
     wait until interconnect is configured   ${icm6}
     ${uls44p2}=  get variable value   ${Uplinkset44_p2}
     ${uls44p}=   return uplink   ${uls44p2}
       ${resp}=  fusion_api_create_uplink_set   body=${uls44p[0]} 
       #should be equal as numbers   ${resp['status_code']}  400
       should contain    ${resp['errorCode']}  CRM_LU_PORT_CONFIG_INFO_FIRMWARE_DOES_NOT_SUPPORT_AUTONEG
       should contain    ${resp['message']}   Unable to set the speed to 40 Gb/s. The minimum firmware version of 4.50 is required to set the speed to 40 Gb/s.
       should contain    ${resp['recommendedActions']}   Install a minimum firmware version of 4.50 or set the speed to Auto to proceed.
     validate desiredspeed   uplink1   Q1.1  Speed40G
    
    ${LIF}=   return uplink LIG  ${uplinkSets_6_compliance}
	${lig}=   ReplaceLIG uplink with newuplink     ${lig_c7k_f1682}  ${LIF} 
    ${liguri}=   Get LIG URI      ${lig['name']}
	${body} =   Build LIG body      ${lig}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"
	${task} =	Wait For Task 	${resp} 	20s 	2s
	${Uri}=  Get LI URI   ${LI}
     ${upd}=   fusion_api_update_from_group    ${Uri}
     ${task} =  Wait For Task   ${upd}   600s   10s
     validate port status    ${icm5}   Q1.1    Linked    Speed_10G
     validate port status    ${icm5}   Q2.1    Unlinked    Speed_0M
     sleep  10
     ${liuri}=  Get LI URI   ${LI} 
     Log to console and logfile    upgrade firmware to 4.6
     ${resp}=   fusion_api_li_upgrade_firmware   uri=${liuri}   body=${li_FW_46}
     Wait For Task 	${resp} 	25min 	2min
     wait until interconnect is configured   ${icm5}
     wait until interconnect is configured   ${icm6}

     ${uls44p2}=  get variable value   ${Uplinkset44_p2}
     ${uls44p}=   return uplink   ${uls44p2}
     ${resp}=   fusion_api_delete_uplink_set     uplink1
     ${resp}=   fusion_api_delete_uplink_set     uplink2
     
     ${Uls44}=  get variable value   ${Uplinkset44}
    ${uls44}=   return uplink   ${Uls44}
    ${resp}=  fusion_api_create_uplink_set   body=${uls44[0]}     param=?force=true
     
     ${resp}=  fusion_api_create_uplink_set   ${uls44p[0]}    param=?force=true
      should be equal as numbers   ${resp['status_code']}  202
     validate desiredspeed   uplink1   Q1.1  Speed40G
     validate desiredspeed   uplink2   Q2.1  Speed40G    

  
F1682_TC_127_c7K:Perform Backup restore. With Lig having Q Ports. 
  
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${interconn_1}=  get variable value   ${interconn_1}
  #lig edit and update from grp   ${lig_c7k_f1682}   ${interconn_1}   ${LI}
  validate desiredspeed   uplink2   Q2.1  Speed40G
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  validate desiredspeed   uplink1   Q1.1  Auto
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G
  validate desiredspeed   uplink1   Q1.2  Auto
  validate port status    ${icm5}   Q1.2    Linked    Speed_10G
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}    
  
  ${resp}=  fusion_api_create_backup
  #${task} =  Wait For Task   ${resp}   800s   30s
  sleep  30
  
  ${uplinkSets_6_compliance}=  get variable value    ${uplinkSets_6_compliance}
  lig edit and update from grp   ${lig_c7k_f1682}    ${uplinkSets_6_compliance}   ${LI}
  validate desiredspeed   uplink1   Q1.1  Speed40G
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G
  validate desiredspeed   uplink1   Q2.1  Speed40G
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  Create Restore
  sleep  30
  $state}=  wait for restore to complete
  
  
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  validate desiredspeed   uplink2   Q2.1  Speed40G
  validate port status    ${icm5}   Q2.1    Linked    Speed_40G
  validate desiredspeed   uplink1   Q1.1  Auto
  validate port status    ${icm5}   Q1.1    Linked    Speed_10G
  validate desiredspeed   uplink1   Q1.2  Auto
  validate port status    ${icm5}   Q1.2    Linked    Speed_10G
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip} 
  wait until interconnect is configured   ${icm5}
  wait until interconnect is configured   ${icm6}


*** Keywords ***

remove all uplinks
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${x}=  fusion_api_get_uplink_set
   ${y}=  get variable value   ${x['members']}
   :FOR  ${uls}  IN  @{y}
   \   ${resp}=   fusion_api_delete_uplink_set  ${uls['name']}
   \   wait for task   ${resp}   200  10 

Create Backup
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${resp}=  fusion_api_create_backup
   ${task} =  Wait For Task   ${resp}   800s   30s

Create Restore
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${bak}=   fusion api get backup
   ${uri}=  get from dictionary  ${bak['members'][0]}  uri
   ${restore}=  create dictionary
   set to dictionary   ${restore}  type=RESTORE
   set to dictionary   ${restore}  uriOfBackupToRestore=${uri}
    fusion_api_restore_backup   ${restore}

wait for restore to complete
  
    :FOR  ${x}  IN RANGE  1  100
    \  sleep  36
    \  ${resp}=   fusion_api_get_restore_status
    \  ${state} = 	Get From Dictionary		${rests['members'][0]['status']}
    \  log to console and logfile  restore state is ${state}
    \  run keyword if  '${resp['progressStep']' != 'COMPLETED'   continue for loop
    \  run keyword if  '${state}' == 'SUCCEEDED'    exit for loop
    \  sleep  2
    [return]  ${state}

lig edit and update from grp
    [arguments]    ${LIG}   ${uplinkset}  ${LI}
    log to console and logfile   perform update from group
    ${LIF}=   return uplink LIG  ${uplinkset}
	${lig}=   ReplaceLIG uplink with newuplink    ${LIG}   ${LIF} 
    ${liguri}=   Get LIG URI      ${lig['name']}
	${body} =   Build LIG body      ${lig}
	${resp} =	Fusion Api Edit Lig		${body}		${liguri}	
	Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"
	${task} =	Wait For Task 	${resp} 	30s 	2s
	${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s
    sleep  10
    get li compliance    ${LI}   CONSISTENT
    ${resp}=   Fusion Api Get Interconnect  		param=?filter="'name'=='${ic}'"
    ${state} = 	Get From Dictionary		${resp['members'][0]}	state
    wait until keyword succeeds  100  5    should match regexp  ${state}      ((?i)Managed|Configured)   
    
    
wait until interconnect is configured  
    [arguments]     ${icm}
    :FOR  ${x}  IN RANGE  1  100
    \  sleep  5
    \  ${resp}=   Fusion Api Get Interconnect  		param=?filter="'name'=='${icm}'"
    \  ${state} = 	Get From Dictionary		${resp['members'][0]}	state
    \  log to console and logfile  interconnect ${icm} state is ${state}
    \  run keyword if  '${state}' == 'Configured'    exit for loop
    sleep  2
    [return]  ${state}

validate port status
  [arguments]   ${icm}   ${portname}   ${state}    ${op_speed}   
  ${ic}=   get ic uri   ${icm}
  ${resp}=   fusion_api_get_interconnect_ports   uri=${ic}
  :FOR   ${port}  IN   @{resp['members']}
  \   run keyword if  '${port['portName']}' != '${portname}'   Continue For Loop
  \   should match  ${port['portStatus']}   ${state}
  \   log to console and logfile   Port Status ${port['portStatus']} matches expected ${state}
  \   SHould match  ${port['operationalSpeed']}    ${op_speed}
  \   log to console and logfile   Port Speed ${port['operationalSpeed']} matches expected speed ${op_speed}

fetch active alerts
  ${alert1}=   fusion_api_get_alerts
  ${resp}=   Get From Dictionary   ${alert1}  members
  ${lis1}=   create list
  :FOR   ${x}  IN  @{resp}
  \  run keyword if   '${x['alertState']}' != 'Active'  Continue For Loop
  \   append to list  ${lis1}  ${x['description']}   ${x['correctiveAction']}
  [return]   ${lis1}
  
get li compliance
    [arguments]   ${li}   ${state}




    ${member}=  Get LI member   ${li}
	${compliance} = 	Get From Dictionary		${member}  consistencyStatus
    log to console    compliance is:${compliance}
    should match   ${compliance}   ${state}
    

validate desiredspeed
    [arguments]   ${uplink}  ${port}    ${speed}
    ${resp} = 	Fusion Api Get Uplink Set 		param=?filter="'name'=='${uplink}'"
	${portconfig} = 	Get From Dictionary		${resp['members'][0]}   portConfigInfos
	:FOR  ${x}  IN   @{portconfig} 
	\   @{por}=   split string  ${x['portUri']}   :
	\   Run keyword If  '${por[1]}' != '${port}'   continue for loop
	\   should match   ${x['desiredSpeed']}   ${speed} 


return uplink
    [arguments]   ${uplinkSets}
    ${l} = 	Get Length	${uplinkSets}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\ 	Run Keyword If 	'${networkType}' == 'Ethernet'		Continue For Loop
	\	${networkUris} = 	Get FC Uris	${networks}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	${networkUris}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
	\ 	Run Keyword If 	'${networkType}' == 'FibreChannel'	Continue For Loop
	\	${networkUris} = 	Get FCoE Uris	${networks}
	\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	    ${networkUris}
	\   ${nativeNetworkUri} = 	Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri	${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]}	nativeNetworkUri     ${nativeNetworkUri}
    \   ${LI}=  Get LI URI   ${uplinkSets[${x}]['logicalInterconnectUri']}
    \   set to dictionary    ${uplinkSets[${x}]}   logicalInterconnectUri   ${LI}
    [return]     ${uplinkSets}


portlogicalinfo
    [arguments]   ${uplinkset}
    ${portconfig}=  get from dictionary   ${uplinkset}   PortConfigInfos
    :FOR  ${port}  IN   @{portconfig}
    \   ${porturi}=   get from dictionary   ${port}  portUri
    \   @{words}=  split string    ${porturi}  :
    \   ${icmuri}=  get ic uri    ${words[0]}   
    \   ${prt}=   split string   ${icmuri}   interconnects/
    \   ${ports}=  catenate   SEPARATOR=  ${icmuri}  /ports/${prt[1]}:${words[1]}
    \   set to dictionary   ${port}   portUri=${ports}
    [return]   ${portconfig}

ReplaceLIG uplink with newuplink    
    [arguments]   ${lig_body}   ${uplinksets}
    ${lig_1enc}=  Get Variable Value   ${lig_body}
    ${uplink33}=  Get Variable Value   ${uplinksets}
    ${lig_1enc}=  Get Variable Value   ${lig_1enc[0]}
    set to dictionary    ${lig_1enc}   uplinkSets=${uplink33}
    [return]   ${lig_1enc} 
 

return uplink LIG
    [arguments]   ${uplinkSets}
    ${l} = 	Get Length	${uplinkSets}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\ 	Run Keyword If 	'${networkType}' == 'Ethernet'		Continue For Loop
	\	${networkUris} = 	Get FC Uris	${networks}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	${networkUris}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
	\ 	Run Keyword If 	'${networkType}' == 'FibreChannel'	Continue For Loop
	\	${networkUris} = 	Get FCoE Uris	${networks}
	\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	    ${networkUris}
	\   ${nativeNetworkUri} = 	Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri	${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]}	nativeNetworkUri     ${nativeNetworkUri}
    [return]     ${uplinkSets}

SSH to switch and ping x
    [Documentation]    SSH's to a given host, then pings an IP from that host
    [Arguments]	       ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}   admin   welcome@123 
    ${Output}=    Execute Command    ping ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    ttl=
    Close All Connections

SSH to switch and ping x negative
    [Documentation]    SSH's to a given host, then pings an IP from that host
    [Arguments]	       ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}   admin   welcome@123 
    ${Output}=    Execute Command    ping ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should not Contain    ${Output}    ttl=
    Close All Connections

FTS
  Set Log Level   DEBUG
    Get VM IP   ${VM}
  First Time Setup    password=hpvse123

Test Specific Setup
  Set Log Level	TRACE
  ${TEST_NAME} =      Set Variable    TEST-SPECIFIC SETUP
  Run Keyword and Ignore Error    Write To ciDebug Log
  Log to console and logfile  [TEST-SPECIFIC SETUP]
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${users} =  Get Variable Value  ${users}
  Run Keyword If   ${users} is not ${null}    Add Users from variable   ${users}
  ${ethernet_networks} =   Get Variable Value    ${ethernet_networks}
  Run Keyword If    ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable   ${ethernet_networks}
  ${ethernet_ranges} =   Get Variable Value   ${ethernet_ranges}
  Run Keyword If   ${ethernet_ranges} is not ${null}   Run Keyword for List  ${ethernet_ranges}  Create Ethernet Range
  ${fc_networks} =   Get Variable Value   ${fc_networks}
  Run Keyword If   ${fc_networks} is not ${null}    Add FC Networks from variable   ${fc_networks}
  ${fcoe_networks} =   Get Variable Value   ${fcoe_networks}
  Run Keyword If  ${fcoe_networks} is not ${null}    Add FCoE Networks from variable   ${fcoe_networks}
  ${licenses} =   Get Variable Value   ${licenses}
  Run Keyword If   ${licenses} is not ${null}   Add Licenses from variable   ${licenses}

    Login all users     ${users}

Run FTS and test-specific setup
    Set Log Level   TRACE
    FTS
    Test Specific Setup


Get Alerts
  [Arguments]    ${description}    ${correction}   ${alertState}
  ${alert1}=   fusion_api_get_alerts
  ${resp}=   Get From Dictionary   ${alert1}  members
  ${lis1}=   create list
  :FOR   ${x}  IN  @{resp}
  \  run keyword if   '${x['alertState']}' != '${alertState}'  Continue For Loop
  \  ${ex}=   Get Lines Containing String  "${x['description']}"  ${description}
  \  ${resol}=   Get Lines Containing String  "${x['correctiveAction']}"   ${correction}
  \  ${ela}=   Get Length   ${ex}
  \  ${resolen}=   Get Length   ${resol}
  \  run keyword if    ${ela} > 1    Append to List    ${lis1}   ${ex}
  \  run keyword if   ${resolen} >1   Append to List   ${lis1}   ${resol}
  [return]   ${lis1}