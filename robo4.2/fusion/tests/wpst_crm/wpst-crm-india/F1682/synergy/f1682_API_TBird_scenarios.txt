*** Settings ***
Documentation		Feature Test:F1682-AUtoNegotiation Enablement with Synergy 
Variables     data_variables.py
#Suite Setup   Run FTS and test-specific setup
#Suite Teardown   Suite Teardown
Resource            ../../../../resource/fusion_api_all_resource_files.txt
Library      Collections
Library      json
Library      OperatingSystem

*** Variables ***

${SSH_PASS}                 hpvse1
${APPLIANCE_IP}    15.115.12.90
${VM}     15.115.12.90

${split_unsplit_msg}    An uplink set may not contain both split and un-split uplink ports.
${split_recomaction}     Specify only split or only un-split ports in an uplink set.
${invalid_speed_errorcode}    INVALID_JSON_DATA_TYPE
${inval_spd_resol}   Correct the content of the JSON and try the request again.    
${LI}   LE_1Enc-LIG-bay3-1enc_f1682
${msg105}  For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q1 are non operational.
${msg107}  For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q2 are non operational.
${msg101}  For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q3 are non operational.
${msg102}   For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q3 are non operational.
${tor_switch_ip}  10.10.0.123
${server_ip}   25.25.26.4
${POTASH}     Virtual Connect SE 40Gb F8 Module for Synergy
${CHLORIDE20}   Synergy 20Gb Interconnect Link Module
${EM_SN}   WPSTENC100
${encic3}  WPSTENC100, interconnect 3
${encic6}  WPSTENC100, interconnect 6

*** Test Cases ***



Create networks as pre-requisites
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${ethnet}=  Get Variable Value   ${ethernet_networks}
  Run Keyword If   ${ethnet} is not ${null}    Add Ethernet Networks from variable    ${ethnet}
  ${fcnet}=  Get Variable Value   ${fc_networks}
  Run Keyword If   ${fcnet} is not ${null}   Add FC Networks from variable     ${fcnet}
  ${fcoenet}=   Get Variable Value   ${fcoe_networks}
  Run Keyword If   ${fcoenet} is not ${null}   Add FCoE Networks from variable   ${fcoenet}
  Add Licenses from variable   ${licenses_2}
  Add Licenses from variable   ${licenses_1} 


F1682_TC_API_59_Synergy: Create Uplink with LIG using Desiredspeed as Auto
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_tbird_59}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  ${resp}=  create lig from data   ${lig_tbird_59}   
  ${xspeed}=  validate lig uplink port speed       ${lig_tbird_59['name']}    61   Uplink1    Auto
  ${xspeed}=  validate lig uplink port speed       ${lig_tbird_59['name']}    66   Uplink2    Speed40G
  delete lig    ${lig_tbird_59['name']}


F1682_TC_API_60_Synergy: CreateLIG Uplink with Q2:1,2=Auto and Q1=40GBs
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_tbird_60}=  Get Variable Value   ${lig_tbird_f1682_1[0]} 
  set to dictionary    ${lig_tbird_60}   uplinkSets=${uplinkSets_60}   
  ${ligs}=  create lig from data   ${lig_tbird_60} 
  validate lig uplink port speed       ${lig_tbird_60['name']}    61   Uplink1   Speed40G
  validate lig uplink port speed       ${lig_tbird_60['name']}    67   Uplink2   Auto
  validate lig uplink port speed       ${lig_tbird_60['name']}    68   Uplink2   Auto
  delete lig   ${lig_tbird_60['name']}



F1682_TC_API_62_Synergy: Verify EditLIG with Uplink1:Q1 & Uplink2:Q2 having 40Gb is successful
  [Documentation]   this is positive scenario
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  sleep  10
  ${lig_tbird_62}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  create lig from data   ${lig_tbird_62}
  sleep  5
  ${lig_tbird_62e}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary    ${lig_tbird_62e}   uplinkSets=${uplinkSets_62}
  edit lig from data   ${lig_tbird_62e}
  validate lig uplink port speed       ${lig_tbird_62e['name']}    61   Uplink1   Speed40G  
  validate lig uplink port speed       ${lig_tbird_62e['name']}    66   Uplink2   Speed40G
      
F1682_TC_API_63_Synergy: Verify editLIG with Uplink1=Q1:1,Q2:1,Q3:1&Q4:1=Auto
  #prequisite - F1682_TC_API_47 testcase must be available and performed
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_tbird_63}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary    ${lig_tbird_63}   uplinkSets=${uplinkSets_63}
  edit lig from data   ${lig_tbird_63}
  validate lig uplink port speed       ${lig_tbird_63['name']}    62   Uplink1   Auto
  validate lig uplink port speed       ${lig_tbird_63['name']}    67   Uplink1   Auto
  validate lig uplink port speed       ${lig_tbird_63['name']}    72   Uplink1   Auto
  validate lig uplink port speed       ${lig_tbird_63['name']}    77   Uplink1   Auto
  delete lig  ${lig_tbird_63['name']}
  


F1682_TC_API_64_Synergy: CreateLIG with invalid Desired Speed Values, must give proper error
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  
  ${lig_tbird_64}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary   ${lig_tbird_64}   uplinkSets=${uplinkSets_64}
  ${resp}=  fusion api create lig   ${lig_tbird_64}
  should contain  ${resp['errorCode']}   ${invalid_speed_errorcode}
 
  ${lig_tbird_641}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary   ${lig_tbird_641}   uplinkSets=${uplinkSets_641}
  ${resp}=  fusion api create lig    ${lig_tbird_641}
  should contain  ${resp['errorCode']}   ${invalid_speed_errorcode}
 
  ${lig_tbird_642}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary   ${lig_tbird_642}   uplinkSets=${uplinkSets_642}
  ${resp}=  fusion api create lig    ${lig_tbird_642}
  should contain  ${resp['errorCode']}   ${invalid_speed_errorcode}
 
  ${lig_tbird_643}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary   ${lig_tbird_643}   uplinkSets=${uplinkSets_643}
  ${resp}=  fusion api create lig    ${lig_tbird_643}
  should contain  ${resp['errorCode']}   ${invalid_speed_errorcode}


F1682_TC_API_55_Synergy: EditLIG Uplink in differenet bays having same port numbers
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_tbird_f1682_55}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary   ${lig_tbird_f1682_55}   uplinkSets=${uplinkSets_55}
  create lig from data   ${lig_tbird_f1682_55}
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    61   Uplink1  Speed40G
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    66   Uplink1   Speed40G
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    71   Uplink1  Speed40G
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    76   Uplink1  Speed40G
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    61   Uplink2  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    66   Uplink2  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    71   Uplink2  Speed40G
  validate lig uplink port speed       ${lig_tbird_f1682_55['name']}    76   Uplink2  Speed40G

F1682_TC_API_56_Synergy: Edit Uplink LIG with all Qx:x ports set to Auto
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${lig_tbird_f1682_56}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary    ${lig_tbird_f1682_56}   uplinkSets=${uplinkSets_56}
  edit lig from data   ${lig_tbird_f1682_56}
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    62   Uplink1  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    65   Uplink1   Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    72   Uplink1  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    75   Uplink1  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    67   Uplink1  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    70   Uplink1  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    77   Uplink2  Auto
  validate lig uplink port speed       ${lig_tbird_f1682_56['name']}    80   Uplink2  Auto
  delete lig   ${lig_tbird_f1682_56['name']}
 


F1682_TC_API_61_Synergy: verify Error for CreateLIG with Uplink1 Q3.1=Auto & Uplink2 Q2=40G,Q1.1=Auto
  ${lig_tbird_61}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary    ${lig_tbird_61}   uplinkSets=${uplinkSets_61}   
  ${x}=  create lig from data   ${lig_tbird_61}
  ${errorcode}=  get from dictionary    ${x['taskErrors'][0]}   errorCode   
  ${message}=   get from dictionary    ${x['taskErrors'][0]}   message
  should match   ${message}    ${split_unsplit_msg}
  should contain   ${split_recomaction}    ${x['taskErrors'][0]['recommendedActions'][0]}


1682_TC_API_611_Synergy: verify Error for CreateLIG with Uplink1 Q1=40G & Uplink2 Q1.3=Auto
  [Documentation]   This is a invalid varioation possibel only in API and not in UI
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  sleep   10
  ${lig_tbird_611}=  Get Variable Value   ${lig_tbird_f1682_1[0]}
  set to dictionary    ${lig_tbird_611}   uplinkSets=${uplinkSets_611}
  ${x}=  create lig from data   ${lig_tbird_611}
  ${errorcode}=  get from dictionary    ${x['taskErrors'][0]}   errorCode   
  should match     ${x['taskErrors'][0]['message']}    ${split_unsplit_msg}
  should contain   ${split_recomaction}    ${x['taskErrors'][0]['recommendedActions'][0]}



 
cleanup
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
  Remove All Logical Enclosures
  Remove All Enclosure Groups
  Remove All LIGs
  Remove All Ethernet Networks
  Remove All FC Networks
  Remove All FCoE Networks



F1682_TC_API_52_Synergy: Create Uplink from LI with valid config
  #prereq-Create EnclosureGroup for LIG and Logical enclosure
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
  ${ethnet}=  Get Variable Value   ${ethernet_networks}
  Run Keyword If   ${ethnet} is not ${null}    Add Ethernet Networks from variable    ${ethnet}
  ${fcnet}=  Get Variable Value   ${fc_networks}
  Run Keyword If   ${fcnet} is not ${null}   Add FC Networks from variable     ${fcnet}
  ${fcoenet}=   Get Variable Value   ${fcoe_networks}
  Run Keyword If   ${fcoenet} is not ${null}   Add FCoE Networks from variable   ${fcoenet} 
  
  ${lig_tbird}=  Get Variable Value   ${lig_tbird_f1682[0]}
  create lig from data    ${lig_tbird} 
  ${enc_groups} =   Get Variable Value    ${enc_groups_1enc}
  Run Keyword If    ${enc_groups} is not ${null}    Run Keyword for List   ${enc_groups}    Add Enclosure Group from variable
  ${le}=  fusion_api_get_logical_enclosure
  run keyword if  '${le['count']}'== '${0}'   Add Logical Enclosure from variable       ${les_potash_1enc} 
  validate desiredspeed   Uplink1   Q1  Auto
  validate desiredspeed   Uplink2   Q2  Speed40G
  


F1682_TC_API_53_Synergy: Create Uplink with invalid values
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
  ${uplinksets_53}=  get variable value   ${uplinkSets_53} 
  ${resp}=  create uplinkset  ${uplinksets_53} 
  should be equal as numbers   ${resp['status_code']}  400
  sleep  30
  validate desiredspeed   Uplink1   Q1  Auto
  validate desiredspeed   Uplink2   Q2  Speed40G


F1682_TC_API_531_Synergy: Edit Uplink with valid values
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
  ${uplinksets_531}=  get variable value   ${uplinkSets_531} 
  fusion_api_delete_uplink_set    Uplink2
  wait until interconnect is configured    ${encic3}
  ${resp}=  edit uplinkset  ${uplinksets_531} 
  should be equal as numbers   ${resp['status_code']}  202
  wait until interconnect is configured    ${encic3}
	validate desiredspeed   Uplink1   Q1  Auto
	validate desiredspeed   Uplink1   Q2  Speed40G
	validate desiredspeed   Uplink1   Q3  Speed40G
    validate port status    ${encic3}   Q1    Unlinked    Speed_0G
    validate port status   ${encic3}    Q2    Linked    Speed_40G
    validate port status    ${encic3}   Q3    Linked    Speed_40G


F1682_TC_API_54_Synergy: Create Uplink with valid values
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_54}=  get variable value   ${uplinkSets_54} 
    fusion_api_delete_uplink_set    Uplink1
    wait until interconnect is configured    ${encic3}
    ${resp}=  create uplinkset  ${uplinksets_54} 
    should be equal as numbers   ${resp['status_code']}  202
    wait until interconnect is configured    ${encic3}
	validate desiredspeed   Uplink1   Q1  Speed40G
	validate desiredspeed   Uplink1   Q2  Speed40G
	validate desiredspeed   Uplink2   Q3:2  Auto

F1682_TC_API_541_Synergy: Edit Uplink with valid values
  Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_541}=  get variable value   ${uplinkSets_541} 
    ${resp}=  edit uplinkset  ${uplinksets_541}
    should be equal as numbers   ${resp['status_code']}  202
    
    wait until interconnect is configured    ${encic3}
	validate desiredspeed   Uplink1   Q1  Speed40G
	validate desiredspeed   Uplink1   Q2  Speed40G
	validate desiredspeed   Uplink1   Q3  Speed40G
	validate desiredspeed   Uplink1   Q4  Speed40G
	validate port status    ${encic3}   Q1    Linked    Speed_40G
    validate port status   ${encic3}    Q2    Linked    Speed_40G
    validate port status    ${encic3}   Q3    Linked    Speed_40G
    validate port status    ${encic3}   Q4    Unlinked    Speed_0M
	
	#validate desiredspeed   Uplink2   Q1  Speed40G
	#validate desiredspeed   Uplink2   Q2  Speed40G
	#validate desiredspeed   Uplink2   Q3  Speed40G
	#validate desiredspeed   Uplink2   Q4  Speed40G
	


F1682_TC_API_78_Synergy: Edit Uplink with invalid values for Qx
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_78}=  get variable value   ${uplinkSets_78} 
    ${resp}=   create uplinkset   ${uplinksets_78}
    should be equal as numbers   ${resp['status_code']}  400
    should contain    ${resp['errorCode']}         ${invalid_speed_errorcode}
    should contain    ${resp['recommendedActions']}         ${inval_spd_resol}

F1682_TC_API_79.1_Synergy: Create Uplink from LI with Q2.1,Q2.2=Auto & Q1.1=40G eror
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinkSets_791}=  get variable value   ${uplinkSets_791} 
    ${resp}=   create uplinkset   ${uplinksets_78} 
    should be equal as numbers   ${resp['status_code']}  400
    should contain    ${resp['errorCode']}         ${invalid_speed_errorcode}
    should contain    ${resp['recommendedActions']}         ${inval_spd_resol}
    


F1682_TC_API_77_Synergy: Edit Uplink LI with all Qx:x ports set to Auto
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_77}=  get variable value   ${uplinkSets_77} 
    ${resp}=   fusion_api_delete_uplink_set    Uplink2
    wait until interconnect is configured    ${encic3}
    
    ${resp}=   edit uplinkset   ${uplinksets_77}
    should be equal as numbers   ${resp['status_code']}  202
	validate desiredspeed   Uplink1   Q1:1   Auto
	validate desiredspeed   Uplink1   Q1:4   Auto
	validate desiredspeed   Uplink1   Q2:1   Auto
	validate desiredspeed   Uplink1   Q2:4   Auto
	validate desiredspeed   Uplink1   Q3:1   Auto
	validate desiredspeed   Uplink1   Q3:4   Auto
	validate desiredspeed   Uplink1   Q4:1   Auto
	validate desiredspeed   Uplink1   Q4:4   Auto



F1682_TC_API_79_2 Synergy:LIG compliance
    [Documentation]   covers F1682_TC_API_79_2 Synergy:LIG compliance and F1682_TC_API_79_3 Synergy:LI compliance

    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_792_lig}=  get variable value   ${uplinkSets_792_lig} 
    ${uplinksets_792_lig1}=  get variable value   ${uplinkSets_792_lig1}    
    ${lig_bird1}=  Get Variable Value   ${lig_tbird_f1682[0]}
    ${lig_bird2}=  Get Variable Value   ${lig_tbird_f1682[0]}
    
    set to dictionary   ${lig_bird1}   uplinkSets=${uplinksets_792_lig} 
    edit lig from data   ${lig_bird1}         
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   900s   10s
    
    validate desiredspeed   Uplink1   Q1  Auto
    validate desiredspeed   Uplink1   Q2  Speed40G
    get li compliance    ${LI}   CONSISTENT
  
    set to dictionary   ${lig_bird2}  uplinkSets=${uplinksets_792_lig1} 
    edit lig from data   ${lig_bird2}         
    validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink1   Q2  Auto
    get li compliance    ${LI}   NOT_CONSISTENT
    
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   900s   10s
    get li compliance    ${LI}   CONSISTENT
    validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink1   Q2  Auto
    
    ${uplinksets_792_li}=  get variable value   ${uplinkSets_792_li} 
    ${resp}=  edit uplinkset   ${uplinksets_792_li}
    should be equal as numbers   ${resp['status_code']}  202
    wait until interconnect is configured    ${encic3}
    get li compliance    ${LI}   NOT_CONSISTENT
	validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink1   Q2  Speed40G
    

F1682_TC_115_Synergy: Edit Uplink speed and verify Interconnect
  
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink1   Q2  Speed40G
  validate port status    3   Q1    Linked    Speed_40G
  validate port status    3   Q2    Linked    Speed_40G
  


F1682_TC_118_Synergy: Interconnect reset when  Q1=Auto, and verify AN=Enabled, traffic restored
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  ${icmuri}=  Get IC URI    ${encic3}
  ${body}=  Get variable value   ${ICM_powercycle}
  ${resp}=   fusion_api_interconnect_power_request    body=${body}   uri=${icmuri}
  wait for task   ${resp}  60s  5s
  wait until interconnect is configured    ${encic3}
  validate desiredspeed   Uplink1   Q1  Speed40G
  validate desiredspeed   Uplink2   Q2  Speed40G
  validate port status    3   Q1    Linked    Speed_40G
  validate port status    3   Q2    Linked    Speed_40G
  
F1682_TC_116_Synergy: Interconnect powerCycle when  Q1.1=40G, and veify AN=Disabled, traffic restored
  [Documentation]   With Q1=40GB, AN=Disabled and Link=Up, power off and PowerON the Interconect
  
  Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
  validate desiredspeed   Uplink1   Q1  Speed40G
  validate desiredspeed   Uplink2   Q2  Speed40G
  validate port status    3   Q1    Linked    Speed_40G
  validate port status    3   Q2    Linked    Speed_40G
  
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
  
  ${resp}=   fusion_api_interconnect_power_request    body=${potash_poweroff}   uri=${icmuri}
  wait for task   ${resp}  60s  5s
  ${resp}=   fusion_api_interconnect_power_request    body=${potash_poweron}   uri=${icmuri}
  wait for task   ${resp}  60s  5s
  wait until interconnect is configured    ${encic3}
  
  validate desiredspeed   Uplink1   Q1  Speed40G
  validate desiredspeed   Uplink2   Q2  Speed40G
  validate port status    3   Q1    Linked    Speed_40G
  validate port status    3   Q2    Linked    Speed_40G

F1682_TC_117_Synergy: Interconnect powerCycle when  Q1=Auto, and veify AN=Enabled, traffic restored
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplinksets_117}=  get variable value   ${uls_117_HPCR4} 
    fusion_api_delete_uplink_set    Uplink1
    wait until interconnect is configured    ${encic3}
    ${resp}=  create uplinkset  ${uplinksets_117} 
    should be equal as numbers   ${resp['status_code']}  202
    wait until interconnect is configured    ${encic3}
	validate desiredspeed   Uplink1   Q1  Auto
	${resp}=   fusion_api_interconnect_power_request    body=${potash_poweroff}   uri=${icmuri}
    wait for task   ${resp}  60s  5s
    ${resp}=   fusion_api_interconnect_power_request    body=${potash_poweron}   uri=${icmuri}
    wait for task   ${resp}  60s  5s
    wait until interconnect is configured    ${encic3}
  
    validate desiredspeed   Uplink1   Q1  Auto
    validate port status    3   Q1    Unlinked    Auto

F1682_TC_120_Synergy: verify Link status and Traffic when Interconnect with Q1=40G, CR4,Link UP is pulled out and the reinserted back
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplinksets_120}=  get variable value   ${uplinkSets_792_lig}     
    ${lig_bird120}=  Get Variable Value   ${lig_tbird_f1682[0]}
    
    set to dictionary   ${lig_bird120}   uplinkSets=${uplinksets_120} 
    edit lig from data   ${lig_bird120}         
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   900s   10s
    
    validate desiredspeed   Uplink1   Q1  Auto
    validate desiredspeed   Uplink1   Q2  Speed40G
    get li compliance    ${LI}   CONSISTENT
  
  Log to console and logfile    perfom Efuse
  ${EM}=  Execute Command   /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o i`%bond0
  ${XAUTH}=  Execute Command  /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${EM_SN} -o t
  ${eoff}=   Execute Command   curl -i -X POST https://${EM}/rest/v1/InterconnectBays/3 -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOn"}'
  should contain   ${eoff}  Accepted
  sleep   200
  ${eon}=   Execute Command   curl -i -X POST https://${EM}/rest/v1/InterconnectBays/3 -k -H "X-Auth-Token: ${XAUTH}" -d '{"Action":"EFuseOff"}'
  should contain   ${eon}  Accepted
  sleep   50
  wait until interconnect is configured    ${encic3}
  validate desiredspeed   Uplink1   Q1  Auto
  validate desiredspeed   Uplink2   Q2  SPeed40G
  validate port status    3   Q1    Linked    Auto
  validate port status    3   Q2    Linked    Speed_40G
  SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
   
TC_Func to verify traffic passes in all cables in Auto and 40G mode.
    [DOcumentation]  covers Ensure connection-Q1=HPCR4,Q2=AOC,Q3=CiscoACU,Q4=CiscoSpitter,Q5=HPDAC,Q6=ciscoCU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${resp}=   fusion_api_delete_uplink_set    Uplink2
    ${resp}=   fusion_api_delete_uplink_set    Uplink1
    ${resp}=   fusion_api_delete_uplink_set    Uplink3
    ${resp}=   fusion_api_delete_uplink_set    Uplink4
    
    wait until interconnect is configured    ${encic3}
    

    

    
F1682_TC_105_Func_Synergy: verify ping if Q2=Auto,Link=Down and Q2=40G,Link=Up connected to Nexus9K using HP CR4 cable    
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uplink_Q1_HPCR4}=   get variable value   ${uls_Q1_HPCR4}
    ${resp}=   create uplinkset   ${uplink_Q1_HPCR4}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q1  Auto
    validate port status    3   Q1    Unlinked    Speed_0G
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    ${msg105}
    
    ${uls_Q1_1}=   get variable value   ${uls_Q1_HPCR4_1}
    ${resp}=   edit uplinkset   ${uls_Q1_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q1  Speed40G
    validate port status    3   Q1    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    ${msg105}

F1682_TC_107_link_Synergy: verify  Q1=Auto,link=up and Q2=40G,link=up when connected to Nexus9K using HP SR4 cable

    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uls_Q2}=   get variable value   ${uls_Q2_AOC}
    ${resp}=   edit uplinkset   ${uls_Q2}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q2  Auto
    validate port status    3   Q2    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    ${msg107} 
    
    ${uls_Q2_1}=   get variable value   ${uls_Q2_AOC_1}
    ${resp}=   edit uplinkset   ${uls_Q2_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q2  Speed40G
    validate port status    3   Q2    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    ${msg107} 
    
F1682_TC_101_Func_Synergy: verify ping when Q3=40G connected to Nexus9K using Cisco ACU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uls_Q3}=   get variable value   ${uls_Q3_ACU}
    ${resp}=   edit uplinkset   ${uls_Q3}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q3  Auto
    validate port status    3   Q3    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    ${msg101} 
    


F1682_TC_102_Func_Synergy: verify ping when Q1=Auto connected to Nexus9K using Cisco ACU
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uls_Q3_1}=   get variable value   ${uls_Q3_ACU_1}
    ${resp}=   edit uplinkset   ${uls_Q3_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q3  Speed40G
    validate port status    3   Q3    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    ${msg102}   

    
F1682_TC_104_Func_Synergy: verify ping if Q4:1=Auto connected to Nexus9K using HP splitter cable 
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    ${uls_Q4}=   get variable value   ${uls_Q4_ciscosplit}
    ${resp}=   edit uplinkset   ${uls_Q4}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q4  Auto
    validate port status    3   Q4    Unlinked    Speed_0G
    #SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q4 are non operational.
    
    ${uls_Q4_1}=   get variable value   ${uls_Q4_ciscosplit_1}
    ${resp}=   edit uplinkset   ${uls_Q4_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q4  Speed40G
    validate port status    3   Q4    Unlinked    Speed_0G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q4 are non operational.
    
    
    ${uls_Q4_2}=   get variable value   ${uls_Q4_ciscosplit_2}
    ${resp}=   edit uplinkset   ${uls_Q4_2}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q4:1  Auto
    validate port status    3   Q4:1    Linked    Speed_10G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q4:2,Q4:3,Q4:4 are non operational.
  
F1682_TC_105_Func_Synergy: verify ping if Q1=Auto,Link=Down and Q2=40G,Link=Up connected to Nexus9K using HPCR4 JS4 cable
   
    ${uls_Q5}=   get variable value   ${uls_Q5_HPJS}
    ${resp}=   edit uplinkset   ${uls_Q5}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q5  Auto
    validate port status    3   Q5    Unlinked    Speed_0G
    #SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q5 are non operational.
    
    ${uls_Q5_1}=   get variable value   ${uls_Q5_HPJS_1}
    ${resp}=   edit uplinkset   ${uls_Q5_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q5  Speed40G
    validate port status    3   Q5    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q5 are non operational.
    
F1682_TC_106_link_Synergy: verify Q6=Auto,link=down and Q2=40G,link=up when connected to Nexus9K using Cisco Passive CR4 cable
    ${uls_Q6}=   get variable value   ${uls_Q6_CU}
    ${resp}=   edit uplinkset   ${uls_Q6}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q6  Auto
    validate port status    3   Q6    Unlinked    Speed_0G
    #SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q6 are non operational.
    
    ${uls_Q6_1}=   get variable value   ${uls_Q6_CU_1}
    ${resp}=   edit uplinkset   ${uls_Q6_1}
    wait until interconnect is configured    ${encic3}
    validate desiredspeed   uplink1   Q6  Speed40G
    validate port status    3   Q6    Linked    Speed_40G
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q6 are non operational.
    
    
# Alert scenarios

F1682_TC_78.2_Func_Synergy: update from Group
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_782}=   get variable value   ${uplinkSets_782}
    ${lig_bird782}=  Get Variable Value   ${lig_tbird_f1682[0]}
    set to dictionary   ${lig_bird782}   uplinkSets=${uplinksets_782}
    edit lig from data  ${lig_bird782}
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s 
    validate port status    3   Q1:1    Linked    Speed_10G
    validate port status    3   Q1:2  Linked    Speed_10G
    validate port status    3   Q1:3  Linked    Speed_10G
    validate port status    3   Q1:4    Linked    Speed_10G
    ${alQ1}=  Get active alerts    
    should not contain   ${alQ1}    For uplink set Uplink1, uplink ports WPSTENC100, interconnect 3 :Q1:1,Q1:2,Q1:3,Q1:4 are non operational.
    
F1682_TC_65_Func_Synergy: verify Alert for LI created from LIG,Q1= 40Gb connected by 4x10G splitter cable
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_65}=   get variable value   ${uplinkSets_65}
    ${lig_bird65}=  Get Variable Value   ${lig_tbird_f1682[0]}
    set to dictionary   ${lig_bird65}   uplinkSets=${uplinksets_65}
    edit lig from data  ${lig_bird65}
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s 
    validate port status    3   Q4    Unlinked    Speed_0M
    ${alQ1}=  Get active alerts    
    should contain   ${alQ1}    For uplink set Uplink2, uplink ports EM1FFFF500, interconnect 3 :Q4 are non operational.
 
   
F1682_TC_127_Perform Backup rstore when the Q port uplinks is removed
    [DOcumentation]   covers F1682_TC_127 & F1682_TC_126 
    Fusion Api Login Appliance      ${APPLIANCE_IP}		${admin_credentials}
    ${uplinksets_692_backup}=   get variable value   ${uplinkSets_692_lig1}
    ${lig_bird692_bc}=  Get Variable Value   ${lig_tbird_f1682[0]}
    set to dictionary   ${lig_bird692_bc}   uplinkSets=${uplinksets_692_lig1}
    edit lig from data  ${lig_bird692_bc}
    ${Uri}=  Get LI URI   ${LI}
    ${upd}=   fusion_api_update_from_group    ${Uri}
    ${task} =  Wait For Task   ${upd}   600s   10s
    
    validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink    Q2  Auto
  
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    get li compliance    ${LI}   CONSISTENT
    
    Create Backup
    sleep  30
    ${resp}=   fusion_api_delete_uplink_set    Uplink1

    wait until interconnect is configured    ${encic3}
    
    get li compliance    ${LI}   NOT_CONSISTENT
    
    ${uplinksets_54b}=  get variable value   ${uplinkSets_54} 
    
    ${resp}=  create uplinkset  ${uplinksets_54b} 
    should be equal as numbers   ${resp['status_code']}  202
    wait until interconnect is configured    ${encic3}
	validate desiredspeed   Uplink1   Q1  Speed40G
	validate desiredspeed   Uplink1   Q2  Speed40G
	validate desiredspeed   Uplink2   Q3:2  Auto
	
    Create Restore
    sleep  30
    wait for restore to complete
    
    Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
    validate desiredspeed   Uplink1   Q1  Speed40G
    validate desiredspeed   Uplink    Q2  Auto
    SSH to switch and ping x   ${tor_switch_ip}   ${server_ip}
    get li compliance    ${LI}   CONSISTENT



*** Keywords ***

validate port status
  [arguments]   ${icm}   ${portname}   ${state}    ${op_speed}   
  ${uri}=   get ic uri   ${icm}
  ${resp}=   fusion_api_get_interconnect_ports   uri=${uri}
  :FOR   ${port}  IN   @{resp['members']}
  \   run keyword if  '${port['portName']}' != '${portname}'   Continue For Loop
  \   should contain  ${port['portStatus']}   ${state}
  \   SHould match  ${port['operationalSpeed']}    ${op_speed}

Edit Uplinkset
    [arguments]    ${uls} 
    ${ulss}=   return uplink   ${uls}
    :FOR  ${x}  IN   @{ulss}  
    \   ${uri}=  Get Uplinkset URI   ${x['name']}
    \   set to dictionary  ${x}   uri=${uri} 
    \   ${resp}=  fusion_api_edit_uplink_set   body=${x}   uri=${uri}
    [return]   ${resp}
    
create uplinkset
    [arguments]    ${uls} 
    ${ulss}=   return uplink   ${uls}
    :FOR  ${x}  IN   @{ulss}    
    \   ${resp}=  fusion_api_create_uplink_set   body=${x}   
    [return]   ${resp}
  

wait until interconnect is configured  
    [arguments]     ${icm}
    :FOR  ${x}  IN RANGE  1  100
    \  sleep  8
    \  ${resp}=   Fusion Api Get Interconnect  		param=?filter="'name'=='${icm}'"
    \  ${state} = 	Get From Dictionary		${resp['members'][0]}	state
    \  log to console and logfile  interconnect ${icm} state is ${state}
    \  run keyword if  '${state}' == 'ConfigError'    Log to console and logfile   ${icm} is in COnfigError   WARN
    \  run keyword if  '${state}' == 'ConfigError'    exit for loop
    \  run keyword if  '${state}' == 'Configured'    exit for loop
    \  sleep  2
    [return]  ${state}
   
delete lig
  [arguments]   ${lig_name}
  ${uri}=   get LIG uri    ${lig_name}
  ${resp}=  Fusion Api Delete LIG		uri=${uri}
  ${task}=  wait for task   ${resp}  100  3s

create lig from data
  [arguments]   ${lig_body}
  ${ligs}=  Create LIG TBird Payload   ${lig_body}
  ${resp}=  fusion api create lig   ${ligs}
  ${task}=  wait for task   ${resp}  20s  5s
  [return]   ${task}


  
return uplink
    [arguments]   ${uplinkSets}
    ${l} = 	Get Length	${uplinkSets}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\ 	Run Keyword If 	'${networkType}' == 'Ethernet'		Continue For Loop
	\	${networkUris} = 	Get FC Uris	${networks}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	${networkUris}
	:FOR	${x}	IN RANGE	0	${l}
	\	${networkType} = 	Get From Dictionary 	${uplinkSets[${x}]}	networkType
	\	${networks} = 		Get From Dictionary		${uplinkSets[${x}]}	networkUris
	\   ${nativeNetworkUri} =   Get Variable Value     ${uplinkSets[${x}]['nativeNetworkUri']}
	\ 	Run Keyword If 	'${networkType}' == 'FibreChannel'	Continue For Loop
	\	${networkUris} = 	Get FCoE Uris	${networks}
	\   ${ethernetUris} =   Get Ethernet URIs   ${networks}
    \   ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
	\	Set to dictionary	${uplinkSets[${x}]}	networkUris	    ${networkUris}
	\   ${nativeNetworkUri} = 	Run Keyword If   '${nativeNetworkUri}' != 'None'    Get Ethernet Uri	${nativeNetworkUri}
    \   Set to dictionary   ${uplinkSets[${x}]}	nativeNetworkUri     ${nativeNetworkUri}
    \   ${LI}=  Get LI URI   ${uplinkSets[${x}]['logicalInterconnectUri']}
    \   set to dictionary    ${uplinkSets[${x}]}   logicalInterconnectUri   ${LI}
    [return]     ${uplinkSets}

    
edit lig from data
   [arguments]  ${lig}
   ${ligs}=  Create LIG TBird Payload   ${lig}
   ${liguri}=   Get LIG URI      ${ligs['name']}
   ${resp}=  fusion_api_edit_lig     body=${ligs}  uri=${liguri}
	Run keyword unless	${resp['status_code']}== 202	Fail	"Unable to Edit LIG"
    ${task} =	Wait For Task 	${resp} 	10s 	2s

	
validate desiredspeed
    [arguments]   ${uplink}  ${port}    ${speed}
    ${resp} = 	Fusion Api Get Uplink Set 		param=?filter="'name'=='${uplink}'"
	${portconfig} = 	Get From Dictionary		${resp['members'][0]}   portConfigInfos
	:FOR  ${x}  IN   @{portconfig} 
	\   ${ports}=   getport  ${x}
	\   Run keyword If  '${ports}' != '${port}'   continue for loop
	\   should match   ${x['desiredSpeed']}   ${speed} 

getport 
    [arguments]    ${a}  
    @{por}=   split string  ${a['portUri']}   :
    ${len}=  get length   ${por} 
    ${ports}=  run keyword if  ${len} > 2  catenate   SEPARATOR=  ${por[1]}:  ${por[2]}
	...       ELSE    get variable value  ${por[1]}
    [return]    ${ports}
	

remove lig by name
  [arguments]   ${ligs}
  ${liguri}=   Get LIG URI      ${ligs['name']}
  ${resp} = 	Fusion Api Delete LIG		uri=${liguri}
  ${task} =	Wait For Task 	${resp} 	240s	2s


SSH to host and ping x
    [Documentation]    SSH's to a given host, then pings an IP from that host
    [Arguments]	       ${HOST}    ${HOST2}
    Open Connection And Log In      ${HOST}
    ${Output}=    Execute Command    ping -c 4 ${HOST2}    return_stdout=True    return_rc=False
    Log to console and logfile    ${Output}
    Should Contain    ${Output}    ttl=
	#Should Contain    ${Output}    0% 
    Close All Connections

Validate IC state
	[Arguments]    ${ic_name}
	${resp} = 	Fusion Api Get Interconnect  		param=?filter="'name'=='${ic_name}'"
	${state} = 	Get From Dictionary		${resp['members'][0]}  state
	${permitted_state}=  Create List
	Append to list   ${permitted_state}   Monitored   Configured	
	list should contain value   ${permitted_state}  ${state}
	log to console and logfile   [${ic_name}] state is [${state}]


Create LIG TBird Payload
  [Arguments]   ${ligs}
  Set Log Level    Trace
  ${Potash}=   Get Interconnect Type URI     ${POTASH}
  ${Chloride}=     Get Interconnect Type URI    ${CHLORIDE20}
  ${Response}=   Get From Dictionary     ${ligs}    interconnectMapTemplate
  ${interconnectMapEntryTemplates}=    Create List
  ${interconnectMapEntryTemplates1}=    Get From Dictionary     ${Response}     interconnectMapEntryTemplates
  :For  ${item}  IN   @{interconnectMapEntryTemplates1}
  \   ${ICM}=   Get From Dictionary    ${item}   permittedInterconnectTypeUri
  \   Run keyword If   '${ICM}' == 'Virtual Connect SE 40Gb F8 Module for Synergy'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Potash}
  \   Run keyword If   '${ICM}' == '${CHLORIDE20}'     Set to Dictionary     ${item}   permittedInterconnectTypeUri=${Chloride}
  \   Append To List    ${interconnectMapEntryTemplates}     ${item}
  # Create LIG Body
  ${ls}=    Set to Dictionary     ${Response}   interconnectMapEntryTemplates=${interconnectMapEntryTemplates}
  Set to Dictionary	  ${ligs}		interconnectMapTemplate=${Response}
  ${uplinkSets1} =   Get From Dictionary  ${ligs}   uplinkSets
  ${uplinkSets2} =   Create List
  ${fcnetworkuri}=   Create List
  ${ethnetworkuri}=   Create List
  :FOR  ${x}  IN   @{uplinkSets1}
  \  ${networkType} =   Get From Dictionary   ${x}  networkType
  \  ${networks} =   Get From Dictionary   ${x}  networkUris
  \  Run Keyword If   '${networkType}' == 'Ethernet'   Continue For Loop
  \  ${networkUris} =   Get FC Uris   ${networks}
  \  log to console and logfile   ${networkUris}
  \  Set to dictionary   ${x}  networkUris=${networkUris}
  \  Append to List    ${uplinkSets2}    ${x}
  :FOR   ${x}  IN    @{uplinkSets1}
  \  ${networkType} =   Get From Dictionary   ${x}  networkType
  \  ${networks} =    Get From Dictionary   ${x}   networkUris
  \  Run Keyword If   '${networkType}' == 'FibreChannel'   Continue For Loop
  \  ${networkUris} =    Get FCoE Uris   ${networks}
  \  ${ethernetUris} =   Get Ethernet URIs   ${networks}
  \  ${networkUris} =    combine lists   ${networkUris}  ${ethernetUris}
  \  Set to dictionary   ${x}   networkUris=${networkUris}
  \  Append to List    ${uplinkSets2}    ${x}
  Set to Dictionary   ${ligs}   uplinkSets=${uplinkSets2}
  [Return]   ${ligs}


validate lig uplink port speed      
  [Arguments]   ${ligname}   ${Port}   ${uplinkname}   ${speed}
  ${resp}=  Get LIG member   ${ligname}
  ${uplinksets}=   get variable value    ${resp['uplinkSets']}
  :FOR	${x}  IN	@{uplinkSets}
  \ 	Run Keyword If 	'${x['name']}' != '${uplinkname}'		Continue For Loop
  \     ${logicalportconfiginfo}=   get variable value    ${x['logicalPortConfigInfos']}
  \     ${desiredspeed}=   get logportinfo    ${logicalportconfiginfo}   ${Port}
  \     should match   ${desiredspeed}   ${speed}
  \     log to console and logfile   Lig port speed ${desiredspeed} matches expected ${speed}     
  \     Run Keyword If 	'${x['name']}' == '${uplinkname}'		Exit For Loop
  
    
 
get logportinfo
  [Arguments]   ${logicalportconfiginfo}    ${Port}
  
  :FOR  ${lpci}  IN   @{logicalportconfiginfo}
  \     ${logicallocation}=   get from dictionary   ${lpci['logicalLocation']}  locationEntries
  \     ${Qport}=  get uplinkport   ${logicallocation}
  \     Run Keyword If 	'${Qport}' != '${Port}'		Continue For Loop
  \     ${desiredspeed} = 	Get From Dictionary		${lpci}  	desiredSpeed
  \    Run Keyword If 	'${Qport}' == '${Port}'		Exit For Loop
  log to console    found port ${Qport} with speed ${desiredspeed}
  [return]   ${desiredspeed}
  
get uplinkport
  [Arguments]     ${logicallocation}
  :FOR  ${y}  IN   @{logicallocation}
  \     Run Keyword If 	'${y['type']}' != 'Port'		Continue For Loop
  \     ${port}=  get from dictionary  ${y}  relativeValue
  [return]   ${port} 
  
Create Backup
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${resp}=  fusion_api_create_backup
   ${task} =  Wait For Task   ${resp}   800s   30s

Create Restore
   Fusion Api Login Appliance   ${APPLIANCE_IP}  ${admin_credentials}
   ${bak}=   fusion api get backup
   ${uri}=  get from dictionary  ${bak['members'][0]}  uri
   ${restore}=  create dictionary
   set to dictionary   ${restore}  type=RESTORE
   set to dictionary   ${restore}  uriOfBackupToRestore=${uri}
    fusion_api_restore_backup   ${restore}

get restore progress
  ${rests}=   fusion_api_get_restore_status
  should match regexp  ${rests['members'][0]['status']}  ((?i)Warning|SUCCEEDED|Terminated|Killed|Error|Completed)
  [return]  {rests}

wait for restore to complete
  ${resp}=  wait until keyword succeeds  2000  60  get restore progress
  [return]  ${resp}
  
Get active alerts
  
  ${alert1}=   fusion_api_get_alerts
  ${resp}=   Get From Dictionary   ${alert1}  members
  ${lis1}=   create list
  :FOR   ${x}  IN  @{resp}
  \  run keyword if   '${x['alertState']}' != 'Active'  Continue For Loop
 # \  ${ex}=   Get Lines Containing String  "${x['description']}"  ${description}
 # \  ${resol}=   Get Lines Containing String  "${x['correctiveAction']}"   ${correction}
  #\  ${ela}=   Get Length   ${ex}
  #\  ${resolen}=   Get Length   ${resol}
  \  append to list   ${lis1}   ${x['description']}   ${x['correctiveAction']}
  #\  run keyword if    ${ela} > 1    Append to List    ${lis1}   ${ex}
  #\  run keyword if   ${resolen} >1   Append to List   ${lis1}   ${resol}
  [return]   ${lis1}