*** Settings ***
Documentation      Feature Test: Jeff_MAC_Address_Table
Resource           OVAConfig.txt
Force Tags         Buildup
Suite Setup        Load Test Data and Open Browser
Suite Teardown    Logout And Close All Browsers
Library            Dialogs
Library            String
Library            Collections
Library             FusionLibrary
Library             RoboGalaxyLibrary
Library             SSHLibrary
Library             Telnet
Library             String
Variables           data_variables.py
Resource            ../../../resources/resource.txt

*** Test Cases ***
Step 0:LOGIN TO APPLIANCE AS ADMINISTRATOR

    [Documentation]    Log into Appliance as Administrator
    ${user} =    Get Data By Property    ${TestData.users}    name    Administrator
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  '${status}' == 'True'    Log to Console  'Successfully logged in to Appliance as Administrator'  ELSE    fail

INITIAL CLEANUP

    [Documentation]    Initial Cleanup
    ${status} =    Fusion UI Remove User   @{TestData.users}
    Run Keyword If    '${status}' == 'True'    Log to Console    'Successfully deleted all Users'    ELSE    fail

    ${status} =    Fusion UI Delete All Appliance Server Profiles
    Run Keyword If    '${status}' == 'True'    Log to Console    'Successfully deleted all Server Profiles'    ELSE    fail

    ${status}=  Fusion UI Delete All Appliance Networks
    Run Keyword If  '${status}' == 'True'   Log to Console  'Networks Removed Successfully' ELSE    fail

    ${status}=  Fusion UI Remove All Enclosures
    Run Keyword If  '${status}' == 'True'   Log to Console  'Enclosure Removed Successfully'    ELSE    fail

    ${status}=  Fusion UI Remove All Enclosure Groups
    Run Keyword If  '${status}' == 'True'   Log to Console  ''Enclosure Group Removed Successfully  ELSE    fail

    ${status}=  Fusion UI Remove All Logical Interconnect Groups
    Run Keyword If  '${status}' == 'True'   Log to Console  'Logical Interconnect Group removed Successfully'   ELSE    fail

Precondition:IMPORT ENCLOSURE

    [Documentation]    ****IMPORT ENCLOSURE***
    ${status} =     Fusion UI Create Ethernet Network       @{TestData.Ethernet_Networks}
    Run Keyword If  '${status}' == 'True'   Log to Console  'Network created sucessfully'   ELSE    fail

    ${status} =     Fusion UI Create Logical Interconnect Group     @{TestData.ligs1}
    Run Keyword If  '${status}' == 'True'   Log to Console  'LIG created sucessfully'   ELSE    fail

    ${status} =     Fusion UI Create Enclosure Group    @{TestData.encgroups}
    Run Keyword If  '${status}' == 'True'   Log to Console  'EG created Sucessfully'    ELSE    fail

    ${status} =    Fusion UI Add Enclosure    @{TestData.enclosures}
    Run Keyword If  '${status}' == 'True'   Log to Console  'Successfully Imported Enclosure'   ELSE    fail

    ${status} =     Fusion UI Create User   @{TestData.create_users}
    Run Keyword If  '${status}' == 'True'   Log to Console  'User created sucessfully'  ELSE    fail

Step 01:VERIFY MAC TABLE DOWNLOAD EXISTS IN DIFFERENT LOGIN

    [Documentation]    ***VERIFY MAC TABLE DOWNLOAD EXISTS IN DIFFERENT LOGIN***
    #VERIFY MAC TABLE DOWNLOAD EXISTS IN ADMINISTRATOR LOGIN
    ${status} =     Fusion UI Verify Mac Table Exists   @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True   Log to Console  'MAC Table Download verified Successfully'  ELSE    fail

    #LOGIN AS NAT USER
    ${user} =    Get Data By Property    ${TestData.users}    name    nat
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  ${status} == True   Log to Console  'Successfully logged in to Appliance as nat'    ELSE    fail

    #VERIFY MAC TABLE DOWNLOAD EXISTS IN NAT LOGIN
    ${status} =     Fusion UI Verify Mac Table Exists   @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True   Log to Console  'MAC Table Download verified Successfully'  ELSE    fail

    #LOGIN AS SERVERADMIN USER
    ${user} =    Get Data By Property    ${TestData.users}    name    ServerAdmin
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  ${status} == True   Log to Console  'Successfully logged in to Appliance as Server'    ELSE    fail

    #PREVILAGE CHECK
    ${status}=  Fusion UI Validate User Privileges Logicalinterconnects  @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True  Log to Console  Unavailability of MAC Table Download Verified Successfully.  ELSE    fail

    #LOGIN AS READONLY USER
    ${user} =    Get Data By Property    ${TestData.users}    name    Readonly
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  ${status} == True   Log to Console  'Successfully logged in to Appliance as Storage'    ELSE    fail

    #PREVILAGE CHECK
    ${status}=  Fusion UI Validate User Privileges Logicalinterconnects  @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True  Log to Console  Unavailability of MAC Table Download Verified Successfully.  ELSE    fail

    #LOGIN AS BACKUP USER
    ${user} =    Get Data By Property    ${TestData.users}    name    Backup
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  ${status} == True   Log to Console  'Successfully logged in to Appliance as Backup'    ELSE    fail

    #PREVILAGE CHECK
    ${status}=  Fusion UI Validate User Privileges Logicalinterconnects  @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True  Log to Console  Unavailability of MAC Table Download Verified Successfully.  ELSE    fail

    #LOGIN AS STORAGE USER
    ${user} =    Get Data By Property    ${TestData.users}    name    Storage
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  ${status} == True   Log to Console  'Successfully logged in to Appliance as Storage'    ELSE    fail

    #PREVILAGE CHECK
    ${status}=  Fusion UI Validate User Privileges Logicalinterconnects  @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True  Log to Console  Unavailability of MAC Table Download Verified Successfully.  ELSE    fail
    Log To Console    STEP 1 COMPLETED SUCCESSFULLY

    #LOGIN TO APPLIANCE AS ADMINISTRATOR
    ${user} =    Get Data By Property    ${TestData.users}    name    Administrator
    ${status} =    Fusion UI Login to Appliance    ${user[0].name}
    Run Keyword If  '${status}' == 'True'    Log to Console  'Successfully logged in to Appliance as Administrator'  ELSE    fail

Step 2: GET MAC TABLE ENTRIES AND VERIFY FUNCTIONS OF MAC TABLE DROPDOWN BOXES

    [Documentation]    ***VERIFY MAC TABLE FUNCTIONS***
    ${status} =    Fusion UI Verify Functions Of Mac Table    @{TestData.editlogicalinterconnect}
    Run Keyword If  ${status} == True  Log to Console  MAC table entries are verified successfully in LI page.  ELSE    fail
    Log TO Console    STEP 2 COMPLETED SUCCESSFULLY

Step 3: CREATE SERVER PROFILE, POWER ON THE SERVER PROFILE, GET MAC ADDRESSESS FROM GIVEN CONNECTIONS IN SERVER PROFILE AND CHECK IN MAC TABLE

    [Documentation]    ***VERIFY MAC ADDRESS IN MAC TABLE***
    ${status} =    Fusion UI Create Server Profile    @{TestData.profiles}
    Log To Console    ${status}
    Run Keyword If  ${status} == True  Log to Console  Server Profile Created Successfully  ELSE    fail

    #POWER ON THE SERVER PROFILE
    ${status} =    Fusion UI Power On Server Profile    @{TestData.profiles}
    Log To Console   ${status}
    Run Keyword If  ${status} == True  Log to Console  Server Profile Powered On Successfully  ELSE    fail
    Sleep    6min

    #GET MAC ADDRESSESS FROM GIVEN CONNECTIONS IN SERVER PROFILE
    ${connection}   ${port} =    Fusion UI Get Profile Connection Mac Address And Port    @{TestData.profiles}
    Log To Console    ${connection}
    Log To Console    ${port}
    ${MyDictionary}=    Create Dictionary
    Set To Dictionary    ${MyDictionary}    name    ${TestData.editlogicalinterconnect[0].name}
    Set To Dictionary    ${MyDictionary}    mac_address    ${connection}
    Set To Dictionary    ${MyDictionary}    port    ${port}
    Set To Dictionary    ${MyDictionary}    bay    ${TestData.profiles[0].server}
    Log To Console    ${MyDictionary}
    Set Global Variable    ${Test_data}    ${MyDictionary}

    #VERIFY WORKING OF MAC TABLE DROPDOWN BOXES - MAC ADDRESS OF PROFILE CONNECTIONS
    ${status} =    Fusion UI Verify Mac Address In Mac Table    ${Test_data}
    Run Keyword If  ${status} == True  Log to Console  MAC table dropdown boxes working fine in LI page.  ELSE    fail
    Log TO Console    STEP 3 COMPLETED SUCCESSFULLY

Step 4: PING EXTERNAL HOST,GET DEFAULT MAC ADDRESS AND CHECK IN MAC TABLE

    [Documentation]    ***VERIFY DEFAULT GATEWAY MAC ADDRESS IN MAC TABLE***
    #Create SessionID through API
    Set Log Level    TRACE
    ${Login_response} =    Fusion Api Login Appliance    ${APPLIANCE_IP}        ${admin_credentials}
    Run keyword unless  ${Login_response[0]['status_code']}== 200    Fail    ${Login_response[0]['message']}

    #Reboot servers and verify LUN
    Set Log Level    TRACE
    Log Variables
    ${Server_IP}=    Get Server And Gateway IP    ${oa_details}    ${Server_bays[0]}
    Log to console    ${Server_IP}
    Log to console    ${Server_IP[0]}
    Log to console    ${Server_IP[1]}
    ${Macadress}   Getinterface Server    ${Server_IP[0]}    ${win_server_details}    ${Server_IP[1]}    ${Host_IP}
    Log to console    Macadress valus ${Macadress}
    Log To Console    *** Append Mac address and LI name ***
    ${default_gateway_mac}=    Create Dictionary
    Set To Dictionary    ${default_gateway_mac}    name    ${TestData.editlogicalinterconnect4[0].name}
    Set To Dictionary    ${default_gateway_mac}    mac_address    ${Macadress}
    Set Global Variable    ${Test_data}    ${default_gateway_mac}

    #VERIFY DEFAULT GATEWAY MAC ADDRESS IN MAC TABLE
    ${status} =    Fusion UI Verify Default Gateway Mac Address    ${Test_data}
    Run Keyword If  ${status} == True  Log to Console  MAC Table dropdown boxes working fine in LI page  ELSE    fail
    Log TO Console    STEP 4 COMPLETED SUCCESSFULLY

FINAL CLEANUP
    ${status} =    Fusion UI Remove User   @{TestData.users}
    Run Keyword If  '${status}' == 'True'   Log to Console  'Successfully deleted all Users'    ELSE    fail

    ${status}=  Fusion UI Delete All Appliance Networks
    Run Keyword If  '${status}' == 'True'   Log to Console  'Networks Removed Successfully'    ELSE    fail

    ${status}=  Fusion UI Remove All Enclosures
    Run Keyword If  '${status}' == 'True'   Log to Console  'Enclosure Removed Successfully'    ELSE    fail

    ${status}=  Fusion UI Remove All Enclosure Groups
    Run Keyword If  '${status}' == 'True'   Log to Console  'Enclosure Group Removed Successfully'  ELSE    fail

    ${status}=  Fusion UI Remove All Logical Interconnect Groups
    Run Keyword If  '${status}' == 'True'   Log to Console  'Logical Interconnect Group Removed Successfully'   ELSE    fail
    Log to Console  CLEANUP SUCCESSFULL
    Log to Console  ALL STEPS COMPLETED SUCCESSFULLY

*** Keywords ***
Get Server And Gateway IP
    [Documentation]    Gets the valid ip and gateway ip of the server.
    [Arguments]     ${oa_details}    ${Server_bay_num}
    SSHLibrary.Open Connection    ${oa_details['oa_ip']}
    SSHLibrary.Login    ${oa_details['username']}    ${oa_details['password']}
    SSHLibrary.Write    connect server ${Server_bay_num}
    SSHLibrary.Read Until    hpiLO->
    SSHLibrary.Write    stop /system1/oemhp_VSP1
    SSHLibrary.Read Until    hpiLO->
    SSHLibrary.Write    vsp
    SSHLibrary.Read Until    SAC>
    SSHLibrary.Write    i
    ${output1}=    SSHLibrary.Read
    Log To Console    ${output1}
    ${cmd_output}=    Get Regexp Matches    ${output1}    192\\.\\d+\\.\\d+\\.\\d+
    ${Server_IP}=    Convert To String    ${cmd_output[0]}
    ${Gateway_IP}=    Convert To String    ${cmd_output[1]}
    SSHLibrary.Close All Connections
    [Return]    ${Server_IP}    ${Gateway_IP}

Getinterface Server
    [Documentation]    Gets the valid ip and gateway ip of the server.
    [Arguments]     ${Server_IP}    ${win_server_details}    ${Server_IP[1]}    ${Host_IP}
    Telnet.Open Connection    ${Server_IP}    prompt=>     timeout=20s
    Telnet.Login    ${win_server_details['username']}    ${win_server_details['password']}    login_prompt=login:    password_prompt=password:
    SSHLibrary.Read Until    >
    Telnet.Write    ping -n 4 ${Host_IP}
    SSHLibrary.Read Until    Ping statistics
    ${output2}=    Telnet.Read
    Log To Console    ${output2}
    Telnet.Write    powershell.exe arp -a
    ${output1} =  Telnet.Read
    Log To Console  ${output1}
    ${a}    ${x}=    Should Match Regexp    ${output1}    ${Server_IP[1]}\\s+(.*?)\\s+dynamic
    Telnet.Close Connection
    Telnet.Close All Connections
    [Return]    ${x}