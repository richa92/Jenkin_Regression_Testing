*** Settings ***
Documentation    Test suite to validate blade related events on OneView and FLM
...    It covers testing of:
...        BladeInsufficientPower
...        BladeInsufficientPowerCleared
...        BladePowerDeniedDueToFru
...        BladePowerDeniedDueToMating
...        BladePowerDeniedDueToMatingCleared
...        BladePowerDeniedDueToMidplane
...        BladeMateDetectFault
...        BladeMateDetectFaultCleared
...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> | -v CIM_Linux_IP:<ipv4> |-v GIT_REPO_ROOT: | Blade_power_event.txt |
...    = Variables =
...    | GIT_REPO_ROOT |      Required: Repo root path if NOT defined in environment variable this is mgmtfw root location|
...    | ENC_SERIAL_NO |      Optional: If omitted, will use the 1st enclosure detected in OV |
...    | APPLIANCE_IP |       Required: OneView IPv4 address |
...    | CIM_Linux_IP |       Required:CI Manager ipv4 under test |

Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt
Library           RoboGalaxyLibrary
Library           MgmtFWLibrary
Library           json

Suite Setup       Configure Events Test Environment
Suite Teardown    Run Keywords  Logout of EM RIS   AND    Logout of Fusion Via REST

*** Test Case ***
TC 01: Verify BladeInsufficientPower And BladeInsufficientPowerCleared Event
    [Documentation]    This test will Verify BladeInsufficientPower and BladeInsufficientPowerCleared event
    [Tags]    Blade    Alert    Events    FLM1.01     FLM2.00    OV3.10    Automated
    ${last_fusion_event_id}=    get last fusion event ID
    ${occupied_blade_bays}=    Get List of Occupied iLO Blade Bays 
    Should Not Be Empty    ${occupied_blade_bays}    msg=No iLO blades present in the enclosure
    ${blade_bay}=    Get Random Item From List    ${occupied_blade_bays}
    Log To Console    Flashing Low capacity FRU to all PS - required to trigger PowerAlertModeActivated
    Flash All Power Supply FRU    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${Cust_PS_Fru_Path} 
    Sleep    5
    Verify Set Redundant Power Mode
    Fail PS Until PowerSuppliesGood is less than PowerSuppliesNeededWithoutBonus
    Sleep    30
    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    ${status}=    Em Api Is Event By Messageid   ${EL_Power_Alert_Mode_Activated}
    Should be true    ${status}
    ${power_mode}=    Get Power Alert Mode
    Should be Equal As Strings    ${power_mode}    PowerReductionActive
    ${active_ipaddr}=    Get Diags Active EM IPv6 LL Address
    ${poweralertstatus}=    Get Diags Canmic PowerAlert Mode And PowerAlert     ${blade_bay}    [${active_ipaddr}]
    Should Be Equal    @{poweralertstatus}[0]    2
    Should Be Equal    @{poweralertstatus}[1]    0
    RIS EM Efuse Blade    ${blade_bay}    8
    Sleep    8
    Wait for Device Degraded    ${Blade_Device}    ${blade_bay}
    Sleep    10
    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    Verify Audit Log Alert Event    ${EL_Blade_Insufficient_Power}    ${Blade_Device}    ${blade_bay}    450
    Verify Fusion Event Sent By EM    ${EL_Blade_Insufficient_Power}    ${last_fusion_event_id}
    Log To Console    Creating iLO User
    ${create_user_status}=    Create an Account on iLO    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    ${iLO_Login_Name}
    Should Be Equal As Strings    ${create_user_status}    <Response [200]>
    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    Off 
    Ensure All PS Are In Good State
    Sleep    5
    Wait for Device OK    ${Blade_Device}    ${blade_bay}
    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    Verify Audit Log Alert Event    ${EL_Blade_Insufficient_Power_Cleared}    ${Blade_Device}    ${blade_bay}    250
    Verify Fusion Event Sent By EM    ${EL_Blade_Insufficient_Power_Cleared}    ${last_fusion_event_id}
    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    On
    Flash All Power Supply FRU    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\Fru_Files\\${CAT}\\Good_Fru\\${Good_PS_Fru_Path}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Ensure All PS Are In Good State
    ...    AND    Sleep   5
    ...    AND    Flash All Power Supply FRU    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\Fru_Files\\${CAT}\\Good_Fru\\${Good_PS_Fru_Path}

TC 02: Verify BladePowerDeniedDueToFru Event
    [Documentation]    This test will validate Compatability check when ManufacturedFor field in Midplane is HPE and in Blade is Foo
    [Tags]    Blade    Alert    Events    FLM1.01     FLM2.00    OV3.10    Automated
    # This test requires that the variable ${hpqlocfg_path} be set appropriately either on the pybot cmd line or as a global variable
    ${ManufacturedFor}=    Get ManufacturedFor From Midplane FRU
    Should Be Equal As Strings    ${ManufacturedFor}    HPE
    ${occupied_blade_list}=    Get List of Occupied iLO Blade Bays
    Should Not Be Empty    ${occupied_blade_list}    msg=No Blades present in the enclosure
    : FOR    ${blade_bay}    IN    @{occupied_blade_list}
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    ${Account_status}=    Create an Account on iLO    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    ${iLO_Login_Name}
    \    Should Be Equal As Strings    ${Account_status}    <Response [200]>
    \    ${ilo_ip}=    Get iLO IPv6 LL Address from EM RIS      ${blade_bay} 
    \    #Check Blade Power status
    \    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    On    
    \    #Flash InCompatible Fru
    \    ${blade_type}=    Get Blade Type    ${blade_bay}
    \    ${flash_status}=    Run Keyword If    '${blade_type}' == 'BlackBird'    Flash Blade BaseBoard FRU    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${blackbirdfru_foo}
    \    ...   ELSE IF    '${blade_type}' == 'RedBird'    Flash Blade BaseBoard FRU    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${redbirdfru_foo}
    \    ...   ELSE IF    '${blade_type}' == 'FireBird2s'    Flash Blade BaseBoard FRU    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${FireBird2sfru_foo}    
    \    ...   ELSE IF    '${blade_type}' == 'FireBird4s'    Flash Blade BaseBoard FRU    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${firebird4sfru_foo}    
    \    RIS EM Efuse Blade    ${blade_bay}    10
    \    Sleep    10
    \    ${status}=    Wait for Device Critical    ${Blade_Device}    ${blade_bay}
    \    Should Be True      ${status}   ${Blade_Device} Critical Status not detected
    \    Sleep    60    # Wait for PowerDenied event to be thrown after we see critical status ... usually takes 30 secs for Blackbird
    \    #Verifying resource updated event in diags audit log with 50 recent entries
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Alert Event    ${EL_Blade_PowerDeniedDueToFru}    ${Blade_Device}    ${blade_bay}    250
    \    Verify Fusion Event Sent By EM    ${EL_Blade_PowerDeniedDueToFru}    ${last_fusion_event_id}
    \    ${ManufacturedFor_Blade}=    Get ManufacturedFor From BaseBoardFru    ${blade_bay}
    \    List Should Not Contain Value    ${Compatible_Devices}    ${ManufacturedFor_Blade}
    \    ${Blade_Health}=    Get Blade Health    ${blade_bay}
    \    Should Be Equal As Strings    ${Blade_Health}    ${HEALTH_CRITICAL}
    \    ${Blade_Fault_Status}=    Get Blade Fault Status    ${blade_bay}    FRUManufacturedForInvalid
    \    Should Be Equal As Strings    ${Blade_Fault_Status}    ${STATUS_CRITICAL}
    \    ${Blade_Fault_Status}=    Get Blade Fault Status    ${blade_bay}    FRUManufacturedForMismatch
    \    Should Be Equal As Strings    ${Blade_Fault_Status}    ${STATUS_OK}
    \    #Check Blade Power status
    \    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    Off
    \    # Flash the Good Fru
    \    Log To Console    Flash Good Fru to bay: ${blade_bay}
    \    Flash Good BaseBoardFru For Blade Device    ${blade_bay}    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}
    \    RIS EM Efuse On Blade    ${blade_bay}
    \    Sleep    10
    \    RIS EM Efuse Off Blade    ${blade_bay}
    \    Login to iLO   ${ilo_ip}    ${iLO_Username}    ${iLO_Password}
    \    Wait for iLO Blade PowerOn   
    \    Logout of iLO 
    \    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    On
    [Teardown]    Run Keyword If Test Failed    Run Keywords   Flash Good BaseBoardFru For Blade Device    ${blade_bay}    ${ilo_ip}     ${Ilo_Username}     ${Ilo_Password}    AND    RIS EM Efuse On Blade    ${blade_bay}    AND    Sleep    10    AND    RIS EM Efuse Off Blade    ${blade_bay}

TC 03: Verify BladePowerDeniedDueToMating, BladePowerDeniedDueToMatingCleared, BladeMateDetectFault And BladeMateDetectFaultCleared Events
    [Documentation]    This test will validate BigBird blade's power cycle
    [Tags]    Blade    Alert    Events    FLM1.01     FLM2.00    OV3.10    Automated
    ${occupied_bigbird_list}=    Get List of Occupied Bigbird Blade Bays
    Should Not Be Empty    ${occupied_bigbird_list}    msg=No BigBird Blades present in the enclosure
    : FOR    ${blade_bay}    IN    @{occupied_bigbird_list}
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    RIS EM Power off Blade    ${blade_bay}
    \    ${Blade_Fault_Status}=    Set EM RIS Faults    StorageBladeFaultInjection    ${blade_bay}    MateDetect    true
    \    Should Be Equal As Strings    ${Blade_Fault_Status}    <Response [200]>
    \    Sleep    10
    \    #Verifying resource updated event in diags audit log with 50 recent entries
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Status Change MessageID Event    ${EL_Blade_Warning}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Audit Log Alert Event    ${EL_Blade_MateDetectFault}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Fusion Event Sent By EM    ${EL_Blade_MateDetectFault}    ${last_fusion_event_id}
    \    RIS EM Power on Blade     ${blade_bay}
    \    Wait for Device Degraded    ${Blade_Device}    ${blade_bay}
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Alert Event    ${EL_Blade_PowerDeniedDueToMating}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Fusion Event Sent By EM    ${EL_Blade_PowerDeniedDueToMating}    ${last_fusion_event_id}
    \    ${blade_obj}=    Get Blade iLO Manager Object    ${blade_bay}
    \    ${blade_pwr_state}=    Get From Dictionary    ${blade_obj}    Oem.Hp.PowerState
    \    Should Be Equal    '${blade_pwr_state}'    'Off'  
    \    ${allocated_watts}=    Get AllocatedWatts For Non Ilo Blade    ${blade_bay}
    \    Should Be True     ${allocated_watts} == 0      
    \    ${Blade_Fault_Status}=    Set EM RIS Faults    StorageBladeFaultInjection    ${blade_bay}    MateDetect    false
    \    Should Be Equal As Strings    ${Blade_Fault_Status}    <Response [200]>
    \    Sleep    10
    \    #Verifying resource updated event in diags audit log with 50 recent entries
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Alert Event    ${EL_Blade_PowerDeniedDueToMating_Cleared}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Fusion Event Sent By EM    ${EL_Blade_PowerDeniedDueToMating_Cleared}    ${last_fusion_event_id}
    \    Verify Audit Log Alert Event    ${EL_Blade_MateDetectFault_Cleared}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Fusion Event Sent By EM    ${EL_Blade_MateDetectFault_Cleared}    ${last_fusion_event_id}
    \    sleep    120    # Wait for bigbird blade to power on
    \    Wait for Device OK    ${Blade_Device}    ${blade_bay}
    \    ${blade_obj}=    Get Blade iLO Manager Object    ${blade_bay}
    \    ${blade_pwr_state}=    Get From Dictionary    ${blade_obj}    Oem.Hp.PowerState
    \    Should Be Equal    '${blade_pwr_state}'    'On'
    \    ${allocated_watts}=    Get AllocatedWatts For Non Ilo Blade    ${blade_bay}
    \    Should Be True     ${allocated_watts} > 0    
    [Teardown]    Run Keyword If Test Failed    Run Keywords    RIS EM Efuse On Blade     ${blade_bay}    AND    sleep  8   AND    RIS EM Efuse Off Blade     ${blade_bay}

TC 04: Verify BladePowerDeniedDueToMidplane Event
    [Documentation]    This test will validate BigBird blade's fault BladePowerDeniedDueToMidplane when zero FRU files are flashed
    [Tags]    Blade    Alert    Events    FLM1.01     FLM2.00    OV3.10    Automated
    ${occupied_blade_bays}=    Get List of Occupied iLO Blade Bays 
    Should Not Be Empty    ${occupied_blade_bays}    msg=No iLO blades present in the enclosure
    Flash Midplane Fru    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\${Customized_FRU_Path}\\${midplanefru_zerotype}
    ${active_bay}=    Get Diags EmClusterStatus Active Node
    RIS EM Reboot    ${active_bay}
    Sleep    ${EM_REBOOT_TIME}
    ${ov_claim_pwd}=    Get Claim Password From OneView    ${ENC_SERIAL_NO}
    Login to EM Via RIS    ip=${FLOATING_IP}    password=${ov_claim_pwd}
    Sleep    3
    : FOR    ${blade_bay}    IN    @{occupied_blade_bays}
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    RIS EM Efuse On Blade    ${blade_bay}
    \    sleep   8
    \    RIS EM Efuse Off Blade Without HealthCheck    ${blade_bay}
    \    Wait for Device Degraded    ${Blade_Device}    ${blade_bay}
    \    Sleep    30    # Wait for event to show up in audit log
    \    #Verifying resource updated event in diags audit log with 50 recent entries
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Alert Event    ${EL_Blade_PowerDeniedDueToMidplane}    ${Blade_Device}    ${blade_bay}    ${Healthalerts_timediff}
    \    Verify Fusion Event Sent By EM    ${EL_Blade_PowerDeniedDueToMidplane}    ${last_fusion_event_id}
    \    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    Off
    Flash Midplane Fru    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\Fru_Files\\${CAT}\\Good_Fru\\MIDPLANE\\${Midplane_Bay_No}\\fru.bin
    ${ip}=    Get Diags Active EM IPv6 LL Address
    ${ping_response_code}=    Ping EM    ${ip}
    ${active_bay}=    Get Diags EmClusterStatus Active Node
    RIS EM Reboot    ${active_bay}
    Sleep    ${EM_REBOOT_TIME}
    Login to EM Via RIS    ip=${FLOATING_IP}    password=${ov_claim_pwd}
    Sleep    3
    : FOR    ${blade_bay}    IN    @{occupied_blade_bays}
    \    RIS EM Efuse On Blade    ${blade_bay}
    \    sleep   8
    \    RIS EM Efuse Off Blade     ${blade_bay}
    \    Wait for Device Ok    ${Blade_Device}    ${blade_bay}
    \    Validate Blade Power Status    ${blade_bay}    ${iLO_Username}    ${iLO_Password}    On
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Login to EM RIS    ip=${FLOATING_IP}    password=${ov_claim_pwd}   AND   Flash Midplane Fru    ${GIT_REPO_ROOT}${TESTDATA_ROOT}\\Fru_Files\\${CAT}\\Good_Fru\\MIDPLANE\\${Midplane_Bay_No}\\fru.bin