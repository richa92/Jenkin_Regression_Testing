*** Settings ***
Documentation   SYSTEM INFO          keywords
...             = Usage =
...             | Resource | ../resources/system_info.txt |
Library         Collections
Library         String
Library         SSHLibrary
Library         OperatingSystem
Library         RoboGalaxyLibrary   # DVTs Robot Framework extensions
Library         FusionLibrary       # DVTs Robot Framework extensions
Resource          ../resources/hal_webapp.txt


*** Variables ***

*** Keywords ***
Select Random Element from List
	[Documentation]    Returns a random element from a given list.
	[Arguments]    ${Element List}	

    ${size}=              Get Length    ${Element List}
    ${Random Index}=      Evaluate    random.randint(0, ${size}-1)    random
    ${Random Element}=    Get From List    ${Element List}    ${Random Index}
    [Return]    ${Random Element}

#-----------------------------------------------------------------------
# ENCLOSURE BLADE KEYWORDS
#-----------------------------------------------------------------------
Select Random Populated Blade Bay
    [Documentation]     Selects a random Blade Bay # which contains a blade 
    ...    based on Enclosure BLADE_DATA (variables.py).
    # Get Populated Blade Bays as specified in variables.py
    ${bayurl}=    Set Variable If    ${DCS}==True    /rest/v1/chassis/1/BladeBays    /rest/v1/BladeBays
    ${filled}    ${unfilled}=    Find Filled Bays    ${bayurl}
    ${populated_bays}=    Set Variable    ${filled}
    # Select Random Bay
    ${random_populated_bay}=    Select Random Element from List    ${populated_bays}
    [Return]    ${random_populated_bay}

Select Random Empty Blade Bay
    [Documentation]     Selects a random Blade Bay # which doesn't contains a blade 
    ...                 based on Enclosure BLADE_DATA (variables.py).
    ${empty_bays}=      Create List
    ${bayurl}=    Set Variable If    ${DCS}==True    /rest/v1/chassis/1/BladeBays    /rest/v1/BladeBays
    ${filled}    ${unfilled}=    Find Filled Bays    ${bayurl}
    ${populated_bays}=    Set Variable    ${filled}
    :FOR    ${bay}    IN RANGE    1    12
    \    ${bay}      Convert To String    ${bay}
    \    ${found}    Run Keyword and Return Status
    \    ...    List Should Contain Value    ${populated_bays}    ${bay} 
    \    Run Keyword If    '${found}'=='${True}'    Continue For Loop
    \    Append To List    ${empty_bays}    ${bay}
    # Select Random Empty Bay
    ${Random Empty Bay}=    Select Random Element from List   ${empty_bays}
    [Return]    ${Random Empty Bay}
    
#-----------------------------------------------------------------------
# ENCLOSURE INTERCONNECT KEYWORDS
#-----------------------------------------------------------------------
Select Random Populated Interconnect Bay
    [Documentation]     Selects a random Interconnect Bay # which contains an interconnect
    ...                 based on Enclosure INTERCONNECT_DATA (variables.py).
    # Get Populated Interconnect Bays as specified in variables.py
    ${bayurl}=    Set Variable If    ${DCS}==True    /rest/v1/chassis/1/InterconnectBays    /rest/v1/InterconnectBays
    ${filled}    ${unfilled}=    Find Filled Bays    ${bayurl}
    ${populated_bays}=    Set Variable    ${filled}
    # Select Random Bay
    ${random_populated_bay}=    Select Random Element from List   ${populated_bays}
    [Return]    ${random_populated_bay}

Select Random Empty Interconnect Bay
    [Documentation]    Selects a random Interconnect Bay # which doesn't contains an
    ...                interconnect based on Enclosure INTERCONNECT_DATA (variables.py).
    ${Empty Bays}=      Create List
    # Determine Empty Interconnect Bays putting them into an Empty Bay list
    ${bayurl}=    Set Variable If    ${DCS}==True    /rest/v1/chassis/1/InterconnectBays    /rest/v1/InterconnectBays
    ${filled}    ${unfilled}=    Find Filled Bays    ${bayurl}
    ${populated_bays}=    Set Variable    ${filled}
    :FOR    ${bay}    IN RANGE    1    6
    \    ${bay}      Convert To String    ${bay}
    \    ${found}    Run Keyword and Return Status
    \    ...    List Should Contain Value    ${populated bays}    ${bay} 
    \    Run Keyword If    '${found}'=='${True}'    Continue For Loop
    \    Append To List    ${Empty Bays}    ${bay}
    # Select Random Empty Bay
    ${Random Empty Bay}=    Select Random Element from List   ${Empty Bays}
    [Return]    ${Random Empty Bay}

Find Filled Bays
    [Documentation]    Find filled and unfilled bays
    [Arguments]    ${RIS}   ${BayStart}=1	${BayStop}=0
    ${EM_IP}=    Get EM IP
    ${encl_list}=    Get EM Enclosures
    Get EM Token    ${encl_list[0]}
    Get EM Sessions
    ${BayStop}=    Run Keyword If    ${BayStop} == 0
    ...    Find Bay Count    ${RIS}
    ${BayStop}=    Set Variable   ${BayStop} + 1
    ${Filled}=    Create List
    ${Unfilled}=    Create List
    ${protocol}=    Set Variable If    ${DCS}    https   http
    : For    ${BayNo}    In Range    ${BayStart}   ${BayStop}
    \    ${Response}=    HAL API Get EM RIS   ${FUSION_IP}   ${EM_IP}    ${RIS}/${BayNo}    ${EMPTY}    5    ${EM_Token}
    \    ${content}=    Get From Dictionary    ${Response}    _content
    \    ${Match}    ${bay_status}=    Should Match Regexp    ${content}    \"Empty\":\\s*([a-z][a-z][a-z][a-z]*)    #:\\s*6 #\"Total\":\\s*[0-9] 
    \    Run Keyword If    '${bay_status}'=='true'
    \    ...    Append to List   ${Unfilled}     ${BayNo}
    \    Run Keyword If    '${bay_status}'=='false'
    \    ...    Append to List   ${Filled}     ${BayNo}
    [Return]    ${Filled}    ${Unfilled}

Find Bay Count
    [Documentation]    Find Bay Count
    [Arguments]    ${RIS}
    ${EM_IP}=    Get EM IP
    ${encl_list}=    Get EM Enclosures
    Get EM Token    ${encl_list[0]}
    Get EM Sessions
    ${Response}=    HAL API Get EM RIS   ${FUSION_IP}   ${EM_IP}    ${RIS}    ${EMPTY}    5    ${EM_Token}
    ${content}=    Get From Dictionary    ${Response}    _content
    ${Match}    ${Count}=    Should Match Regexp    ${content}    \"Total\":\\s*([0-9]*) 
    [Return]	${Count}


Get ProductInfo
    [Arguments]    ${RIS}
    Log    ${RIS}
    ${Response}=    HAL API Get EM RIS   ${FUSION_IP}   ${EM_IP}    ${RIS}
    ${Resource}=    Get Resource from Response    ${Response}
    ${Parsed}=      Get From Dictionary    ${Resource}    Parsed
    ${ProductInfo}    Get From Dictionary    ${Parsed}    ProductInfo
    [Return]    ${ProductInfo}
