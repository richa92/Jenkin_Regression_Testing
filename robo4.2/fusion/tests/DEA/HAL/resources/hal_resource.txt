*** Settings ***
Documentation    hal_resource.txt - Test suite to execute hal actions and to retriev response
...
...    = Usage =
...    | Resource | ../resources/hal_resource.txt |


Library      Collections
Library      String
Resource     ../resources/fusion_api.txt
Resource     ../resources/ilo_cli.txt               # AM-DVT Fusion API extensions
Resource     ../resources/fusion_api.txt            # AM-DVT Fusion API extensions
Resource     ../resources/hal_webapp.txt            # AM-DVT HAL Webapp extensions
Resource     ../resources/system_info.txt           # AM-DVT fusion API extensions
Variables    ../../../DEA/variables/dea_variables.py
Resource     ../../../DEA/resource/fusion_api_resource.txt       # AM-DVT PERM webapp extensions
Resource     ../resources/fusion_ssh.txt           # AM-DVT fusion ssh extensions

*** Keywords ***
Select Random Populated Bay
    [Documentation]    Select Random Blade Bay Number and set as Suite variable.
    # Blade Bay Number is selected based on BLADE_DATA information in dea_variables.py
    ${Bay}=    Select Random Populated Blade Bay
    Log To Console    Testing on Blade in Bay ${Bay}
    Set Suite Variable    ${Bay}    ${Bay}

Get Blade Configuration
    [Documentation]    Returns Blade Configuration information from HAL Webapp
    ...    Example:| ${Response}= | Get Blade Configuration | 1 |
    [Arguments]    ${Bay}    ${Config}=${Empty}
    # Build Parameters
    ${Bay}=    Convert To Integer    ${Bay}
    ${Parameters}=    Create Dictionary    BayNumber=${Bay}
    Run Keyword Unless    '${Config}'=='${Empty}'    Set To Dictionary    ${Parameters}    Properties    ${Config}
    # Get Blade Configuration
    ${Response}=    HAL API Perform Post Action    ${FUSION_IP}    BladeManagerGetConfig    ${Parameters}
    ${status}=    Get From Dictionary    ${Response}    CallStatus
    ${FormattedDictionary}=    Evaluate    json.dumps(${Response}, indent=${4}, sort_keys=${True})    json
    Log    ${FormattedDictionary}
    Should Be Equal as Strings    ${Status}    SUCCESS
    ...    msg=Failed to get Blade Configuration information.
    [Return]    ${Response}

#-----------------------------------------------------------------------
# MODEL BASED TESTING KEYWORDS
#-----------------------------------------------------------------------
Verify ICM Configuration
    [Documentation]    Verifies that the Current ICM Configuration
    ...                 matches the Expected ICM Configuration.
    # Get ICM Configuration information from HAL
    ${Response}=    Get ICM Configuration    ${Bay}
    ${Current ICM Configuration}=    Get From Dictionary    ${Response}    OperationResult
    # Verify Current Configuration is as Expected
    Log    Issue #AM57: On Hardware, fields are not updated. Therefore verify against initial configuration    level=WARN
    ${Expected Config}=    Set Variable If    '${DCS}'=='${TRUE}'    ${Expected ICM Configuration}    ${Initial ICM Configuration}
    Dictionaries Should Be Equal    ${Current ICM Configuration}    ${Expected Config}
    ...     msg=Current Configuration does not match Expected configuration on ICM ${Bay}.

Enable ICM IPV4 DHCP
    [Documentation]    Enables ICM IPV4 DHCP
    ${fields}=    Create Dictionary    DHCP=${True}
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Disable ICM IPV4 DHCP
    [Documentation]    Disables ICM IPV4 DHCP
    ${fields}=    Create Dictionary    DHCP=${False}
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 DNS
    [Documentation]    Modifies ICM IPV4 DNS
    # Build Payload
    # Should be a valid IP address
    # "DNS": [ { "IpAddress": "0.0.0.0" } ],
    ${IpAddress}=    Create Dictionary    IpAddress=123.255.255.255
    ${DNS}=    Create List    ${IpAddress}
    # Set ICM Configuration
    ${fields}=    Create Dictionary    DNS=${DNS}
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 Gateway
    [Documentation]    Modifies ICM IPV4 Gateway
    # "Gateway": "",
    ${fields}=    Create Dictionary    Gateway=0.0.0.0
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 IpAddress
    [Documentation]    Modifies ICM IPV4 Address
    # "IpAddress": "172.18.8.191",
    ${fields}=    Create Dictionary    IpAddress=255.255.255.255
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 DNSMax
    [Documentation]    Modifies ICM IPV4 DNSMAX
    ${fields}=    Create Dictionary    DNSMax=10
    # Error message is received due to the empty response when attempting to modify a read only setting
    Run Keyword If    '${DCS}'=='${TRUE}'
    ...    Run Keyword and Expect Error    ${Error Message}
    ...    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}
    Log    Issue #AM57: Even read only fields return successful update on HW    level=WARN
    Run Keyword If    '${DCS}'=='${FALSE}'
    ...    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 NetMask
    [Documentation]    Modifies ICM IPV4 Netmask
    # "NetMask": "255.255.255.0",
    ${fields}=    Create Dictionary    NetMask=0.0.0.0
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 NTP
    [Documentation]    Modifies ICM IPV4 NTP
    # Should be a valid IP address
    # "DNS": [ { "IpAddress": "0.0.0.0" } ],
    ${IpAddress}=    Create Dictionary    IpAddress=123.255.255.255
    ${NTP}=    Create List    ${IpAddress}
    # Set ICM Configuration
    ${fields}=    Create Dictionary    NTP=${NTP}
    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv4 NTPMax
    [Documentation]    Modifies ICM IPV4 NTPMax
    ${fields}=    Create Dictionary    NTPMax=10
    # Error message is received due to the empty response when attempting to modify a read only setting
    Run Keyword If    '${DCS}'=='${TRUE}'
    ...    Run Keyword and Expect Error    ${Error Message}
    ...    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}
    Log    Issue #AM57: Even read only fields return successful update on HW    level=WARN
    Run Keyword If    '${DCS}'=='${FALSE}'
    ...    Set and Update Expected Configuration    IPv4NetworkConfiguration    ${fields}

Modify ICM IPv6 AddressSource
    [Documentation]    Modifies ICM IPV6 Address Source
    # "AddressSource": null,
    ${fields}=    Create Dictionary    AddressSource=abcd
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 Address
    [Documentation]    Modifies ICM IPV6 Address
    # "Address": {
    #                   "IpAddress": "::",
    #                   "PrefixLength": 128,
    #                   "AddressSource": "Static"   # DCS ONLY
    # },
    ${PrefixLength}=    Convert To Integer    128
    ${Address}=     Create Dictionary    IpAddress=::
    ...    PrefixLength=${PrefixLength}
    Run Keyword If    '${DCS}'=='${True}'
    ...    Set To Dictionary    ${Address}    AddressSource    Static
    ${fields}=    Create Dictionary    Address=${Address}
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 DNS
    [Documentation]    Modifies ICM IPV6 DNS
    # "DNS": [
    #                   {
    #                   "IpAddress": "::",
    #                   "PrefixLength": 128
    #                   }
    # ],
    ${PrefixLength}=    Convert To Integer    128
    ${Address}=    Create Dictionary    IpAddress=::
    ...    PrefixLength=${PrefixLength}
    ${DNS}=    Create List    ${Address}
    ${fields}=    Create Dictionary    DNS=${DNS}
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 DNSMax
    [Documentation]    Modifies ICM IPV6 DNSMax
    # "DNSMax": 4,
    # DNSMax is a read only variable
    ${fields}=    Create Dictionary    DNSMax=10
    # Error message is received due to the empty response when attempting to modify a read only setting
    Run Keyword If    '${DCS}'=='${TRUE}'
    ...    Run Keyword and Expect Error    ${Error Message}
    ...    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}
    Log    Issue #AM57: Even read only fields return successful update on HW    level=WARN
    Run Keyword If    '${DCS}'=='${FALSE}'
    ...    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 Gateway
    [Documentation]    Modifies ICM IPV6 Gateway
    # "Gateway": "::",
    ${fields}=    Create Dictionary    Gateway=abc::
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 NTP
    [Documentation]    Modifies ICM IPV6 NTP
    # "NTP": [
    #                   {
    #                   "IpAddress": "::",
    #                   "PrefixLength": 128
    #                   }
    # ],
    ${PrefixLength}=    Convert To Integer    128
    ${IpAddress}=    Create Dictionary    IpAddress=::
    ...    PrefixLength=${PrefixLength}
    ${NTP}=    Create List    ${IpAddress}
    ${fields}=    Create Dictionary    NTP=${NTP}
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 NTPMax
    [Documentation]    Modifies ICM IPV6 NTPMax
    # "NTPMax": 4,
    # NTPMax is a read only variable
    ${NTPMax}=    Convert To Integer    10
    ${fields}=    Create Dictionary    NTPMax=${NTPMax}
    # Error message is received due to the empty response when attempting to modify a read only setting
    Run Keyword If    '${DCS}'=='${TRUE}'
    ...    Run Keyword and Expect Error    ${Error Message}
    ...    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}
    Log    Issue #AM57: Even read only fields return successful update on HW    level=WARN
    Run Keyword If    '${DCS}'=='${FALSE}'
    ...    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 LinkLocalAddress
    [Documentation]    Modifies ICM IPV6 LinkLocalAddress
    # "LinkLocalAddress": "::",
    ${fields}=    Create Dictionary    LinkLocalAddress=abc::
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM IPv6 Disable
    [Documentation]    Disable ICM IPV6
    # "Disable": {
    #               "DHCPv6": false,
    #               "SLAAC": false,
    #               "StaticIPv6": false
    # }
    ${Disabled}=    Create Dictionary    DHCPv6=${TRUE}
    ...    SLAAC=${TRUE}
    ...    StaticIPv6=${FALSE}
    ${fields}=    Create Dictionary    Disable    ${Disabled}
    Set and Update Expected Configuration    IPv6NetworkConfiguration    ${fields}

Modify ICM ClientAccess UserName
    [Documentation]    Modifies ICM Client Access UserName
    #        "ClientAccessCredentials": {
    #        "Password": "Password", 
    #        "UserName": "Administrator"
    #    },
    ${fields}=    Create Dictionary    UserName=myUser
    Set and Update Expected Configuration    ClientAccessCredentials    ${fields}

Modify ICM ClientAccess Password
    [Documentation]    Modifies ICM Client Access Password
    #        "ClientAccessCredentials": {
    #        "Password": "Password", 
    #        "UserName": "Administrator"
    #    },
    ${fields}=    Create Dictionary    Password=myPass
    Set and Update Expected Configuration    ClientAccessCredentials    ${fields}

#-----------------------------------------------------------------------
# SETUP/CLEANUP KEYWORDS
#-----------------------------------------------------------------------
Get Initial ICM Configuration
    [Documentation]    Keyword to retrieve Initial ICM Configuration
    ${auth}=    Get Trusted Token
    ${session_id}=    Fusion Api Login Pem    ${FUSION_IP}    ${creds}    ${auth}
    # Determine Configuration for Enclosure
    Set Suite Variable    ${ICM Configs}    ${ICM Configs}
    # Get ICM Configuration information from HAL
    ${Response}=    Get ICM Configuration    ${Bay}
    ${Result}=    Get From Dictionary    ${Response}    OperationResult
    # Verify Results are not None
    : FOR    ${config}    IN    @{ICM Configs} 
    \    ${Config Attributes}=    Get From Dictionary    ${Result}    ${config}
    \    Should Not Be Equal As Strings    ${Config Attributes}    None    msg=No ${config} found on ICM ${Bay}
    # Save Intial configuration for cleanup
    ${Initial ICM Configuration}=    Evaluate    copy.deepcopy(${Result})    copy
    Set Suite Variable    ${Initial ICM Configuration}    ${Initial ICM Configuration}
    # Save Current configuration as Expected for verifications
    ${Expected ICM Configuration}=    Evaluate    copy.deepcopy(${Initial ICM Configuration})    copy
    Set Suite Variable    ${Expected ICM Configuration}    ${Expected ICM Configuration}

Restore Initial ICM Configuration
    [Documentation]    Keyword to Restore Initial ICM Configuration
    # Make a deep copy of the initial configuration to be used to restore initial configuration.
    ${Restore ICM Configuration}=    Evaluate    copy.deepcopy(${Initial ICM Configuration})    copy
    ${FormattedDictionary}=    Evaluate    json.dumps(${Restore ICM Configuration}, indent=${4}, sort_keys=${True})    json
    Log    ${FormattedDictionary}
    # Remove read only attributes from Restore Dictionary.
    Run Keyword If    '${DCS}'=='${True}'    Remove Readonly attributes
    # Restore Configuration
    ${Response}=    Set ICM Configuration    ${Bay}    ${Restore ICM Configuration}
    # Get ICM Configuration information from HAL
    ${Response}=    Get ICM Configuration    ${Bay}
    ${Current ICM Configuration}=    Get From Dictionary    ${Response}    OperationResult
    # Verify Current Configuration is the Initial Config
    Dictionaries Should Be Equal    ${Current ICM Configuration}    ${Initial ICM Configuration}
    ...    msg=Current Configuration does not match Initial configuration on ICM ${Bay}.

Remove Readonly attributes
    [Documentation]    Removes read only attribtues from Restore Dictionary.
    # Remove unmodifyable fields for IPv4NetworkConfiguration
    ${Ipv4NetworkConfig}=    Get From Dictionary    ${Restore ICM Configuration}    IPv4NetworkConfiguration
    Remove From Dictionary    ${Ipv4NetworkConfig}    DNSMax    NTPMax
    Set To Dictionary    ${Restore ICM Configuration}    IPv4NetworkConfiguration    ${Ipv4NetworkConfig}
    # Remove unmodifyable fields for IPv6NetworkConfiguration
    ${Ipv6NetworkConfig}=    Get From Dictionary    ${Restore ICM Configuration}    IPv6NetworkConfiguration
    Remove From Dictionary    ${Ipv6NetworkConfig}    DNSMax    NTPMax
    Set To Dictionary    ${Restore ICM Configuration}    IPv6NetworkConfiguration    ${Ipv6NetworkConfig}

#-----------------------------------------------------------------------
# RESOURCE KEYWORDS
#-----------------------------------------------------------------------
Select Random Populated ICM Bay
    [Documentation]    Select Random Interconnect Bay Number and set as Suite variable.
    # Interconnect Bay Number is selected based on INTERCONNECT_DATA information in variables.py
    ${Bay}=    Select Random Populated Interconnect Bay
    Log To Console    Testing on Interconnect in Bay ${Bay}
    Set Suite Variable    ${Bay}    ${Bay}

Get ICM Configuration
    [Documentation]     Returns ICM Network Configuration information from HAL Webapp
    ...                 Example:
    ...                 | ${Response}= | Get ICM Configuration | 1 |
    [Arguments]         ${Bay}
    # Build Parameters
    ${Bay}=    Convert To Integer    ${Bay}
    ${Parameters}=    Create Dictionary    BayNumber=${Bay}    Properties=${ICM Configs}
    # Get ICM Configuration
    ${Response}=    HAL API Perform Post Action    ${FUSION_IP}    IcmManagerGetConfig    ${Parameters}
    ${status}=    Get From Dictionary    ${Response}    CallStatus
    ${FormattedDictionary}=    Evaluate    json.dumps(${Response}, indent=${4}, sort_keys=${True})    json
    Log    ${FormattedDictionary}
    Should Be Equal as Strings    ${Status}    SUCCESS
    ...    msg=Failed to get/set Icm Configuration information.
    [Return]    ${Response}

Set and Update Expected Configuration
    [Documentation]    Keyword to set and update Expected Configuration
    [Arguments]    ${ConfigType}    ${fields}
    # Set ICM Configuration
    ${Properties}=    Create Dictionary    ${ConfigType}=${fields}
    Set ICM Configuration    ${Bay}    ${Properties}
    # Update Expected Configuration
    ${config data}=    Get From Dictionary    ${Expected ICM Configuration}    ${ConfigType}
    ${items}=    Get Dictionary Items    ${fields}
    Set To Dictionary    ${config data}    ${items[0]}    ${items[1]}
    Set To Dictionary    ${Expected ICM Configuration}    ${ConfigType}    ${config data}
    # DEBUG
    ${FormattedDictionary}=    Evaluate    json.dumps(${Initial ICM Configuration}, indent=${4}, sort_keys=${True})    json
    Log    ${FormattedDictionary}

Set ICM Configuration
    [Documentation]    Keyword to set ICM Configuration
    ...                 Example:
    ...                 | ${Response}= | Set ICM Configuration | 1 | {"IPv4NetworkConfiguration":{"DHCP":true}} |
    [Arguments]         ${Bay}      ${Properties}
    # Build Parameters
    ${Bay}=    Convert To Integer    ${Bay}
    ${Parameters}=    Create Dictionary    BayNumber=${Bay}    Properties=${Properties}
    # Get ICM Configuration
    ${Response}=    HAL API Perform Post Action    ${FUSION_IP}    IcmManagerSetConfig    ${Parameters}
    ${status}=    Get From Dictionary    ${Response}    CallStatus
    ${FormattedDictionary}=    Evaluate    json.dumps(${Response}, indent=${4}, sort_keys=${True})    json
    Log    ${FormattedDictionary}
    Should Be Equal as Strings    ${Status}    SUCCESS
    ...    msg=Failed to get/set Icm Configuration information.
    [Return]    ${Response}

Verify Reset via iLO Log
    [Documentation]   Keyword verifies reset via iLO Log
    [Arguments]    ${curtime}
    @{log}=    iLO Get iLO Event log    hard reset
    ${logtime}=    Get from Dictionary    @{log}[-1]    last_update
    ${logtime}=    evaluate    time.mktime(time.strptime("${logtime}","%m/%d/%Y %H:%M"))    time
    ${delta}=    evaluate    abs(${curtime}-${logtime})

Verify ICM Reset
    [Documentation]   Keyword verifies ICM Reset
    [Arguments]    ${action}    ${bayno}
    HAL Action    ${action}    ${bayno}
    Set Client Configuration    timeout=360
    Write    ssh Administrator@${fusion_ip}
    ${response}=    Read Until Regexp    (yes|password)
    ${line}=    Get Line    ${response.strip()}    -1
    ${tmp}=    Get Substring    ${line.strip()}    -3
    Run Keyword If    '${tmp}'=='yes'    Write    yes
    Run Keyword If    '${tmp}'=='yes'    Read Until    password:
    Write    ${CLI_PASSWORD}
    Sleep    9    For login to complete
    Write    console-view
    Read Until    console-view>
    Write    connect interconnect ${enc_serial_number} ${bayno} force
    Write    ${Empty}
    ${data}=    Read Until    Starting...
    ${data}=    Read Until    System is starting...
    Should Contain X Times    ${data}    Loading file flash    3

Verify Reset via EM Log
    [Documentation]   Keyword verifies EM Reset via Log
    [Arguments]    ${action}    ${bayno}
    #Login to EM from CIM via SSH
    Write    ssh root@${em_ip}%${FUSION_NIC}
    ${response}=    Read Until Regexp    root\@em.*#|continue connecting
    ${status}    ${match}=    Run Keyword and Ignore Error
    ...    Should match regexp    ${response}    continue connecting
    Run Keyword if    "${status}" == "PASS"
    ...    Write    yes
    Run Keyword if    "${status}" == "PASS"
    ...    Read Until Regexp    root\@em.*#
    Write    /usr/bin/tail -f /var/log/applications
    Set Client Configuration	      timeout=16 seconds
    # HAL is here to capture log in time
    HAL Action    ${action}    ${bayno}
    ${log}=    Read Until    EFUSE RESET
    ${log}=    Read Until    DeviceInit
    ${Ctl_C}=    Evaluate    chr(int(3))
    Write    ${Ctl_C}
    ${response}=    Read Until Regexp    root\\@em.*#
    Write    exit
    ${log}=    Read Until Regexp    \\[root\\@.*\\]#

Initialize
    [Documentation]    Keyword Initializes for get blade fru suite
    [Arguments]    ${filename}
    Login to Fusion Via REST
    Load Resource    ${filename}

Load Resource
    [Documentation]    Keyword to load JSON Files
    [Arguments]    ${filename}
    ${output}=    OperatingSystem.Get File    ../data/${filename}
    ${JSON}=    Evaluate    json.loads('''${output}''')    json
    Log    ${JSON}
    Set Suite Variable    ${JSON}    ${JSON}

Check Response
    [Documentation]    Keyword to Check Response
    [Arguments]    ${Response}
    Log     ${Response}
    # Verify Return Code
    ${Status}=    Get From Dictionary    ${Response}    status_code
    Should be Equal As Strings    ${Status}    200    msg=Failed to perform Webapp REST call
    ${Error}=    Get From Dictionary    ${Response}    CallStatus
    Should be Equal As Strings    ${Error}    ERROR     msg=Failed to perform Webapp REST call

#-----------------------------------------------------------------------
# MODEL BASED TESTING KEYWORDS
#-----------------------------------------------------------------------
ICM 1 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 1
    Verify Interconnect Bay Power State    1    ${ON}

ICM 2 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 2
    Verify Interconnect Bay Power State    2    ${ON}

ICM 3 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 3
    Verify Interconnect Bay Power State    3    ${ON}

ICM 4 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 4
    Verify Interconnect Bay Power State    4    ${ON}

ICM 5 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 5
    Verify Interconnect Bay Power State    5    ${ON}

ICM 6 Powered ON
    [Documentation]    Verifies Interconnect Power state for ICM 6
    Verify Interconnect Bay Power State    6    ${ON}

ICM 1 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 1
    Verify Interconnect Bay Power State    1    ${OFF}

ICM 2 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 2
    Verify Interconnect Bay Power State    2    ${OFF}

ICM 3 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 3
    Verify Interconnect Bay Power State    3    ${OFF}

ICM 4 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 4
    Verify Interconnect Bay Power State    4    ${OFF}

ICM 5 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 5
    Verify Interconnect Bay Power State    5    ${OFF}

ICM 6 Powered OFF
    [Documentation]    Verifies Interconnect Powered off state for ICM 6
    Verify Interconnect Bay Power State    6    ${OFF}

Power Off ICM 1 via HAL
    [Documentation]    Turns off ICM 1
    Set Interconnect Bay Power State    1    ${OFF}

Power Off ICM 2 via HAL
    [Documentation]    Turns off ICM 2
    Set Interconnect Bay Power State    2    ${OFF}

Power Off ICM 3 via HAL
    [Documentation]    Turns off ICM 3
    Set Interconnect Bay Power State    3    ${OFF}

Power Off ICM 4 via HAL
    [Documentation]    Turns off ICM 4
    Set Interconnect Bay Power State    4    ${OFF}

Power Off ICM 5 via HAL
    [Documentation]    Turns off ICM 5
    Set Interconnect Bay Power State    5    ${OFF}

Power Off ICM 6 via HAL
    [Documentation]    Turns off ICM 1
    Set Interconnect Bay Power State    6    ${OFF}

Power On ICM 1 via HAL
    [Documentation]    Turns on ICM 1
    Set Interconnect Bay Power State    1    ${ON}

Power On ICM 2 via HAL
    [Documentation]    Turns on ICM 2
    Set Interconnect Bay Power State    2    ${ON}

Power On ICM 3 via HAL
    [Documentation]    Turns on ICM 3
    Set Interconnect Bay Power State    3    ${ON}

Power On ICM 4 via HAL
    [Documentation]    Turns on ICM 4
    Set Interconnect Bay Power State    4    ${ON}

Power On ICM 5 via HAL
    [Documentation]    Turns on ICM 5
    Set Interconnect Bay Power State    5    ${ON}

Power On ICM 6 via HAL
    [Documentation]    Turns on ICM 6
    Set Interconnect Bay Power State    6    ${ON}

#-----------------------------------------------------------------------
# HAL API ICM Power KEYWORDS
#-----------------------------------------------------------------------
Get ICM Power State via HAL API
    [Documentation]     Returns Power Status for given ICM bay
    [Arguments]         ${Bay}
    ${auth}=    Get Trusted Token
    ${session_id}=    Fusion Api Login Pem    ${FUSION_IP}    ${creds}    ${auth}
    # Build Parameters
    ${rc}    ${Bay}=    Run Keyword and Ignore Error    Convert To Integer    ${Bay}
    ${Parameters}=    Create Dictionary    BayNumber=${Bay}
    Log Dictionary    ${Parameters}
    # Get ICM Power State
    # Issue #AM63: Updated HAL Actions do not work on DCS Sprint 59 yet. Continue using old action names.
    ${HAL Action}=    Set Variable If    '${DCS}'=='${True}'    ${Deprecated GetPowerStateAction}
    ...    ${GetPowerStateAction}
    ${Response}=    HAL API Perform Post Action    ${FUSION IP}    ${HAL Action}
    ...    ${Parameters}
    # Verify Return Code
    Dictionary Should Contain Key    ${Response}    status_code    msg=HAL API call has failed (No status_code).
    ${status_code}=    Get From Dictionary    ${Response}    status_code
    Should be Equal As Strings    ${status_code}    200    msg=Failed to perform REST call
    # Verify Call Status
    ${CallStatus}=    Get From Dictionary    ${Response}    CallStatus
    Should be Equal As Strings    ${CallStatus}    SUCCESS    msg=HAL API Rest Call Failed.
    # Verify No Errors
    Dictionary Should Not Contain Key    ${Response}    Error
    ...    msg=Error found while executing HAL IcmPowerStateStatus Rest Call.
    # Parse Power state from Response
    ${Response}=    Get From Dictionary    ${Response}    OperationResult
    Dictionary Should Contain Key    ${Response}    PowerState
    ${Power State}=    Get From Dictionary    ${Response}    PowerState
    [Return]    ${Power State}

Verify Interconnect Bay Power State
    [Documentation]    Verify ICM Power State of specified Bay
    [Arguments]    ${Bay}    ${State}
    # TODO: Run Get Power on Empty Bay and expect Error
    # Ignore and Pass if Empty Bay
    ${BayNo}=    Convert To Integer    ${Bay}
    ${EmptyBay}=    Run Keyword and Return Status   List Should Not Contain value   ${PopulatedBays}    ${BayNo}
    ...    msg=Bay ${Bay} is an Empty Bay.
    Return From Keyword If    '${EmptyBay}'=='${True}'
    # Get Power State
    ${Power State}=    Get ICM Power State via HAL API    ${Bay}
    # Verify PowerState is as expected
    Should be Equal as Strings    ${Power State}    ${State}    msg=Power State on ICM is not "${State}".

Set ICM Power State via HAL
    [Documentation]     Sets the ICM Power State based on parameters specified
    [Arguments]    ${Bay}    ${State}
    # Build Parameters
    ${Bay Int}=    Run Keyword and Return Status    Convert To Integer    ${Bay}
    ${Bay}=    Run Keyword If    '${Bay Int}'=='${True}'    Convert To Integer    ${Bay}
    ...    ELSE    Set Test Variable    \${Bay}
    ${Parameters}=    Create Dictionary    BayNumber=${Bay}    PowerState=${State}
    Log Dictionary    ${Parameters}
    # Set ICM Power State
    # Issue #AM63: Updated HAL Actions do not work on DCS Sprint 59 yet. Continue using old action names.
    ${HAL Action}=    Set Variable If    '${DCS}'=='${True}'    ${Deprecated SetPowerStateAction}
    ...    ${SetPowerStateAction}
    ${Response}=    HAL API Perform Post Action    ${FUSION IP}    ${HAL Action}
    ...    ${Parameters}
    # Verify Return Code
    Dictionary Should Contain Key    ${Response}    status_code    msg=HAL API call has failed (No status_code).
    ${status_code}=    Get From Dictionary     ${Response}     status_code
    Should be Equal As Strings    ${status_code}    200    msg=Failed to perform REST call
    # Verify Call Status
    ${CallStatus}=    Get From Dictionary    ${Response}    CallStatus
    Should be Equal As Strings    ${CallStatus}    SUCCESS    msg=HAL API Rest Call Failed.
    # Verify No Errors
    Dictionary Should Not Contain Key    ${Response}    Error
    ...    msg=Error found while executing HAL IcmPowerStateControl Rest Call.
    [Return]    ${Response}

Set Interconnect Bay Power State
    [Documentation]    Sets the ICM Power State if ICM Exists in bay.
    [Arguments]    ${Bay}    ${State}
    # TODO: Run Set Power on Empty Bay and expect Error.
    # Ignore and Pass if Empty Bay
    ${BayNo}=    Convert To Integer    ${Bay}
    ${EmptyBay}=    Run Keyword and Return Status    List Should Not Contain value    ${PopulatedBays}    ${BayNo}
    ...    msg=Bay ${Bay} is an Empty Bay.
    Return From Keyword If    '${EmptyBay}'=='${True}'
    ${Response}=    Set ICM Power State via HAL    ${Bay}    ${State}

#-----------------------------------------------------------------------
# ICM Configuration Resource Keywords
#-----------------------------------------------------------------------
Save Initial ICM Power Status
    [Documentation]     Store initial ICM Power state for each bay
    # Get Available Interconnects
    ${RIS InterconnectBays Resource}=    Set Variable If    '${DCS}'=='${True}'    /rest/v1/Chassis/1/InterconnectBays
    ...    /rest/v1/InterconnectBays
    ${PopulatedBays}    ${EmptyBays}=   Find Filled Bays    ${RIS InterconnectBays Resource}
    # Set Suite Variables
    Set Suite Variable    ${PopulatedBays}    ${PopulatedBays}
    Set Suite Variable    ${EmptyBays}    ${EmptyBays}
    # Save Power Status of each Interconnect
    ${Initial PowerStates}=    Create Dictionary
    : For                   ${Bay}              In                          @{PopulatedBays}
    \                       # Get Power State
    \                       ${PowerState}=      Get ICM Power State via HAL API         ${Bay}
    \                       Set To Dictionary   ${Initial PowerStates}      ${Bay}      ${PowerState}
    Set Suite Variable      ${Initial PowerStates}                          ${Initial PowerStates}
    ${FormattedDictionary}      Evaluate    json.dumps(${Initial PowerStates}, indent=${4}, sort_keys=${True})      json
    Log                         ${FormattedDictionary}

Initialize ICM Power State for Model
    [Documentation]     Set ICM Power State to on for each of the ICM Bays to match initial state of the Model.
    # Restore Power Status of each Interconnect
    : For               ${Bay}                  In          @{PopulatedBays}
    \                   # Get Current Power State of Bay
    \                   ${PowerState}=          Get ICM Power State via HAL API     ${Bay}
    \                   # If Powered On, Do Nothing
    \                   Continue For Loop If    '${PowerState}'=='${ON}'
    \                   # If Powered Off, Power On ICM
    \                   Set Interconnect Bay Power State    ${Bay}                  ${ON}

Restore Initial ICM Power Status
    [Documentation]             Restore ICM Power States for each ICM bay based on Initial stored states.
    # Display Initial power state
    ${FormattedDictionary}=    Evaluate    json.dumps(${Initial PowerStates}, indent=${4}, sort_keys=${True})      json
    Log    ${FormattedDictionary}

    # Restore Power Status of each Interconnect
    : For   ${Bay}                      In                      @{PopulatedBays}
    \       # Get Initial Power State of Bay
    \       ${Expected PowerState}=    Get From Dictionary     ${Initial Power States}     ${Bay}
    \       # Set Power State
    \       Set Interconnect Bay Power State    ${Bay}    ${Expected PowerState}
    \       # Get Power State and verify
    \       ${PowerState}=    Get ICM Power State via HAL API    ${Bay}
    \       Should be Equal as Strings    ${PowerState}    ${Expected PowerState}
    \       ...    msg=Failed to restore ICM ${Bay} Power State to '${Expected PowerState}'.

Test Invalid ICM Bay Contents
    [Documentation]             Test to validate Invalid ICm Bay Contents
    [Arguments]    ${Bay}
    ${ParamDict}=    Create Dictionary    BayNumber=${BAY}
    ${Response}=    HAL API Perform POST Action    ${FUSION_IP}    IcmManagerUrlRead    ${ParamDict}
    ${CallStatus}=    Find Errors In HAPI Response    ICM Manager ${Bay Number}    ${Response}    performAction    IcmManagerUrlRead    ${ParamDict}
    Run Keyword And Expect Error    *
    ...    Fail On Any Errors In HAPI Response    ${CallStatus}

Diff JSON Structures
    [Documentation]             Keyword to validate diff in the JSON structure
    [Arguments]    ${A}    ${B}
    ${Diffs}=    Evaluate    datadiff.diff(${A},${B}).stringify()    datadiff
    ${DiffLines}=    Get Lines Matching RegExp    ${Diffs}    .*[+-]u'.*
    ${Diff}=    Get Line Count    ${DiffLines}
    [Return]    ${Diff}    ${DiffLines}
