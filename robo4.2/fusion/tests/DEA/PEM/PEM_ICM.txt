*** Settings ***
Documentation     Testing ALL PEM COMMANDS that are applicable to ICM Manager
...    = Usage =
...    | pybot | -L DEBUG | APPLIANCE_IP:<fusion_ipv4> | PEM_ICM.txt | 
...    = Variables =
...    | GIT_REPO_ROOT | Required; Repo root path if NOT defined in environment variable|
...    | RESOURCE_ROOT | Optional: Resource files path if NOT defined in environment variable|
...    | VARIABLE_ROOT | Optional: Variable files path if NOT defined in environment variable|
...    | APPLIANCE IP     | Required; OneView IP address under test | 

Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Library           OperatingSystem
Library           MgmtFWLibrary
Library           loginPEMClass
Library           json
Library           String
Library           Collections

Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/dea_variables.py
Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/data_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST

*** Variables ***
${bad_bay_num}    99

*** Test Cases ***
TC 01: PEM ICM Manager UID State: Test PEM ICM Manager UID Status On Each ICM Bay
    [Documentation]    Validate UID State of Each ICM Bay using PEM Action
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000
    ${icm_list}=    Get ICM Bay List
    Should Not Be Empty    ${icm_list}    msg=should contain icm inserted in the enclosure
    :FOR    ${bay_number}    IN    @{icm_list}
    # collect icm bay uid state and compare it with uid state obtained from PEM Action
    \    ${icm_bay}=    Convert To Integer    ${bay_number}
    \    ${resp}=    Get ICM Info    ${icm_bay}
    \    ${uid_state}=    Get From Dictionary    ${resp}    uidState
    # perform PEM action IcmManagerUidState and collect uid state of icm bay
    \    ${response}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    ${uid_status_from_pem}=    Set Variable    ${response["OperationResult"]["UidState"]}
    \    Should Be Equal As Strings    ${uid_status_from_pem}    ${uid_state}

TC 02: PEM ICM Manager UID State Negative: Test PEM ICM Manager UID Status On Invalid ICM Bay
    [Documentation]    Negative Test for checking UID State on Invalid ICM Bay
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify ICM Manager UID State on Invalid Bay Number and validate for ERROR Status
    ${response}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 03: PEM ICM Manager UID Control: Test PEM ICM Manager UID Control On Each ICM Bay
    [Documentation]    Validate ICM Manager UID Control of Each ICM Bay using PEM Action
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${icm_list}=    Get ICM Bay List
    Should Not Be Empty    ${icm_list}    msg=should contain icm inserted in the enclosure
    :FOR    ${bay_number}    IN    @{icm_list}
    \    ${icm_bay}=    Convert To Integer    ${bay_number}
    # record uid state of icm bay before issuing pem commands, to restore back after test
    \    ${resp}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}
    \    ${uid_status_before_test}=    Set Variable    ${resp["OperationResult"]["UidState"]}
    # set icm bay UID to Off state and validate command success and uidstate set to Off state
    \    ${response_off}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    Off
    \    Should Be Equal As Strings    ${response_off["CallStatus"]}    SUCCESS
    \    ${resp_off}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}
    \    ${uid_status_off_from_pem}=    Set Variable    ${resp_off["OperationResult"]["UidState"]}
    \    Should Be Equal As Strings    ${uid_status_off_from_pem}    Off
    # set icm bay UID to ON state and validate command success and uidstate set to ON state
    \    ${response_on}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    On
    \    Should Be Equal As Strings    ${response_on["CallStatus"]}    SUCCESS
    \    ${resp_on}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}
    \    ${uid_status_on_from_pem}=    Set Variable    ${resp_on["OperationResult"]["UidState"]}
    \    Should Be Equal As Strings    ${uid_status_on_from_pem}    On
    # set icm bay UID to BLINK state and validate command success and uidstate set to Blink state
    \    ${response_blink}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    Blink
    \    Should Be Equal As Strings    ${response_blink["CallStatus"]}    SUCCESS
    \    ${resp_blink}=    PEM Action To Get Icm Manager UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}
    \    ${uid_status_blink_from_pem}=    Set Variable    ${resp_blink["OperationResult"]["UidState"]}
    \    Should Be Equal As Strings    ${uid_status_blink_from_pem}    Blink
    # restore back icm bay to original uidstate
    \    ${response}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    ${uid_status_before_test}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS

TC 04: PEM ICM Manager UID Control Negative: Test PEM ICM Manager UID Control On Invalid Bay
    [Documentation]    Validate ICM Manager UID Control of Invalid bay number using PEM Action
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify IcmManagerUidControl ON PEM action on Invalid Bay and validate for ERROR status
    ${response_on}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    On
    Should Be Equal As Strings    ${response_on["CallStatus"]}    ERROR

    # Verify IcmManagerUidControl OFF PEM action on Invalid Bay and validate for ERROR status
    ${response_off}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    Off
    Should Be Equal As Strings    ${response_off["CallStatus"]}    ERROR

    # Verify IcmManagerUidControl Blink PEM action on Invalid Bay and validate for ERROR status
    ${response_blink}=    PEM Action To Set Icm Manager UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    Blink
    Should Be Equal As Strings    ${response_blink["CallStatus"]}    ERROR

TC 05: PEM ICM Bay Efuse: Test PEM Action ICM Bay Efuse ON/OFF On Populated ICM Bay
    [Documentation]    Validate PEM Action IcmBayEfuse OFF/ON On listed ICM Bay on the Enclosure
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${icm_list}=    Get ICM Bay List
    Should Not Be Empty    ${icm_list}    msg=should contain ICM inserted in the enlcosure
    :FOR    ${bay_number}    IN    @{icm_list}
    # record icm state before icm efuse
    \    ${icm_bay}=    Convert To Integer    ${bay_number}
    \    ${info}=    Get ICM Info    ${icm_bay}
    \    ${state_icm}=    Set Variable    ${info["state"]}
    #\    ${icm_bay}=    Convert To Integer    ${bay_number}
    # execute Efuse on icm bay and validate icm bay presence
    \    ${response}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    EFuseOn
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Sleep    10
    \    ${response}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    EFuseOff
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Wait Until ICM To Reach Present State    300    10    ${icm_bay}    ${state_icm}
    \    ${icm_list_after_efuse_off}=    Get ICM Bay List
    \    Should Contain    ${icm_list_after_efuse_off}    ${bay_number}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    EFuseOff    AND    Sleep    300

TC 06: PEM ICM Bay Efuse: Test PEM Action ICM Bay Efuse Reset On Populated ICM Bay
    [Documentation]    Validate PEM Action IcmBayEfuse Reset On listed ICM Bay on the Enclosure
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${icm_list}=    Get ICM Bay List
    Should Not Be Empty    ${icm_list}    msg=should contain ICM inserted in the enlcosure
    :FOR    ${bay_number}    IN    @{icm_list}
    # record icm state before icm efuse
    \    ${icm_bay}=    Convert To Integer    ${bay_number}
    \    ${info}=    Get ICM Info    ${icm_bay}
    \    ${state_icm}=    Set Variable    ${info["state"]}
    # perform Efuse ICM Bay reset and validate icm bay presence
    \    ${response}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}    EFuseReset
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Sleep    10
    \    Wait Until ICM To Reach Present State    300    10    ${icm_bay}    ${state_icm}
    \    ${icm_list_after_efuse}=    Get ICM Bay List
    \    Should Contain    ${icm_list_after_efuse}    ${bay_number}

TC 07: PEM ICM Bay Efuse Negative: Test PEM Action ICM Bay Efuse On Invalid ICM Bay
    [Documentation]    Negative Test Case for PEM Action ICM Bay Efuse On Invalid Bay Number
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # verify IcmBayEfuse Reset PEM Action on Invalid Bay and validate for ERROR status
    ${response_reset}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseReset
    Should Be Equal As Strings    ${response_reset["CallStatus"]}    ERROR

    # verify IcmBayEfuse ON PEM Action on Invalid Bay and validate for ERROR status
    ${response_on}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOn
    Should Be Equal As Strings    ${response_on["CallStatus"]}    ERROR

    # verify IcmBayEfuse OFF PEM Action on Invalid Bay and validate for ERROR status
    ${response_off}=    PEM Action To EFuse Icm Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOff
    Should Be Equal As Strings    ${response_off["CallStatus"]}    ERROR

TC 08: PEM ICM Manager Read Canmic Blocks: Test PEM Action ICM Manager Read Canmic Blocks
    [Documentation]    Validate PEM Action ICM manager Read Canmic Blocks on Each Bay
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${icm_list}=    Get ICM Bay List
    Should Not Be Empty    ${icm_list}    msg=should contain ICM inserted in the enlcosure
    :FOR    ${bay_number}    IN    @{icm_list}
    \    ${icm_bay}=    Convert To Integer    ${bay_number}
    # perform  pem action icm manager read canmic blocks on each icm bay
    \    PEM Action To Read Canmic Blocks From ICM Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${icm_bay}

TC 09: PEM ICM Manager Read Canmic Blocks Negative: Test PEM Action ICM Manager Read Canmic Blocks On Invalid Bay
    [Documentation]    Validate PEM Action ICM manager Read Canmic Blocks on Invalid Bay
    [Tags]    Automated   ICM    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${block_list}=    Create List    ${1}
    # verify IcmManagerReadCanmicBlocks PEM Action on Invalid Bay and validate for ERROR status
    ${response}=    PEM Action To Icm Manager Read Canmic Blocks    ${auth}    ${APPLIANCE_IP}    ${ENC_SERIAL_NUMBER}    ${bad_bay_num}    ${block_list}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR
