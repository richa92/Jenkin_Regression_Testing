*** Settings ***
Documentation     Testing ALL PEM COMMANDS that are applicable to Power Supply Module
...    = Usage =
...    | pybot | -L DEBUG | APPLIANCE_IP:<fusion_ipv4> | PEM_Power_Supply.txt | 
...    = Variables =
...    | GIT_REPO_ROOT | Required; Repo root path if NOT defined in environment variable|
...    | RESOURCE_ROOT | Optional: Resource files path if NOT defined in environment variable|
...    | VARIABLE_ROOT | Optional: Variable files path if NOT defined in environment variable|
...    | APPLIANCE IP     | Required; OneView IP address under test | 

Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Library           OperatingSystem
Library           MgmtFWLibrary
Library           loginPEMClass
Library           json
Library           String
Library           Collections

Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/dea_variables.py
Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/data_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST

*** Variables ***
${bad_bay_num}    99

*** Test Cases ***
TC 01: PEM Power Supply FRU Read: Test PEM Action Power Supply FRU Read On Power Supply Bays
    [Documentation]    Validate PEM Action PowerSupplyFruRead On Power Supply Bays
    [Tags]    Automated    PS    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Get Power supply list from the enclosure
    ${ps_bay_list}=    Get Current Power Supply List
    Should Not Be Empty    ${ps_bay_list}    msg=should contain Power Supplies inserted in the enclosure
    :FOR    ${ps_bay_number}    IN    @{ps_bay_list}
    \    ${ps_bay}=    Convert To Integer    ${ps_bay_number}
    # Execute PEM Action PowerSupplyFruRead and validate power supply serial number from the FRU Read
    \    ${response}=    PEM Action To Get Power Supply FRU    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${ps_bay}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    ${ps_serial_number_pem}=    Set Variable    ${response["OperationResult"]["Parsed"]["ProductInfo"]["SerialNumber"]}
    \    ${ps_info}=    Get Power Supply Info    ${ps_bay}
    \    ${ps_serial_number}=    Set Variable    ${ps_info["serialNumber"]}
    \    Should Be Equal As Strings    ${ps_serial_number_pem}    ${ps_serial_number}

TC 02: PEM Power Supply FRU Read Negative: Test PEM Action Power Supply FRU Read On Invalid Bay
    [Documentation]    Validate PEM Action PowerSupplyFruRead On Invalid Power supply Bay 
    [Tags]    Automated    PS    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Action Power Supply FRU Read on Invalid Bay and Validate for ERROR Status
    ${response}=    PEM Action To Get Power Supply FRU    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 03: PEM Power Supply Bay Efuse Negative: Test PEM Action Power Supply Bay Efuse On Invalid Bay
    [Documentation]    Negative Test Case for PEM Action PowerSupplyBayEfuse On Invalid Bay Number
    [Tags]    Automated    PS    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Action Efuse Power Supply Reset on Invalid Bay and validate for ERROR status
    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseReset
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

    # Verify Efuse Power Supply ON PEM Action on Invalid Bay and validate for ERROR status
    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOn
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

    # Verify PEM Action Efuse Power Supply OFF on Invalid Bay and validate for ERROR status
    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOff
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 04: PEM Power Supply Bay Efuse: Test PEM Action Power Supply Bay Efuse Reset On Power Supply Bays
    [Documentation]    Test Case for PEM Action PowerSupplyBayEfuse Reset On Power Supply List
    [Tags]    Automated    PS    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Get populated Power Supply Bay List from the Enclosure
    ${ps_bay_list}=    Get Current Power Supply List
    Should Not Be Empty    ${ps_bay_list}    msg=should contain Power Supplies inserted in the enclosure
    # Check for minimum power supplies reqd for redundant power before efuse on power supplies
    ${num_of_ps}=    Get Length    ${ps_bay_list}
    ${resp}=    Fusion Api Get Enclosures
    ${minimum_ps}=    Get From Dictionary    ${resp['members'][0]}    minimumPowerSuppliesForRedundantPowerFeed
    Should Be True    ${num_of_ps} > ${minimum_ps}    msg=ps list should be greater than minimum power supplies for redundancy power
    # Execute Efuse Power Supply Bay PEM Action on each populated Bay and validate bay presence after Efuse
    :FOR    ${ps_bay_number}    IN    @{ps_bay_list}
    \    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${ps_bay_number}    EFuseReset
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Sleep    30
    \    ${ps_bay_list_after_efuse}=    Get Current Power Supply List
    \    Should Contain    ${ps_bay_list_after_efuse}    ${ps_bay_number}

TC 05: PEM Power Supply Bay Efuse: Test Power Supply Bay Efuse ON/OFF On Power Supply List
    [Documentation]    Test Case for PEM Action PowerSupplyBayEfuse ON/OFF On Power Supply List
    [Tags]    Automated    PS    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Get populated Power Supply Bay List from the Enclosure
    ${ps_bay_list}=    Get Current Power Supply List
    Should Not Be Empty    ${ps_bay_list}    msg=should contain Power Supplies inserted in the enclosure
    # Check for minimum power supplies reqd for redundant power before efuse on power supplies
    ${num_of_ps}=    Get Length    ${ps_bay_list}
    ${resp}=    Fusion Api Get Enclosures
    ${minimum_ps}=    Get From Dictionary    ${resp['members'][0]}    minimumPowerSuppliesForRedundantPowerFeed
    Should Be True    ${num_of_ps} > ${minimum_ps}    msg=ps list should be greater than minimum power supplies for redundancy power
    # Execute Efuse Power Supply Bay PEM Action ON and OFF on each populated power supply bay and validate bay presence after Efuse
    :FOR    ${ps_bay_number}    IN    @{ps_bay_list}
    \    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${ps_bay_number}    EFuseOn
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Sleep    10
    \    ${ps_bay_list_after_efuse_on}=    Get Current Power Supply List
    \    Should Not Contain    ${ps_bay_list_after_efuse_on}    ${ps_bay_number}
    \    ${response}=    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${ps_bay_number}    EFuseOff
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    Sleep    30
    \    ${ps_bay_list_after_efuse_off}=    Get Current Power Supply List
    \    Should Contain    ${ps_bay_list_after_efuse_off}    ${ps_bay_number}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    PEM Action To EFuse Power Supply Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${ps_bay_number}    EFuseOff    AND    Sleep    30