*** Settings ***
Documentation     Testing ALL PEM COMMANDS that are applicable to Enclosure
...    = Usage =
...    | pybot | -L DEBUG | APPLIANCE_IP:<fusion_ipv4> | PEM_Enclosure.txt | 
...    = Variables =
...    | GIT_REPO_ROOT | Required; Repo root path if NOT defined in environment variable|
...    | RESOURCE_ROOT | Optional: Resource files path if NOT defined in environment variable|
...    | VARIABLE_ROOT | Optional: Variable files path if NOT defined in environment variable|
...    | APPLIANCE IP     | Required; OneView IP address under test | 

Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Library           OperatingSystem
Library           MgmtFWLibrary
Library           loginPEMClass
Library           json
Library           String
Library           Collections

Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/dea_variables.py
Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/data_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST

*** Test Cases ***
TC 01: PEM Chassis UID Control: Test To Verify Chassis UID Control Using PEM Action
    [Documentation]    Test To Verify ChassisUidControl PEM command for Enclosure and validate the state using ChassisUidState
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # record uid state of chassis before executing pem commands, to restore back after test
    ${resp}=    PEM Action To Get Chassis UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${resp["CallStatus"]}    SUCCESS
    ${uid_status_before_test}=    Set Variable    ${resp["OperationResult"]["UidState"]}

    # set chassis UID to ON state, validate command success and uid set to ON state
    ${resp_on}=    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    On
    Should Be Equal As Strings    ${resp_on["CallStatus"]}    SUCCESS
    ${uid_status_on_pem}=    PEM Action To Get Chassis UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${uid_status_on_pem["CallStatus"]}    SUCCESS
    Should Be Equal As Strings    ${uid_status_on_pem["OperationResult"]["UidState"]}    On

    # set chassis UID to OFF state, validate command success and uid set to OFF state
    ${resp_off}=    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    Off
    Should Be Equal As Strings    ${resp_off["CallStatus"]}    SUCCESS
    ${uid_status_off_pem}=    PEM Action To Get Chassis UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${uid_status_off_pem["CallStatus"]}    SUCCESS
    Should Be Equal As Strings    ${uid_status_off_pem["OperationResult"]["UidState"]}    Off

    # set chassis UID to Blink state, validate command success and uid set to Blink state
    ${resp_blink}=    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    Blink
    Should Be Equal As Strings    ${resp_blink["CallStatus"]}    SUCCESS
    ${uid_status_blink_pem}=    PEM Action To Get Chassis UID State    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${uid_status_blink_pem["CallStatus"]}    SUCCESS
    Should Be Equal As Strings    ${uid_status_blink_pem["OperationResult"]["UidState"]}    Blink

    # restore back chassis uid to previous state
    ${response}=    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${uid_status_before_test}
    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    [Teardown]    Run Keyword If Test Failed    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${uid_status_before_test}

TC 02: PEM Chassis UID Control Negative: Test To Verify Chassis UID Control On Invalid Action
    [Documentation]    Test To Verify ChassisUidControl PEM command for Enclosure
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # verify PEM Action ChassisUidControl for Invalid action and validate for ERROR status
    ${random_string}=    Generate Random String    10    [LETTERS]
    ${response}=    PEM Action To Set Chassis UID Control    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${random_string}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 03: PEM Enclosure FRU Read: Test PEM Action Enclosure FRU Read On Enclosure
    [Documentation]    Test to verify PEM action EnclosureFruRead and validate with Front Panel FRU data
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute PEM command EnclosureFruRead and validate for command SUCCESS, source FRU and serial number
    ${response}=    PEM Action To Get Enclosure FRU Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS

    # verify the response source is FRU
    ${source_data}=    Set Variable    ${response["OperationResult"]["Parsed"]["GraphicsInfo"]}
    ${source_info}=    Get From Dictionary    ${source_data['Image'][0]}    Source
    Should Be Equal As Strings    ${source_info}    FRU 

    # compare serial number from pem command and serial number from fru data
    ${enc_serial_number_pem}=    Set Variable    ${response["OperationResult"]["Parsed"]["ProductInfo"]["SerialNumber"]}
    ${front_panel_fru_data}=    Get Front Panel Info Through EM
    ${fetch_sn_from_fru_data}=    Fetch From Right    ${front_panel_fru_data}    "SerialNumber": "
    ${enc_serial_number}=    Fetch From Left    ${fetch_sn_from_fru_data}    "
    Should Be Equal As Strings    ${enc_serial_number}    ${enc_serial_number_pem}

TC 04: PEM Is Enclosure Managed: Test To Verify Managed State of Enclosure Using PEM Action
    [Documentation]    Test To Verify Managed State of Enclosure using PEM Action
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute pem action IsManaged and validate the status as True
    ${resp}=    PEM Action To Get Enclosure Managed Status    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${resp["CallStatus"]}    SUCCESS
    ${enc_state}=    Set Variable    ${resp["OperationResult"]}
    Should Be Equal As Strings    ${enc_state}    True

TC 05: PEM Get Active Alerts: Test To Verify PEM Action Get Active Alerts In Enclosure
    [Documentation]    Test To Verify PEM Command GetActiveAlerts In Enclosure
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # inject a 'fan' and 'power supply' fault to verify alerts using pem command GetActiveAlerts
    # Get the current fan list from the enclosure
    ${fan_list}    ${fan_count}=    Get Current Fan List
    Should Not Be Empty    ${fan_list}    msg=should contain Fan inserted in the enclosure
    ${fan_fault}=    EM Diags Fault Injection    FanFaultInjection    ${fan_list[0]}    Fan1    True
    # Get the current power supply list from the enclosure
    ${ps_bay_list}=    Get Current Power Supply List
    Should Not Be Empty    ${ps_bay_list}    msg=should contain Power Supplies inserted in the enclosure
    ${ps_fault}=    EM Diags Fault Injection    PSFaultInjection    ${ps_bay_list[0]}    PS_OK    True

    # execute pem command GetActiveAlerts on enclosure
    ${resp}=    PEM Action To Get Active Alerts    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${resp["CallStatus"]}    SUCCESS

    # collect 'message IDs' and 'Origin of condition' from each alert in response and validate for injected faults
    ${message_ids_from_alerts}=    Create List
    ${device_at_fault}=    Create List
    ${alerts_list}=    Set Variable    ${resp["OperationResult"]["Alerts"]}
    ${num_of_alerts}=    Get Length    ${alerts_list}
    :FOR    ${index}    IN RANGE    0    ${num_of_alerts}
    \    ${alert}=    Get From List   ${alerts_list}    ${index}
    \    ${message_id}=    Get From Dictionary    ${alert}    MessageID
    \    ${fault_origin}=    Get From Dictionary    ${alert}    OriginOfCondition
    \    Append to list    ${message_ids_from_alerts}    ${message_id}
    \    Append to list    ${device_at_fault}    ${fault_origin}
    # verify the injected fault type is listed in Get Active Alerts
    Should Contain    ${message_ids_from_alerts}    emRegistry.1.0.FanRotor1Fault
    Should Contain    ${message_ids_from_alerts}    emRegistry.1.0.PowerSupplyFault
    Should Contain    ${device_at_fault}    /rest/v1/Fan/${fan_list[0]}
    Should Contain    ${device_at_fault}    /rest/v1/PowerSupply/${ps_bay_list[0]}

    # clear the alerts injected for testing
    ${fan_fault}=    EM Diags Fault Injection    FanFaultInjection    ${fan_list[0]}    Fan1    False
    ${ps_fault}=    EM Diags Fault Injection    PSFaultInjection    ${ps_bay_list[0]}    PS_OK    False
    [Teardown]    Run Keyword If Test Failed    Run Keywords    EM Diags Fault Injection    FanFaultInjection    ${fan_list[0]}    Fan1    False    AND    EM Diags Fault Injection    PSFaultInjection    ${ps_bay_list[0]}    PS_OK    False

TC 06: PEM Chassis Midplane FRU Read: Verify Chassis Midplane Fru Resource Using PEM Action
    [Documentation]    Test To Verify PEM Command to get Chassis Midplane FRU In Enclosure
    [Tags]    Automated    Enclosure    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute pem action ChassisMidplaneFruRead and verify the response source is FRU
    ${response}=    PEM Action To Get Chassis Midplane FRU Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}
    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    ${source_data}=    Set Variable    ${response["OperationResult"]["Parsed"]["EnclosureInfo"]["GraphicsInfo"]}
    ${source_info}=    Get From Dictionary    ${source_data['Image'][0]}    Source
    Should Be Equal As Strings    ${source_info}    FRU

    # Get the midplane fru information obtained through EM using SSH command
    ${ssh_out}=    Run SSH Command Using EM    MidplaneFru 
    ${fetch_serial_number}=    Fetch From Right    ${ssh_out}    "SerialNumber": "
    ${serial_number_ssh}=    Fetch From Left    ${fetch_serial_number}    "
    # compare serial number from pem command and serial number from fru data
    ${serial_number_pem}=    Set Variable    ${response["OperationResult"]["Parsed"]["EnclosureInfo"]["ProductInfo"]["ChassisSerialNumber"]}
    Should Be Equal As Strings    ${serial_number_ssh}    ${serial_number_pem}