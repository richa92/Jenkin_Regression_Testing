*** Settings ***
Documentation     Testing ALL PEM COMMANDS that are applicable to Blade Area 
...    = Usage =
...    | pybot | -L DEBUG | APPLIANCE_IP:<fusion_ipv4> | PEM_Blade.txt | 
...    = Variables =
...    | GIT_REPO_ROOT | Required; Repo root path if NOT defined in environment variable|
...    | RESOURCE_ROOT | Optional: Resource files path if NOT defined in environment variable|
...    | VARIABLE_ROOT | Optional: Variable files path if NOT defined in environment variable|
...    | APPLIANCE IP     | Required; OneView IP address under test | 

Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Library           OperatingSystem
Library           MgmtFWLibrary
Library           loginPEMClass
Library           json
Library           String
Library           Collections

Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/dea_variables.py
Variables         ${GIT_REPO_ROOT}${VARIABLE_ROOT}/data_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}/fusion/tests/DEA/HAL/resources/hal_webapp.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST

*** Variables ***
${bad_bay_num}    99
${bay_zero}    0

*** Test Cases ***
TC 01: PEM Blade Get Blade FRU Data: Test To Verify Blade FRU Data Using PEM Action
    [Documentation]    Validate PEM command to get Blade's FRU data for ALL existing blade slot in enclosure
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    # Get Fusion UUID
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000
    # Get FRU Info for ALL existing Blade(s) from both EM and PEM side then validate them
    ${blade_list} =    Get Server Bay List
    ${blade_cnt}=    Get Length    ${blade_list}
    :FOR    ${index}    IN RANGE    0    ${blade_cnt}
    # Get Blade's FRU info from EM side
    \    ${em_fru_resource}=    Get Blade FRU Data From EM    ${blade_list[${index}]}
    \    ${em_fru_parsed_data}=    Get From Dictionary    ${em_fru_resource}    Parsed
    \    ${em_fru_extref}=    Get From Dictionary    ${em_fru_resource['links']['Raw']}    extref
    # Get Blade's FRU info from PEM side
    \    ${pem_result}=    PEM Action To Get Blade FRU Data    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_list[${index}]}
    \    Should Be Equal As Strings    ${pem_result["CallStatus"]}    SUCCESS
    \    ${pem_fru_parsed_data}=    Get From Dictionary    ${pem_result['OperationResult']}    Parsed
    \    ${pem_fru_extref}=    Get From Dictionary    ${pem_result['OperationResult']['links']['Raw']}    extref
    # Validate Blade's FRU info are the same from both EM and PEM side
    \    Dictionaries Should Be Equal    ${em_fru_parsed_data}    ${pem_fru_parsed_data}
    \    Should Be Equal    ${em_fru_extref}    ${pem_fru_extref}

TC 02: PEM Blade Get Blade FRU Data Negative: Test To Get Blade FRU On Empty Bay
    [Documentation]    Validate PEM command failed to get FRU data from an EMPTY blade bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000
    # List Empty Blade bay List from the Enclosure
    ${empty_bay_list}=    Get Empty Blade Bay List
    :FOR    ${bay}    IN    @{empty_bay_list}
    # Calling PEM action read fru value with EMPTY bay number
    \    ${response}=    PEM Action To Get Blade FRU Data    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 03: PEM Blade Get Blade FRU Data Negative: Test To Get Blade FRU On Invalid Bay Number
    [Documentation]    Validate PEM command failed to get FRU data from an INVALID blade bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Calling PEM action to read fru data with invalid bay number
    ${response}=    PEM Action To Get Blade FRU Data    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 04: PEM Blade Get Blade FRU Data Negative: Test To Get Blade FRU On Zero Bay Number
    [Documentation]    Validate PEM command failed to get FRU data from blade bay ZERO
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Calling PEM action read fru value with EMPTY bay number
    ${response}=    PEM Action To Get Blade FRU Data    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay_zero}
    Should Be Equal As Strings    ${response["CallStatus"]}    ERROR

TC 05: PEM Blade Bay Efuse Negative: Efuse Blade Bay Using Invalid Bay Number
    [Documentation]    Negative Scenario to Blade Efuse Action Reset|On|Off on invalid bay number
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10 
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Blade Bay EFUSE Reset command on invalid bay number
    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseReset
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

    # Verify PEM Blade Bay EFUSE ON command on invalid bay number
    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOn
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

    # Verify PEM Blade Bay EFUSE OFF command on invalid bay number
    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    EFuseOff
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 06: PEM Blade Bay Efuse Negative: Empty Blade Bay Test For Efuse Reset|On|Off
    [Documentation]    Negative Scenario to validate Blade Efuse Action Reset|On|Off on Empty Bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000  

    # List Empty Blade bay List from the Enclosure
    ${empty_bay_list}=    Get Empty Blade Bay List
    :FOR    ${blade_bay}    IN    @{empty_bay_list}  
    # Verify PEM Blade Bay EFUSE Reset command on Empty bay
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseReset
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    ERROR
    # Verify PEM Blade Bay EFUSE ON command on Empty bay
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOn
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    ERROR
    # Verify PEM Blade Bay EFUSE OFF command on Empty bay
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    ERROR

TC 07: PEM Blade Bay Efuse: Blade Bay Efuse ON | OFF Test
    [Documentation]    Validate Efuse Blade Bay ON | OFF via PEM Action
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10    OVD2699
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Get populated Bay List from the Enclosure 
    ${bay_list}=    Get Server Bay List
    Should Not Be Empty    ${bay_list}    msg=should contain Blades inserted in the enlcosure
    :FOR    ${blade_bay}    IN    @{bay_list}
    # Save server state info to compare it after PEM Efuse Off PEM
    \    ${server_info}=    Get Server Info    ${blade_bay}
    \    ${server_state}=    Get Server State    ${blade_bay}
    # Verify PEM Blade Bay EFUSE ON command on populated bay
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOn
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    Sleep     60
    # Verify if the blade bay is populated after Efuse On
    \    ${bay_list_after_efuse_on}=     Get Server Bay List
    \    Should Not Contain    ${bay_list_after_efuse_on}    ${blade_bay}
    # Verify PEM Blade Bay EFUSE OFF command on bay which is Efused
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    Run Keyword And Ignore Error    Wait For Blade To Reach Present State    600    10    ${server_info['uri']}    ${server_state}
    # Verify if the blade bay is populated after Efuse Off
    \    ${bay_list_after_efuse_off}=    Get Server Bay List
    \    Should Contain    ${bay_list_after_efuse_off}    ${blade_bay}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff    AND    Sleep    300

TC 08: PEM Blade Bay Efuse: Blade Bay Efuse Reset Test
    [Documentation]    Validate Blade Efuse Reset via PEM Action
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Get populated Bay List from the Enclosure 
    ${bay_list}=    Get Server Bay List
    Should Not Be Empty    ${bay_list}    msg=should contain Blades inserted in the enclosure
    :FOR    ${blade_bay}    IN    @{bay_list}
    # Save server state info to compare it after PEM Efuse Reset
    \    ${server_info}=    Get Server Info    ${blade_bay}
    \    ${server_state}=    Get Server State    ${blade_bay}
    # Verify PEM Blade Bay EFUSE Reset command on populated bay
    \    ${response}=    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseReset
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    Run Keyword And Ignore Error    Wait For Blade To Reach Present State    600    10    ${server_info['uri']}    ${server_state}
    # Verify if the blade bay is populated after Efuse Reset
    \    ${bay_list_after_efuse}=     Get Server Bay List
    \    Should Contain    ${bay_list_after_efuse}    ${blade_bay}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff    AND    Sleep    300

TC 09: PEM Blade Bay Empty: Test Blade Bay Empty PEM Action
    [Documentation]    Validate Blade Bay Empty via PEM Action
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Blade Bay Empty Action on each bay and validate using Filled and Unfilled lists
    ${unfilled_bay}=    Get Empty Blade Bay List
    ${filled_bay}=    Get Server Bay List
    ${bay_list}=    Combine Lists    ${unfilled_bay}    ${filled_bay}
    Sort List    ${bay_list}
    :FOR    ${blade_bay}    IN    @{bay_list}
    \    ${response}=    PEM Action To Get Blade Bay Empty Status    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    ${bay_status}=  Get From Dictionary    ${response['OperationResult']}    BayEmpty
    \    Run Keyword If    '${bay_status}'=='True'    Should Contain    ${unfilled_bay}    ${blade_bay}
    \    Run Keyword If    '${bay_status}'=='False'    Should Contain    ${filled_bay}    ${blade_bay}

TC 10: PEM Blade Bay Empty: Test Blade Bay Empty PEM Action On Efused Bay
    [Documentation]    Validate Blade Bay Empty via PEM Action on Efused Bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10    OVD2699
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Blade Bay Empty Action on Efused bay from the list
    ${filled_bay}=    Get Server Bay List
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${server_info}=    Get Server Info    ${blade_bay}
    \    ${server_state}=    Get Server State    ${blade_bay}
    \    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOn
    \    Sleep    60
    # Verify the blade bay is not listed after Efuse On
    \    ${bay_list_after_efuse_on}=     Get Server Bay List
    \    Should Not Contain    ${bay_list_after_efuse_on}    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Bay Empty Status    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    ${bay_status}=  Get From Dictionary    ${response['OperationResult']}    BayEmpty
    # Validate bay status on Efuse On Bay, which should return False as Bay is not not Empty
    \    Should Be Equal As Strings    ${bay_status}    False
    # Efuse Off the blade bay and verify Blade Bay Empty status for False
    \    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff
    \    Wait For Blade To Reach Present State    600    10    ${server_info['uri']}    ${server_state}
    # Verify if the blade bay is populated after Efuse Off
    \    ${bay_list_after_efuse_off}=    Get Server Bay List
    \    Should Contain    ${bay_list_after_efuse_off}    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Bay Empty Status    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    SUCCESS
    \    ${bay_status}=  Get From Dictionary    ${response['OperationResult']}    BayEmpty
    # Validate bay status on Efuse Off Bay, which should return False
    \    Should Be Equal As Strings    ${bay_status}    False
    [Teardown]    Run Keyword If Test Failed    Run Keywords    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}    EFuseOff    AND    Sleep    300

TC 11: PEM Blade Bay Empty Negative: Test Blade Bay Empty Using Invalid Bay Number
    [Documentation]    Validate Blade Bay Empty using Invalid Bay Number
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${response}=    PEM Action To Get Blade Bay Empty Status    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 12: PEM Blade Resource Read: Test Blade Resource Read On Blade Bay List
    [Documentation]    Test Blade Resource Read on the Bay List
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Blade Resource Read on unfilled bay list and validate Bay Empty value
    ${unfilled_bay}=    Get Empty Blade Bay List
    :FOR    ${blade_bay}    IN    @{unfilled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    ${bay_presence}=    Get From Dictionary    ${response['OperationResult']}    BayEmpty
    \    Should Be Equal As Strings    ${bay_presence}    True
    # Verify PEM Blade Resource Read on filled bay list and validate Bay Empty value and check for Bay ID
    ${filled_bay}=    Get Server Bay List
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    ${bay_presence}=    Get From Dictionary    ${response['OperationResult']}    BayEmpty
    \    Should Be Equal As Strings    ${bay_presence}    False
    \    ${bay_res}=  Get From Dictionary    ${response['OperationResult']}    BayDeviceResource
    \    ${bay_ids}=  Get From Dictionary    ${bay_res}    BayId
    \    ${bayid_length}=    Get Length    ${bay_ids}
    \    Should Be True    ${bayid_length} > 0

TC 13: PEM Blade Resource Read Negative: Test Blade Resource Read On Invalid Bay Number
    [Documentation]    Negative Test on Blade Resource Read using Invalid Bay Number
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 14: PEM Blade Resource Read Negative: Test Blade Resource Read On Special Characters
    [Documentation]    Negative Test on Blade Resource Read using special characters
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${random_string}=    Generate Random String    10    !@#$%^&*abcdef[NUMBERS]
    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${random_string}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 15: PEM Blade Bay Number Get: Test PEM Blade Bay Number Get On Each Bay
    [Documentation]    Test on Blade Bay Number Get using Blade Resource Read and Validate min and max Bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000
 
    ${filled_bay}=    Get Server Bay List
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    ${bay_res}=  Get From Dictionary    ${response['OperationResult']}    BayDeviceResource
    \    ${bay_ids}=  Get From Dictionary    ${bay_res}    BayId
    \    ${response_data}=    PEM Action To Get Blade Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay_ids}
    \    ${max_bay_num}=    Get From Dictionary    ${response_data['OperationResult']}    MaxBayNumber
    \    ${min_bay_num}=    Get From Dictionary    ${response_data['OperationResult']}    MinBayNumber
    # Validate the min and max bay occupied by the blade
    \    ${occupied_max_bay}=    Get Maximum Bay Occupied By Blade    ${bay}
    \    Should Be Equal    ${occupied_max_bay}    ${max_bay_num}
    \    Should Be Equal    ${bay}    ${min_bay_num}

TC 16: PEM Blade Bay Number Get: Test PEM Blade Bay Number Get On Invalid Bay Number
    [Documentation]    Negative Test on Blade Bay Number Get using Invalid Bay Number
    [Tags]    Automated   Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Validate using invalid bay Number and check for ERROR status 
    ${response}=    PEM Action To Get Blade Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 17: PEM Blade Bay Number Get: Test PEM Blade Bay Number Get On Special Characters
    [Documentation]    Negative Test on Blade Bay Number Get using Special characters
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Generate Random String with special chars and validate with ERROR call status
    ${random_string}=    Generate Random String    10    !@#$%^&*abcdef[NUMBERS]
    ${response}=    PEM Action To Get Blade Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${random_string}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR
    
TC 18: PEM Blade Manager Get Configuration: Test To Verify Blade Properties
    [Documentation]    Test script to Validate Blade Properties
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    # Get PEM's token and establish session
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # Verify PEM Blade Manager Get Configuration on the filled bay list
    ${filled_bay}=    Get Server Bay List
    Should Not Be Empty    ${filled_bay}    msg=No servers found in the enclosure
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Manager Config    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    ${opresult}=    Get From Dictionary    ${response}    OperationResult
    \    ${ipaddress}=    Set Variable    ${opresult["iLO"]["IpAddress"]}
    \    ${server_info}=    Get Server Info    ${bay}
    \    ${mp_host_info}=    Get From Dictionary    ${server_info}    mpHostInfo
    \    ${mp_ip_addr}=    Get From Dictionary    ${mp_host_info}    mpIpAddresses
    \    ${ip_addr}=    Get From Dictionary    ${mp_ip_addr[0]}    address
    \    ${ip_addr}=     Replace String    ${ip_addr}    :0:0:0:    ::
    \    Should Be Equal As Strings    ${ip_addr}    ${ipaddress}

TC 19: PEM Blade Manager Get Configuration Negative: Test To Verify Blade Properties On Empty Bay
    [Documentation]    Test script to Validate Blade Configuration for empty bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${unfilled_bay}=    Get Empty Blade Bay List
    Should Not Be Empty    ${unfilled_bay}    msg=No servers found in the enclosure
    : FOR    ${blade_bay}    IN    @{unfilled_bay}
    # Error message is received due to the empty response when attempting to get information from an empty bay
    \    ${response}=    PEM Action To Get Blade Manager Config     ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${blade_bay}
    \    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    \    Should Be Equal As Strings    ${call_status}    ERROR

TC 20: PEM Blade Manager Get Configuration Negative: Test To Verify Blade Properties On Invalid Bay
    [Documentation]    Test script to Validate Blade Configuration for invalid bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    Log To Console    \nTesting on Blade in Bay ${bad_bay_num}
    # Error message is received due to the empty response when attempting to get information from an invalid bay
    ${response}=    PEM Action To Get Blade Manager Config     ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    Should Be Equal As Strings    ${call_status}    ERROR

TC 21: PEM Blade Manager Get Uri Bay Numbers: Test To Verify PEM Action Blade Manager Get Bay Numbers Using Uri
    [Documentation]    Test script to validate PEM Action Blade Manager Get Uri Bay Numbers
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # verify PEM Blade Manager Uri Bay Numbers Get on the filled bay list
    ${filled_bay}=    Get Server Bay List
    Should Not Be Empty    ${filled_bay}    msg=No servers found in the enclosure
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${response}=    PEM Action To Get Blade Resource Read    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    ${blade_manager_uri}=    Set Variable    ${response["OperationResult"]["BayDeviceResource"]["links"]["Manager"]}
    \    ${uri}=    Get From Dictionary    ${blade_manager_uri[0]}    href
    \    ${resp}=    PEM Action To Get Blade Manager Uri Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${uri}
    \    Should Be Equal As Strings    ${resp["CallStatus"]}    SUCCESS
    \    ${min_bay}=    Set Variable    ${resp["OperationResult"]["MinBayNumber"]}
    \    ${max_bay}=    Set Variable    ${resp["OperationResult"]["MaxBayNumber"]}
    # validate the min and max bay occupied by the blade
    \    ${occupied_max_bay}=    Get Maximum Bay Occupied By Blade    ${bay}
    \    Should Be Equal    ${occupied_max_bay}    ${max_bay}
    \    Should Be Equal    ${bay}    ${min_bay}

TC 22: PEM Blade Manager Get Uri Bay Numbers: Test To Verify PEM Action Blade Manager Get Bay Numbers Using Uri On Empty Bay List
    [Documentation]    Test script to validate PEM Action Blade Manager Get Uri Bay Numbers on Empty Blade Bay List
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # verify PEM Blade Manager Uri Bay Numbers Get on the unfilled bay list
    ${unfilled_bay}=    Get Empty Blade Bay List
    Should Not Be Empty    ${unfilled_bay}    msg=No servers found in the enclosure
    : FOR    ${blade_bay}    IN    @{unfilled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    \    ${uri_empty_bay}=    Convert To String    /rest/v1/BladeManager/${bay}
    \    ${resp}=    PEM Action To Get Blade Manager Uri Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${uri_empty_bay}
    \    Should Be Equal As Strings    ${resp["CallStatus"]}    SUCCESS
    # validate the min and max bay occupied by the blade for 'None'
    \    Should Be Equal As Strings    ${resp["OperationResult"]["MinBayNumber"]}    None
    \    Should Be Equal As Strings    ${resp["OperationResult"]["MaxBayNumber"]}    None

TC 23: PEM Blade Manager Get Uri Bay Numbers Negative: Test To Verify PEM Action Blade Manager Get Bay Numbers Using Uri On Invalid Bay
    [Documentation]    Test script to validate PEM Action Blade Manager Get Uri Bay Numbers on invalid bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute pem action Get Blade Manager Uri Bay on invalid bay and validate for 'none'
    ${resp}=    PEM Action To Get Blade Manager Uri Bay Numbers    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    Should Be Equal As Strings    ${resp["OperationResult"]["MinBayNumber"]}    None
    Should Be Equal As Strings    ${resp["OperationResult"]["MaxBayNumber"]}    None

TC 24: PEM Blade Bay Set Power Hold: Test To Verify PEM Action Blade Bay Set Power Hold
    [Documentation]    Test script to validate PEM Action Blade Bay Set Power Hold On filled Bay list
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    ${filled_bay}=    Get Server Bay List
    Should Not Be Empty    ${filled_bay}    msg=No servers found in the enclosure
    :FOR    ${blade_bay}    IN    @{filled_bay}
    \    ${bay}=    Convert To Integer    ${blade_bay}
    # record the power hold state of blade bay before configuring power hold state using pem command
    \    ${response}=    PEM Action To Get Blade Bay Power Hold Info    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    Should Be Equal As Strings    ${response["CallStatus"]}    SUCCESS
    \    ${power_hold_status}=    Set Variable    ${response["OperationResult"]["PowerHold"]}
    # set the power hold state to ON state
    \    ${resp_set_on}=    PEM Action To Set Blade Bay Power Hold    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}    On
    \    Should Be Equal As Strings    ${resp_set_on["CallStatus"]}    SUCCESS
    # verify the power hold set state on the bay using pem action BladeBayPowerHoldGet
    \    ${resp_get}=    PEM Action To Get Blade Bay Power Hold Info    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    Should Be Equal As Strings    ${resp_get["CallStatus"]}    SUCCESS
    \    Should Be Equal As Strings    ${resp_get["OperationResult"]["PowerHold"]}    On
    # efuse blade bay and verify blade power state is in Off state
    \    PEM Action To EFuse Blade Bay    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}    EFuseReset
    \    Sleep    300
    \    ${server_bay_info}=    Get Server Info    ${bay}
    \    Should Be Equal As Strings    ${server_bay_info["powerState"]}    Off
    # set the power hold state of blade bay to OFF state, this should Power ON the Blade bay
    \    ${resp_set_off}=    PEM Action To Set Blade Bay Power Hold    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}    Off
    \    Should Be Equal As Strings    ${resp_set_off["CallStatus"]}    SUCCESS
    \    Wait for Server Power On    ${bay}
    # verify the power hold state on Blade bay is set to OFF
    \    ${resp_get}=    PEM Action To Get Blade Bay Power Hold Info    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}
    \    Should Be Equal As Strings    ${resp_get["OperationResult"]["PowerHold"]}    Off
    [Teardown]    Run Keyword If Test Failed    Run Keyword    PEM Action To Set Blade Bay Power Hold    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bay}    ${power_hold_status}

TC 25: PEM Blade Bay Get Power Hold Info Negative: Test To Verify PEM Action Blade Bay Get Power Hold Info On Invalid Bay
    [Documentation]    Test script to validate PEM Action Blade Bay Power Hold Get on Invalid Bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute pem action BladeBayPowerHoldGet on invalid bay and verify for ERROR status
    ${resp_get}=    PEM Action To Get Blade Bay Power Hold Info    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}
    Should Be Equal As Strings    ${resp_get["CallStatus"]}    ERROR

TC 26: PEM Blade Bay Set Power Hold Negative: Test To Verify PEM Action Blade Bay Set Power Hold On Invalid Bay
    [Documentation]    Test script to validate PEM Action Blade Bay Set Power Hold On Invalid Bay
    [Tags]    Automated    Blade    DEA    API    PEM    OV3.10
    ${auth}=    Get Trusted PEM Token
    set_header_to_pem_token    ${APPLIANCE_IP}    ${pem_cred}    ${auth}
    ${fusion_uuid}=    Check For Single Enclosure and Get UUID
    ${enc_serial_number}=    Fetch From Right    ${fusion_uuid}    000

    # execute pem action BladeBayPowerHoldSet on invalid bay and verify for ERROR status
    ${resp_set_on}=    PEM Action To Set Blade Bay Power Hold    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    On
    Should Be Equal As Strings    ${resp_set_on["CallStatus"]}    ERROR
    ${resp_set_off}=    PEM Action To Set Blade Bay Power Hold    ${auth}    ${APPLIANCE_IP}    ${enc_serial_number}    ${bad_bay_num}    Off
    Should Be Equal As Strings    ${resp_set_off["CallStatus"]}    ERROR