*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             SSHLibrary
Library             String

# GLOBAL Core references to support keyword, Wait For Task By Polling Task Length
Library             ${GIT_REPO_ROOT}/fusion/Resources/api/activity/ActivityHelpers.py


*** Keywords ***
########################################
# Appliance setup - Keywords
########################################

Setup Appliance
    [Documentation]    Creates the appliance setup with Network,LIG,Encl Groups,Logical encl and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable   ${ethernet_networks}
    Add LIG from variable    ${lig}
    Add Enclosure Group from variable    ${encl_group}
    Add Logical Enclosure from variable    ${logical_encl}
    Power off ALL Servers
    Add Server Profiles from variable    ${server_profiles}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status

Setup C7000 Appliance
    [Documentation]    Creates the C7000 appliance setup with Network,LIG,Encl Groups,Add enclosure and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable   ${ethernet_networks_c7000}
    Add LIG from variable    ${lig_c7000}
    Add Enclosure Group from variable    ${encl_group_c7000}
    Add Enclosures from variable    ${add_enclosure_body}
    Power off ALL Servers
    Add Server Profiles from variable    ${server_profiles_c7000}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status

Setup C7000 Ethernet Appliance
    [Documentation]    Creates the C7000 appliance setup with Network,LIG,Encl Groups,Add enclosure and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable   ${multi_ethernet_networks}
    Add LIG from variable    ${lig_c7000}
    Add Enclosure Group from variable    ${encl_group_c7000}
    Add Enclosures from variable    ${add_enclosure_body}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status

Setup C7000 8PF Appliance
    [Documentation]    Creates the C7000 appliance setup with Network,LIG,Encl Groups,Add enclosure and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable   ${enet_networks_8pf}
    Add FC Networks from variable    ${fc_networks}
    Add FC Networks from variable    ${fc_networks2}
    Add LIG from variable    ${lig_c7000_8pf}
    Add Enclosure Group from variable    ${encl_group_c7000}
    Add Enclosures from variable    ${add_enclosure_body}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status
    
Setup C7000 Mezz 8PF Appliance
    [Documentation]    Creates the C7000 appliance setup with Network,LIG,Encl Groups,Add enclosure and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable   ${enet_networks_8pf}
    Add FC Networks from variable    ${fc_networks}
    Add FC Networks from variable    ${fc_networks2}
    Add LIG from variable    ${lig2_c7000_8pf}
    Add Enclosure Group from variable    ${encl_group_c7000}
    Add Enclosures from variable    ${add_enclosure_body}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status

Setup Ethernet Appliance
    [Documentation]    Creates the Tbird appliance setup with Network,LIG,Encl Groups,Add enclosure and
    ...    server profile creation for Ethernet network
    Add Ethernet Networks from variable    ${enet_networks_8pf}
    Add FCoE Networks from variable    ${fcoe_networks}
    Add LIG from variable    ${lig1}
    #Add LIG from variable    ${lig2}
    Sleep    60
    #Add Enclosure Group from variable    ${encl_group_2ICM}
    Add Enclosure Group from variable    ${encl_group}
    Sleep    60
    Add Logical Enclosure from variable    ${logical_encl}
    Verify All Ethernet Networks Status
    Run Keyword And Ignore Error     Verify All LIGs Status    #Status showing null for now
    Verify All Enclosure Groups Status
    Verify All Logical Enclosures Status

Setup Ethernet FCoE Appliance
    [Documentation]    Creates the Tbird appliance setup with Network,LIG,Encl Groups,Logical Encl
    ...    for Ethernet and FCoE network
    Add Ethernet Networks from variable   ${ethernet_networks}
    Add FCoE Networks from variable    ${fcoe_networks}
    Add LIG from variable    ${lig}
    Add Enclosure Group from variable    ${encl_group}
    Add Logical Enclosure from variable    ${logical_encl}

Setup FC Appliance
    [Documentation]    Creates the Tbird appliance setup with Network,LIG,Encl Groups,Logical Encl
    ...    for Ethernet and FCoE network
    Add FC Networks from variable    ${fc_networks}
    Add LIG from variable    ${lig_fc}
    Add Enclosure Group from variable    ${encl_group_fc}
    Add Logical Enclosure from variable    ${logical_encl}

Setup Ethernet FC Environment
    [Documentation]    Creates the appliance setup with Network,LIG,Encl Groups,Logical encl and
    ...    server profile creation for Ethernet and FC network
    Add Ethernet Networks from variable   ${ethernet_networks}
    Add FC Networks from variable    ${fc_networks}
    Add LIG from variable    ${lig}
    Add LIG from variable    ${lig_fc}
    Add Enclosure Group from variable    ${encl_group_fc}
    Add Logical Enclosure from variable    ${logical_encl}

#######################################
# Appliance Clean Up - Keywords
#######################################
Clean UP Environment
    [Documentation]    Cleans up Tbird Enclosure by removing all SP, LE, EG, LIGs, and Networks
    Power off ALL Servers
    Remove All Server Profiles
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks

Clean UP C7000 Environment
    [Documentation]    Cleans up C7000 Enclosure by removing all SP, LE, EG, LIGs, and Networks
    Power off ALL Servers
    Remove All Server Profiles
    Run Keyword And Ignore Error    Remove ALL Enclosures    #State returns error for now
    Remove All Logical Enclosures
    Remove ALL Enclosure Groups
    Remove ALL LIGs
    Remove ALL Ethernet Networks
    Remove ALL FC Networks
    Remove ALL FCoE Networks
    Remove All Server Hardware Types

Create Support Dump if Failed and Log Out of Fusion
    [Documentation]    Create support dump if any test fail and log out of Fusion
    Run Keyword If Any Tests Failed    Create and download support dump    c:\\AutoReports\\DEA_CurrentRun\\${Adapter_Test}_Support_Dump.sdmp
    Logout of Fusion Via REST

############################
# CUSTOM POLLING TASK KEYWORDS
############################
Wait For Task By Polling Current Task State
    [Documentation]    Polling specified running task and Waits for to complete
    [Arguments]    ${resp}    ${timeout}=60s    ${interval}=2s

    ${status}    ${taskState} =    Run Keyword and Ignore Error    Get From Dictionary    ${resp}    taskState
    ${task} =     Run Keyword If  '${status}'=='PASS'    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Wait For Task Reached Endstate    ${resp}
    Return From Keyword If    '${status}'=='PASS'    ${task}

    Log to Logfile    resp: ${resp}
    ${status}  ${location} =    Run Keyword and Ignore Error    Get From Dictionary    ${resp['headers']}    location
    Run Keyword If    '${status}'=='FAIL'    Fail    resp was not a taskResource nor location as task.    Can't Wait For Task.

    ${task} =    Fusion Api Get Task    uri=${location}
    ${task} =    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Wait For Task Reached Endstate    ${resp}
    [Return]    ${task}

Wait For Task Reached Endstate
    [Documentation]    Waits for a task to reach it's END-STATE
    [Arguments]    ${resp}
    Set Log Level    TRACE
    ${location} =    Get Variable Value    ${resp['headers']['location']}    ${resp['location']}
    ${task_uri} =    Run Keyword If    '${location}' is 'None'    Get From Dictionary    ${resp}    uri
    ...    ELSE    Get Variable Value    ${location}
    ${task} =    Fusion Api Get Task    uri=${task_uri}
    Sleep    120
    ${task_state} =    Get From Dictionary    ${task}    taskState
    ${task_category} =    Get From Dictionary    ${task}    category
    ${task_name} =    Get From Dictionary    ${task}    name
    ${resource} =    Get From Dictionary    ${task['associatedResource']}    resourceName
    ${resource_uri} =    Get From Dictionary    ${task['associatedResource']}    resourceUri
    Log    \t Task: [${task_category}:${task_name}] is: ${task_state} for resource: ${resource} ${resource_uri}    console=yes
    Should Match Regexp    ${task_state}    ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]    ${task}

Wait For TaskType Success State
    [Documentation]    Waits for a task to reach an end-state
    ...        Similar to fusion_api_appliance_setup.Wait For Task
    [Arguments]    ${resp}    ${timeout}=60s    ${interval}=2s    ${taskType}=Default
    Log    \n    console=yes
    ${valDict} =    Create Dictionary    status_code=${202}
    Validate Respond Keys    ${resp}    ${valDict}
    ${task} =    Run Keyword If    '${taskType}' == 'Default'   Wait Until Keyword Succeeds    ${timeout}    ${interval}    Wait For Task Reached Endstate    ${resp}
    ...    ELSE IF    '${taskType}' == 'Restore'   Wait Until Keyword Succeeds    ${timeout}    ${interval}   Polling Task Endstate Progress    ${resp}
    ...    ELSE    Fail    msg=The taskType specified is invalid. Please use 'Default' or 'Restore'...
    [Return]    ${task}

Polling Task Endstate Progress
    [Documentation]   Override the Builtin.Copy Dictionary with deep copy
    [Arguments]    ${resp}
    Set Log Level    TRACE
    Should Not Be Empty    ${resp['uri']}    msg=No task uri could be retreived from response
    ${task} =    Fusion Api Get Task    uri=${resp['uri']}
    ${task_status} =    Get From Dictionary    ${task}     status
    ${task_category} =    Get From Dictionary    ${task}    category
    ${task_id} =    Get From Dictionary    ${task}    id
    ${task_percentComplete} =    Get From Dictionary    ${task}     percentComplete
    ${task_progressStep} =    Get From Dictionary    ${task}    progressStep
    Log    \t Task: [${task_category}:${task_id}] is: ${task_status}(${task_percentComplete}%) [${task_progressStep}] : ${resp['uri']}    console=yes
    Should Match Regexp    ${task_status}    ((?i)FAILED|SUCCEEDED|UNKNOWN)
    [Return]    ${task}

Wait For Task By Polling Task Length
    [Documentation]    Similar to "Waits for a task to reach an end-state"
    ...    Argument ${tasks} can be a TaskResource or a dict that contains a ['headers']['location'] value to a task uri,
    ...    or a list of such.  If a list and any task fails, the keyword will fail and remaining tasks are not verified.
    ...
    ...    1. Supports BREAK_LOOP_IF and Error Message override of failure for negative testing.
    ...            => BREAK_LOOP_IF: Use to TERMINATE the wait loop prior to timeout.
    ...
    ...    2. EVALUATES ${tasks} to see if an error occurred and thus ${tasks} wasn't a task resource.
    ...
    ...    DEFAULTS VALUES:
    ...               ${timeout}=60    => Timeout and interval are in seconds, though Timeout can be entered in minutes as in 10m.
    ...               ${interval}=2
    ...               ${errorMessage}=None Expected
    ...                      - IF ${errorMessage} is not passed in, error messages will not be be validated for Negative testing.
    ...                      - IF ${errorMessage} is passed in and the actual errorMessage value contains ${variables},
    ...                                                   then you must supply those variables values.
    ...                      - See errorMessages.py for additional information regarding errorMessages.
    ...               ${PASS}=((?i)Completed|Warning)
    ...               ${BREAK_LOOP_IF}=((?i)Error|Terminated)
    ...               ${VERBOSE}=False
    ...
    ...    USAGES:
    ...          Wait For Task By Polling Task Length    ${tasks}       timeout=60    interval=5    errorMessage=ethernet_exists    name=Net777
    ...          Wait For Task By Polling Task Length    ${tasks}    ${PASS}=((?i)Running|Starting)    ${BREAK_LOOP_IF}=((?i)Error|Terminated)   ${VERBOSE}=True
    ...
    [Arguments]    ${tasks}    ${timeout}=60    ${interval}=2    ${errorMessage}=None Expected
    ...                  ${PASS}=((?i)Completed|Warning)    ${BREAK_LOOP_IF}=((?i)Error|Terminated)    ${VERBOSE}=False    &{kwargs}
    ${len} =  Get Length    ${tasks}
    Return From Keyword If    ${len}==0    NO OP
    WFT2 Python Helper    ${tasks}    ${timeout}    ${interval}    ${errorMessage}   ${PASS}    ${BREAK_LOOP_IF}    ${VERBOSE}    &{kwargs}

Wait For OV To Add Specify Server
    [Documentation]    Wait for server to get added in OV with expected server status after efuse
    [Arguments]    ${server_status}    ${Server_Bay}
    :FOR    ${index}  IN RANGE   1    300
    \    ${state}    ${server_details}=    Run Keyword And Ignore Error    Get server Information    ${Server_Bay}
    \    ${state}    ${status}=    Run Keyword And Ignore Error    Get From Dictionary    ${server_details}    status
    \    Run Keyword If    "${server_status}" == "${status}"    Exit For Loop
    \    Sleep    3

Validate Respond Keys
    [Documentation]    Validates data in a response body against expected values
    ...    Example:
    ...    ${rc} =         Convert to Integer    400
    ...    ${valDict} =     Create Dictionary    status_code=${rc}
    ...                                        errorCode=CRM_DUPLICATE_NETWORK_NAME
    ...    Validate Response    ${respDict}    ${valDict}
    [Arguments]    ${resp}    ${validation}
    Set Log Level    TRACE
    ${response} =     Copy Dictionary Tree    ${resp}
    @{vkeys} =    Get Dictionary Keys    ${validation}
    ${rkeys} =    Get Dictionary Keys    ${response}
    @{keys} =    common.Remove all the keys in response that are not in validation    ${vkeys}    ${rkeys}
    :FOR    ${x}    IN    @{keys}
    \    Remove From Dictionary    ${response}    ${x}
    Dictionaries Should Be Equal    ${validation}    ${response}    msg=Response does not match validation dictionary    values=True

Copy Dictionary Tree
    [Documentation]   Copy whole dictionary tree object. Override the Builtin.Copy Dictionary with deep copy
    [Arguments]    ${obj}
    Log        Deep copy version!!!
    ${obj} =   copy.deepcopy   ${obj}
    [Return]    ${obj}

#######################################
# SETUP Verification - Keywords
#######################################
Verify All Ethernet Networks Status
    [Documentation]    Querys the appliance for all Ethernet networks and then verify the status
    Log    Verifying ETHERNET NETWORKS Status    console=yes
    ${networks} =    Fusion Api Get Ethernet Networks
    :FOR    ${net}    IN    @{networks['members']}
    \    ${resp} =    Fusion Api Get Ethernet Networks    uri=${net['uri']}
    \    ${status} =    Get From Dictionary    ${resp}    status
    \    Should Be Equal    ${status}    OK

Verify All LIGs Status
    [Documentation]    Querys the appliance for all LIGs and then verify the status
    Log    Verifying LIGS Status    console=yes
    ${ligs} =   Fusion Api Get LIG
    :FOR    ${lig}    IN    @{ligs['members']}
    \    ${resp} =    Fusion Api Get LIG    uri=${lig['uri']}
    \    ${status} =    Get From Dictionary    ${resp}    status
    \    Should Be Equal    ${status}    OK

Verify All Enclosure Groups Status
    [Documentation]    Querys the appliance for all Enclosure Groups and then verify the status
    Log    Verifying ENCLOSURE GROUPS Status    console=yes
    ${encs} =   Fusion Api Get Enclosure Groups
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${resp} =    Fusion Api Get Enclosure Groups    uri=${enc['uri']}
    \    ${status} =    Get From Dictionary    ${resp}    status
    \    Should Be Equal    ${status}    OK

Verify All Logical Enclosures Status
    [Documentation]    Querys the appliance for all Logical Enclosures and then verify the status
    Log    Verifying LOGICAL ENCLOSURES Status    console=yes
    ${encs} =   Fusion Api Get Logical Enclosure
    :FOR    ${enc}    IN    @{encs['members']}
    \    ${resp} =   Fusion Api Get Logical Enclosure    uri=${enc['uri']}
    \    ${status} =    Get From Dictionary    ${resp}    status
    \    Should Be Equal    ${status}    OK

Verify All Server Profiles Status
    [Documentation]    Querys the appliance for all Logical Enclosures and then verify the status
    Log    Verifying Server Profiles Status    console=yes
    ${sps} =   Fusion Api Get Server Profiles
    :FOR    ${sp}    IN    @{sps['members']}
    \    ${resp} =   Fusion Api Get Server Profiles    uri=${sp['uri']}
    \    ${status} =    Get From Dictionary    ${resp}    status
    \    Should Be Equal    ${status}    OK

#####################
# Storage Systems Section
#####################
Edit and Update Appliance Current Storage Systems
    [Documentation]    This KW will update current storage system for Smoke Pre-Req and Test suite
    [Arguments]    ${storage_systems}
    Log      Editing and Updating a LIST of Storage Systems    console=yes
    ${resplist} =     Create List
    :FOR    ${ss}    IN    @{storage_systems}
    \     Log    Editing Current ${ss['name']} Storage System with NEW Values    console=yes
    \    Log    ${ss}
    \    ${payload} =    Update Current Storage System Key Values    ${ss}
    \     Log    Update Current ${ss['name']} Storage System to Appliance    console=yes
    \    ${resp} =    Fusion Api Update Storage System    ${payload}    ${payload['uri']}
    \    Append To List    ${resplist}    ${resp}
    [return]    ${resplist}

Update Current Storage System Key Values
    [Documentation]    Create a NEW payload with NEW key values data to update (PUT) current storage system
    ...                        Similar to storage_system.Create Storage System PUT Payload keyword
    [Arguments]    ${storage_system}
    Log    GET Current Storage System NAME and RESOURCE DATA    console=yes
    ${name} =    Get from Dictionary    ${storage_system}    name
    Log    ${name}
    ${payload} =    Get Current Resource Using Category and Name    SSYS:${name}
    Log    ${payload}

     Log     REMOVE Status_code and Headers in the response    console=yes
    remove from dictionary    ${payload}    status_code
    remove from dictionary    ${payload}    headers

     Log     GET/SET Network Ports Info via URI    console=yes
    ${status}    ${port_list_info} =    Run Keyword and Ignore Error    Get From Dictionary    ${storage_system}     ports
    Log    ${status}
    Log    ${port_list_info}
    ${ports} =    Run keyword if    '${status}'=='PASS'    Get Expected Network URI For Each Config Port    ${port_list_info}
    Log    ${ports}
    ${ports} =    Run keyword if    '${status}'=='PASS'    Update Port List Info    ${payload["ports"]}    ${ports}

    # NEW data for v3.10 - Updating manageDomain key value
     Log     GET/SET Manage Domain Info    console=yes
    ${manage_dom} =    Get from Dictionary    ${payload["deviceSpecificAttributes"]}    discoveredDomains
    Set to Dictionary    ${payload["deviceSpecificAttributes"]}    managedDomain    ${manage_dom[0]}
    [return]    ${payload}

######################################################
# MISCELLANEOUS KWs SECTION:: Support Storage System and Other Etc..
######################################################
Get Current Resource Using Category and Name
    [Documentation]    Takes Resource's Category:Name and returns http response
    ...                        Ex:    ${resp} =     Get Resource      LIG:LIG1
    ...                        Similar to common.Get Resource
    [Arguments]    ${categoryAndName}    ${api}=${None}
    Log    ${categoryAndName}
    ${uri} =    Run Keyword     Lookup Common URI Using Category and Name    ${categoryAndName}
    Log    ${uri}
    Should Not Contain    ${uri}    ResourceTypeNotFound    msg=${uri}
    ${resp} =    Get My Resource by URI    ${uri}    api=${api}
    [Return]    ${resp}

Get My Resource by URI
    [Documentation]    Returns any type of resource using its URI. Similar to kw-Get Resource by URI
    [Arguments]    ${uri}    ${api}=${None}    @{varargs}
    ${resp} =    Fusion Api Get Resource    ${uri}    @{varargs}    api=${api}
    [Return]    ${resp}

Update Port List Info
    [Documentation]    Update port list info from user to current system's port list info.
    [Arguments]    ${sys_ports_info}    ${user_ports_info}
    ${len} =    get length    ${sys_ports_info}
    :FOR    ${index}    ${item}    IN ENUMERATE    @{sys_ports_info}
    \    Run Keyword If    '${item["name"]}'=='${user_ports_info[0]["name"]}'    Update Dictionary Subset    ${sys_ports_info[${index}]}    ${user_ports_info[0]}
    [return]    ${sys_ports_info}

Get Expected Network URI For Each Config Port
    [Documentation]    Lookup expectedNetworkUri for each ports in the port's list.
    ...                        Similar to storage_system.Lookup Ports Expected Network URI keyword
    [Arguments]    ${port_list}
    :FOR    ${port}    IN    @{port_list}
    \    ${status}    ${rtn} =    Run Keyword and Ignore Error    Get From Dictionary    ${port}    expectedNetworkUri
    \    ${expectedNetworkUri} =    Set Variable If    '${status}'=='PASS'    ${rtn}    ${None}
    \    ${expectedNetworkUri} =    Run Keyword If    '${expectedNetworkUri}'!='${None}'    Lookup Common URI Using Category and Name    ${expectedNetworkUri}
    \    Set to Dictionary    ${port}    expectedNetworkUri    ${expectedNetworkUri}
    [Return]    ${port_list}

Lookup Common URI Using Category and Name
    [Documentation]    Takes a string containing URI type + : + resource name, performs a lookup and returns URI
    ...                        Ex:    ${uri} =     Common Lookup by name    LIG:LIG1
    ...                        Similar to common.Common URI lookup by name
    [Arguments]    ${uri}
    # Process input URI's category and name value
    @{words} =    Split String    ${uri}    :    1
    ${type} =    Get From List    ${words}    0
    Return From Keyword If    '${uri}' == '${type}'    ${uri}
    ${name} =    Get From List    ${words}    1
    Log    ${name}

    #  Add lookup LIST via short type name and full type name.  Full type name added when "Verify Resource" created
    ${lookup} =    Create Dictionary
    ...    DE=Get Drive Enclosure URI
    ...    EG=Get Enclosure Group URI
    ...    EnclosureGroupV300=Get Enclosure Group URI
    ...    EnclosureGroupV400=Get Enclosure Group URI
    ...    ENC=Get Enclosure URI
    ...    EnclosureV300=Get Enclosure URI
    ...    EnclosureV400=Get Enclosure URI
    ...    ETH=Get Ethernet URI
    ...    ethernet-networkV300=Get Ethernet URI
    ...    FC=Get FC URI
    ...    fc-networkV300=Get FC URI
    ...    FCOE=Get FCoE URI
    ...    fcoe-networkV300=GET FCoE URI
    ...    IC=Get IC URI
    ...    InterconnectV300=Get IC URI
    ...    ICTYPE=Get Interconnect Type URI
    ...    LI=Get LI URI
    ...    LIG=Get LIG URI
    ...    logical-interconnect-groupV300=Get LIG URI
    ...    NS=Get Network Set URI
    ...    SASIC=Get Sas Interconnect URI
    ...    SASICTYPE=Get Sas Interconnect type URI
    ...    sas-interconnect=Get Sas Interconnect URI
    ...    SASLIG=Get SASLIG URI
    ...    sas-logical-interconnect-group=Get SASLIG URI
    ...    SASLI=Get SAS LI URI
    ...    SASLJBOD=Get Sas Logical Jbod URI
    ...    sas-logical-jbod=Get Sas Logical Jbod URI
    ...    SASLJBODATT=Get Sas Logical Jbod Attachment URI
    ...    sas-logical-jbod-attachment=Get Sas Logical Jbod Attachment URI
    ...    server-hardware-5=Get Server Hardware URI
    ...    SH=Get Server Hardware URI
    ...    SHT=Get Server Hardware Type URI
    ...    SP=Get Server Hardware Profile URI
    ...    ServerProfileV5=Get Server Hardware Profile URI
    ...    ServerProfileV6=Get Server Hardware Profile URI
    ...    ServerProfileV400=Get Server Hardware Profile URI
    ...    SPT=Get Server Profile Template URI
    ...    ServerProfileTemplateV2=Get Server Profile Template URI
    ...    ServerProfileTemplateV400=Get Server Profile Template URI
    ...    US=Get Uplink Set URI
    ...    SANManager=Get San Manager URI
    ...    FCDeviceManagerV2=Get San Manager URI
    ...    FCPROV=Get Provider URI
    ...    FCProvider=Get Provider URI
    ...    FCSanV4=Get Managed SAN URI
    ...    FCSan=Get Managed SAN URI
    ...    SSYS=Get Current Storage System URI                         # MODIFIED from Get Storage System URI
    ...    SVOL=Get Storage Volume URI
    ...    SPOOL=Get Current Storage Pool URI                            # MODIFIED from Get Storage Pool URI
    ...    SVT=Get Storage Volume Template URI
    ...    StorageVolumeTemplateV3=Get Storage Volume Template URI
    ...    StoragePoolV2=Get Current Storage Pool URI
    ...    StorageSystemV3=Get Current Storage System URI
    ...    StorageVolumeV3=Get Storage Volume URI
    ...    UserAndRoles=Get User URI
    ...    USER=Get User URI
    ...    LE=Get Logical Enclosure URI
    ...    LogicalEnclosureV300=Get Logical Enclosure URI
    ...    firmware-baselines=Get Firmware Bundle URI
    # Retreive dictionary value from category and name
    ${status}    ${api} =    Run Keyword and Ignore Error    Get From Dictionary    ${lookup}    ${type}
    Return From Keyword If    '${status}'=='FAIL'    ResourceTypeNotFound:${type}
    Log    ${status}
    Log    ${api}
    # Run keyword based on the lookup dictionary table returned value, For example -- SSYS:Get Storage System URI
    ${uri} =    Run Keyword    ${api}    ${name}
    [Return]    ${uri}

Get Current Storage System URI
    [Documentation]    Get storage system URI by name.
    ...                                Similar keyword storage_system.Get Storage System URI
    [Arguments]    ${ssName}
    ${resp} =    Fusion Api Get Storage System    param=?filter="'name'=='${ssName}'"
    Return From Keyword If    ${resp['count']}==0    /rest/storage_system_uri_${ssName}_not_found
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

##########################################
# LOCAL PE - ADDING STORAGE RELATED KEYWORDS
##########################################
Add List Of Storage Systems From Variable
    [Documentation]    Add a LIST of storage systems from user-defined variable
    ...      Similar to storage_system.Add Storage Systems Async
    [Arguments]        ${storage_systems}
    ${toAdd} =  Create List
    # Making sure storage system to be added does NOT exist in the Appliance.
    :FOR    ${ss}    IN    @{storage_systems}
    \    ${status} =    Check For Existing Resource    SSYS:${ss['name']}
    \    Run Keyword If    ${status}=='FAIL'    Append To List    ${toAdd}    ${ss}

    # Adding Storage System after confirmed non-existence
    ${added_list} =    Create List
    :FOR    ${ss}    IN    @{toAdd}
    \    Log  Adding Current Storage System Name, ${ss['name']}    console=yes
    \   ${resp} =    Add Single Storage System From Variable    ${ss}
    \   Append To List    ${added_list}    ${resp}
    [Return]    ${added_list}

Add Single Storage System From Variable
    [Documentation]    Add a single storage system from user-defined variable to Appliance
    ...      Similar to storage_system.Add Storage Systems
    [Arguments]    ${storage_system}
    ${payload} =    common.Copy Dictionary    ${storage_system['credentials']}
    Set To Dictionary    ${payload}    hostname    ${storage_system['hostname']}
    Set To Dictionary    ${payload}    family    ${storage_system['family']}
    ${resp} =    Fusion Api Create Storage System     body=${payload}
    [Return]    ${resp}

Check For Existing Resource
    [Documentation]    Check to see if Resource EXIST in Appliance currently.
    ...              Example: Check For Existing Resource    SVOL:${volumeName}
    ...              Similar to common.Check Resource Existing keyword
    [Arguments]    ${resource}    ${expected_status_code}='200'
    ${resp} =    Get Current Resource Using Category and Name    ${resource}          # Orig - Get Resource
    ${status} =  Set Variable If    '${resp['status_code']}'==${expected_status_code}    'PASS'    'FAIL'
    [Return]    ${status}

Get Current Storage System Template URI
    [Documentation]    Get storage system template URI by name and param if given.
    ...              Similar to storage_system.Get Storage System Template URI
    [Arguments]    ${ssName}    ${param}=${None}
    ${ssUri} =     Get Storage System URI    ${ssName}
    ${resp} =     Fusion Api Storage System Get Templates    ${ssUri}    param=${param}
    Return From Keyword If    ${resp['count']}==0    /rest/storage-volume-templates/bad_uri
    ${uri} =     Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Edit List Of Storage Pools
    [Documentation]    Edit a list of storage pools and return the responses.
    ...        Similar to storage_pool.Edit Storage Pools Async keyword
    [Arguments]    ${storage_pools}
    Log    Editing List Current Storage Pools    console=yes
    ${resplist} =  Create List
    :FOR    ${sp}    IN    @{storage_pools}
    \    Log    Editing Current Storage Pool Name, ${sp['name']}    console=yes
    \    ${resp} =    Edit Single Storage Pool    ${sp}
    \    Append To List    ${resplist}    ${resp}
    [Return]    ${resplist}

Edit Single Storage Pool
    [Documentation]    Edit single storage pool from Appliance
    ...        Similar to storage_pool.Edit Storage Pool keyword
    [Arguments]    ${storage_pool}
    ${payload} =    Create New Storage Pool PUT Payload    ${storage_pool}
    ${resp} =    Fusion Api Edit Storage Pool    ${payload}    ${payload['uri']}
    [Return]    ${resp}

Create New Storage Pool PUT Payload
    [Documentation]    Creating new storage pool payload to be update via PUT Request
    ...        Similar to storage_pool.Create Storage Pool PUT Payload
    [Arguments]    ${storage_pool}
    ${name} =    Get From Dictionary    ${storage_pool}    name
    ${ssUri} =    Get Current Storage System URI    ${storage_pool['storageSystemUri']}
    ${spUri} =    Get Current Storage Pool URI    ${storage_pool['name']}    ssName=${storage_pool['storageSystemUri']}
    ${spCopy} =    common.Copy Dictionary    ${storage_pool}
    Set To Dictionary    ${spCopy}    storageSystemUri  ${ssUri}
    ${payload} =  Fusion Api Get Resource    ${spUri}

    # remove the status_code and headers in the response
    Remove From Dictionary    ${payload}    status_code
    Remove From Dictionary    ${payload}    headers

    Update Dictionary Subset    ${payload}    ${spCopy}
    [Return]    ${payload}

Get Current Storage Pool URI
    [Documentation]    Get storage Pool URI by name and storageSystemUri if given.
    ...        Similar to storage_pool.Get Storage Pool URI
    [Arguments]    ${spName}    ${ssName}=${None}
    ${ssUri} =    Run Keyword If    '${ssName}'!='${None}'    Get Current Storage System URI    ${ssName}
    ${param} =    Set Variable If    '${ssName}'=='${None}'    ?query=name eq '${spName}'    ?query=name eq '${spName}' AND storageSystemUri eq '${ssUri}'
    ${resp} =    Fusion Api Get Storage Pools    param=${param}
    Return From Keyword If    ${resp['count']}==0    /rest/storage_pool_uri_${spName}_not_found
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Add List Of Storage Volume Templates
    [Documentation]    Add a list of storage Volume templates and return the responses.
    ...        Similar to storage_volume_template.Add Storage Volume Templates Async
    [Arguments]    ${svts}
    ${toAdd} =    Create List
    :FOR    ${svt}    IN    @{svts}
    \    ${status} =  Check For Existing Resource    SVT:${svt['name']}
    \    Run Keyword If    ${status}=='PASS'  Log    Storage Volume Template ${svt['name']} Already EXISTS in Appliance     WARN
    \    Run Keyword If    ${status}=='FAIL'    Append To List    ${toAdd}    ${svt}

    ${resplist} =  Create List
    :FOR    ${svt}    IN    @{toAdd}
    \    Log    Adding New Storage Volume Template Name, ${svt['name']}    console=yes
    \    ${resp} =    Add Single Storage Volume Template    ${svt}
    \    Append To List    ${resplist}    ${resp}
    [Return]    ${resplist}

Add Single Storage Volume Template
    [Documentation]    Add SINGLE storage Volume template and return the response.
    ...        Similar to storage_volume_template.Add Storage Volume Template
    [Arguments]     ${svt}
    ${payload} =    Create New Storage Volume Template POST Payload    ${svt}
    ${resp} =     Fusion Api Create Storage Volume Template     body=${payload}
    [Return]    ${resp}

Create New Storage Volume Template POST Payload
    [Documentation]    Create POST payload to add storage volume template.
    ...        Similar to storage_volume_template.Create Storage Volume Template POST Payload
    [Arguments]    ${svt}
    ${payload} =    common.Copy Dictionary    ${svt}
    ${properties} =  Get From Dictionary  ${svt}  properties

    # Setting storage_pool in properties
    ${storagePool} =    Get From Dictionary    ${properties}    storagePool
    ${storagePoolName} =    Set Variable    ${storagePool['default']}
    ${storagePoolUri} =    Get Current Storage Pool URI    ${storagePoolName}
    Set To Dictionary    ${storagePool}    default    ${storagePoolUri}
    Set To Dictionary    ${properties}    storagePool    ${storagePool}

    # Setting rootTemplateURI in payload
    ${rootTemplateUri} =    Get Storage Pool Root Template URI    ${storagePoolName}
    Set To Dictionary    ${payload}    rootTemplateUri    ${rootTemplateUri}

    # Setting snapshotPool in properties for StoreServ
    ${status}  ${rtn} =    Run Keyword and Ignore Error    Get From Dictionary    ${properties}    snapshotPool
    ${snapshotPool} =    Set Variable If    '${status}'=='PASS'    ${rtn}    Create Dictionary
    ${snapshotPoolUri} =    Run Keyword If    '${status}'=='PASS'    Get Current Storage Pool URI    ${snapshotPool['default']}
    Run Keyword If    '${status}'=='PASS'    Set To Dictionary    ${snapshotPool}    default    ${snapshotPoolUri}
    Run Keyword If    '${status}'=='PASS'    Set To Dictionary    ${properties}    snapshotPool    ${snapshotPool}

    # Setting properties in payload
    Set To Dictionary    ${payload}    properties    ${properties}
    [Return]  ${payload}

Get Storage Pool Root Template URI
    [Documentation]    Get root template URI by storage pool name.
    ...        Similar to storage_volume_template.Get Root Template URI by Storage Pool
    [Arguments]    ${spName}
    ${spUri} =    Get Current Storage Pool URI    ${spName}
    ${spDto} =    Fusion Api Get Resource    ${spUri}
    ${ssDto} =    Fusion Api Get Resource    ${spDto['storageSystemUri']}
    ${uri} =    Get Current Storage System Template URI    ${ssDto['name']}    param=?query=isRoot EQ true
    [Return]    ${uri}

Get Current Storage Volume Template URI
    [Documentation]    Get storage volume template URI by name.
    ...        Similar to storage_volume_template.Get Storage Volume Template URI
    [Arguments]    ${svtName}
    ${resp} =    Fusion Api Get Storage Volumes Template    param=?filter="'name'=='${svtName}'"
    Return From Keyword If    ${resp['count']}==0    /rest/storage_volume_template_uri_${svtName}_not_found
    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    [Return]    ${uri}

Add List Of Storage Volumes
    [Documentation]    Add a list of storage volumes and return the responses.
    ...        Similar to storage_volume.Add Storage Volumes Async
    [Arguments]    ${volumes}
    ${toAdd} =    Create List
    :FOR    ${vol}    IN    @{volumes}
    \    ${status} =    Check For Existing Resource    SVOL:${vol['properties']['name']}
    \    Run Keyword If    ${status}=='PASS'    Log    Storage Volume ${vol['properties']['name']} already EXIST in Appliance  WARN
    \    Run Keyword If    ${status}=='FAIL'    Append To List    ${toAdd}  ${vol}

    ${resplist} =    Create List
    :FOR    ${vol}    IN    @{toAdd}
    \    Log    Adding New Storage Volume Name, ${vol['properties']['name']}    console=yes
    \    ${resp} =    Add Single Storage Volume    ${vol}
    \    Append To List    ${resplist}    ${resp}
    [Return]    ${resplist}

Add Single Storage Volume
    [Documentation]    Add storage Volume and return the response.
    ...        Similar to storage_volume.Add Storage Volume
    [Arguments]     ${volume}
    ${payload} =    Create New Storage Volume POST Payload    ${volume}
    ${resp} =     Fusion Api Create Storage Volume    body=${payload}
    [Return]    ${resp}

Create New Storage Volume POST Payload
    [Documentation]    Create NEW POST payload to add storage volume.
    ...        Similar to storage_volume.Create Storage Volume POST Payload
    [Arguments]    ${volume}
    ${payload} =    common.Copy Dictionary    ${volume}
    ${properties} =    Get From Dictionary    ${volume}    properties
    ${storagePool} =    Get From Dictionary    ${properties}    storagePool
    ${storagePoolUri} =    Get Current Storage Pool URI    ${storagePool}
    Set To Dictionary    ${properties}    storagePool    ${storagePoolUri}

    # Setting templateURI in payload
    ${template} =  Get From Dictionary    ${volume}    templateUri
    ${uri1} =    Run Keyword If    '${template}'=='ROOT'    Get Storage Pool Root Template URI    ${storagePool}
    ${uri2} =    Run Keyword If    '${template}'!='ROOT'    Get Current Storage Volume Template URI    ${template}
    ${templateUri} =    Set Variable If    '${template}'=='ROOT'   ${uri1}    ${uri2}
    Set To Dictionary    ${payload}    templateUri    ${templateUri}

    # Setting snapshotPool in properties for StoreServ
    ${status}    ${rtn} =    Run Keyword and Ignore Error    Get From Dictionary    ${properties}    snapshotPool
    ${snapshotPool} =  Set Variable If    '${status}'=='PASS'    ${rtn}    ${None}
    ${snapshotPoolUri} =    Run Keyword If    '${status}'=='PASS'    Get Current Storage Pool URI    ${snapshotPool}
    Run keyword if   '${status}'=='PASS'    Set To Dictionary    ${properties}    snapshotPool    ${snapshotPoolUri}

    # Setting properties in payload
    Set To Dictionary    ${payload}    properties    ${properties}
    [Return]    ${payload}

##########################################
# LOCAL PE - REMOVAL of STORAGE RELATED KEYWORDS
##########################################
Remove ALL Current Appliance Storage Volume Templates
    [Documentation]    Query the appliance for all storage volume templates, remove them, and return the responses.
    ...                        Similar to storage_volume_template.Remove ALL Storage Volume Templates Async
    Log    Removing All CURRENT Storage Volume Templates    console=yes
    ${resplist} =    Create List
    ${svts} =    Fusion Api Get Storage Volumes Template    param=?sort=name:ascending
    :FOR    ${svt}    IN    @{svts['members']}
    \    Log    Removing Current Storage Volume Template Name, ${svt['name']}    console=yes
    \    ${headers} =    Fusion Api Get Headers
    \    Set To Dictionary    ${headers}    If-Match    ${svt['eTag']}
    \    ${resp} =    Fusion Api Delete Storage Volume Template    uri=${svt['uri']}    headers=${headers}
    \    Append To List    ${resplist}    ${resp}
    [Return]    ${resplist}

Remove ALL Current Appliance Storage Volumes
    [Documentation]    Query the appliance for all storage volumes, remove them, and return the responses.
    ...             When ${param} set to ?suppressDeviceUpdates=true, volumes will be removed from Oneview only.
    ...             When ${param} set to ?suppressDeviceUpdates=false, volumes will be removed from Oneview and storage system.
    ...             Similar to storage_volume.Remove ALL Storage Volumes Async
    [Arguments]    ${param}
    Log      Removing ALL CURRENT Storage Volumes    console=yes
    ${resplist} =    Create List
    ${storage_vols} =    Fusion Api Get Storage Volumes    param=?sort=name:ascending
    :FOR    ${vol}    IN    @{storage_vols['members']}
    \    ${msg} =    Set Variable If    '${param}'=='?suppressDeviceUpdates=true'  from Oneview only  from Oneview and storage system
    \    Log    Removing Current Storage Volume Name, ${vol['name']} ${msg}    console=yes
    \    ${headers} =    Fusion Api Get Headers
    \    Set To Dictionary    ${headers}    If-Match    ${vol['eTag']}
    \    ${resp} =     Fusion Api Delete Storage Volume    uri=${vol['uri']}    param=${param}    headers=${headers}
    \    Append To List    ${resplist}    ${resp}
    [Return]    ${resplist}

Remove ALL Current Appliance Storage Systems
    [Documentation]    Query the appliance for all storage systems, remove them, and return the responses.
    ...             Similar to storage_system.Remove ALL Storage Systems Async
    Log    Removing ALL CURRENT Storage Systems    console=yes
    ${resplist} =    Create List
    ${storage_systems} =    Fusion Api Get Storage System    param=?sort=name:ascending
    Run Keyword If    ${storage_systems['count']}==0    Log    NO Storage Systems EXIST Currently To Delete    WARN
    :FOR    ${ss}    IN    @{storage_systems['members']}
    \    Log    Removing Current Storage System Name, ${ss['name']}    console=yes
    \    ${headers} =  Fusion Api Get Headers
    \    Set To Dictionary  ${headers}  If-Match  ${ss['eTag']}
    \    ${resp} =     Fusion Api Delete Storage System    uri=${ss['uri']}  headers=${headers}
    \    Append To List    ${resplist}    ${resp}
    [return]    ${resplist}

Power OFF Server Blade Bay
    [Documentation]    Querys the appliance for a Server by bay and then Powers them off (ORIG - Power OFF Server Bay)
    [Arguments]     ${bay}
    Log    Powering off server bay :${bay}    console=yes
    ${body} =   Create Dictionary   powerState=Off
    ...              powerControl=PressAndHold
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${server}   IN  @{servers['members']}
    \    Continue For Loop If    ${server['position']}!= ${bay}
    \    Exit For Loop If    '${server['powerState']}'=='Off'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State     body=${body}    uri=${server['uri']}
   \    ${task} =    Wait For TaskType Success State    ${resp}     240s    5s

Power ON Server Blade Bay
    [Documentation]    Querys the appliance for a server by bay and then Powers it on (ORIG - Power ON Server Bay)
    [Arguments]     ${bay}
    Log     Powering on server bay :${bay}    console=yes
    ${body} =    Create Dictionary    powerState=On
    ...                               powerControl=MomentaryPress
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${s}    IN    @{servers['members']}
    \     Continue For Loop If    ${s['position']} != ${bay}
    \     Exit For Loop If    '${s['powerState']}'=='On'
    \     ${resp} =   Fusion Api Edit Server Hardware Power State    body=${body}    uri=${s['uri']}
    \     ${task} =    Wait For TaskType Success State    ${resp}    240s    10s

Remove Server Profile Blade Bay
    [Documentation]    Querys the appliance for a particular bay Server Profiles and then removes it (ORIG- Remove Server Profile Bay)
    [Arguments]    ${bay}
    ${profile_uri}=    Get Server Hardware Profile URI    ${bay}
    ${resp} =    Fusion Api Delete Server Profile    uri=${profile_uri}
    ${task} =    Wait For TaskType Success State    ${resp}    240s    10s
    