*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             SSHLibrary
Library             String

*** Keywords ***
# ############################
# Mezz Keywords    #
# ############################
Get Adapter Mezz Bay List
    [Documentation]   Keyword to retrieve Bronco Mezz bay list from the Server info
    [Arguments]    ${server_bay}    ${mezz_type}
    ${mezz_bay_list}=    Create List
    ${server_bay_info}=    Get Server Information    ${server_bay}
    ${adapter_model}=    Get Adapter Name From List    ${mezz_type}    ${Tbird_Adapters}
    ${port_map}=     Get From Dictionary    ${server_bay_info}    portMap
    ${device_slots}=    Get From Dictionary    ${port_map}    deviceSlots
    ${l} =  Get Length  ${device_slots}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${device_slots_info} =     Get From List   ${device_slots}    ${x}
    \    ${mezz_name}=    Set Variable    ${device_slots_info['deviceName']}
    \    ${mezz_bay}=    Set Variable    ${device_slots_info['deviceNumber']}
    \    Run Keyword If    '${mezz_name}' == '${adapter_model}'    Append To List    ${mezz_bay_list}    ${mezz_bay}
    [Return]    ${mezz_bay_list}

Get Adapter Mezz Bay List for C7000
    [Documentation]   Keyword to retrieve Mezz bay list from the Server info for C7000 enclosures
    [Arguments]    ${server_bay}    ${mezz_type}
    ${mezz_bay_list}=    Create List
    ${server_bay_info}=    Get Server Information    ${server_bay}
    ${adapter_model}=    Get Adapter Name From List    ${mezz_type}    ${C7000_Adapters}
    ${port_map}=     Get From Dictionary    ${server_bay_info}    portMap
    ${device_slots}=    Get From Dictionary    ${port_map}    deviceSlots
    ${length} =  Get Length  ${device_slots}
    :FOR    ${slot_number}    IN RANGE    0   ${length}
    \    ${device_slots_info} =     Get From List   ${device_slots}    ${slot_number}
    \    ${mezz_name}=    Set Variable    ${device_slots_info['deviceName']}
    \    ${mezz_bay}=    Set Variable    ${device_slots_info['deviceNumber']}
    \    Run Keyword If    '${mezz_name}' == '${adapter_model}'    Append To List    ${mezz_bay_list}    ${mezz_bay}
    [Return]    ${mezz_bay_list}

Get Blade Server Info From iLO
    [Documentation]   Keyword to retrieve blade's iLO information
    [Arguments]    ${server_bay_info}
    ${ilo_ip}=    Get Server iLO Address    ${server_bay_info}
    ${status}=    Login to iLO ipv4     ${ilo_ip}    ${iLO_UserName}    ${iLO_Password}
    Run Keyword if    '${status}'=='FAIL'    Fail  msg:Failed to login to iLO
    ${ilo_info}=    Get iLO Server Object
    [Return]    ${ilo_info}

Get Mezz Bay Info
    [Documentation]   Keyword to retrieve Mezz bay info from the Server info based on Mezz slot
    [Arguments]    ${server_bay_info}    ${mezz_bay}
    ${port_map}=    Get From Dictionary    ${server_bay_info}    portMap
    ${device_slots}=    Get From Dictionary    ${port_map}    deviceSlots
    ${l} =  Get Length  ${device_slots}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${device_slots_info} =     Get From List   ${device_slots}    ${x}
    \    ${mezz_bay_slot}=    Set Variable    ${device_slots_info['deviceNumber']}
    \    ${mezz_bay_info}=    Run Keyword If    ${mezz_bay_slot}==${mezz_bay}    Exit For Loop
    [Return]    ${device_slots_info}

Get Adapter Server Bay List
    [Documentation]   Keyword to retrieve Server bay list from the Enclosure with particulare adapter type
    [Arguments]    ${mezz_type}
    ${server_list}=    Create List
    ${bay_list}=    Get Server Hardware Bay List
    :FOR    ${x}    IN    @{bay_list}
    \    ${mezz_list}=    Get Adapter Mezz Bay List    ${x}    ${mezz_type}
    \    ${status}=    Run Keyword and Return Status    Should Not Be Empty    ${mezz_list}
    \    Run Keyword If    ${status}    Append To List    ${server_list}    ${x}
    [Return]    ${server_list}

Get Adapter Server Bay List for C7000
    [Documentation]   Keyword to retrieve Server bay list from the C7000 Enclosure with particulare adapter type
    [Arguments]    ${mezz_type}
    ${server_list}=    Create List
    ${bay_list}=    Get Server Hardware Bay List
    :FOR    ${bay}    IN    @{bay_list}
    \    ${mezz_list}=    Get Adapter Mezz Bay List for C7000    ${bay}    ${mezz_type}
    \    ${status}=    Run Keyword and Return Status    Should Not Be Empty    ${mezz_list}
    \    Run Keyword If    ${status}    Append To List    ${server_list}    ${bay}
    [Return]    ${server_list}

Get CNA Mezz Server Bay List
    [Documentation]   Keyword to retrieve CNA Mezz Server bay list from the Enclosure
    ${bronco_list}=    Get Adapter Server Bay List    Bronco
    ${quiz_list}=    Get Adapter Server Bay List    Quiz
    ${cna_list}=    Combine Lists    ${bronco_list}  ${quiz_list}
    [Return]    ${cna_list}

Get HBA Mezz Server Bay List
    [Documentation]   Keyword to retrieve HBA Mezz Server bay list from the Enclosure
    ${quartz_list}=    Get Adapter Server Bay List    Quartz
    ${electron_list}=    Get Adapter Server Bay List    Electron
    ${hba_list}=    Combine Lists    ${quartz_list}  ${electron_list}
    ${hba_list}=    Remove Duplicates    ${hba_list}
    [Return]    ${hba_list}

Get HBA Mezz Server Bay List for C7000
    [Documentation]   Keyword to retrieve HBA Mezz Server Bay list from the C7000 enclosure
    ${hba_list}=    Create List
    ${code_names}=    Get Dictionary Keys    ${C7000_HBA_models}
    :FOR    ${name}    IN    @{code_names}
    \    ${server_list}=    Get Adapter Server Bay List for C7000    ${name}
    \    ${hba_list}=    Combine Lists    ${hba_list}    ${server_list}
    ${hba_list}=    Remove Duplicates    ${hba_list}
    [Return]    ${hba_list}

Get Adapter Name from List
    [Documentation]    Get name and model of Adapter under test
    [Arguments]    ${Adapter}  ${Adapter_Models}
    :FOR    ${x}    IN    @{Adapter_Models}
    \    ${Adapter_Model} =  Get From Dictionary    ${x['${Adapter}']}    model
    [Return]    ${Adapter_Model}

Get Server Bay Based on Adapter Model
    [Documentation]    Locate server bay based on specified adapter and server type
    [Arguments]    ${Adapter_Models}
    ${Adapter_Model} =  Get Adapter Name from List    ${Adapter_Name}  ${Adapter_Models}
    ${server_list} =  Get Server Hardware Bay List
    Should Not Be Empty    ${server_list}    msg=No server present in the enclosure
    ${bay_list} =  Get Adapter Bay List    ${server_list}  ${Adapter_Model}
    Should Not Be Empty    ${bay_list}    msg=No server with ${Adapter_Name} adapter present in the enclosure
    [Return]    ${bay_list}

Get Server Bay Based on Server Type
    [Documentation]    Locate server bay based on specified adapter and server type
    [Arguments]    ${Adapter_Name}  ${Adapter_Models}  ${Server_Type}
    ${Adapter_Model} =  Get Adapter Name from List    ${Adapter_Name}  ${Adapter_Models}
    ${ServerType_list} =  Get Server Type List    ${Server_Type}
    Should Not Be Empty    ${ServerType_list}    msg=No ${Server_Type} server present in the enclosure
    ${bay_list} =  Get Adapter Bay List    ${ServerType_list}  ${Adapter_Model}
    Should Not Be Empty    ${bay_list}    msg=No ${Server_Type} server with ${Adapter_Name} adapter present in the enclosure
    [Return]    ${bay_list}

Verify Adapter Support 8PF From List
    [Documentation]    Get name and model of Adapter under test
    [Arguments]    ${Adapter}  ${Adapter_8PF_Models}
    :FOR    ${x}    IN    @{Adapter_8PF_Models}
    \    ${Adapter_Model} =  Get From Dictionary    ${x}    ${Adapter}
    [Return]    ${Adapter_Model}

Get Adapter Bay List
    [Documentation]   Keyword to retrieve Adapter bay list from the Server info
    [Arguments]    ${bay_list}  ${adapter_model}
    ${adapter_list} =   Create List
    :FOR    ${bay}   IN    @{baylist}
    \    ${info}=    Get Server Information    ${bay}
    \    ${port_map}=     Get From Dictionary    ${info}    portMap
    \    ${device_slots}=    Get From Dictionary    ${port_map}    deviceSlots
    \    ${device_name} =  Get DeviceName from Fusion  ${device_slots}  ${adapter_model}
    \    ${result} =   Run Keyword and Return Status    List should contain value  ${device_name}  ${adapter_model}
    \    Run Keyword If  ${result}   Append To List    ${adapter_list}    ${bay}
    [Return]    ${adapter_list}

Get DeviceName from Fusion
    [Documentation]   Keyword to retrieve DeviceName list from the Server info
    [Arguments]    ${device_slots}  ${adapter_model}
    ${devicename_list} =  Create List
    ${l} =  Get Length  ${device_slots}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${device_slots_info} =     Get From List   ${device_slots}    ${x}
    \    ${device_name}=    Get From Dictionary    ${device_slots_info}  deviceName
    \    Run Keyword If    '${device_name}' == '${adapter_model}'    Append To List  ${devicename_list}    ${device_slots_info['deviceName']}
    [Return]    ${devicename_list}

Get PhysicalPorts
    [Documentation]    Query OV for physicalPorts from Hardware Server
    [Arguments]    ${device_slots}  ${adapter_model}  ${virtualPorts_expected}
    ${physicalPorts_list} =  Create List
    ${l} =  Get Length  ${device_slots}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${device_slots_info} =     Get From List   ${device_slots}    ${x}
    \    ${device_name}=    Get From Dictionary    ${device_slots_info}  deviceName
    \    ${physicalPorts} =  Get From Dictionary    ${device_slots_info}   physicalPorts
    \    ${virtualPorts} =  Run Keyword If    '${device_name}'=='${adapter_model}'    Get VirtualPorts  ${physicalPorts}  ${virtualPorts_expected}
    [Return]    ${virtualPorts}

Get VirtualPorts
    [Documentation]    Query OV for virtualPorts from Hardware and verify againsted expected virtual ports
    [Arguments]    ${physicalPorts}  ${virtualPorts_expected}
    ${virtualPorts_list} =  Create List
    ${virtualPorts_total} =  Set Variable  0
    ${l} =  Get Length  ${physicalPorts}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${port_info} =  Get From List   ${physicalPorts}    ${x}
    \    ${virtualPorts} =  Get From Dictionary     ${port_info}    virtualPorts
    \    Append To List   ${virtualPorts_list}  ${virtualPorts}
    \    ${virtualPorts_count} =  Get Length    ${virtualPorts}
    \    Convert to Integer  ${virtualPorts_count}
    \    ${virtualPorts_sum} =  Evaluate  ${virtualPorts_total}+${virtualPorts_count}
    \    ${virtualPorts_total} =  Set Variable  ${virtualPorts_sum}
    Should Be Equal As Integers    ${virtualPorts_total}    ${virtualPorts_expected}
    Log    ${virtualPorts_total} Virtual Ports Found    console=yes
    [Return]  ${virtualPorts_total}

Get Adapter Physical Function Type from List
    [Documentation]    Check adapter type from list and set variable to 16 virtual ports or 8 virtual ports
    ${adapter_status} =  Get Matches    ${Adapter_8PF_Models[0]}  ${Adapter_Name}
    ${status_length} =  Get Length    ${adapter_status}
    ${adapter_pf_type} =  Set Variable If    ${status_length}>0    16  8
    [Return]    ${adapter_pf_type}

Set Connection for Primary or Secondary Boot
    [Documentation]    Determine the physical function and obtain connections from variable
    [Arguments]    ${4pf_connection}    ${8pf_connection}
    ${adapter_pf_type} =  Get Adapter Physical Function Type from List
    ${connections} =  Set Variable If    ${adapter_pf_type}==8    ${4pf_connection}
    ...    ${adapter_pf_type}==16    ${8pf_connection}
    [Return]    ${connections['connections']}

Evaluate Number of Virtual Ports Based on Connection Type
    [Documentation]   Evaluate Number of Virtual Ports Based on Connection Type
    [Arguments]    ${connection_type}
    ${number_of_ports} =  Get Adapter Physical Function Type from List
    ${number_of_ports_fcoe_iscsi} =  Evaluate  ${number_of_ports} -2
    ${final_ports_count} =  Run Keyword If  '${connection_type}'=='FCOE'  Set Variable  ${number_of_ports_fcoe_iscsi}
    ...  ELSE IF    '${connection_type}'=='ISCSI'     Set Variable     ${number_of_ports_fcoe_iscsi}
    ...  ELSE IF    '${connection_type}'=='ENET'    Set Variable    ${number_of_ports}
    ${final_ports_count} =  Convert to Integer  ${final_ports_count}
    [Return]    ${final_ports_count}

Get Adapter Field Information
    [Documentation]    Keyword to retrieve a particular adapter SHT field info
    ...
    ...    Example:
    ...            |    ${mezz_sht_info}    |    Get Adapter Field Information    |    <server_bay>    |    <adapter_mezz_slot>    |    ${SHT_field}    |
    [Arguments]    ${server_bay}    ${adapter_mezz_slot}    ${SHT_field}
    ${server_info}=    Get Server Information    ${server_bay}
    ${sht_info}=    Get Server HW Type Info    ${server_info}
    ${mezz_sht_info}=    Get SHT Adapter Info   ${sht_info}    ${adapter_mezz_slot}
    ${field_value}=    Get From Dictionary     ${mezz_sht_info}    ${SHT_field}
    [Return]    ${field_value}

Get Adapters Present In All Slots
    [Documentation]    Keyword to get list of adapters name and adapter bay numbers of adapters present in all slots
    [Arguments]    ${Server_Bay}
    ${adapter_list}=    Create List
    ${deviceNumbers}=    Create List
    ${info}=    Get Server Info    ${Server_Bay}
    ${port_map}=    Get From Dictionary    ${info}    portMap
    ${device_slots}=    Get From Dictionary    ${port_map}    deviceSlots
    ${l}=    Get Length  ${device_slots}
    :FOR    ${device}    IN RANGE    0    ${l}
    \    ${deviceName}=    Get From Dictionary    ${device_slots[${device}]}    deviceName
    \    ${deviceNumber}=    Get From Dictionary    ${device_slots[${device}]}    deviceNumber
    \    ${result}=    Run Keyword and Return Status    Should Not Be Empty    ${deviceName}
    \    Run Keyword If    ${result}    Append To List    ${adapter_list}    ${deviceName}
    \    Run Keyword If    ${result}    Append To List    ${deviceNumbers}    ${deviceNumber}
    [Return]    ${adapter_list}    ${deviceNumbers}

# ############################
# Server Hardware Keywords    #
# ############################

Refresh Server Hardware Bay
    [Documentation]   Keyword to refresh the Server Hardware based on bay num
    [Arguments]    ${bay_num}
    ${bay_num}=    Convert To Integer    ${bay_num}
    ${resp} =   fusion api get server hardware
    ${servers} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${servers}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${server} =     Get From List   ${servers}    ${x}
    \    ${server_bay}=    Get From Dictionary    ${server}    position
    \    Run Keyword If    ${bay_num}!=${server_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${server}   uri
    \    ${server_info}=    fusion api refresh server hardware    uri=${uri}
    \    Wait For Task   ${server_info}     8min   10s
    [Return]    ${server_info}

Get Server Profile Info
    [Documentation]   Keyword to retrieve Server Profile Info for Server Information
    [Arguments]    ${server_bay_info}
    ${uri}=    Get From Dictionary     ${server_bay_info}   serverProfileUri
    ${server_profile_info}=    fusion api get server profiles    uri=${uri}
    [Return]    ${server_profile_info}

Get Server HW URI
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server hardware and returns the uri for particular server bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${resp} =   fusion api get server hardware
    ${servers} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${servers}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${server} =     Get From List   ${servers}    ${x}
    \    ${server_bay}=    Get From Dictionary    ${server}    position
    \    Run Keyword If    ${bay}!=${server_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${server}   uri
    [Return]    ${uri}

Get Server HW Type Info
    [Documentation]   Keyword to retrieve Server HW Type Info for Server Information
    [Arguments]    ${server_bay_info}
    ${uri}=    Get From Dictionary    ${server_bay_info}    serverHardwareTypeUri
    ${server_hw_type_info}=    fusion api get server hardware types    uri=${uri}
    [Return]    ${server_hw_type_info}

Get Server Hardware Profile URI
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server hardware and returns the server profile uri for particular server bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${resp} =   fusion api get server hardware
    ${servers} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${servers}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${server} =     Get From List   ${servers}    ${x}
    \    ${server_bay}=    Get From Dictionary    ${server}    position
    \    Run Keyword If    ${bay}!=${server_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${server}   serverProfileUri
    [Return]    ${uri}

Get Server iLO Address
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${server_bay_info}
    ${mpHostInfo}=    Get From Dictionary    ${server_bay_info}    mpHostInfo
    ${mpIpAddresses} =    Get From Dictionary    ${mpHostInfo}    mpIpAddresses
    ${l} =  Get Length  ${mpIpAddresses}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${mpIpAddresses}    ${x}
    \    ${type}=    Get From Dictionary    ${enc}    type
    \    ${address}=    Run Keyword If    '${type}'=='DHCP' or '${type}'=='Undefined'   Get From Dictionary   ${enc}  address
    \    Run Keyword If    '${type}'=='DHCP' or '${type}'=='Undefined'    Exit For Loop
    [Return]    ${address}

Get Server iLO IP
    [Documentation]   Keyword to retrieve iLO IP for server bay
    [Arguments]    ${bay}
    ${server_info}=    Get Server Information    ${bay}
    ${ilo_ip}=    Get Server iLO Address    ${server_info}
    [Return]    ${ilo_ip}

Verify IP Addresses from List of Servers
    [Documentation]   Get IP Addresses from OS from list of servers
    [Arguments]    ${bay_list}
    :FOR  ${x}  IN  @{bay_list}
    \    ${ilo_ip}=    Get Server iLO IP    ${x}
    \    ${status}=  Login to iLO ipv4    ${ilo_ip}    ${iLO_UserName}    ${iLO_Password}
    \    Run Keyword if    '${status}'=='FAIL'    Fail  msg:Failed to login to iLO
    \    ${os_ip_addresses}=  Get IP Addresses from OS
    \    Ping to IP Addresses  ${os_ip_addresses}
    [Return]    ${os_ip_addresses}

Get IP Addresses from OS
    [Documentation]    Get port IP Addresses from OS
    ${os_ip_addresses} =  Create List
    ${adapter_info}=    iLO RIS Get Object    /redfish/v1/Systems/1/${iLO_Adapter_Directory}/${iLO_Adapter_Position}
    ${physical_ports}=    Get From Dictionary    ${adapter_info}    PhysicalPorts
    :FOR  ${x}  IN  @{physical_ports}
    \    ${ipv4_addresses}=    Get From Dictionary    ${x}    IPv4Addresses
    \    ${ipv4_addresses_dict}=    Get From List    ${ipv4_addresses}    0
    \    ${address}=    Get From Dictionary    ${ipv4_addresses_dict}    Address
    \    Run Keyword If    '${address}'!='None'    Append to List    ${os_ip_addresses}  ${address}
    [Return]    ${os_ip_addresses}

Compare Mac Addresses from Fusion and iLO
    [Documentation]   Compare Mac Addresses from Fusion and iLO
    [Arguments]    ${bay_list}
    :FOR  ${x}  IN  @{bay_list}
    \   ${ilo_ip}=    Get Server iLO IP    ${x}
    \   Wait for iLO Server POST Complete    ${ilo_ip}
    \   ${mac_addresses_fusion} =  Get Mac Addresses from Fusion  ${bay_list}
    \   List Should Not Contain Duplicates  ${mac_addresses_fusion}  msg=Duplicate Mac Addresses Found
    \   ${mac_addresses_ilo} =  Get Mac Addresses from iLO RIS
    \   List Should Not Contain Duplicates  ${mac_addresses_ilo}  msg=Duplicate Mac Addresses Found
    List Should Contain Sub List    ${mac_addresses_fusion}  ${mac_addresses_ilo}   msg=List of Mac Addresses does not match
    [Return]    ${mac_addresses_ilo}

Get Mac Addresses from iLO RIS
    [Documentation]    Get Mac Addresses from iLO RIS
    ${mac_addresses_ilo} =  Create List
    ${adapter_info}=    iLO RIS Get Object    /redfish/v1/Systems/1/${iLO_Adapter_Directory}/${iLO_Adapter_Position}
    ${physical_ports}=    Get From Dictionary    ${adapter_info}    PhysicalPorts
    :FOR  ${x}  IN  @{physical_ports}
    \    ${mac_address}=    Get From Dictionary    ${x}    MacAddress
    \    Run Keyword If    '${mac_address}'!='None'    Append to List    ${mac_addresses_ilo}  ${mac_address}
    [Return]    ${mac_addresses_ilo}

Get Mac Addresses from Fusion
    [Documentation]    Get Mac Addresses from Fusion
    [Arguments]  ${bay_list}
    :FOR  ${x}  IN  @{bay_list}
    \    ${server_info}=    Get Server Information    ${x}
    \    ${profile}=    Get Server Profile Info    ${server_info}
    \    ${connections} =  Get From Dictionary  ${profile['connectionSettings']}  connections
    \    ${mac_addresses_fusion} =  Get Mac Addresses from Connections    ${connections}
    [Return]   ${mac_addresses_fusion}

Get Mac Addresses from Connections
    [Documentation]    Get Mac Addresses from Connections
    [Arguments]  ${connections}
    ${mac_addresses} =  Create List
    :FOR   ${connection}   IN   @{connections}
    \    ${mac} =   Get From Dictionary  ${connection}    mac
    \    Append to List    ${mac_addresses}    ${mac}
    Should Not Be Empty  ${mac_addresses}    msg=mac address not present
    [Return]   ${mac_addresses}

Wait for Server OS to Boot Up
    [Documentation]    Wait for Server OS IP from iLO RIS to be visible thorugh loop
    [Arguments]    ${connection_type}
    : For    ${index}   In Range    1    40
    \    ${final_ports_count}=  Evaluate Number of Virtual Ports Based on Connection Type    ${connection_type}
    \    ${status}    ${os_ip_addresses}=    Run Keyword and Ignore Error   Get IP Addresses from OS
    \    ${count_ip_addresses}=  Get Length    ${os_ip_addresses}
    \    Run Keyword If    ${count_ip_addresses}==0    Sleep  30
    \    Run Keyword IF    ${count_ip_addresses}==${final_ports_count}    Exit For Loop
    \    Run Keyword If    ${count_ip_addresses}>0 or ${count_ip_addresses}<${final_ports_count}    Sleep  30
    Should Be True    ${os_ip_addresses} is not ${None}    msg=Server was unable to boot up to OS
    Should Not Be Empty    ${os_ip_addresses}   msg=Server was unable to boot up to OS
    [Return]    ${os_ip_addresses}

Ping to IP Addresses
    [Documentation]   Ping to IP addresses from OS
    [Arguments]    ${os_ip_addresses}
    :FOR    ${ip}    IN    @{os_ip_addresses}
    \    Log    Pinging IP addresses    console=yes
    \    ${ping_status}=     Run And Return RC   ping ${ip} -n 1
    \    ${ping_response}=    Run Keyword If    ${ping_status}==0    Set Variable     True
    \    Should be True   ${ping_response}     msg=Unable to ping the server OS IP

Wait For Server to Power ON
    [Documentation]    Querys the appliance for a server by bay and waits for it untill power is on
    [Arguments]     ${bay}
    Log     Verify power on status for server in bay :${bay}    console=yes
    ${uri}=    Get Server HW URI    ${bay}
    : For    ${index}   In Range    1    30
    \     ${server_info}=    fusion api get server hardware    uri=${uri}
    \     Exit For Loop If    '${server_info['powerState']}'=='On'
    \     Sleep    40

Power on Server and Verify IP Addresses from OS
    [Documentation]   Get IP Addresses from OS from list of servers for FCOE or iSCSI
    [Arguments]    ${bay_list}  ${connection_type}
    ${final_ports_count}=  Evaluate Number of Virtual Ports Based on Connection Type    ${connection_type}
    :FOR  ${x}  IN  @{bay_list}
    \    Power ON Server Blade Bay    ${x}
    \    Sleep    240
    \    Wait for Server to Power on    ${x}
    \    ${ilo_ip}=    Get Server iLO IP    ${x}
    \    Wait for iLO Server POST Complete    ${ilo_ip}
    \    ${os_ip_addresses}=  Wait for Server OS to Boot Up    ${connection_type}
    \    ${count_ip_addresses}=  Get Length    ${os_ip_addresses}
    #\    Should Be Equal    ${final_ports_count}    ${count_ip_addresses}    msg=Not enough IP addresses
    \    Ping to IP Addresses  ${os_ip_addresses}
    [Return]    ${os_ip_addresses}

Verify Server Harware Information
    [Documentation]   Keyword to verify Server Hardware Information with power state
    [Arguments]    ${server_bay_info}    ${server_power}    ${hw_state}
    #Server Hardware Information
    ${state}=    Get From Dictionary    ${server_bay_info}    state
    ${powerState}=    Get From Dictionary    ${server_bay_info}    powerState
    ${serial_number}=    Get From Dictionary    ${server_bay_info}    serialNumber
    ${model}=    Get From Dictionary    ${server_bay_info}    model
    ${sh_type}=    Get From Dictionary    ${server_bay_info}    serverHardwareTypeUri
    ${location_uri}=    Get From Dictionary    ${server_bay_info}    locationUri
    ${processor_count}=    Get From Dictionary    ${server_bay_info}    processorCount
    ${processor_type}=    Get From Dictionary    ${server_bay_info}    processorType
    ${memoryMb}=    Get From Dictionary    ${server_bay_info}    memoryMb
    ${memoryGb}=    Evaluate    ${memoryMb}/1024

    # iLO Information
    ${ilo_info}=    Get iLO Server Object
    ${ilo_powerstate}=    Get From Dictionary    ${ilo_info}    PowerState
    ${ilo_model}=    Get From Dictionary    ${ilo_info}    Model
    ${ilo_sn}=    Get From Dictionary    ${ilo_info}    SerialNumber
    ${ilo_proc_count}=    Get From Dictionary    ${ilo_info}    ProcessorSummary.Count
    ${ilo_processorFamily}=     Get From Dictionary    ${ilo_info}    ProcessorSummary.Model
    ${ilo_memory}=    Get From Dictionary    ${ilo_info}    MemorySummary.TotalSystemMemoryGiB
    ${ilo_chassis}=    Get iLO Chassis Object
    ${iLo_bay}=    Get From Dictionary    ${ilo_chassis}    Oem.Hp.BayNumber

    #Verification of Server hardware information with iLO data
    Should Be Equal    ${state}    ${hw_state}
    Should Be Equal    ${powerState}    ${ilo_powerstate}
    Should Be Equal    ${model}    ${ilo_model}
    Should Not be Empty    ${sh_type}
    Should Be Equal    ${serial_number}     ${ilo_sn}
    Should Be Equal    ${processor_count}    ${ilo_proc_count}
    Should Be Equal    ${processor_type}    ${ilo_processorFamily}
    Should Be Equal    ${memoryGb}    ${ilo_memory}

    #Verifcation of desired powered state
    Should Be Equal    ${powerState}     ${server_power}

Verify Server Hardware With ILO
    [Documentation]   Keyword to verify Server Hardware Information against ILO
    [Arguments]    ${bay}
    ${server_info}=    Get Server Information    ${bay}
    ${server_info_ilo} =    Get Blade Server Info From iLO      ${server_info}
    Should Be Equal    ${server_info["powerState"]}    ${server_info_ilo["PowerState"]}
    Should Be Equal    ${server_info["model"]}    ${server_info_ilo["Model"]}
    Should Be Equal    ${server_info["serialNumber"]}    ${server_info_ilo["SerialNumber"]}
    Should Be Equal    ${server_info["processorCount"]}    ${server_info_ilo["ProcessorSummary.Count"]}
    Should Be Equal    ${server_info["processorType"]}    ${server_info_ilo["ProcessorSummary.Model"]}
    ${server_info_memoryGb}=     Evaluate    ${server_info["memoryMb"]}/1024
    Should Be Equal    ${server_info_memoryGb}    ${server_info_ilo["MemorySummary.TotalSystemMemoryGiB"]}
    Should Not be Empty    ${server_info["serverHardwareTypeUri"]}

Verify Mezz Port Information
    [Documentation]   Keyword to verify Server Hardware Mezz Port Information
    [Arguments]    ${server_bay_info}    ${mezz_list}
    ${icm_list}=    Get ICM Bay List
    ${icm_mezz_slot1_list}=    Create List    1  4
    ${icm_mezz_slot2_list}=    Create List    2  5
    ${icm_mezz_slot3_list}=    Create List    3  6
    :FOR    ${mezz_bay}    IN    @{mezz_list}
    \    ${icm_mezz_slot_list}=    Run Keyword If    ${mezz_bay} == 1    Compare Lists Value    ${icm_list}    ${icm_mezz_slot1_list}
    ...   ELSE IF    ${mezz_bay} == 2    Compare Lists Value    ${icm_list}    ${icm_mezz_slot2_list}
    ...   ELSE IF    ${mezz_bay} == 3    Compare Lists Value    ${icm_list}    ${icm_mezz_slot3_list}
    \    Log    ${icm_mezz_slot_list}
    \    ${mezz_info}=    Get Mezz Bay Info    ${server_bay_info}    ${mezz_bay}
    \    Log    ${mezz_info}
    \    Verify Mezz ICM Port Map    ${mezz_info}    ${icm_mezz_slot_list}

Verify Mezz ICM Port Map
    [Documentation]   Keyword to verify Server Hardware Mezz to ICM Port Mapping
    [Arguments]    ${mezz_info}    ${icm_list}
    ${port_list}=    Create List    1  2
    ${l} =  Get Length    ${port_list}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${port_number}=    Get From List    ${port_list}    ${x}
    \    ${mezz_port_info}=    Get Mezz Port Info    ${mezz_info}    ${port_number}
    \    ${mezz_port_icm_uri}=    Get From Dictionary    ${mezz_port_info}    interconnectUri
    \    ${icm_bay} =   Run Keyword If    '${mezz_port_icm_uri}'!='None'    Get From List    ${icm_list}    ${x}
    \    ${icm_info}=    Run Keyword If    '${mezz_port_icm_uri}'!='None'    Get ICM Info    ${icm_bay}
    \    ${icm_uri}=    Run Keyword If    '${mezz_port_icm_uri}'!='None'    Get From Dictionary    ${icm_info}    uri
    \    Run Keyword If    '${mezz_port_icm_uri}'!='None' and '${icm_uri}'!='None'    Should Be Equal    ${mezz_port_icm_uri}    ${icm_uri}
    \    Run Keyword If    '${mezz_port_icm_uri}'=='None'    Should Be Equal    '${icm_uri}'    'None'

Get Mezz Port Info
    [Documentation]   Keyword to retrieve Mezz Port Information
    [Arguments]    ${mezz_info}    ${port}
    ${physicalPorts}=    Get From Dictionary    ${mezz_info}    physicalPorts
    ${l} =  Get Length  ${physicalPorts}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${port_info} =     Get From List   ${physicalPorts}    ${x}
    \    ${portNumber}=    Get From Dictionary     ${port_info}    portNumber
    \    ${portNumber}=    Convert To Integer    ${portNumber}
    \    ${port}=    Convert To Integer    ${port}
    \    Run Keyword If    ${portNumber}==${port}    Exit For Loop
    [Return]    ${port_info}

Get SHT Adapter Info
    [Documentation]   Keyword to retrieve Server Hardware Type Information
    [Arguments]    ${sht_info}    ${mezz_slot}
    ${adapters}=    Get From Dictionary    ${sht_info}    adapters
    ${l} =  Get Length  ${adapters}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${adapter_info} =     Get From List   ${adapters}    ${x}
    \    ${slot}=    Get From Dictionary     ${adapter_info}    deviceNumber
    \    ${slot}=    Convert To Integer    ${slot}
    \    ${mezz_slot}=    Convert To Integer    ${mezz_slot}
    \    Run Keyword If    ${slot}==${mezz_slot}    Exit For Loop
    [Return]    ${adapter_info}

Get SHT Adapter Info for C7000
    [Documentation]   Keyword to retrieve Server Hardware Type Information in a C7000 enclosure
    [Arguments]    ${sht_info}    ${mezz_slot}
    ${adapters}=    Get From Dictionary    ${sht_info}    adapters
    ${length} =  Get Length  ${adapters}
    :FOR    ${slot_number}    IN RANGE    0   ${length}
    \    ${adapter_info} =     Get From List   ${adapters}    ${slot_number}
    \    ${slot}=    Get From Dictionary     ${adapter_info}    slot
    \    ${slot}=    Convert To Integer    ${slot}
    \    ${location}=    Get From Dictionary    ${adapter_info}    location
    \    ${mezz_slot}=    Convert To Integer    ${mezz_slot}
    \    Run Keyword If    ${slot}==${mezz_slot} and '${location}'=='Mezz'
    ...  ELSE IF    ${slot}==${mezz_slot} and '${location}'=='FLB'    Exit For Loop
    [Return]    ${adapter_info}

Get SHT Adapter Port Info
    [Documentation]   Keyword to retrieve Server Hardware Type Adapter Port Information
    [Arguments]    ${adapter_info}    ${port}
    ${ports}=    Get From Dictionary    ${adapter_info}    ports
    ${l} =  Get Length  ${ports}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${port_info} =     Get From List   ${ports}    ${x}
    \    ${number}=    Get From Dictionary     ${port_info}    number
    \    ${number}=    Convert To Integer    ${number}
    \    ${port}=    Convert To Integer    ${port}
    \    Run Keyword If    ${number}==${port}    Exit For Loop
    [Return]    ${port_info}

Verify SHT Adapter Info
    [Documentation]   Keyword to verify Server Hardware Type Adapter Information
    [Arguments]    ${server_info}    ${mezz_list}
    ${server_bay}=    Get From Dictionary    ${server_info}    position
    ${sht_info}=    Get Server HW Type Info    ${server_info}
    ${cna_capabality_list}=    Create List    Ethernet  FibreChannel
    ${hba_capabality_list}=    Create List    FibreChannel
    :FOR    ${mezz_bay}    IN    @{mezz_list}
    \    Log     Verifying SHT adapter details for server bay:${server_bay} with mezz slot:${mezz_bay}    console=yes
    \    ${sht_adapter_info}=    Get SHT Adapter Info    ${sht_info}    ${mezz_bay}
    \    ${model}=    Get From Dictionary     ${sht_adapter_info}    model
    \    ${physical_ports}=    Get From Dictionary     ${sht_adapter_info}    ports
    \    ${physical_ports}=    Get Length  ${physical_ports}
    \    ${avail_VFsSupported}=    Get From Dictionary    ${sht_adapter_info}    maxVFsSupported
    \    ${vf_increment}=    Get From Dictionary    ${sht_adapter_info}    minVFsIncrement
    \    ${capabalities}=    Get From Dictionary     ${sht_adapter_info}    capabilities
    \    ${port1}=    Get SHT Adapter Port Info    ${sht_adapter_info}    1
    \    ${maxSpeedMbps_port1}=    Get From Dictionary    ${port1}    maxSpeedMbps
    \    ${type_port1}=    Get From Dictionary    ${port1}    type
    \    ${virtualPorts1_info}=    Get From Dictionary    ${port1}    virtualPorts
    \    ${virtualPorts1}=    Get Length  ${virtualPorts1_info}
    \    ${port2}=    Get SHT Adapter Port Info    ${sht_adapter_info}    2
    \    ${maxSpeedMbps_port2}=    Get From Dictionary    ${port2}    maxSpeedMbps
    \    ${type_port2}=    Get From Dictionary    ${port2}    type
    \    ${virtualPorts2_info}=    Get From Dictionary    ${port2}    virtualPorts
    \    ${virtualPorts2}=    Get Length  ${virtualPorts2_info}
    \    ${virtual_ports}=     Evaluate    ${virtualPorts1}+${virtualPorts2}
    \    ${device_type}=    Run Keyword If    '${type_port1}' == 'Ethernet' and '${type_port2}' == 'Ethernet'    Set Variable    ${type_port1}
    ...  ELSE IF    '${type_port1}' == 'FibreChannel' and '${type_port2}' == 'FibreChannel'    Set Variable    ${type_port1}
    ...  ELSE    Set Variable    None
    \    ${max_port_speed}=     Run Keyword If    ${maxSpeedMbps_port1} == 20000 and ${maxSpeedMbps_port2} == 20000    Set Variable    ${maxSpeedMbps_port1}
    ...  ELSE IF    ${maxSpeedMbps_port1} == 10000 and ${maxSpeedMbps_port2} == 10000    Set Variable    ${maxSpeedMbps_port1}
    ...  ELSE IF    ${maxSpeedMbps_port1} == 16000 and ${maxSpeedMbps_port2} == 16000    Set Variable    ${maxSpeedMbps_port1}
    ...    ELSE    Set Variable    0
    \    ${mezz_info}=    Get Mezz Bay Info    ${server_info}    ${mezz_bay}
    \    ${mezz_model}=    Get From Dictionary    ${mezz_info}    deviceName
    \    Should Be Equal    ${model}    ${mezz_model}
    \    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO' or '${Test_Tag.upper()}'=='QUIZ' or '${Test_Tag.upper()}'=='EMBER'    Should Be Equal    ${device_type}    Ethernet
    ...  ELSE IF    '${Test_Tag.upper()}'=='QUARTZ' or '${Test_Tag.upper()}'=='ELECTRON'     Should Be Equal    ${device_type}    FibreChannel
    \    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO' or '${Test_Tag.upper()}'=='EMBER'    Should Be Equal As Integers    ${max_port_speed}    20000
    ...  ELSE IF    '${Test_Tag.upper()}'=='QUARTZ' or '${Test_Tag.upper()}'=='ELECTRON'   Should Be Equal As Integers    ${max_port_speed}    16000
    \    Should Be Equal As Integers    ${physical_ports}    2
    \    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO' or '${Test_Tag.upper()}'=='QUIZ'    Should Be Equal As Integers    ${virtualPorts}    8
    ...  ELSE IF    '${Test_Tag.upper()}'=='QUARTZ' or '${Test_Tag.upper()}'=='ELECTRON'    Should Be Equal As Integers    ${virtualPorts}    0
    ...    ELSE    Should Be Equal As Integers    ${virtualPorts}    16
    \    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO' or '${Test_Tag.upper()}'=='QUIZ'    Should Be Equal As Integers    ${avail_VFsSupported}    128
    ...  ELSE IF    '${Test_Tag.upper()}'=='QUARTZ' or '${Test_Tag.upper()}'=='ELECTRON'    Should Be Equal As Integers    ${avail_VFsSupported}    0
    ...    ELSE    Should Be Equal As Integers    ${avail_VFsSupported}    48
    \    Run Keyword If    '${Test_Tag.upper()}'=='QUARTZ' or '${Test_Tag.upper()}'=='ELECTRON'    Should Be Equal As Integers    ${${vf_increment}}    0
    ...  ELSE    Should Be Equal As Integers    ${${vf_increment}}    8
    \    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO' or '${Test_Tag.upper()}'=='QUIZ' or '${Test_Tag.upper()}'=='EMBER'    List Should Contain Sub List     ${capabalities}    ${cna_capabality_list}
    ...  ELSE    List Should Contain Sub List     ${capabalities}    ${hba_capabality_list}

Get Server State
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server hardware and returns the server state for particulare bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${server_info}=    Get Server Information    ${bay_num}
    ${state}=    Get From Dictionary    ${server_info}    state
    [Return]    ${state}

Get Server Status
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server hardware and returns the server status for particular server bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${server_info}=    Get Server Information    ${bay_num}
    ${status}=    Get From Dictionary    ${server_info}    status
    [Return]    ${status}

Get Server SerialNumber
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server hardware and returns the server serial number for particular server bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${server_info}=    Get Server Information    ${bay_num}
    ${serial_num}=    Get From Dictionary    ${server_info}    serialNumber
    [Return]    ${serial_num}

Get Server Profile Status
    [Arguments]     ${bay}
    [Documentation]    Querys the appliance for server profile uri and returns the server profile status for particular server bay
    ${bay_num}=    Convert To Integer    ${bay}
    ${server_info}=    Get Server Information    ${bay_num}
    ${serverProfileUri}=    Get From Dictionary    ${server_info}    serverProfileUri
    ${profile_info}=    fusion_api_get_server_profiles    uri=${serverProfileUri}
    ${status}=    Get From Dictionary    ${profile_info}    status
    [Return]    ${status}

Get Server OS IP from iLO RIS
    [Documentation]    Get Server OS IP from iLO RIS
    ${adapter_info}=    iLO RIS Get Object     /redfish/v1/Systems/1/${iLO_Adapter_Directory}/${iLO_Adapter_Position}
    ${physical_ports}=    Get From Dictionary    ${adapter_info}    PhysicalPorts
    ${port_dict} =    Get From List    ${physical_ports}    0
    ${ipv4_addresses}=    Get From Dictionary    ${port_dict}    IPv4Addresses
    ${ipv4_addresses_dict}=    Get From List    ${ipv4_addresses}    0
    ${Address}=    Get From Dictionary    ${ipv4_addresses_dict}    Address
    [Return]    ${Address}

Get Mezz FW From iLO RIS
    [Documentation]    Get Mezz card firmware from iLO RIS object
    ${adapter_info}=    iLO RIS Get Object     /redfish/v1/Systems/1/${iLO_Adapter_Directory}/${iLO_Adapter_Position}
    ${firmware_dict}=    Get From Dictionary    ${adapter_info}    Firmware
    ${current_dict}=    Get From Dictionary    ${firmware_dict}    Current
    ${version}=    Get From Dictionary    ${current_dict}    VersionString
    [Return]    ${version}

Verify Connection BW Online Update
    [Documentation]    To verify for connection with change in bandwidth during online update
    [Arguments]    ${bay}    ${os_ip}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    ${profile_uri}=    Get Server Hardware Profile URI    ${bay}
    ${server_profile_body}=    Build Edit Server Profile body     ${bay}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}
    Is Server OS IP accessible    ${os_ip}
    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    ${task_state} =    Get From dictionary     ${task}     taskState
    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Verify Connection BW Online Update with 3PAR
    [Documentation]    To verify for connection with change in bandwidth during online update
    [Arguments]    ${bay}    ${os_ip}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}    ${3partarget_wwpn}
    ${profile_uri}=    Get Server Hardware Profile URI    ${bay}
    ${server_profile_body}=    Build Edit Server Profile body SAN Storage   ${bay}  ${profile_body}  ${connection_type}  ${boot_Mode}  ${boot_order}  ${bandwidth}  ${3partarget_wwpn}
    Log    ${server_profile_body}
    ${etag_header}=    Get And Set Current Session Etag Value    ${profile_uri}
    ${resp}=  fusion api edit server profile  body=${server_profile_body}  uri=${profile_uri}  headers=${etag_header}
    #Is Server OS IP accessible    ${os_ip}
    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    ${task_state} =    Get From dictionary     ${task}     taskState
    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Verify Connection BW Online Update UEFI Mode
    [Documentation]    To verify for connection with change in bandwidth during online update in UEFI mode
    [Arguments]    ${bay}    ${os_ip}    ${bandwidth}     ${profile_body}
    ${profile_uri}=    Get Server Hardware Profile URI    ${bay}
    ${server_profile_body}=    Build Edit Server Profile body UEFI Mode     ${bay}    ${profile_body}    ${bandwidth}
    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}
    Is Server OS IP accessible    ${os_ip}
    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    ${task_state} =    Get From dictionary     ${task}     taskState
    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Verify Connection BW Online Update Legacy Mode
    [Documentation]    To verify for connection with change in bandwidth during online update in Legacy mode
    [Arguments]    ${bay}    ${os_ip}    ${bandwidth}     ${profile_body}
    ${profile_uri}=    Get Server Hardware Profile URI    ${bay}
    ${server_profile_body}=   Build Edit Server Profile body Legacy Mode     ${bay}    ${profile_body}    ${bandwidth}
    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}
    Is Server OS IP accessible    ${os_ip}
    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    ${task_state} =    Get From dictionary     ${task}     taskState
    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Change BW Values
    [Documentation]    To verify for connection with change in bandwidth during online update
    [Arguments]    ${bay_list}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    :FOR  ${x}  IN  @{bay_list}
    \    ${profile_uri}=    Get Server Hardware Profile URI    ${x}
    \    ${server_profile_body}=    Edit Server Profile body     ${x}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    \    ${etag_header}=    Get And Set Current Session Etag Value    ${profile_uri}
    \    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}    headers=${etag_header}
    \    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    \    ${task_state} =    Get From dictionary     ${task}     taskState
    \    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Get And Set Current Session Etag Value
    [Documentation]    This keyword will acquire current session etag value and added to current session header
    ...                in order to be use in fusion api edit server profile function call.
    [Arguments]    ${profile_uri}
    ${profile_resource}=    Fusion Api Get Resource    ${profile_uri}
    ${current_header}=    Fusion Api Get Headers
    Set To Dictionary     ${current_header}    If-Match    ${profile_resource['eTag']}
    [Return]    ${current_header}

Is Server OS IP accessible
    [Documentation]     Ping Server OS IP at multiple intervals
    [Arguments]    ${os_ip}
    : FOR     ${INDEX}    In Range    1    20
    \    ${ping_status}=     Run And Return RC   ping ${os_ip} -n 1
    \    ${ping_response}=    Run Keyword If    ${ping_status}==0    Set Variable     True
    \    Should be True   ${ping_response}     msg=Unable to ping the server OS IP
    \    Sleep    10

Wait for Server OS IP from iLO RIS
    [Documentation]    Wait for Server OS IP from iLO RIS to be visible thorugh loop
    : For    ${index}   In Range    1    20
    \    ${status}    ${ip}=    Run Keyword and Ignore Error    Get Server OS IP from iLO RIS
    \    ${ip_status}=    Run Keyword and Return Status    Should Not Be Empty    ${ip}
    \    Run Keyword If     '${status}'=='PASS' and ${ip_status}   Exit For Loop
    \   ...    ELSE    Sleep    30
    [Return]    ${ip}

Wait for iLO Server POST Complete
    [Documentation]    Wait for iLO Server to get state updated to 'Enable'
    [Arguments]    ${ilo_ip}
    ${status}=    Login to iLO ipv4    ${ilo_ip}    ${iLO_UserName}    ${iLO_Password}
    Run Keyword if    '${status}'=='FAIL'    Fail  msg:Failed to login to iLO
    Log    Waiting for Server to complete POST    console=yes
    : For    ${index}   In Range    1    30
    \    ${obj}=    Get iLO Server Object
    \    ${status}=    Get From Dictionary    ${obj}    Status.State
    \    Run Keyword If     '${status}'=='Enabled'    Run Keywords    Exit For Loop    AND    Logout of iLO
    ...    ELSE    Sleep    60

Verify Network Connection by Pinging to OS IP
    [Documentation]   Login to iLO and get the Server OS IP to verify the network by pinging
    [Arguments]    ${bay_list}
    Log    Verify network connection by pinging to OS IP after server boot    console=yes
    :FOR    ${x}    IN    @{bay_list}
    \    Power ON Server Blade Bay    ${x}
    \    Wait for Server Power on    ${x}
    \    ${ilo_ip}=    Get Server iLO IP    ${x}
    \    ${status}=    Login to iLO ipv4    ${ilo_ip}    ${iLO_UserName}    ${iLO_Password}
    \    Run Keyword if    '${status}'=='FAIL'    Fail  msg:Failed to login to iLO
    \    Wait for iLO Server POST Complete    ${ilo_ip}
    \    ${os_ip}=    Wait for Server OS IP from iLO RIS
    \    Log    Pinging OS IPs    console=yes
    \    ${ping_status}=    Run And Return RC    ping ${os_ip} -n 1
    \    ${ping_response}=    Run Keyword If    ${ping_status}==0    Set Variable    True
    \    Should be True    ${ping_response}    msg=Unable to ping the server OS IP

Get All Profile Connections
    [Documentation]    Get Connections info from Server Profile for UUT
    [Arguments]    ${bay_list}
    :FOR  ${x}  IN  @{bay_list}
    \    ${server_info}=    Get Server Information    ${x}
    \    ${profile}=    Get Server Profile Info    ${server_info}
    \    ${connections} =  Get From Dictionary  ${profile['connectionSettings']}  connections
    \    ${Ports_list} =  Get PortId    ${connections}
    [Return]  ${Ports_list}

Get PortId
    [Documentation]    Get PortId from Connections in Server Profile
    [Arguments]  ${connections}
    ${Ports_list} =  Create List
    :FOR   ${connection}   IN   @{connections}
    \    ${PortId} =   Get From Dictionary  ${connection}    portId
    \    @{words} =    Split String    ${PortId}    :
    \    ${PortId} =    Get From List    ${words}    1
    \    Append to List   ${Ports_list}  ${PortId}
    [Return]   ${Ports_list}

Get Profile Connections and Verify PortId
    [Documentation]    Get PortId from Connections in Server Profile and verify against specified port
    [Arguments]    ${bay_list}   ${port}
    :FOR  ${x}  IN  @{bay_list}
    \    ${server_info}=    Get Server Information    ${x}
    \    ${profile}=    Get Server Profile Info    ${server_info}
    \    ${connections} =  Get From Dictionary  ${profile['connectionSettings']}  connections
    \    Verify PortId    ${connections}  ${port}

Verify PortId
    [Documentation]    Only verify specified PortId
    [Arguments]  ${connections}  ${port}
    ${PortId_list} =  Create List
    :FOR   ${connection}   IN   @{connections}
    \    ${PortId} =   Get From Dictionary  ${connection}    portId
    \    @{words} =    Split String ${PortId}    :
    \    ${PortId} =     Get From List    ${words}    1
    \    Run Keyword If  '${PortId}'=='${port}'    Append to List    ${PortId_list}    ${PortId}
    Should Not Be Empty  ${PortId_list}    msg=Port ${port} not present
    [Return]   ${PortId_list}

Verify Ports are Active
    [Documentation]    Compares active ports from OV against list of expected ports
    [Arguments]    ${list1}    ${list2}
    ${ports_list}=    Create List
    : For    ${x}   In    @{list2}
    \    ${status}=    Run Keyword and Return Status    List Should Contain Value    ${list1}    ${x}
    \    Run Keyword If    ${status}    Append to List    ${ports_list}    ${x}
    \    Run Keyword If    ${status}==False    Fail    msg=missing ports
    [Return]    ${ports_list}

Get Profile Connections and Verify Ports are Active
    [Documentation]    Get Profile Connections and Verify All Ports are Active
    [Arguments]    ${bay_list}
    ${adapter_pf_type} =  Get Adapter Physical Function Type from List
    ${physical_function_ports} =  Set Variable If    ${adapter_pf_type}==8    ${physical_function_ports_4pf}
    ...    ${adapter_pf_type}==16    ${physical_function_ports_8pf}
    :FOR    ${x}    IN   @{bay_list}
    \    ${server_info}=    Get Server Information    ${x}
    \    ${profile}=    Get Server Profile Info    ${server_info}
    \    ${connections} =  Get From Dictionary  ${profile['connectionSettings']}  connections
    \    ${Ports_list} =  Get PortId    ${connections}
    \    Verify Ports are Active  ${ports_list}  ${physical_function_ports}

Verify Requested Bandwidth
    [Documentation]    Verify Requested Bandwidth
    [Arguments]    ${bay_list}    ${requestedMbps}
    ${number_of_ports} =  Get Adapter Physical Function Type from List
    ${number_of_ports_iscsi} =  Evaluate  ${number_of_ports} -2
    ${bw_list}=  Create List
    :FOR    ${x}    IN   @{bay_list}
    \    ${server_info}=    Get Server Information    ${x}
    \    ${profile}=  Get Server Profile Info  ${server_info}
    \    ${connections} =  Get From Dictionary  ${profile['connectionSettings']}  connections
    \    ${bandwidth} =  Get requestedMbps  ${connections}  ${requestedMbps}
    \    ${count_bw}=  Get Length    ${bandwidth}
    \    Should Be Equal    ${number_of_ports_iscsi}    ${count_bw}    msg=Not enough requestedMbps
    [Return]    ${bandwidth}

Get requestedMbps
    [Documentation]    Get requestedMbps in Server Profile
    [Arguments]  ${connections}    ${requestedMbps}
    ${bw_list} =  Create List
    :FOR   ${connection}   IN   @{connections}
    \    ${bandwidth} =   Get From Dictionary  ${connection}    requestedMbps
    \    Run Keyword If    ${bandwidth}==${requestedMbps}    Append to List    ${bw_list}  ${bandwidth}
    [Return]   ${bw_list}

Change Single Connection Value
    [Documentation]    Change the value of a connection
    [Arguments]    ${enet_connection_primary_8pf}  ${id_number}  ${networkUri}  ${delete_value}
    ${connections} =  Create List
    :FOR    ${connection}    IN    @{enet_connection_primary_8pf}
    \    ${connection} =    common.Copy Dictionary    ${connection}
    \    ${id} =    Get from Dictionary  ${connection}  id
    \    Run Keyword If  ${id}==${id_number}  Set to Dictionary  ${connection}  networkUri  ${networkUri}
    \    Run Keyword If  ${id}==${id_number}  Remove from Dictionary  ${connection}  ${delete_value}
    \    Append to List  ${connections}  ${connection}
    [Return]    ${connections}

Change Connection Values for ID 1 and 2
    [Documentation]    Change the values of connections for FC Primary and Secondary Boot
    [Arguments]    ${enet_connection}  ${function_type}  ${networkUri}  ${networkUri2}  ${connection_target_primary}  ${connection_target_secondary}
    ${connections} =  Create List
    :FOR    ${connection}    IN    @{enet_connection}
    \    ${connection} =    common.Copy Dictionary     ${connection}
    \    ${id} =     Get from Dictionary    ${connection}  id
    \    Run Keyword If  ${id}==1  Change Connection Values  ${connection}  ${function_type}  ${networkUri}  ${connection_target_primary}
    \    Run Keyword If  ${id}==2  Change Connection Values  ${connection}  ${function_type}  ${networkUri2}  ${connection_target_secondary}
    \    Append to List  ${connections}  ${connection}
    [Return]    ${connections}

Change Connection Values for a Pair of Connection
    [Documentation]    Change the values of connections for Primary and Secondary Boot
    [Arguments]    ${id_primary}  ${id_secondary}  ${enet_connection}  ${function_type}  ${networkUri}  ${networkUri2}  ${connection_target_primary}  ${connection_target_secondary}
    ${connections} =  Create List
    :FOR    ${connection}    IN    @{enet_connection}
    \    ${connection} =    common.Copy Dictionary     ${connection}
    \    ${id} =     Get from Dictionary    ${connection}  id
    \    Run Keyword If  ${id}==${id_primary}  Change Connection Values  ${connection}  ${function_type}  ${networkUri}  ${connection_target_primary}
    \    Run Keyword If  ${id}==${id_secondary}  Change Connection Values  ${connection}  ${function_type}  ${networkUri2}  ${connection_target_secondary}
    \    Append to List  ${connections}  ${connection}
    [Return]    ${connections}

Change Connection Values
    [Documentation]    Change the connections values
    [Arguments]    ${connection}  ${function_type}  ${networkUri}  ${connection_target}
    Remove from Dictionary   ${connection}    requestedVFs
    Set to Dictionary  ${connection}    functionType  ${function_type}
    Set to Dictionary  ${connection}    networkUri  ${networkUri}
    Set to Dictionary  ${connection}    boot    ${connection_target}

Update Connection Port ID
    [Documentation]    Replace portID from Auto to Manual specified list
    [Arguments]    ${enet_connection}    ${portId_list}
    ${enet_connection_cnt} =    Get Length    ${enet_connection}
    :FOR    ${i}    IN RANGE    0    ${enet_connection_cnt}
    \    ${cur_portId_list} =    Get From List    ${portId_list}    ${i}
    \    ${enet_connection} =    Find And Update Specific PortID    ${enet_connection}    ${cur_portId_list}
    [Return]    ${enet_connection}

Find And Update Specific PortID
    [Documentation]    this kw will find the matched id in the connection list and update the portid value
    [Arguments]    ${updated_enet_connection}    ${cur_portId_list}
    :FOR    ${x}    IN     @{updated_enet_connection}
    \    Run Keyword If    ${cur_portId_list['id']}==${x['id']}    Set to Dictionary     ${x}    portId    ${cur_portID_list['portId']}
    \    ...    ELSE    Continue For Loop
    [Return]    ${updated_enet_connection}

Power Off Server and Edit Server Profile
    [Documentation]    Power off server in order to edit server profile
    [Arguments]    ${bay_list}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    :FOR  ${x}  IN  @{bay_list}
    \    Power OFF Server Blade Bay    ${x}
    \    Wait for Server Power Off    ${x}
    \    ${profile_uri}=    Get Server Hardware Profile URI    ${x}
    \    ${server_profile_body}=    Build Edit Server Profile body     ${x}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    \    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}
    \    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    \    ${task_state} =    Get From dictionary     ${task}     taskState
    \    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Power OFF Server Bay by MomentaryPress
    [Documentation]    Querys the appliance for a Server by bay and then Powers them off
    [Arguments]     ${bay}
    Log      Powering off server bay :${bay}    console=yes
    ${body} =   Create Dictionary   powerState=Off
    ...              powerControl=MomentaryPress
    ${servers} =    Fusion Api Get Server Hardware
    :FOR    ${server}   IN  @{servers['members']}
    \    Continue For Loop If    ${server['position']}!= ${bay}
    \    Exit For Loop If    '${server['powerState']}'=='Off'
    \    ${resp} =    Fusion Api Edit Server Hardware Power State     body=${body}    uri=${server['uri']}
    \    Sleep    90
    \    ${task} =    fusion_api_appliance_setup.Wait For Task    ${resp}     400s    5s

Update Server Profile for Negative Test Expecting Error State
    [Documentation]    Update Server Profile with negative test value that result in error state
    [Arguments]    ${bay_list}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    :FOR  ${x}  IN  @{bay_list}
    \    ${profile_uri}=    Get Server Hardware Profile URI    ${x}
    \    ${server_profile_body}=    Build Edit Server Profile body     ${x}    ${profile_body}    ${connection_type}    ${boot_Mode}    ${boot_order}    ${bandwidth}
    \    ${etag_header}=    Get And Set Current Session Etag Value    ${profile_uri}
    \    ${resp}=    fusion api edit server profile    body=${server_profile_body}    uri=${profile_uri}    headers=${etag_header}
    \    ${task} =   Wait For Task    ${resp}    timeout=5 mins    interval=10s
    \    ${task_state} =    Get From dictionary     ${task}     taskState
    \    Should Match Regexp    ${task_state}    (Error)

Remove Connection Target Value
    [Documentation]    Remove Connection Target Value
    [Arguments]    ${connection_target}  ${delete_value}
    ${connection_target} =    common.Copy Dictionary    ${connection_target}
    Remove from Dictionary  ${connection_target}  ${delete_value}
    [Return]    ${connection_target}

Get Boot Target
    [Documentation]    Get adpater type and apply appropriate boot target
    [Arguments]    ${emulex_boot_target}  ${broadcom_boot_target}
    ${adapter_name} =  Split String To Characters  ${Adapter_Name}
    ${boot_target} =  Run Keyword If    '${adapter_name[0]}'=='E'  Set Variable  ${emulex_boot_target}
    ...    ELSE IF    '${adapter_name[0]}'=='B'  Set Variable  ${broadcom_boot_target}
    ...    ELSE IF    '${adapter_name[0]}'=='Q'  Set Variable  ${broadcom_boot_target}
    [Return]  ${boot_target}

Assign Profiles To Servers
    [Documentation]   Update server profiles in OneView by assigning the server hardware's valid uri. Argument requires list of dictionary of profiles that contains a valid server profile uri and serverHardwareUri (e.g: [{'uri': '/rest/server-profiles/8e2ec303-1274-4b9e-9871-b08f77bcc675', 'serverHardwareUri': '/rest/server-hardware/36343537-3338-4A48-3542-4E5030303533'}]).
    ...               NOTE: See robustness' LE-add-remove.txt script for example.
    ...              Copied from - Assign Server Profiles
    [Arguments]     ${profiles}   ${timeout}=60m   ${interval}=15s  ${waitForTask}=${True}  ${parallelAssign}=${True}   ${validate}=${True}   ${param}=?ignoreServerHealth=true
      Set Log Level     TRACE
    ${valDict} =    Create Dictionary   status_code=${200}
    ...                                 taskState=Completed
    ${respList} =   Create List
      :FOR  ${p}  IN    @{profiles}
        \   ${profile} =    Fusion Api Get Resource    uri=${p['uri']}
        \   set to dictionary    ${profile}   serverHardwareUri=${p['serverHardwareUri']}
        \   remove from dictionary    ${profile}   status_code    headers
        \   Log  Assigning server hardware URI \"${p['uri']}\" to profile \"${p['name']}\"    console=yes
        \   ${resp} =   fusion api edit server profile    uri=${p['uri']}   body=${profile}   param=${param}
        \   Continue For Loop If   ${waitForTask} != ${True}
        \   Run Keyword If   ${parallelAssign} == ${True}   Append To List   ${respList}   ${resp}
        \   ...       ELSE   Wait For The Task And Validate Response   ${resp}   ${valDict}   ${timeout}   ${interval}   ${validate}
        Run Keyword If   ${parallelAssign} == ${True} and ${waitForTask} is ${True}   Wait For The Forked Tasks   ${respList}   ${valDict}   ${timeout}   ${interval}   ${validate}

Unassign Profiles From Servers
        [Documentation]   Update server profiles in OneView by unassigning the server hardware from it. Argument requires list of dictionary of profiles that contains a valid server profile uri (e.g.: [{'uri': '/rest/server-profiles/8e2ec303-1274-4b9e-9871-b08f77bcc675'}]).
        ...               NOTE: See robustness' LE-add-remove.txt script for example.
        ...              Copied from - Unassign Server profiles
        [Arguments]     ${profiles}    ${timeout}=60m   ${interval}=15s  ${waitForTask}=${True}  ${parallelAssign}=${True}   ${validate}=${True}
        Set Log Level   TRACE
        ${valDict} =    Create Dictionary   status_code=${200}
        ...                                 taskState=Completed
        ${respList} =   Create List
        :FOR   ${p}   IN   @{profiles}
        \   ${profile} =    Fusion Api Get Resource    uri=${p['uri']}
        \   Log  Unassigning server hardware URI \"${profile['serverHardwareUri']}\" from profile \"${p['name']}\"    console=yes
        \   set to dictionary    ${profile}   serverHardwareUri=${None}
        \   set to dictionary    ${profile}   enclosureBay=${None}
        \   set to dictionary    ${profile}   enclosureUri=${None}
        \   remove from dictionary    ${profile}   status_code    headers
        \   ${resp} =   fusion api edit server profile    uri=${p['uri']}   body=${profile}
        \   Continue For Loop If   ${waitForTask} != ${True}
        \   Run Keyword If   ${parallelAssign} == ${True}   Append To List   ${respList}   ${resp}
        \   ...       ELSE   Wait For The Task And Validate Response   ${resp}   ${valDict}   ${timeout}   ${interval}   ${validate}
        Run Keyword If   ${parallelAssign} == ${True} and ${waitForTask} is ${True}   Wait For The Forked Tasks   ${respList}   ${valDict}   ${timeout}   ${interval}   ${validate}
        
Wait For The Forked Tasks
    [Documentation]    Wait for forked tasks (off the response body list of dictionary) to reach end state
    ...       Copied from - Wait For Forked Tasks
    [Arguments]    ${respList}    ${valDict}    ${timeout}    ${interval}=5s    ${validate}=${True}
    Wait Until Keyword Succeeds    ${timeout}    ${interval}   Forked Tasks Reached The Endstate     ${respList}   ${valDict}   ${validate}

Forked Tasks Reached The Endstate
    [Documentation]    Look up through all the forked tasks to see if they reached end state
    ...      Copied from - Forked Tasks Reached Endstate
    ...    Forked Tasks Reached Endstate
    [Arguments]    ${respList}    ${valDict}    ${validate}=${True}
    ${match} =    Set Variable    ${False}
    ${popped} =    Set Variable    ${null}
    ${l} =   Get Length    ${respList}
    ${taskStateList} =    Create List    Warning  Unknown  Terminated  Killed  Error  Completed
    :FOR    ${x}    IN RANGE   0    ${l}
    \    ${location} =    Get Variable Value    ${respList[${x}]['headers']['location']}
    \    ${task_uri} =    Run Keyword If    '${location}' is 'None'    Get From Dictionary    ${respList[${x}]}    uri
    \    ...     ELSE    Get Variable Value    ${location}
    \    Should Not Be Empty    ${task_uri}    msg=No task uri could be retreived from response.
    \    ${task} =    Fusion Api Get Task    uri=${task_uri}
    \    ${match} =    Run Keyword If    ${validate} == ${True}    Match Value In The List    ${task['taskState']}   ${taskStateList}
    \    ${popped} =    Run Keyword If    ${match} is ${True}    Remove From List     ${respList}    ${x}
    \    Run Keyword If    ${validate} == ${True}    Log     \t Task: [${task['category']}:${task['name']}] is: ${task['taskState']} for resource: ${task['associatedResource']['resourceName']} ${task['associatedResource']['resourceUri']}    console=yes
    \    Run Keyword If    ${popped} is not ${null}    Validate Response    ${task}    ${valDict}
    Should Be Equal As Integers    ${l}    0

Match Value In The List
    [Documentation]   Check if a value exists in list
    ...    Copied from - Match Value In List
    ...    Match Value In List
    [Arguments]   ${val}   ${valList}
    :FOR   ${v}   IN   @{valList}
    \   Return From Keyword If   '${v}' == '${val}'   ${True}
    [Return]   ${False}

Wait For The Task And Validate Response
    [Documentation]    Wait for task and validate response
    ...     Copied from - Wait For Task And Validate Response
    [Arguments]    ${resp}    ${valDict}    ${timeout}    ${interval}=15s    ${validate}=${True}
    ${task} =     fusion_api_appliance_setup.Wait For Task    ${resp}    ${timeout}   ${interval}
    Run Keyword If   ${validate} == ${True}    Validate Response    ${task}   ${valDict}

Add IPv4 Address
    [Documentation]    Add IPv4 Address to connection
    [Arguments]    ${enet_connection}  ${ipv4_address1}  ${ipv4_address2}
    ${connections} =  Create List
    :FOR    ${connection}    IN    @{enet_connection}
    \    ${connection} =    common.Copy Dictionary     ${connection}
    \    ${id} =    Get from Dictionary  ${connection}  id
    \    Run Keyword If  ${id}==1  Set to Dictionary  ${connection}    ipv4  ${ipv4_address1}
    \    Run Keyword If  ${id}==2  Set to Dictionary  ${connection}    ipv4  ${ipv4_address2}
    \    Append to List  ${connections}  ${connection}
    [Return]    ${connections}

Add IPv4 Address to ISCSI Primary Secondary Connections
    [Documentation]    Add IPv4 Address to connection
    [Arguments]    ${id_primary}  ${id_secondary}  ${enet_connection}  ${ipv4_address1}  ${ipv4_address2}
    ${connections} =  Create List
    :FOR    ${connection}    IN    @{enet_connection}
    \    ${connection} =    common.Copy Dictionary     ${connection}
    \    ${id} =    Get from Dictionary  ${connection}  id
    \    Run Keyword If  ${id}==${id_primary}  Set to Dictionary  ${connection}    ipv4  ${ipv4_address1}
    \    Run Keyword If  ${id}==${id_secondary}  Set to Dictionary  ${connection}    ipv4  ${ipv4_address2}
    \    Append to List  ${connections}  ${connection}
    [Return]    ${connections}

Update Ethernet Server Profile body
    [Documentation]   Build Server Profiles body required to create the server profile for Ethernet
    ...               copied from    Build Ethernet Server Profile body
    [Arguments]     ${bay_num}    ${profile_body} 
    Log      Build PROFILE body with Ethernet connection for server bay:${bay_num}    console=yes
    ${profile} =    Common.Copy Dictionary    ${profile_body}
    ${uri}=    Get Server HW URI    ${bay_num}
    Set to Dictionary    ${profile}    serverHardwareUri    ${uri}
    ${server_info}=    Get Server Info    ${bay_num}
    ${sht_uri}=    Get From Dictionary    ${server_info}    serverHardwareTypeUri
    ${eg} =     Get from Dictionary    ${profile}  enclosureGroupUri
    @{words} =  Split String    ${eg}    :
    ${type} =   Get From List   ${words}    0
    ${eg} =     Get From List   ${words}    1
    ${uri} =    Get Current Enclosure Group URI    ${eg}
    Set to Dictionary    ${profile}    enclosureGroupUri    ${uri}
    ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    @{words} =  Split String    ${enc}    :
    ${type} =   Get From List   ${words}    0
    ${enc} =    Get From List   ${words}    1
    ${uri} =    Get Current Enclosure URI   ${enc}
    Set to Dictionary   ${profile}  enclosureUri    ${uri}
    ${name}=    Catenate  Bay  ${bay_num}
    Set to Dictionary   ${profile}  name    ${name}
    Set to Dictionary   ${profile}  connectionSettings    ${enet_connection}
    ${connections} =    Get From Dictionary    ${profile['connectionSettings']}    connections
    ${connections} =    Lookup Network Connection Uris  ${connections}
    Set to Dictionary   ${profile['connectionSettings']}  connections   ${connections}
    Set to Dictionary   ${profile}    serverHardwareTypeUri    ${sht_uri}
    ${body}=    Set Variable    ${profile}
    [Return]    ${body}
    
Update FCOE Server Profile body
    [Documentation]   Build Server Profiles body required to create the server profile for FCOE connection
    ...      Copied from  Build FCOE Server Profile body
    [Arguments]     ${bay_num}    ${profile_body}
    Log      Build PROFILE body with FCoE connection for server bay:${bay_num}    console=yes
    ${profile_body}=    Update Server Profile body   ${bay_num}    ${profile_body}
    ${profile} =    Common.Copy Dictionary    ${profile_body}
    ${server_info}=    Get Server Info    ${bay_num}
    ${sht_uri}=    Get From Dictionary    ${server_info}    serverHardwareTypeUri
    Set to Dictionary   ${profile}  connectionSettings    ${fcoe_connection}
    ${connections} =    Get From Dictionary    ${profile['connectionSettings']}    connections
    ${connections} =    Lookup Network Connection Uris  ${connections}
    Set to Dictionary   ${profile['connectionSettings']}  connections   ${connections}
    Set to Dictionary   ${profile}    serverHardwareTypeUri    ${sht_uri} 
    ${body}=    Set Variable    ${profile}
    [Return]    ${body}
    
Update FC Server Profile body
    [Documentation]   Build Server Profiles body required to create the server profile for FC connection
    ...               Copied from Build FC Server Profile body
    [Arguments]     ${bay_num}    ${profile_body}
    Log      Build PROFILE body with FC connection for server bay:${bay_num}    console=yes
    ${profile} =    Common.Copy Dictionary    ${profile_body}
    Set to Dictionary   ${profile}  connectionSettings    ${fc_connection}
    ${profile_body}=    Update Server Profile body   ${bay_num}    ${profile}
    ${body}=    Set Variable    ${profile_body}
    [Return]    ${body}

Update Server Profile body 
    [Documentation]   Build Server Profiles body required to create the server profile
    ...               copied from Build Server Profile body
    [Arguments]     ${bay_num}    ${profile_body}  ${connection_type}=${NONE}  ${boot_Mode}=${NONE}  ${boot_order}=${NONE}  ${bandwidth}=${NONE}
    Log      Build PROFILE body for server bay:${bay_num}    console=yes
    ${profile} =    Common.Copy Dictionary    ${profile_body}
    ${uri}=    Get Server HW URI    ${bay_num}
    Set to Dictionary    ${profile}    serverHardwareUri    ${uri}
    ${eg} =     Get from Dictionary    ${profile}  enclosureGroupUri
    @{words} =  Split String    ${eg}    :
    ${type} =   Get From List   ${words}    0
    ${eg} =     Get From List   ${words}    1
    ${uri} =    Get Current Enclosure Group URI    ${eg}
    Set to Dictionary    ${profile}    enclosureGroupUri    ${uri}
    ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    @{words} =  Split String    ${enc}    :
    ${type} =   Get From List   ${words}    0
    ${enc} =    Get From List   ${words}    1
    ${uri} =    Get Current Enclosure URI   ${enc}
    Set to Dictionary   ${profile}  enclosureUri    ${uri}
    ${name}=    Catenate  SEPARATOR=_  ${enc}  Bay  ${bay_num}
    Set to Dictionary   ${profile}  name    ${name}
    Run Keyword If    ${connection_type} != ${NONE}    Set to Dictionary   ${profile['connectionSettings']}  connections    ${connection_type}
    ${connections} =    Get From Dictionary    ${profile['connectionSettings']}    connections
    ${connections} =    Run Keyword If  '${bandwidth}' == '${NONE}'    Lookup Network Connection Uris    ${connections}
    ...    ELSE    Lookup connection uris Change RequestedBandWidth    ${connections}    ${bandwidth}
    Set to Dictionary   ${profile['connectionSettings']}  connections     ${connections}
    Run Keyword If    ${boot_Mode} != ${NONE}    Set to Dictionary    ${profile}    bootMode    ${boot_Mode}
    Run Keyword If    ${boot_order} != ${NONE}    Set to Dictionary    ${profile}    boot    ${boot_order}
    ${body}=    Set Variable    ${profile}
    [Return]    ${body}
    
Lookup Network Connection uris
    [Documentation]    Processes a list of connections, getting the uris for networks
    ...                Copied from Lookup connection uris
    [Arguments]    ${connections}
    ${conns} =  Create List
    :FOR  ${connection}  IN  @{connections}
    \   ${connection} =     Common.Copy dictionary     ${connection}
    \   ${functionType} =   Get from Dictionary  ${connection}  functionType
    \   ${net} =     Get From Dictionary  ${connection}  networkUri
    \   @{words} =   Split String  ${net}  :
    \   ${type} =    Get From List  ${words}  0
    \   ${net} =     Get From List  ${words}  1
    \   ${net} =     Create List    ${net}
    \   ${uri} =   Run Keyword If   '${type}' == 'FC'  Get FC URIs  ${net}
    \   ...    ELSE IF  '${type}' == 'ETH'  Get Ethernet URIs  ${net}
    \   ...    ELSE IF  '${type}' == 'NS'   Get Network Set URIs  ${net}
    \   ...    ELSE IF  '${type}' == 'FCOE'  Get FCoE URIs  ${net}
    \   ${uri} =   Get From List  ${uri}  0
    \   Set to Dictionary  ${connection}  networkUri  ${uri}
    \   append to list  ${conns}    ${connection}
	[Return]  ${conns}

Lookup connection uris Change RequestedBandWidth
    [Documentation]    Processes a list of connections, getting the uris for networks [Copied original keyword "Lookup connection uris Change RequestedBW"]
    [Arguments]    ${connections}    ${bandwidth}
    ${conns} =    Create List
    :FOR    ${connection}    IN    @{connections}
    \    ${connection} =    Copy Dictionary Tree    ${connection}
    \    ${functionType} =    Get from Dictionary    ${connection}    functionType
    \    ${net} =    Get From Dictionary    ${connection}    networkUri
    \    @{words} =    Split String    ${net}    :
    \    ${type} =    Get From List    ${words}    0
    \    ${net} =    Get From List    ${words}    1
    \    ${net} =    Create List    ${net}
    \    ${uri} =    Run Keyword If    '${type}' == 'FC'    Get FC URIs    ${net}
    \    ...    ELSE IF    '${type}' == 'ETH'    Get Ethernet URIs    ${net}
    \    ...    ELSE IF    '${type}' == 'NS'    Get Network Set URIs    ${net}
    \    ...    ELSE IF    '${type}' == 'FCOE'    Get FCoE URIs    ${net}
    \    ${uri} =    Get From List    ${uri}    0
    \    Set to Dictionary    ${connection}    networkUri    ${uri}
    \    Run Keyword If    '${functionType}' == 'Ethernet'    Set to Dictionary    ${connection}    requestedMbps    ${bandwidth}
    \   append to list  ${conns}    ${connection}
    [Return]    ${conns}
    
Get Current Enclosure URI
    [Documentation]    Get Enclosure URI for the named enclosure
    ...                Copied from Get Enclosure URI
    [Arguments]  ${enc}
    ${resp} =   Fusion Api Get Enclosures  param=?filter="'name'=='${enc}'"
    ${uri} =   Get From Dictionary  ${resp['members'][0]}  uri
    [Return]  ${uri}
    
Get Current Enclosure Group URI
    [Documentation]    Get Enclosure Group URI for the named enclosure group
    ...                Copied from Get Enclosure Group URI
    [Arguments]    ${eg}
    ${resp} =   Fusion Api Get Enclosure Groups
    ${l} =   Get Length  ${resp['members']}
    :FOR  ${x}  IN RANGE  0  ${l}
    \    Run Keyword If   '${resp['members'][${x}]['name']}' != '${eg}'    Continue For Loop
    \    ${uri} =   Get From Dictionary  ${resp['members'][${x}]}  uri
    [Return]    ${uri}

# ############################
# Enclosure Keywords    #
# ############################

Get Enclosure Names
    [Documentation]   Keyword to retrieve Enclosure Names
    ${encl_name_list} =    Create List
    ${resp} =   Fusion Api Get Enclosures
    ${encl_members} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${encl_members}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =     Get From List   ${encl_members}    ${x}
    \    ${encl_name}=    Get From Dictionary    ${enc}    name
    \    Append to list    ${encl_name_list}  ${encl_name}
    \    ${uri}=    Get From Dictionary     ${enc}   uri
    [Return]    ${encl_name_list}

Get Enclosure Info
    [Documentation]   Keyword to retrieve Enclosure Information for particular enclosure name
    [Arguments]    ${encl_name}
    ${resp} =    Fusion Api Get Enclosures
    ${encl_members} =    Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${encl_members}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${enc} =    Get From List    ${encl_members}    ${x}
    \    ${enclosure_name}=    Get From Dictionary    ${enc}    name
    \    Run Keyword If    '${enclosure_name}'!='${encl_name}'   Continue For Loop
    \    ${uri}=    Get From Dictionary     ${enc}   uri
    \    ${encl_info}=    Fusion Api Get Enclosures    uri=${uri}
    [Return]    ${encl_info}

Get Enclosure Device Bay Info
    [Documentation]   Keyword to retrieve Enclosure Device Bay Info for particular enclosure name and device bay
    [Arguments]    ${encl_name}    ${device_bay}
    ${resp} =    Get Enclosure Info    ${encl_name}
    ${devicebay_list} =    Get From Dictionary    ${resp}    deviceBays
    ${l} =  Get Length  ${devicebay_list}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${devicebays} =     Get From List   ${devicebay_list}    ${x}
    \    ${device_bayNumber}=    Get From Dictionary    ${devicebays}    bayNumber
    \    Run Keyword If    ${device_bayNumber}!=${device_bay}    Continue For Loop
    [Return]    ${devicebays}

Refresh Enclosure
    [Documentation]   Keyword to refresh the Enclosure based on Enclosure Name
    [Arguments]    ${enc_name}
    ${encl_info}=    Get Enclosure Info    ${enc_name}
    ${encl_uri}=    Get From Dictionary    ${encl_info}    uri
    Log    Refreshing Enclosure:${enc_name}    console=yes
    ${resp}=    fusion api refresh enclosure    uri=${encl_uri}/refreshState
    ${task}=    Wait For Task   ${resp}    18min    10s
    ${task_state} =    Get From dictionary    ${task}     taskState
    Should Match Regexp    ${task_state}    ((?i)Warning|Completed)

Remove All Server Hardware Types
    [Documentation]  Query the appliance for all existing Server Hardware Types and remove them
    Log   Removing SERVER HARDWARE TYPES    console=yes
    ${serverHwTypes} =   Fusion Api Get Server Hardware Types
    :FOR   ${serverHwType}   IN   @{serverHwTypes['members']}
    \        ${resp} =    Fusion Api Delete Resource   uri=${serverHwType['uri']}
    \        ${task} =   Wait for task   ${resp}   15s
    \        ${valDict} =    Create Dictionary   status_code=${200}
    \        fusion_api_validation.Validate Response   ${task}   ${valDict}
    ${resp} =   Fusion Api Get Server Hardware Types
    Should Be Equal As Integers   ${resp['count']}   0   msg="Found Server Hardware Types after deletion"

Add Enclosure Group with SAS LIG from variable
    [Documentation]  Adds an Enclosure Group to an appliance from a variable which contains  a list of dicts with the entire payload
    [Arguments]     ${enc_group}
    Log   \nAdding ENCLOSURE GROUP ${enc_group['name']}    console=yes
    ${l} =  Get Length  ${enc_group['interconnectBayMappings']}
    :FOR    ${x}    IN RANGE    0   ${l}
    \   ${liguri} =     Get From Dictionary  ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri
    \   Continue For Loop If    '${liguri}' == 'None'
    \   @{words} =  Split String    ${liguri}   :
    \   ${type} =   Get From List   ${words}    0
    \   ${eg} =     Get From List   ${words}    1
    \   ${liguri} =   Run keyword if    '${type}'=='SAS'   Get SAS LIG URI  ${eg}
    ...    ELSE    Get LIG URI  ${eg}
    \   Set to dictionary   ${enc_group['interconnectBayMappings'][${x}]}   logicalInterconnectGroupUri     ${liguri}
    ${resp} =   Fusion Api Create Enclosure Group   ${enc_group}

Get SAS LIG URI
    [Documentation]  Keyword to get SAS LIG URI
    [Arguments]     ${lig}
    ${resp} =   Fusion Api Get SAS LIG      param=?filter="'name'=='${lig}'"
    ${uri} =    Get From Dictionary     ${resp['members'][0]}   uri
    [Return]    ${uri}

Add Monitored Enclosures from variable
    [Documentation]    Adds Monitored Enclosures to an appliance from a variable which contains a list of dicts with the entire payload
    [Arguments]    ${encs}   ${timeout}=15m    ${interval}=10s
    Log    \nAdding ENCLOSURES    console=yes
    :FOR    ${enc}    IN    @{encs}
    \    ${resp} =    Fusion Api Add Enclosure    ${enc}
    \    ${task} =    Wait For TaskType Success State    ${resp}     timeout=${timeout}   interval=${interval}

# ############################
# Profile Keywords     #
# ############################

Create Server Profile
    [Documentation]    Keyword to create server profile for a particular server profile body
    [Arguments]    ${profile}
    ${resp}=    Fusion Api Create Server Profile    body=${profile}
    # Used to call fusion_api_appliance_setup.Wait For Task
    ${task} =    Wait For TaskType Success State    ${resp}     timeout=20 mins    interval=20s
    ${task_state} =     Get From dictionary     ${task}     taskState
    Should Match Regexp    ${task_state}   ((?i)Warning|Completed)

Delete Server Profile
    [Documentation]    Delete existing server profile for a particular bay
    [Arguments]    ${bay_list}    ${param}=${EMPTY}
    :FOR    ${x}    IN    @{bay_list}
    \    Power OFF Server Blade Bay    ${x}
    \    ${profile_uri}=    Get Server Hardware Profile URI    ${x}
    \    ${resp} =    Run Keyword If    '${profile_uri}'!='None'    Fusion Api Delete Server Profile    uri=${profile_uri}    param=${param}
    \    ${task} =    Run Keyword If    '${profile_uri}'!='None'    Wait For Task    ${resp}    420s    10s
    \    ${profile_uri}=    Get Server Hardware Profile URI    ${x}
    \    Should Be Equal As Strings    ${profile_uri}    None

Delete Server Profile Forcefully
    [Documentation]    Deleting the Server Profile forcefully if normal delete is unsuccessful
    [Arguments]    ${bay_list}    ${param}=${EMPTY}
    Log To Console    Delete Server Profile If Exists
    ${status}=    Run Keyword and Return Status    Delete Server Profile    ${bay_list}
    Run Keyword If    ${status} == ${FALSE}    Run Keywords
    ...    Log To Console    Server profile delete operation failed.
    ...    AND    Log    Deleting with force option    WARN
    ...    AND    Delete Server Profile    ${bay_list}    param=${param}

Create Server Profile with Connections Bootmode and BootOrder
    [Documentation]    Create server profile with Connections, Bootmode, and BootOrder and verify server profile is created successfully.
    [Arguments]    ${bay_list}  ${profiles}  ${connections}  ${bootmode}  ${boot_order}  ${bandwidth}=${NONE}
    :FOR    ${x}    IN    @{bay_list}
    \    Power OFF Server Blade Bay    ${x}
    \    ${server_profile_body} =    Update Server Profile body   ${x}  ${profiles}  ${connections}    ${bootmode}    ${boot_order}  ${bandwidth}
    \    Create Server Profile    ${server_profile_body}
    \    ${server_state}=    Get Server State    ${x}
    \    Should Be Equal    ${server_state}    ProfileApplied
    \    Sleep    45
    \    ${profile_status}=    Get Server Profile Status    ${x}
    \    Should Be Equal    ${profile_status}    OK

Edit Server Profile body
    [Documentation]   Build Server Profiles body required to create the server profile
    ...              Copied from Build Edit Server Profile body
    [Arguments]     ${bay_num}    ${profile_body}    ${connection_type}=${NONE}    ${boot_Mode}=${NONE}    ${boot_order}=${NONE}    ${bandwidth}=${NONE}
    Log      Build PROFILE body for server bay:${bay_num}    console=yes
    ${profile} =    Common.Copy Dictionary    ${profile_body}
    ${uri}=    Get Server Hardware Profile URI    ${bay_num}
    Set to Dictionary    ${profile}    uri    ${uri}
    ${uri}=    Get Server HW URI    ${bay_num}
    Set to Dictionary    ${profile}    serverHardwareUri    ${uri}
    ${eg} =     Get from Dictionary    ${profile}  enclosureGroupUri
    @{words} =  Split String    ${eg}    :
    ${type} =   Get From List   ${words}    0
    ${eg} =     Get From List   ${words}    1
    ${uri} =    Get Current Enclosure Group URI    ${eg}
    Set to Dictionary    ${profile}    enclosureGroupUri    ${uri}
    ${enc} =    Get from Dictionary    ${profile}    enclosureUri
    @{words} =  Split String    ${enc}    :
    ${type} =   Get From List   ${words}    0
    ${enc} =    Get From List   ${words}    1
    ${uri} =    Get Current Enclosure URI   ${enc}
    Set to Dictionary   ${profile}  enclosureUri    ${uri}
    ${name}=    Catenate  SEPARATOR=_  ${enc}  Bay  ${bay_num}
    Set to Dictionary   ${profile}  name    ${name}
    Run Keyword If    ${connection_type} != ${NONE}    Set to Dictionary   ${profile['connectionSettings']}  connections  ${connection_type}
    ${connections} =    Get From Dictionary    ${profile['connectionSettings']}    connections
    ${connections} =    Run Keyword If  '${bandwidth}' == '${NONE}'    Lookup Network Connection Uris    ${connections}
    ...    ELSE    Lookup connection uris Change RequestedBandWidth    ${connections}    ${bandwidth}
    Set to Dictionary   ${profile['connectionSettings']}  connections     ${connections}
    Run Keyword If    ${boot_Mode} != ${NONE}    Set to Dictionary    ${profile}    bootMode    ${boot_Mode}
    Run Keyword If    ${boot_order} != ${NONE}    Set to Dictionary    ${profile}    boot    ${boot_order}
    ${body}=    Set Variable    ${profile}
    [Return]    ${body}

# ############################
# Miscellaneous Keywords    #
# ############################

Compare Lists Value
    [Documentation]    Compares List- Shared
    [Arguments]    ${list1}    ${list2}
    ${bay_list}=    Create List
    : For    ${bay}   In    @{list2}
    \    ${status}=    Run Keyword and Return Status    List Should Contain Value    ${list1}    ${bay}
    \    Run Keyword If    ${status}    Append to List    ${bay_list}    ${bay}
    [Return]    ${bay_list}

Get Test Tag Server Bay List
    [Documentation]    Keyword to get Server bay list for an mezz type
    ${bay_list}=    Run Keyword If    '${Test_Tag.upper()}'=='BRONCO'    Get CNA Mezz Server Bay List
    ...   ELSE IF    '${Test_Tag.upper()}'=='QUIZ'        Get CNA Mezz Server Bay List
    ...   ELSE IF    '${Test_Tag.upper()}'=='EMBER'       Get HBA Mezz Server Bay List
    ...   ELSE IF    '${Test_Tag.upper()}'=='QUARTZ'      Get CNA Mezz Server Bay List
    ...   ELSE IF    '${Test_Tag.upper()}'=='ELECTRON'    Get HBA Mezz Server Bay List
    [Return]    ${bay_list}

Get Test Tag Mezz Bay List
    [Documentation]    Keyword to get Mezz list based on mezz type
    [Arguments]    ${server_bay_num}
    ${mezz_list}=     Run Keyword If    '${Test_Tag.upper()}'=='BRONCO'    Get Adapter Mezz Bay List    ${server_bay_num}    Bronco
    ...   ELSE IF    '${Test_Tag.upper()}'=='QUIZ'        Get Adapter Mezz Bay List    ${server_bay_num}    Quiz
    ...   ELSE IF    '${Test_Tag.upper()}'=='EMBER'       Get Adapter Mezz Bay List    ${server_bay_num}    Ember
    ...   ELSE IF    '${Test_Tag.upper()}'=='QUARTZ'      Get Adapter Mezz Bay List    ${server_bay_num}    Quartz
    ...   ELSE IF    '${Test_Tag.upper()}'=='ELECTRON'    Get Adapter Mezz Bay List    ${server_bay_num}    Electron
    [Return]    ${mezz_list}

Get HBA Adapter List
    [Documentation]    Keyword that gets a list of all HBAs mezz cards in a given bay
    [Arguments]    ${bay}
    ${hba_names}=    Get Dictionary Keys    ${Tbird_HBA_models}
    ${mezz_list}    Create List
    :FOR    ${hba}    IN    @{hba_names}
    \    ${temp_mezz_list}=    Get Adapter Mezz Bay List    ${bay}    ${hba}
    \    ${mezz_list}=    Combine Lists    ${mezz_list}    ${temp_mezz_list}
    [Return]    ${mezz_list}

Get HBA Adapter List for C7000
    [Documentation]    Keyword that gets a list of all HBAs mezz cards in a given bay for C7000
    [Arguments]    ${bay}
    ${hba_names}=    Get Dictionary Keys    ${C7000_HBA_models}
    ${mezz_list}    Create List
    :FOR    ${hba}    IN    @{hba_names}
    \    ${temp_mezz_list}=    Get Adapter Mezz Bay List for C7000    ${bay}    ${hba}
    \    ${mezz_list}=    Combine Lists    ${mezz_list}    ${temp_mezz_list}
    [Return]    ${mezz_list}

Get Server Type List
    [Documentation]    Get list of servers based on server type
    [Arguments]    ${server_type}
    ${resp} =    fusion api get server hardware
    ${server_list} =    Create List
    ${blades} =     Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${blades}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${blade} =     Get From List   ${blades}    ${x}
    \    ${model} =    Fetch from right    ${blade['model']}    ${SPACE}
    \    ${bay} =   Get From Dictionary    ${blade}  position
    \    Run Keyword If  '${model}'=='${server_type}'
    ...  Append to list    ${server_list}  ${bay}
    Sort List    ${server_list}
    [Return]    ${server_list}

Get Server Serial Number from List
    [Documentation]    Obtain bay info from list and query Fusion for serial number
    [Arguments]    ${lists}
    ${OVsn_list}=    Create List
    :FOR    ${list}  IN  @{lists}
    \    ${uri}=     Get Server HW URI    ${list}
    \    ${server_info}=    fusion api get server hardware    uri=${uri}
    \    ${OVsn}=    Get From Dictionary    ${server_info}    serialNumber
    \    Append to list    ${OVsn_list}  ${OVsn}
    [Return]    ${OVsn_list}

Create and download support dump
    [Documentation]    Create and download support dump
    [Arguments]    ${file}
    Set Log Level    TRACE
    Log    [Create and Download Support Dump]    console=yes
    ${body} =   Create Dictionary    encrypt=${false}    errorCode=CI
    ${sd_resp} =   Fusion Api Create Support Dump    ${body}
    ${sd_status}=    Get From Dictionary     ${sd_resp}    status_code
    Should Be Equal As Integers    ${sd_status}    200
    ${uri} =    Get From Dictionary  ${sd_resp}  uri
    ${dl_resp} =   Fusion Api Download Support Dump    uri=${uri}    localfile=${file}
    ${download_status}=    Get From Dictionary     ${dl_resp}    status_code
    Should Be Equal As Integers    ${download_status}    200

Build Server Adapter Mapping
    [Documentation]    Keyword that builds and returns a list of dictionaries
    ...    with the mapping from server bay to mezz slot for the entire enclosure
    ...    All with key:server_bay, value:adapter_slot Ex:[{bay1:mezz1}, {bay1:mezz6}, {bay5:mezz2}, {bay9:mezz4}]
    [Arguments]    ${bay_list}
    ${all_mezz}    Create List
    :FOR    ${bay}    IN    @{bay_list}
    \    ${mezz_list}=    Get HBA Adapter List    ${bay}
    \    ${server_mezz_list}=    Build Adapter Mapping to One Server    ${bay}    ${mezz_list}
    \    ${all_mezz}=    Combine Lists    ${all_mezz}    ${server_mezz_list}
    [Return]    ${all_mezz}

Build Server Adapter Mapping for C7000
    [Documentation]    Keyword that builds and returns a list of dictionaries
    ...    with the mapping from server bay to mezz slot for the entire C7000 enclosure
    ...    All with key:server_bay, value:adapter_slot Ex:[{bay1:mezz1}, {bay1:mezz6}, {bay5:mezz2}, {bay9:mezz4}]
    [Arguments]    ${bay_list}
    ${all_mezz}    Create List
    :FOR    ${bay}    IN    @{bay_list}
    \    ${mezz_list}=    Get HBA Adapter List for C7000    ${bay}
    \    ${server_mezz_list}=    Build Adapter Mapping to One Server    ${bay}    ${mezz_list}
    \    ${all_mezz}=    Combine Lists    ${all_mezz}    ${server_mezz_list}
    [Return]    ${all_mezz}

Build Adapter Mapping to One Server
    [Documentation]    Keyword that builds and returns a list of dictionaries
    ...    with the mapping from server bay to mezz slot for one server bay
    ...    All with key:server_bay, value: adapter_slot Ex: [{bay1:mezz1}, {bay1:mezz4}]
    [Arguments]    ${server_bay}    ${mezz_list}
    ${server_mezz_list}=    Create List
    :FOR    ${mezz}    IN    @{mezz_list}
    \    &{temp_dict}=    Create Dictionary    ${server_bay}=${mezz}
    \    Append to List    ${server_mezz_list}    ${temp_dict}
    [Return]    ${server_mezz_list}

# ############################
# vLAN Keywords     #
# ############################
Read Authentication Key
    [Documentation]    Keyword to retrieve Authentication Token for PERM calls
    ${auth_output}=    Execute SSH Command    "\${AUTH}"
    ${auth_row}=    Run Keyword And Ignore Error    String.Get Lines Containing String    ${auth_output}    -
    ${auth_line}=    Split String    ${auth_row[1]}    :
    ${auth_token}=    Set Variable    ${auth_line[1]}
    [Return]    ${auth_Token}

Read EM Switch Port Response
    [Documentation]    Keyword to read EM Switch port response
    [Arguments]    ${response}
    ${response_row}=    Run Keyword And Ignore Error    String.Get Lines Containing String    ${response}    {
    ${response_value}=    set Variable    ${response_row[1]}
    [Return]    ${response_value}

Read Call Status
    [Documentation]    Keyword to read Call Status of PERM Calls
    [Arguments]    ${response}
    ${call_status}=    Get From Dictionary    ${response}    CallStatus
    [Return]    ${call_status}

Read Mgmt Port value
    [Documentation]    Keyword to read Mgmt Port value
    [Arguments]    ${response}
    ${operation_result_value}=    Get From Dictionary    ${response}    OperationResult
    ${mgmt_port_value}=        Get From Dictionary    ${operation_result_value}    EmSwitchPorts
    ${port_value}=    Get From Dictionary    ${mgmt_port_value[0]}    PortType
    [Return]    ${port_value}

Read Lldp Receive MAC Address
    [Documentation]    Keyword to read receive MAC Adddress
    [Arguments]    ${response}
    ${operation_result_value}=    Get From Dictionary    ${response}    OperationResult
    ${chassis_id}=    Get From Dictionary    ${operation_result_value}    ChassisID
    ${mac_value}=    Get From Dictionary    ${chassis_id}    MacAddress
    [Return]    ${mac_value}

Read Lldp Send Network Address
    [Documentation]    Keyword to read Send Network Address
    [Arguments]    ${response}
    ${operation_result_value}=    Get From Dictionary    ${response}    OperationResult
    ${chassis_id}=    Get From Dictionary    ${operation_result_value}    ChassisID
    ${network_value}=    Get From Dictionary    ${chassis_id}    NetworkAddress
    [Return]    ${network_value}

Read Lldp Receive Time To Live
    [Documentation]    Keyword to read receive Time to Live
    [Arguments]    ${response}
    ${operation_result_value}=    Get From Dictionary    ${response}    OperationResult
    ${timetolive_value}=    Get From Dictionary    ${operation_result_value}    TimeToLiveSecs
    [Return]    ${timetolive_value}

Read Tagged vLAN value
    [Documentation]    Keyword to read Tagged vLAN Values
    [Arguments]    ${response}
    ${operation_result_value}=    Get From Dictionary    ${response}    OperationResult
    ${mgmt_port_value}=    Get From Dictionary    ${operation_result_value}    EmSwitchPorts
    ${tagged_vLANS}=    Get From Dictionary    ${mgmt_port_value[0]}    TaggedVLANs
    [Return]    ${tagged_vLANS}

Get Blade Presence
    [Documentation]    Get Blade Bay presence
    [Arguments]    ${response}    ${index}
    ${devices}=    Get From Dictionary    ${response['members'][0]}    deviceBays
    ${device_bay}=    Get From List    ${devices}    ${index}
    ${device_presence}=    Get From Dictionary    ${device_bay}    devicePresence
    ${bay_number}=    Get From Dictionary    ${device_bay}    bayNumber
    [Return]    ${device_presence}    ${bay_number}

Get Empty Blade Bay List
    [Documentation]    Get Empty Blade Bay List from the Enclosure
    ${unfilled}=    Create List
    ${response}=    Fusion Api Get Enclosures
    ${blade_num}=    Get From Dictionary    ${response['members'][0]}    deviceBayCount
    :FOR    ${index}    IN RANGE    0    ${blade_num}
    \    ${device_presence}    ${bay_number}=    Get Blade Presence    ${response}    ${index}
    \    Run Keyword If    '${device_presence}'=='Absent'     Append To List    ${unfilled}    ${bay_number}
    ...   ELSE    Log    Blade in bay ${bay_number} is PRESENT
    [Return]    ${unfilled}

Wait For Blade To Reach Present State
    [Documentation]    This keyword is to wait until blade to reach a known state until timeout secs
    [Arguments]    ${timeout}    ${interval}    ${uri}    ${state}
    Set Log Level    TRACE
    ${retries}=    Evaluate    ${timeout} / ${interval}
    #Loop until Server to reach a known state using sleep interval until timeout seconds
    :FOR    ${index}    IN RANGE    0    ${retries}
    \    Sleep    ${interval}
    \    ${resp}=    fusion api get resource    ${uri}
    #Wait time for server to Power ON and ready for api query
    \    Continue For Loop If    ${resp['status_code']} != 200
    \    Run Keyword If    '${resp['state']}' == '${state}'    Exit For Loop
    [Return]    ${resp}

Get Maximum Bay Occupied By Blade
    [Documentation]    Keyword to Obtain maximum Occupied Bay from a Blade
    [Arguments]    ${bay_number}
    ${full_height}=    Evaluate    ${bay_number} + 6
    ${full_height_double}=    Evaluate    ${bay_number} + 7
    ${resp}=    Get Server Information    ${bay_number}
    ${form_factor}=    Get From Dictionary    ${resp}    formFactor
    Run Keyword If    "${form_factor}" == "HalfHeight"    Return From Keyword    ${bay_number}
    Run Keyword If    "${form_factor}" == "FullHeight"    Return From Keyword    ${full_height}
    Run Keyword If    "${form_factor}" == "FullHeightDoubleWide"    Return From Keyword    ${full_height_double}

Get Current Power Supply List
    [Documentation]    This keyword will get the current number of Power Supplies from Enclosure
    ${cur_ps_list} =    Create List
    ${resp} =    Fusion Api Get Enclosures
    ${ps_list} =    Get From Dictionary    ${resp['members'][0]}    powerSupplyBays
    ${ps_count} =    Get Length  ${ps_list}
    :FOR    ${x}    IN RANGE    0   ${ps_count}
    \    ${ps} =    Get From Dictionary   ${ps_list[${x}]}    bayNumber
    \    ${ps_status}=    Get From Dictionary    ${ps_list[${x}]}    devicePresence
    \    Run Keyword And Ignore Error    Run Keyword If     '${ps_status}'=='Present'    Append to list    ${cur_ps_list}    ${ps}
    Sort List    ${cur_ps_list}
    [Return]    ${cur_ps_list}

Get Power Supply Info
    [Documentation]    This keyword will get Power suppy info  from server enclosure
    [Arguments]    ${bay_num}
    ${ps_info}=    Set Variable    False
    ${bay_num}=    Convert To Integer    ${bay_num}
    ${resp}=   Fusion Api Get Enclosures
    ${ps_list} =     Get From Dictionary    ${resp['members'][0]}    powerSupplyBays
    ${l} =  Get Length  ${ps_list}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${ps} =     Get From List   ${ps_list}    ${x}
    \    ${ps_bay}=    Get From Dictionary    ${ps}    bayNumber
    \    Run Keyword If    ${bay_num}!=${ps_bay}    Continue For Loop
    \    ${ps_info}=    Get From List   ${ps_list}    ${x}
    [Return]    ${ps_info}

Wait Until ICM To Reach Present State
    [Documentation]    This keyword is to wait until icm to reach a known state until timeout secs
    [Arguments]    ${timeout}    ${interval}    ${icm_bay}    ${state}
    Set Log Level    TRACE
    ${retries}=    Evaluate    ${timeout} / ${interval}
    # Loop until icm to reach a known state using sleep interval until timeout seconds
    :FOR    ${index}    IN RANGE    0    ${retries}
    \    Sleep    ${interval}
    \    ${icm_list}=    Get ICM Bay List
    \    ${status}=    Count Values In List    '${icm_list}'    '${icm_bay}'
    \    Continue For Loop If    ${status} == 0
    \    ${info}=    Get ICM Info    ${icm_bay}
    \    ${state_icm}=    Set Variable    ${info["state"]}
    \    Continue For Loop If    '${state_icm}' != '${state}'
    \    Run Keyword If    '${state_icm}' == '${state}'    Exit For Loop

###############
# Login - Keywords
###############
Login to Fusion Via REST
    [Documentation]    Connects to the Appliance and creates a session using the Username and Password.
    ...                Example:\n| Login to Fusion Via REST | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]    ${IP}=${APPLIANCE_IP}    ${USERNAME}=${FUSION_USERNAME}    ${PASSWORD}=${FUSION_PASSWORD}
    Should Not Be Equal    ${IP}    'unknown'    msg=Please specify a valid Fusion IP address or hostname
    ${Creds}    Create Dictionary    userName=${USERNAME}    password=${PASSWORD}
    ${Response}    ${SessionID}=    Fusion Api Login Appliance    ${IP}    ${Creds}
    ${Status}    Get From Dictionary    ${Response}    status_code
    Return From Keyword If    '${Status}' == '200'    ${Response}    ${SessionID}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}    Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

Logout of Fusion Via REST
    [Documentation]    Terminates a session with the REST API.
    ...    Example:\n| Logout Of Fusion Via REST |
    Fusion Api Logout Appliance

Login to Fusion via SSH
    [Documentation]             Connect to Fusion VM Bash via SSH
    ...                         Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]                 ${IP}=${APPLIANCE_IP}      ${USERNAME}=${SSH_USERNAME}
    ...                         ${PASSWORD}=${SSH_PASSWORD}    ${PROMPT}=${FUSION_PROMPT}
    ...                         ${TIMEOUT}=${FUSION_TIMEOUT}    ${ALIAS}=Fusion_SSH
    Log Many    ${IP}    ${USERNAME}    ${PASSWORD}    ${PROMPT}    ${TIMEOUT}
    Set Default Configuration    prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=    Open Connection    ${IP}    alias=${ALIAS}
    ${Output}=    Login    ${USERNAME}    ${PASSWORD}
    [Return]    ${Id}

Logout of Fusion Via SSH
    [Documentation]     Exits the current Bash SSH session
    ...                 Example:\n| Logout Of Fusion Via SSH |
    Close Connection

Execute SSH Command
    [Documentation]     Executes given command on the Fusion SSH shell
    ...                 Example:\n| Execute CLI Command | show enclosure list |
    [Arguments]         ${Command}      ${PROMPT}=${FUSION PROMPT}
    SSHLibrary.Write    ${Command}
    ${Output}=    Read until    ${PROMPT}
    [Return]    ${Output}

Get Device Current State
    [Documentation]    This keyword will get the current state of any device
    [Arguments]    ${uri}    ${state}
    Set Log Level    TRACE
    ${resp} =   fusion api get resource    ${uri}
    Log    \t ${uri}: ${resp['state']}    console=yes
    Should Match Regexp    ${resp['state']}    ${state}
    [Return]    ${resp}

Get Device Presence
    [Documentation]    Get Device Bay presence
    ...
    ...    Example:
    ...    Get Device Presence    ${ov_response}    ${index}    ${deviceName}
    [Arguments]    ${ov_response}    ${index}    ${deviceName}
    ${devices}=    Get From Dictionary    ${ov_response['members'][0]}    ${deviceName}
    ${device_bay}=    Get From List    ${devices}    ${index}
    ${device_presence}=    Get From Dictionary    ${device_bay}    devicePresence
    ${bay_number}=    Get From Dictionary    ${device_bay}    bayNumber
    [Return]    ${device_presence}    ${bay_number}

Get Device Bay Present And Absent List
    [Documentation]    Get Present and Absent Device Bay List from the Enclosure - Shared
    ...
    ...    Example:
    ...    ${DeviceName} =   Get Device Bay Present And Absent List    ${deviceName}
    ...    deviceName - SERVER / FAN /PS / CIM / FLM
    [Arguments]    ${deviceName}
    ${device_info} =    Create List     deviceBayCount    deviceBays
    ${fan_info} =    Create List     fanBayCount    fanBays
    ${cim_info} =    Create List     applianceBayCount    applianceBays
    ${ps_info} =     Create List     powerSupplyBayCount    powerSupplyBays
    ${flm_info} =     Create List     managerBayCount    managerBays
    ${dev_dict} =    Create Dictionary    Server=${device_info}    Fan=${fan_info}    PS=${ps_info}    CIM=${cim_info}    FLM=${flm_info}

    ${dev_details} =    Run Keyword If    '${deviceName}' == 'SERVER'    Get From Dictionary     ${dev_dict}    Server
    ...    ELSE IF        '${deviceName}' == 'FAN'    Get From Dictionary     ${dev_dict}    Fan
    ...    ELSE IF        '${deviceName}' == 'CIM'    Get From Dictionary     ${dev_dict}    CIM
    ...    ELSE IF        '${deviceName}' == 'PS'    Get From Dictionary     ${dev_dict}    PS
    ...    ELSE IF        '${deviceName}' == 'FLM'    Get From Dictionary     ${dev_dict}    FLM

    ${present_list} =    Create List
    ${absent_list}=    Create List
    ${fusion_resp}=    Fusion Api Get Enclosures
    ${num_of_device}=    Get From Dictionary    ${fusion_resp['members'][0]}    ${dev_details[0]}
    :FOR    ${index}    IN RANGE    0    ${num_of_device}
    \    ${device_presence}    ${bay_number}=    Get Device Presence    ${fusion_resp}    ${index}    ${dev_details[1]}
    \    Run Keyword If    '${device_presence}'=='Present'     Append To List    ${present_list}    ${bay_number}
    ...    ELSE IF    '${device_presence}'=='Absent'     Append To List    ${absent_list}    ${bay_number}
    [Return]    ${present_list}    ${absent_list}

Get Interconnect Bay Present And Absent List
    [Documentation]    Get Present and Absent ICM Bay List from the Enclosure - Shared
    ...
    ...    Example:
    ...    ${present_list}    ${absent_list}=   Get Interconnect Bay Present And Absent List
    ${icm_details} =    Create List    interconnectBayCount    interconnectBays
    ${present_list} =    Create List
    ${absent_list}=    Create List
    ${fusion_resp}=    Fusion Api Get Enclosures

    ${num_of_device}=    Get From Dictionary    ${fusion_resp['members'][0]}    ${icm_details[0]}
    :FOR    ${bay_number}    IN RANGE    0    ${num_of_device}
    \    ${devices}=    Get From Dictionary    ${fusion_resp['members'][0]}    ${icm_details[1]}
    \    ${device_bay}=    Get From List    ${devices}    ${bay_number}
    \    ${interconnectModel_name}=    Get From Dictionary    ${device_bay}    interconnectModel
    \    ${bay_number}=    Get From Dictionary    ${device_bay}    bayNumber
    \    Run Keyword If    '${interconnectModel_name}' != 'None'    Append To List    ${present_list}    ${bay_number}
    ...    ELSE     Append To List    ${absent_list}    ${bay_number}
    [Return]    ${present_list}    ${absent_list}

#######################################
#  Keywords - Efuse Devices
#######################################
Efuse Interconnect Device
    [Documentation]    Perform an efuse action on a ICM bay - Shared
    ...
    ...    Example:
    ...    ${Output} =   Efuse Interconnect Device    ${Action}    ${BayNumber}
    ...    ${Action} = EfuseOff | EfuseOn | EfuseReset
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log    \t Perform Efuse ${Action} for ICM:${BayNumber}    console=yes
    ${Output} =     Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/InterconnectBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=Efuse action failed \n${Output}
    [Return]    ${Output}

Efuse PowerSupply Device
    [Documentation]    Perform an efuse action on a PS bay - Shared
    ...
    ...    Example:
    ...    ${Output} =   Efuse PowerSupply Device    ${Action}    ${BayNumber}
    ...    ${Action} = EfuseOff | EfuseOn | EfuseReset
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log    \t Perform Efuse ${Action} for PowerSupply:${BayNumber}    console=yes
    ${Output} =    Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/PowerSupplyBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=Efuse action failed \n${Output}
    [Return]    ${Output}

Efuse Fan Device
    [Documentation]    Perform an efuse action on a Fan bay - Shared
    ...
    ...    Example:
    ...    ${Output} =   Efuse Fan Device    ${Action}    ${BayNumber}
    ...    ${Action} = EfuseOff | EfuseOn | EfuseReset
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log    \t Perform Efuse ${Action} for Fan:${BayNumber}    console=yes
    ${Output} =    Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/FanBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=Efuse action failed \n${Output}
    [Return]    ${Output}

Efuse Appliance Device
    [Documentation]    Perform an efuse action on a Appliance-CIM bay - Shared
    ...
    ...    Example:
    ...    ${Output} =   Efuse Appliance Device    ${Action}    ${BayNumber}
    ...    ${Action} = EfuseOff | EfuseOn | EfuseReset
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log    \t Perform Efuse ${Action} for CIM:${BayNumber}    console=yes
    ${Output} =    Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/CIManagerBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=Efuse action failed \n${Output}
    [Return]    ${Output}

Efuse Server Device
    [Documentation]    Perform an efuse action on a Server Blade bay - Shared
    ...
    ...    Example:
    ...    ${Output} =   Efuse Server Device    ${Action}    ${BayNumber}
    ...    ${Action} = EfuseOff | EfuseOn | EfuseReset
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    Log    \t Perform Efuse ${Action} for Server Blade:${BayNumber}    console=yes
    ${Output} =     Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/BladeBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=Efuse action failed \n${Output}
    [Return]    ${Output}

Efuse Standby FLM
    [Documentation]    Perform an efuse action (on/Off) on Standby FLM bay  - Shared
    ...
    ...    Example:
    ...    ${result}=    Efuse Standby FLM    ${Action}    ${BayNumber}
    ...    ${Action} = EFuseOff | EFuseOn
    [Arguments]    ${Action}    ${BayNumber}
    ${result}=    Run Keyword If    '${Action}' == 'EFuseOn'    EM API Get Diags   OtherEM_SimRemove
    ...   ELSE IF    '${Action}' == 'EFuseOff'    EM API Get Diags   OtherEM_Restore
    Sleep    ${Standby_EM_Efuse_Wait}
    Build RIS Object Model at Root Level
    [Return]    ${result}

Reseat Server
    [Documentation]    Perform an efuse action on a Server Blade bay - Shared
    [Arguments]    ${BayNumber}
    Login to Fusion via SSH
    Login to EM And Create Session
    ${server_info}=    Get Server Info    ${BayNumber}
    Log    Efuse the server bay : ${BayNumber} and wait for profile to be applied once discovered    console=yes
    EFuse Blade    EFuseReset    ${BayNumber}
    Sleep    150
    Log    \t Waiting for Server in Bay:${BayNumber} to reach state:ProfileApplied after Efuse    console=yes
    Wait Until Keyword Succeeds    20 min   20s    Get Device Current State    ${server_info['uri']}    ProfileApplied
    Logout of Fusion Via SSH

Get CIM Active Or StandBy Bay
    [Documentation]   Retrieves bay number of the CIM  based on the role of the CIM in the high-availability appliance cluster.
    ...               The parameter role could be: Active/Standby/Unused - Shared
    [Arguments]    ${ROLE}
    Log    Get specified node in HA appliance cluster    console=yes
    ${resp}=    Fusion Api Get HA Nodes
    :FOR    ${node}    IN    @{resp['members']}
    \       ${bay}=    Run Keyword If    '${node['role']}' != '${ROLE}'
            ...    Continue For Loop
            ...    ELSE    Get From Dictionary    ${node['location']}    bay
    [Return]    ${bay}

Get Server Information
    [Documentation]    Get the Server Information from Fusion - Shared  [copied from original keyword: Get Server Info]
    [Arguments]    ${bay_num}
    ${server_info}=    Set Variable    False
    ${bay_num}=    Convert To Integer    ${bay_num}
    ${resp} =   fusion api get server hardware
    ${servers} =     Get From Dictionary     ${resp}    members
    ${length} =  Get Length  ${servers}
    :FOR    ${index}    IN RANGE    0   ${length}
    \    ${server} =     Get From List   ${servers}    ${index}
    \    ${server_bay}=    Get From Dictionary    ${server}    position
    \    Run Keyword If    ${bay_num}!=${server_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${server}   uri
    \    ${server_info}=    fusion api get server hardware    uri=${uri}
    [Return]    ${server_info}

Get ICM Information
    [Documentation]    Get the ICM Information from Fusion - Shared
    [Arguments]    ${bay_num}
    ${bay_num}=    Convert To Integer    ${bay_num}
    ${resp} =   fusion api get interconnect
    ${interconnect} =     Get From Dictionary     ${resp}    members
    ${length} =  Get Length  ${interconnect}
    :FOR    ${index}    IN RANGE    0   ${length}
    \    ${icm} =     Get From List   ${interconnect}    ${index}
    \    ${icm_location}=    Set Variable    ${icm['interconnectLocation']['locationEntries']}
    \    ${icm_bay}=    Get ICM Bay Location    ${icm_location}
    \    ${icm_bay}=    Convert To Integer    ${icm_bay}
    \    Run Keyword If    ${bay_num}!=${icm_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${icm}   uri
    \    ${icm_info}=    fusion api get interconnect    uri=${uri}
    [Return]    ${icm_info}

Get Fusion Device Health Status
    [Documentation]    Get the Device Health Status from the Enclosure - Shared
    ...
    ...    Example:
    ...    ${DeviceName} =   Get Fusion Device Health Status    ${deviceName}    ${bayNumber}
    ...    deviceName - FAN /PS / FLM / CIM / SERVER / ICM
    [Arguments]    ${deviceName}    ${bayNumber}
    ${fusion_resp}=    Fusion Api Get Enclosures
    #Check device presence
    ${device_present_list}    ${device_absent_list}=    Run Keyword If    '${deviceName}' == 'ICM'   Get Interconnect Bay Present And Absent List
    ...   ELSE    Get Device Bay Present And Absent List    ${deviceName}
    #If the device is absent, return as device absent
    ${status}    ${return}=    Run Keyword And Ignore Error     List Should Contain Value    ${device_present_list}    ${bayNumber}
    Run Keyword If    '${status}'=='FAIL'    Return from Keyword    "Device Absent"

    ${device_info}=    Run Keyword If    '${deviceName}' == 'FAN'       Get From Dictionary    ${fusion_resp['members'][0]}    fanBays
    ...    ELSE IF        '${deviceName}' == 'PS'       Get From Dictionary    ${fusion_resp['members'][0]}    powerSupplyBays
    ...    ELSE IF        '${deviceName}' == 'FLM'       Get From Dictionary    ${fusion_resp['members'][0]}    managerBays
    ...    ELSE IF        '${deviceName}' == 'CIM'       Get From Dictionary    ${fusion_resp['members'][0]}    applianceBays
    ...    ELSE IF        '${deviceName}' == 'SERVER'    Get Server Information    ${bayNumber}
    ...    ELSE IF        '${deviceName}' == 'ICM'    Get ICM Information    ${bayNumber}

    ${health_status}=    Run Keyword If    '${deviceName}' == 'FAN'    Get From Dictionary    ${device_info[${bayNumber} - 1]}    status
    ...    ELSE IF        '${deviceName}' == 'CIM'    Get From Dictionary    ${device_info[${bayNumber} - 1]}    status
    ...    ELSE IF        '${deviceName}' == 'PS'    Get From Dictionary    ${device_info[${bayNumber} - 1]}    status
    ...    ELSE IF        '${deviceName}' == 'FLM'    Get From Dictionary    ${device_info[${bayNumber} - 1]}    status
    ...    ELSE IF        '${deviceName}' == 'SERVER'    Get From Dictionary    ${device_info}    status
    ...    ELSE IF        '${deviceName}' == 'ICM'    Get From Dictionary    ${device_info}    status
    [Return]    ${health_status}

FLM Failover
    [Documentation]    Perform FLM ForceFailover operation - Shared
    ...    
    ...    Example:
    ...    ${Output} =   FLM Failover    ${flm_bay}
    [Arguments]    ${FLM_bay}
    ${Header}    Set Variable    "X-Auth-Token":"${EM_TOKEN}"
    ${Data}      Set Variable    {"Action":"ForceFailover"}
    Log    \t Issuing ForceFailover on FLM:${EM_IP}    console=yes
    ${Output}=    Execute SSH Command
    ...    curl -ikX POST --tlsv1 -H ${Header} --data-ascii '${Data}' https://${EM_IP}%${FUSION_NIC}/rest/v1/EnclosureManager/${FLM_bay}
    Should Contain    ${Output}    { "Action": "ForceFailover" }
    ...    msg=ForceFailover action failed \n${Output}
    [Return]    ${Output}

Get FLM Active Or StandBy Bay
    [Documentation]    Keyword to get FLM Active Or StandBy Bay
    ...
    ...    Example:
    ...    ${Output} =   Get FLM Active Or StandBy Bay    ${Role}
    [Arguments]    ${Role}
    ${flm_info} =     Create List     managerBayCount    managerBays
    ${fusion_resp}=    Fusion Api Get Enclosures
    ${num_of_device}=    Get From Dictionary    ${fusion_resp['members'][0]}    ${flm_info[0]}
    :FOR    ${bay_number}    IN RANGE    0    ${num_of_device}
    \    ${device_info}=    Get From Dictionary    ${fusion_resp['members'][0]}    ${flm_info[1]}
    \    ${device_bay}=    Get From List    ${device_info}    ${bay_number}
    \    ${flm_role}=    Get From Dictionary    ${device_bay}    role
    \    ${bay}=    Run Keyword If    '${flm_role}' == '${Role}'    Get From Dictionary    ${device_bay}    bayNumber
         ...     ELSE   Continue For Loop
    [Return]    ${bay}

Wait For Device Status
    [Documentation]    To wait for Device Absence status or OK status - Shared
    ...
    ...    Example:
    ...            |    ${result}=    |    Wait for Device Status    |    <device_name>    |    <bay_num>    |    <expected_status>    |
    [Arguments]    ${device_name}    ${bay_num}    ${expected_status}

    ${wait_cycle}=    Evaluate    ${Device_Wait_Time}/${interval}

    : FOR    ${duration}    IN RANGE    1    ${wait_cycle}
    \    ${device_present_list}    ${device_absent_list}=    Run Keyword If    '${device_name}' == 'ICM'    Get Interconnect Bay Present And Absent List
    ...   ELSE    Get Device Bay Present And Absent List    ${device_name}
    \    ${health_status}=    Run Keyword If    '${expected_status}' == 'OK'    Get Fusion Device Health Status    ${device_name}    ${bay_num}

    #Checking for device absence or OK status
    \    ${status}    ${return}=    Run Keyword If    '${expected_status}' == 'Absent'    Run Keyword And Ignore Error     List Should Not Contain Value    ${device_present_list}    ${bay_num}
    \    ${presence_status}=    Run Keyword If    '${status}'=='PASS'    Set Variable    "Absent"
    ...    ELSE IF    '${status}'=='FAIL'    Set Variable    "Present"
    \    ${ok_status}=    Run Keyword If    ${presence_status} == "Absent"    Exit For Loop
    ...    ELSE IF    '${expected_status}' == '${health_status}'    Exit For Loop
    ...    ELSE IF    ${duration}!=${wait_cycle}    Sleep    ${interval}
    ...    ELSE    FAIL    Device is not ready after sufficient trials: ${wait_cycle}
    [Return]    ${ok_status}

Wait For Active CIM Node To Be Ready
    [Documentation]    Waits for an appliance to reach the ready state after Failover - Shared
    ...                Expects the test case to be already logged in to appliance
    [Arguments]    ${timeout}=${CIM_Device_Wait_Time}    ${interval}=${CIM_Device_interval}
    :FOR    ${index}    IN RANGE    ${timeout}/${interval}
    \    ${state} =    Fusion Api Get Resource    /controller-state.json
    \    Run Keyword If    '${state['state']}' == 'OK'   Return From Keyword    PASS
    ...    ELSE    Sleep    ${interval}    reason= Appliance state: ${state['state']}
    FAIL    msg= Active CIM Node still not ready after waiting for ${timeout}

Wait For Device Present Or Absent Status
    [Documentation]    Keyword to wait for Device Present Or Absent status - Shared
    ...
    ...    Example:
    ...            |    ${result}=    |    Wait For Device Present Or Absent Status    |    <device_name>    |    <bay_num>    |    <expected_status>    |
    ...            <expected_status> = Present / Absent
    [Arguments]    ${device_name}    ${bay_num}    ${expected_status}

    ${wait_cycle}=    Evaluate    ${Device_Wait_Time}/${interval}

    : FOR    ${duration}    IN RANGE    1    ${wait_cycle}
    \    ${device_present_list}    ${device_absent_list}=    Run Keyword If    '${device_name}' == 'ICM'    Get Interconnect Bay Present And Absent List
    ...   ELSE    Get Device Bay Present And Absent List    ${device_name}
    \    ${status}    ${return}=    Run Keyword If    '${expected_status}' == 'Absent'    Run Keyword And Ignore Error     List Should Not Contain Value    ${device_present_list}    ${bay_num}
    ...    ELSE IF    '${expected_status}' == 'Present'    Run Keyword And Ignore Error     List Should Contain Value    ${device_present_list}    ${bay_num}

    \    ${presence_status}=    Run Keyword If    '${status}'=='PASS'    Set Variable    ${expected_status}
    #Checking for device absence or OK status
    \    ${status}=    Run Keyword If   '${presence_status}' == '${expected_status}'    Exit For Loop
    ...    ELSE IF    ${duration}!=${wait_cycle}    Sleep    ${interval}
    ...    ELSE    FAIL    Device is not ready after sufficient trials: ${wait_cycle}
    [Return]    ${status}

Get Server Hardware Info
    [Documentation]    Get Server Hardware info
    [Arguments]    ${bay_num}
    ${server_info}=    Set Variable    False
    ${bay_num}=    Convert To Integer    ${bay_num}
    ${resp} =   fusion api get server hardware
    ${servers} =     Get From Dictionary     ${resp}    members
    ${l} =  Get Length  ${servers}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${server} =     Get From List   ${servers}    ${x}
    \    ${server_bay}=    Get From Dictionary    ${server}    position
    \    Run Keyword If    ${bay_num}!=${server_bay}    Continue For Loop
    \    ${uri}=    Get From Dictionary     ${server}   uri
    \    ${server_info}=    fusion api get server hardware    uri=${uri}
    [Return]    ${server_info}

#######################################
#  ported from 3.10 branch
#######################################

Wait For FLM Failover
    [Documentation]    To wait for FLM failover - Shared
    ...
    ...    Example:
    ...            |    ${result}=    |    Wait for FLM Failover    |    <bay_num>    |    <role>    |
    [Arguments]    ${bay_num}    ${role}

    ${wait_cycle}=    Evaluate    ${Device_Wait_Time}/${interval}

    : FOR    ${duration}    IN RANGE    1    ${wait_cycle}
    \    ${active}=    Get FLM Active Or StandBy Bay    Active
    \    ${standby}=    Get FLM Active Or StandBy Bay    Standby
    \    ${node}=    Run Keyword If    ${bay_num} == ${active}    Set Variable    Active
        ...   ELSE IF    ${bay_num} == ${standby}    Set Variable    Standby
    \    ${status}=    Run Keyword If    '${node}'!='${role}'    Exit For Loop
    ...   ELSE IF    ${duration}!=${wait_cycle}-1    Sleep    ${interval}
    ...    ELSE    FAIL    Device is not ready after sufficient trials: ${Device_Wait_Time} seconds
    [Return]    ${status}

Reset FLM
    [Documentation]    To reset standby or active FLM - Shared
    ...    Example:
    ...         Reset FLM    ${name}    ${bay_num}
    [Arguments]    ${name}    ${bay_num}
    ${uri} =    enclosure.Get Enclosure URI    ${name}
    ${dict} =    Create Dictionary    op=replace    path=/managerBays/${bay_num}/bayPowerState    value=Reset
    ${body} =    Create List  ${dict}
    ${headers} =    Fusion Api Get Headers
    ${resp_enc} =    Get Enclosure    ${name}
    ${etag} =   Get From Dictionary    ${resp_enc}    eTag
    Set to Dictionary    ${headers}    If-Match    ${etag}
    ${resp} =    Fusion Api Patch Enclosure    ${body}     ${uri}    headers=${headers}
    [Return]    ${resp}

Wait For Device State
    [Documentation]    To wait for Device state - Shared
    ...
    ...    Example:
    ...            |    ${result}=    |    Wait for Device State    |    <device_name>    |    <bay_num>    |    <expected_state>    |
    ...    Expected_state - Monitored/Configured/ProfileApplied..etc    device_name should be ICM/SERVER
    [Arguments]    ${device_name}    ${bay_num}    ${expected_state}

    ${wait_cycle}=    Evaluate    ${Device_Wait_Time}/${interval}

    : FOR    ${duration}    IN RANGE    1    ${wait_cycle}
    \    ${fusion_resp}=    Fusion Api Get Enclosures
    \    ${device_info}=    Run Keyword If    '${deviceName}' == 'ICM'       Get ICM Information    ${bay_num}
    ...    ELSE IF        '${deviceName}' == 'SERVER'       Get Server Information    ${bay_num}
    \    ${health_state}=    Run Keyword If    '${deviceName}' == 'ICM'    Get From Dictionary    ${device_info}    state
    ...  ELSE IF     '${deviceName}' == 'SERVER'      Get From Dictionary    ${device_info}    state
    \    Run Keyword If     '${expected_state}' == '${health_state}'    Exit For Loop
    ...   ELSE IF    ${duration}!=${wait_cycle}    Sleep    ${interval}
    ...   ELSE    FAIL   Device state not reached to expected state after sufficient trials: ${wait_cycle}

Set PS Fault And Get Enclosure Health Status
    [Documentation]    To inject the CANmic fault to the powersupply and retrieve the enclosure health status
    ...
    ...    Example:
    ...             |${health_status}=    |    Set PS Fault And Get Enclosure Health Status    |    <ps_bay>    |
    [Arguments]    ${ps_bay}
    Log    Failing power supply in bay:${ps_bay}    console=yes
    ${good_ps} =    Get Good Power Supplies In The Enclosure
    ${needed_ps} =    Get Needed Power Supplies In the Enclosure
    ${fault_status}=    Run Keyword If    '${good_ps}'>='${needed_ps}'    Set EM RIS CANmic Faults    ${PowerSupply_Device}    ${ps_bay}    true
    Should Be Equal As Strings    ${fault_status}    <Response [200]>
    Wait For Device Status    ${PSDevice_EM}    ${ps_bay}    Warning
    ${fusion_response}=    Fusion Api Get Enclosures
    ${enclosure_health}=    Get From Dictionary    ${fusion_response['members'][0]}    status
    [Return]    ${enclosure_health}

Login And Create EM Session
    [Documentation]    Login to EM And Create Session [Original keyword copied "Login to EM And Create Session"]
    # Get EM IP and create session
    Get EM IP
    ${encl_list}=    Get Active CIManager Serial Number
    Get EM Token    ${encl_list}
    Get EM Sessions    
    
Get Server Hardware Bay List
    [Documentation]    This keyword will get the current number of SERVER BLADE from a SINGLE enclosure [Copied from original keyword "Get Server Bay List"]
    ${resp} =    fusion api get server hardware
    ${blade_list} =    Create List
    ${blades} =     Get From Dictionary    ${resp}    members
    ${l} =  Get Length  ${blades}
    :FOR    ${x}    IN RANGE    0   ${l}
    \    ${blade} =     Get From List   ${blades}    ${x}
    \    ${bay} =    Fetch from right    ${blade['name']}    ${SPACE}
    \   Append to list    ${blade_list}  ${bay}
    Sort List    ${blade_list}
    [Return]    ${blade_list}
    
Get Active CIManager Serial Number
    [Documentation]    Retrieves the active CIM Serial Number [Copied from original keyword "Get Active CIM Serial Number"]
    ${Active_CIM_Serial} =    Execute SSH Command     lldpcli show neighbors
    ${m}    ${Active_CIM_Serial} =  Should Match Regexp     ${Active_CIM_Serial}    (?im)SysDescr:\\s*{"SN":"(\\S*)",\\S*,\\S*,\\S*
    Set Suite Variable    ${Active_CIM_Serial}
    Log     \nActive CIM Serial Number: ${Active_CIM_Serial}    console=yes
    [Return]    ${Active_CIM_Serial}    
    
Get ICM Bay Location
    [Documentation]   Get ICM Bay Location [Copied from original keyword "Get ICM Bay From Location"]
    [Arguments]    ${icm_location}
    ${icm_len} =  Get Length  ${icm_location}
    :FOR    ${x}    IN RANGE    0   ${icm_len}
    \    ${location_entry_dict} =     Get From List   ${icm_location}    ${x}
    \    ${type}=    Get From Dictionary    ${location_entry_dict}    type
    \    Run Keyword If    '${type}'!='Bay'    Continue For Loop
    \    ${bay_location}=    Get From Dictionary    ${location_entry_dict}    value
    [Return]    ${bay_location}
    
Build OV Back up File Name
    [Documentation]    Local keyword to build the local back up file name
    ${local_file} =    Get Time
    ${local_file} =    Replace String Using Regexp    ${local_file}    ( |:)    _
    ${local_file} =    Catenate    SEPARATOR=.    ${local_file.strip()}    bkp  
    ${OneView_Backup_Local_Path}=    Catenate    SEPARATOR=  ${OneView_Backup_Local_Path}  ${Enclosures}  _OVBackup_  ${local_file}
    [return]    ${OneView_Backup_Local_Path}

Cleanup Backup Restore Environment
    [Documentation]    Cleans up VMAC, VWWM, VSN ranges post restore process
    ${urilist}=    Create List    vmac    vwwn    vsn
    :FOR    ${x}    IN    @{urilist}
    \    ${uri}=    Set Variable    /rest/id-pools/${x}/
    \    ${pool} =    Fusion Api Get Pool    uri=${uri}
    \    ${rangeUris} =     Get From Dictionary    ${pool}    rangeUris
    \    ${len}=    Get Length    ${rangeUris}
    \    ${index}=    Evaluate    ${len}-1
    \    Remove From List    ${rangeUris}    ${index}
    \    ${poolType} =     Get From Dictionary     ${pool}    poolType
    \    ${resp} =    Run Keyword If     '${poolType}' == 'VMAC'    Run Keywords    Delete VMAC Ranges    ${rangeUris}
    \    ...    AND    Enable Auto-Generated VMAC Ranges    ${uri}
    \    ...    ELSE IF  '${poolType}' == 'VWWN'    Run Keywords    Delete VWWN Ranges    ${rangeUris}
    \    ...    AND    Enable Auto-Generated VWWN Ranges    ${uri}
    \    ...    ELSE IF  '${poolType}' == 'VSN'    Run Keywords    Delete VSN Ranges    ${rangeUris}
    \    ...    AND    Enable Auto-Generated VSN Ranges    ${uri}

######  Addresses and Identifiers Section  #######

Enable Auto-Generated VMAC Ranges
    [Documentation]    Enables the auto-generated VMAC Range on an appliance
    [Arguments]    ${uri}
    ${pool}=    Fusion Api Get Pool    uri=${uri}
    ${rangeUris}=    Get From Dictionary    ${pool}    rangeUris
    :FOR    ${rangeUri}    IN    @{rangeUris}
    \    ${range}=    Fusion Api Get VMAC Range    uri=${rangeUri}
    \    ${rangeCategory}=    Get From Dictionary    ${range}    rangeCategory
    \    Run Keyword If    '${rangeCategory}' == 'Generated'    Log    Enabled auto-generated VMAC range ${rangeUri}    console=yes
    \    ${resp}=    Run Keyword If    '${rangeCategory}' == 'Generated'    Fusion Api Edit VMAC Range    body=${pool_range_enable}    uri=${rangeUri}
    [Return]    ${resp}

Enable Auto-Generated VWWN Ranges
    [Documentation]    Enables the auto-generated VWWN Range on an appliance
    [Arguments]    ${uri}
    ${pool}=    Fusion Api Get Pool    uri=${uri}
    ${rangeUris}=    Get From Dictionary    ${pool}    rangeUris
    :FOR    ${rangeUri}    IN    @{rangeUris}
    \    ${range}=    Fusion Api Get VWWN Range    uri=${rangeUri}
    \    ${rangeCategory}=    Get From Dictionary    ${range}    rangeCategory
    \    Run Keyword If    '${rangeCategory}' == 'Generated'    Log    Enabled auto-generated VWWN range ${rangeUri}    console=yes
    \    ${resp}=    Run Keyword If    '${rangeCategory}' == 'Generated'    Fusion Api Edit VWWN Range    body=${pool_range_enable}    uri=${rangeUri}
    [Return]    ${resp}

Enable Auto-Generated VSN Ranges
    [Documentation]    Enables the auto-generated VSN Range on an appliance
    [Arguments]    ${uri}
    ${pool}=    Fusion Api Get Pool    uri=${uri}
    ${rangeUris}=    Get From Dictionary    ${pool}    rangeUris
    :FOR    ${rangeUri}    IN    @{rangeUris}
    \    ${range}=    Fusion Api Get VSN Range    uri=${rangeUri}
    \    ${rangeCategory}=    Get From Dictionary    ${range}    rangeCategory
    \    Run Keyword If    '${rangeCategory}' == 'Generated'    Log    Enabled auto-generated VSN range ${rangeUri}    console=yes
    \    ${resp}=    Run Keyword If    '${rangeCategory}' == 'Generated'    Fusion Api Edit VSN Range    body=${pool_range_enable}    uri=${rangeUri}
    [Return]    ${resp}

Delete VMAC Ranges
    [Documentation]    Removes a set of Auto-Generated VMAC ranges
    [Arguments]        ${uri}
    :FOR    ${rangeUri}    IN    @{uri}
    \    ${range} =     Fusion Api Get VMAC Range    uri=${rangeUri}
    \    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory
    \    ${resp} =    Run Keyword If     '${rangeCategory}'=='Generated'     Fusion Api Delete VMAC Range    uri=${rangeUri}

Delete VWWN Ranges
    [Documentation]    Removes a set of Auto-Generated VWWN ranges
    [Arguments]        ${uri}
    :FOR    ${rangeUri}    IN    @{uri}
    \    ${range} =     Fusion Api Get VWWN Range    uri=${rangeUri}
    \    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory
    \    ${resp} =     Run Keyword If     '${rangeCategory}'=='Generated'     Fusion Api Delete VWWN Range    uri=${rangeUri}

Delete VSN Ranges
    [Documentation]    Removes a set of Auto-Generated VSN ranges
    [Arguments]        ${uri}
    :FOR    ${rangeUri}    IN    @{uri}
    \    ${range} =     Fusion Api Get VSN Range    uri=${rangeUri}
    \    ${rangeCategory} =     Get From Dictionary    ${range}    rangeCategory

Send Email Notify
    [Documentation]    Send Email Notify - Shared
    ...
    ...    Example:
    ...    Send Email Notify 
    Run Keyword If  '${Subject}' == ''  Set Variable
    ${Subject}    Catenate     ${Subject}     ${CAT_Name}     Failed:     ${TEST NAME}     :${Server_Name}    :Bay ${Server_Bay}    :${Adapter_Name}    :Slot ${Adapter_Mezz_Slot}
    ${LogFile}=      Set Variable    ${LOG FILE}
    ${LogFile_Mod}=     Replace String     ${LogFile}    C:\\    C\\
    ${LogPath}=     Catenate    \\${AutoVM_IP}${LogFile_Mod}
    Run Keyword If  '${Content}' == ''  Set Variable
    ${Content}    Catenate    Suite Name: \n${SUITE NAME}\n\nTest case name: \n${TEST NAME}\n\nLogFile: \n${LogPath}\n\n
    @{receiver_names}=    Split String    ${Receiver}     ,
    Connect To SMTP Server          ${SMTP_Server}  True
    Send Email      ${Sender}    ${receiver_names}      ${Subject}      ${Content}
    Disconnect From SMTP Server
    
Get FC URIs list
    [Documentation]    Get FC network URIs for the named FC network list
    ...                Copied from Get FC URIs
    [Arguments]    ${netlist}
    ${urilist} =    Create List
    :FOR    ${net}    IN    @{netlist}
    \    ${val} =     Get substring  ${net}  1   5
    \    Run Keyword If    '${val}' == 'rest'    Append To List    ${urilist}    ${net}
    \   Continue For Loop If       '${val}' == 'rest'
    \    ${resp} = Fusion Api Get FC Networks    param=?filter="'name'=='${net}'"
    \   Continue For Loop If     ${resp['members']} == []
    \    ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    \    Append To List  ${urilist}    ${uri}
    [Return]    ${urilist}

Get FCoE URIs list
    [Documentation]    Get FCoE network URIs for the named FCoE network list
    [Arguments]    ${netlist}
    ${urilist} =    Create List
    :FOR    ${net}  IN    @{netlist}
    \   ${val} =     Get substring  ${net}  1   5
    \   Run Keyword If      '${val}' == 'rest'    Append To List    ${urilist}    ${net}
    \   Continue For Loop If     '${val}' == 'rest'
    \   ${resp} =    Fusion Api Get Fcoe Networks    param=?filter="'name'=='${net}'"
    \   Continue For Loop I      ${resp['members']} == []
    \   ${uri} =    Get From Dictionary    ${resp['members'][0]}    uri
    \   Append To List ${urilist}    ${uri}
    [Return]    ${urilist}
