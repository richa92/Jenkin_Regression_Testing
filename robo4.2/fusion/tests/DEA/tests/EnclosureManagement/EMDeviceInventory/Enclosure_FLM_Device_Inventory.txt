*** Settings ***
Documentation    Test suite to validate Inventory of Enclosure - FLM (applicable to standby node only)

...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> |-v GIT_REPO_ROOT: | Enclosure_FLM_Device_Inventory.txt |
...    = Variables =
...    | GIT_REPO_ROOT |      Required: Repo root path if NOT defined in environment variable this is mgmtfw root location|
...    | ENC_SERIAL_NO |      Optional: If omitted, will use the 1st enclosure detected in OV |
...    | APPLIANCE_IP |       Required: OneView IPv4 address |

Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt
Library           RoboGalaxyLibrary
Library           MgmtFWLibrary
Library           FusionLibrary
Library           Collections
Library           Selenium2Library

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Setup EM RIS Session
Suite Teardown    Run Keyword    Logout of Fusion Via REST

*** Test Cases ***

TC 01: FLM Device Inventory: Validate FLM Inventory Details Present Or Absent In The List Before and After FLM Re-seated
    [Documentation]    This test checks on FLM inventory details (standby only) present or absent in the list before and after FLM re-seated
    [Tags]    PE    API    Automated    FLM    EM
    #Check If Standby FLM exists
    ${FLM count}=    Get Existing EM Presence Count
    Should Be Equal as Strings    ${FLM count}    2    msg= Standby FLM is required for this test script.
    #Get the Standby FLM bay
    ${standby_flm_bay}=    Get Diags EmClusterStatus Standby Node
    ${standby_flm_bay}=    Convert To Integer     ${standby_flm_bay}
    #Pass the device name <FLM> as argument
    ${present_flm_list}    ${absent_flm_list} =    Get Device Bay Present And Absent List    ${FLMDevice_EM}
    #Retrieve the FLM health status before efuse
    ${health_before_efuse}=    Get Fusion Device Health Status    ${FLMDevice_EM}    ${standby_flm_bay}
    #Efuse On the FLM
    Efuse Standby FLM    EFuseOn    ${standby_flm_bay}
    #Wait for the FLM absence state
    Wait For Device Status    ${FLMDevice_EM}    ${standby_flm_bay}    Absent
    #Retrieve the device present and absent list after efuse-on
    ${present_flm_list_after_efuse}   ${empty_flm_list_after_efuse} =  Get Device Bay Present And Absent List    ${FLMDevice_EM}
    List Should Not Contain Value    ${present_flm_list_after_efuse}    ${standby_flm_bay}
    List Should Contain Value    ${empty_flm_list_after_efuse}    ${standby_flm_bay}
    #Efuse Off the FLM
    Efuse Standby FLM     EFuseOff    ${standby_flm_bay}
    #Wait for the FLM to return to OK status
    Wait For Device Status    ${FLMDevice_EM}    ${standby_flm_bay}    OK
    #Compare the device present and absent list after efuse-off
    ${present_flm_list_after_efuseoff}    ${empty_flm_list_after_efuseoff} =  Get Device Bay Present And Absent List   ${FLMDevice_EM}
    List Should Contain Value    ${present_flm_list_after_efuseoff}    ${standby_flm_bay}
    List Should Not Contain Value    ${empty_flm_list_after_efuseoff}    ${standby_flm_bay}
    #Retrieve the FLM health status after efuse and compare
    ${health_after_efuse}=    Get Fusion Device Health Status    ${FLMDevice_EM}    ${standby_flm_bay}
    Should Be Equal    ${health_before_efuse}    ${health_after_efuse}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse Standby FLM     EFuseOff    ${standby_flm_bay}    AND    Wait For Device Status    ${FLMDevice_EM}    ${standby_flm_bay}    OK