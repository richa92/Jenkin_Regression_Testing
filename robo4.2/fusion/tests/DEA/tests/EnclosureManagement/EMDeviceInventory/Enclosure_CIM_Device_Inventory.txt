*** Settings ***
Documentation    Test suite to validate Inventory of Enclosure - CIM (standby only)

...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> |-v GIT_REPO_ROOT: | Enclosure_CIM_Device_Inventory.txt |
...    = Variables =
...    | GIT_REPO_ROOT |      Required: Repo root path if NOT defined in environment variable this is mgmtfw root location|
...    | ENC_SERIAL_NO |      Optional: If omitted, will use the 1st enclosure detected in OV |
...    | APPLIANCE_IP |       Required: OneView IPv4 address |

Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt
Library           RoboGalaxyLibrary
Library           MgmtFWLibrary
Library           FusionLibrary
Library           Collections
Library           Selenium2Library

Suite Setup       Run Keywords    Login to Fusion Via REST    AND     Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST    AND    Logout of Fusion Via SSH

*** Test Cases ***

TC 01: CIM Device Inventory: Validate CIM Inventory Details Present Or Absent In The List Before And After CIM Re-seated
    [Documentation]    This test checks on CIM inventory details present or absent in the list before and after CIM re-seated (standby only)
    [Tags]    PE    API    Automated    CIM    EM
    #Get the Standby CIM bay
    ${cim_bay}=    Get CIM Active Or StandBy Bay    ${Standby_Node}
    Should Not Be Equal as Strings    ${cim_bay}    None    msg= Standby CIM is required for this test script.
    ${cim_bay}=    Convert To Integer    ${cim_bay}
    #Pass the device name <CIM> as argument
    ${present_cim_list}    ${absent_cim_list} =    Get Device Bay Present And Absent List    ${CIMDevice_EM}
    #Retrieve the CIM health status before efuse
    ${health_before_efuse}=    Get Fusion Device Health Status    ${CIMDevice_EM}    ${cim_bay}
    #Efuse On the CIM
    Efuse Appliance Device    EFuseOn    ${cim_bay}
    #Wait for the CIM absence state
    Wait For Device Status    ${CIMDevice_EM}    ${cim_bay}    Absent
    #Retrieve the device present and absent list after efuse-on
    ${present_cim_list_after_efuse}   ${empty_cim_list_after_efuse} =  Get Device Bay Present And Absent List    ${CIMDevice_EM}
    List Should Not Contain Value    ${present_cim_list_after_efuse}    ${cim_bay}
    List Should Contain Value    ${empty_cim_list_after_efuse}    ${cim_bay}
    #Efuse Off the CIM
    Efuse Appliance Device    EFuseOff    ${cim_bay}
    #Wait for the CIM to return to OK status
    Wait For Device Status    ${CIMDevice_EM}    ${cim_bay}    OK
    #Compare the device present and absent list after efuse-off
    ${present_cim_list_after_efuseoff}    ${empty_cim_list_after_efuseoff} =  Get Device Bay Present And Absent List   ${CIMDevice_EM}
    List Should Contain Value    ${present_cim_list_after_efuseoff}    ${cim_bay}
    List Should Not Contain Value    ${empty_cim_list_after_efuseoff}    ${cim_bay}
    #Retrieve the CIM health status after efuse and compare
    ${health_after_efuse}=    Get Fusion Device Health Status    ${CIMDevice_EM}    ${cim_bay}
    Should Be Equal    ${health_before_efuse}    ${health_after_efuse}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse Appliance Device    EFuseOff    ${cim_bay}    AND     Wait For Device Status    ${CIMDevice_EM}    ${cim_bay}    OK