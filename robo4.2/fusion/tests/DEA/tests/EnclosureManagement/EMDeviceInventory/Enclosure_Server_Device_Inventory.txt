*** Settings ***
Documentation    Test suite to validate Inventory of Enclosure - Servers (applicable to Gen9 and Gen10 servers)

...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> |-v GIT_REPO_ROOT: | Enclosure_Server_Device_Inventory.txt |
...    = Variables =
...    | GIT_REPO_ROOT |      Required: Repo root path if NOT defined in environment variable this is mgmtfw root location|
...    | ENC_SERIAL_NO |      Optional: If omitted, will use the 1st enclosure detected in OV |
...    | APPLIANCE_IP |       Required: OneView IPv4 address |

Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt
Library           RoboGalaxyLibrary
Library           MgmtFWLibrary
Library           FusionLibrary
Library           Collections
Library           Selenium2Library

Suite Setup       Run Keywords    Login to Fusion Via REST    AND     Login to Fusion via SSH    AND    Login to EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST    AND    Logout of Fusion Via SSH

*** Test Cases ***

TC 01: Server Device Inventory: Validate Servers Inventory Details Present or Absent In The List Before and After Blade Re-seated
    [Documentation]    This test checks on Servers inventory details present or absent in the list before and after Blade re-seated
    [Tags]    PE    API    Automated    BLADE    EM
    #Pass the device name <Server> as argument
    ${present_server_list}    ${absent_server_list} =    Get Device Bay Present And Absent List    ${BladeDevice_EM}
    ${initial_len}=    Get Length    ${present_server_list}
    : FOR    ${server_bay}    IN    @{present_server_list}
    \    #Retrieve the server health status from Fusion
    \    ${health_before_efuse}=    Get Fusion Device Health Status    ${BladeDevice_EM}    ${server_bay}
    \    #Efuse On the Server
    \    EFuse Blade    EFuseOn    ${server_bay}
    \    #Wait for the server absence state
    \    Wait For Device Status    ${BladeDevice_EM}    ${server_bay}    Absent
    \    #Retrieve the device present and absent list after efuse-on
    \    ${present_server_list_after_efuse}   ${empty_server_list_after_efuse} =  Get Device Bay Present And Absent List    ${BladeDevice_EM}
    \    List Should Not Contain Value    ${present_server_list_after_efuse}    ${server_bay}
    \    List Should Contain Value    ${empty_server_list_after_efuse}    ${server_bay}
    \    #Efuse Off the Server
    \    EFuse Blade    EFuseOff     ${server_bay}
    \    #Wait for the server to return to OK status
    \    Wait For Device Status    ${BladeDevice_EM}    ${server_bay}    OK
    \    #Compare the device present and absent list after efuse-off
    \    ${present_server_list_after_efuseoff}    ${empty_server_list_after_efuseoff} =  Get Device Bay Present And Absent List   ${BladeDevice_EM}
    \    List Should Contain Value    ${present_server_list_after_efuseoff}    ${server_bay}
    \    List Should Not Contain Value    ${empty_server_list_after_efuseoff}    ${server_bay}
    \    #Retrieve the server health status from Fusion after efuse and verify
    \    ${health_after_efuse}=    Get Fusion Device Health Status    ${BladeDevice_EM}    ${server_bay}
    \    Should Be Equal    ${health_before_efuse}    ${health_after_efuse}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    EFuse Blade    EFuseOff    ${server_bay}    AND    Wait For Device Status    ${BladeDevice_EM}    ${server_bay}    OK