*** Settings ***
Documentation    Test suite to validate Enclosure Health Status (Critical) when Fans are removed and re-inserted into the enclosure

...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> | -v CIM_Linux_IP:<ipv4> |-v GIT_REPO_ROOT: | Enclosure_Fan_Critical.txt |
...    = Variables =
...    | GIT_REPO_ROOT | Required: Repo root path if NOT defined in environment variable this is mgmtfw root location
...    | ENC_SERIAL_NO | Optional: If omitted, will use the 1st enclosure detected in OV
...    | APPLIANCE_IP | Required: OneView IPv4 address

Library            RoboGalaxyLibrary
Library            MgmtFWLibrary
Library            FusionLibrary
Library            Collections
Library            Selenium2Library

Variables          ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables          ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/data_variables.py
Variables          ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource           ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource           ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login To EM And Create Session
Suite Teardown    Run Keywords    Logout of Fusion Via REST    AND    Logout of Fusion Via SSH

***Test Cases***

TC 01: Validate The Enclosure Health Status When Two Fans Are Removed From Bays 1-5 And Re-inserted Into An Enclosure
    [Documentation]    This test verifies if an enclosure goes to a Critical state when two fans are removed from bays 1-5
    ...    and returns to OK state when re-inserted back to enclosure
    [Tags]    PE    API    Automated    Fan    EM
    ${present_fan_list}    ${absent_fan_list}=    Get Device Bay Present And Absent List    ${FANDevice_EM}
    ${initial_len}=    Get Length    ${present_fan_list}
    Should Be Equal as Strings    ${initial_len}    10    msg= Enclosure does not have sufficient fans
    ${sliced_fan_list}=    Get Slice From List    ${present_fan_list}    0    5
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Retrieve two random fan bay numbers from bays 1-5
    ${fan_list}=    Evaluate    random.sample(${sliced_fan_list}, 2)   random
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Efuse-On the fan bays and wait for the fan absence state
    Efuse Fan Device   EFuseOn    ${fan_list[0]}
    Wait For Device Present Or Absent Status    ${FANDevice_EM}    ${fan_list[0]}    Absent
    Efuse Fan Device   EFuseOn    ${fan_list[1]}
    Wait For Device Present Or Absent Status    ${FANDevice_EM}    ${fan_list[1]}    Absent
    #Check the Enclosure health status after efuse-on
    ${resp_after_efuseon}=    Fusion Api Get Enclosures
    ${health_after_efuseon}=    Get From Dictionary    ${resp_after_efuseon['members'][0]}    status
    Should Be Equal    ${health_after_efuseon}    Critical
    #Efuse-Off the fan bays and wait for the fan to return to OK status
    Efuse Fan Device   EFuseOff    ${fan_list[0]}
    Wait For Device Status    ${FANDevice_EM}    ${fan_list[0]}    OK
    Efuse Fan Device   EFuseOff    ${fan_list[1]}
    Wait For Device Status    ${FANDevice_EM}    ${fan_list[1]}    OK
    #Check the Enclosure health status after efuse-off
    ${resp_after_efuseoff}=    Fusion Api Get Enclosures
    ${health_after_efuseoff}=    Get From Dictionary    ${resp_after_efuseoff['members'][0]}    status
    Should Be Equal    ${health_after_efuseoff}    OK
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse Fan Device    EFuseOff    ${fan_list[0]}    AND    Wait For Device Status    ${FANDevice_EM}    ${fan_list[0]}    OK
    ...    AND    Efuse Fan Device    EFuseOff    ${fan_list[1]}    AND    Wait For Device Status    ${FANDevice_EM}    ${fan_list[1]}    OK
    
TC 02: Validate The Enclosure Health Status When Two Fans Are Removed From Bays 6-10 And Re-inserted Into An Enclosure
    [Documentation]    This test verifies if an enclosure goes to a Critical state when two fans are removed from bays 6-10
    ...    and returns to OK state when re-inserted back to enclosure
    [Tags]    PE    API    Automated    Fan    EM
    ${present_fan_list}    ${absent_fan_list}=    Get Device Bay Present And Absent List    ${FANDevice_EM}
    ${initial_len}=    Get Length    ${present_fan_list}
    Should Be Equal as Strings    ${initial_len}    10    msg= Enclosure does not have sufficient fans
    ${sliced_fan_list}=    Get Slice From List    ${present_fan_list}    5
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Retrieve two random fan bay numbers from bays 6-10
    ${fan_list}=    Evaluate    random.sample(${sliced_fan_list}, 2)   random
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Efuse-On the fan bays and wait for the fan absence state
    Efuse Fan Device   EFuseOn    ${fan_list[0]}
    Wait For Device Present Or Absent Status    ${FANDevice_EM}    ${fan_list[0]}    Absent
    Efuse Fan Device   EFuseOn    ${fan_list[1]}
    Wait For Device Present Or Absent Status    ${FANDevice_EM}    ${fan_list[1]}    Absent
    #Check the Enclosure health status after efuse-on
    ${resp_after_efuseon}=    Fusion Api Get Enclosures
    ${health_after_efuseon}=    Get From Dictionary    ${resp_after_efuseon['members'][0]}    status
    Should Be Equal    ${health_after_efuseon}    Critical
    #Efuse-Off the fan bays and wait for the fan to return to OK status
    Efuse Fan Device   EFuseOff    ${fan_list[0]}
    Wait For Device Status    ${FANDevice_EM}    ${fan_list[0]}    OK
    Efuse Fan Device   EFuseOff    ${fan_list[1]}
    Wait For Device Status    ${FANDevice_EM}    ${fan_list[1]}    OK
    #Check the Enclosure health status after efuse-off
    ${resp_after_efuseoff}=    Fusion Api Get Enclosures
    ${health_after_efuseoff}=    Get From Dictionary    ${resp_after_efuseoff['members'][0]}    status
    Should Be Equal    ${health_after_efuseoff}    OK
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse Fan Device    EFuseOff    ${fan_list[0]}    AND    Wait For Device Status    ${FANDevice_EM}    ${fan_list[0]}    OK
    ...    AND    Efuse Fan Device    EFuseOff    ${fan_list[1]}    AND    Wait For Device Status    ${FANDevice_EM}    ${fan_list[1]}    OK
