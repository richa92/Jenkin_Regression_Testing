*** Settings ***
Documentation    Test suite to validate Enclosure Health Status (OK, Warning and Critical) when Power Supplies are removed and re-inserted into the enclosure

...    = GENERIC USAGE =
...    | pybot | -v ENC_SERIAL_NO:[enclosure serial #] | -v APPLIANCE_IP:<ipv4> |-v GIT_REPO_ROOT: | EM_PS_HealthStatus.txt |
...    = Variables =
...    | GIT_REPO_ROOT | Required: Repo root path if NOT defined in environment variable this is mgmtfw root location
...    | ENC_SERIAL_NO | Optional: If omitted, will use the 1st enclosure detected in OV
...    | APPLIANCE_IP | Required: OneView IPv4 address

Library            RoboGalaxyLibrary
Library            MgmtFWLibrary
Library            FusionLibrary
Library            Collections
Library            Selenium2Library

Variables          ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables          ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/data_variables.py
Variables          ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource           ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource           ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt

Suite Setup       Run Keywords    Login to Fusion via REST    AND    Login to Fusion via SSH    AND    Login To EM And Create Session
Suite Teardown    Run Keyword    Logout of Fusion Via REST

***Test Cases***

TC 01:: EM Health Status: Validate The Enclosure Health OK Status When A Power Supply Is Removed And Re-inserted Into An Enclosure
    [Documentation]    This test verifies if an enclosure remains in OK state when a power supply is removed
    ...    and re-inserted back to enclosure
    [Tags]    PE    API    Automated    PowerSupply    EM
    ${present_ps_list}    ${absent_ps_list}=    Get Device Bay Present And Absent List    ${PSDevice_EM}
    ${ps_count}=    Get Length    ${present_ps_list}
    Run Keyword If    ${ps_count}<=2    FAIL    There are not enough PS in the enclosure to validate this test
    ${ps_bay}=    Evaluate    random.sample(${present_ps_list}, 1)   random
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Efuse-On the ps bay and wait for the power supply absence state
    Efuse PowerSupply Device    EFuseOn    ${ps_bay[0]}
    Wait For Device Present Or Absent Status    ${PSDevice_EM}    ${ps_bay[0]}    Absent
    #Retrieve the Enclosure health status after efuse-on
    ${resp_after_efuseon}=    Fusion Api Get Enclosures
    ${health_after_efuseon}=    Get From Dictionary    ${resp_after_efuseon['members'][0]}    status
    Should Be Equal    ${health_after_efuseon}    OK
    #Efuse-Off the ps bay and wait for the powersupply to return to OK status
    Efuse PowerSupply Device    EFuseOff    ${ps_bay[0]}
    Wait For Device Status    ${PSDevice_EM}    ${ps_bay[0]}    OK
    #Check the Enclosure health status after efuse-off
    ${resp_after_efuseoff}=    Fusion Api Get Enclosures
    ${health_after_efuseoff}=    Get From Dictionary    ${resp_after_efuseoff['members'][0]}    status
    Should Be Equal    ${health_after_efuseoff}    OK
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse PowerSupply Device    EFuseOff    ${ps_bay[0]}    AND    Wait For Device Status    ${PSDevice_EM}    ${ps_bay[0]}    OK

TC 02:: EM Health Status: Validate The Enclosure Health Warning Status When A Power Supply Is Removed And Re-inserted Into An Enclosure With Two Power Supplies
    [Documentation]    This test verifies if an enclosure with two power supplies goes to Warning state when a power supply is removed
    ...    and returns to OK state when re-inserted back to enclosure
    [Tags]    PE    API    Automated    PowerSupply    EM
    Run Keywords    Setup EM RIS Session    AND    Login to Fusion via SSH
    #Retrieve the present and absent powersupply list
    ${present_ps_list}    ${absent_ps_list}=    Get Device Bay Present And Absent List    ${PSDevice_EM}
    ${ps_count}=    Get Length    ${present_ps_list}
    #Retrieve the Enclosure health status before efuse-on
    ${resp_before_efuseon}=    Fusion Api Get Enclosures
    ${health_before_efuseon}=    Get From Dictionary    ${resp_before_efuseon['members'][0]}    status
    Should Be Equal    ${health_before_efuseon}    OK
    #Efuse-on the powersupplies
    : FOR    ${ps_bay}    IN    @{present_ps_list}
    \    ${needed_ps}=    Get Needed Power Supplies In the Enclosure
    \    Run Keyword If    ${ps_count}==${needed_ps}    Exit For Loop
    \    Efuse PowerSupply Device    EFuseOn    ${ps_bay}
    \    Wait For Device Present Or Absent Status    ${PSDevice_EM}    ${ps_bay}    Absent
    \    ${ps_count}=    Evaluate    ${ps_count} - 1
    #Retrieve the Enclosure health status after efuse-on
    ${resp_after_efuseon}=    Fusion Api Get Enclosures
    ${health_after_efuseon}=    Get From Dictionary    ${resp_after_efuseon['members'][0]}    status
    Should Be Equal    ${health_after_efuseon}    Warning
    #Retrieve the present and absent powersupply list after efuse
    ${present_ps_list_after_efuse}    ${absent_ps_list_after_efuse}=    Get Device Bay Present And Absent List    ${PSDevice_EM}
    #Efuse-off the powersupplies and wait for the powersupply to return to OK status
    : FOR    ${ps_bay}    IN    @{absent_ps_list_after_efuse}
    \    Efuse PowerSupply Device    EFuseOff    ${ps_bay}
    \    Wait For Device Status    ${PSDevice_EM}    ${ps_bay}    OK
    #Check the Enclosure health status after efuse-off
    ${resp_after_efuseoff}=    Fusion Api Get Enclosures
    ${health_after_efuseoff}=    Get From Dictionary    ${resp_after_efuseoff['members'][0]}    status
    Should Be Equal    ${health_after_efuseoff}    OK
    [Teardown]    Run Keyword If Test Failed    Run Keywords    Efuse PowerSupply Device    EFuseOff    ${ps_bay}    AND    Wait For Device Status    ${PSDevice_EM}    ${ps_bay}    OK
    

TC03:: EM Health Status: Validate The Enclosure Health Critical Status When The Power Supplies Failed Via CANmic Fault
    [Documentation]    This test verifies if an enclosure goes to Critical state when a fault is injected to each power supply
    ...    and returns to OK state when the fault is cleared
    [Tags]    PE    API    Automated    PowerSupply    EM
    Setup EM RIS Session
    #Retrieve the Enclosure health status before failing the powersupplies
    ${resp_before_fault}=    Fusion Api Get Enclosures
    ${health_before_fault}=    Get From Dictionary    ${resp_before_fault['members'][0]}    status
    Should Be Equal    ${health_before_fault}    OK
    ${good_ps} =    Get Good Power Supplies In The Enclosure
    ${needed_ps} =    Get Needed Power Supplies In the Enclosure
    ${failed_ps}=    Get List of Devices with Health Warning    ${HPEMPowerSupply_Type}    ${PS_Device_Type}
    Should Be Empty    ${failed_ps}
    ${ps_cnt}=    Convert To Integer    ${good_ps}
    #Inject the powersupplies with CANmic fault
    : FOR    ${ps_bay}    IN RANGE   1    ${ps_cnt+1}
    \    ${ps_health}=    Get Fusion Device Health Status    ${PSDevice_EM}    ${ps_bay}
    \    Should Be Equal    ${ps_health}    OK
    \    ${enc_health}=    Set PS Fault And Get Enclosure Health Status    ${ps_bay}
    \    ${needed_ps}=    Get Needed Power Supplies In the Enclosure
    \    Run Keyword If    '${enc_health}'=='Critical'    Exit For Loop
    #Clear the fault on each power supply bay
    Recover Failed PS If Any
    #Retrieve the Enclosure health status after clearing the fault
    ${resp_after_fault_cleared}=    Fusion Api Get Enclosures
    ${health_after_fault_cleared}=    Get From Dictionary    ${resp_after_fault_cleared['members'][0]}    status
    Should Be Equal    ${health_after_fault_cleared}    OK
    [Teardown]   Recover Failed PS If Any