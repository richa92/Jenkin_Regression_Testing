*** Settings ***
Documentation     Test suite to verify the HBA profile and blade status after efuse Server
Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/data_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt
Library           RoboGalaxyLibrary
Library           FusionLibrary
Library           MgmtFWLibrary
Library           Selenium2Library
Library           Collections

Suite Setup       Run Keywords    Login to Fusion Via REST    AND    Clean UP Environment    AND    Setup FC Appliance
Suite Teardown    Run Keywords    Logout of Fusion Via REST

*** Test Cases ***

TC 01: Verify FC profiles status after efuse the blade
    [Documentation]    Verify FC profiles status after efuse the blade
    [Tags]    PE    API    Automated    HBA    FC
    [Setup]    Set Library Search Order    fusion_api_resource    ssh    em_ris    fusion_api_em_ris    fusion_api_validation    common
    Power off ALL Servers
    Sleep    180
    Remove All Server Profiles
    Login to Fusion via SSH
    Login And Create EM Session
    ${bay_list}=    Get HBA Mezz Server Bay List
    :FOR    ${blade_bay}    IN    @{bay_list}
    \    ${blade_bay}=    Convert To Integer    ${blade_bay}
    \    ${server_profile_body}=    Update FC Server Profile body     ${blade_bay}    ${server_profiles[0]}
    \    ${resp}=    Fusion Api Create Server Profile    body=${server_profile_body}
    \    ${task} =    Wait For TaskType Success State    ${resp}     timeout=20 mins    interval=20s
    \    ${task_state} =     Get From dictionary     ${task}     taskState
    \    Should Match Regexp    ${task_state}   ((?i)Warning|Completed)
    \    ${server_state}=    Get Server State    ${blade_bay}
    \    Should Be Equal    ${server_state}    ProfileApplied
    \    ${server_status}=    Get Fusion Device Health Status    ${BladeDevice_EM}    ${blade_bay}
    \    Should Be Equal    ${server_status}    OK
    \    ${profile_status}=    Get Server Profile Status    ${blade_bay}
    \    Should Be Equal    ${profile_status}    OK
    \    ${server_info}=    Get Server Information    ${blade_bay}
    \    ${serverProfileUri}=    Get From Dictionary    ${server_info}    serverProfileUri
    \    Efuse Server Device    EFuseOn   ${blade_bay}
    \    Wait For Device Status    ${BladeDevice_EM}    ${blade_bay}    Absent
    \    ${taskResp}=    Fusion Api Get Resource     ${serverProfileUri}
    \    ${profile_status}=    Get from Dictionary    ${taskResp}    status
    \    Should Be Equal    ${profile_status}   Critical        
    \    ${taskUri}=    Get from Dictionary    ${taskResp}  taskUri
    \    ${taskData}=    Fusion Api Get Resource    ${taskUri}
    \    ${bladeProgress}=   Get From Dictionary  ${taskData}  progressUpdates
    \    ${bladeStatus}=  Get from Dictionary   @{bladeProgress}[0]   statusUpdate
    \    Should Be Equal    ${bladeStatus}  Server hardware removed
    \    Efuse Server Device    EFuseOff    ${blade_bay}
    \    Wait For Device Status    ${BladeDevice_EM}    ${blade_bay}    OK
    \    ${server_status}=    Get Fusion Device Health Status    ${BladeDevice_EM}    ${blade_bay}
    \    Should Be Equal    ${server_status}    OK
    \    ${profile_status}=    Get Server Profile Status    ${blade_bay}
    \    Should Be Equal    ${server_status}    OK
    \    ${ICM_Bay_FC1}=    Convert To Integer    ${ICM_Bay_FC1}    
    \    ${icm_status}=    Get Fusion Device Health Status    ${ICMDevice_EM}    ${ICM_Bay_FC1}
    \    Should Be Equal    ${icm_status}    OK
    \    Power OFF Server Blade Bay    ${blade_bay}
    \    Sleep    60
    \    Remove Server Profile Blade Bay    ${blade_bay}
    \    Sleep   60
    [Teardown]    Run Keyword If Test Failed    Run Keywords      Efuse Server Device    EFuseOff    ${blade_bay}   AND    
    ...    Wait For Device Status    ${BladeDevice_EM}    ${blade_bay}    OK