*** Settings ***
Documentation    thermal_alert_event.txt - Validate thermal Alert events on OneView
...    = GENERIC USAGE =
...    | pybot | -v GIT_REPO_ROOT:<repo root path> | -v APPLIANCE_IP:<ipv4> | thermal_alert_event.txt |
...    = Variables =
...    | GIT_REPO_ROOT |      Required: Repo root path if NOT defined in environment variable|
...    | APPLIANCE_IP |       Required: OneView IPv4 address |

Library           json
Library           robot.api.logger
Variables         ${GIT_REPO_ROOT}/fusion/tests/DEA/variables/dea_variables.py
Variables         ${GIT_REPO_ROOT}/mgmtfw/tests/thunderbird/variables/tBird_variables.py
Resource          ${GIT_REPO_ROOT}${RESOURCE_ROOT}/resource_all.txt
Resource          ${GIT_REPO_ROOT}${EM_RESOURCE_ROOT}/thunderbird_all.txt

Suite Setup       Configure Events Test Environment
Suite Teardown    Run Keywords    Logout of Fusion Via REST    AND    Logout of EM RIS

*** Test Case ***

TC 01: Thermal Event - Verify Thermal Insufficient Warning and InsufficientFansOk
    [Documentation]    Verify EM/OneView Thermal Events
    ...    OneView Alert Events Covered
    ...        - InsufficientFansWarning
    ...        - InsufficientFansOk
    [Tags]    Thermal    FLM1.01    Automated
    ${fan_initial_status}=    Get ThermalMetrics Health Status
    Should Be Equal    ${fan_initial_status}    ${HEALTH_OK}
    ${fan_list}    ${fan_count}=    Get Current Fan List
    #${AvailableFan}=   Get List of Occupied Fan Bays
    Should Not Be Empty    ${fan_list}    msg=No Fans present in the enlcosure
    :FOR    ${bay}   IN   @{fan_list}
    \    Log    message=Removing and inserting Fan from bay:${bay} and verify resource removed\inserted event    console=True
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    RIS EM Efuse On Fan    ${bay}
    \    Sleep    10
    \    RIS EM Efuse Off Fan    ${bay}
    \    Wait for Device OK    ${Fan_Device}    ${bay}
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Resource Removed Event    ${Fan_Device}     ${Fan_Removed_Message_ID}    ${bay}    250
    \    Verify Audit Log Status Change Thermal Warning Event    ${bay}    250
    \    Verify Audit Log Resource Added Event    ${Fan_Device}     ${Fan_Inserted_Message_ID}    ${bay}    250
    \    Verify Audit Log Alert Event    ${EL_Thermal_Insufficient_OK}    ${Fan_Device}    ${bay}    250
    \    Verify Fusion Event Sent By EM    ${EL_Thermal_Insufficient_Warning}    ${last_fusion_event_id}    ${Enclosure_category}
    \    Verify Fusion Event Sent By EM     ${EL_Thermal_Insufficient_OK}    ${last_fusion_event_id}    ${Enclosure_category}
    [Teardown]    Run Keywords    RIS EM Efuse Off Fan    ${bay}    AND    Wait for Device OK    ${Fan_Device}    ${bay}

TC 02: Thermal Event - Verify Thermal InsufficientFansCritical and InsufficientFansOk
    [Documentation]    Verify EM/OneView Thermal Events
    ...    OneView Alert Events Covered
    ...        - InsufficientFansCritical
    ...        - InsufficientFansOk
    [Tags]    Thermal     FLM1.01    Automated
    # Get existing Fan Bay
    ${fan_list}    ${fan_count}=    Get Current Fan List
    Should Be Equal    ${fan_count}    ${10}
    # Set EFUSE ON to Fan Bay for the top fans rack ( this event valid only for fans in the same set of racks )
    :FOR    ${index}    IN RANGE    0   4
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    RIS EM Efuse On Fan    ${fan_list[${index}]}
    \    RIS EM Efuse On Fan    ${fan_list[${index}+1]}
    \    Sleep    30
    # Verify Events generated
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Resource Removed Event    ${Fan_Device}     ${Fan_Removed_Message_ID}    ${fan_list[${index}]}    250
    \    Verify Audit Log Resource Removed Event    ${Fan_Device}     ${Fan_Removed_Message_ID}    ${fan_list[${index}+1]}    250
    \    Verify Fusion Event Sent By EM    ${EL_Thermal_Insufficient_Critical}    ${last_fusion_event_id}    ${Enclosure_category}
    # Set EFUSE OFF to Fan Bay
    \    RIS EM Efuse Off Fan    ${fan_list[${index}]}
    \    RIS EM Efuse Off Fan    ${fan_list[${index}+1]}
    \    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}]}
    \    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}+1]}
    # Verify Events generated
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Resource Added Event    ${Fan_Device}     ${Fan_Inserted_Message_ID}    ${fan_list[${index}]}    250
    \    Verify Audit Log Resource Added Event    ${Fan_Device}     ${Fan_Inserted_Message_ID}    ${fan_list[${index}+1]}    250
    \    Verify Fusion Event Sent By EM     ${EL_Thermal_Insufficient_OK}    ${last_fusion_event_id}    ${Enclosure_category}
    :FOR    ${index}    IN RANGE    5   9
    \    ${last_fusion_event_id}=    get last fusion event ID
    \    RIS EM Efuse On Fan    ${fan_list[${index}]}
    \    RIS EM Efuse On Fan    ${fan_list[${index}+1]}
    \    Sleep    30
    # Verify Events generated
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Resource Removed Event    ${Fan_Device}     ${Fan_Removed_Message_ID}    ${fan_list[${index}]}    250
    \    Verify Audit Log Resource Removed Event    ${Fan_Device}     ${Fan_Removed_Message_ID}    ${fan_list[${index}+1]}    250
    \    Verify Fusion Event Sent By EM    ${EL_Thermal_Insufficient_Critical}    ${last_fusion_event_id}    ${Enclosure_category}
    # Set EFUSE OFF to Fan Bay
    \    RIS EM Efuse Off Fan    ${fan_list[${index}]}
    \    RIS EM Efuse Off Fan    ${fan_list[${index}+1]}
    \    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}]}
    \    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}+1]}
    # Verify Events generated
    \    ${diags_50}    ${diags_auditlog_file_path}=    Get Diags Audit Log 50 Recent Entries
    \    Set Test Variable    ${EM_Event_Logger}    ${diags_auditlog_file_path}
    \    Verify Audit Log Resource Added Event    ${Fan_Device}     ${Fan_Inserted_Message_ID}    ${fan_list[${index}]}    250
    \    Verify Audit Log Resource Added Event    ${Fan_Device}     ${Fan_Inserted_Message_ID}    ${fan_list[${index}+1]}    250
    \    Verify Fusion Event Sent By EM     ${EL_Thermal_Insufficient_OK}    ${last_fusion_event_id}    ${Enclosure_category}
    [Teardown]    Run Keyword If Test Failed    Run Keywords    RIS EM Efuse Off Fan    ${fan_list[${index}]}    AND    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}]}
    ...    AND    RIS EM Efuse Off Fan    ${fan_list[${index}+1]}    AND    Wait for Device OK    ${Fan_Device}    ${fan_list[${index}+1]}
