*** Settings ***
Resource            ../../../../Resources/api/fusion_api_resource.txt
Variables           DATA_VARIABLES.py
Library             FusionLibrary
Suite Setup         Fusion Api Login Appliance      ${FUSION_IP}    ${admin_credentials}
Suite Teardown      Fusion Api Logout Appliance


*** Variables ***
${internal_repo_initial_size}   0
${SPP_LOCALPATH}                ./C7kSPP
${THREADNUM}                    3
${SPP_LOCAL_FILE}               ${None}


*** Keywords ***

Get Firmware Bundle By Name
    [Documentation]     Get Firmware Bundle By Name
    [Arguments]         ${bundle_name}
    ${resp} =           Fusion Api Get Firmware Driver
    :FOR                ${repo}                     IN                      @{resp['members']}
    \                   ${name} =                   Get From Dictionary     ${repo}     name
    \                   Log                         ${name}                 console= True
    \                   Return From Keyword If      '${name}'=='${bundle_name}'         ${name}
    Log                 Firmware version ${bundle_name} not found           console= True
    [Return]            ${null}

Get Internal Repository Size
    [Documentation]     Get Internal Repository Size
    [Arguments]
    ${repositories}=    Fusion Api Get Repository
    ${count}=           Get From Dictionary         ${repositories}         count
    Log                 ${count}                    console= True
    :FOR                ${repo}                     IN                      @{repositories['members']}
    \                   ${uri} =                    Get From Dictionary     ${repo}                 uri
    \                   ${repo_size} =              Get From Dictionary     ${repo}                 availableSpace
    \                   Log                         ${repo_size}            console= True
    \                   ${repositoryType} =         Get From Dictionary     ${repo}                 repositoryType
    \                   Return From Keyword If      '${repositoryType}'=='FirmwareInternalRepo'     ${repo_size}
    [Return]            ${null}


*** Test Cases ***
Setup: Add External Repository to OneView
    [Tags]              add_repo
    [Documentation]     Add External Repo
    ${resp} =           Add Repository      ${http_repo_with_password}
    ${task} =           Wait For Task2      ${resp}     100     5
    Sleep               15 minutes 0 seconds

Setup: Download Hotfix To Current Machine
    [Tags]              DOWNLOAD_SPP
    [Documentation]     Download SPP from http/ftp share latest file into current directory
    Download Latest File From Web Folder    ${web_url_hotfix}   WEB_USERNAME=${webdav_username}
    ...                 WEB_PASSWORD=${webdav_password}

Add Hotfix to OneView
    [Tags]                      UPLOAD_HOTFIX
    [Documentation]             Upload Hotfix       to OneView
    ${size} =                   Get Internal Repository Size
    Set Global Variable         ${internal_repo_initial_size}                   ${size}
    Log                         Intial size of Internal repo => ${internal_repo_initial_size}               console= True
    ${status}                   ${message}          Run Keyword And Ignore Error
    ...                         OperatingSystem.File Should Exist
    ...                         ${SPP_LOCAL_FILE}
    Run Keyword If              '${status}'=='FAIL'
    ...                         Log                 SPP File is not download from HTTP Url.Pick up latest SPP file from local path
    ...                         WARN
    ...                         console=True
    Create Folder If Not Exists                     ${SPP_LOCALPATH}
    ${file}=                    Run Keyword If      '${status}'=='FAIL'         Get File From Local Path    ${SPP_LOCALPATH}
    ${filestatus}               ${filemsg}          Run Keyword And Ignore Error
    ...                         OperatingSystem.File Should Exist
    ...                         ${file}
    ${SPP_FILE}=                Set Variable If     '${filestatus}' == 'FAIL'   ${SPP_LOCAL_FILE}           ${file}
    Log                         SPP to be Installed:${SPP_FILE}                 console=True
    # Unset proxy environ variables
    ${HTTP_PROXY}=              Get Environment Variable                        HTTP_PROXY                  default=${EMPTY}
    ${HTTPS_PROXY}=             Get Environment Variable                        HTTPS_PROXY                 default=${EMPTY}
    Set Environment Variable    HTTP_PROXY          ${EMPTY}
    Set Environment Variable    HTTPS_PROXY         ${EMPTY}

    Log     SPP File to test:${SPP_FILE}    console=True

    Run Keyword If              '${SPP_FILE}' != '${None}'      Upload Firmware Bundle Async    ${SPP_FILE}
    ...                         VERIFY=${TRUE}
    ...                         ELSE            Log             No SPP Bundle available in local path to upload
    ...                         WARN
    ...                         console=True
    # Set proxy environ variables back to its actual value
    Set Environment Variable    HTTP_PROXY      ${HTTP_PROXY}
    Set Environment Variable    HTTPS_PROXY     ${HTTPS_PROXY}

Setup: Download Firmware Bundle To Current Machine
    [Tags]              DOWNLOAD_SPP
    [Documentation]     Download SPP from http/ftp share latest file into current directory
    Download Latest File From Web Folder    ${web_url}      WEB_USERNAME=${webdav_username}     WEB_PASSWORD=${webdav_password}

Add Firmware Bundle
    [Tags]                      UPLOAD_SPP
    [Documentation]             Upload SPP bundle ${SPP_LOCAL_FILE} to OneView
    ${status}                   ${message}          Run Keyword And Ignore Error
    ...                         OperatingSystem.File Should Exist
    ...                         ${SPP_LOCAL_FILE}
    Run Keyword If              '${status}'=='FAIL'
    ...                         Log                 SPP File is not download from HTTP Url.Pick up latest SPP file from local path
    ...                         WARN
    ...                         console=True
    Create Folder If Not Exists                     ${SPP_LOCALPATH}
    ${file}=                    Run Keyword If      '${status}'=='FAIL'         Get File From Local Path    ${SPP_LOCALPATH}
    ${filestatus}               ${filemsg}          Run Keyword And Ignore Error
    ...                         OperatingSystem.File Should Exist
    ...                         ${file}
    ${SPP_FILE}=                Set Variable If     '${filestatus}' == 'FAIL'   ${SPP_LOCAL_FILE}           ${file}
    Log                         SPP to be Installed:${SPP_FILE}                 console=True
    # Unset proxy environ variables
    ${HTTP_PROXY}=              Get Environment Variable                        HTTP_PROXY                  default=${EMPTY}
    ${HTTPS_PROXY}=             Get Environment Variable                        HTTPS_PROXY                 default=${EMPTY}
    Set Environment Variable    HTTP_PROXY          ${EMPTY}
    Set Environment Variable    HTTPS_PROXY         ${EMPTY}

    Log     SPP File to test:${SPP_FILE}    console=True

    Run Keyword If              '${SPP_FILE}' != '${None}'      Upload Firmware Bundle Async    ${SPP_FILE}
    ...                         VERIFY=${TRUE}
    ...                         ELSE            Log             No SPP Bundle available in local path to upload
    ...                         WARN
    ...                         console=True
    # Set proxy environ variables back to its actual value
    Set Environment Variable    HTTP_PROXY      ${HTTP_PROXY}
    Set Environment Variable    HTTPS_PROXY     ${HTTPS_PROXY}

Verify Firmware Bundle for External Repo in One View
    [Documentation]     Verify external repo firmware bundle exists in OV
    [Tags]              firmware
    ${resp} =           Get Firmware Bundle By Name     ${External_spp_name}
    run keyword if      '${resp}'=='None'               Fail    'Firmware Bundle is not in OV'

create custom SPP using remote base SPP and hotfixes using OneView
    [Documentation]         Custom SPP Create using OneView
    [Tags]                  firmware
    Log                     \n Starting create custom SPP       console= True
    ${baseline_uri1} =      Get Firmware Bundle By Version      ${firmwareBundle_External_Version}
    ${hotfix_uri1} =        Get Firmware Bundle By Version      ${firmwareBundle_Internal_Version}
    ${hotfixs} =            Create List                         ${hotfix_uri1}
    Log                     ${hotfixs}                          console= True
    ${body} =               Create Dictionary                   baselineUri=${baseline_uri1}
    ...                     customBaselineName=${custom_spp_name}
    ...                     hotfixUris=${hotfixs}
    Log                     Create custom SPP                   console= True
    ${resp} =               Fusion Api Create Firmware Bundle   ${body}
    ${task} =               Wait For Task2                      ${resp}     1000    20
    sleep                   60s

Verify Firmware Bundle for Custom SPP in OneView
    [Documentation]     Verify Created Custom SPP Exists in OV
    [Tags]              firmware
    ${resp} =           Get Firmware Bundle By Name     ${custom_spp_name}
    run keyword if      '${resp}'=='None'               Fail    'Firmware Bundle is not in OV'
    sleep               60s

Verify Firmware Bundle for Internal Repository in OneView
    [Documentation]     Verify internal repository firmware bundle exists in OV
    [Tags]              firmware
    ${resp} =           Get Firmware Bundle By Name     ${Hotfix_name}
    run keyword if      '${resp}'=='None'               Fail    'Firmware Bundle is not in OV'

Remove Firmware Bundle one by one from One View and verify the Internal repository size cleared
    [Documentation]             Clear All Firmware Bundle and ignore error also check size cleared in OV after delete
    [Tags]                      firmware
    ${size_before_delete} =     Get Internal Repository Size
    Log                         Inter repo size before bundles delete => ${size_before_delete}      console= True
    Run Keyword And Ignore Error    Remove All Firmware Bundles
    sleep                       180s
    ${size_after_delete} =      Get Internal Repository Size
    Log                         Internal repo size after removing bundles=> ${size_after_delete}    console= True
    Log                         Initial Size of Internal Repo=> ${internal_repo_initial_size}       console= True
    run keyword if              '${internal_repo_initial_size}'!='${size_after_delete}'             Fail
    ...                         'Firmware Bundle is not returned to original size'

Verify Firmware Bundle for External Repo should exist in OV after remove attempt
    [Documentation]     Firmware Bundle for External Repo should exist in OV after remove attempt
    [Tags]              firmware
    ${resp} =           Get Firmware Bundle By Name     ${External_spp_name}
    run keyword if      '${resp}'=='None'               Fail    'Firmware Bundle is not in OV'

Remove External Repository
    [Documentation]     Remove External Repo
    [Tags]              remove_repo
    ${repositories}=    Fusion Api Get Repository
    Log                 ${repositories}         console= True
    ${count}=           Get From Dictionary     ${repositories}     count
    Log                 ${count}                console= True

    :FOR    ${repo}                 IN                      @{repositories['members']}
    \       Log                     ${repo}                 console= True
    \       ${uri} =                Get From Dictionary     ${repo}                 uri
    \       ${repo_name} =          Get From Dictionary     ${repo}                 name
    \       Log                     ${repo_name}            console= True
    \       ${repositoryType} =     Get From Dictionary     ${repo}                 repositoryType
    \       ${response} =           run Keyword If          '${repositoryType}'=='FirmwareExternalRepo'
    \       ...                     Remove Repository By Name
    \       ...                     ${repo_name}
    \       run Keyword If          '${repositoryType}'=='FirmwareExternalRepo'     Wait For Task2      ${response}     350
    \       ...                     5

Verify Firmware Bundle for Internal Repo should get deleted from OV after remove
    [Documentation]     Firmware Bundle for Internal Repo should get deleted from OV after remove
    [Tags]              firmware
    ${resp} =           Get Firmware Bundle By Name     ${custom_spp_name}
    run keyword if      '${resp}'!='None'               Fail
    ...                 'Firmware Bundle is exists in OV even after remove'

Add External Repository after remove
    [Documentation]     Add External Repo
    [Tags]              add_repo
    ${resp} =           Add Repository      ${http_repo_with_password}
    ${task} =           Wait For Task2      ${resp}     50      5
    Sleep               15 minutes 0 seconds

