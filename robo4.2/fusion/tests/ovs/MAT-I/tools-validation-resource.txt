*** Settings ***
Documentation    Support Tool Installation and verification

Library                         robot.api.logger
Library                         OperatingSystem
Library                         FusionLibrary
Library                         RoboGalaxyLibrary
Library                         BuiltIn
Library                         Collections
Library                         String
Library                         SSHLibrary
Library                         json
Library                         XML
Resource                        deploy_resource.txt
Resource                        support_resource1.txt
Variables                       Supportool_data.py

*** Variables ***
${SSH_HOST}

*** Keywords ***

Soap Comm
    [Documentation]     Soap Protocol Validation Keyword
    ${rc}=    Execute Command    java -cp /ci/support/ovsupportability/lib/supportclient.jar:/ci/webapps/psrm/WEB-INF/lib/*:/ci/webapps/vcmmigrationmgr/WEB-INF/lib/*: SoapClient ${OA_ip} ${dev_cred['OA_user']} ${dev_cred['OA_pass']}
    Log    ${rc}
    ${value}=    Evaluate    "SessionKey:"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    SOAP Passed
    ...                    ELSE                              Set Variable    SOAP Failed
    Run keyword if   '${status}'=='True'    Log    SOAP COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    SOAP COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

REST Comm
    [Documentation]     Rest Protocol Validation Keyword
    [Arguments]    ${dev_ip}
    ${rc}=    Execute Command     /usr/bin/curl -i --user admin:admin123 -X GET https://${dev_ip}/redfish/v1/Systems/
    Log    ${rc}
    ${value}=    Evaluate    "HTTP/1.1 200 OK"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    REST : passed
    ...                    ELSE                              Set Variable    REST : Failed
    Run keyword if   '${status}'=='True'    Log    REST COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   REST COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

REST 3Par Comm
    [Documentation]     Rest Protocol Validation Keyword for 3par
    ${Session_key}=    Create Dictionary
    ${rc}=    Execute Command     /usr/bin/curl -ik -H "Content-type: application/json" -X POST https://${stor_ip}:8080/api/v1/credentials -d '{"user":"${storage1_systems['username']}","password":"${storage1_systems['password']}"}'
    Log    ${rc}
    ${value}=    Evaluate    "HTTP/1.1 201 Created"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   Session-key : FAILED
    #${lines}=    Split To Lines    ${rc}
    #${match}=    Get Matches    ${lines}    regexp=key:\\w+
    ${key}=    Get Lines Containing String    ${rc}    key
    ${str} =    Remove String    ${key}    {    }
    Log    Auth Token: ${str}
    ${Output}=    Create Dictionary
    ${key1}    ${value}=    Split String    ${str}    :     1
    Set To Dictionary     ${Output}    ${key1.strip()}    ${value.strip()}
    Log Dictionary    ${Output}
    ${val}=    Pop From Dictionary    ${Output}    ${key1}
    Log    ${val}
    ${rc1}=    Execute Command    /usr/bin/curl -ik -H "Content-type: application/json" -H "Accept: application/json" -H "X-HP3PAR-WSAPI-SessionKey: ${val}" -X GET https://${stor_ip}:8080/api/v1/volumes
    Log    ${rc1}
    ${value1}=    Evaluate    "HTTP/1.1 200 OK"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    REST : passed
    ...                    ELSE                              Set Variable    REST : Failed
    Run keyword if   '${status}'=='True'    Log    REST COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   REST COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

RIBCL Comm
    [Documentation]     Ribcl Protocol Validation Keyword
    [Arguments]    ${dev_ip}    ${dev_user}    ${dev_pass}
    ${rc}=    Execute Command    cd /ci/support/ovsupportability/scripts && ./locfg1.pl -s ${dev_ip} -f get_server_name.xml -u ${dev_user} -p ${dev_pass}
    Log    ${rc}
    ${value}=    Evaluate    "SERVER"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    RIBCL : Passed
    ...                    ELSE                              Set Variable    RIBCL : Failed
    Run keyword if   '${status}'=='True'    Log    RIBCL COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   RIBCL COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

RIBCL Ipdu Comm
    [Documentation]    Ribcl Protocol Validation Keyword for IPDU
    [Arguments]    ${dev_ip}
    ${rc}=    Execute Command    timeout 120s openssl s_client -tls1 -crlf -ign_eof -connect ${dev_ip}:50443
    Log    ${rc}
    ${value}=    Evaluate    "CONNECTED"
    ${status}=  Run Keyword and Return Status    Should Contain    ${rc}    ${value}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    RIBCL : passed
    ...                    ELSE                              Set Variable    RIBCL : Failed
    Run keyword if   '${status}'=='True'    Log    RIBCL COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   RIBCL COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

SSH Comm
    [Documentation]     SSH Protocol Validation Keyword
    ${connected}=  Check Ssh To Console    ${OA_ip}
    ...                                    ${dev_cred['OA_user']}
    ...                                    ${dev_cred['OA_pass']}
    ${status}=  Run Keyword and Return Status        Should Be True                ${connected}
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set variable    SSH : passed
    ...                    ELSE                              Set Variable    SSH : failed
    Run keyword if   '${status}'=='True'    Log    SSH COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL   SSH COMMUNICATION FAILED
    [Return]    ${status}    ${outcode}

OV ping
    [Documentation]     PING Protocol Validation Keyword
    [Arguments]    ${dev_ip}
    ${rc}=    Run    ping -n 4 ${dev_ip}
    Log    ${rc}
    ${status}=  Run Keyword and Return Status   Should Contain    ${rc}    TTL=
    ${outcode}=  Run Keyword If     '${status}'=='True'      Set Variable    ping : passed
    ...                    ELSE                              Set Variable    ping : Failed
    Run keyword if   '${status}'=='True'    Log    PING COMMUNICATION PASSED    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL  PING COMMUNICATION FAILED
    [Return]     ${status}    ${outcode}

ILO4 Validation
    [Documentation]     ILO4 Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${ILO4_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             REST Comm
    ...                             RIBCL Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'!='RIBCL Comm'    ${test}    ${ilo4_ip}
    \    ...                   ELSE        ${test}    ${ilo4_ip}    ${dev_cred['ilo4_user']}    ${dev_cred['ilo4_pass']}
    \    Append To List    ${ILO4_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${ILO4_ValList}    console=true
    Run keyword if    ${count} == ${length}        Log    ******** ILO4 Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}    Run Keyword And Continue On Failure    FAIL   ILO Validation : FAILED
    [Return]    ${ILO4_ValList}

ILO5 Validation
    [Documentation]     ILO5 Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${ILO5_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             REST Comm
    ...                             RIBCL Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'!='RIBCL Comm'    ${test}    ${ilo5_ip}
    \    ...                   ELSE        ${test}    ${ilo5_ip}    ${dev_cred['ilo5_user']}    ${dev_cred['ilo5_pass']}
    \    Append To List    ${ILO5_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${ILO5_ValList}    console=true
    Run keyword if    ${count} == ${length}        Log    ******** ILO5 Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}    Run Keyword And Continue On Failure    FAIL   ILO5 Validation : FAILED
    [Return]    ${ILO5_ValList}

ILO3 Validation
    [Documentation]     ILO3 Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${ILO3_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             RIBCL Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'!='RIBCL Comm'    Run Keyword And Continue On Failure    ${test}    ${ilo3_ip}
    \    ...                   ELSE    Run Keyword And Continue On Failure    ${test}    ${ilo3_ip}    ${dev_cred['ilo3_user']}    ${dev_cred['ilo3_pass']}
    \    Append To List    ${ILO3_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${ILO3_ValList}    console=true
    Run keyword if    ${count} == ${length}        Log    ****** ILO3 Validation : PASSED *******    console=true
    Run keyword Unless    ${count} == ${length}    Run Keyword And Continue On Failure    FAIL   ILO Validation : FAILED
    [Return]    ${ILO3_ValList}

OA Validation
    [Documentation]     OA Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${OA_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             SSH Comm
    ...                             Soap Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'=='OV ping'    Run Keyword And Continue On Failure    ${test}    ${OA_ip}
    \    ...                   ELSE        Run Keyword And Continue On Failure    ${test}
    \    Append To List    ${OA_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${OA_ValList}
    Run keyword if    ${count} == ${length}        Log    ********** OA Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}        Run Keyword And Continue On Failure    FAIL    OA Validation : FAILED
    [Return]    ${OA_ValList}

Validation 3PAR
    [Documentation]     3Par Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${3PAR_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             REST 3Par Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'=='OV ping'    Run Keyword And Continue On Failure    ${test}    ${stor_ip}
    \    ...                   ELSE        Run Keyword And Continue On Failure    ${test}
    \    Append To List    ${3PAR_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${3PAR_ValList}
    Run keyword if    ${count} == ${length}        Log    ********** 3PAR Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}        Run Keyword And Continue On Failure    FAIL    3PAR Validation : FAILED
    [Return]    ${3PAR_ValList}

Validation Ipdu
    [Documentation]    Ipdu Protocols Validation Keyword
    [Arguments]    ${length}=0    ${count}=0
    ${Ipdu_ValList}=    Create List
    @{test_list}=    Create List    OV ping
    ...                             RIBCL Ipdu Comm
    :FOR    ${test}    IN    @{test_list}
    \    ${status}=  Run Keyword If    '${test}'=='OV ping'    Run Keyword And Continue On Failure    ${test}    ${ipdu_ip}
    \    ...                   ELSE        Run Keyword And Continue On Failure    ${test}    ${ipdu_ip}
    \    Append To List    ${Ipdu_ValList}    ${status[1]}
    \    ${status}=        Run Keyword If     '${status[0]}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${Ipdu_ValList}
    Run keyword if    ${count} == ${length}        Log    ********** IPDU Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}        Run Keyword And Continue On Failure    FAIL    IPDU Validation : FAILED
    [Return]    ${Ipdu_ValList}

DBSync POST Entry
    [Documentation]    Creates an Entry in PSRM index.node Database Using Post Api Call
    [Arguments]     ${api}

    ${trusted_token}=  Execute Command    /ci/bin/./get-trustedtoken.sh 'DigitalSig'
    ${resp} =    Fusion Api Create Index Resource    ${dbsync_Index_body}    ${api}    auth=${trusted_token}
    ${actual_resp_code} =   get from dictionary     ${resp}     status_code
    [Return]    ${actual_resp_code}    ${resp}

DBSync Compare DB Diff
    [Documentation]    Below Keyword Validates the Entry Added By API POST call using Dbsync Tool and Psql Query to Index.node DB of PSRM
    [Arguments]     ${text}    ${text3}
    ${dbsync_cmd_dict}=    Create Dictionary
    ${dbsync_db_dict}=    Create Dictionary

    ${dbsync}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && ./dbSync.py -rm psrm -diff
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Not Contain    ${dbsync}    ${text}
    Run keyword if   '${status}'=='True'    Log    ************ Successfully Added Entry in Index.node db ***************    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ************** Failed to Add Entry in Index.node db ***************
    ${key} =    Get Regexp Matches    ${dbsync}    index_db_uri
    ${value} =    Get Regexp Matches    ${dbsync}    ${text3}
    Log    ${key}
    Run Keyword If    '${value[0]}' == '${text3}'    Run Keyword And Continue On Failure    Set To Dictionary    ${dbsync_cmd_dict}    ${key[0]}    ${value[0]}
    ...       ELSE        Run Keyword And Continue On Failure    Fail    ***********Failed to Add Key-Value to DbSync_CMD DB Dictionary*************
    Log    ${dbsync_cmd_dict}

    ${dbsync}=    Execute Command    ${dbsync_db_query}
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Not Contain    ${dbsync}    ${text}
    Run keyword if   '${status}'=='True'    Log    ************ Successfully Found Entry in Index.node db ***************    console=true
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ************** Failed to Find Entry in Index.node db ***************
    ${key} =    Get Regexp Matches    ${dbsync}    uri
    ${value} =    Get Regexp Matches    ${dbsync}    ${text3}
    Log    ${key}
    Run Keyword If    '${value[0]}' == '${text3}'    Run Keyword And Continue On Failure    Set To Dictionary    ${dbsync_db_dict}    index_db_uri    ${value[0]}
    Run keyword Unless    '${value[0]}' == '${text3}'    Run Keyword And Continue On Failure    Fail    ***********Failed to Add Key-Value to Index DB Dictionary*************
    Log    ${dbsync_db_dict}
    [Return]      ${dbsync_cmd_dict}    ${dbsync_db_dict}

DBSync Sync Diff and Validate
    [Documentation]    Below Keyword deletes those Entries from Index.node db which are not present in RM DB but present in Index.node DB
    [Arguments]    ${text2}    ${text3}

    ${dbsync_Sync_Index}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && yes | ./dbSync.py -rm psrm -syncindex
    ${status_Sync_Index} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${dbsync_Sync_Index}    ${text2}

    ${dbsync_diff_val}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && ./dbSync.py -rm psrm -diff
    ${status_diff_val} =  Run Keyword and Return Status    BuiltIn.Should Not Contain    ${dbsync_diff_val}    ${text3}
    [Return]    ${status_Sync_Index}    ${status_diff_val}

Rabbitmq List Queues Validation
    [Documentation]    Validates the rabbitmq queues of different RMs w.r.t to rabbitmqtools.py file and rabbitmq client
    [Arguments]    ${RM_Name}

    ${rabbitmqtool_list_queues}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && ./rabbitmq.py -l ${RM_Name}
    Log To Console    ${rabbitmqtool_list_queues}
    ${rabbitmqtool_running_queues}=    Remove String Using Regexp   ${rabbitmqtool_list_queues}    \\s.\\s0.*1\\s.*
    Log    ${rabbitmqtool_running_queues}
    ${rabbitmqtool_remove_string}=    Remove String    ${rabbitmqtool_running_queues}    Name | NoOfMessages | DeliveryMessageRate | IncomingMessageRate | NoOfConsumers | IdleSince | Exchange
    Log    ${rabbitmqtool_remove_string}
    ${rabbitmqtool_list_matches}=    Get Regexp Matches    ${rabbitmqtool_remove_string}    \\w+.\\w+
    Log    ${rabbitmqtool_list_matches}
    ${rabbitmqtool_grep_configfile}=    Execute Command    cat /ci/support/ovsupportability/conf/listofqueues3_0 | grep -i ${RM_Name}
    Log    ${rabbitmqtool_grep_configfile}
    ${rabbitmqtool_remove_string_config}=    Remove String    ${rabbitmqtool_grep_configfile}    ${RM_Name}
    Log    ${rabbitmqtool_remove_string_config}
    ${rabbitmqtool_list_configfile}=    Split String    ${rabbitmqtool_remove_string_config}
    Log    ${rabbitmqtool_list_configfile}

    ${status}=    Run Keyword And Return Status    List Should Contain Sub List    ${rabbitmqtool_list_configfile}    ${rabbitmqtool_list_matches}    msg=****** RabbitMq Queues Validation Failed *******
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ******* Rabbitmq List Queues Keyword : Failed *********
    Run keyword if   '${status}'=='True'    Log    ******** Rabbitmq List Queues Keyword : Passed ********
    [Return]    ${status}

Rabbitmq Get Credentials
    [Documentation]    Get Rabbitmqadmin Credentails from rabbitmq.config file
    # [Arguments]    ${test_queue_name}=mat_test_queue

    ${rabbitmq_creds_dict}=    Create Dictionary
    ${rabbitmqadmin_creds}=    Execute Command     cat /ci/pre-ha-data.install/messaging/rabbitmq.config | grep -e default_user -e default_pass
    ${rabbitmqadmin_creds_list}=    Split To Lines    ${rabbitmqadmin_creds}
    Log    ${rabbitmqadmin_creds_list}
    :For    ${line}    IN    @{rabbitmqadmin_creds_list}
    #\    ${Strip_line}=    Remove String    ${line}    |
    \    ${key} =    Get Regexp Matches    ${line}    \\w+_(user|pass)
    #\    ...                   ELSE    Get Matches    ${line}    default_pass
    \    Run Keyword If    ${key} == ${null}    continue for loop
    \    Log    ${key}
    \    ${value} =    Get Regexp Matches    ${line}    "\\w+.\\w+.\\w+
    #\    ${value2}=    Get Matches    ${value}    regexp=\\w+.\\w+.\\w+
    \    Run Keyword If    ${value} == ${null}    continue for loop
    \    Log    ${value}
    \    Set To Dictionary    ${rabbitmq_creds_dict}    ${key[0]}    ${value[0]}
    Log    ${rabbitmq_creds_dict}
    ${default_user}=    Get From Dictionary    ${rabbitmq_creds_dict}    default_user
    ${default_pass}=    Get From Dictionary    ${rabbitmq_creds_dict}    default_pass
    ${value_user}=    Remove String    ${default_user}    "
    ${value_pass}=    Remove String    ${default_pass}    "
    Log    ${value_user}
    Log    ${value_pass}
    Set Global Variable    ${rabbitmq_user}    ${value_user}
    Set Global Variable    ${rabbitmq_pass}    ${value_pass}
    [Return]    ${rabbitmq_user}    ${rabbitmq_pass}
Rabbitmq Create Dummy Queue
    [Documentation]    Create Dummy Queue for rabbitmq support-tool MAT testing
    [Arguments]    ${test_queue_name}

    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqadmin -u "${rabbitmq_user}" -p "${rabbitmq_pass}" declare queue --vhost=/ name=${test_queue_name} durable=true    return_stderr=True    return_rc=True
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout}    queue declared
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ********Create Rabbitmq Queue Keyword Failed********
    Run keyword if   '${status}'=='True'    Run Keyword And Continue On Failure    Log    ********Successfully Created Rabbitmq Test Queue ********    console=true
    Log    ${stdout}
    #Should Be Empty    ${stderr}                 msg=Error returned: ${rc} ${stderr}
    Should Be Equal As Integers    ${rc}    0    msg=non-zero return code ${rc}
    [Return]    ${status}

Rabbitmq Create Dummy Exchange
    [Documentation]    Creates an Rabbitmq exchange for rabbitmq support-tool MAT testing
    [Arguments]    ${test_exchange}

    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqadmin -u "${rabbitmq_user}" -p "${rabbitmq_pass}" declare exchange --vhost=/ name=${test_exchange} type=direct    return_stderr=True    return_rc=True
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout}    exchange declared
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ********Create Rabbitmq Exchange Keyword Failed********
    Log    ${stdout}
    #Should Be Empty    ${stderr}                 msg=Error returned: ${rc} ${stderr}
    Should Be Equal As Integers    ${rc}    0    msg=non-zero return code ${rc}
    [Return]    ${status}

Rabbitmq Declare Bindings
    [Documentation]    Creates Bindings between declared Queue and Exchange
    [Arguments]    ${test_queue_name}    ${test_exchange}    ${test_routing_key}

    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqadmin -u "${rabbitmq_user}" -p "${rabbitmq_pass}" --vhost="/" declare binding source="${test_exchange}" destination_type="queue" destination="${test_queue_name}" routing_key="${test_routing_key}"    return_stderr=True    return_rc=True
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout}    binding declared
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ********Create Rabbitmq bindings Keyword Failed********
    Log    ${stdout}
    #Should Be Empty    ${stderr}                 msg=Error returned: ${rc} ${stderr}
    Should Be Equal As Integers    ${rc}    0    msg=non-zero return code ${rc}
    [Return]    ${status}

Rabbitmq Publish Message
    [Documentation]    Creates Bindings between declared Queue and Exchange
    [Arguments]    ${test_exchange}    ${test_routing_key}

    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqadmin -u "${rabbitmq_user}" -p "${rabbitmq_pass}" publish exchange=${test_exchange} routing_key=${test_routing_key} payload="MAT, OVSupportibility"    return_stderr=True    return_rc=True
    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqadmin -u "${rabbitmq_user}" -p "${rabbitmq_pass}" publish exchange=${test_exchange} routing_key=${test_routing_key} payload="MAT, OVSupportibility-Msg2"    return_stderr=True    return_rc=True
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout}    Message published
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ********Rabbitmq Publish Message Keyword Failed********
    Run keyword if   '${status}'=='True'    Run Keyword And Continue On Failure    Log    ********Successfully Published Message On Test Queue********
    Log    ${stdout}
    #Should Be Empty    ${stderr}                 msg=Error returned: ${rc} ${stderr}
    Should Be Equal As Integers    ${rc}    0    msg=non-zero return code ${rc}
    [Return]    ${status}

Rabbitmq Purge Queue
    [Documentation]    Verifies and Purges declared Queue
    [Arguments]    ${test_queue_name}

    ${stdout}    ${stderr}    ${rc}=    Execute Command    rabbitmqctl list_queues | grep ${test_queue_name}    return_stderr=True    return_rc=True
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout}    2
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ********Rabbitmq Test Queue Has No Message : Failed********
    Run keyword if   '${status}'=='True'    Run Keyword And Continue On Failure    Log    ********Rabbitmq Test Queue Has Two Messages ********
    Log    ${stdout}
    #Should Be Empty    ${stderr}                 msg=Error returned: ${rc} ${stderr}
    Should Be Equal As Integers    ${rc}    0    msg=non-zero return code ${rc}
    Sleep    10 seconds

    ${stdout_new}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && ./rabbitmq.py -p ${test_queue_name}
    Log    ${stdout_new}    console=true
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout_new}    queue purged
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ******** No messages on Test Queue. Purged : Failed********
    Run keyword if   '${status}'=='True'    Run Keyword And Continue On Failure    Log    ******** Successfully Purged messages on Test Queue Using Rabbitmq Support-Tool********
    [Return]    ${status}

Rabbitmq Purge Queue Validation
    [Documentation]    Creates Bindings between declared Queue and Exchange
    [Arguments]    ${test_exchange}    ${test_routing_key}    ${test_queue_name}    ${length}=0    ${count}=0

    ${keywords_status}=    Create List
    @{keywords_list}=    Create List    Rabbitmq Create Dummy Queue
    ...                                 Rabbitmq Create Dummy Exchange
    ...                                 Rabbitmq Declare Bindings
    ...                                 Rabbitmq Publish Message
    ...                                 Rabbitmq Purge Queue
    :FOR    ${keyword}    IN    @{keywords_list}
    \    ${status}=  Run Keyword If    '${keyword}'=='Rabbitmq Create Dummy Queue'    Run Keyword And Continue On Failure    ${keyword}    ${test_queue_name}
    \    ...                ELSE IF    '${keyword}'=='Rabbitmq Create Dummy Exchange'    Run Keyword And Continue On Failure    ${keyword}    ${test_exchange}
    \    ...                ELSE IF    '${keyword}'=='Rabbitmq Declare Bindings'    Run Keyword And Continue On Failure    ${keyword}    ${test_queue_name}    ${test_exchange}    ${test_routing_key}
    \    ...                ELSE IF    '${keyword}'=='Rabbitmq Publish Message'    Run Keyword And Continue On Failure    ${keyword}    ${test_exchange}    ${test_routing_key}
    \    ...                ELSE        Run Keyword And Continue On Failure    ${keyword}    ${test_queue_name}
    \    Append To List    ${keywords_status}    ${status}
    \    ${status}=        Run Keyword If     '${status}'=='True'        Set Variable  PASS
    \    ${count}=    Run keyword if   '${status}'=='PASS'    evaluate    ${count}+1
    \    ...                 ELSE IF    '${status}'=='None'    evaluate    ${count}+0
    \    ${length}=    Evaluate    ${length}+1
    Log    ${keywords_status}
    Run keyword if    ${count} == ${length}        Log    ********** Rabbitmq Purge Queue Validation : PASSED *********    console=true
    Run keyword Unless    ${count} == ${length}        Run Keyword And Continue On Failure    FAIL    Rabbitmq Purge Queue Validation : FAILED
    [Return]    ${keywords_status}

Rabbitmq Delete Queue
    [Documentation]    Deletes the Queue Using Rabbitmq Support-tool
    [Arguments]    ${test_queue_name}

    ${stdout_new}=    Execute Command    cd /ci/support/ovsupportability/scripts/ && yes | ./rabbitmq.py -d ${test_queue_name}
    ${status} =  Run Keyword and Return Status    BuiltIn.Should Contain    ${stdout_new}    queue deleted
    Run keyword if   '${status}'!='True'    Run Keyword And Continue On Failure    FAIL    ******** Test Queue Delete : Failed********
    Run keyword if   '${status}'=='True'    Run Keyword And Continue On Failure    Log    ******** Successfully deleted Test Queue Using Rabbitmq Support-Tool********    console=true
    Log    ${stdout_new}
    [Return]    ${status}