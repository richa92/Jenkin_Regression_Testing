*** Settings ***
Documentation    blade_health.txt - Blade Health test
...    = USAGE =
...    | pybot | -v ENCLOSURE:<name> | blade_health.txt |
...    = Variables =
...    | ENCLOSURE | Required; Enclosure to use |
*** Settings ***
Library           json
Variables         ../resources/variables.py    ${ENCLOSURE}
Resource          ../resources/defaults.txt
Resource          ../resources/fusion_api.txt
Resource          ../resources/em_api.txt
Resource          ../resources/fusion_ssh.txt
Force Tags        HW
Suite Setup       Suite Setup
Suite Teardown    Suite Teardown

*** Variables ***
${EFuse_Sleep}    60

*** Test Case ***
###############################################################################
EFuseOn Blade Bay
    [Tags]    EFuseOn    BLADE    Alert    Status
    EFuse Blade Bay    EFuseOn    ${bayNumber}
    Sleep    ${EFuse_Sleep}

EFuseOn Blade EM Event Validation
    [Tags]    EFuseOn    BLADE
    ${Event_List}    ${Last_EventID}=    EM Diags Get Audit Log Events
    ...    Starting_EventID=${Last_EventID}    Origin_Filter=.*Blade.*

    ${Expected_Events}    Create List    emRegistry.1.0.BladeRemoved
    :FOR    ${Event}    IN    @{Event_List}
    \    Log    ${Event['MessageID']}
    \    Remove Values From List    ${Expected_Events}    ${Event['MessageID']}
    Should Be Empty    ${Expected_Events}    Event(s) not found: ${Expected_Events}

EFuseOn Blade Activity Alert Validation
    [Tags]    EFuseOn    Alert
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*Blade.*

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.BladeRemoved
    :FOR    ${Alert}    IN    @{Alert_List}
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

EFuseOn Blade Device Status Validation
    [Tags]    EFuseOn    Status
    ${DeviceInfo}    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Fusion Api Get Device    BayNumber=${bayNumber}

    # Verify Blade state and status are as expected
    Should Be Equal    ${DeviceInfo['devicePresence']}    Absent

###############################################################################

EFuseOff Blade Bay
    [Tags]    EFuseOff    BLADE    Alert    Status
    EFuse Blade Bay    EFuseOff    ${bayNumber}
    Sleep    ${EFuse_Sleep}

EFuseOff Blade EM Event Validation
    [Tags]    EFuseOff    BLADE
    ${Event_List}    ${Last_EventID}=    EM Diags Get Audit Log Events
    ...    Starting_EventID=${Last_EventID}    Origin_Filter=.*Blade.*

    ${Expected_Events}    Create List    emRegistry.1.0.BladeInserted
    :FOR    ${Event}    IN    @{Event_List}
    \    Log    ${Event['MessageID']}
    \    Remove Values From List    ${Expected_Events}    ${Event['MessageID']}
    Should Be Empty    ${Expected_Events}    Event(s) not found: ${Expected_Events}

EFuseOff Blade Activity Alert Validation
    [Tags]    EFuseOff    Alert
    ${Alert_List}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*Blade.*

    ${Expected_Alerts}    Create List     hpris.emRegistry.1.0.BladeInserted
    :FOR    ${Alert}    IN    @{Alert_List}
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

EFuseOff Blade Device Status Validation
    [Tags]    EFuseOff    Status
    ${DeviceInfo}    Wait Until Keyword Succeeds    15 minutes    30 seconds
    ...    Fusion Api Get Device    BayNumber=${bayNumber}

    # Verify Blade state and status are as expected
    Should Be Equal    ${DeviceInfo['devicePresence']}    Present

###############################################################################

Inject Blade Fault
    [Tags]    Fault    BLADE    Alert    Status
    EM Diags Fault Injection    BladeManagerFaultInjection    ${bayNumber}    IloFailed     true
    Sleep    ${EFuse_Sleep}

Inject Blade Fault EM Event Validation
    [Tags]    Fault    BLADE
    ${Event_List}    ${Last_EventID}=    EM Diags Get Audit Log Events
    ...    Starting_EventID=${Last_EventID}    Origin_Filter=.*Blade.*

    ${Expected_Events}    Create List    emRegistry.1.0.BladeCritical
    ...                                  emRegistry.1.0.BladeIloFailedCritical
    ...                                  emRegistry.1.0.BladeManagerCritical
    ...                                  emRegistry.1.0.BladeIloFailedCleared    # Fault is cleared 2 seconds after injected.

    :FOR    ${Event}    IN    @{Event_List}
    \    Log    ${Event['MessageID']}
    \    Remove Values From List    ${Expected_Events}    ${Event['MessageID']}
    Should Be Empty    ${Expected_Events}    Event(s) not found: ${Expected_Events}

Inject Blade Fault Activity Alert Validation
    [Tags]    Fault    Alert
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*Blade.*

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.BladeIloFailedCritical
    ...                                  hpris.emRegistry.1.0.BladeIloFailedCleared    # Fault is cleared 2 seconds after injected.

    :FOR    ${Alert}    IN    @{Alert_List}
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

Inject Blade Fault Device Status Validation
    [Tags]    Fault    Status
    ${DeviceInfo}    Fusion Api Get Device    BayNumber=${bayNumber}

###############################################################################

Clear Blade Fault
    [Tags]    Clear    BLADE    Alert    Status
    EM Diags Fault Injection    BladeManagerFaultInjection    ${bayNumber}    IloFailed     false
    Sleep    3 minutes

Clear Blade Fault EM Event Validation
    [Tags]    Clear    BLADE
    Run Keyword And Expect Error    No EM Events Found
    ...    EM Diags Get Audit Log Events    Starting_EventID=${Last_EventID}    Origin_Filter=.*Blade.*

Clear Blade Fault Activity Alert Validation
    [Tags]    Clear    Alert
    Run Keyword And Expect Error    No Activity Alerts Found
    ...    Fusion Api Get Activity Alerts    Starting_AlertID=${${Last_AlertId}}

Clear Blade Fault Device Status Validation
    [Tags]    Clear    Status
    ${DeviceInfo}    Fusion Api Get Device    BayNumber=${bayNumber}

###############################################################################

#Cleanup Blade Faults
#    [tags]    Cleanup
#    :FOR    ${bayNumber}    IN RANGE    1    6
#    \    EFuse Blade Bay    EFuseOff    ${bayNumber}
#    \    EM Diags Fault Injection    BladeFaultInjection    ${bayNumber}    IloFailed    false

###############################################################################

*** Keywords ***
Suite Setup
    Login to Fusion via REST
    Login to Fusion via SSH

    # Get EM Session ID
    ${EM_IP}    ${EMSessionID}=    EM Api Create Session
    Set Suite Variable    ${Header}    "X-Auth-Token":"${EMSessionID}"

    # Select a random Blade Bay
    ${bayNumber}    Evaluate    random.randint(1, 12)    random
    Set Suite Variable    ${bayNumber}    1

    # Find Last Audit Event IDs
    Run Keyword and Ignore Error    EM Diags Get Audit Log Events
    Run Keyword and Ignore Error    Fusion Api Get Activity Alerts

Suite Teardown
    Logout of Fusion via REST
    Logout of Fusion via SSH

###############################################################################

EFuse Blade Bay
    [Documentation]    Perform an efuse action on a Blade bay. Action = EFuseOff | EFuseOn
    [Arguments]    ${Action}    ${BayNumber}
    ${Data}      Set Variable    {"Action":"${Action}"}
    ${Output}    Execute SSH Command
    ...    curl -ikX POST -H ${Header} --data-ascii '${data}' https://${EM_IP}%${fusion_nic}/rest/v1/BladeBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=EFuse action failed \n${Output}

###############################################################################

EM Diags Get Audit Log Events
    [Documentation]    Fetch Diag Audit Log Events.
    ...    (Assumes an SSH connection with curl is currently open)
    ...    Returns a list of (dictionary) entries and EventID of the latest event encountered.
    [Arguments]    ${IP}=${EM_IP}    ${Nic}=${FUSION_NIC}
    ...            ${Origin_Filter}=/rest/v1    ${Starting_EventID}=1-1
    Set Suite Variable    ${Last_EventID}    ${Starting_EventID}
    ${EM_Audit_Events_List}    Create List

    # Get the most recent entries from the audit (RIS events) log.
    ${Output}    Execute SSH Command
    ...       curl -ksS -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/50
    # Remove CLI prompt from buffer.  It messes up loads.
    ${Output}    String.Fetch From Left    ${Output}    [root@

    # Break the output into an (easier to handle) list of lines. One line per event.
    @{Lines}    Split To Lines    ${Output}
    : FOR    ${Line}    IN    @{Lines}
    \    # Reformat event/line (string) into a json dictionary
    \    ${Event}    json.loads    ${Line}

    \    # Select only the most recent events - skip any before that.
    \    ${EventID}    Get From Dictionary    ${Event}    EventID
    \    # EventID's are of the form n-nnn.  Only compare at the portion after the dash.
    \    ${tmpEventID}             Fetch From Right    ${EventID}    -
    \    ${tmpStarting_EventID}    Fetch From Right    ${Starting_EventID}    -
    \    Run Keyword If    ${${tmpStarting_EventID}}>=${${tmpEventID}}    Continue For Loop

    \    # Remember the last EventID encountered
    \    ${tmpLast_EventID}    Fetch From Right    ${Last_EventID}    -
    \    Run Keyword If    ${${tmpEventID}}>=${${tmpLast_EventID}}    Set Suite Variable    ${Last_EventID}    ${EventID}

    \    # Filter out any unrelated events (e.g., I'm only interested in Blade events)
    \    # Example: ${Origin_Filter} = '/rest/v1/BladeBays/${bayNumber}'
    \    ${OriginOfCondition}    Get From Dictionary    ${Event}    OriginOfCondition
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${OriginOfCondition}    ${Origin_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Add event (dictionary) into 'List of EM Audit Events'
    \    Append to List    ${EM_Audit_Events_list}    ${Event}
    Should Not Be Empty    ${EM_Audit_Events_list}    No EM Events Found
    [Return]    ${EM_Audit_Events_List}    ${Last_EventID}

EM Diags Fault Injection
    [Documentation]    Inject faults. InjectionType is one of: FruFaultInjection,
    ...    EmSwitchFaultInjection, EmSwitchPortFaultInjection, BladeManagerFaultInjection,
    ...    CommFaultInjection, FanFaultInjection, PSFaultInjection.
    ...
    ...    BladeManagerFaultInjection usage:
    ...      URI format: /rest/v1/Diags/BladeManagerFaultInjection/<slotID>/<faultType>/<bool>
    ...       Where:
    ...        slotID    = Valid blade slot number.
    ...        faultType = [IloFailed | IloOpStatus]
    ...        bool      = true to inject fault, false to clear fault
    ...
    [Arguments]    ${InjectionType}    ${slotID}    ${faultType}    ${bool}=''
    ${Output}    Execute SSH Command
    ...    curl -ksS -H ${Header} https://${EM_IP}%${fusion_nic}/rest/v1/Diags/${InjectionType}/${slotID}/${faultType}/${bool}
    Should Contain    ${Output}    event sent
    [Return]    ${Output}

###############################################################################

Fusion Api Get Activity Alerts
    [Documentation]    Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1    ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Alerts Found
    [Return]    ${Alert_List}    ${Last_AlertID}

Fusion Api Get Device
    [Documentation]    Get a specific device from the enclosure information
    [Arguments]    ${DeviceType}=deviceBays    ${BayNumber}=1
    ${Response}    Fusion Api Get Enclosures
    ${Status}      Get From Dictionary    ${Response}    status_code
    Should be Equal     ${Status}    ${200}    msg=Get Enclosures failed ${Response}

    # Make sure we get (more than zero) enclosures listed
    ${Count}       Get From Dictionary    ${Response}    count
    Run Keyword If    '${Count}'=='0'    Fatal Error    msg=No enclosures found

    # Fetch a pointer to the first enclosure - Member0
    ${Members}     Get From Dictionary    ${Response}    members
    ${Member0}     Get From List          ${Members}      0

    # Extract selected device bay information
    ${DeviceBays}        Get From Dictionary    ${Member0}      ${DeviceType}
    ${BayIndex}     Evaluate    ${BayNumber}-1
    ${DeviceInfo}    Get From List    ${DeviceBays}    ${BayIndex}

    # Verify Change is not in progress
    Should Be Equal As Strings    ${DeviceInfo['changeState']}    None    msg=Change Task is still in progress
    [Return]    ${DeviceInfo}
