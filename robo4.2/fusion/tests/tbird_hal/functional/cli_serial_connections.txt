*** Settings ***
Documentation   Verifies Serial connections displayed in the Fusion CLI.
...             Requires a claimed enclosure.
...             = Usage =
...             | pybot | -L DEBUG | -v FUSION_IP:<IP> | -v ENCLOSURE:<name> | -i [ DCS | HW ] | CLI_serial_connections.txt |
...             = Variables =
...             | FUSION IP     | Required; IP address of the FusionVM to use |
...             | ENCLOSURE     | Required; Enclosure name to run on (dcs, tesla, etc) |
...             = Tags =
...             | -i DCS | Executes Test Cases applicable on DCS |
...             | -i HW         | Executes Test Cases applicable on Hardware |
...             = Preconditions =
...             None

Library             RoboGalaxyLibrary           # DVTs Robot Framework extensions
Library             FusionLibrary               # DVTs Robot Framework extensions
Variables           ../resources/variables.py   ${ENCLOSURE}    # Variables file
Resource            ../resources/system_info.txt                # Comet-DVT System Info extensions
Resource            ../resources/fusion_ssh.txt                 # Comet-DVT fusion CLI extensions
Resource            ../resources/fusion_cli.txt                 # Comet-DVT fusion CLI extensions
Resource            ../resources/defaults.txt   # Comet-DVT default variables
Suite Setup         Run Keywords
...                 Login to Fusion CLI
...                 Enter CLI Console View
#...                Verify EM is Claimed
Suite Teardown      Run Keywords
...                 Logout of Fusion CLI
Force Tags          CLI                         # Force tags on all test cases


*** Variables ***
${ENC NAME}                 ${ENC SERIAL NUMBER}
${NO DATA}                  No data
# Robot does not seem to make this a list
#@{No Data Error Message}    No data
@{Bad Enc Error Message}    No enclosure found with specified name or UUID.
...                         Verify enclosure identifier specified and retry operation.
...                         Usage: show enclosure (list | sessions) \[<enclosure-name | enclosure-uuid>\]
...                         ${SPACE * 7}show (interconnect | blade) (list | sessions)
...                         ${SPACE * 17}\[<enclosure-name | enclosure-uuid> \[<bay-number>\]\]
@{Bad Bay Error Message}    Bay number specified is not valid.
...                         Specify a valid bay number and retry operation.
...                         Usage: show enclosure (list | sessions) \[<enclosure-name | enclosure-uuid>\]
...                         ${SPACE * 7}show (interconnect | blade) (list | sessions)
...                         ${SPACE * 17}\[<enclosure-name | enclosure-uuid> \[<bay-number>\]\]

*** Test Cases ***
#-----------------------------------------------------------------------
# HAPPY PATH TEST CASES
#-----------------------------------------------------------------------
Verify Show Enclosure List
    [Tags]      DCS     HW

    # show enclosure list
    ${Buffer}=      Execute CLI Show Command    enclosure list

    # Check output for errors
    Should Not Contain              ${Buffer}   Internal error.     msg=Error message found in Enclosure List output.
    List Should Not Contain Value   ${Buffer}   ${NO DATA}          msg='Show Enclosure List' output shows no data.

    # Parse Buffer output
    ${Enc Info}=    Parse Enclosure List Output     ${Buffer}

    # Calculate Number of Blades and Interconnects
    ${ENC BLADES}=    Get Length    ${BLADE DATA}
    ${ENC BLADES}=    Convert to String    ${ENC BLADES}
    Set Suite Variable    ${ENC BLADES}
    ${ENC INTERCONNECTS}=    Get Length    ${INTERCONNECT DATA}
    ${ENC INTERCONNECTS}=    Convert to String    ${ENC INTERCONNECTS}
    Set Suite Variable    ${ENC INTERCONNECTS}

    # Validate Enclosure Info
    ${Expected Enc Info}=   Create Dictionary       Name=${ENC NAME}    UUID=${ENC UUID}
    ...                     SerialNumber=${ENC Serial Number}
    ...                     Blades=${ENC BLADES}    Interconnects=${ENC INTERCONNECTS}
    Dictionaries Should be Equal                    ${Enc Info}         ${Expected Enc Info}
    ...                     msg=Failed to verify Enclosure information.

Verify Show Enclosure List for Specified Enc
    [Tags]      DCS     HW

    # show enclosure list
    ${Buffer}=      Execute CLI Show Command    enclosure list ${ENC NAME}

    # Check output for errors
    Should Not Contain              ${Buffer}   Internal error.     msg=Error message found in Enclosure List output.
    List Should Not Contain Value   ${Buffer}   ${NO DATA}          msg='Show Enclosure List' output shows no data.

    # Parse Buffer output
    ${Enc Info}=    Parse Enclosure List Output     ${Buffer}

    # Validate Enclosure Info
    ${Expected Enc Info}=   Create Dictionary       Name=${ENC NAME}    UUID=${ENC UUID}
    ...                     SerialNumber=${ENC Serial Number}
    ...                     Blades=${ENC BLADES}    Interconnects=${ENC INTERCONNECTS}
    Dictionaries Should be Equal                    ${Enc Info}         ${Expected Enc Info}
    ...                     msg=Failed to verify Enclosure information.

Verify Show Enclosure Sessions
    [Tags]     DCS
    ${Buffer}=              Execute CLI Show Command    enclosure sessions
    Parse Session Output    ${Buffer}                   show enclosure sessions

Verify Show Enclosure Sessions shows no data
    [Tags]    HW
    ${Buffer}=                      Execute CLI Show Command    enclosure sessions
    ${No Data Error Message}=	    Create List     ${NO DATA}
    Verify Expected Error Message   ${Buffer}                   show enclosure sessions		${No Data Error Message}

Verify Show Enclosure Sessions for Specified Enc
    [Tags]    DCS
    ${Buffer}=              Execute CLI Show Command    enclosure sessions ${ENC NAME}
    Parse Session Output   ${Buffer}                   show enclosure sessions ${ENC NAME}

Verify Show Blade List
    [Tags]    DCS  HW
    # show blade list
    ${Buffer}=              Execute CLI Show Command    blade list

    # Check output for errors
    Should Not Contain		    ${Buffer}   Internal error.     msg=Error message found in Blade List output.
    List Should Not Contain Value   ${Buffer}   ${NO DATA}          msg='Show Blade List' output shows no data.

    ${Blade Info}=      Parse Device List Output    ${Buffer}
    Log Dictionary      ${Blade Info}

    @{bays}=    Get Dictionary Keys     ${Blade Info}

    :FOR    ${bay}                      IN                      @{bays}
    \       # Get Blade Info from parsed buffer
    \       ${Blade}=                   Get From Dictionary     ${Blade Info}           ${bay}
    \
    \       Continue For Loop If     "${Blade['Model']}"=="[Absent]"
    \       Continue For Loop If     "${Blade['Model']}"=="${EMPTY}"
    \
    \       # Get Expected Blade Info as specified in variables.py
    \       ${Blade Bay Data}=    Get From Dictionary     ${BLADE DATA}           ${bay}
    \       ${Expected Blade Data}=     Create Dictionary    Model=${Blade Bay Data['Model']}
    \       ...                                              SerialNumber=${Blade Bay Data['SerialNumber']}
    \
    \       # Compare
    \       ${Actual Enc Name}=         Get From Dictionary     ${Blade}                Enc
    \       Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    \       ...                         msg=Unexpected Enclosure Name on Bay ${Bay}.
    \       Remove From Dictionary      ${Blade}                Enc
    \       Remove From Dictionary      ${Blade}                Consoles
    \       Dictionaries should be equal                        ${Blade}                ${Expected Blade Data}
    \       ...                         msg=Failed to verify Blade Bay Data on Bay ${Bay}

Verify Show Blade List for Populated Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Populated Blade Bay
    ${Buffer}=      Execute CLI Show Command    blade list ${ENC NAME} ${Bay}

    # Get Blade Info from parsed buffer
    ${Blade Info}=      Parse Device List Output    ${Buffer}
    ${Blade Info}=      Get From Dictionary         ${Blade Info}   ${bay}

    # Get Expected Blade Info as specified in variables.py
    ${Blade Bay Data}=    Get From Dictionary     ${BLADE DATA}           ${bay}
    ${Expected Blade Data}=     Create Dictionary    Model=${Blade Bay Data['Model']}
    ...                                              SerialNumber=${Blade Bay Data['SerialNumber']}

    ${Actual Enc Name}=         Get From Dictionary     ${Blade Info}           Enc
    Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    ...                         msg=Unexpected Enclosure Name on Bay ${Bay}.
    Remove From Dictionary      ${Blade Info}           Enc
    Remove From Dictionary      ${Blade Info}           Consoles
    Dictionaries should be equal                        ${Blade Info}           ${Expected Blade Data}
    ...                         msg=Failed to verify Blade Bay Data on Bay ${Bay}

Verify Show Blade List for Empty Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Empty Blade Bay
    ${Bay}=         Convert To String    ${Bay}
    ${Buffer}=      Execute CLI Show Command    blade list ${ENC NAME} ${Bay}

    # Get Blade Info from parsed buffer
    ${Blade Info}=      Parse Device List Output    ${Buffer}
    ${Blade Info}=      Get From Dictionary         ${Blade Info}   ${bay}

    ${Expected Blade Data}=     Create Dictionary    Model=${EMPTY}
    ...                                              SerialNumber=${EMPTY}

    ${Actual Enc Name}=         Get From Dictionary     ${Blade Info}           Enc
    Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    ...                         msg=Unexpected Enclosure Name on Bay ${Bay}.
    Remove From Dictionary      ${Blade Info}           Enc
    Remove From Dictionary      ${Blade Info}           Consoles
    Dictionaries should be equal                        ${Blade Info}           ${Expected Blade Data}
    ...                         msg=Failed to verify Blade Bay Data on Bay ${Bay}

Verify Show Blade Sessions
    [Tags]    DCS
    ${Buffer}=              Execute CLI Show Command    blade sessions
    Parse Session Output    ${Buffer}                   show blade sessions

Verify Show Blade Sessions shows no data
    [Tags]    HW
    ${Buffer}=                      Execute CLI Show Command    blade sessions
    ${No Data Error Message}=	    Create List     ${NO DATA}
    Verify Expected Error Message   ${Buffer}                   show blade sessions	${No Data Error Message}

# Verify Show Blade Sessions for Populated Bay
#   [Tags]              DCS     HW
#   [Documentation]     Currently N/A as expected sessions are not known.

Verify Show Blade Sessions for Empty Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Empty Blade Bay
    ${Buffer}=      Execute CLI Show Command    blade sessions ${ENC NAME} ${Bay}
    ${No Data Error Message}=	    Create List     ${NO DATA}
    Verify Expected Error Message               ${Buffer}   show blade sessions ${ENC NAME} ${Bay}
    ...             ${No Data Error Message}

Verify Show Interconnect List
    [Tags]    DCS    HW
    # show interconnect list
    ${Buffer}=              Execute CLI Show Command    interconnect list
    Should Not Contain      ${Buffer}                   Internal error.     msg=Error message found in Interconnect List output.

    # Check output for errors
    Should Not Contain              ${Buffer}   Internal error.     msg=Error message found in Enclosure List output.
    List Should Not Contain Value   ${Buffer}   ${NO DATA}          msg='Show Enclosure List' output shows no data.

    ${Interconnect Info}=   Parse Device List Output    ${Buffer}
    Log Dictionary          ${Interconnect Info}

    @{bays}=    Get Dictionary Keys     ${Interconnect Info}

    :FOR    ${bay}                      IN                      @{bays}
    \       # Get Interconnect Info from parsed buffer
    \       ${Interconnect}=            Get From Dictionary     ${Interconnect Info}    ${bay}
    \
    \       Continue For Loop If     "${Interconnect['Model']}"=="[Absent]"
    \       Continue For Loop If     "${Interconnect['Model']}"=="${EMPTY}"
    \
    \       # Get Expected Interconnect Info as specified in variables.py
    \       ${ICM Bay Data}=    Get From Dictionary     ${INTERCONNECT DATA}           ${bay}
    \       ${Expected Interconnect Data}=     Create Dictionary    Model=${ICM Bay Data['Model']}
    \       ...                                              SerialNumber=${ICM Bay Data['SerialNumber']}
    \
    \       # Validate Interconnect Info
    \       ${Actual Enc Name}=         Get From Dictionary     ${Interconnect}         Enc
    \       Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    \       ...                         msg=Unexpected Enclosure Name on Interconnect Bay ${Bay}.
    \       Remove From Dictionary      ${Interconnect}         Enc
    \       Remove From Dictionary      ${Interconnect}         Consoles
    \       Dictionaries should be equal                        ${Interconnect}         ${Expected Interconnect Data}
    \       ...                         msg=Failed to verify Interconnect Bay Data on Bay ${Bay}

Verify Show Interconnect List for Populated Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Populated Interconnect Bay
    ${Buffer}=      Execute CLI Show Command    interconnect list ${ENC NAME} ${Bay}

    # Get Interconnect Info from parsed buffer
    ${Interconnect Info}=   Parse Device List Output    ${Buffer}
    ${Interconnect Info}=   Get From Dictionary         ${Interconnect Info}    ${bay}

    # Get Expected Interconnect Info as specified in variables.py
    ${ICM Bay Data}=    Get From Dictionary     ${INTERCONNECT DATA}           ${bay}
    ${Expected Interconnect Data}=     Create Dictionary    Model=${ICM Bay Data['Model']}
    ...                                              SerialNumber=${ICM Bay Data['SerialNumber']}

    ${Actual Enc Name}=         Get From Dictionary     ${Interconnect Info}    Enc
    Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    ...                         msg=Unexpected Enclosure Name on Bay ${Bay}.
    Remove From Dictionary      ${Interconnect Info}    Enc
    Remove From Dictionary      ${Interconnect Info}    Consoles
    Dictionaries should be equal                        ${Interconnect Info}    ${Expected Interconnect Data}
    ...                         msg=Failed to verify Interconnect Bay Data on Bay ${Bay}

Verify Show Interconnect List for Empty Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Empty Interconnect Bay
    ${Bay}=         Convert To String    ${Bay}
    ${Buffer}=      Execute CLI Show Command    interconnect list ${ENC NAME} ${Bay}

    # Get Interconnect Info from parsed buffer
    ${Interconnect Info}=   Parse Device List Output    ${Buffer}
    ${Interconnect Info}=   Get From Dictionary         ${Interconnect Info}    ${bay}

    # Get Expected Interconnect Info as specified in variables.py
    ${Expected Interconnect Data}=     Create Dictionary    Model=${EMPTY}
    ...                                              SerialNumber=${EMPTY}

    ${Actual Enc Name}=         Get From Dictionary     ${Interconnect Info}    Enc
    Should Be Equal as Strings                          ${Actual Enc Name}      ${ENC NAME}
    ...                         msg=Unexpected Enclosure Name on Bay ${Bay}.
    Remove From Dictionary      ${Interconnect Info}    Enc
    Remove From Dictionary      ${Interconnect Info}    Consoles
    Dictionaries should be equal                        ${Interconnect Info}    ${Expected Interconnect Data}
    ...                         msg=Failed to verify Interconnect Bay Data on Bay ${Bay}

Verify Show Interconnect Sessions
    [Tags]    DCS
    ${Buffer}=              Execute CLI Show Command    interconnect sessions
    Parse Session Output    ${Buffer}                   show interconnect sessions

Verify Show Interconnect Sessions shows no data
    [Tags]    HW
    ${Buffer}=                      Execute CLI Show Command    interconnect sessions
    ${No Data Error Message}=	    Create List     ${NO DATA}
    Verify Expected Error Message   ${Buffer}                   show interconnect sessions      ${No Data Error Message}

# Verify Show Interconnect Sessions for Populated Bay
#   [Tags]              DCS     HW
#   [Documentation]     Currently N/A as expected sessions are not known.

Verify Show Interconnect Sessions for Empty Bay
    [Tags]    DCS    HW
    ${Bay}=         Select Random Empty Interconnect Bay
    ${Buffer}=      Execute CLI Show Command    interconnect sessions ${ENC NAME} ${Bay}
    ${No Data Error Message}=	    Create List     ${NO DATA}
    Verify Expected Error Message               ${Buffer}   show interconnect sessions ${ENC NAME} ${Bay}
    ...             ${No Data Error Message}

# -----------------------------------------------------------------------
# NEGATIVE PARAMETER TEST CASES
# -----------------------------------------------------------------------
(-) Verify Show Enclosure List for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    enclosure list badEnc
    Verify Expected Error Message   ${Buffer}                   show enclosure list badEnc      ${Bad Enc Error Message}

(-) Verify Show Enclosure Sessions for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    enclosure sessions badEnc
    Verify Expected Error Message   ${Buffer}                   show enclosure sessions badEnc      ${Bad Enc Error Message}

(-) Verify Show Blade List for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    blade list badEnc 2
    Verify Expected Error Message   ${Buffer}                   show blade list badEnc 2    ${Bad Enc Error Message}

(-) Verify Show Blade List for an invalid Bay
    [Tags]    DCS    HW    WORKAROUND
    ${Buffer}=                      Execute CLI Show Command    blade list ${ENC NAME} 25
    Verify Expected Error Message   ${Buffer}                   show blade list ${ENC NAME} 25      ${Bad Bay Error Message}

(-) Verify Show Blade Sessions for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    blade sessions badEnc 2
    Verify Expected Error Message   ${Buffer}                   show blade sessions badEnc 2    ${Bad Enc Error Message}

(-) Verify Show Blade Sessions for an invalid Bay
    [Tags]    DCS    HW    WORKAROUND
    ${Buffer}=                      Execute CLI Show Command    blade sessions ${ENC NAME} 25
    Verify Expected Error Message   ${Buffer}                   show blade sessions ${Enc NAME} 25      ${Bad Bay Error Message}

(-) Verify Show Interconnect List for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    interconnect list badEnc 2
    Verify Expected Error Message   ${Buffer}                   show interconnect list badEnc 2     ${Bad Enc Error Message}

(-) Verify Show Interconnect List for an invalid Bay
    [Tags]    DCS    HW    WORKAROUND
    ${Buffer}=                      Execute CLI Show Command    interconnect list ${ENC NAME} 12
    Verify Expected Error Message   ${Buffer}                   show interconnect list ${ENC NAME} 12   ${Bad Bay Error Message}

(-) Verify Show Interconnect Sessions for an invalid Enclosure
    [Tags]    DCS    HW
    ${Buffer}=                      Execute CLI Show Command    interconnect sessions badEnc 2
    Verify Expected Error Message   ${Buffer}                   show interconnect sessions badEnc 2     ${Bad Enc Error Message}

(-) Verify Show Interconnect Sessions for an invalid Bay
    [Tags]    DCS    HW    WORKAROUND
    ${Buffer}=      Execute CLI Show Command    interconnect sessions ${ENC NAME} 12
    Verify Expected Error Message               ${Buffer}   show interconnect sessions ${ENC NAME} 12
    ...             ${Bad Bay Error Message}

#-----------------------------------------------------------------------
# CURRENTLY UNSUPPORTED TEST CASES
#-----------------------------------------------------------------------

# Open connect to Enclosure
#   [Tags]              HW
#   [Documentation]     Currently N/A as no way to create new sessions.

# Open connect to Interconnect
#   [Tags]              HW
#   [Documentation]     Currently N/A as no way to create new sessions.

# Open connect to Blade
#   [Tags]              HW
#   [Documentation]     Currently N/A as no way to create new sessions.


*** Keywords ***
Check for Unexpected Errors
    # Check output for errors
    Should Not Contain      ${Buffer}   Internal error.     msg=Error message found in ${Command} output.

    # Verify 'No data' is not displayed
    List Should Not Contain Value   ${Buffer}   ${NO DATA}      msg='Show Enclosure List' output shows no data.

    # Verify usage string is not displayed
    ${usage}=   Get From List       ${Bad Bay Error Message}    3
    List Should Not Contain Value   ${Buffer}                   ${usage}
    ...         msg='Show Enclosure List' output shows usage string.

Parse Session Output
    [Arguments]                     ${Buffer}       ${Command}
    # console-view> show enclosure sessions
    # Device Type                   Enclosure       Bay Console Index Login Time
    # ------------ ---------- --- ------------- ----------------------------
    # Blade                         0000A66101 4    1   2014-11-19T16:41:15.330+0000
    # Blade                         0000A66101 4    2   2014-11-19T16:41:15.330+0000
    # Interconnect 0000A66101 1     1               2014-11-19T16:41:15.330+0000
    # Interconnect 0000A66101 3     1               2014-11-19T16:41:15.330+0000
    # Interconnect 0000A66101 4     1               2014-11-19T16:41:15.330+0000
    # Interconnect 0000A66101 6     1               2014-11-19T16:41:15.330+0000
    # console-view> show blade sessions
    # Enclosure                     Bay Console Index Login Time
    # ---------- --- ------------- ----------------------------
    # 0000A66101 4                  1               2014-11-19T16:41:15.330+0000
    # 0000A66101 4                  2               2014-11-19T16:41:15.330+0000
    # console-view> show interconnect sessions
    # Enclosure                     Bay Console Index Login Time
    # ---------- --- ------------- ----------------------------
    # 0000A66101 1                  1               2014-11-19T16:41:15.330+0000
    # 0000A66101 3                  1               2014-11-19T16:41:15.330+0000
    # 0000A66101 4                  1               2014-11-19T16:41:15.330+0000
    # 0000A66101 6                  1               2014-11-19T16:41:15.330+0000

    ${Device Info}=     Create Dictionary

    # Output Attributes
    ${attributes}=              Create List                     Device Type         Enclosure           Bay
    ...                         Console Index
    ...                         Login Time
    ${Enclosure Sessions}=      Run Keyword and Return Status   Should Contain      ${Command}          enclosure
    Run keyword If              '${Enclosure Sessions}'!='${True}'                  Remove From List    ${attributes}   0

    # Identifier
    ${identifier}=     Create List
    Run Keyword If        '${Enclosure Sessions}'=='${True}'    Append to List    ${identifier}    0    2
    Run Keyword Unless    '${Enclosure Sessions}'=='${True}'    Append to List    ${identifier}    1

    # Dynamically Determine sizes of each field based on the separator line
    ${separator line}=      Get From List       ${Buffer}           1
    @{matches}=             Split String        ${separator line}   ${SPACE}
    ${sizes}=               Create List
    :FOR                    ${match}            IN                  @{matches}
    \                       ${size}=            Get Length          ${match}
    \                       Append to List      ${Sizes}            ${size}

    Log List    ${sizes}

    ${size}=    Get Length                  ${Buffer}
    :FOR        ${index}                    IN RANGE            2                       ${size}
    \           # Parse data from buffer
    \           ${Device String}=           Get From List       ${Buffer}               ${index}
    \           ${match}                    @{values}=          Should Match Regexp     ${Device String}
    \           ...                         ^(.{${sizes[0]}})\\s(.{${sizes[1]}})\\s(.{${sizes[2]}})\\s(.{${sizes[3]}})\\s(.{${sizes[4]}})
    \
    \           # Remove leading and trailing spaces and store variables
    \           ${Device}=                  Create Dictionary
    \           Set Values to Dictionary    ${Device}           ${attributes}           ${values}
    \
    \           # Determine Dictionary Key identifier String
    \           ${identifier_str}=    Get Concatenated String from List    ${values}    ${identifier}
    \           Set To Dictionary           ${Device Info}      ${identifier_str}           ${Device}

    ${FormattedDictionary}      Evaluate    json.dumps(${Device Info}, indent=${4}, sort_keys=${True})      json
    Log                         ${FormattedDictionary}

    [Return]    ${Device Info}

Get Concatenated String from List
    [Arguments]    ${list}    ${keys}    ${separator}=${SPACE}

    Log List    ${list}
    Log List    ${keys}

    ${Concatenated String}=    Set Variable    ${EMPTY}
    :For    ${key}    IN    @{keys}
    \    ${value}=    Get From List    ${list}    ${key.strip()}
    \    ${Concatenated String}=    Set Variable If    '${Concatenated String}'=='${EMPTY}'
    \    ...                                           ${value}
    \    ...                        ${Concatenated String}${separator}${value}

    [Return]    ${Concatenated String}

Set Values to Dictionary
    [Arguments]     ${dictionary}   ${keys}     ${values}

    # Validate input
    ${Number of Keys}=              Get Length          ${keys}
    ${Number of Values}=            Get Length          ${values}
    # Should be Equal as Integers   ${Number of Keys}   ${Number of Values}

    :FOR    ${index}            IN RANGE        0           ${Number of Keys}
    \       ${key}=             Get From List   ${keys}     ${index}
    \       ${value}=           Get From List   ${values}   ${index}
    \       Set to Dictionary   ${dictionary}   ${key}      ${value.strip()}

Verify Expected Error Message
    [Arguments]     ${Buffer}   ${Command}      ${Expected Error Message}

    # Check output for errors
    Should Not Contain      ${Buffer}   Internal error.     msg=Error message found in ${Command} output.

    # Verify Data
    Log List                ${Expected Error Message}
    Log List                ${Buffer}
    Lists Should Be Equal   ${Buffer}   ${Expected Error Message}   msg=Failed to verify output for '${Command}'.

Parse Enclosure List Output
    [Documentation]     Parses output buffer list of enclosure list and returns information as a dictionary.
    ...                 Currently assumes only one enclosure.
    [Arguments]         ${Buffer}

    # Example buffer:
    # 0: Name   UUID    Serial Number Blades Interconnects
    # 1: ---------- ------------------------------------ ------------- ------ -------------
    # 2: XRN0000109 8e13ceb9-82ec-47b1-81cc-485dd77e7f39 XRN0000109     4   4
    # 3: [K[?1l>console-view>

    # Parse values from buffer
    ${Enc String}=      Get From List   ${Buffer}   2
    ${match}            ${Name}         ${UUID}     ${Serial Number}    ${Blades}   ${Interconnects}=   Should Match Regexp
    ...                 ${Enc String}
    ...                 ^(\\w{10})\\s(\\w{16})\\s(\\w{10})\\s([ \\d]{4})\\s([ \\d]{6})

    # Remove leading and trailing whitespace and store
    ${Enc Info}=        Create Dictionary   Name=${Name.strip()}
    ...                 UUID=${UUID.strip()}
    ...                 SerialNumber=${Serial Number.strip()}
    ...                 Blades=${Blades.strip()}
    ...                 Interconnects=${Interconnects.strip()}
    Log Dictionary      ${Enc Info}

    [Return]    ${EncInfo}

Parse Device List Output
    [Documentation]     Parses a given buffer list to return a dictionary containing device information by
    ...                 bay number.
    [Arguments]         ${Buffer}

    # Example buffer:
    # 0:                    Error occurred communicating with enclosure XRN0000109.
    # 1:                    Enclosure       Bay Console Indices Model   Serial Number
    # 2:                    ---------- --- --------------- -------- -------------
    # 3:                    XRN0000109 1    -   1Z10100003
    # 4:                    XRN0000109 2    -   1Z10100003
    # 5:                    XRN0000109 3    -   [Absent]
    # 6:                    XRN0000109 4    -   [Absent]
    # 7:                    XRN0000109 5    -   1Z10100003
    # 8:                    XRN0000109 6    -   1Z10100003
    # 9:                    XRN0000109 7    -   [Absent]
    # 10: XRN0000109 8      -               [Absent]
    # 11: XRN0000109 9      -               [Absent]
    # 12: XRN0000109 10     -               [Absent]
    # 13: XRN0000109 11     -               [Absent]
    # 14: XRN0000109 12     -               [Absent]
    # 15: [K[?1l>console-view>

    # console-view> show interconnect list
    # Enclosure         Bay Console Indices Model           Serial Number
    # ---------- --- --------------- ------------------------------------ -------------
    # XRN0000109 1      1   Natasha SAS 12Gb Switch         1Z10100003
    # XRN0000109 2      1   HP FlexFabric 40GbE Expansion Module 1Z10100003
    # XRN0000109 3      1   HP FlexFabric 40/40Gb Module    1Z10100003
    # XRN0000109 4      1   Natasha SAS 12Gb Switch         1Z10100003
    # console-view>

    # Currently assumes only one Enclosure is imported at a single time.
    # Returns Dictionary structure with Device Bay information
    # {"Enc Bay #" => { Consoles => "1,2",
    #   Model => "",
    #   SerialNumber => "1Z10100003" },
    # }

    ${Device Info}=     Create Dictionary

    # Dynamically Determine sizes
    ${separator line}=      Get From List       ${Buffer}           1
    @{matches}=             Split String        ${separator line}   ${SPACE}
    ${total size}=          Convert To Integer    0
    ${sizes}=               Create List
    :FOR                    ${match}            IN                  @{matches}
    \                       ${size}=            Get Length          ${match}
    \                       Append to List      ${Sizes}            ${size}
    \                       ${total size}=    Evaluate    ${total size} + ${size} + 1

    Log List    ${sizes}

    ${size}=    Get Length          ${Buffer}
    :FOR        ${index}            IN RANGE                2                   ${size}
    \           # Parse data from buffer
    \           ${Device String}=   Get From List           ${Buffer}           ${index}
    \           ${Device String}=    Pad String    ${Device String}    ${total size}
    \           ${match}            ${Enc}                  ${Bay}              ${Consoles}     ${Model}    ${Serial Number}=
    \           ...                 Should Match Regexp     ${Device String}
    \           ...                 ^(.{${sizes[0]}})\\s(.{${sizes[1]}})\\s(.{${sizes[2]}})\\s(.{${sizes[3]}})\\s(.{${sizes[4]}})
    \
    \           # Remove leading and trailing spaces and store variables
    \           ${Device}=          Create Dictionary       Enc=${Enc.strip()}
    \           ...                 Consoles=${Consoles.strip()}
    \           ...                 Model=${Model.strip()}
    \           ...                 SerialNumber=${Serial Number.strip()}
    \           Set To Dictionary   ${Device Info}          ${Bay.strip()}      ${Device}

    Log Dictionary      ${Device Info}

    [Return]    ${Device Info}

Pad String
    [Arguments]    ${string}    ${size}

    ${string size}=    Get Length    ${string}
    ${pad size}=       Evaluate    ${size} - ${string size}
    ${pad string}=     Evaluate    "${SPACE}" * ${pad size}

    ${padded string}=    Catenate    SEPARATOR=    ${string}    ${pad string}
    [Return]    ${padded string}

Execute CLI Show Command
    [Documentation]     Executes "Show ..." CLI command on the console view and returns buffer as an list.
    [Arguments]         ${params}
    ${output}=          Execute CLI Command     show ${params}      ${CLI CONSOLE PROMPT}

    # Covert to lines and remove control characters
    ${lines}=           Split to Lines      ${output}
    Remove From List    ${lines}            0   # Remove first line: \x1b[?1h\x1b
    Log List            ${lines}

    # Remove empty lines in list
    ${index}=           Get Length          ${lines}
    ${index}=           Evaluate            ${index}-1
    :FOR                ${line}             IN              @{lines}
    \                   ${value}=           Get From List   ${lines}            ${index}
    \                   ${size}=            Get length      ${value.strip()}
    \                   Run Keyword If      ${size}==0      Remove From List    ${lines}    ${index}
    \                   ${index}=           Evaluate        ${index}-1
    Remove From List    ${lines}            -1              # Remove last line: console-view>
    Log List            ${lines}

    [Return]    ${lines}

