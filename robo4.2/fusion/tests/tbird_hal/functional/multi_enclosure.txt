*** Settings ***
Documentation    multi_enclosure.txt - Multi Enclosure Activity test
...    = USAGE =
...    | pybot | -v ENCLOSURE:dcs |-v FUSION_IP:<IP> | multi_enclosure.txt |
...    = Variables =
...    | ENCLOSURE | Required; Enclosure to use |
...    | FUSION_IP | Required when enclosure is DCS; IP address of the FusionVM to use |
...    | ENC_2_SERIALNUMBER | Needed for secondary serial number

Library           json
Library           robot.api.logger
Library           Dialogs
Variables         ../resources/variables.py    ${ENCLOSURE}
Resource          ../resources/defaults.txt
Resource          ../resources/fusion_api.txt
Resource          ../resources/em_api.txt
Resource          ../resources/fusion_cli.txt
Resource          ../resources/fusion_ssh.txt
Force Tags        HW
Suite Setup       Suite Setup
Suite Teardown    Suite Teardown

*** Variables ***
${EFuse_Sleep}    30
${Enclosure}
${ENC_2_SERIALNUMBER}    
${BogusVar}              ${ENC_SERIAL_NUMBER}



*** Test Case ***

Single Enclosure Test Area
    Execute Manual Step    Please enter Pass to start test     No enclosure available
    ${resp} =   Fusion Api Get Enclosures
    #verify the count of enclosures
    Should be equal as strings    1    ${resp['count']}    msg= Did not find exactly 1 enclosure
    #    Need to Get Enclosure Names
    Log    ${resp['members'][0]['name']}
    # Check appliance(fusion) hal list enclosures and you should see the enclosure listed
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}
    #Should Contain    ${retval}    ${ENC_SERIAL_NUMBER}

    
*** Test Case ***
Cable in 2nd Enclosure
    Execute Manual Step    Please enter Pass after cabling the 2nd enclosure     No enclosure available
    Sleep    450
    ${ENC_2_SERIALNUMBER}=    Get Value From User    Input Serial Number from 2nd Enclosure    00HPMPXXXX 
    Should not be equal as strings    ${ENC_2_SERIALNUMBER}    00HPMPXXXX
    Set Suite Variable    ${ENC_2_SERIALNUMBER}       
    #First lets gather and verify our EM events
    #curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    ${Expected_Events}    Create List    emRegistry.1.0.EmLinkedNeighborsUpdated    emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    EM Event Validation    ${Expected_Events}
    #Verify our Fusion Alerts now

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    Enclosure Activity Alerts Validation    ${Expected_Alerts}

    #Get two big blobs of data
    ${resp} =   Fusion Api Get Enclosures
    Log    ${resp}
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}

    #verify the count of enclosures from FUSION API
    Run Keyword and Continue on Failure    Should be True    ${resp['count']} > 1    #msg= "Did not find multiple enclosures"
    Log    ${resp['count']}
    #verify the names are correct  
    # rewrite below to grab the list of enclosures and put in list then use "list should contain value KW"
    Log    ${resp['members'][0]['name']}
    Log    ${resp['members'][1]['name']}
    @{ENCLOSURES}    Create List    ${resp['members'][0]['name']}    ${resp['members'][1]['name']}

    List Should Contain Value    ${ENCLOSURES}    ${ENC_2_SERIALNUMBER}    "Did not find 2nd enclosure in list"
    List Should Contain Value    ${ENCLOSURES}    ${BogusVar}    "Did not find original enclosure in list"
        
     
*** Test Case ***
Cable out 2nd Enclosure
    Execute Manual Step    Please enter Pass after uncabling the 2nd enclosure     No enclosure available
    Sleep    450
    #First lets gather and verify our EM events
    #curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    ${Expected_Events}    Create List    emRegistry.1.0.EmLinkedNeighborsUpdated    emRegistry.1.0.EmLinkDisconnected
    Run Keyword and Continue on Failure    EM Event Validation    ${Expected_Events}
    #Verify our Fusion Alerts now

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkDisconnected
    Run Keyword and Continue on Failure    Enclosure Activity Alerts Validation    ${Expected_Alerts}
    
    #Get two big blobs of data
    ${resp} =   Fusion Api Get Enclosures
    Log    ${resp}
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}

    #verify the count of enclosures from FUSION API
    Run Keyword and Continue on Failure    Should be equal as strings    1    ${resp['count']}    msg= Did not find exactly 1 enclosure
    #Run Keyword and Continue on Failure    Should be True    ${resp['count']} > 1    #msg= "Did not find multiple enclosures"
    Log    ${resp['count']}
    #verify the names are correct  
    # rewrite below to grab the list of enclosures and put in list then use "list should contain value KW"
    Log    ${resp['members'][0]['name']}
    
    #List Should Contain Value    ${ENCLOSURES}    00HPMP57A2    "Did not find 00HPMPC7F8 in list"
     @{ENCLOSURES}    Create List    ${resp['members'][0]['name']}
    #List Should Contain Value    ${ENCLOSURES}    00HPMPC7F8    "Did not find 00HPMPC7F8 in list"
    List Should Contain Value    ${ENCLOSURES}    ${BogusVar}    "Did not find original enclosure in list"
    Run Keyword and Continue on Failure    Should be equal as strings    ${BogusVar}
    ...    ${resp['members'][0]['name']}    msg= "Not left with original enclosure"

    
*** Test Case ***
Cable in 2nd Enclosure Again
    Execute Manual Step    Please enter Pass after cabling the 2nd enclosure in again    No enclosure available
    Sleep    450
    #First lets gather and verify our EM events
    #curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    ${Expected_Events}    Create List    emRegistry.1.0.EmLinkedNeighborsUpdated    emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    EM Event Validation    ${Expected_Events}
    #Verify our Fusion Alerts now
    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    Enclosure Activity Alerts Validation    ${Expected_Alerts}

    #Get two big blobs of data
    ${resp} =   Fusion Api Get Enclosures
    Log    ${resp}
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}

    #verify the count of enclosures from FUSION API
    #Run Keyword and Continue on Failure    Should be equal as strings    2    ${resp['count']}    msg= Did not find exactly 2 enclosure
    Run Keyword and Continue on Failure    Should be True    ${resp['count']} > 1    #msg= "Did not find multiple enclosures"
    Log    ${resp['count']}
    #verify the names are correct  
    # rewrite below to grab the list of enclosures and put in list then use "list should contain value KW"
    Log    ${resp['members'][0]['name']}
    
    @{ENCLOSURES}    Create List    ${resp['members'][0]['name']}    ${resp['members'][1]['name']}

    List Should Contain Value    ${ENCLOSURES}    ${ENC_2_SERIALNUMBER}    "Did not find 2nd enclosure in list"
    List Should Contain Value    ${ENCLOSURES}    ${BogusVar}    "Did not find original enclosure in list"


Configure 2nd Enclosure
    Execute Manual Step    Please enter Pass after creating LIG, EG, LE, SP containing elements fron 2nd Enclosure    No enclosure available
    LOG    PASS

Cable out Configured 2nd Enclosure
    Execute Manual Step    Please enter Pass after uncabling the 2nd enclosure     No enclosure available
    Sleep    450
    #First lets gather and verify our EM events
    #curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    ${Expected_Events}    Create List    emRegistry.1.0.EmLinkedNeighborsUpdated    emRegistry.1.0.EmLinkDisconnected
    Run Keyword and Continue on Failure    EM Event Validation    ${Expected_Events}
    #Verify our Fusion Alerts now

    #${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkDisconnected    hpris.emRegistry.1.0.EmOneViewLinkDisconnected
    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkDisconnected    
    Run Keyword and Continue on Failure    Enclosure Activity Alerts Validation    ${Expected_Alerts}
    
    #Get two big blobs of data
    ${resp} =   Fusion Api Get Enclosures
    Log    ${resp}
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}

    #verify the count of enclosures from FUSION API
    Run Keyword and Continue on Failure    Should be equal as strings    2    ${resp['count']}    msg= Did not find exactly 2 enclosures
    Log    ${resp['count']}
    #verify the names are correct  
    # rewrite below to grab the list of enclosures and put in list then use "list should contain value KW"
    Log    ${resp['members'][0]['name']}
    
    @{ENCLOSURES}    Create List    ${resp['members'][0]['name']}    ${resp['members'][1]['name']}
    List Should Contain Value    ${ENCLOSURES}    ${BogusVar}    "Did not find original enclosure in list"
    List Should Contain Value    ${ENCLOSURES}    ${ENC_2_SERIALNUMBER}    "Did not find 2nd enclosure in list"
    #Run Keyword and Continue on Failure    Should be equal as strings    ${ENC2_SERIAL_NUMBER}
    #...    ${resp['members'][1]['name']}    msg= "Not finding 2nd enclosure"
     
    
Cable in Missing 2nd Enclosure
    Execute Manual Step    Please enter Pass after cabling the missing enclosure in    No enclosure available
    Sleep    450
    #First lets gather and verify our EM events
    #curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    ${Expected_Events}    Create List    emRegistry.1.0.EmLinkedNeighborsUpdated    emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    EM Event Validation    ${Expected_Events}
    #Verify our Fusion Alerts now

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkConnected
    Run Keyword and Continue on Failure    Enclosure Activity Alerts Validation    ${Expected_Alerts}

    #Get two big blobs of data
    ${resp} =   Fusion Api Get Enclosures
    Log    ${resp}
    ${retval} =    Execute Command    /ci/bin/tbird/appliance-hal.sh list-enclosures
    Log    ${retval}

    #verify the count of enclosures from FUSION API
    #Run Keyword and Continue on Failure    Should be equal as strings    2    ${resp['count']}    msg= Did not find exactly 2 enclosure
    Run Keyword and Continue on Failure    Should be True    ${resp['count']} > 1    #msg= "Did not find multiple enclosures"
    Log    ${resp['count']}
    #verify the names are correct  
    # rewrite below to grab the list of enclosures and put in list then use "list should contain value KW"
    Log    ${resp['members'][0]['name']}
    
    @{ENCLOSURES}    Create List    ${resp['members'][0]['name']}    ${resp['members'][1]['name']}

    List Should Contain Value    ${ENCLOSURES}    ${ENC_2_SERIALNUMBER}    "Did not find 2nd enclosure in list"
    List Should Contain Value    ${ENCLOSURES}    ${BogusVar}    "Did not find original enclosure in list"

#When time permits may want to add 2 more test cases
# api_delete_fusion_elements.txt
# cable out 2nd enclosure




*** Keywords ***

EM Event Validation
    [Arguments]    ${Expected_Events}

     ${Event_List}    ${Last_EventID}=    EM Diags Get Audit Log Events
    ...    Starting_EventID=${Last_EventID}
    #${Expected_Events}    Create List    emRegistry.1.0.EmLinkConnected
    :FOR    ${Event}    IN    @{Event_List}
    \    Log    ${Event['MessageID']}
    \    Remove Values From List    ${Expected_Events}    ${Event['MessageID']}
    Should Be Empty    ${Expected_Events}    Event(s) not found: ${Expected_Events}

Enclosure Activity Alerts Validation
    [Arguments]    ${Expected_Alerts}

    ${Alert_List}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${Last_AlertId}
    #...    Starting_AlertID=${${Last_AlertId}}
    #${Expected_Alerts}    Create List    hpris.emRegistry.1.0.EmLinkConnected
    :FOR    ${Alert}    IN    @{Alert_List}
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

Suite Setup
    Login to Fusion via REST
    Login to Fusion via SSH

    # Get EM Session ID
    ${EM_IP}    ${EMSessionID}=    EM Api Create Session
    Set Suite Variable    ${EMSessionId}


    # Find Last Audit Event IDs
    #Run Keyword and Ignore Error    EM Diags Get Audit Log Events
    Set Suite Variable    ${Last_EventID}    1-1
    Console    Last EM Event found: ${Last_EventID}
    #Run Keyword and Ignore Error    Fusion Api Get Activity Alerts
    Set Suite Variable    ${Last_AlertID}    1
    Console    Last Alert found: ${Last_AlertID}

Suite Teardown
    Logout of Fusion via REST
    Logout of Fusion via SSH

###############################################################################

EFuse Fan Bay
    [Documentation]    Perform an efuse action on a fan bay. Action = EFuseOff | EFuseOn
    [Arguments]    ${Action}    ${BayNumber}
    ${Header}    Set Variable    "X-Auth-Token":"${EMSessionID}"
    ${Data}      Set Variable    {"Action":"${Action}"}
    ${Output}    Execute SSH Command
    ...    curl -ikX POST -H ${Header} --data-ascii '${data}' https://${EM_IP}%${fusion_nic}/rest/v1/FanBays/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=EFuse action failed \n${Output}


###############################################################################

EM Diags Get Audit Log Events
    [Documentation]    Fetch Diag Audit Log Events.
	...    (Assumes an SSH connection with curl is currently open)
	...    Returns a list of (dictionary) entries and EventID of the latest event encountered.
	[Arguments]    ${IP}=${EM_IP}    ${Nic}=${FUSION_NIC}
    ...            ${Origin_Filter}=/rest/v1    ${Starting_EventID}=0
    #this next line needs to come out for real runs
    ${Last_AlertID}    Set Variable    1
    Set Suite Variable    ${Last_EventID}    ${Starting_EventID}
    ${EM_Audit_Events_List}    Create List

    # Get the most recent entries from the audit (RIS events) log.
    ${Header}    Set Variable    "X-Auth-Token":"${EMSessionID}"
    ${Output}    Execute SSH Command
    ...       curl -k -H ${Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/150
    # Remove CLI prompt from buffer.  It messes up loads.
    ${Output}    String.Fetch From Left    ${Output}    [root@

    # Break the output into an (easier to handle) list of lines. One line per event.
    @{Lines}    Split To Lines    ${Output}
    : FOR    ${Line}    IN    @{Lines}
    \    # Reformat event/line (string) into a json dictionary
    \    ${Event}    json.loads    ${Line}

    \    # Select only the most recent events - skip any before that.
    \    ${EventID}    Get From Dictionary    ${Event}    EventID
    \    # EventID's are of the form n-nnn.  Only compare at the portion after the dash.
    \    ${tmpEventID}             Fetch From Right    ${EventID}    -
    \    ${tmpStarting_EventID}    Fetch From Right    ${Starting_EventID}    -
    \    Run Keyword If    ${${tmpStarting_EventID}}>=${${tmpEventID}}    Continue For Loop

    \    # Remember the last EventID encountered
    \    ${tmpLast_EventID}    Fetch From Right    ${Last_EventID}    -
    \    Run Keyword If    ${${tmpEventID}}>=${${tmpLast_EventID}}    Set Suite Variable    ${Last_EventID}    ${EventID}

    \    # Filter out any unrelated events (e.g., I'm only interested in fan events)
	\    # Example: ${Origin_Filter} = '/rest/v1/FanBays/${bayNumber}'
    \    ${OriginOfCondition}    Get From Dictionary    ${Event}    OriginOfCondition
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${OriginOfCondition}    ${Origin_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Add event (dictionary) into 'List of EM Audit Events'
    \    Append to List    ${EM_Audit_Events_list}    ${Event}
    [Return]    ${EM_Audit_Events_List}    ${Last_EventID}

###############################################################################

Fusion Api Get Activity Alerts
    [Documentation]    Fetch recent Fusion Activity Alerts
	...    (Assumes a Fusion REST Api connection is open and logged in).
	...    Returns a list of Alerts.
	[Arguments]    ${Starting_AlertID}=1    ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    #setting id to 1 for practice runs only
    ${Last_AlertID}    Set Variable    1
    Set Suite Variable    ${Last_AlertID}    ${Starting_AlertID}
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Run Keyword if            '${Count}'=='0'    Console    \nNo alert events found
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceID
	\    ${Found}    Run Keyword And Return Status
	\    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    [Return]    ${Alert_List}    ${Last_AlertID}

Fusion Api Get Device
    [Documentation]    Get a specific device from the enclosure information
    [Arguments]    ${DeviceType}=fanBays    ${BayNumber}=1
    ${Response}    Fusion Api Get Enclosures
    ${Status}      Get From Dictionary    ${Response}    status_code
    Should be Equal    ${Status}    ${200}    msg=Get Enclosures failed ${Response}

    # Make sure we get (more than zero) enclosures listed
    ${Count}       Get From Dictionary    ${Response}    count
    Run Keyword If    '${Count}'=='0'    Fatal Error    msg=No enclosures found

    # Fetch a pointer to the first enclosure - Member0
    ${Members}     Get From Dictionary    ${Response}    members
    ${Member0}     Get From List          ${Members}      0

    # Extract selected device bay information
    ${DeviceBays}        Get From Dictionary    ${Member0}      ${DeviceType}
    ${BayIndex}     Evaluate    ${BayNumber}-1
    ${DeviceInfo}    Get From List    ${DeviceBays}    ${BayIndex}
    [Return]    ${DeviceInfo}
