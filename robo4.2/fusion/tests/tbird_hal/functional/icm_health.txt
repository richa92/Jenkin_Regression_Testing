*** Settings ***
Documentation    em_health.txt - Enclosure ICM Health test - With DEBUG enabled
...    = USAGE =
...    | pybot | -v ENCLOSURE:dcs |-v FUSION_IP:<IP> | ICM_health.txt |
...    = Variables =
...    | ENCLOSURE | Required; Enclosure to use |
...    | FUSION_IP | Required when enclosure is DCS; IP address of the FusionVM to use |

Library           json
Library           robot.api.logger
Variables         ../resources/variables.py    ${ENCLOSURE}
Resource          ../resources/defaults.txt
Resource          ../resources/fusion_api.txt
Resource          ../resources/em_api.txt
Resource          ../resources/fusion_ssh.txt
# Resource          ../resources/enclosure_info.txt
Force Tags        HW
Suite Setup       Suite Setup
Suite Teardown    Suite Teardown

*** Variables ***
${EFuse_Sleep}    60 seconds

*** Test Case ***

Inject MateDetect Fault on ICM and verify events
    [Tags]    ICM    MateDetect    Inject Fault
    Inject MateDetect Fault on ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectMateDetectFault
    ...                                  emRegistry.1.0.InterconnectWarning
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectMateDetectFault
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Update ICM Data
    Verify ICM powerState is On
    Verify ICM state is Monitored
    Verify ICM status is OK

Clear MateDetect Fault on ICM and verify events
    [Tags]    ICM    MateDetect    Clear Fault
    Clear MateDetect Fault on ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectMateDetectFaultCleared
    ...                                  emRegistry.1.0.InterconnectOk
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectMateDetectFaultCleared
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Update ICM Data
    Verify ICM powerState is On
    Verify ICM state is Monitored
    Verify ICM status is OK

Inject EfusePGood Fault on ICM and verify events
    [Tags]    ICM    EfusePGood    Inject Fault
    Inject EfusePGood Fault on ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectSystemPGoodFault
    ...                                  emRegistry.1.0.InterconnectEfusePGoodFault
    ...                                  emRegistry.1.0.InterconnectCritical
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectSystemPGoodFault
    ...                                  hpris.emRegistry.1.0.InterconnectEfusePGoodFault
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Update ICM Data
    Verify ICM powerState is Off
    Verify ICM state is Monitored
    Verify ICM status is Critical

Clear EfusePGood Fault on ICM and verify events
    [Tags]    ICM    EfusePGood    Clear Fault
    Clear EfusePGood Fault on ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectSystemPGoodFaultCleared
    ...                                  emRegistry.1.0.InterconnectEfusePGoodFaultCleared
    ...                                  emRegistry.1.0.InterconnectOk
    ...                                  emRegistry.1.0.InterconnectPowerRequestGranted
    ...                                  emRegistry.1.0.InterconnectPowerOn
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectSystemPGoodFaultCleared
    ...                                  hpris.emRegistry.1.0.InterconnectEfusePGoodFaultCleared
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Update ICM Data
    Verify ICM powerState is On
    Verify ICM state is Monitored
    Verify ICM status is OK

EfuseOn ICM and verify events
    [Tags]    ICM    EfuseOn
    Efuse On ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectRemoved
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectRemoved
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    2 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Verify Device Bay interconnectUri is ${None}
    Verify Device Bay powerAllocationWatts is ${None}
    Verify Device Bay serialConsole is ${None}
    Verify Device Bay serialNumber is ${None}

EfuseOff ICM and verify events
    [Tags]    ICM    EfuseOff
    Efuse Off ICM ${ICMBay}
    ${Expected_Events}    Create List    emRegistry.1.0.InterconnectInserted
    ...                                  emRegistry.1.0.InterconnectPowerOn
    ...                                  emRegistry.1.0.InterconnectPowerRequestGranted
    ...                                  emRegistry.1.0.InterconnectDiscoveryComplete
    ...                                  emRegistry.1.0.InterconnectOk
    Run Keyword and Continue on Failure
    ...    Validate RIS events    ${ICMBay}    ${Expected_Events}

    ${Expected_Alerts}    Create List    hpris.emRegistry.1.0.InterconnectInserted
    Run Keyword and Continue on Failure
    ...    Validate Activity Alerts    ${ICMBay}    ${Expected_Alerts}

    # Verify Interconnect and Enclosure Bay states
    Wait Until Keyword Succeeds    10 minutes    30 seconds
    ...    Update Device ${ICMBay} Data
    Update ICM Data
    Verify ICM powerState is On
    Verify ICM state is Monitored
    Verify ICM status is OK

*** Keywords ***

Inject ${FAULT} Fault on ICM ${Bay}
    EM Diags Fault Injection    ICMFaultInjection    ${Bay}    ${FAULT}    true
    Console    \nSleeping for ${EFuse_Sleep}.
    Sleep    ${EFuse_Sleep}

Clear ${FAULT} Fault on ICM ${Bay}
    EM Diags Fault Injection    ICMFaultInjection    ${Bay}    ${FAULT}    false
    Console    \nSleeping for ${EFuse_Sleep}.
    Sleep    ${EFuse_Sleep}

Efuse ${ON_OFF} ICM ${Bay}
    Perform RIS Action    EFuse${ON_OFF}    ${Bay}    InterconnectBays
    Console    \nSleeping for ${EFuse_Sleep}.
    Sleep    ${EFuse_Sleep}

Validate RIS events
    [Arguments]    ${Bay}    ${Expected Events}
    ${Event_List}    ${Last_EventID}=    EM Diags Get Audit Log Events
    ...    Starting_EventID=${Last_EventID}    Origin_Filter=.*Interconnect\/${Bay}.*
    EM Diags Print Audit Log Summary    ${Event_List}
    Console    \nLast event found: ${Last_EventId}

    :FOR    ${Event}    IN    @{Event_List}
    \    Log    ${Event['MessageID']}
    \    Remove Values From List    ${Expected_Events}    ${Event['MessageID']}
    Should Be Empty    ${Expected_Events}

Validate Activity Alerts
    [Arguments]    ${Bay}    ${Expected Events}
    ${Alert_list}    ${Last_AlertID}    Fusion Api Get Activity Alerts
    ...    Starting_AlertID=${${Last_AlertId}}    Resource_Filter=.*Interconnect\/${Bay}.*

    :FOR    ${Alert}    IN    @{Alert_List}
    \    Remove Values From List    ${Expected_Alerts}    ${Alert['alertTypeID']}
    Should Be Empty    ${Expected_Alerts}    Event(s) not found: ${Expected_Alerts}

Update Device ${Bay} Data
    ${DeviceInfo}    Fusion Api Get Device    BayNumber=${Bay}
    Print Device Info    ${DeviceInfo}
    Set Suite Variable    ${DeviceInfo}
    Should Match Regexp    ${DeviceInfo['changeState']}    (None|Remove)

Verify Device Bay ${field} is ${value}
    Run Keyword and Continue on Failure
    ...    Should Be Equal    ${DeviceInfo['${field}']}    ${value}  msg=Interconnect Bay ${ICMBay} ${field} is not '${value}'.

Update ICM Data
    ${ICM_UUID}=    Split String From Right    ${DeviceInfo['interconnectUri']}    /    1
    ${ICM}=    Fusion API Get Interconnect    /${ICM_UUID[1]}
    Set Suite Variable    ${ICM}


Verify ICM ${field} is ${value}
    Run Keyword and Continue on Failure
    ...    Should Be Equal    ${ICM['${field}']}    ${value}  msg=Interconnect ${ICMBay} ${field} is not '${value}'.

###############################################################################

Suite Setup
    Login to Fusion via REST
    Login to Fusion via SSH

    # Get EM Session ID
    Login to EM

    # Select Random ICM
    # ${ICMBay}=    Select Random Present Enclosure interconnectBays
    Set Suite Variable    ${ICMBay}    1
    Console    Running on ICM ${ICMBay}.

    # Find Last Audit Event IDs
    Run Keyword and Ignore Error    EM Diags Get Audit Log Events
    # Set Suite Variable    ${Last_EventID}     4-137    # Debug Code
    Console    Last ICM Event found: ${Last_EventID}
    Run Keyword and Ignore Error    Fusion Api Get Activity Alerts
    # Set Suite Variable    ${Last_AlertID}     156      # Debug Code
    Console    Last Alert found: ${Last_AlertID}

Suite Teardown
    Logout of Fusion via REST
    Logout of Fusion via SSH

###############################################################################

Perform RIS Action
    [Documentation]    Perform an efuse action on a ICM bay. Action = EFuseOff | EFuseOn
    [Arguments]    ${Action}    ${BayNumber}    ${Resource}=EnclosureManager
    ${Data}      Set Variable    {"Action":"${Action}"}
    ${Output}    Execute SSH Command
    ...    curl -ikX POST -H ${Auth_Header} --data-ascii '${data}' https://${EM_IP}%${fusion_nic}/rest/v1/${Resource}/${BayNumber}
    Should Contain    ${Output}    { "Action": "${Action}" }
    ...    msg=${Action} action failed \n${Output}

###############################################################################

EM Diags Get Audit Log Events
    [Documentation]    Fetch Diag Audit Log Events.
    ...    (Assumes an SSH connection with curl is currently open)
    ...    Returns a list of (dictionary) entries and EventID of the latest event encountered.
    [Arguments]    ${IP}=${EM_IP}    ${Nic}=${FUSION_NIC}
    ...            ${Origin_Filter}=/rest/v1    ${Starting_EventID}=0-0
    ...            ${Event_Filter}=${EMPTY}
    Set Suite Variable    ${Last_EventID}    ${Starting_EventID}
    ${ICM_Audit_Events_List}    Create List

    # Get the most recent entries from the audit (RIS events) log.
    ${Output}    Execute SSH Command
    ...       curl -ksS -H ${Auth_Header} https://${EM_IP}%${FUSION_NIC}/rest/v1/Diags/AuditLog/50${Event_Filter}
    # EfuseOn CLI prompt from buffer.  It messes up loads.
    ${Output}    String.Fetch From Left    ${Output}    [root@

    # Break the output into an (easier to handle) list of lines. One line per event.
    @{Lines}    Split To Lines    ${Output}
    : FOR    ${Line}    IN    @{Lines}
    \    # Reformat event/line (string) into a json dictionary
    \    ${Event}    json.loads    ${Line}

    \    # Select only the most recent events - skip any before that.
    \    ${EventID}    Get From Dictionary    ${Event}    EventID
    \    # Log To Console    Considering Event ${EventID}
    \    # EventID's are of the form n-nnn.  Only compare at the portion after the dash.
    \    ${tmpEventMajorID}        Fetch From Left    ${EventID}    -
    \    ${tmpEventID}             Fetch From Right    ${EventID}    -
    \    ${tmpStarting_EventMajorID}    Fetch From Left    ${Starting_EventID}    -
    \    ${tmpStarting_EventID}    Fetch From Right    ${Starting_EventID}    -
    \    Run Keyword If    ${100000 * ${tmpStarting_EventMajorID} + ${tmpStarting_EventID}} >= ${100000 * ${tmpEventMajorID} + ${tmpEventID}}    Continue For Loop

    \    # Remember the last EventID encountered
    \    ${tmpLast_EventMajorID}    Fetch From Left    ${Last_EventID}    -
    \    ${tmpLast_EventID}    Fetch From Right    ${Last_EventID}    -
    \    Run Keyword If    ${100000 * ${tmpEventMajorID} + ${tmpEventID}} >= ${100000 * ${tmpLast_EventMajorID} + ${tmpLast_EventID}}
    \    ...    Set Suite Variable    ${Last_EventID}    ${EventID}

    \    # Filter out any unrelated events (e.g., I'm only interested in ICM events)
    \    # Example: ${Origin_Filter} = '/rest/v1/ICMBays/${bayNumber}'
    \    ${OriginOfCondition}    Get From Dictionary    ${Event}    OriginOfCondition
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${OriginOfCondition}    ${Origin_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Add event (dictionary) into 'List of ICM Audit Events'
    \    Append to List    ${ICM_Audit_Events_list}    ${Event}
    [Return]    ${ICM_Audit_Events_List}    ${Last_EventID}

EM Diags Print Audit Log Summary
    [Documentation]    Print (on console) a brief summary of events in list.
    [Arguments]    ${ICM_Audit_Events_List}
    Console    \nICM Audit Log
    : FOR    ${Event}    IN        @{ICM_Audit_Events_List}
    \    ${EventID}      Get From Dictionary    ${Event}    EventID
    \    ${Origin}       Get From Dictionary    ${Event}    OriginOfCondition
    \    ${EventType}    Get From Dictionary    ${Event}    EventType
    \    ${MessageID}    Get From Dictionary    ${Event}    MessageID
    \    Console    ${EventID}\t${MessageID}\t${EventType}\t${Origin}

EM Diags Fault Injection
    [Documentation]    Inject faults. Where InjectionType is one of: FruFaultInjection,
    ...    EmSwitchFaultInjection, EmSwitchPortFaultInjection, BladeManagerFaultInjection,
    ...    CommFaultInjection, ICMFaultInjection, PSFaultInjection.
    ...    usage for ICMFaultInjection:
    ...    URI format: /rest/v1/Diags/ICMFaultInjection/<slotID>/<faultType>[/<bool>]
    ...    Where:
    ...      slotID    = Valid ICM slot number.
    ...      faultType = [MateDetect | EfusePGood]
    ...      bool      = true to inject fault, false to clear fault
    ...                    NOTE: Boolean is not valid for EFuse faultType.
    ...    usage for PSFaultInjection:
    ...    URI format: /rest/v1/Diags/PSFaultInjection/<slotID>/<faultType>/<bool>
    ...    Where:
    ...      slotID    = Valid Power Supply slot number.
    ...      faultType = [PS_OK | AC_OK ]
    ...      bool      = true to inject fault, false to clear fault
    [Arguments]    ${InjectionType}    ${slotID}    ${faultType}    ${inject}=''
    ${Output}    Execute SSH Command
    ...    curl -ksS -H ${Auth_Header} https://${EM_IP}%${fusion_nic}/rest/v1/Diags/${InjectionType}/${slotID}/${faultType}/${inject}
    Should Contain    ${Output}    successfully
    [Return]    ${Output}

###############################################################################

Fusion Api Get Activity Alerts
    [Documentation]    Fetch recent Fusion Activity Alerts
    ...    (Assumes a Fusion REST Api connection is open and logged in).
    ...    Returns a list of Alerts.
    [Arguments]    ${Starting_AlertID}=1    ${Resource_Filter}=.*
    ${Alert_List}    Create List
    # Get the entire list of Alerts
    ${Response}    Fusion Api Get Alerts    /rest/alerts?sort=created:ascending
    ${Count}    Get From Dictionary    ${Response}    count
    Return From Keyword If    '${Count}'=='0'    msg=No alert events found

    ${Members}    Get From Dictionary    ${Response}    members
    :FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Alert}    Get From List    ${Members}    ${Index}

    \    # Select only the most recent events - skip any before that
    \    ${uri}    Get From Dictionary    ${Alert}    uri
    \    ${id}     Fetch From Right    ${uri}    /
    \    Run Keyword If    ${Starting_AlertID}>=${id}    Continue For Loop

    \    # Remember the last Alert ID encountered
    \    Set Suite Variable    ${Last_AlertID}    ${id}

    \    # Filter out any unrelated alerts
    \    ${resourceID}    Get From Dictionary    ${Alert}    resourceID
    \    ${Found}    Run Keyword And Return Status
    \    ...    Should Match Regexp    ${resourceID}    ${Resource_Filter}
    \    Run Keyword If    '${Found}'=='False'    Continue For Loop

    \    # Include this alert into the 'List of Activity Events'
    \    Append to List    ${Alert_List}    ${Alert}
    Should Not Be Empty    ${Alert_List}    No Activity Events Found
    [Return]    ${Alert_List}    ${Last_AlertID}

Print Activity Event summary
    [Arguments]    ${Alert_List}
    :FOR    ${Alert}    IN    @{Alert_List}
    \    ${uri}            Get From Dictionary    ${Alert}    uri
    \    ${alertState}     Get From Dictionary    ${Alert}    alertState
    \    ${alertTypeID}    Get From Dictionary    ${Alert}    alertTypeID
    \    ${description}    Get From Dictionary    ${Alert}    description
    \    Console     \n${uri}\t${alertTypeID}\t${alertState}\t${description}

Print Device Info
    [Arguments]    ${DeviceInfo}
    # Print a nicely formatted copy on the console
    ${NicelyFormattedJsonString}    json.dumps    ${DeviceInfo}    indent=${4}    sort_keys=${True}
    Console    \nDevice Info\n${NicelyFormattedJsonString}

Login To EM
    ${EM_IP}    ${ICMSessionID}=    EM Api Create Session
    Set Suite Variable    ${Auth_Header}    "X-Auth-Token":"${ICMSessionID}"

Fusion Api Get Device
    [Documentation]    Get a specific device from the enclosure information
    [Arguments]    ${DeviceType}=interconnectBays    ${BayNumber}=1
    ${Response}    Fusion Api Get Enclosures
    ${Status}      Get From Dictionary    ${Response}    status_code
    Should be Equal     ${Status}    ${200}    msg=Get Enclosures failed ${Response}

    # Make sure we get (more than zero) enclosures listed
    ${Count}       Get From Dictionary    ${Response}    count
    Run Keyword If    '${Count}'=='0'    Fatal Error    msg=No enclosures found

    # Fetch a pointer to the first enclosure - Member0
    ${Members}     Get From Dictionary    ${Response}    members
    ${Member0}     Get From List          ${Members}      0

    # Extract selected device bay information
    ${DeviceBays}        Get From Dictionary    ${Member0}      ${DeviceType}
    ${BayIndex}     Evaluate    ${BayNumber}-1
    ${DeviceInfo}    Get From List    ${DeviceBays}    ${BayIndex}
    [Return]    ${DeviceInfo}
