*** Settings ***
Documentation   Verify Enclosure and Enclosure devices have been successfully claimed -- US39905 Tools: QMAT enc, blade & ICM import verification
...             and imported into HP OneView
...             = USAGE =
...             | pybot | -L DEBUG | -v ENCLOSURE:tesla | api_verify_enclosure.txt |
...             = Variables =
...             | ENCLOSURE     | Required; Enclosure name to run on (dcs, tesla, etc) |
...             | BroncoIndex     | Optional; Blade where bronco card resides |

Library         RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library         FusionLibrary                # DVTs Fusion extensions
Library         String
Variables       ../resources/variables.py   ${ENCLOSURE}
Resource        ../resources/fusion_api.txt  # AM-DVT Fusion API extensions
Resource        ../resources/perm_api.txt    # AM-DVT PERM API extensions
Resource        ../resources/fusion_ssh.txt
Resource        ../resources/enclosure_info.txt
Resource        ../resources/defaults.txt
Force Tags      API  HW

Suite Setup     Run Keywords
...   		Login to Fusion Via REST
...		    Login to Fusion Via SSH
...		    EM Api Create Session
Suite Teardown      Logout of Fusion Via REST


*** Variables ***


*** Test Cases ***
Sleeping to allow Enclosure to claim
    [Tags]    Sleep
    #adding a sleep just to give the interconnect more time to come in
    Sleep    720

Verify Enclosure is claimed
    [Tags]    Claimed  DCS
    Verify Claimed EM

Verify Tbird Enclosure is imported into OneView
    [Tags]    Enclosure    Added  DCS
    Wait Until Keyword Succeeds    5 minutes    1 minute    Get Enclosure Info

    # Verify Status
    ${passed}=    Run Keyword and Return Status
    ...    Should Be Equal As Strings    OK    ${Enclosure['status']}
    Run Keyword If    ${passed}==${False}
    ...    Log    Enclousure status is not OK (${Enclosure['status']}).    level=WARN

    # Verify State
    ${passed}=    Run Keyword and Return Status
    ...    Should Be Equal As Strings    Monitored    ${Enclosure['state']}
    Run Keyword If    ${passed}==${False}
    ...    Log    Enclosure state is not Monitored (${Enclosure['state']}).    level=WARN

Verify Enclosure Managers
    [Tags]    EM  DCS
    ${count}=    Get Enclosure managerBays Count
    Should Be Equal as Integers    ${count}    2    msg=Failed to verify 2 EM bays.

    ${present}=    Get Present Enclosure managerBays List
    ${present count}=    Get Length    ${present}
    Run Keyword If    "${present count}"!="2"    Log    Failed to verify 2 EMs present.    level=WARN

Verify ApplianceBays
    [Tags]    CIM  DCS

    ${count}=    Get Enclosure applianceBays Count
    Should Be Equal as Integers    ${count}    2    msg=Failed to verify 2 CIM bays.

    ${present}=    Get Present Enclosure applianceBays List
    ${present count}=    Get Length    ${present}
    Run Keyword If    "${present count}"!="2"    Log    Failed to verify 2 CIMs present.    level=WARN

Verify PowerBays
    [Tags]    PowerSupply  DCS
    ${count}=    Get Enclosure powerSupplyBays Count
    Should Be Equal as Integers    ${count}    6    msg=Failed to verify 6 Power Supply bays.

    ${present}=    Get Present Enclosure powerSupplyBays List
    ${present count}=    Get Length    ${present}
    Run Keyword If    "${present count}"!="3"    Log    Failed to verify 3 Power Supplies present.    level=WARN

Verify FanBays
    [Tags]    Fan  DCS
    ${count}=    Get Enclosure fanBays Count
    Should Be Equal as Integers    ${count}    10    msg=Failed to verify 10 Fan bays.

    ${present}=    Get Present Enclosure fanBays List
    ${present count}=    Get Length    ${present}
    Run Keyword If    "${present count}"!="10"    Log    Failed to verify 10 Fans present.    level=WARN

Verify Server Hardware is imported to OneView
    [Tags]    SH
    ${Response}=    Fusion API Get Server Hardware
    Log Formatted Dictionary    ${Response}
    # Verify BLADE DATA is available in variables.py
    Variable Should Exist    ${BLADE DATA}    msg='BLADE DATA' not found in variables.py for enclosure '${ENCLOSURE}'.
    # Get Expected Blade information
    ${Expected Blades}=    Get Dictionary Keys    ${BLADE DATA}
    ${Number of Expected Blades}=    Get Length    ${BLADE DATA}
    Log    ${BLADE DATA}
    # Verify Number of blades
    #Should Be Equal    ${Number of Expected Blades}    ${Response['total']}    msg=Failed to verify number of available server hardware. ${Number of Expected Blades} server hardware were expected.
    :FOR     ${index}    IN RANGE    0    ${Response['total']}
    \    ${Server Hardware}=    Set Variable    ${Response['members'][${index}]}
    \    Log Formatted Dictionary    ${Server Hardware}
    \    # Verify blade exists in expected data (BLADE DATA)
    \    ${position}=    Convert To String    ${Server Hardware['position']}
    \    Dictionary Should Contain Key    ${BLADE DATA}    ${position}
    \    # Verify PowerState
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    On    ${Server Hardware['powerState']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Server Hardware ${position} power state is not On (${Server Hardware['powerState']}).    level=WARN
    \    # Verify Status
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    OK    ${Server Hardware['status']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Server Hardware ${position} status is not OK (${Server Hardware['status']}).    level=WARN
    \    # Verify State
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    Monitored    ${Server Hardware['state']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Server Hardware ${position} state is not Monitored (${Server Hardware['state']}).    level=WARN
    \    # Retrieve Mezz Info from Server Hardware
    \    ${portMap}=    Set Variable    ${Server Hardware['portMap']}
    \    Log Formatted Dictionary    ${portMap}
    \    ${deviceSlots}=    Get From Dictionary     ${portMap}    deviceSlots
    \    Log Formatted Dictionary    ${deviceSlots}
    #    Fetch all the Mezz Slot info
    \    ${deviceNameMezz1}=    Set Variable    ${deviceSlots[0]['deviceName']}
    \    ${slotNumberMezz1}=    Set Variable    ${deviceSlots[0]['slotNumber']}
    \    ${deviceNameMezz2}=    Set Variable    ${deviceSlots[1]['deviceName']}
    \    ${slotNumberMezz2}=    Set Variable    ${deviceSlots[1]['slotNumber']}
    \    ${deviceNameMezz3}=    Set Variable    ${deviceSlots[2]['deviceName']}
    \    ${slotNumberMezz3}=    Set Variable    ${deviceSlots[2]['slotNumber']}
    \    #  Expected Mezz Cards
    \    Log    Expected Mezz cards from variables.py
    \    Log    ${BLADE DATA['${position}']['MEZZ_1']}
    \    Log    ${BLADE DATA['${position}']['MEZZ_2']}
    \    Log    ${BLADE DATA['${position}']['MEZZ_3']}
    \    #   Server Hardware Says
    \    Log Many  Returned from Server Hardware
    \    Log Many   ${deviceNameMezz1}    ${slotNumberMezz1}
    \    Log Many   ${deviceNameMezz2}    ${slotNumberMezz2}
    \    Log Many   ${deviceNameMezz3}    ${slotNumberMezz3}
    \    #  Now Verify the expected mezz card
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    ${deviceNameMezz1}    ${BLADE DATA['${position}']['MEZZ_1']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Expected card in Blade ${position} MEZZ_1 not found.    level=WARN
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    ${deviceNameMezz2}    ${BLADE DATA['${position}']['MEZZ_2']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Expected card in Blade ${position} MEZZ_2 not found.    level=WARN
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    ${deviceNameMezz3}    ${BLADE DATA['${position}']['MEZZ_3']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Expected card in Blade ${position} MEZZ_3 not found.    level=WARN
    \    # Remove verified blade
    \    Remove Values From List    ${Expected Blades}    ${position}
    \    Log List    ${Expected Blades}
    Should Be Empty    ${Expected Blades}    msg=Some expected blades were not verified on the system.

Verify Interconnects are imported to OneView
    [Tags]     ICM
    ${Response}=    Fusion Api Get Interconnect
    Log Formatted Dictionary    ${Response}

    # Verify INTERCONNECT DATA is available in variables.py
    Variable Should Exist    ${INTERCONNECT DATA}    msg='INTERCONNECT DATA' not found in variables.py for enclosure '${ENCLOSURE}'.

    # Get Expected Interconnect information
    ${Expected Interconnects}=    Get Dictionary Keys    ${INTERCONNECT DATA}
    ${Number of Expected Interconnects}=    Get Length    ${INTERCONNECT DATA}

    # Verify Number of Interconnects
    Should Be Equal    ${Number of Expected Interconnects}    ${Response['total']}    msg=Failed to verify number of available Interconnects. ${Number of Expected Interconnects} Interconnects were expected.

    :FOR     ${index}    IN RANGE    0    ${Response['total']}
    \    ${Interconnect}=    Set Variable    ${Response['members'][${index}]}
    \    Log Formatted Dictionary    ${Interconnect}
    \
    \    # Verify interconnect exists in expected data (INTERCONNECT DATA)
    \    ${position}=    Get Substring    ${Interconnect['name']}    -1
    \    Dictionary Should Contain Key    ${INTERCONNECT DATA}    ${position}
    \
    \    # Verify PowerState
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    On    ${Interconnect['powerState']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Interconnect ${position} power state is not On (${Interconnect['powerState']}).    level=WARN
    \
    \    # Verify Status
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    OK    ${Interconnect['status']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Interconnect ${position} status is not OK (${Interconnect['status']}).    level=WARN
    \
    \    # Verify State
    \    ${passed}=    Run Keyword and Return Status
    \    ...    Should Be Equal As Strings    Monitored    ${Interconnect['state']}
    \    Run Keyword If    ${passed}==${False}
    \    ...    Log    Interconnect ${position} state is not Monitored (${Interconnect['state']}).    level=WARN
    \
    \    # Remove verified interconnect
    \    Remove Values From List    ${Expected Interconnects}    ${position}
    \    Log List    ${Expected Interconnects}


    # Verify all expected interconnects were verified.
    Should Be Empty    ${Expected Interconnects}    msg=Some expected interconnects were not verified on the system.

*** Keywords ***
Log Formatted Dictionary
    [Arguments]    ${Dictionary}
    ${NicelyFormattedJsonString}=    dumps    ${Dictionary}    indent=${4}    sort_keys=${True}
    Log                 ${NicelyFormattedJsonString}

Get Enclosure Info
    ${Response}=      Fusion Api Get Enclosures
    Log    ${Response}
    ${Enclosures}=    Get From Dictionary   ${Response}     members
    ${Enclosure}=        Get From List  ${Enclosures}      0
    ${EncList}=    Get Length    ${Enclosures}
    Should Be Equal As Numbers    ${EncList}    1
    Run Keyword If    ${EncList}!=1
    ...    Log    Incorrect count for: ${el_name}.    level=WARN

    # Preserve Enclosure for later use
    Set Suite Variable       ${Enclosure}

    # Check if Enclosure is still adding.
    Should Not Be Equal As Strings    Adding     ${Enclosure['state']}    msg=Enclosure is still 'Adding'.
    Should Not Be Equal As Strings    Unknown    ${Enclosure['state']}    msg=Enclosure state is 'Unknown'.
