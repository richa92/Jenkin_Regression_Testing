*** Settings ***
Documentation     Common Atlas Test Source
...   This file contains common high level keywords or functions for all CI-Manager tests

Library           OperatingSystem
Library           FusionLibrary
Library           RoboGalaxyLibrary
Library           BuiltIn
Library           Collections
Library           String
Library           SSHLibrary
Library           RoboGalaxyLibrary\\utilitylib\\file_utils.py

*** Variables ***
${Browser}              Firefox
${SeleniumSpeed}        0.1
#${DataFile}             C:/Repository/17Oct2016/fusion/tests/cim/ui/TestData/CIM_TestData.xml
#${ApplianceUrl}         https://15.199.248.134
${DataFile}             ../TestData/CIM_TestData.xml
${ApplianceUrl}         https://15.199.248.6
${delimiter}            :/
${blnExpected}          True
${status}               None
${activityCount}        1
#Add the download path in prefs file 'user_pref("browser.download.dir",'C:\\tmp');'
#'C:\Python27\Lib\site-packages\robotframework_selenium2library-1.7.4-py2.7.egg\Selenium2Library\resources\firefoxprofile'
${DownloadPath}         C:/tmp

*** Keywords ***
Load test data and open browser
      Set Log Level     TRACE
      Load All Test Data
      Log Variables
      Open Browser      ${ApplianceUrl}   ${Browser}
      Set Selenium Speed      ${SeleniumSpeed}

Load All Test Data
      Load Test Data  ${DataFile}

Logout and close all browsers
      Fusion UI Logout Of Appliance
      Close all browsers

Log into Fusion appliance as Administrator
      ${user} =   Get data by property  ${TestData.users}   name  Administrator
      Fusion UI Login To Appliance  ${user[0].name}

Log out of Fusion appliance
      Fusion UI Logout Of Appliance

Open Fusion Main Menu
      Element Should Be Visible     ${FusionBasePage.ID_MAIN_MENU_CONTROL}
      Click Element     ${FusionBasePage.ID_MAIN_MENU_CONTROL}
      wait for element visible      ${FusionBasePage.ID_MENU_LINK_ACTIVITY}

Download and unzip Audit log file
      [Arguments]       ${DownloadPath}
      [Return]          ${auditlogfilepath}
      Create Folder If not Exists    ${DownloadPath}
      Fusion UI Download Audit Logs    ${DownloadPath}
      Sleep    5
      ${logfiles} =     OperatingSystem.List Files In Directory       ${DownloadPath}         *.zip
      ${logfile} =      Get From List     ${logfiles}    0
      ${unzipfilepath} =      Set Variable      ${DownloadPath}/${logfile}

      #Unzip audit log file
      unzip    ${unzipfilepath}    ${DownloadPath}
      ${auditlogfiles} =      OperatingSystem.List Files In Directory    ${DownloadPath}    *.log
      ${auditlogfile} =    Get From List     ${auditlogfiles}    0
      ${auditlogfilepath} =   Set Variable      ${DownloadPath}/${auditlogfile}

Search entry in audit log file
      [Arguments]       ${auditlogfilepath}     ${searchtext}
      ${bln_logentry_exists} =    file_contains    ${auditlogfilepath}    ${searchtext}
      Should Be Equal As Strings    ${bln_logentry_exists}  ${blnExpected}    msg=Entry ${searchtext} not available in log file.

Download and verify entry in Audit log file
      [Arguments]       ${DownloadPath}    ${searchtext}
      ${filepath}=      Download and unzip Audit log file   ${DownloadPath}
      Search entry in audit log file      ${filepath}    ${searchtext}

Create Folder If not Exists
      [Arguments]       ${DownloadPath}
      ${splitpath}=     Split String      ${DownloadPath}   ${delimiter}
      ${folder}=  Get From List     ${splitpath}      1
      ${value}=    OperatingSystem.List Directories in Directory    C:/
      ${location}=      Get Index From List     ${value}    ${folder}
      Run Keyword If    ${location} == -1    Create Directory    ${DownloadPath}
      Run Keyword If    ${location} > 0    Empty Directory    ${DownloadPath}

Execute Command on Remote VM
      [Arguments]    ${ApplianceIP}    ${USERNAME}    ${PASSWORD}    ${COMMAND}
      [Return]          ${output}
      Open Connection    ${ApplianceIP}
      Login    ${USERNAME}    ${PASSWORD}
      ${output}=    Execute Command    ${COMMAND}
      Log         ${output}
      Close All Connections

Select File To Upload
      [Arguments]       ${BrowseButtonLocator}  ${FilePath}
      ${TAB}=     Set Variable      {TAB}
      ${ENTER}=   Set Variable      {ENTER}
      ${BrowserUppercase}=    Convert To Uppercase    ${Browser}
      ${Title} =  Create Dictionary FIREFOX=File Upload     CHROME=Open INTERNET EXPLORER=Choose File to Upload
      ${WindowTitle} =  Get From Dictionary     ${Title}    ${BrowserUppercase}
      wait for element and click    ${BrowseButtonLocator}
      Sleep    5
      send keys to native window    ${WindowTitle}    ${TAB}+${FilePath}+${ENTER}

Cleanup Alert After Test
      ${Status}=  Fusion UI Delete Alert Filter @{TestData.alerts}
      Fusion UI Logout of Appliance
      Close All Browsers

Does hostname resolve to IP address?
    [Arguments]    ${Host_Name}    ${IP}
    [Return]    ${Status}
    ${output}=    Run    nslookup ${Host_Name}
    ${IP_1}=    Fetch From Right    ${output}    ${SPACE}
    ${IP_1}=    Get Line    ${IP_1}    0    #To remove newline character.
    Log    ${IP_1}    WARN
    ${Status}=    Set Variable If    '${IP}'=='${IP_1}'    TRUE    FALSE

Get Appliance IP
    [Arguments]    ${ESX_Host_Name}    ${ESX_Host_Username}    ${ESX_Host_Password}    ${VM_Path}
    [Return]    ${Appliance_IP}
    ${command}=    Catenate    vmware-cmd    ${VM_Path}    getguestinfo    ip
    ${output}=    Execute Command on Remote VM    ${ESX_Host_Name}    ${ESX_Host_Username}    ${ESX_Host_Password}    ${command}
    ${Appliance_IP}=    Fetch From Right    ${output}    ${SPACE}

Should contain string ignorecase
    [Documentation]    Match two strings ignoring the case of both strings
    [Arguments]    ${String1}    ${String2}
    ${String1} =    Convert To Uppercase    ${String1}
    ${String2} =    Convert To Uppercase    ${String2}
    Should Contain    ${String1}    ${String2}

Get appliance ip from url
    [Documentation]    To fetch the IP address from the browser url
    [Return]    ${IP}
    ${IP}=    Fetch From Right    ${ApplianceUrl}    //

Navigate to
    [Documentation]    Navigates to a specified page from main menu. From the page, navigates to the specified panel. Both ${Page} and ${Panel} are optional.
    [Arguments]    ${Page}    ${Panel}
    Run Keyword If    '${Page}'!='--'    Navigate to page    ${Page}
    Run Keyword If    '${Panel}'!='--'    Navigate to panel    ${Panel}

Navigate to page
    [Documentation]    Navigates to the specified page
    [Arguments]    ${Page}
    wait for element and click    ${FusionBasePage.ID_MAIN_MENU_CONTROL}
    wait for element and click    //div[@id='hp-main-menu']//a[text()='${Page}']    10
    ${Page_Loaded_Successfully}=    Wait until the following page is loaded    ${Page}    10
    Run Keyword If    '${Page_Loaded_Successfully}'=='PASS'    Log    Navigation to '${Page}' page was successful.    WARN
    Run Keyword If    '${Page_Loaded_Successfully}'=='FAIL'    Log    Navigation to '${Page}' page was unsuccessful!    WARN

Navigate to panel
    [Documentation]    Navigates to the specified panel
    [Arguments]    ${Panel}
    wait for element and click    //div[contains(@class, 'hp-panel-contents-container')]//header//*[contains(text(), '${Panel}')]    10
    ${Page_Loaded_Successfully}=    Wait until the following page is loaded    ${Panel}    10
    Run Keyword If    '${Page_Loaded_Successfully}'=='PASS'    Log    Navigation to '${Panel}' panel was successful.    WARN
    Run Keyword If    '${Page_Loaded_Successfully}'=='FAIL'    Log    Navigation to '${Panel}' panel was unsuccessful!    WARN

Wait until the following page is loaded
    [Documentation]    Waits until the specified page is loaded successfully. If page is not loaded before timeout, this keyword fails.
    [Arguments]    ${Page}    ${Timeout}
    Wait Until Keyword Succeeds    ${Timeout} sec    1 sec    Assert that the following page is loaded    ${Page}

Assert that the following page is loaded
    [Documentation]    Passes if the specified page is displayed. Fails otherwise.
    [Arguments]    ${Page}
    ${Page_Label}=    Get current page label
    Run Keyword If    '${Page}'!='${Page_Label}'    Fail    ${Page} page is not loaded.

Get current page label
    [Documentation]    Returns the label of the currently displayed page
    [Return]    ${Pagename}
    ${pass_or_fail}    ${return_value_or_error_message}=    Run Keyword And Ignore Error    Wait Until Element Is Visible    //div[contains(@class, 'hp-page-label')]//h1//span    0.1
    ${Pagename}=    Run Keyword And Return If    '${pass_or_fail}'=='PASS'    Get Text    //div[contains(@class, 'hp-page-label')]//h1//span
    ${pass_or_fail}    ${return_value_or_error_message}=    Run Keyword And Ignore Error    Wait Until Element Is Visible    //div[contains(@class, 'hp-page-label')]//h1    0.1
    ${Pagename}=    Run Keyword And Return If    '${pass_or_fail}'=='PASS'    Get Text    //div[contains(@class, 'hp-page-label')]//h1

Select action
    [Documentation]    Select an action from Actions menu
    [Arguments]    ${ActionName}
    wait for element and click    //label[text()='Actions']    10
    wait for element and click    //*[contains(@class, 'hp-details-actions')]//*[contains(@class, 'hp-options')]//*[text()='${ActionName}']    10

File Exists In Remote Machine
    [Arguments]    ${ostype}    ${ipaddress}    ${username}    ${password}    ${directory}    ${filename}
    Run Keyword If     '${ostype}'=='Windows'    File Exists In Windows Remote Machine    ${ipaddress}
    ...    ${username}    ${password}    ${directory}    ${filename}
    ...    ELSE IF    '${ostype}'=='Linux'    File Exists In Linux Remote Machine    ${ipaddress}
    ...    ${username}    ${password}    ${directory}    ${filename}

File Exists In Windows Remote Machine
    [Arguments]    ${ipaddress}    ${username}    ${password}    ${directory}    ${filename}
    Run    net use w: \\${ipaddress}\c$\Backup /user:${username} ${password}
    ${file} =    Catenate    SEPARATOR=\\    w:    ${directory}    ${filename}
    OperatingSystem.Wait Until Created    ${file}    30
    Run    net use w: /delete

File Exists In Linux Remote Machine
    [Arguments]    ${ipaddress}    ${username}    ${password}    ${directory}    ${filename}
    Open Connection    ${ipaddress}
    Login    ${username}    ${password}
    File Should Exist    ${directory}/${filename}
    Close All Connections

Verify file or directory exists
    [Documentation]    Verifies if file or directory exists. If file or directory exists, returns YES.
    [Arguments]    ${Path}    ${TimeOut}
    [Return]    ${Does_File_Or_Directory_Exist}
    ${Does_File_Or_Directory_Exist}    ${return_value_or_error_message}=    Run Keyword And Ignore Error    Wait Until Created    ${Path}    ${TimeOut}
    ${Does_File_Or_Directory_Exist}=    Set Variable If    '${Does_File_Or_Directory_Exist}'=='PASS'    YES    NO

Get elapsed time in seconds_millis
    [Arguments]    ${Start_Time}    ${End_Time}
    [Return]    ${Elapsed_Time_In_Seconds_Millis}
    ${Elapsed_Time}=    Subtract Date From Date    ${End_Time}    ${Start_Time}
    ${Elapsed_Time_In_Seconds_Millis}=    Convert Time    ${Elapsed_Time}

Reboot appliance
    [Arguments]    ${ip}    ${username}    ${password}
    ${command}=    Set Variable    shutdown -r now
    Execute Command on Remote VM    ${ip}    ${username}    ${password}    ${command}
    Log    Reboot initiated.    WARN

Validate Staging Folder
    [DOcumentation]    Validate what files are saved in staging folder
    [Arguments]    ${ApplianceIP}  ${USERNAME}  ${PASSWORD}  ${COMMAND1}   ${fileextention}
    ${result}=  Execute Command on Remote VM  ${ApplianceIP}  ${USERNAME}  ${PASSWORD}  ${COMMAND1}
    ${ext}=    Fetch From Left   ${result}    \n
    ${ext}=    Split String    ${ext}    .
    Log  ${ext[${-1}]}
    Run Keyword If  '${ext[${-1}]}'=='${fileextention}'   Log    Latest Created File is saved in the backup staging folder
    Run Keyword Unless  '${ext[${-1}]}'=='${fileextention}'   Fail   Latest Created File is not saved in the folder

Get Appliance Execution State
    [Arguments]    ${ESX_Host_Name}    ${ESX_Host_Username}    ${ESX_Host_Password}    ${VM_Path}
    [Return]    ${State}
    ${command} =    Catenate    vmware-cmd    ${VM_Path}    getstate
    ${output} =    Execute Command on Remote VM    ${ESX_Host_Name}    ${ESX_Host_Username}    ${ESX_Host_Password}    ${command}
    ${State} =    Fetch From Right    ${output}    ${SPACE}

Initiate Startup
    ${ESX_Host_Name} =    Set Variable    ${TestData.FullFactoryReset[0].name}
    ${ESX_Host_Username} =    Set Variable    ${TestData.FullFactoryReset[0].username}
    ${ESX_Host_Password} =    Set Variable    ${TestData.FullFactoryReset[0].password}
    ${VM_Path} =    Set Variable    ${TestData.FullFactoryReset[0].vmname}
    ${command} =    Catenate    vmware-cmd    ${VM_Path}    start
    ${output} =    Execute Command on Remote VM    ${ESX_Host_Name}    ${ESX_Host_Username}    ${ESX_Host_Password}    ${command}
    Log    ${output}    WARN
    Log    Appliance startup initiated    WARN

Remove focus from active element
    Execute Javascript    document.activeElement.blur();

Scroll element into view
    [Arguments]    ${Locator_Type}    ${Locator}
    Wait Until Keyword Succeeds    60 sec    5 sec    Assert that scroll element into view is successful    ${Locator_Type}    ${Locator}

Assert that scroll element into view is successful
    [Arguments]    ${Locator_Type}    ${Locator}
    Wait Until Page Contains Element    ${Locator}    1
    Run Keyword If    '${Locator_Type}'=='ID'    Execute Javascript    window.document.getElementById("${Locator}").scrollIntoView(false);
    Run Keyword If    '${Locator_Type}'=='XPATH'    Execute JavaScript     window.document.evaluate("${Locator}", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.scrollIntoView(false);
    Wait Until Element Is Visible    ${Locator}    1

Login as Directory User
    [Arguments]    ${DomainName}    ${UserName}    ${Password}
    Wait Until Page Contains Element    ${FusionLoginPage.ID_BTN_LOGIN_BUTTON}
    Input text    ${FusionLoginPage.ID_INPUT_LOGIN_USER}    ${UserName}
    Input text    ${FusionLoginPage.ID_INPUT_LOGIN_PASSWORD}    ${Password}
    Click Element    ${FusionLoginPage.ID_COMBO_AUTHN_PROVIDER}
    ${domain} =    Get UI Object    ${FusionLoginPage.ID_ELEMENT_DIR}    ${DomainName}
    wait for element and click    ${domain}
    wait for element and click    ${FusionLoginPage.ID_BTN_LOGIN_BUTTON}    ${PerfConstants.SUCCESS_TIME}
    Verify logged in user    ${UserName}    ${DomainName}

Verify logged in user
    [Arguments]    ${UserName}    ${DomainName}
    Wait for element visible    //*[@id='hp-main-menu-control']    10
    Wait for Element and click    //*[@id='hp-session-control']    ${PerfConstants.SUCCESS_TIME}
    ${text} =    Get Text    //*[@id='hp-session-flyout']
    ${userinfo}    ${error_msg} =    Run Keyword And Ignore Error  Should contain    ${text}    ${DomainName}\\${UserName}
    Run Keyword If    '${userinfo}' == 'PASS'    Log    Directory user logged into the appliance successfully
    Run Keyword Unless    '${userinfo}' == 'PASS'    Fail    Failed to log into appliance as directory user