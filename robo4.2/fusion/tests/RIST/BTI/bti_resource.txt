*** Settings ***
Documentation       Keywords and variables for UPT
Library             BuiltIn
Library             Collections
Library             DateTime
Library             Dialogs
Library             FusionLibrary
Library             json
Library             OperatingSystem
Library             RoboGalaxyLibrary
Library             robot.api.logger
Library             SSHLibrary
Library             String
Library             XML
Library             BTIHelpers.py
Resource            ../../../Resources/api/fusion_api_resource.txt

*** Variables ***
${SUITE_LOG_LEVEL}                  TRACE

# Fusion defaults
${FUSION_USERNAME}                  Administrator
${FUSION_PASSWORD}                  wpsthpvse1
${FUSION_IP}                        ${APPLIANCE_IP}
${FUSION_SSH_USERNAME}              root
${FUSION_SSH_PASSWORD}              hpvse1
${FUSION_PROMPT}                    \#
${FUSION_TIMEOUT}                   60
${FUSION_NIC}                       bond0
${FUSION_NIC_SUFFIX}                \%${FUSION_NIC}

*** Keywords ***
Appliance State Should Match
    [Documentation]  Appliance State Should Match
    [Arguments]  ${expected_state}
    ${state}=  Get Appliance State
    Should Match Regexp   ${state}  ${expected_state}

Check Appliance Software Version
    [Documentation]  Check if the appliance software version match the build number
    [Arguments]  ${build}
    ${resp}=  Fusion Api Get Appliance Version
    Run Keyword If  '${resp['softwareVersion']}'!='${build}'  Fail  msg=Appliance version does not match ${build}

Create LE Support Dump
    [Documentation]    Creates LE support dump in a bactch one after the other on one view appliance. Input is a list of dictionary for various users to create.
    [Arguments]      ${LE_support_dump}     ${le_id}   ${VERIFY}=${FALSE}
    ${resp} =     fusion api get logical enclosure support dump    ${LE_support_dump}     ${le_id}
    ${status}  ${task_uri} =  Run Keyword and Ignore Error  Get From Dictionary  ${resp['headers']}  location
    Run keyword if    '${VERIFY}'=='True'     Should Be Equal    '${resp['status_code']}'   '200'    msg=Verification of status_code in create support dumps response body has FAILED    values=False
    Run keyword if    '${VERIFY}'=='True' and '${resp['status_code']}' == '200'    Should Not Be Empty    ${task_uri}    msg=Verification of uri in create support dumps response body has FAILED
    Return From Keyword    ${task_uri}

Create Support name and location
    [Documentation]    Create Support Dump Location
    [Arguments]     ${LOG_DIR}    ${sd_type}   ${VERIFY}=${FALSE}
    ${sd_name} =    Get Time
    ${sd_name} =    Catenate    SEPARATOR=-    ${sd_name}     ${sd_type}
    ${sd_name} =    Catenate    SEPARATOR=.    ${sd_name}    sdmp
    ${sd_name} =    Replace String Using Regexp    ${sd_name}    ( |:)    _
    ${sd_name} =    Catenate    SEPARATOR=/    ${LOG_DIR}    ${sd_name}
    Log    sd_name:${sd_name}   console=True
    [Return]    ${sd_name}

Get Appliance State
    [Documentation]  Get Appliance State
    ${resp}=  Fusion Api Get Resource  /controller-state.json
    [Return]  ${resp['state']}

Get All Interconnects Ports Status
    [Documentation]  Get All Interconnects Ports Status
    ${count} =  set variable  ${0}
    :FOR  ${enc}  IN  @{enclosures_attributes}
    \    ${ics} =  Get From Dictionary  ${enc}  interconnects
    \    ${crit_ports} =  Get Interconnects Ports Status  ${ics}
    \    ${count} =  Evaluate  ${count}+${crit_ports}
    [Return]  ${count}

Get Interconnects Ports Status
    [Documentation]  Get Interconnects Ports Status
    [Arguments]  ${intconnects}
    ${count} =  set variable  ${0}
    :FOR  ${ic}  IN  @{intconnects}
    \    ${crit_ports} =  get_interconnect_port_status  ${ic}
    \    ${count} =  Evaluate  ${count}+${crit_ports}
    [Return]  ${count}

Get Resources Alerts
    [Documentation]  Get resources alerts
    [Arguments]  ${resources}  ${severity}=Critical
    ${count} =  set variable  ${0}
    :FOR  ${resource}  IN  @{resources}
    \    ${alerts} =  Get All Alerts By Param   param=?filter="resourceName EQ '${resource['name']}' AND severity EQ '${severity}' AND ( alertState EQ 'Active' OR alertState EQ 'Locked' )"&sort=created:descending&count=1
    \    ${count} =  evaluate  ${count} + ${alerts['count']}
    \    Run Keyword if  ${alerts['count']}!=0  Log  \n${severity} alerts for ${resource['type']} ${resource['name']}
    \    Run Keyword if  ${alerts['count']}!=0  Log Alerts  ${alerts['members']}
    [Return]  ${count}

Log Alerts
    [Documentation]  Log alerts
    [Arguments]  ${alerts}
    :FOR  ${alert}  IN  @{alerts}
    \    Log  \n${alert['uri']} ${alert['description']}  ERROR

Suite Setup
    [Documentation]  Suite Setup
    Set Log Level  ${SUITE_LOG_LEVEL}
    ${resp}=  Fusion Api Login Appliance  ${appliance_ip}  ${admin_credentials}

Suite Teardown
    [Documentation]  Suite Teardown
    Fusion Api Logout Appliance




