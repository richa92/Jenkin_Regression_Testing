*** Settings ***
Resource        resource.txt

*** Keywords ***
Create Variable File
    [Documentation]  Get resources off list of valid names; Parse data needed for variable file; Write them to variable file
    ...              choose from [users, san_managers, appliance, licenses, ethernet_networks, fc_networks, fcoenets, networksets, storage_systems_with_pools, storage_pools_toedit, storage_volume_templates, storage_volumes, sas_lig, ligs, encgroups_add, logical_enclosure, enclosures, server_profile_templates, profiles (more supported ones will be added soon)]
    [Arguments]    ${variable_filename}  ${ResourcesList}=${AllResourcesCommonList}  ${resume}=${False}   ${timelocale-SelectDataFile}=${timelocale-SelectDataFile}    ${app-network-SelectDataFile}=${app-network-SelectDataFile}   ${licenses-SelectDataFile}=${licenses-SelectDataFile}   ${user-SelectDataFile}=${user-SelectDataFile}   ${san-man-SelectDataFile}=${san-man-SelectDataFile}   ${ethNetsSelectDataFile}=${ethNetsSelectDataFile}   ${fcNetsSelectDataFile}=${fcNetsSelectDataFile}   ${fcoeNetsSelectDataFile}=${fcoeNetsSelectDataFile}   ${networksetSelectDataFile}=${networksetSelectDataFile}   ${ligSelectDataFile}=${ligSelectDataFile}   ${sasLigSelectDataFile}=${sasLigSelectDataFile}   ${encGrpSelectDataFile}=${encGrpSelectDataFile}   ${profilesSelectDataFile}=${profilesSelectDataFile}    ${profilesFromTemplateDataFile}=${profilesFromTemplateDataFile}
    ...            ${storageProfilesSelectDataFile}=${storageProfilesSelectDataFile}   ${encsSelectDataFile}=${encsSelectDataFile}   ${serversSelectDataFile}=${serversSelectDataFile}  ${CIFIT_TYPE_CONV}=${False}
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Log   \n Create Variable File Off OneView Started: ${ResourcesList}   console=True
    :FOR   ${resourceName}   IN   @{ResourcesList}
    \       ${resourceData} =   Run Keyword If     '${resourceName}' == 'ethernet_networks'   Fusion Api Get Ethernet Networks    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'fc_networks'   Fusion Api Get Fc Networks    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'fcoe_networks'      Fusion Api Get Fcoe Networks    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'networksets'   Fusion Api Get Network Set    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'sas_lig'   Fusion Api Get SAS Lig    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ligs'   Fusion Api Get Lig    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'encgroups_add'   Fusion Api Get Enclosure Groups    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profiles'   Fusion Api Get Server Profiles    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profile_with_storage'   Fusion Api Get Server Profiles    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profile_templates'   Fusion Api Get Server Profile Templates    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profiles_from_spt'   Fusion Api Get Server Profiles    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'enclosures'   Fusion Api Get Enclosures    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'servers'   Fusion Api Get Server Hardware    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_systems_with_pools'   Fusion Api Get Storage System    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_pools_toedit'   Fusion Api Get Storage Pools    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_volume_templates'   Fusion Api Get Storage Volumes Template  param=?filter="isroot EQ false"    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_volumes'   Fusion Api Get Storage Volumes    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'logical_enclosure'   Fusion Api Get Logical Enclosure    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'users'   Fusion Api Get User    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'san_managers'   Fusion Api Get San Manager    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'appliance'   Fusion Api Get Appliance Interfaces    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'licenses'   Fusion Api Get Licenses    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'timeandlocale'   Fusion Api Get Appliance Time and locale    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ipv4_subnet'   Fusion Api Get Ipv4 Subnet    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ipv4_ranges'   Fusion Api Get Ipv4 Range    api=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ranges'   Get Ranges from Pooltype
    \       ...                         ELSE IF     '${resourceName}' == 'deployment_server'   Fusion Api Get OS Deployment Server    api=${api}
    \       ...                         ELSE        Fail     msg=Invalid/unsupported resource name found while trying to get raw resource for variable file: ${resourceName}
    \       Run Keyword If      '${resourceName}' == '${ResourcesList[0]}'  Run Keyword If  ${resume} == ${False}   Rist Create Variable File Header    ${variable_filename}    write
    \    ${resourceDataModified} =   Run Keyword If   '${resourceName}' == 'ethernet_networks'   Rist Generate EthNets Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${ethNetsSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'fc_networks'   Rist Generate FcNets Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${fcNetsSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'fcoe_networks'   Rist Generate FcoeNets Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${fcoeNetsSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'networksets'   Rist Generate NetworkSets Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${networksetSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'sas_lig'   Rist Generate Sas Lig Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${sasLigSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ligs'   Rist Generate Lig Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${ligSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'encgroups_add'   Rist Generate EncGrp Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${encGrpSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profiles'   Rist Generate Profiles Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${profilesSelectDataFile}   CIFIT_TYPE_CONV=${CIFIT_TYPE_CONV}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profile_with_storage'   Rist Generate Profiles Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${storageProfilesSelectDataFile}   CIFIT_TYPE_CONV=${CIFIT_TYPE_CONV}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profile_templates'   Rist Generate spt Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${sptSelectDataFile}   CIFIT_TYPE_CONV=${CIFIT_TYPE_CONV}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'server_profiles_from_spt'    Rist Generate Profiles Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${profilesFromTemplateDataFile}   CIFIT_TYPE_CONV=${CIFIT_TYPE_CONV}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'enclosures'   Rist Generate Enclosures Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${encsSelectDataFile}   build_type=${BUILD_TYPE}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'servers'   Rist Generate Servers Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${serversSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_systems_with_pools'   Rist Generate Storage Systems Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${storageSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_pools_toedit'   Rist Generate Storage Pools Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${poolsSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_volume_templates'   Rist Generate SVT Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${svtSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'storage_volumes'   Rist Separate New Existing Volumes Variable   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${volumesSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'logical_enclosure'   Rist Generate le Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${le-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'users'   Rist Generate Users Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${user-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'san_managers'   Rist Generate SanManager Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${san-man-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'appliance'   Rist Generate AppNetworks Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${app-network-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'licenses'   Rist Generate Licenses Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${licenses-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'timeandlocale'   Rist Generate TimeAndLocale Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${timelocale-SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ipv4_subnet'    Rist Generate IPV4 Subnet Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${ipv4_subnetSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ipv4_ranges'    Rist Generate IPV4 Ranges Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${ipv4_rangeSelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'ranges'    Rist Generate Ranges Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${ranges_SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE IF     '${resourceName}' == 'deployment_server'    Rist Generate OS Deployment Server Variable File   ${OV_IP}   ${AUTHTOKEN}   ${resourceData}   ${variable_filename}   ${resourceName}   ${osds_SelectDataFile}   apiVersion=${api}
    \       ...                         ELSE        Fail     msg=Invalid/unsupported resource name found while trying to generate variable file: ${resourceName}
    #Rist Set Variables In File    ${variable_filename}   ${ResourcesList}

Deploy OneView Resources From Variable File
    [Documentation]   Deployment of generated variable file to destination appliance IP
    ...               Example: Deploy OneView Resources From Variable File   ${generatedFile}   ${destOVIP}   [Optional arguments: ResourcesList and importEnclosure]
    [Arguments]   ${generatedFile}   ${destOVIP}   ${ResourcesList}=${AllResourcesCommonList}   ${importEnclosure}=${False}

    Log  ${importEnclosure}
    # Set Test Variable   ${ov_ip_orig}   ${OV_IP}
    Set Test Variable   ${OV_IP}   ${destOVIP}
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    Import Variables   ${generatedFile}
    :FOR   ${resourceName}   IN   @{ResourcesList}
    \       Run Keyword If     '${resourceName}' == 'users'   Add Users from variable async  ${users}    ${VERIFY}  expected_users=${expected_users}
    \       ...    ELSE IF     '${resourceName}' == 'san_managers'  Add San Managers Async  ${san_managers}    ${VERIFY}  expected_san_managers=${expected_san_managers}
    \       ...    ELSE IF     '${resourceName}' == 'ethernet_networks'  Add Ethernet Networks from variable async  ${ethernet_networks}
    \       ...    ELSE IF     '${resourceName}' == 'fc_networks'   Add FC Networks from variable async  ${fc_networks}
    \       ...    ELSE IF     '${resourceName}' == 'fcoe_networks'      Add FCoE Networks from variable async   ${fcoe_networks}
    \       ...    ELSE IF     '${resourceName}' == 'networksets'   Add Networks Sets from variable async   ${networksets}
    \       ...    ELSE IF     '${resourceName}' == 'sas_lig'   Add SAS LIG from variable async   ${sas_lig}
    \       ...    ELSE IF     '${resourceName}' == 'ligs'   Add LIG async   ${ligs}
    \       ...    ELSE IF     '${resourceName}' == 'encgroups_add'   Add Enclosure Group from variable async    ${encgroups_add}
    \       ...    ELSE IF     '${resourceName}' == 'server_profiles'   Add Server Profiles from variable    ${server_profiles}
    \       ...    ELSE IF     '${resourceName}' == 'server_profile_with_storage'   Add Server Profiles from variable    ${server_profile_with_storage}
    \       ...    ELSE IF     '${resourceName}' == 'server_profiles_from_spt'   Add Server Profiles from variable    ${server_profiles_from_spt}
    \       ...    ELSE IF     '${resourceName}' == 'server_profile_templates'   Add Non Existing Server Profile Templates      ${server_profile_templates}
    \       ...    ELSE IF     '${resourceName}' == 'enclosures'   Run Keyword If   '${BUILD_TYPE}'=='C7000' or '${BUILD_TYPE}'=='c7000'     Add Non-Existing Enclosures from variable Async     ${enclosures}
    \       ...    ELSE IF     '${resourceName}' == 'storage_systems_with_pools'   Add Storage System From Variable File
    \       ...    ELSE IF     '${resourceName}' == 'storage_pools_toedit'   Edit the Storage Pools to Managed
    \       ...    ELSE IF     '${resourceName}' == 'storage_volume_templates'   Add Storage Volume Templates From Variable File
    \       ...    ELSE IF     '${resourceName}' == 'storage_volumes'   Add Storage Volumes Async  ${storage_volumes}
    \       ...    ELSE IF     '${resourceName}' == 'logical_enclosure'   Run Keyword If   '${BUILD_TYPE}'== Tbird' or '${BUILD_TYPE}'=='TBIRD'     Add Logical Enclosure from lists Async   ${logical_enclosure}
    \       ...    ELSE IF     '${resourceName}' == 'licenses'   Add Licenses from variable    ${licenses}
    \       ...    ELSE        Fail     msg=Invalid/unsupported resource name ${resourceName} while trying to apply config from variable file ${generatedFile}.

Copy OneView Config
    [Documentation]   Copy OneView configuration and deploy it to the destination appliance
    ...               Example: Copy OneView Config   15.186.21.246   15.186.21.158   generatedFile=mygeneratedvariablefile.py   transferEnclosure=${False}
    [Arguments]   ${sourceOVIP}   ${destOVIP}   ${generatedFile}=generatedVariableFile   ${ResourcesList}=${AllResourcesCommonList}   ${transferEnclosure}=${False}

    # [Documentation]   Login to the source OneView IP
    # Set Test Variable   ${ov_ip_orig}   ${OV_IP}
    Set Test Variable   ${OV_IP}   ${sourceOVIP}
    Run Keyword If  ${LOGGED} == ${False}     Login to OneView Via REST
    ${generatedFile} =   Run Keyword If   '${generatedFile}' == 'generatedVariableFile'   Generate Test Variable File Name
    ...                              ELSE   Set Variable   ${generatedFile}
    Run Keyword If   ${transferEnclosure} == ${True}   Append String To List If Unique   ${ResourcesList}   enclosures
    Create Variable File   ${generatedFile}   ResourcesList=${ResourcesList}
    Run Keyword If   ${transferEnclosure} == ${True}   Prepare Enclosure For Transfer From One OneView To Another
    Set Test Variable   ${importEnclosure}   ${transferEnclosure}
    Deploy OneView Resources From Variable File   ${generatedFile}   ${destOVIP}   ${ResourcesList}   importEnclosure=${importEnclosure}


Import Enclosures From Variable File
    [Documentation]   Import Enclosures From Variable File
    :FOR   ${enc}   IN   @{enclosures}
    \   ${oaIpAddress} =   Get From Dictionary   ${enc}   activeOaPreferredIP
    \   Remove From Dictionary   ${enc}   activeOaPreferredIP
    \   Set To Dictionary   ${enc}   hostname   ${oaIpAddress}
    \   Set To Dictionary   ${enc}   username   ${OA_CREDENTIAL_DATA['oaUsername']}
    \   Set To Dictionary   ${enc}   password   ${OA_CREDENTIAL_DATA['oaPassword']}
    \   ${encGroupUriName} =   Get From Dictionary   ${enc}   enclosureGroupUri
    \   ${encGroupUri} =   Get Enclosure Group Uri By Name   ${encGroupUriName}
    \   Set To Dictionary   ${enc}   enclosureGroupUri   ${encGroupUri}
    \   Log   \n-Add Enclosure   console=True
    \   ${resp} =   Fusion Api Add Enclosure   ${enc}
    \   ${task} =   Wait For Task   ${resp}   20min   10s

Add Storage System From Variable File
    [Documentation]   Add Storage System From Variable File
    ${add_storage}=    Create List
    :FOR   ${storagesys}   IN   @{storage_systems_with_pools}
    \   ${cred_status}  ${cred} =  Run Keyword and Ignore Error   Get From Dictionary   ${storagesys}   credentials
    \   ${status}  ${name} =  Run Keyword and Ignore Error   Get From Dictionary   ${cred}   password
    \   continue for loop if     '${name}'=='None'
    \   Append To List   ${add_storage}   ${storagesys}
    ${responses} =  Connect and Add Storage Systems  ${add_storage}
    Run Keyword If  ${responses} is not ${null}     Wait For Task2   ${responses}

Edit the Storage Pools to Managed
    [Documentation]   Edit Storage Pool to change it from Discovered to Managed Status
    ${pools_to_manage} =   Create Dictionary
    :For  ${pool}   IN   @{storage_pools_toedit}
    \   Run Keyword If   ${pool['isManaged']} == ${False}   Remove Values From List   ${storage_pools_toedit}   ${pool}
    ${responses} =  Edit Storage Pools Async    ${storage_pools_toedit}
    Run Keyword If     ${responses} is not ${null}  Run Keyword for List  ${responses}  Wait For Task
    Verify Storage Pool is Managed   ${storage_pools_toedit}

Add Storage Volume Templates From Variable File
    [Documentation]   Add Storage Volume Templates From Variable File
    :For  ${svt}  in  @{storage_volume_templates}
    \   Log  Adding Storage volume Template ${svt['name']}   console=True
    \   Set To Dictionary   ${svt}   rootTemplateUri  SVT:${svt['name']}
    \   ${resp} =   Add Storage Volume Template  ${svt}
    \   Run Keyword If  ${resp['status_code']}!=201    Run Keyword And Continue On Failure     FAIL     Adding Storage Volume Template ${svt['name']} failed

Create Server Profile Template From Variable File
    [Documentation]   Create Server Profile Template From Variable File
    :FOR   ${template}   IN   @{server_profile_templates}
    \   Log   \n-Create Server Profile Template ${template['name']}  console=True
    \   ${template} =   Update Connections From Template   ${template}
    \   ${serverHardwareTypeUri} =   Get Server Hardware Type Uri By Name   ${template}
    \   ${enclosureGroupUri} =   Get Enclosure Group Uri By Name   ${template['enclosureGroupUri']}
    \   Set To Dictionary   ${serverHardwareTypeUri}   enclosureGroupUri   ${enclosureGroupUri}
    \   ${resp} =   Fusion Api Create Server Profile Template   body=${template}
    \   Run Keyword And Continue on Failure   should be equal as integers  ${resp['status_code']}  202

Create Server Profile From Variable File
    [Documentation]   Create Server Profile From Variable File
    [Arguments]    ${profiles}
    Power Off All Servers
    Log   \n-Create Server Profile   console=True
    :FOR   ${profile}   IN   @{profiles}
    \   ${profile} =   Update Connections From Profiles   ${profile}
    \    ${KeyIsPresent}=    Run Keyword And Return Status    Dictionary Should Contain Key    ${profile}    sanStorage
    \    ${profile} =    Run Keyword If    ${KeyIsPresent}==True    Update volume From Profiles   ${profile}
    #\   ${profile} =   Update volume From Profiles   ${profile}
    \   ${serverHardwareUri} =   Get Server Hardware Uri By Name   ${profile['serverHardwareUri']}
    \   Set To Dictionary   ${profile}   serverHardwareUri   ${serverHardwareUri}
    \   ${enclosureGroupUri} =   Get Enclosure Group Uri By Name   ${profile['enclosureGroupUri']}
    \   Set To Dictionary   ${profile}   enclosureGroupUri   ${enclosureGroupUri}
    \   ${enclosureUri} =   Get Enclosure Uri By Name   ${profile['enclosureUri']}
    \   Set To Dictionary   ${profile}   enclosureUri   ${enclosureUri}
    \   ${resp} =   Fusion Api Create Server Profile   body=${profile}
    \   Wait For Task and Fail On Error    ${resp}   timeout=20 mins   interval=10s

Get Ranges from Pooltype
   [Documentation]   Get Ranges from Pooltype
   ${datalist} =   Create List
   ${mac_resp} =   Fusion Api Get Pool   /rest/id-pools/VMAC
   Run Keyword If     ${mac_resp} is not ${null}   Append to List    ${datalist}   ${mac_resp}
   ${wwn_resp} =   Fusion Api Get Pool   /rest/id-pools/VWWN
   Run Keyword If     ${wwn_resp} is not ${null}   Append to List    ${datalist}   ${wwn_resp}
   ${vsn_resp} =   Fusion Api Get Pool   /rest/id-pools/VSN
   Run Keyword If     ${vsn_resp} is not ${null}   Append to List    ${datalist}   ${vsn_resp}
   [Return]     ${datalist}