# variable-keys mapping
# top level/members-level keys
#membersKeys = ['name', 'type', 'enclosureType', 'ethernetSettings', 'interconnectMapTemplate', 'interconnectBaySet', 'redundancyType', 'telemetryConfiguration', 'snmpConfiguration', 'uplinkSets', 'qosConfiguration', 'enclosureIndexes']
membersKeys = ['name', 'type', 'enclosureType', 'ethernetSettings', 'interconnectMapTemplate', 'interconnectBaySet', 'redundancyType', 'telemetryConfiguration', 'uplinkSets', 'qosConfiguration', 'enclosureIndexes']

expectedKeys = ['uri', 'status', 'stackingHealth', 'category', 'state', 'internalNetworkUris', 'stackingMode', 'description']

# ethernetSettings keys (format is <members key>Keys)
ethernetSettingsKeys = ['enableFastMacCacheFailover', 'enableIgmpSnooping', 'enableNetworkLoopProtection', 'enablePauseFloodProtection', 'igmpIdleTimeoutInterval', 'interconnectType', 'macRefreshInterval']

# interconnectMapTemplates keys
interconnectMapTemplateKeys = ['interconnectMapEntryTemplates']

# interconnectMapEntryTemplates keys
interconnectMapEntryTemplatesKeys = ['logicalLocation', 'permittedInterconnectTypeUri', 'enclosureIndex']

# telemetryConfigurations keys
telemetryConfigurationKeys = ['enableTelemetry', 'sampleCount', 'sampleInterval']

# snmpConfigurations keys
snmpConfigurationKeys = ['enabled', 'readCommunity', 'snmpAccess', 'systemContact', 'trapDestinations']

# uplinkSet keys
uplinkSetsKeys = ['ethernetNetworkType', 'lacpTimer', 'logicalPortConfigInfos', 'mode', 'name', 'nativeNetworkUri', 'networkType', 'networkUris', 'primaryPort']

# qosConfiguration keys
qosConfigurationKeys = ['activeQosConfig', 'inactiveFCoEQosConfig', 'inactiveNonFCoEQosConfig', 'name', 'type']

# activeQosConfig keys
activeQosConfigKeys = ['configType', 'downlinkClassificationType', 'name', 'qosTrafficClassifiers', 'type', 'uplinkClassificationType']

# qosTrafficClassifiers keys
qosTrafficClassifiersKeys = ['qosClassificationMapping', 'qosTrafficClass']

# qosClassificationMapping keys
qosClassificationMappingKeys = ['dot1pClassMapping', 'dscpClassMapping']

# qosTrafficClass keys
qosTrafficClassKeys = ['bandwidthShare', 'className', 'egressDot1pValue', 'enabled', 'maxBandwidth', 'realTime']

# inactiveFCoEQosConfig keys
# NOTE: This maybe inaccurate as I still need to see a config of this...
inactiveFCoEQosConfigKeys = ['configType', 'downlinkClassificationType', 'name', 'qosTrafficClassifiers', 'type', 'uplinkClassificationType']

#inactiveNonFCoEQosConfig keys
inactiveNonFCoEQosConfigKeys = ['configType', 'downlinkClassificationType', 'name', 'qosTrafficClassifiers', 'type', 'uplinkClassificationType']

# logicalPortConfigInfos keys
logicalPortConfigInfosKeys = ['desiredSpeed', 'logicalLocation']

# logicalLocation key dictionary defining subkeys to parse
logicalLocationDict = {'locationEntries': ['relativeValue', 'type']}

# primaryPort key dictionary defining subkeys to parse
primaryPortDict = {'locationEntries': ['relativeValue', 'type']}

# members dictionary defining key-to-variable(above) mapping
membersDict = {
    'ethernetSettings': ethernetSettingsKeys,
    'ethernetSettings_type': 'dictionary',
    'interconnectMapTemplate': interconnectMapTemplateKeys,
    'interconnectMapTemplate_type': 'modDictListOfDict',
    'interconnectMapEntryTemplates': interconnectMapEntryTemplatesKeys,
    'interconnectMapEntryTemplates_type': 'listOfDict',
    'telemetryConfiguration': telemetryConfigurationKeys,
    'telemetryConfiguration_type': 'dictionary',
    'snmpConfiguration': snmpConfigurationKeys,
    'snmpConfiguration_type': 'dictionary',
    'uplinkSets': uplinkSetsKeys,
    'uplinkSets_type': 'listOfDict',
    'logicalPortConfigInfos': logicalPortConfigInfosKeys,
    'logicalPortConfigInfos_type': 'listOfDict',
    'logicalLocation': logicalLocationDict,
    'logicalLocation_type': 'listOfDict',
    'primaryPort': primaryPortDict,
    'primaryPort_type': 'modListOfDict',
    'qosConfiguration': qosConfigurationKeys,
    'qosConfiguration_type': 'dictOfDict',
    'activeQosConfig': activeQosConfigKeys,
    'activeQosConfig_type': 'dictOfDict',
    'inactiveFCoEQosConfig': inactiveFCoEQosConfigKeys,
    'inactiveFCoEQosConfig_type': 'dictOfDict',
    'inactiveNonFCoEQosConfig': inactiveNonFCoEQosConfigKeys,
    'inactiveNonFCoEQosConfig_type': 'dictOfDict',
    'qosTrafficClassifiers': qosTrafficClassifiersKeys,
    'qosTrafficClassifiers_type': 'listOfDict'
}

# custom data type definition
dataTypeToSym = {
    'dictionary_begin': '{',
    'dictionary_end': '}',
    'list_begin': '[',
    'list_end': ']',
    'listOfDict_begin': '[',
    'listOfDict_end': ']',
    'dictListOfDict_begin': '{',
    'dictListOfDict_end': '}',
    'modDictListOfDict_begin': '[',
    'modDictListOfDict_end': ']',
    'modListOfDict_begin': '[',
    'modListOfDict_end': ']',
    'dictOfDict_begin': '{',
    'dictOfDict_end': '}',
}

# custom key definition (original key-to-custom key mapping)
customDict = {
    'permittedInterconnectTypeUri': 'type',
    'type': 'key',
    'relativeValue': 'value',
    'desiredSpeed': 'speed',
    'bay': 'translate'
}
