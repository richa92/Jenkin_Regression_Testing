# variable-keys mapping
# toplevel or members-level keys
membersKeys = ['name', 'state', 'serialNumber', 'type', 'refreshState', 'deviceBays',
'interconnectBays', 'fanBays', 'powerSupplyBays', 'applianceBays', 'managerBays', 'status']

deviceBaysKeys = ['bayNumber', 'devicePresence']
interconnectBaysKeys = ['bayNumber', 'bayPowerState']
fanBaysKeys = ['bayNumber', 'devicePresence', 'status']
powerSupplyBaysKeys = ['bayNumber', 'devicePresence', 'status']
applianceBaysKeys = ['bayNumber', 'devicePresence', 'status']
managerBaysKeys = ['bayNumber', 'devicePresence', 'status', 'mgmtPortStatus']

# members dictionary defining the subkeys
membersDict = {
    'deviceBays' : deviceBaysKeys,
    'deviceBays_type' : 'listOfDict',
    'interconnectBays' : interconnectBaysKeys,
    'interconnectBays_type' : 'listOfDict',
    'fanBays' : fanBaysKeys,
    'fanBays_type' : 'listOfDict',
    'powerSupplyBays' : powerSupplyBaysKeys,
    'powerSupplyBays_type' : 'listOfDict',
    'applianceBays' : applianceBaysKeys,
    'applianceBays_type' : 'listOfDict',
    'managerBays' : managerBaysKeys,
    'managerBays_type' : 'listOfDict'
}

# preserve uri value(s) list
keepUris = []

# Collect this if serialNumberType is Physical
serialNumberType_Not_Physical = ['uuid', 'serialNumber']
# When macType is Physical
macType_Not_Physical = ['mac']
globalNegativeCondDict = {
    'serialNumberType': 'Physical',
    'serialNumberType_Physical': serialNumberType_Not_Physical
}
nonglobalNegativeCondDict = {
    'macType': 'Physical',
    'macType_Physical': macType_Not_Physical
}

# custom data type definition
dataTypeToSym = {
    'dictionary_begin': '{',
    'dictionary_end': '}',
    'list_begin': '[',
    'list_end': ']',
    'listOfDict_begin': '[',
    'listOfDict_end': ']',
    'modDictListOfDict_begin': '{',
    'modDictListOfDict_end': '}',
}