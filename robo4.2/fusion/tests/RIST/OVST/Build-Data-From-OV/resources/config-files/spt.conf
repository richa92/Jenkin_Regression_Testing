# variable-keys mapping
# toplevel (or members-level)
# NOTE: If serialNumberType is Physical these cannot be specified  'uuid', 'serialNumber'
membersKeys = [
    'name', 'type', 'serverProfileDescription', 'serverHardwareTypeUri', 'enclosureGroupUri', 'serialNumberType', 'macType', 'wwnType',
    'description', 'affinity', 'connectionSettings', 'boot', 'bootMode', 'firmware', 'bios', 'hideUnusedFlexNics', 'iscsiInitiatorNameType',
    'localStorage', 'sanStorage'
]

expectedKeys = ['uri', 'status']
# membersKey that has sub-keys (format is <key>Keys)
connectionSettingsKeys = ['manageConnections', 'connections']

# membersKey that has sub-keys (format is <key>Keys)
connectionsKeys = ['id', 'name', 'functionType', 'portId', 'requestedMbps', 'networkUri', 'boot']

bootKeys = ['manageBoot', 'order']
bootModeKeys = ['pxeBootPolicy', 'manageMode', 'mode']
firmwareKeys = ['manageFirmware', 'forceInstallFirmware']
biosKeys = ['manageBios', 'overriddenSettings']
localStorageKeys = ['sasLogicalJBODs', 'controllers']
# navya added
sanStorageKeys = ['hostOSType', 'manageSanStorage', 'volumeAttachments']
volumeAttachmentsKeys = ['id', 'volumeUri', 'isBootVolume', 'lunType', 'lun', 'storagePaths']
storagePathsKeys = ['isEnabled', 'connectionId', 'targetSelector', 'targets']

# members dictionary defining the subkeys
membersDict = {
    'connectionSettings' : connectionSettingsKeys,
    'connectionSettings_type' : 'modDictListOfDict',
    'connections' : connectionsKeys,
    'connections_type' : 'listOfDict',
    'boot' : bootKeys,
    'boot_type' : 'dictionary',
    'bootMode' : bootModeKeys,
    'bootMode_type' : 'dictionary',
    'firmware' : firmwareKeys,
    'firmware_type' : 'dictionary',
    'bios' : biosKeys,
    'bios_type' : 'dictionary',
    'localStorage' : localStorageKeys,
    'localStorage_type' : 'dictionary',
    'sanStorage' : sanStorageKeys,
    'sanStorage_type' : 'modDictListOfDict',
    'volumeAttachments' : volumeAttachmentsKeys,
    'volumeAttachments_type' : 'listOfDict',
    'storagePaths' : storagePathsKeys,
    'storagePaths_type' : 'listOfDict'
}

# preserve uri value(s) list
keepUris = []

# Collect this if serialNumberType is Physical
serialNumberType_Not_Physical = ['uuid', 'serialNumber']
# When macType is Physical
macType_Not_Physical = ['mac']
globalNegativeCondDict = {
    'serialNumberType': 'Physical',
    'serialNumberType_Physical': serialNumberType_Not_Physical
}
nonglobalNegativeCondDict = {
    'macType': 'Physical',
    'macType_Physical': macType_Not_Physical
}

# custom data type definition
dataTypeToSym = {
    'dictionary_begin': '{',
    'dictionary_end': '}',
    'list_begin': '[',
    'list_end': ']',
    'listOfDict_begin': '[',
    'listOfDict_end': ']',
    'modDictListOfDict_begin': '{',
    'modDictListOfDict_end': '}',
}
