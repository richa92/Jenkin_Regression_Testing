*** Settings ***
Documentation     OneView CRM Rest API keywords
...               = Usage =
...               | Resource | resources/keywords.txt |

Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             Collections
Library             XML
Library             String
Library             SSHLibrary

Resource            ../../../../../Resources/api/fusion_api_resource.txt
Library             ../resources/rist_util.py
Variables           ../resources/data_variables.py    scale-config-realAustin4
Resource            ../resources/keywords.txt


*** Variables ***
${CIFIT_TYPE_CONV}              ${True}
${userName}                     None    # YOU_MUST_SPECIFY_ON_COMMAND_LINE
${password}                     None    # YOU_MUST_SPECIFY_ON_COMMAND_LINE
${fcoeMinXAPIVersion}           200
${newMigrRespMinXAPIVersion}    300
${api}                          1000
${LOGGED}                       ${False}
${VERIFY}                       ${False}
# Change value BUILD_TYPE to C7000/Tbird for your appliance before execution
${BUILD_TYPE}                   C7000
${BUG_IN_API}                   ${False}
${ethNetsSelectDataFile}           ../resources/config-files/ethernet.conf
${fcNetsSelectDataFile}            ../resources/config-files/fc.conf
${fcoeNetsSelectDataFile}          ../resources/config-files/fcoe.conf
${encsSelectDataFile}              ../resources/config-files/enclosures.conf
${serversSelectDataFile}           ../resources/config-files/servers.conf
${encGrpSelectDataFile}            ../resources/config-files/enclosure-group.conf
${profilesSelectDataFile}          ../resources/config-files/profiles-cifit.conf
${storageProfilesSelectDataFile}   ../resources/config-files/profiles.conf
${profilesFromTemplateDataFile}    ../resources/config-files/profiles.conf
${sptSelectDataFile}               ../resources/config-files/spt.conf
${networksetSelectDataFile}        ../resources/config-files/networksets.conf
${ligSelectDataFile}               ../resources/config-files/lig-payload.conf
${sasLigSelectDataFile}            ../resources/config-files/sas-lig.conf
${lig-as-isSelectDataFile}         ../resources/config-files/lig.conf
${storageSelectDataFile}           ../resources/config-files/storage-systems.conf
${poolsSelectDataFile}             ../resources/config-files/storage-pools.conf
${svtSelectDataFile}               ../resources/config-files/storage-templates.conf
${volumesSelectDataFile}           ../resources/config-files/storage-volumes.conf
${le-SelectDataFile}               ../resources/config-files/le.conf
${user-SelectDataFile}             ../resources/config-files/users.conf
${san-man-SelectDataFile}          ../resources/config-files/san-manager.conf
${app-network-SelectDataFile}      ../resources/config-files/appliance-networks.conf
${licenses-SelectDataFile}         ../resources/config-files/licenses.conf
${timelocale-SelectDataFile}         ../resources/config-files/time-locale.conf
${ipv4_subnetSelectDataFile}       ../resources/config-files/ipv4_subnet.conf
${ipv4_rangeSelectDataFile}       ../resources/config-files/ipv4_ranges.conf
${ranges_SelectDataFile}          ../resources/config-files/ranges.conf
${osds_SelectDataFile}          ../resources/config-files/os-deployment.conf
*** Keywords ***
Login to OneView Via REST
    [Documentation]    Connects to the Appliance and creates a session using the Username and Password.
    ...                Example:\n| Login to Fusion Via REST
    [Arguments]        ${OV_IP}=${OV_IP}    ${admin_credentials}=${ADMIN_CREDENTIALS}
    Should Not Be Equal    ${OV_IP}    'unknown'    msg=Please specify a valid Fusion IP address or hostname
    Log  \n With IP ${OV_IP} (${admin_credentials})   console=True
    ${Response}    ${AUTHTOKEN}    Fusion Api Login Appliance    ${OV_IP}    ${admin_credentials}
    Set Suite Variable   ${AUTHTOKEN}
    Log   ${AUTHTOKEN}   console=True
    Log    ${Response['status_code']}    console=True
    Should Match StatusCode in Response      ${Response}   ${200}
    Set Suite Variable    ${LOGGED}  ${True}
    Set OneView Version Metadata    ${OV_IP}    ${LOGGED}
    Set FusionLibrary Version Metadata
    Set RoboGalaxyLibrary Version Metadata

Wait For Task and Fail On Error
    [Documentation]     Waits for a task to reach an end-state
    [Arguments]     ${resp}   ${timeout}=60 s   ${interval}=2 s
    ${task} =   Wait Until Keyword Succeeds     ${timeout}  ${interval}    Task Reached Endstate   ${resp}
    Run Keyword If    '${task['taskState']}' == 'Error'    Output Task Error Messages    ${task['taskErrors']}
    Run Keyword If    '${task['taskState']}' == 'Error'   Fail
    [Return]    ${task}

Output Task Error Messages
    [Documentation]     Output all task errors
    [Arguments]     ${taskErrors}
    :FOR   ${taskError}  IN  @{taskErrors}
    \       Log   \nTask completed with errors   console=True
    \       Log   \nMessage: ${taskError['message']}   console=True
    \       Log   \nRecommended Action: ${taskError['recommendedActions']}   console=True

Should Match StatusCode in Response
    [Documentation]  Validate status code in Response and fail with error message if not matched with expected one
    ...   Example:   Should Match StatusCode in Response    ${resp}    ${200}
    [Arguments]    ${resp}  ${expectedValue}
    ${containResp}=     Run Keyword and Return Status      Should contain    ${resp}   status_code
    ${actualValue}=      Run Keyword If    ${containResp} == ${True}      Get From Dictionary    ${resp}   status_code
    ...        ELSE     Set Variable     ${resp.status_code}
    Run Keyword If    ${containResp} == ${False}    Convert to Integer       ${actualValue}
    Run Keyword and Return If    '${actualValue}'=='${expectedValue}'   Log   Assert: status_code is ${actualValue} as expected.   console=True
    ${status}=     Run Keyword and Return Status     Should contain    ${resp}    errorCode
    ${errorMsg}=    Run Keyword If  ${status}        Catenate    Error:   ${actualValue}   ${resp['errorCode']}   ${resp['message']}
    ...             ELSE    Set Variable    ${EMPTY}
    Fail    msg=Assert: validation failed. Expected:${expectedValue} | Actual:${actualValue}. ${errorMsg}

Get Enclosure Uri By Name
    [Documentation]  Get enclosure uri by name
    [Arguments]   ${enc}
    ${resp} =   Fusion Api Get Enclosures   param=?filter="'name'=='${enc}'"
    ${uri} =   Get From Dictionary   ${resp['members'][0]}   uri
    [Return]   ${uri}

Get Enclosure Group Uri By Name
    [Documentation]  Get enclosure group uri by name
    [Arguments]   ${eg}
    ${resp} =   Fusion Api Get Enclosure Groups
    ${l} =   Get Length   ${resp['members']}
    :FOR   ${x}   IN RANGE   0   ${l}
    \   Run Keyword If   '${resp['members'][${x}]['name']}' != '${eg}'   Continue For Loop
    \   ${uri} =   Get From Dictionary   ${resp['members'][${x}]}   uri
    [Return]   ${uri}

Get Server Hardware Uri By Name
    [Documentation]  Get server hardware uri by name
    [Arguments]   ${enc_server}
    ${resp} =   Fusion Api Get Server Hardware
    ${shlist} =   Get From Dictionary   ${resp}   members
    :FOR   ${sh}   IN   @{shlist}
    \   ${name} =   Get From Dictionary   ${sh}   name
    \   Run Keyword If   '${name}' != '${enc_server}'   Continue For Loop
    \   ${uri} =   Get From dictionary   ${sh}   uri
    [Return]   ${uri}

Get Server Hardware Type Uri By Name
    [Documentation]  Get server hardware type uri by name
    [Arguments]   ${spt}
    ${sht} =   Set Variable   SHT:SY 660 Gen9:1:Smart Array P542D Controller:2:HPE Synergy 3530C 16G Host Bus Adapter:3:HPE Synergy 3820C 10/20Gb Converged Network Adapter
    ${sht_uri} =  run keyword if  '${sht}'!=''   Common URI Lookup by name   ${sht}
    Remove From Dictionary   ${spt}   serverHardwareTypeUri
    Set to Dictionary   ${spt}   serverHardwareTypeUri   ${sht_uri}
    [Return]   ${spt}

Update Connections From Profiles
    [Documentation]  Update connections from resource profiles
    [Arguments]   ${profile}
    ${connections} =   Get Variable Value   ${profile['connections']}
    ${connectionsLength} =   Get Length   ${connections}

    :FOR   ${i}   IN RANGE   0   ${connectionsLength}
    \   ${networkUriName} =   Get From Dictionary   ${connections[${i}]}   networkUri
    \   ${netsetResp} =   Fusion Api Get Network Set   param=?filter="'name'=='${networkUriName}'"
    \   ${ethResp} =   Fusion Api Get Ethernet Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${fcResp} =  Fusion Api Get FC Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${fcoeResp} =  Fusion Api Get Fcoe Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${count} =   Get From Dictionary   ${netsetResp}   count
    \   ${count1} =   Get From Dictionary   ${ethResp}   count
    \   ${count2} =   Get From Dictionary   ${fcResp}   count
    \   ${count3} =   Get From Dictionary   ${fcoeResp}   count
    \   ${resp} =  Set Variable If
    \   ...    ${count}==1    ${netsetResp}
    \   ...    ${count1}==1   ${ethResp}
    \   ...    ${count2}==1   ${fcResp}
    \   ...    ${count3}==1   ${fcoeResp}
    \   ${networkUri} =   Get From Dictionary   ${resp['members'][0]}   uri
    \   Set To Dictionary   ${profile['connections'][${i}]}   networkUri   ${networkUri}

    [Return]   ${profile}

Update Connections From Template
    [Documentation]  Update connections from resource Template
    [Arguments]   ${spt}
    ${connections} =   Get Variable Value   ${spt['connectionSettings']['connections']}
    ${connectionsLength} =   Get Length   ${connections}

    :FOR   ${i}   IN RANGE   0   ${connectionsLength}
    \   ${networkUriName} =   Get From Dictionary   ${connections[${i}]}   networkUri
    \   ${netsetResp} =   Fusion Api Get Network Set   param=?filter="'name'=='${networkUriName}'"
    \   ${ethResp} =   Fusion Api Get Ethernet Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${fcResp} =  Fusion Api Get FC Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${fcoeResp} =  Fusion Api Get Fcoe Networks   param=?filter="'name'=='${networkUriName}'"
    \   ${count} =   Get From Dictionary   ${netsetResp}   count
    \   ${count1} =   Get From Dictionary   ${ethResp}   count
    \   ${count2} =   Get From Dictionary   ${fcResp}   count
    \   ${count3} =   Get From Dictionary   ${fcoeResp}   count
    \   Log FCOE NETWORKS
    \   ${resp} =  Set Variable If
    \   ...    ${count}==1    ${netsetResp}
    \   ...    ${count1}==1   ${ethResp}
    \   ...    ${count2}==1   ${fcResp}
    \   ...    ${count3}==1   ${fcoeResp}
    \   ${networkUri} =   Get From Dictionary   ${resp['members'][0]}   uri
    \   Set To Dictionary   ${spt['connectionSettings']['connections'][${i}]}   networkUri   ${networkUri}

    [Return]   ${spt}

Update volume From Profiles
    [Documentation]  Update Volume from resource profiles
    [Arguments]   ${profile}
    ${volumes} =   Get Variable Value   ${profile['sanStorage']['volumeAttachments']}
    ${volumesLength} =   Get Length   ${volumes}
    :FOR   ${i}   IN RANGE   0   ${volumesLength}
    \   ${volumeUriName} =   Get From Dictionary   ${volumes[${i}]}   volumeUri
    \   ${volumeResp} =   Fusion Api Get Storage Volumes   param=?filter="'name'=='${volumeUriName}'"
    \   ${volumeUri} =   Get From Dictionary   ${volumeResp['members'][0]}   uri
    \   Set To Dictionary   ${profile['sanStorage']['volumeAttachments'][${i}]}   volumeUri   ${volumeUri}
    [Return]   ${profile}
