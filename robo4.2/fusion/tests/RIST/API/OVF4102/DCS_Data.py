import copy
from copy import deepcopy

admin_credentials = {
    'userName': 'Administrator',
    'password': 'hpvse123'}
ilo_credentials = {
    'username': 'Administrator',
    'password': 'hpvse123'
}


LIG_NAME = 'LIG1'
EG_NAME = 'EG1'
LE_NAME = 'LE1'
iLO_PROFILE1_EG = EG_NAME
ENC1 = '0000A66101'
ENC1ICBAY3 = '%s, interconnect 3' % ENC1
ENC1DEBAY1 = '%s, bay 1' % ENC1

# Server Hardware
ENC1SHBAY3 = '%s, bay 3' % ENC1
ENC1SHBAY4 = '%s, bay 4' % ENC1
ENC1SHBAY5 = '%s, bay 5' % ENC1
ENC1SHBAY7 = '%s, bay 7' % ENC1

# PROFILE1 SETTINGS
PROFILE1_NAME = 'iLO Testing'
PROFILE1_SHT = 'SY 660 Gen10:1:HPE Smart Array P416ie-m SR Gen10 Controller:2:HPE Synergy 3820C 10/20Gb Converged Network Adapter:3:HPE Synergy 3820C 10/20Gb Converged Network Adapter:4:HPE Smart Array P416ie-m SR Gen10 Controller'
PROFILE1_SH = "SH:" + ENC1SHBAY3
SERVER_HARDWARE_TYPE1 = 'SY 660 Gen10:3:HPE Synergy 3820C 10/20Gb Converged Network Adapter'
# PROFILE2 SETTINGS
SERVER_PROFILE_TYPE = 'ServerProfileV10'
SERVER_PROFILE_TEMP_TYPE = 'ServerProfileTemplateV6'
DL660_name = '2C201506GR'

EG_NAME = 'EG1'
# Enclosures
ENC1 = 'CN75440444'
ShortError = 'Unable to add one or more local accounts as the specified password is shorter than allowed by the management processor.'

# profiles
SERVER2 = ENC1SHBAY4            # SY480c Gen10
# SHT
NTS1_SPT_EG = EG_NAME
SHT_SERVER2 = 'SH:' + SERVER2


server_profiles = {

    "type": SERVER_PROFILE_TYPE,
    "serverHardwareUri": "SH:" + ENC1SHBAY3,
    "serverHardwareTypeUri": PROFILE1_SHT,
    "serialNumberType": "Virtual",
    "iscsiInitiatorNameType": "AutoGenerated",
    "macType": "Virtual",
    "wwnType": "Virtual",
    "name": "iLO Testing",
    "description": "",
    "affinity": "Bay",
    "connectionSettings": {
        "connections": []
    },
    "boot": {
        "manageBoot": True, "order": ["HardDisk"]
    },
    "bootMode": {
        "manageMode": True, "mode": "UEFI", "secureBoot": "Disabled", "pxeBootPolicy": "Auto"
    },
    "firmware": {
        "manageFirmware": False, "firmwareBaselineUri": "", "forceInstallFirmware": False, "firmwareInstallType": None, "firmwareScheduleDateTime": "", "firmwareActivationType": "Immediate"
    },
    "bios": {
        "manageBios": False, "overriddenSettings": []
    },
    "managementProcessor": {
        "manageMp": True,
        "mpSettings": [
            {
                "settingType": "AdministratorAccount",
                "args": {
                    "deleteAdministratorAccount": False,
                    "password": "Administrator"
                }
            }
        ]
    },
    "hideUnusedFlexNics": True,
    "iscsiInitiatorName": "",
    "osDeploymentSettings": None,
    "localStorage": {
        "sasLogicalJBODs": [], "controllers": []
    },
    "sanStorage": None
}

server_profile_temp = {
    "type": "ServerProfileTemplateV6",
    "serverProfileDescription": "",
    "serverHardwareTypeUri": 'SHT:' + SHT_SERVER2,
    "enclosureGroupUri": 'EG:' + NTS1_SPT_EG,
    "name": "iLO Testing Temp",
    "description": "",
    "affinity": "Bay",
    "connectionSettings": {
        "connections": [],
        "manageConnections": True
    },
    "boot": {
        "manageBoot": True,
        "order": [
            "HardDisk"
        ]
    },
    "bootMode": {
        "manageMode": True,
        "mode": "UEFI",
        "secureBoot": "Disabled",
        "pxeBootPolicy": "Auto"
    },
    "firmware": {
        "manageFirmware": False,
        "firmwareBaselineUri": "",
        "forceInstallFirmware": False,
        "firmwareInstallType": None,
        "firmwareActivationType": "Immediate"
    },
    "bios": {
        "manageBios": False,
        "overriddenSettings": []
    },
    "managementProcessor": {
        "manageMp": True,
        "mpSettings": [
            {
                "settingType": "AdministratorAccount",
                "args": {
                    "deleteAdministratorAccount": False,
                    "password": "hpvse123"
                }
            }
        ]
    },
    "hideUnusedFlexNics": True,
    "iscsiInitiatorNameType": "AutoGenerated",
    "localStorage": {
        "sasLogicalJBODs": [],
        "controllers": []
    },
    "sanStorage": None,
    "osDeploymentSettings": None,
    "initialScopeUris": []
}

create_sp = [
    server_profiles.copy(),
]
# Negitive test set password to short expect it to fail
sp_short = deepcopy(server_profiles)
sp_short["managementProcessor"]["mpSettings"][0]["args"]["password"] = "admin"

edit_sp_short = [
    {
        'keyword': 'Edit Server Profile',
        'argument': sp_short.copy(),
        'taskState': 'Error',
        'errorMessage': 'ILO_PASSWORD_TO_SHORT'
    },

]

sp_long = deepcopy(server_profiles)
sp_long["managementProcessor"]["mpSettings"][0]["args"]["password"] = "Administratorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"

edit_sp_Long = [
    {
        'keyword': 'Edit Server Profile',
        'argument': sp_long.copy(),
        'taskState': 'Error',
        'errorMessage': 'ILO_PASSWORD_TO_LONG'
    },
]
# copy server profile but set the iLO admin account to delete
edit_sp_delete = deepcopy(server_profiles)
edit_sp_delete["managementProcessor"]["mpSettings"][0]["args"]["deleteAdministratorAccount"] = True

# restore iLO account and password
edit_sp_restore = deepcopy(server_profiles)
edit_sp_restore["managementProcessor"]["mpSettings"][0]["args"]["password"] = "hpvse123"


create_spt = [
    copy.deepcopy(server_profile_temp)
]

edit_sp_valid_password = [

    copy.deepcopy(edit_sp_restore),
]

edit_sp_delete_admin = [

    copy.deepcopy(edit_sp_delete),
]

# Profile templates
dynamic_profile_templates_name_pwd = ["spt_hpvse123", "spt_short", "spt_admnistrtorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"]
dynamic_profile_templates = []
for profile in dynamic_profile_templates_name_pwd:
    x, pwd = profile.split('_')
    server_profile_temp["managementProcessor"]["mpSettings"][0]["args"]["password"] = pwd
    exec("%s= deepcopy(server_profile_temp)" % profile)
    dynamic_profile_templates.append(globals()[profile])
