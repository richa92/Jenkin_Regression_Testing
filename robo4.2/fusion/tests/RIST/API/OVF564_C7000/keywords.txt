*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs
Resource            ./../../../../Resources/api/fusion_api_resource.txt
Resource            ../global_variables.robot

*** Keywords ***

Login And Clear Test Environtment
    [Arguments]    ${APPLIANCE_IP}    ${admin_credentials}
    [Documentation]    Login And Clear Test Environtment
    Should Not Be Equal    ${APPLIANCE_IP}    ${None}    msg=The appliance IP must be defined, Example:'APPLIANCE_IP:16.114.218.154'
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Log To Console    \nPower Off Servers and remove all profiles
    Power off ALL servers    PressAndHold
    Wait For All Servers Complete Refresh
    Wait For ALL Server Profile In Normal State
    Remove All Server Profiles
    Remove All Server Profile Templates


Validate Server Profile Applied Successfully
    [Arguments]    ${resps}
    [Documentation]    Validate Server Profile Applied Successfully
    :FOR    ${resp}    IN    @{resps}
    \    log to console   resp_is_${resp}
    \    wait for task2   ${resp}     20min   5
    \    ${taskUri} =    Get From Dictionary    ${resp['headers']}    location
    \    ${result} =    Validate Successfully Applied Server Settings For Profile     ${taskUri}
    \    Should Be True    ${result}


Validate Successfully Applied Server Settings For Profile
    [Arguments]    ${taskUri}
    [Documentation]    Validate Successfully Applied Server Settings For Profile
    ${task} =    Get Task By Param    param=?filter='parentTaskUri'='${taskUri}'&sort=created:descending&count=1
    ${status} =    Get From Dictionary    ${task}    taskStatus
    @{status_list} =    Split String    ${status}    :
    ${result_string} =    Get From List    ${status_list}    0
    ${profile_name} =    Get From List    ${status_list}    1
    Run Keyword If      '${result_string}'!='Successfully applied server settings for profile '
    ...                  FAIL   Profile failed to apply to server
    [Return]    True


Delete Server Profile And Validate The Deletion
    [Arguments]    ${createProfile}    ${forceFlag}=${False}
    [Documentation]    Delete Server Profile And Validate The Deletion
    :FOR    ${profile}    IN    @{createProfile}
    \       ${resp} =     Remove Server Profile    ${profile}    ${forceFlag}
    \       Wait For Task2    ${resp}    20min    5
    \       ${resp} =    Fusion Api Get Server Profiles    param=?filter="'name'=='${profile['name']}'"
    \       Return From Keyword If    '${resp['count']}' == '0'    PASS
    [Return]    Failed to Server Profile Validate Deletion


Validate Server Profiles Connections Network Applied
    [Arguments]    ${serverProfile}
    [Documentation]    Validate Server Profile New Connections Network Applied
    :FOR    ${profile}    IN    @{serverProfile}
    \       ${server_profile_uri} =    Get Server Profile URI    ${profile['name']}
    \       ${connections_list} =    Get From Dictionary    ${profile}    connections
    \       Log To Console    Server_Profile_URI_is_:_${server_profile_uri}
    \       ${result} =    Validate Server Profile Connections Network As Expected    ${server_profile_uri}    ${connections_list}
    \       Should Be True    ${result}
    [Return]    True


Validate Server Profile Connections Network As Expected
    [Arguments]    ${serverprofileUri}    ${expected_connections_list}
    [Documentation]    Validate Connection Network As Expected in Created Profile
    ${resp} = 	Fusion Api Get Server Profiles		uri=${serverprofileUri}
    ${connection_dict} =    Get From Dictionary    ${resp}     connections
    Log to console and logfile    ${connection_dict}
    ${expected_connections_list} =  Lookup Connection Uris    ${expected_connections_list}
    :FOR    ${connection}   IN    @{connection_dict}
    \       ${id} =    Get From Dictionary    ${connection}    id
    \       Log To Console    Current_Connection_ID_is: ${id}
    \       ${network} =    Get From Dictionary    ${connection}     networkUri
    \       Log To Console    The_connection_network_is_:_${network}
    \       ${expected_connection} =    Get From List    ${expected_connections_list}    ${id-1}
    \       Log To Console    The_expected_connection_network_is_:_${expected_connection['networkUri']}
    \       Return From Keyword If     '${network}'!='${expected_connection['networkUri']}'     FAIL_Connection_network_is_not_set_as_required
    [Return]    True


Validate Server Profile Templates Connections Network Applied
    [Arguments]    ${serverProfileTemplate}
    [Documentation]    Validate Server Profile Template New Connections Network Applied
    :FOR    ${profile}    IN    @{serverProfileTemplate}
    \       ${server_profile_template_uri} =    Get Server Profile Template URI    ${profile['name']}
    \       ${connectionSettings} =    Get From Dictionary    ${profile}    connectionSettings
    \       ${connections_list} =    Get From Dictionary    ${connectionSettings}     connections
    \       ${connections_list} =    Lookup connection uris  ${connections_list}
    \       Log To Console    Server_Profile_Template_URI_is_:_${server_profile_template_uri}
    \       ${result} =    Validate Server Profile Templates Connections Network As Expected    ${server_profile_template_uri}    ${connections_list}
    \       Should Be True    ${result}
    [Return]    True


Validate Server Profile Templates Connections Network As Expected
    [Arguments]    ${serverprofileUri}    ${expected_connections_list}
    [Documentation]    Validate Connection Network As Expected in Created Profile Template
    ${resp} = 	Fusion Api Get Server Profile Templates		uri=${serverprofileUri}
    ${connectionSettings} =    Get From Dictionary    ${resp}     connectionSettings
    @{connection_dict} =    Get From Dictionary    ${connectionSettings}     connections
    :FOR    ${connection}   IN    @{connection_dict}
    \       ${id} =    Get From Dictionary    ${connection}    id
    \       Log To Console    Current_Connection_ID_is: ${id}
    \       ${network} =    Get From Dictionary    ${connection}     networkUri
    \       Log To Console    The_current_connection_network_is_:_${network}
    \       ${expected_connection} =    Get From List    ${expected_connections_list}    ${id-1}
    \       Log To Console    The_expected_connection_network_is_:_${expected_connection['networkUri']}
    \       Return From Keyword If     '${network}'!='${expected_connection['networkUri']}'     FAIL_Connection_network_is_not_set_as_required
    [Return]    True