*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs
Resource             ./../../../../Resources/api/fusion_api_resource.txt
Resource             ../global_variables.robot

*** Keywords ***
Clear Test Environtment
    [Documentation]    Clear environment
    Log to console and logfile  Power Off Servers and remove all profiles
    Run Keyword And Ignore Error    Power off ALL servers   PressAndHold
    Run Keyword And Ignore Error    Wait For ALL Servers Complete Refresh
    Run Keyword And Ignore Error    Remove All Server Profiles

Update BIOS drop down value when create profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Create server profile with firmware baseline and configure BIOS drop down value
    Log to console and logfile  Create server profile to configure BIOS drop down value, with firmware baseline = ${isFirmware}
    ${profilelist} =    Generate Profile Body   ${createdropdownbiosProfiles}   ${isFirmware}   ${SNAP6SPP}
	${resps} =   Add Server Profiles from variable   ${profilelist}
	Validate Server Profile Task   ${resps}    ${HPSUT}

Update BIOS input value when create profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Create server profile with firmware baseline and configure BIOS input value
    Log to console and logfile  Create server profile to configure BIOS input value, with firmware baseline = ${isFirmware}
    ${profilelist} =    Generate Profile Body   ${createinputbiosProfiles}  ${isFirmware}    ${SNAP6SPP}
	${resps} =   Add Server Profiles from variable   ${profilelist}
	Validate Server Profile Task   ${resps}    ${HPSUT}


Update BIOS drop down value when edit profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Edit server profile with firmware baseline and configure BIOS drop down value
    Log to console and logfile  Edit server profile to configure BIOS drop down value, with firmware baseline = ${isFirmware}
    ${profilelist} =    Generate Profile Body   ${editdropdownProfiles}    ${isFirmware}    ${SNAP6SPP}
	${resps} =   Edit Server Profiles from variable   ${profilelist}
	Validate Server Profile Task   ${resps}    ${HPSUT}

Update BIOS input value when edit profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Edit server profile with firmware baseline and configure BIOS input value
    Log to console and logfile  Edit server profile to configure BIOS input value, with firmware baseline = ${isFirmware}
    ${profilelist} =    Generate Profile Body   ${editinputProfiles}   ${isFirmware}    ${SNAP6SPP}
	${resps} =   Edit Server Profiles from variable   ${profilelist}
	Validate Server Profile Task   ${resps}    ${HPSUT}

Generate Profile Body
    [Arguments]    ${profiles}    ${isFirmware}=${True}     ${baseLine}=${SNAP6SPP}
    [Documentation]    Generate profile body
    ${profilelist} =    Create List
    :FOR	${profile}	IN	@{profiles}
    \   ${hardware} =   Get from Dictionary	${profile}	serverHardwareUri
	\	${firmware} = 	Get from Dictionary	${profile}	firmware
	\   Set to Dictionary   ${firmware}	manageFirmware	${isFirmware}
	\	Set to Dictionary	${firmware}	firmwareBaselineUri	${baseLine}
	\	Set to Dictionary	${profile}	firmware	${firmware}
	\   append to list    ${profilelist}    ${profile}
	\   Log to console and logfile      Creat profile body for ${hardware}
	[Return]	${profilelist}

Create empty server profile
    [Arguments]    ${profiles}
    [Documentation]    Create empty server profile with given name
    Clear Test Environtment
    Log to console and logfile  Create empty server profile
    ${profilelist} =    Create List
    : FOR    ${profile}    IN    @{profiles}
    \    ${name} =    Get From Dictionary		${profile}	name
    \    Set to Dictionary	${emptyprofile}	name	${name}
    \    append to list    ${profilelist}    ${emptyprofile}
    ${resps} =   Add Server Profiles from variable   ${profilelist}
    :FOR	${resp}	IN	@{resps}
	\	${task} =	Wait For Task 	${resp} 	200s	2s
	\   ${taskStatus} =	Get From Dictionary		${task}	taskStatus
	\   ${taskState} =	Get From Dictionary		${task}	taskState
	\   Log to console and logfile  ${taskStatus}
	\   Log to console and logfile  ${taskState}
	\   should Be Equal     ${taskState}    Completed   msg=SP task status should be "Completed"

Validate BIOS setting Method
    [Arguments]    ${taskUri}    ${method}=${HPSUT}
    [Documentation]    Validate BIOS update by HPE Intelligent Provisioning or HPSUT
    Log to console and logfile  Validate BIOS setting Method
    ${task} =	Get Task By Param   param=?filter='parentTaskUri'='${taskUri}'&sort=created:descending&count=1
    Log to console and logfile  ${task}
    ${multiprogress} = 	Get From Dictionary		${task}     progressUpdates
    ${result} =    Run Keyword If     "${method}"=="${HPSUT}"   Validate Profile Task Without Intelligent Provisioning     ${multiprogress}
	Run Keyword If  "${result}"!="${None}"     Should Match    ${result}    Expected
    :FOR	${progress}	IN	@{multiprogress}
    \   ${status} = 	Get From Dictionary		${progress}     statusUpdate
    \   ${words} = 	Fetch From Left	${status}	${method}
    \    Log to console and logfile  ${status}
    \    Log to console and logfile  ${words}
    \    ${status} =    Replace String  ${status}   \"  ${EMPTY}
    \    ${words} =     Replace String  ${words}    \"  ${EMPTY}
    \   Return From Keyword If    "${words}"!="${status}"    Expected
    [Return]	BIOS is not configured by ${method}

Validate Server Profile Task
    [Arguments]    ${resps}    ${method}
    [Documentation]    Validate BIOS task complete with expected method
    Log to console and logfile  Validate BIOS task complete with expected method
    :FOR	${resp}	IN	@{resps}
    \   Log to console and logfile  ${resp}
	\	${task} =	Wait For Task 	${resp} 	5000s	20s
	\   ${taskStatus} =	Get From Dictionary		${task}     taskStatus
	\   ${taskState} =	Get From Dictionary		${task}     taskState
	\   Run Keyword and Ignore Error    Log to console and logfile  Error message is ${task['taskErrors'][0]['message']}
	\   should Be Equal     ${taskState}    Completed   msg=SP task status should be "Completed"
	\   Log to console and logfile  ${taskStatus}
	\   Log to console and logfile  ${taskState}
	\   ${taskUri} =	Get From Dictionary		${task}     uri
	\   ${result} =    Validate BIOS setting Method     ${taskUri}     ${method}
	\   Should Match    ${result}    Expected

Validate BIOS setting Invalid
    [Arguments]    ${task}
    [Documentation]    Validate BIOS setting with invalid value is not support for this hardware
    Log to console and logfile  Validate BIOS setting with invalid value for this hardware
    ${errorCode} =	Get From Dictionary		${task['taskErrors'][0]}   errorCode
    Should Match    ${errorCode}    InvalidParameterForBiosSetting

Validate SP BIOS Invalid Task
    [Arguments]    ${resps}
    [Documentation]    Validate task include invalid BIOS value will fail
    Log to console and logfile  Validate task include invalid BIOS value will fail
    :FOR	${resp}	IN	@{resps}
	\	${task} =	Wait For Task 	${resp} 	5000s	2s
	\   ${taskStatus} =	Get From Dictionary		${task}     taskStatus
	\   ${taskState} =	Get From Dictionary		${task}     taskState
	\   Log to console and logfile  ${taskStatus}
	\   Log to console and logfile  ${taskState}
	\   Validate BIOS setting Invalid     ${task}

Validate Profile Task Without Intelligent Provisioning
    [Arguments]    ${multiprogress}
    [Documentation]    Validate profile apply without HPE Intelligent Provisioning
    :FOR	${progress}	IN	@{multiprogress}
    \   ${status} = 	Get From Dictionary		${progress}     statusUpdate
    \   ${words} = 	Fetch From Left	${status}	${IP}
    \   ${status} =     Replace String  ${status}   \"  ${EMPTY}
    \   ${words} =      Replace String  ${words}    \"  ${EMPTY}
    \   Return From Keyword If    "${words}"!="${status}"    BIOS configure shouldn't be by ${IP}
    [Return]	Expected