*** Settings ***
Library				RoboGalaxyLibrary
Library				FusionLibrary
Library				OperatingSystem
Library				BuiltIn
Library				Collections
Library				XML
Library		        SSHLibrary
Library				String
Library				Dialogs
Resource             ./../../../../Resources/api/fusion_api_resource.txt
Resource             ../global_variables.robot

*** Keywords ***
Get Run Specific Data File Variables Login the Users And Validate Firmware Bundle
    ${TESTMODE} =    Get Variable Value    ${TESTMODE}    ${None}
    #Pass Execution If    '${TESTMODE}'=='${None}'    Will use default or command line data file ${DATA_FILE}
    #Log Variables

    Log To Console and Log File    \nTESTMODE:${TESTMODE}
    Run Keyword If     '${TESTMODE}'=='wpst30'    Import Variables    ${CURDIR}/F1184_HPSUT_Local_Storage_wpst30.py
    ...    ELSE    Run Keyword If    '${TESTMODE}'=='tbird14'    Import Variables    ${CURDIR}/F1184_HPSUT_Local_Storage_Tbird14.py
    ...    ELSE    Run Keyword If    '${TESTMODE}'=='otherenclosure'    Import Variables    ./Some_Other_Data_File
    #Log Variables

    Fusion Api Login Appliance         ${APPLIANCE_IP}        ${admin_credentials}

    Log To Console and Log File    TEST HARDWARE:${model}
    ${Snap5Uri} =   Get Firmware Bundle By Version  ${SNAP5BaseLine}
    Run Keyword If  '${model}'=='C7000'    Should Match    ${Snap5Uri}    ${SNAP5SPP}
    ${Snap6Uri} =   Get Firmware Bundle By Version  ${SNAP6BaseLine}
    Should Match    ${Snap6Uri}    ${SNAP6SPP}

Clear Test Environtment
    Log to console and logfile  Power Off Servers and remove all profiles
    Run Keyword And Ignore Error    Wait For ALL Server Profile In Normal State
    Run Keyword And Ignore Error    Power off ALL servers   PressAndHold
    Run Keyword And Ignore Error    Wait For ALL Servers Complete Refresh
    Run Keyword And Ignore Error    Remove All Server Profiles

Update local storage when create profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Create server profile with firmware baseline and configure local storage
    Clear Test Environtment
    Log to console and logfile  Create server profile to configure local storage, with firmware baseline = ${isFirmware}
    ${profilelist} =    Generate Profile Body   ${createProfiles}   ${isFirmware}
    ${resps} =   Add Server Profiles from variable   ${profilelist}
    Validate Server Profile Task   ${resps}    ${HPSUT}

Update local storage when edit profile
    [Arguments]    ${isFirmware}=${True}
    [Documentation]    Edit server profile with firmware baseline and configure local storage
    Log to console and logfile  Configure local storage, with firmware baseline = ${isFirmware} when edit profile
    ${profilelist} =    Generate Profile Body   ${editProfiles}   ${isFirmware}
    ${resps} =   Edit Server Profiles from variable   ${profilelist}
    Validate Server Profile Task   ${resps}    ${HPSUT}

Generate Profile Body
    [Arguments]    ${profiles}    ${isFirmware}=${True}     ${baseLine}=${SNAP6SPP}
    [Documentation]    Generate profile body
    ${profilelist} =    Create List
    :FOR    ${profile}    IN    @{profiles}
    \    ${hardware} =   Get from Dictionary    ${profile}    serverHardwareUri
    \    ${firmware} =     Get from Dictionary    ${profile}    firmware
    \    Set to Dictionary   ${firmware}    manageFirmware    ${isFirmware}
    \    Set to Dictionary    ${firmware}    firmwareBaselineUri    ${baseLine}
    \    Set to Dictionary    ${profile}    firmware    ${firmware}
    \    append to list    ${profilelist}    ${profile}
    \    Log to console and logfile      Creat profile body for ${hardware}
    [Return]    ${profilelist}

Generate Invalid Profile Body
    [Arguments]    ${profiles}    ${isFirmware}=${True}     ${baseLine}=${SNAP6SPP}
    [Documentation]    Generate profile body
    ${profilelist} =    Create List
    :FOR    ${profile}    IN    @{profiles}
    \    ${payload} =  copy dictionary  ${profile}
    \    ${hardware} =   Get from Dictionary    ${payload}    serverHardwareUri
    \    ${firmware} =     Get from Dictionary    ${payload}    firmware
    \    Set to Dictionary    ${firmware}    manageFirmware    ${isFirmware}
    \    Set to Dictionary    ${firmware}    firmwareBaselineUri    ${baseLine}
    \    Set to Dictionary    ${payload}    firmware    ${firmware}
    \    Set to Dictionary    ${payload}    localStorage    ${invalidLocalStorage}
    \    append to list    ${profilelist}    ${payload}
    \    Log to console and logfile      Creat profile body for ${hardware}
    [Return]    ${profilelist}

Create empty server profile
    [Arguments]    ${profiles}
    [Documentation]    Create empty server profile with given name
    Clear Test Environtment
    Log to console and logfile  Create empty server profile
    ${profilelist} =    Create List
    : FOR    ${profile}    IN    @{profiles}
    \    ${name} =    Get From Dictionary        ${profile}    name
    \    Set to Dictionary    ${emptyprofile}    name    ${name}
    \    append to list    ${profilelist}    ${emptyprofile}
    ${resps} =   Add Server Profiles from variable   ${profilelist}
    :FOR    ${resp}    IN    @{resps}
    \    ${task} =    Wait For Task     ${resp}     200s    2s
    \    Log to console and logfile    ${task}
    \    ${taskStatus} =    Get From Dictionary        ${task}    taskStatus
    \    ${taskState} =    Get From Dictionary        ${task}    taskState
    \    Log to console and logfile  ${taskStatus}
    \    Log to console and logfile  ${taskState}

Validate Local Storage Method
    [Arguments]    ${taskUri}    ${method}=${HPSUT}
    [Documentation]    Validate local storage update by HPE Intelligent Provisioning or HPSUT
    Log to console and logfile  Validate Local Storage Method
    ${task} =    Get Task By Param   param=?filter='parentTaskUri'='${taskUri}'&sort=created:descending&count=1
    Log to console and logfile  ${task}
    ${multiprogress} =     Get From Dictionary        ${task}     progressUpdates
    ${result} =    Run Keyword If     "${method}"=="${HPSUT}"   Validate Profile Task Without Intelligent Provisioning     ${multiprogress}
    Run Keyword If  "${result}"!="${None}"     Should Match    ${result}    Expected
    :FOR    ${progress}    IN    @{multiprogress}
    \    ${status} =     Get From Dictionary        ${progress}     statusUpdate
    \    ${words} =     Fetch From Left    ${status}    ${method}
    \    Log to console and logfile  ${status}
    \    Log to console and logfile  ${words}
    \    ${status} =     Replace String  ${status}   \"  ${EMPTY}
    \    ${words} =      Replace String  ${words}    \"  ${EMPTY}
    \    Return From Keyword If    "${words}"!="${status}"    Expected
    [Return]    Local Storage is not configured by ${method}

Validate Server Profile Task
    [Arguments]    ${resps}    ${method}
    [Documentation]    Validate firmware task complete with expected method
    Log to console and logfile  Validate firmware task complete with expected method
    :FOR    ${resp}    IN    @{resps}
    \    Log to console and logfile  ${resp}
    \    ${task} =    Wait For Task     ${resp}     100min    5s
    \    ${taskStatus} =    Get From Dictionary        ${task}     taskStatus
    \    ${taskState} =    Get From Dictionary        ${task}     taskState
    \    Log to console and logfile  ${taskStatus}
    \    Log to console and logfile  ${taskState}
    \    Should Match    ${taskState}    Completed
    \    ${taskUri} =    Get From Dictionary        ${task}     uri
    \    ${result} =    Validate Local Storage Method     ${taskUri}     ${method}
    \    Should Match    ${result}    Expected

Validate Raid Level Invalid
    [Arguments]    ${task}
    [Documentation]    Validate raid level is not support for this hardware
    Log to console and logfile  Validate raid level is not support for this hardware
    ${errorCode} =    Get From Dictionary        ${task['taskErrors'][0]}   errorCode
    Should Match    ${errorCode}    UNSUPPORTED_RAID_LEVEL

Validate Raid Level Invalid Task
    [Arguments]    ${resps}
    [Documentation]    Validate task include raid level is not support for this hardware error
    Log to console and logfile  Validate task include raid level is not support for this hardware error
    :FOR    ${resp}    IN    @{resps}
    \    ${task} =    Wait For Task     ${resp}     10s    2s
    \    ${taskStatus} =    Get From Dictionary        ${task}     taskStatus
    \    ${taskState} =    Get From Dictionary        ${task}     taskState
    \    Log to console and logfile  ${taskStatus}
    \    Log to console and logfile  ${taskState}
    \    Validate Raid Level Invalid     ${task}

Validate Profile Task Without Intelligent Provisioning
    [Arguments]    ${multiprogress}
    [Documentation]    Validate profile apply without HPE Intelligent Provisioning
    :FOR    ${progress}    IN    @{multiprogress}
    \    ${status} =     Get From Dictionary        ${progress}     statusUpdate
    \    ${words} =     Fetch From Left    ${status}    ${IP}
    \    ${status} =     Replace String  ${status}   \"  ${EMPTY}
    \    ${words} =      Replace String  ${words}    \"  ${EMPTY}
    \    Return From Keyword If    "${words}"!="${status}"    Local Storage shouldn't by ${IP}
    [Return]    Expected