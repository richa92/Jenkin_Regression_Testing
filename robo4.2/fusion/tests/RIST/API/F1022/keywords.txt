*** Settings ***
Library              FusionLibrary
Library              RoboGalaxyLibrary
Library              OperatingSystem
Library              BuiltIn
Library              copy
Library              Collections
Library              String
Resource             ../../../../Resources/api/fusion_api_resource.txt
Resource             ../global_variables.robot

*** Keywords ***
Remove All FC Licenses
    [Documentation]    Remove All FC licenses
    Remove All Uplinksets
    ${getlicresp}=    Fusion Api Get Licenses
    :FOR    ${eachlic}     IN    @{getlicresp['members']}
    \       Continue For Loop If   '${eachlic["product"]}' != '${newLicenses["licenseType"]}'
    \       ${delResp}=    Fusion Api Remove License  uri=${eachlic['uri']}
    \       Should Be Equal As Integers    ${delResp["status_code"]}   204

Get Logical Interconnect Response Based On Name
    [Documentation]    Get Logical Interconnect Response Based On Name
    [Arguments]    ${liName}
    ${lis}=  Fusion Api Get Li
    :FOR    ${li}    IN    @{lis["members"]}
    \       Return From Keyword If  '${li["name"]}' == '${liName}'   ${li}
    \       Continue For Loop
    [Return]   /bad_logical_uri

Validate Exist Valid Licenses In License Pool But Unassigned To ICM
    [Documentation]  The licenses are existing in license pool, but unassigned to ICM
    [Arguments]  ${LicensesDict}
    ${licenses}=       Get All Licenses
    ${validLicenses}=     Get From Dictionary  ${LicensesDict}  license
    ${latestlLicense}=    Create List
    :FOR    ${ovLic}    IN    @{licenses}
    \       Continue For Loop If  '${ovLic["product"]}' != '${LicensesDict["licenseType"]}'
    \       Should Be Empty   ${ovLic["nodes"]}
    \       Append To List    ${latestlLicense}    ${ovLic["key"]}
    :FOR    ${validLicense}  IN    @{validLicenses}
    \       List Should Contain Value  ${latestlLicense}  ${validLicense["key"]}  msg=The licenses should be exisgting in license pool

Validate Exist Valid Licenses In License Pool And Assigned To ICM
    [Documentation]    Validate Exist Valid Licenses In License Pool And Assigned To ICM
    [Arguments]  ${LicenseDict}  ${li_resp}
    ${licenses}=       Get All Licenses
    ${validInterconnects}=    Create List
    :FOR    ${ovLic}    IN    @{licenses}
    \       Continue For Loop If  '${ovLic["product"]}' != '${LicenseDict["licenseType"]}'
    \       Should Not Be Empty   ${ovLic["nodes"]}
    \       Append To List  ${validInterconnects}  ${ovLic["nodes"][0]["nodeUri"]}
    ${In_resp}=    Get From Dictionary  ${li_resp}  interconnects
    :FOR    ${INC}    IN    @{validInterconnects}
    \       List Should Contain Value   ${In_resp}  ${INC}

Validate Not Exist FC Licenses In License Pool
    [Documentation]    Validate Not Exist FC Licenses In License Pool
    [Arguments]  ${LicenseDict}
    ${licenses}=       Get All Licenses
    Run Keyword If    ${licenses} == '/rest/licenses_not_found'
    ...               Return From Keyword    ${licenses}
    ${latestlLicense}=    Create List
    :FOR    ${ovLic}    IN    @{licenses}
    \       Continue For Loop If  '${ovLic["product"]}' != '${LicenseDict["licenseType"]}'
    \       Append To List    ${latestlLicense}    ${ovLic["key"]}
    Should Be Empty   ${latestlLicense}

Validate Invalid Licenses Is Not Existing In License Pool
    [Documentation]    Validate Invalid Licenses Is Not Existing In License Pool
    [Arguments]   ${LicensesDict}
    ${licenses}=       Get All Licenses
    ${invalidLicenses}=     Get From Dictionary  ${LicensesDict}  invalidLicense
    ${latestlLicense}=    Create List
    :FOR    ${ovLic}    IN    @{licenses}
    \       Append To List    ${latestlLicense}    ${ovLic["key"]}
    :FOR    ${invalidLicense}  IN    @{invalidLicenses}
    \       List Should Not Contain Value    ${latestlLicense}  ${invalidLicense["key"]}  msg=Invalid license should not be existing in license pool

Validate FC Licenses Didn't Impact Server Hardware
    [Documentation]  FC upgrade licenses will not impact server hardware
    ${serverHardwares}=    Fusion Api Get Server Hardware
    :FOR    ${serverHardware}    IN    @{serverHardwares["members"]}
    \       Should Not Be empty    ${serverHardware["uri"]}    msg=No URI was found
    \       ${valDict} =    Create Dictionary    licensingIntent=NotApplicable
    \       Validate Response    ${serverHardware}    ${valDict}

Validate Logical Interconnect FC License Consumption
    [Documentation]    Validate Logical Interconnect FC License Consumption  
    [Arguments]    ${li}  ${consumed}  ${applied}
    ${li_resp}=    Get Logical Interconnect Response Based On Name  ${li}
    Log    ${li_resp}    console=true
    Should Not Be Equal As Strings  ${li_resp}  /bad_logical_uri
    Convert To Integer  ${consumed}
    Run Keyword If   '${applied}'=='No'    Should Be Equal    ${li_resp["icmLicenses"]}    ${None}
    Run Keyword If   '${applied}'=='No'    Return From Keyword    ${li_resp}
    ${sub_resp}=   Set Variable    ${li_resp["icmLicenses"]["license"][0]}
    ${valDict} =   Create Dictionary    consumedCount=${consumed}
    Validate Response    ${sub_resp}    ${valDict}
    ${valDict} =   Create Dictionary    state=${applied}
    Validate Response    ${sub_resp}    ${valDict}
    [Return]   ${li_resp}