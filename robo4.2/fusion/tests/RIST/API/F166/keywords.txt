*** Settings ***
Library              FusionLibrary
Library              RoboGalaxyLibrary
Library              OperatingSystem
Library              BuiltIn
Library              Collections
Library              ../../../wpst_crm/crm_austin/lib/WPSTUtil.py

Resource             ../../../../Resources/api/fusion_api_resource.txt
Resource             ../global_variables.robot

*** Keywords ***
Delete and Re-configure VC Domain
    [Documentation]  Remove and Initialize VC, then send command to add networks/fcs/server profiles etc.
    [Arguments]      ${vc_credentials}  ${oa_credentials}  ${vc_config_file}  ${waitTime}=2 min  ${doubleDense}=${False}
    WPST Delete Domain VC          ${vc_credentials}    ${oa_credentials}
    Log     Success: Deleted VC Domain...    console=True
    Log     Waiting ${waitTime} minutes...    console=True
    Sleep    ${waitTime}

    WPST Configure VC   vc_credentials=${vc_credentials}  oa_credentials=${oa_credentials}  config=${vc_config_file}  doubleDense=${doubleDense}
    Log     Success: Configured VC Domain...    console=True

Clear Base Resources
    [Documentation]   Delete base resources
    Log    \nCleaning test environment before test...    console=True
    Power off ALL servers          control=PressAndHold
    Remove All Server Profiles     force=${True}
    Remove All Server Profile Templates
    Wait For ALL Enclosures Complete Refresh
    Remove ALl Enclosures          param=?force=true
    Remove All Enclosure Groups    True
    Remove All LIGs
    Remove All Ethernet Networks
    Remove All FC Networks
    Remove All FCoE Networks
    Remove All Network Sets
    Remove ALl Server Hardware Types
    Remove ALL San Managers Async

Verify Gen6 Server Hardware PowerState And State
    [Documentation]    Verify Gen6 Server Hardware PowerState And State
    [Arguments]		${enc_server}
    ${sh}=    Get Server Hardware Resp    ${enc_server}
    ${powerState} =    Get From Dictionary  ${sh}  powerState
    ${state} =     Get From Dictionary    ${sh}    state
    Log  Verifying Gen6 Server Hardware same as expect...    console=True
    should Be Equal            '${powerState}'    'On'    msg=${enc_server} powerstate should be "On"
    should Be Equal            '${state}'    'Monitored'    msg=${enc_server} state should be "Monitored"

Verify Gen5 Server Hardware PowerState And State
    [Documentation]   Verify Gen5 Server Hardware PowerState And State
    [Arguments]		${enc_server}
    ${sh}=    Get Server Hardware Resp    ${enc_server}
    ${powerState} =    Get From Dictionary  ${sh}  powerState
    ${state} =     Get From Dictionary    ${sh}    state
    Log  Verifying Gen5 Server Hardware same as expect..    console=True
    should Be Equal            '${powerState}'    'Unknown'    msg=${enc_server} powerstate should be "Unknown"
    should Be Equal            '${state}'    'Unsupported'    msg=${enc_server} state should be "Unsupported"

Verify Gen7 to Gen9 Server Hardware PowerState
    [Documentation]  Verify Gen7 to Gen9 Server Hardware PowerState
    [Arguments]		${enc_server}
    Log  Verifying Gen7/8/9 Server Hardware same as expect..    console=True
    ${sh}=    Get Server Hardware Resp    ${enc_server}
    should not be equal as strings  ${sh}  /rest/server_hardware_${sh}_not_found
    ${powerState} =    Get From Dictionary  ${sh}  powerState
    should Be Equal            '${powerState}'    'On'    msg=${enc_server} powerstate should be "On"

Vefiry Server Profiles Assigned
    [Documentation]  Vefiry Server Profiles Assigned
    [Arguments]		${enc_server}
    ${sh}=    Get Server Hardware Resp    ${enc_server}
    should not be equal as strings  ${sh}  /rest/server_hardware_${sh}_not_found
    ${state} =     Get From Dictionary    ${sh}    state
    should Be Equal            '${state}'    'ProfileApplied'    msg=${enc_server} state should be "ProfileApplied" and current state is ${state}


Verify Server Profiles Non Assigned
    [Documentation]  Verify Server Profiles Non Assigned
    [Arguments]		${enc_server}
    ${sh}=    Get Server Hardware Resp    ${enc_server}
    should not be equal as strings  ${sh}  /rest/server_hardware_${sh}_not_found
    ${state} =     Get From Dictionary    ${sh}    state
    should Be Equal            '${state}'    'NoProfileApplied'    msg=${enc_server} state should be "NoProfileApplied" and current state is ${state}

Verify Server Profiles Status
    [Documentation]  Verify Server Profiles Status
    [Arguments]		${sp}
    ${spresp}=                  Get Server Profile Resp     ${sp}
    should not be equal as strings  ${spresp}  /rest/server_profile_${sp}_not_found
    ${status}=                  Get From Dictionary    ${spresp}    status
    ${serverHardwareUri}        Get From Dictionary    ${spresp}    serverHardwareUri
    Should Match Regexp         ${status}    (?i)OK|Warning    msg=${sp} status should be "OK" and now status is ${Status}
    Should Not Be Equal         '${serverHardwareUri}'    'null'    msg=${sp} is not assigned

Get Server Hardware Resp
    [Documentation]  Get Server Hardware Resp
	[Arguments]		${server}
	${resp} = 	Fusion Api Get Server Hardware	 param=?filter="'name'=='${server}'"
	Return From Keyword If  ${resp['count']}==0  /rest/server_hardware_${server}_not_found
	[Return]  ${resp['members'][0]}

Get Server Profile Resp
    [Documentation]  Get Server Profile Resp
    [Arguments]		${sp}
	${resp} = 	Fusion Api Get Server Profiles		param=?filter="'name'=='${sp}'"
	Return From Keyword If  ${resp['count']}==0  /rest/server_profile_${sp}_not_found
	[Return]	${resp['members'][0]}


Get Assgined Server Profiles serverHardwareUri
    [Documentation]  Get Assgined Server Profiles serverHardwareUri
    [Arguments]		${sp}
	${SProfile}=       Get Server Profile Resp  ${sp}
	${serverHardwareUri} =    Get From Dictionary  ${SProfile}  serverHardwareUri
	[Return]  ${serverHardwareUri}

Get Ethernet URI by name
    [Documentation]  Get Ethernet URI by name
	[Arguments]		${net}
	${resp} = 	Fusion Api Get Ethernet Networks		param=?filter="'name'=='${net}'"
	Return From Keyword If  ${resp['count']}==0  /rest/network_uri_${net}_not_found
	${uri} = 	Get From Dictionary		${resp['members'][0]}	uri
	[Return]	${uri}

Verify Server Profiles Status And Boot
    [Documentation]  Verify Server Profiles Status And Boot
    [Arguments]     ${sp}   ${net}
    ${spresp}=                  Get Server Profile Resp     ${sp}
    should not be equal as strings  ${spresp}  /rest/server_profile_${sp}_not_found
    ${connections}=             Get From Dictionary    ${spresp["connectionSettings"]}    connections
    Verify Server Profiles Status       ${sp}
    ${neturi}=                  Get Ethernet URI by name    ${net}
    :FOR    ${con}   IN    @{connections}
    \       continue for loop If    '${con["networkUri"]}' != '${neturi}'
    \       should Be Equal         '${con["boot"]["priority"]}'    'Primary'   msg=${net} bootable should be "Primary"

Pause And Clear Base Resources
    [Documentation]  Pause And Clear Base Resources
    [Arguments]    ${appliance}    ${credentials}
    Fusion Api Login Appliance    ${appliance}    ${credentials}
    Clear Base Resources
