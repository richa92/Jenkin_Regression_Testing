*** Settings ***
Library             RoboGalaxyLibrary
Library             FusionLibrary
Library             OperatingSystem
Library             BuiltIn
Library             robot.libraries.String
Library             String
Library             Dialogs
Library             SSHLibrary
Library             Collections
Resource            ../global_variables.robot
Variables           ${DATA_FILE}
# Keyword File

*** Keywords ***
Edit authentication switch
    [Documentation]    Enable / disable login domain global settings switch
    [Arguments]    ${item}    ${value}
    ${resp} =  Fusion Api Get Login Domains Global Settings
    Set To Dictionary    ${resp}    ${item}    ${value}
    Remove From Dictionary    ${resp}    headers    status_code
    [Return]    ${resp}

Set directory server login domain as default
    [Documentation]    set directory server login domain as the default login domain
    [Arguments]     ${configure_item}    ${default_item}    ${domain_name}
    ${resp} =  Fusion Api Get Login Domains Global Settings
    ${index} =    Set Variable    ${0}
    :FOR    ${item}    IN    @{resp['${configure_item}']}
    \    Continue For Loop If    '${item["name"]}'!='${domain_name}'
    \    ${index} =  Get Index From List    ${resp['${configure_item}']}    ${item}
    Set To Dictionary    ${resp}    ${default_item}    ${resp['${configure_item}'][${index}]}
    Remove From Dictionary    ${resp}    headers    status_code
    Fusion Api Edit Login Domains Global Settings    ${resp}

Update 2FA validation values
    [Documentation]    Edit  cert owner or OID boxes of 2FA validations
    [Arguments]    ${validation_item}    ${value}
    ${resp} =  fusion api get login domains login certificates
    Set To Dictionary    ${resp}    ${validation_item}    ${value}
    Remove From Dictionary    ${resp}    eTag    created    modified    category    uri    headers    status_code
    Log Dictionary    ${resp}
    [Return]    ${resp}

Update 2FA validation domain values
    [Documentation]    Edit cert domain of 2FA validations
    [Arguments]    ${validation_item1}    ${value1}    ${validation_item2}    ${value2}
    ${resp} =  fusion api get login domains login certificates
    Set To Dictionary    ${resp}    ${validation_item1}    ${value1}    ${validation_item2}    ${value2}
    Remove From Dictionary    ${resp}    eTag    created    modified    category    uri    headers    status_code
    Log Dictionary    ${resp}
    [Return]    ${resp}

Check updated 2FA validation configurations
    [Documentation]    Check whether the 2FA validation configurations updated successfully
    [Arguments]    ${validation_item}    ${expected_result}
    ${resp} =  fusion api get login domains login certificates
    Log    ${resp}
    Lists Should Be Equal    ${resp['${validation_item}']}    ${expected_result}    msg=Fail to update 2FA validation configurations

Check updated 2FA authentication settings
    [Documentation]    Check whether the login domains global settings updated successfully
    [Arguments]     ${item}    ${expected_result}
    ${resp} =  Fusion Api Get Login Domains Global Settings
    Log    ${resp}
    Should Be Equal    '${resp['${item}']}'    '${expected_result}'    msg=Fail to update login domains global settings

Get Global Setting Body With New Login Message
    [Documentation]    Edit login message and return new logins domains global settings body
    [Arguments]    ${item}    ${item_value}
    ${resp} =  Fusion Api Get Login Domains Global Settings
    Set To Dictionary    ${resp['loginMessage']}    ${item}    ${item_value}
    Remove From Dictionary    ${resp}    headers    status_code
    [Return]    ${resp}

2FA Login
    [Documentation]    2FA login appliance via running curl command and get its sessionID
    [Arguments]    ${client_cert_command}
    Open Connection    ${remote_ip}
    Login    ${ssh_cred['username']}    ${ssh_cred['password']}
    ${output} =  Execute command    ${curl_commands['part1']}${X-API-Version}${client_cert_command}${APPLIANCE_IP}${curl_commands['part3']}
    ${response1} =  robot.libraries.String.fetch from right    ${output}    HTTP/1.1${space}
    log    ${response1}
    ${response2} =  robot.libraries.String.fetch from left    ${response1}    \nDate
    ${first_line} =  robot.libraries.String.Split To Lines    ${response2}    0
    [Return]    ${first_line[0]}

Edit successful 2FA login configurations
    [Documentation]    Edit 2FA validation configuration with correct values and in this case 2FA login successfully
    [Arguments]    ${2FA_login_body}
    ${resp} =  Fusion Api Edit Login Domains Login Certificates    ${2FA_login_body}
    Should be equal    '${resp['status_code']}'    '200'    msg= Fail to edit 2FA login validation configuration
    Remove From Dictionary    ${resp}    headers    status_code    eTag    created    modified
    Should be equal    ${resp}    ${2FA_login_body}    msg=Fail to edit 2FA login validation configuration

Setup 2FA login evn in linux
    [Documentation]   setup evn for 2FA login via running curl commands
    Open Connection    ${remote_ip}
    Login    ${ssh_cred['username']}    ${ssh_cred['password']}
    Execute Command    mkdir -p ${destination_path}
    Execute Command    chmod -R 777 ${destination_path} 
    SSHLibrary.Put File    ${CURDIR}/OVF2532_auto_client-cert.pem    ${destination_path}
    SSHLibrary.Put File    ${CURDIR}/Special_characters_client-cert.pem    ${destination_path}
    SSHLibrary.Put File    ${CURDIR}/Special_number_client-cert.pem    ${destination_path}
    SSHLibrary.Put File    ${CURDIR}/curl_tool.zip    ${destination_path}
    Sleep    10
    :For    ${command}    IN    @{setup_evn_commands}
    \    Execute command    ${command}
    \    Sleep    10
    Close Connection

Clear evn in linux
    [Documentation]   clear evn for 2FA login via running curl commands
    Open Connection    ${remote_ip}
    Login    ${ssh_cred['username']}    ${ssh_cred['password']}
    :For    ${command}    IN    @{clear_evn_commands}
    \    Execute command    ${command}
    Close Connection

Check Cert Exists
    [Documentation]    check cert exists
    [Arguments]    ${aliasname}
    ${response}=    Fusion Api Get Certificate Status 
    ${cert_list}=    Set variable    ${response['members']}
    ${count}=    Get Length    ${cert_list}
    : FOR    ${INDEX}    IN RANGE    1    ${count}
    \    ${temp}=    Get From Dictionary    ${cert_list[${INDEX}]}    aliasName
    \    Return From Keyword If    '${temp}'=='${aliasname}'    True
    \    Continue For Loop If    '${temp}'!='${aliasname}'
    [Return]    False