*** Settings ***
Library     RoboGalaxyLibrary
Library     FusionLibrary
Library     OperatingSystem
Library     BuiltIn
Library     Collections
Library     XML
Library     SSHLibrary
Library     String
Library     robot.api.logger

*** Keywords ***
Wait For Task
    [Documentation]     Waits for a task to reach an end-state
    [Arguments]     ${resp}   ${timeout}=60 s   ${interval}=2 s
    Should Contain  ${resp}  uri
    ${task} =   Wait Until Keyword Succeeds     ${timeout}  ${interval}    Task Reached Endstate   ${resp}
    [Return]    ${task}

Wait For Task and Fail On Error
    [Documentation]     Waits for a task to reach an end-state
    [Arguments]     ${resp}   ${timeout}=60 s   ${interval}=2 s
    Should Contain  ${resp}  uri
    ${task} =   Wait Until Keyword Succeeds     ${timeout}  ${interval}    Task Reached Endstate   ${resp}
    Run Keyword If    '${task['taskState']}' == 'Error'    Output Task Error Messages    ${task['taskErrors']}
    Run Keyword If    '${task['taskState']}' == 'Error'   Fail
    [Return]    ${task}

Output Response Error Messages
    [Documentation]     Output all response errors
    [Arguments]     ${response}
    Log     \n Response code is: ${response['status_code']}  console=${True}
    Log     \n Message: ${response['message']}  console=${True}
    Log     \n recommendedActions: ${response['recommendedActions']}  console=${True}

Output Task Error Messages
    [Documentation]     Output all task errors
    [Arguments]     ${taskErrors}
    :FOR   ${taskError}  IN  @{taskErrors}
    \       Log      \nTask completed with errors  console=${True}
    \       Log      \nMessage: ${taskError['message']}  console=${True}
    \       Log      \nRecommended Action: ${taskError['recommendedActions']}  console=${True}

Task Reached Endstate
    [Documentation]  Validate that task response has reach the end state
    [Arguments]    ${resp}
    # Set Log Level   TRACE
    Should Contain  ${resp}  uri
    ${task_uri} =       Get From Dictionary     ${resp}   uri
    ${task} =           Fusion Api Get Task     uri=${task_uri}
    Console      \t Task: [${task['category']}:${task['name']}] is: ${task['taskState']} for resource: ${task['associatedResource']['resourceName']} ${task['associatedResource']['resourceUri']}
    Should Match Regexp     ${task['taskState']}   ((?i)Warning|Unknown|Terminated|Killed|Error|Completed)
    [Return]    ${task}

Login to OneView Via REST API
    [Documentation]    Connects to the Appliance and creates a session using the Username and Password.
    [Documentation]    Example:\n| Login to Fusion Via REST
    Should Not Be Equal    ${APPLIANCE_IP}    'unknown'    msg=Please specify a valid Fusion IP address or hostname
    Console  \n With IP ${APPLIANCE_IP} (${admin_credentials})...
    ${Response}    ${AUTHTOKEN}    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Set Suite Variable   ${AUTHTOKEN}
    Console      Auth token: ${AUTHTOKEN}
    Set OneView Version Metadata
    Should Match StatusCode in Response      ${Response}   ${200}
    Set Suite Variable    ${LOGGED}  ${True}

Set OneView Version Metadata
    [Documentation]    Get the version ident string from OneView
    ${Response}=    Fusion Api Get Appliance Version
    Log    ${Response}
    Set Suite Metadata     OneView Version    ${Response['softwareVersion']} : ${Response['date']}    top=True

Should Match StatusCode in Response
    [Documentation]  Validate status code in Response and fail with error message if not matched with expected one
    ...   Example:   Should Match StatusCode in Response    ${resp}    ${200}
    [Arguments]    ${resp}  ${expectedValue}
    ${actualValue}=    Get From Dictionary    ${resp}   status_code
    Run Keyword and Return If    '${actualValue}'=='${expectedValue}'   Console     Assert: status_code is ${actualValue} as expected.
    ${status}=     Run Keyword and Return Status     Should contain    ${resp}    errorCode
    ${errorMsg}=    Run Keyword If  ${status}        Catenate    Error:   ${actualValue}   ${resp['errorCode']}   ${resp['message']}
    ...             ELSE    Set Variable    ${EMPTY}
    Fail    msg=Assert: validation failed. Expected:${expectedValue} | Actual:${actualValue}. ${errorMsg}
