*** Settings ***
Library                        RoboGalaxyLibrary
Library                        FusionLibrary
Library                        OperatingSystem
Library                        BuiltIn
Library                        Collections
Library                        XML
Library                        SSHLibrary
Library                        String
Library                        Dialogs
Resource                       ./../../../../Resources/api/fusion_api_resource.txt
Resource                       ../global_variables.robot

*** Keywords ***
Verify Firmwares Exist
    [Arguments]    ${ExpectedFirmware}    ${Existed}=${TRUE}
    [Documentation]    Verify Firmwares Exist
    Log          Verifying Firmware Exist is ${Existed}...      console=True
    ${resp} =    Fusion Api Get Firmware Driver
    Return From Keyword If  ${resp['count']}==0  Firmware Not Found
    ${FirmwareVersions} =  Create List
    :FOR        ${firmware}        IN        @{resp['members']}
    \   Append To List  ${FirmwareVersions}    ${firmware['version']}
    :FOR    ${FirmwareVersion}   IN  @{ExpectedFirmware}
    \   Run Keyword If    ${Existed}==${TRUE}    Should Contain   ${FirmwareVersions}   ${FirmwareVersion}
    \   ...    ELSE    Should Not Contain   ${FirmwareVersions}   ${FirmwareVersion}
    \   Log     Firmware repo verified: ${FirmwareVersion}     console=true

Verify Firmwares Status
    [Arguments]                ${firmwares}    ${status}
    [Documentation]    Verify Firmwares Status
    Log    Verifying Firmare Status...    console=true
    :FOR   ${fwVersion}   IN  @{firmwares}
    \   Log          Firmware bundle version is ${fwversion}    console=true
    \   ${uri} =    Get Firmware Bundle By Version  ${fwVersion}
    \   ${firmware} =    Get Firmware Bundle   ${uri}
    \   Should Be Equal    ${firmware['status']}   ${status}    msg=${firmware['name']} status verify failed

Catenate List
    [Arguments]    ${list}    ${separator}=,
    [Documentation]    Catenate List
    ${rt} =    Set Variable    ${Empty}
    :FOR    ${item}    IN    @{list}
    \    ${rt} =    Set Variable    ${rt}${item}${separator}
    [Return]    ${rt}

Generate Firmware Body
    [Arguments]    ${baseline}    ${type}    ${force}=${False}
    [Documentation]    Generate Firmware body
    ${payload} =    Copy Dictionary    ${firmware_payload}
    ${firmware_uri} =    Get Firmware Bundle By Version    ${baseline}
    Set to Dictionary    ${payload}    firmwareBaselineUri    ${firmware_uri}
    Set to Dictionary    ${payload}    firmwareInstallType    ${type}
    Set to Dictionary    ${payload}    forceInstallFirmware    ${force}
    [Return]    ${payload}

Add Server Profile Template With Scopes
    [Arguments]    ${profile_template}    ${scopes}
    [Documentation]    Add Server Profile Template With Scopes
    ${scope_names} =    Run Keyword For List    ${scopes}    Add Scope Type
    ${payload} =    Set To Dictionary    ${profile_template}    initialScopeUris    ${scope_names}
    ${resp} =    Add Server Profile Template    ${payload}
    [Return]    ${resp}

Edit Server Profile with FW
    [Arguments]    ${firmware}  ${updatetype}  ${profile}
    [Documentation]    Edit Server Profile With Scopes
    ${firmware} =  Generate Firmware Body  ${firmware}   ${updatetype}
    ${edit_profile} =  Copy Dictionary    ${profile}
    Set To Dictionary    ${edit_profile}    firmware    ${firmware}
    ${resp}=  Edit Server Profile  ${edit_profile}
    [Return]    ${resp}

Add Server Profile With Spcopes
    [Arguments]    ${profile}    ${scopes}
    [Documentation]    Add Server Profile With Scopes
    ${scope_names} =    Run Keyword For List    ${scopes}    Add Scope Type
    ${payload} =    Set To Dictionary    ${profile}    initialScopeUris    ${scope_names}
    ${resp} =    Add Server Profile    ${payload}
    [Return]    ${resp}

Add Server Profile From SPT With Firmware and Scopes
    [Arguments]    ${profile}    ${scopes}  ${firmware}  ${updatetype}  ${param}
    [Documentation]    Add Server Profile From SPT With Diff Firmware and Scopes
    ${scope_names} =    Run Keyword For List    ${scopes}    Add Scope Type
    ${payload} =    Set To Dictionary    ${profile}    initialScopeUris    ${scope_names}
    ${payload} =    Create Server Profile POST Payload from SPT  ${profile}  api=${none}
    ${firmware_up} =  Generate Firmware Body   ${firmware}    ${updatetype}
    ${payload} =    Set To Dictionary    ${payload}    firmware    ${firmware_up}
    ${resp} =   Fusion Api Create Server Profile   body=${payload}    param=${param}
    Run Keyword And Continue on Failure   should be equal as integers  ${resp['status_code']}  202
    [Return]    ${resp}

Add Scope Type
    [Arguments]    ${scope}
    [Documentation]    Add Scope Type
    ${uri} =    Set Variable    Scope:${scope}
    [Return]    ${uri}

Clear Test Environtment
    [Documentation]    Clear Test Environtment
    Log     Power Off Servers and remove all profiles    console=true
    Run Keyword And Ignore Error    Wait For ALL Server Profile In Normal State
    Run Keyword And Ignore Error    Power off ALL servers   PressAndHold
    Run Keyword And Ignore Error    Wait For ALL Servers Complete Refresh
    Run Keyword And Ignore Error    Remove All Server Profiles

Validate Firmware Installed
    [Arguments]    ${serverProfile}  ${firmwareBaseline}
    [Documentation]    Check if firmware updated
    Log    Check if firmware update    console=true
    ${firmwareID} =    Get Firmware Bundle UUID By Version    ${firmwareBaseline}
    ${hardware} =   Get from Dictionary    ${serverProfile}    serverHardwareUri
    Log     Validating ${hardware}    console=true
    ${firmwareComponents} =    Get Server Hardware Firmware Compliance    ${hardware}    ${firmwareID}
    Log     Validating ${firmwareComponents}    console=true
    Run Keyword And Continue On Failure    Validate Firmware Components    ${firmwareComponents['componentMappingList']}
    Log     Firmware update success!    console=true

Validate Firmware Components
    [Arguments]    ${firmwareComponents}
    [Documentation]    Check if component firmware update required
    :FOR    ${component}    IN    @{firmwareComponents}
    \    ${required} =   Get from Dictionary    ${component}    componentFirmwareUpdateRequired
    \    ${componentName} =   Get from Dictionary    ${component}    componentName
    \    ${installedVersion} =   Get from Dictionary    ${component}    installedVersion
    \    ${baselineVersion} =   Get from Dictionary    ${component}    baselineVersion
    \    Should Not Be True    ${required}    Component ${componentName} verify failed! Installed: ${installedVersion}. Baseline: ${baselineVersion}.

Validate Profile Firmware Applied
    [Arguments]    ${profile}
    [Documentation]    Check if profile firmware applied
    Wait Until Keyword Succeeds    4000    10    Validate Firmware Applied    ${profile}

Validate Firmware Applied
    [Documentation]    Validate firmware applied on server profile
    [Arguments]    ${profile}
    ${state} =   Get Server Profile Firmware Install State    ${profile}
    Should be equal    ${state}    Activated