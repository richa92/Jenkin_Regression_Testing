*** Settings ***
Variables      ${DATA_FILE}
Resource       ../../../../Resources/api/fusion_api_resource.txt

*** Keywords ***
Verify Old Sever Added
    [Arguments]        ${Server_IP}
    [Documentation]    Verify Old Severs Added
    ${verified} =    set variable    False
    ${resp} =    Fusion Api Get Server Hardware
     :FOR    ${member}    IN    @{resp['members']}
    \       ${status} =      Get From Dictionary  ${member}  status
    \       ${state} =      Get From Dictionary  ${member}  state
    \       ${mpHostInfo} =    Get From Dictionary  ${member}  mpHostInfo
    \       ${mpIpAddresses} =    Get From Dictionary  ${mpHostInfo}  mpIpAddresses
    \       Run Keyword If    '${mpIpAddresses[0]['address']}'=='${Server_IP}'    should be true  '${status}' == 'OK' or '${status}' == 'Warning'
    \       Run Keyword If    '${mpIpAddresses[0]['address']}'=='${Server_IP}'    should be true  '${state}' == 'Monitored'
    \       Run Keyword And Return If    '${mpIpAddresses[0]['address']}'=='${Server_IP}'    Set Variable  ${verified}  True
    Run Keyword If    '${verified}'!='True'    Fail    The Server not verified

Add Cert Of SelfSigned REPO Or IPDU
    [Arguments]        ${add_cert}
    [Documentation]    Add SelfSigned REPO Or IPDU
    Log    Get repo or ipdu's cert    console=Yes
    ${certificateDetails} =    Get From Dictionary    ${add_cert}    certificateDetails
    ${device_ip} =    Get From Dictionary    ${certificateDetails[0]}    aliasName
    ${base64Data} =    Get Remote Sever Cert    ${device_ip}
    Set to Dictionary    ${certificateDetails[0]}    base64Data    ${base64Data}
    Set to Dictionary    ${add_cert}    certificateDetails    ${certificateDetails}
    Log    Add repo or ipdu's cert    console=Yes
    ${resp} =    Fusion Api Import Server Certificate    ${add_cert}
    Wait For Task2    ${resp}

Get Remote Sever Cert
    [Arguments]        ${Server_IP}
    [Documentation]    Get the remote server cert
    ${resp} =    Fusion Api Get Remote Certificate    ${Server_IP}
    ${certificateDetails} =    Get From Dictionary    ${resp}    certificateDetails
    ${base64Data} =    Get From Dictionary    ${certificateDetails[0]}   base64Data
    [Return]    ${base64Data}

Verify Firmwares Exist
    [Arguments]        ${ExpectedFirmware}    ${Existed}=${TRUE}
    [Documentation]    Verify Firmwares Exist
    Log    Verifying Firmware Exist is ${Existed}...    console=Yes
    ${resp} =     Fusion Api Get Firmware Driver
    Run Keyword And Return If  ${resp['count']}==0  Fail    Firmware Not Found
    ${FVersions} =  Create List
    :FOR    ${firmware}    IN    @{resp['members']}
    \   Append To List  ${FVersions}    ${firmware['version']}
    :FOR    ${FirmwareVersion}   IN  @{ExpectedFirmware}
    \   Run Keyword If    ${Existed}==${TRUE}    Should Contain   ${FVersions}   ${FirmwareVersion}
    \   ...    ELSE    Should Not Contain   ${FVersions}   ${FirmwareVersion}
    \   Log    Firmware repo verified: ${FirmwareVersion}    console=Yes

Verify Firmwares Status
    [Arguments]        ${firmwares}    ${status}
    [Documentation]    Verify Firmwares Status
    Log    Verifying Firmare Status...    console=Yes
    :FOR   ${fwVersion}   IN  @{firmwares}
    \   Log    Firmware bundle version is ${fwversion}    console=Yes
    \   ${uri} =    Get Firmware Bundle By Version  ${fwVersion}
    \   ${firmware} =    Get Firmware Bundle   ${uri}
    \   Should Be Equal    ${firmware['status']}   ${status}    msg=${firmware['name']} status verify failed




