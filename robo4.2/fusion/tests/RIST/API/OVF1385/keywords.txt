*** Settings ***
Library              FusionLibrary
Library              RoboGalaxyLibrary
Library              OperatingSystem
Library              BuiltIn
Library              Collections
Library              ../../../wpst_crm/crm_austin/lib/WPSTUtil.py


Resource             ../../../../Resources/api/fusion_api_resource.txt
Resource             ../global_variables.robot

*** Keywords ***
Delete and Re-configure VC Domain
    [Documentation]  Remove and Initialize VC, then send command to add networks/fcs/server profiles etc.
    [Arguments]      ${vc_credentials}  ${oa_credentials}  ${vc_config_file}  ${waitTime}=2 min  ${doubleDense}=${False}
    WPST Delete Domain VC          ${vc_credentials}    ${oa_credentials}
    Log    Success: Deleted VC Domain...    console=true
    Log    Waiting ${waitTime} minutes...    console=true
    Sleep    ${waitTime}

    WPST Configure VC   vc_credentials=${vc_credentials}  oa_credentials=${oa_credentials}  config=${vc_config_file}  doubleDense=${doubleDense}
    Log    Success: Configured VC Domain...    console=true

Clear Base Resources
    [Documentation]   Delete base resources
    [Arguments]		  ${APPLIANCE_IP}  ${admin_credentials}
    Log    \nCleaning up test environment ...    console=true
    Fusion Api Login Appliance    ${APPLIANCE_IP}    ${admin_credentials}
    Power off ALL servers          control=PressAndHold
    Remove All Server Profiles     force=${True}
    Remove All Server Profile Templates
    Wait For ALL Enclosures Complete Refresh
    Remove ALl Enclosures          param=?force=true
    Remove All Enclosure Groups    True
    Remove All LIGs
    Remove All Ethernet Networks
    Remove All FC Networks
    Remove All FCoE Networks
    Remove All Network Sets
    Remove ALl Server Hardware Types
    Remove ALL San Managers Async

Verify Server Profiles Status And Connections
    [Documentation]   Verify Server Profile Status and Connections as expected.
    [Arguments]		  ${sp}  ${exp_iscsi}
    ${spresp}=                  Get Resource  SP:${sp}
    ${status}=                  Get From Dictionary    ${spresp}    status
    ${serverHardwareUri}        Get From Dictionary    ${spresp}    serverHardwareUri
    ${connections}=             Get From Dictionary    ${spresp["connectionSettings"]}   connections
    Log    Verifying Server Profile ${sp} status ...    console=true
    should Be Equal             '${status}'    'OK'    msg=${sp} status should be "OK" and now status is ${Status}
    should_not_be_equal         '${serverHardwareUri}'    '${None}'    msg=${sp} is not assigned

    Log    Verifying the connections of ${sp} as expected ...    console=true
    :FOR    ${con}   IN    @{connections}
    \       continue for loop If    '${con["functionType"]}' != 'iSCSI'
    \       ${iscsi}=               Get From Dictionary    ${con["boot"]}    iscsi
    \       ${ipv4}=                Get From Dictionary    ${con}            ipv4
    \       should Be Equal         '${ipv4["ipAddressSource"]}'         'DHCP'   msg=IP Address source should be DHCP
    \       should Be Equal         '${iscsi["initiatorNameSource"]}'    '${exp_iscsi["initiatorNameSource"]}'   msg=Initiator Name Source should be ${exp_iscsi["initiatorNameSource"]}...
    \       Should Match Regexp     '${iscsi["initiatorName"]}'          (${exp_iscsi["initiatorName"]}(-p|-s))  msg=Initiator Name should be ${exp_iscsi["initiatorName"]}...
    \       should Be Equal         '${iscsi["bootTargetName"]}'         '${exp_iscsi["bootTargetName"]}'        msg=Boot Target Name should be ${exp_iscsi["bootTargetName"]}...
    \       should Be Equal         '${iscsi["bootTargetLun"]}'          '${exp_iscsi["bootTargetLun"]}'         msg=Boot Target Lun should be ${exp_iscsi["bootTargetLun"]}...
    \       should Be Equal         '${iscsi["firstBootTargetIp"]}'      '${exp_iscsi["firstBootTargetIp"]}'     msg=First Boot Target IP should be ${exp_iscsi["firstBootTargetIp"]}...
    \       should Be Equal         '${iscsi["firstBootTargetPort"]}'    '${exp_iscsi["firstBootTargetPort"]}'   msg=First Boot Target Port should be ${exp_iscsi["firstBootTargetPort"]}...
    \       should Be Equal         '${iscsi["chapLevel"]}'              '${exp_iscsi["chapLevel"]}'             msg=CHAP Level Source should be ${exp_iscsi["chapLevel"]}...
    \       run keyword if          '${exp_iscsi["chapLevel"]}' == 'None'   continue for loop
    \       should Be Equal         '${iscsi["chapName"]}'               '${exp_iscsi["chapName"]}'              msg=CHAP Name should be ${exp_iscsi["chapName"]}...
    \       should Be Equal         '${iscsi["mutualChapName"]}'         '${exp_iscsi["mutualChapName"]}'        msg=mutual CHAP Name Source should be ${exp_iscsi["mutualChapName"]}...
