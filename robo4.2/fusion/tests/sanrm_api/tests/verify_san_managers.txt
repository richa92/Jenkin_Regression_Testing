*** Settings ***
Documentation     Verify added SAN Managers
Documentation		***   written by connie.m.johnson        11/6/14
Documentation		added additional BNA checks              01/17/15 

Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Library           String
Library           Collections
Library			  BuiltIn

Resource          c:/ROBOGALAXY/fusion/tests/sanrm_api/fusion_api.txt  # SAN RM fusion API extensions
Resource		  c:/ROBOGALAXY/fusion/tests/sanrm_api/resourceAPI.txt  # SAN RM fusion UI extensions
Resource          c:/ROBOGALAXY/fusion/tests/crm_cli/resources/defaults.txt    # Comet-DVT default variables

Suite Setup       Login to Fusion Via REST  ${Appliance}   Administrator  hpvse123 
Suite Teardown    Logout of Fusion Via REST
Force Tags        GUI- Verify Tests SAN Manager

*** Variables ***
${DataFile}   		   C:/ROBOGALAXY/fusion/tests/sanrm_ui/sanrm-hydra_data.xml
${sleeptime}		   60
#${Appliance}           16.71.131.79
#
#        BNA san manager fields
#
${SANManagerName1}       csivm121.ftc.rdlabs.hpecorp.net
${state1}              Managed
${version1}            12.4.0.182
#        BNA san manager fields
#
#${SANManagerName2}     csivm71.fc.hp.com
#${state2}              Managed
#${version2}            12.4.0.182
# 
#        HP san manager fields
#
${SANManagerNameHP}     16.71.148.42 
${stateHP}              Managed
${descriptionHP}        HP FF 5900CP-48XG-4QSFP+ Switch
${versionHP}            7.1.045 Release 2418 
# 
# 
#        CISCO
#
#${SANManagerNameCISCO}        cscofc13.fc.hp.com
#${stateCISCO}              Managed
#${descriptionCISCO}        MDS 9250i 40 FC 2 IPS 8 FCoE (1 Slot) Chassis
#${versionCISCO}            6.2(11) 


*** Test Cases ***
Verify BNA SAN Manager1
    Sleep			 ${sleeptime}
    ${manager}=    Get Device Manager    ${SANManagerName1} 
    Log Dictionary   ${manager}
    Load Test Data   ${DataFile}
    ${name}=            Get From Dictionary    ${manager}   name
    ${santype}=         Get From Dictionary    ${manager}   providerDisplayName
    ${sanversion}=      Get From Dictionary    ${manager}   deviceManagerVersion
    ${sanstate}=        Get From Dictionary    ${manager}   state
    ${connectionInfo}=  Get From Dictionary    ${manager}   connectionInfo
    #
    # get record for SAN Manager in Spreadsheet
    ${sanmgr} =    Get Data By Property   ${TestData.sanmanagers}    sanip   ${SANManagerName1}
    #
    # compare spreadsheet values to values returned from REST call
    Should Be Equal as Strings    ${sanmgr[0].sanip}           ${name}     msg=${sanmgr[0].sanip} did not match ${name}.
    Should Be Equal as Strings    ${sanmgr[0].type}            ${santype}  msg=${sanmgr[0].type} did not match ${santype}.
    Should Be Equal as Strings    ${sanmgr[0].username}        ${connectionInfo[2]['value']}     msg=${sanmgr[0].username} did not match ${connectionInfo[2]['value']}.
    Should Be Equal as Strings    ${sanmgr[0].sanmanagerssl}   ${connectionInfo[4]['value']}     msg=${sanmgr[0].sanmanagerssl} did not match ${connectionInfo[4]['value']}.
    Should Be Equal as Strings    ${version1}                   ${sanversion}     msg=${version1} did not match ${sanversion}.
    Should Be Equal as Strings    ${state1}                     ${sanstate}     msg=${state1} did not match ${sanstate}.
 
# Verify BNA SAN Manager2
#    ${manager}=    Get Device Manager    ${SANManagerName2} 
#    Log Dictionary   ${manager}
#    Load Test Data   ${DataFile}
#    ${name}=            Get From Dictionary    ${manager}   name
#    ${santype}=         Get From Dictionary    ${manager}   providerDisplayName
#    ${sanversion}=      Get From Dictionary    ${manager}   deviceManagerVersion
#    ${sanstate}=        Get From Dictionary    ${manager}   state
#    ${connectionInfo}=  Get From Dictionary    ${manager}   connectionInfo
#    #
#    # get record for SAN Manager in Spreadsheet
#    ${sanmgr} =    Get Data By Property   ${TestData.sanmanagers}    sanip   ${SANManagerName2}
#    #
#    # compare spreadsheet values to values returned from REST call
#    Should Be Equal as Strings    ${sanmgr[0].sanip}           ${name}     msg=${sanmgr[0].sanip} did not match ${name}.
#    Should Be Equal as Strings    ${sanmgr[0].type}            ${santype}  msg=${sanmgr[0].type} did not match ${santype}.
#    Should Be Equal as Strings    ${sanmgr[0].username}        ${connectionInfo[2]['value']}     msg=${sanmgr[0].username} did not match ${connectionInfo[2]['value']}.
#    Should Be Equal as Strings    ${sanmgr[0].sanmanagerssl}   ${connectionInfo[4]['value']}     msg=${sanmgr[0].sanmanagerssl} did not match ${connectionInfo[4]['value']}.
#    Should Be Equal as Strings    ${version2}                   ${sanversion}     msg=${version2} did not match ${sanversion}.
#    Should Be Equal as Strings    ${state2}                     ${sanstate}     msg=${state2} did not match ${sanstate}.  

Verify HP SAN Manager
    ${manager}=    Get Device Manager    ${SANManagerNameHP} 
    Log Dictionary   ${manager}
    Load Test Data   ${DataFile}
    ${name}=       Get From Dictionary    ${manager}   name
    ${santype}=    Get From Dictionary    ${manager}   providerDisplayName
    ${sanversion}=       Get From Dictionary    ${manager}   deviceManagerVersion
    ${sandescription}=   Get From Dictionary    ${manager}   description
    ${sanstate}=         Get From Dictionary    ${manager}   state
    ${connectionInfo}=   Get From Dictionary    ${manager}   connectionInfo
    #
    # get record for SAN Manager in Spreadsheet
    ${sanmgr} =    Get Data By Property   ${TestData.sanmanagers}    sanip   ${SANManagerNameHP}
    #
    # compare spreadsheet values to values returned from REST call
    Should Be Equal as Strings    ${sanmgr[0].sanip}               ${name}                           msg=${sanmgr[0].sanip} did not match ${name}.
    Should Be Equal as Strings    ${sanmgr[0].type}                ${santype}                        msg=${sanmgr[0].type} did not match ${santype}.
    Should Be Equal as Strings    ${sanmgr[0].securitylevel}       ${connectionInfo[3]['value']}     msg=${sanmgr[0].securitylevel} did not match ${connectionInfo[3]['value']}.
    Should Be Equal as Strings    ${sanmgr[0].snmpusername}        ${connectionInfo[2]['value']}     msg=${sanmgr[0].snmpusername} did not match ${connectionInfo[2]['value']}.
    Should Be Equal as Strings    ${sanmgr[0].snmpport}            ${connectionInfo[1]['value']}     msg=${sanmgr[0].snmpport} did not match ${connectionInfo[1]['value']}.
    Should Be Equal as Strings    ${versionHP}                     ${sanversion}     msg=${versionHP} did not match ${sanversion}.
    Should Be Equal as Strings    ${stateHP}                       ${sanstate}     msg=${stateHP} did not match ${sanstate}.
    Should Be Equal as Strings    ${descriptionHP}                 ${sandescription}     msg=${descriptionHP} did not match ${sandescription}.
 
#Verify CISCO SAN Manager
#    ${manager}=    Get Device Manager    ${SANManagerNameCISCO} 
#    Log Dictionary   ${manager}
#    Load Test Data   ${DataFile}
#    ${name}=       Get From Dictionary    ${manager}   name
#    ${santype}=    Get From Dictionary    ${manager}   providerDisplayName
#    ${sanversion}=       Get From Dictionary    ${manager}   deviceManagerVersion
#    ${sandescription}=   Get From Dictionary    ${manager}   description
#    ${sanstate}=         Get From Dictionary    ${manager}   state
#    ${connectionInfo}=   Get From Dictionary    ${manager}   connectionInfo
#    #
#    # get record for SAN Manager in Spreadsheet
#    ${sanmgr} =    Get Data By Property   ${TestData.sanmanagers}    sanip   ${SANManagerNameCISCO}
#    #
#    # compare spreadsheet values to values returned from REST call
#    Should Be Equal as Strings    ${sanmgr[0].sanip}               ${name}                           msg=${sanmgr[0].sanip} did not match ${name}.
#    Should Be Equal as Strings    ${sanmgr[0].type}                ${santype}                        msg=${sanmgr[0].type} did not match ${santype}.
#    Should Be Equal as Strings    ${sanmgr[0].securitylevel}       ${connectionInfo[3]['value']}     msg=${sanmgr[0].securitylevel} did not match ${connectionInfo[3]['value']}.
#    Should Be Equal as Strings    ${sanmgr[0].snmpusername}        ${connectionInfo[2]['value']}     msg=${sanmgr[0].snmpusername} did not match ${connectionInfo[2]['value']}.
#    Should Be Equal as Strings    ${sanmgr[0].snmpport}            ${connectionInfo[1]['value']}     msg=${sanmgr[0].snmpport} did not match ${connectionInfo[1]['value']}.
#    Should Be Equal as Strings    ${versionCISCO}                  ${sanversion}                     msg=${versionCISCO} did not match ${sanversion}.
#    Should Be Equal as Strings    ${stateCISCO}                    ${sanstate}                       msg=${stateCISCO} did not match ${sanstate}.
#    Should Be Equal as Strings    ${descriptionCISCO}              ${sandescription}                 msg=${descriptionCISCO} did not match ${sandescription}.
         