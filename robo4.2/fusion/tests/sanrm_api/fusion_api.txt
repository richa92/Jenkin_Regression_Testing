*** Settings ***
Documentation     Fusion Rest API keywords 
...               = Usage =
...               | Library | C:/rg-fusion/rg-fusion/tests/sanrm_api/fusion_api.txt |

Library           Collections
Library           String
Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions


*** Variables ***
${DataFile}         C:/rg-fusion/rg-fusion/tests/sanrm_api/sanrm_hydra_api_data.xml
${FUSION_IP}        16.71.130.237
${FUSION_USERNAME}  Administrator
${FUSION_PASSWORD}  hpvse123
${SANManagerName}	hpfc42.fc.hp.com
${Browser}          firefox
${SeleniumSpeed}    0.1


*** Keywords ***
Login to Fusion Via REST
   [Documentation]    Connects to the Appliance and creates a session using the Username and Password.
    [Documentation]    Example:\n| Login to Fusion Via REST | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]    ${IP}=${FUSION_IP}    ${USERNAME}=${FUSION_USERNAME}    ${PASSWORD}=${FUSION_PASSWORD}
    Should Not Be Equal    ${IP}    'unknown'    msg=Please specify a valid Fusion IP address or hostname
    ${Creds}    Create Dictionary    userName    ${USERNAME}    password    ${PASSWORD}
    ${SessionId}    Fusion Api Login Appliance    ${IP}    ${Creds}
    #${Response}    ${SessionId}    Fusion Api Login Appliance    ${IP}    ${USERNAME}    ${PASSWORD}
    #${Status}    Get From Dictionary    ${Response}    status
    #Return From Keyword If    '${Status}' == '200'    ${Response}
    #${errorCode}    Get From Dictionary    ${Response}    errorCode
    #${message}      Get From Dictionary    ${Response}    message
    #Fatal Error    msg=Invalid response returned ${Status} ${errorCode} ${message}
	
Logout of Fusion Via REST
    [Documentation]    Terminates a session with the REST API.
    [Documentation]    Example:\n| Logout Of Fusion Via REST |
    Fusion Api Logout Appliance
  
	
Set Fusion Version Metadata
    [Documentation]    Get the version ident string from Fusion
    [Arguments]    ${IP}    ${USERNAME}    ${PASSWORD}
    Login to Fusion via REST    ${IP}    ${USERNAME}    ${PASSWORD}
    ${Response}=    Fusion Api Get Appliance Version
    Logout of Fusion Via REST
    Log    ${Response}
    ${softwareVersion}=    Get from Dictionary    ${Response}    softwareVersion
    ${date}=               Get from Dictionary    ${Response}    date
    Set Suite Metadata     Fusion Version    ${softwareVersion} : ${date}    top=True

Get Id From Uri
    [Documentation]    Returns the uuid from a REST uri string.
    [Documentation]    Example:\n| ${Id} | Get Id From Uri | ${Uri} |
    [Arguments]    ${Uri}
    ${Id}     Fetch From Right    ${Uri}    /
    [Return]    ${Id}
    
# Get Fields from TestData
# [Documentation]    Returns the uuid from a REST uri string.
# [Documentation]    Example:\n| ${Id} | Get Id From Uri | ${Uri} |
# ${user} =  Get Data By Property  ${TestData.users}  name  Administrator   
    

Check Response
    [Arguments]    ${response}
    Should Not Contain    ${response}    errorCode
    
#----------------------------------------------------------------------------
#       Device MANAGERS
#-----------------------------------------------------------------------------

Get Device Manager
    [Documentation]    Get SAN Manager (device manager) by Name
    [Documentation]    Example:\n| Get Device Manager |  ${SANManagerName} |
    [Arguments]    ${SANManagerName}
    ${SANManagerCollection} =    Fusion API Get SAN Manager   
    ${count}=    Get From Dictionary      ${SANManagerCollection}   count
    #  ${count}=    Get From Dictionary      ${SANManagerCollection}=}    count
    Should not be Equal as Integers       ${count}           0           msg=No SAN Managers Found
    # @{members}=    Get From Dictionary    ${SANManagerCollection}=}    members
    @{members}=    Get From Dictionary    ${SANManagerCollection}    members

    :FOR    ${member}    IN    @{members}
    \    Log Dictionary    ${member}
    \    ${name}=     Get From Dictionary    ${member}          name
    \    ${type}=     Get From Dictionary    ${member}          type
    \    Continue For Loop If    '${SANManagerName}'!='${name}'
    \    Return From Keyword    ${member}

    Fail    msg=Failed to find SAN Manager ${SANManagerName}.
        

# -----------------------------------------------------------------------------
#		FUSION STATE VERIFICATION
# -----------------------------------------------------------------------------
Verify Fusion Factory Setting
	[Documentation]	 Check for defined Logical Interconnect Groups, Logical Interconnects, Ethernet Networks
	...				 , and uplink sets.
	@{ELEMENTS}=	Create List    logical interconnect groups	
	...                            logical interconnects
	...                            ethernet networks
	...                            uplink sets
	${total_count}=		Set Variable	0
	: For     ${element}     in    @{ELEMENTS}
    \    ${response}=    run keyword    Fusion Api Get ${element}
    \    ${count}      Get From Dictionary    ${response}    count
    \	 Run Keyword If		${count}!=0		Log 	There are defined ${element}.	level=WARN
    \	 ${total_count}=		Evaluate	${total_count}+${count}
    ${rc}=		Set Variable If		${total_count}!=0		${False}	${True}
    [Return]	${rc}
    
Verify Interconnect created
	[Documentation]	 Check for defined Logical Interconnect Groups, Logical Interconnects, and Interconnects
	@{ELEMENTS}=	Create List    logical interconnect groups
	...							   logical interconnects
	...                            interconnects
	${total_count}=		Set Variable	0
	: For     ${element}     in    @{ELEMENTS}
    \    ${response}=    run keyword    Fusion Api Get ${element}
    \	 Log	${response}
    \    ${count}      Get From Dictionary    ${response}    count
    \	 Run Keyword If		${count}==0		Log 	There are no defined ${element}.	level=WARN
    \	 ${total_count}=		Evaluate	${total_count}+${count}
    ${rc}=		Set Variable If		${total_count}==0		${False}	${True}
    [Return]	${rc}
    
CleanUp FusionVM
    [Documentation]    Remove all entities from a Fusion VM
    @{Fusion_Entities}    Create List    Uplink Sets
    ...                                  Ethernet Networks
    ...                                  Logical Interconnect Groups
    #...                                 Logical Interconnects
    #...                                 Network-Sets
    #...                                 Network Lists
    #...                                 FC-Networks
    Login to Fusion via REST
    : For     ${Entity}     in    @{Fusion_Entities}
    \    ${Response}=    Run Keyword    Fusion Api Get ${entity}
    \    ${Members}    Get From Dictionary    ${Response}    members
    \    ${Count}      Get From Dictionary    ${Response}    count
    \    Delete Fusion Entity    ${Entity}    ${Count}      ${Members}
    Logout of Fusion via REST
    
# -----------------------------------------------------------------------------

Delete Fusion Entity 
    [Documentation]    Removes specified entities (LIG, LI, etc). Helper keyword; See CleanUp FusionVM 
    [Arguments]    ${Entity}    ${Count}    ${Members}
    : FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${Member}=    Get From Dictionary    ${Members}    ${Index}
    \    ${Uri}=       Get From Dictionary     ${Member}    uri
    \    ${ID}=        Fetch From Right    ${Uri}    /
    \    ${Result}     Run Keyword    Fusion Api Delete ${Entity} Id     ${ID}
    
# -----------------------------------------------------------------------------
# 
# -----------------------------------------------------------------------------
Create User
    [Arguments]    ${UserName}=    ${Password}=    ${Role}=Infrastructure administrator    ${EmailAddress}=${Null}
    ...            ${OfficePhone}=${Null}    ${MobilePhone}=${null}
    ${RolesList}=    Create List    ${Role}
    ${UserAndRoles}=    Create Dictionary
    ...    userName=${UserName}
    ...    password=${Password}
    ...    enabled=${True}
    ...    roles=${RolesList}
    ...    emailAddress=${EmailAddress}
    ...    officePhone=${OfficePhone}
    ...    mobilePhone=${MobilePhone}
    ...    type=UserAndRoles
    ${Response}=    Fusion Api Add Users    ${UserAndRoles}
    ${Status}       Get From Dictionary    ${Response}    status
    #Return From Keyword if     '${Status}' == '200'    ${Response}
    Return From Keyword if     '${Status}' == '${null}'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}
    
# -----------------------------------------------------------------------------
#		ETHERNET NETWORKS
# -----------------------------------------------------------------------------
Create Ethernet Network
    [Documentation]    Creates a Network using the supplied Name and vlanId.
    [Arguments]    ${Name}=    ${vlanId}=    ${Smart}=false    ${Private}=false    ${Purpose}=General
    ${Network}    Create Dictionary    type=ethernet-network
    ...                                vlanId=${vlanId}
    ...                                name=${Name}    
    ...                                purpose=${Purpose}
    ...                                smartLink=${Smart} 
    ...                                privateNetwork=${Private}
    
    ${Response}     Fusion Api Add Ethernet Networks    ${Network}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

Get Ethernet Network By Id
    [Documentation]    Returns a Network given a vlanId
    [Arguments]    ${vlanId}
    ${Network}    Fusion Api Get Ethernet Networks    filter="vlanId=${vlanId}"
    ${Count}    Get from Dictionary    ${Network}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find ethernet-network vlanId ${vlanId}    
    ${Members}    Get From Dictionary    ${Network}    members
    ${Element}    Get From List          ${Members}    0
    ${eVlanId}    Get From Dictionary    ${Element}    vlanId
    Should Be Equal As Numbers    ${eVlanId}    ${vlanId}    msg=Cant find ethernet-network vlanId ${vlanId}
    [Return]    ${Element}

Get Ethernet Network By Name
    [Documentation]    Returns a Network given a network Name
    [Arguments]    ${Name}
    ${Network}    Fusion Api Get Ethernet Networks    filter="'name'='${Name}'"
    ${Count}    Get from Dictionary    ${Network}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find ethernet-network named ${Name}
    ${Members}    Get From Dictionary    ${Network}    members
    ${Element}    Get From List          ${Members}    0
    ${eName}    Get From Dictionary    ${Element}      name
    Should Be Equal As Strings    ${eName}    ${Name}    msg=Cant find ethernet-network named ${Name}
    [Return]    ${Element}

Get Ethernet Network uri by Name
    [Documentation]    Return a Network uri by Name.
    [Arguments]    ${name}
    ${Network}    Get Ethernet Network by Name    ${name}
    # Pull the uuid from the uri
    ${Uri}    Get From Dictionary    ${Network}    uri
    ${Id}     Get Id from Uri    ${Uri}
    [Return]    ${uri}

Get Ethernet Network vlanId by Name
    [Documentation]    Return a Network vlandId by Name.
    [Arguments]    ${name}
    ${Network}    Get Ethernet Network by Name    ${name}
    ${vlanId}    Get From Dictionary    ${Network}    vlanId
    [Return]    ${vlanId}

Delete Ethernet Network by Id
    [Documentation]    Removes an existing Network by vlanId.
    [Arguments]    ${vlanId}
    ${Network}    Get Ethernet Network by Id    ${vlanId}
    # Pull the uuid from the uri
    ${Uri}    Get From Dictionary    ${Network}    uri
    ${Id}     Get Id from Uri    ${Uri}
    # And finally, remove it
    ${Response}    Fusion Api Delete Ethernet Networks Id    ${Id}
    [Return]    ${Response}

#		FIBRE CHANNEL NETWORKS
# -----------------------------------------------------------------------------
Create FC Network
    [Arguments]    ${Name}=    ${linkStabilityTime}=30    ${autoLoginRedistribution}=${true}    ${fabricType}=FabricAttach
    ${Network}    Create Dictionary    name=${Name}
    ...                                connectionTemplateUri=${null}
    ...                                linkStabilityTime=30
    ...                                autoLoginRedistribution=${autoLoginRedistribution}
    ...                                fabricType=${fabricType}
    ...                                type=fc-networkV2
    
    ${Response}     Fusion Api Add FC Networks    ${Network}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

# -----------------------------------------------------------------------------
#       NETWORK-SETS
# -----------------------------------------------------------------------------
Create Network Set
    [Arguments]    ${name}=    ${networkNames}=    ${nativeNetwork}=${null}
    
    ${nativeNetworkUri}=    Set Variable    ${null}
    #Run Keyword If    '${nativeNetwork}'!='${null}'
    #...    ${nativeNetworkUri}=    Get Ethernet Network uri by Name    ${nativeNetwork}
    ${networkUrisList}    Create List
    : FOR    ${networkName}    IN    @{networkNames}
    \    ${networkUri}=    Get Ethernet Network uri by Name    ${networkName}
    \    Append To List    ${networkUrisList}    ${networkUri}    
    ${NetworkSet}    Create Dictionary    name=${name}
    ...                                   nativeNetworkUri=${nativeNetworkUri}
    ...                                   networkUris=@{networkUrisList}
    ...                                   connectionTemplateUri=${null}
    ...                                   type=network-set
    ${Response}     Fusion Api Add Network Sets    ${NetworkSet}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

# -----------------------------------------------------------------------------
#       FIBRE CHANNEL NETWORKS
# -----------------------------------------------------------------------------

Get Fibre Channel Network By Name
    [Documentation]    Returns a FC Network given a network Name
    [Arguments]    ${Name}
    ${Network}    Fusion Api Get FC Networks    filter="'name'='${Name}'"
    ${Count}    Get from Dictionary    ${Network}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find fc-network named ${Name}
    ${Members}    Get From Dictionary    ${Network}    members
    ${Element}    Get From List          ${Members}    0
    ${eName}    Get From Dictionary    ${Element}      name
    Should Be Equal As Strings    ${eName}    ${Name}    msg=Cant find fc-network named ${Name}
    [Return]    ${Element}

Get Fibre Channel Network uri by Name
    [Documentation]    Return a FC Network uri by Name.
    [Arguments]    ${name}
    ${Network}    Get Fibre Channel Network by Name    ${name}
    # Pull the uuid from the uri
    ${Uri}    Get From Dictionary    ${Network}    uri
    ${Id}     Get Id from Uri    ${Uri}
    [Return]    ${uri}

# -----------------------------------------------------------------------------
#		INTERCONNECT-TYPES
# -----------------------------------------------------------------------------
Get Interconnect Type Uri List
    [Documentation]    Return a list of Uris for the given list of named Interconnect-types.
    [Arguments]    @{ResourceNamesList}
    ${Length}=    Get Length    ${ResourceNamesList}
    ${InterconnectTypeUriList}    Create List
    : FOR    ${Index}    IN RANGE    0    ${Length}
    \    ${ResourceName}    Get From List    ${ResourceNamesList}    ${Index}
    \    ${InterconnectTypeUri}    Get Interconnect Type Uri    ${ResourceName}
    \    Insert into List    ${InterconnectTypeUriList}    ${Index}    ${InterconnectTypeUri}
    [Return]   @{InterconnectTypeUriList}

Get Interconnect Type Uri
    [Documentation]    Return the Uri for a Interconnect-type name.
    [Arguments]    ${ResourceName}
    Return From Keyword If    '${ResourceName}' == '${None}'    ${None}
    ${InterconnectTypeCollection}    Fusion Api Get Interconnect Types
    ${Members}    Get From Dictionary    ${InterconnectTypeCollection}    members
    ${Count}      Get From Dictionary    ${InterconnectTypeCollection}    count
    : FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${InterconnectType}    Get From List    ${Members}    ${Index}
    \    ${Name}    Get From Dictionary    ${InterconnectType}    name
    \    ${Uri}     Get From Dictionary    ${InterconnectType}    uri    
    \    Return From Keyword If    '${Name}' == '${ResourceName}'    ${Uri}
    Fail    msg=No Interconnect type ${ResourceName} was found

# ------------------------------------------------------------------------------------
#		LOGICAL INTERCONNECTS
# ------------------------------------------------------------------------------------
Create Logical Interconnect
    [Documentation]    Creates a new Logical Interconnect
    [Arguments]    ${LiName}    ${LigUri}    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}
    Log Many    ${LiName}    ${LIGUri}    ${IP}    ${USERNAME}    ${PASSWORD}
    ${LogicalInterconnect}    Build Logical Interconnect Payload    ${LiName}    ${LigUri}    ${IP}
    ...    ${USERNAME}    ${PASSWORD}
    ${Response}    Fusion Api Add Logical Interconnects    ${LogicalInterconnect}
    ${Status}      Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}
    [Return]    ${Response}
    
Build Logical Interconnect Payload
    [Documentation]    Returns a LogicalInterconnect payload (for subsequent use in creating a Logical Interconnect)
    [Arguments]    ${LiName}    ${LIGUri}    ${IP}=${SWITCH_IP}    ${USERNAME}=${SWITCH_USERNAME}    ${PASSWORD}=${SWITCH_PASSWORD}
    ${entry0}    Create Dictionary    value=${IP}          type=Ip
    ${entry1}    Create Dictionary    value=${USERNAME}    type=UserId
    ${entry2}    Create Dictionary    value=${PASSWORD}    type=Password
    ${locationList}    Create List    ${entry0}    ${entry1}    ${entry2}
    ${locationEntries}    Create Dictionary    locationEntries=${locationList}
    ${location}    Create Dictionary    location=${locationEntries}
    ...                                 interconnectUri=${null}
    ...                                 permittedInterconnectTypeUri=${null}
    ...                                 logicalDownlinkUri=${null}
    ${interconnectMapList}    Create List    ${location}
    ${interconnectMapEntries}    Create Dictionary    interconnectMapEntries=${InterconnectMapList}
    ${LogicalInterconnect}    Create Dictionary    type=logical-interconnect
    ...                                            enclosureUris=${null}
	...                                            telemetryConfiguration=${null}
	...                                            snmpConfiguration=${null}
	...                                            portMonitor=${null}
	...                                            consistencyStatus=${null}
	...                                            ethernetSettings=${null}
	...                                            stackingHealth=${null}
    ...                                            logicalInterconnectGroupUri=${LIGUri}
    ...                                            interconnectMap=${interconnectMapEntries}
    ...                                            interconnects=${null}
	...                                            fusionDomainUri=${null}
    ...                                            name=${LiName}
	...                                            state=${null}
	...                                            description=${null}
	...                                            status=${null}
	...                                            uri=${null}
    ...                                            category=logical-interconnect
	...                                            eTag=${null}
	...                                            created=${null}
	...                                            modified=${null}
    Log    ${LogicalInterconnect}
    [Return]    ${LogicalInterconnect}

Get Logical Interconnect
    [Documentation]    Return a Logical Interconnect by Name
    [Arguments]    ${LiName}
    ${LogicalInterconnectCollection}    Fusion Api Get Logical Interconnects
    ${Members}    Get From Dictionary    ${LogicalInterconnectCollection}    members
    ${Count}      Get From Dictionary    ${LogicalInterconnectCollection}    count
    : FOR    ${Index}    IN RANGE    0    ${Count}
    \    ${LogicalInterconnect}    Get From List    ${Members}    ${Index}
    \    ${Name}    Get From Dictionary    ${LogicalInterconnect}    name
    \    Return From Keyword If    '${Name}' == '${LiName}'    ${LogicalInterconnect}
    Fail    msg=No Logical Interconnect ${LiName} was found

Get Logical Interconnect Uri
    [Documentation]    Return the Uri for a Logical Interconnect by Name.
    [Arguments]    ${LiName}
    ${Li}    Get Logical Interconnect    ${LiName}
    ${Uri}    Get From Dictionary    ${Li}    uri    
    [Return]    ${Uri}

Delete Logical Interconnect
    [Documentation]    Remove the named Logical Interconnect
    [Arguments]    ${LiName}
    ${Uri}    Get Logical Interconnect Uri    ${LiName}
    ${Id}     Get Id From Uri    ${Uri}
    # Delete the Li using the Id and check the result
    ${Response}    Fusion Api Delete Logical Interconnects Id    ${Id}
    ${Status}      Get From Dictionary    ${Response}    status
    Should Be Equal As Integers    ${Status}    200    msg=Couldn't delete ${LiName}, status : ${Status}
    [Return]    ${Response}    
  
# -----------------------------------------------------------------------------
#		LOGICAL INTERCONNECT GROUPS
# -----------------------------------------------------------------------------
Create Logical Interconnect Group
    [Documentation]    Create a new Logical Interconnect Group
    [Arguments]    ${LigName}    @{InterconnectNamesList}
    @{InterconnectTypeUriList}     Get Interconnect Type Uri List    @{InterconnectNamesList}
    ${LogicalInterconnectGroup}    Build Logical Interconnect Group Payload    ${LigName}    @{InterconnectTypeUriList}
    ${Response}    Fusion Api Add Logical Interconnect Groups    ${LogicalInterconnectGroup}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}
    [Return]    ${Response]

Get Logical Interconnect Group
    [Documentation]    Return a Logical Interconnect Group by Name
    [Arguments]    ${Name}
    ${LogicalInterconnectGroupCollection}    Fusion Api Get Logical Interconnect Groups    filter="'name'='${Name}'"
    ${Count}    Get From Dictionary    ${LogicalInterconnectGroupCollection}    count
    Should Be Equal As Numbers    ${Count}    1    msg=Cant find lig named ${Name}
    ${Members}    Get From Dictionary    ${LogicalInterconnectGroupCollection}    members
    ${Lig}    Get From List    ${Members}    0
    ${LigName}    Get From Dictionary    ${Lig}    name
    Should Be Equal As Strings    ${Name}    ${LigName}
    [Return]    ${Lig}
    
Get Logical Interconnect Group Uri
    [Documentation]    Return a Logical Interconnect Groups' Uri by Name
    [Arguments]    ${Name}
    ${Lig}    Get Logical Interconnect Group    ${Name}
    ${Uri}    Get From Dictionary    ${Lig}    uri    
    [Return]    ${Uri}
    
Delete Logical Interconnect Group    
    [Documentation]    Remove the named Logical Interconnect Group
    [Arguments]    ${Name}
    ${Uri}    Get Logical Interconnect Group Uri    ${Name}
    ${Id}     Get Id From Uri    ${Uri}
    # Delete the Lig using the Id and check the result
    ${Response}    Fusion Api Delete Logical Interconnect Groups Id    ${Id}
    ${Status}      Get From Dictionary    ${Response}    status
    Should Be Equal As Integers    ${Status}    200    msg=Couldn't delete ${Name}, status : ${Status}
    [Return]    ${Response}    

Build Logical Interconnect Group Payload
    [Documentation]    Returns a logical Interconnect Group Payload (for subsequent used in creating a  Logical Interconnect)
    [Arguments]    ${Name}    @{InterconnectTypeUriList}
    ${InterconnectMapTemplate}     Build Interconnect Map Template    @{InterconnectTypeUriList}
    ${LogicalInterconnectGroup}    Create Dictionary    type=logical-interconnect-group
    ...                                                 category=logical-interconnect-groups
    ...                                                 name=${Name}
    ...                                                 interconnectMapTemplate=${InterconnectMapTemplate}
    ...                                                 state=Active
    #...                                                 telemetryConfiguration=${telemetryConfiguration}
    #...                                                 snmpConfiguration=${snmpConfiguration}                                                 
    [Return]    ${LogicalInterconnectGroup}

Build Interconnect Map Template
    [Documentation]    For internal use only.
    [Arguments]    @{UriList}
    ${InterconnectMapEntryTemplatesList}    Build Interconnect Map Entry Templates List    @{UriList}
    ${InterconnectMapTemplate}    Create Dictionary    interconnectMapEntryTemplates=${InterconnectMapEntryTemplatesList}
    [Return]    ${InterconnectMapTemplate}

Build Interconnect Map Entry Templates List
    [Documentation]    For internal use only.
    [Arguments]    @{UriList}
    ${InterconnectMapEntryTemplatesList}    Create List
    : FOR    ${Index}    IN RANGE     1    9
    \    ${0Index}    Evaluate    ${Index} - 1
    \    ${Uri}    Get From List    ${UriList}    ${0Index}
    \    ${InterconnectMapEntryTemplate}    Build Interconnect Map Entry Template    1    ${Index}    ${Uri}
    \    Append To List    ${InterconnectMapEntryTemplatesList}    ${InterconnectMapEntryTemplate}
    [Return]    ${InterconnectMapEntryTemplatesList}

Build Interconnect Map Entry Template
    [Documentation]    For internal use only.
    [Arguments]    ${EnclosureNumber}    ${BayNumber}    ${Uri}
    ${Enclosure}    Create Dictionary                       relativeValue=${EnclosureNumber}
    ...                                                     type=Enclosure
    ${Bay}    Create Dictionary                             relativeValue=${BayNumber}
    ...                                                     type=Bay
    ${locationEntriesList}    Create List    ${Enclosure}    ${Bay}
    ${logicalLocation}    Create Dictionary    locationEntries=${locationEntriesList}
    ${interconnectMapEntryTemplate}    Create Dictionary    logicalDownlinkUri=${null}
    ...                                                     logicalLocation=${logicalLocation}
    ...                                                     permittedInterconnectTypeUri=${Uri}
    [Return]    ${interconnectMapEntryTemplate}

Build Telemetry Configuration
    [Documentation]    For internal use only.
    ${TelemetryConfiguration}    Create Dictionary    type=telelmetry-configuration
    ...                                               category=telemetry-configuration
    ...                                               enableTelemetry=true
    ...                                               sampleCount=12
    ...                                               sampleInterval=300
    [Return]    ${TelemetryConfiguration}    

Build Snmp Configuration
    [Documentation]    For internal use only.
    ${snmpConfiguration}    Create Dictionary    type=snmp-configuration
    ...                                          category=snmp-configuration
    ...                                          enabled=true
    ...                                          readCommunity=public
    [Return]    ${snmpConfiguration}

# -----------------------------------------------------------------------------
#		LOGICAL INTERCONNECT GROUPS - Uplink Sets
# -----------------------------------------------------------------------------

Insert UplinkSets List into LogicalInterconnectGroup
    [Arguments]    ${LogicalInterconnectGroup}    ${uplinkSetsList}
    Set To Dictionary    ${LogicalInterconnectGroup}    uplinkSets    ${uplinkSetsList}
    [Return]    ${LogicalInterconnectGroup}

Build uplinkSets List
    ${uplinkSetsList}    Create List
    [Return]    ${uplinkSetsList}

Insert uplinkSet Element into uplinkSets List
    [Arguments]    ${uplinkSetsList}    ${uplinkSetElement}
    Append To List    ${uplinkSetsList}    ${uplinkSetElement}
    [Return]    ${uplinkSetsList}

Build uplinkSet Element
    [Arguments]    ${uplinkSetName}    ${networkType}=Ethernet    ${mode}=Auto
    ${uplinkSetElement}    Create Dictionary    name=${uplinkSetName}
    ...                                         mode=${mode}
    ...                                         networkType=${networkType}
    ...                                         primaryPort=${null}
    ...                                         logicalPortConfigInfos=${null}
    [Return]    ${uplinkSetElement}

Insert networkUris List into uplinkSet Element
    [Arguments]    ${uplinkSetElement}    ${networkUrisList}
    Set To Dictionary    ${uplinkSetElement}    networkUris    ${networkUrisList}
    [Return]    ${uplinkSetElement}

Build networkUris List
    [Documentation]    Returns a list of network Uris from a list of network names
    ...    In the form [ 'uri1", "uri2", 'uri3" ]
    [Arguments]    @{NetworkNames}
    ${networkUrisList}    Create List
    : FOR    ${NetworkName}    IN    @{NetworkNames}
    \    ${NetworkUri}    Get Ethernet Network uri by Name    ${NetworkName}
    \    Append To List    ${networkUrisList}    ${NetworkUri}
    [Return]    ${networkUrisList}

Insert logicalPortConfigInfos List into uplinkSet Element
    [Documentation]    Returns augmented uplinkSet Element, including a logicalPortConfigInfos List Element 
    [Arguments]    ${uplinkSetElement}    ${logicalPortConfigInfoList}
    Set To Dictionary    ${uplinkSetElement}    logicalPortConfigInfos    ${logicalPortConfigInfoList}
    [Return]    ${uplinkSetElement}

Build logicalPortConfigInfos List
    [Documentation]    Creates initial logicalPortConfigInfo List
    ${logicalPortConfigInfosList}    Create List
    [Return]    ${logicalPortConfigInfosList}

Insert logicalPortConfigInfo Element into logicalPortConfigInfos List
    [Documentation]    Returns augmented logicalPortConfigInfos List, of one or more logicalPortConfigInfo Elements
    ...     In the form: [
    ...                      { "desiredSpeed" : "Auto",
    ...                        "logicalLocation" : {
    ...                            "locationEntries" : [ { "type" : "Enclosure", "relativeValue" : 1 },
    ...                                                  { "type" : "Bay",  "relativeValue" : 2 },
    ...                                                  { "type" : "Port", "relativeValue" : 21 }  ]
    ...                      }
    ...                      },
    ...                      { "desiredSpeed" : "Auto",
    ...                        "logicalLocation" : {
    ...                            "locationEntries" : [ { "type" : "Enclosure", "relativeValue" : 1 },
    ...                                                  { "type" : "Bay",  "relativeValue" : 2 },
    ...                                                  { "type" : "Port", "relativeValue" : 21 }  ]
    ...                        }
    ...                      }
    ...                  ]
    [Arguments]    ${logicalPortConfigInfosList}    ${speed}    ${Enclosure}    ${Bay}    ${Port}
    ${logicalPortConfigInfoElement}    Build logicalPortConfigInfo Element    ${speed}    ${Enclosure}    ${Bay}    ${Port}
    Append To List        ${logicalPortConfigInfosList}    ${logicalPortConfigInfoElement}
    [Return]    ${logicalPortConfigInfosList}

Build logicalPortConfigInfo Element
    [Documentation]    Returns a logicalPortConfigInfo Element
    ...     In the form: { "desiredSpeed" : "Auto",
    ...                "logicalLocation" : {
    ...                    "locationEntries" : [ { "type" : "Enclosure", "relativeValue" : 1 },
    ...                                          { "type" : "Bay",  "relativeValue" : 2 },
    ...                                          { "type" : "Port", "relativeValue" : 21 }  ]
    ...                }
    ...              }
    [Arguments]    ${speed}    ${Enclosure}    ${Bay}    ${Port}
    ${logicalLocation}    Build logicalLocation Dictionary    ${Enclosure}    ${Bay}    ${Port}
    ${logicalPortConfigInfoElement}    Create Dictionary    desiredSpeed=${speed}
    ...                                                   logicalLocation=${logicalLocation}
    [Return]    ${logicalPortConfigInfoElement}

Build logicalLocation Dictionary
    [Documentation]    Returns a logicalLocation Dictionary
    ...    In the form: { "locationEntries" : [ { "type" : "Enclosure", "relativeValue" : 1 },
    ...                                         { "type" : "Bay",  "relativeValue" : 2 },
    ...                                         { "type" : "Port", "relativeValue" : 21 }  ]
    ...                 }
    [Arguments]    ${Enclosure}    ${Bay}    ${Port}
    ${locationEntriesList}    Build locationEntries list    ${Enclosure}    ${Bay}    ${Port}
    ${logicalLocation}    Create Dictionary    locationEntries=${locationEntriesList}
    [Return]    ${logicalLocation}

Build locationEntries List
    [Documentation]    Returns a locationEntries list
    ...    In the form: [ { "type" : "Enclosure", "relativeValue" : 1 },
    ...                   { "type" : "Bay",  "relativeValue" : 2 },
    ...                   { "type" : "Port", "relativeValue" : 21 }  ]
    [Arguments]    ${Enclosure}    ${Bay}    ${Port}
    ${E1}    Create Dictionary    type=Enclosure    relativeValue=${Enclosure}
    ${B2}    Create Dictionary    type=Bay          relativeValue=${Bay}
    ${P3}    Create Dictionary    type=Port         relativeValue=${Port}
    ${locationEntriesList}    Create List    ${E1}    ${B2}    ${P3}
    [Return]    ${locationEntriesList}

#---------------------------------------------------------------------------------
#        UPLINKSETS
#---------------------------------------------------------------------------------

Create Uplinkset
    [Arguments]    ${name}    ${logicalInterconnectUri}    ${SwitchIP}    ${bay}    ${port}    ${NWUri}
    #${logicalInterconnectUri}    Get Logical Interconnect Uri    ${LiName}

    ${UplinkSet}    Build UplinkSet    ${name}    ${logicalInterconnectUri}    ${SwitchIP}    ${bay}
    ...    ${port}    ${NWUri}
    ${Response}    Fusion Api Add Uplink Sets    ${UplinkSet}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}
    [Return]    ${Response]

Build UplinkSet
    [Arguments]    ${Name}    ${logicalInterconnectUri}    ${SwitchIP}    ${Bay}    ${Port}    ${NWUri}
    ...    ${desiredSpeed}=Auto
    @{networkUris}    Create List    ${NWUri}
    @{fcNetworkUris}    Create List
    @{portConfigInfosList}    Build portConfigInfosList    ${SwitchIP}    ${Bay}    ${Port}    ${desiredSpeed}
    ${UplinkSet}    Create Dictionary    name=${name}    
    ...                                  type=uplink-set
    ...                                  fcNetworkUris=@{fcNetworkUris}
    ...                                  networkUris=@{networkUris}
    ...                                  portConfigInfos=${portConfigInfosList}
    ...                                  manualLoginRedistributionState=NotSupported
    ...                                  connectionMode=Auto
    ...                                  logicalInterconnectUri=${logicalinterconnecturi}
    ...                                  networkType=Ethernet
    [Return]    ${UplinkSet}

Build portConfigInfosList
    [Arguments]    ${SwitchIP}    ${Bay}    ${Port}    ${desiredSpeed}=Auto
    ${portConfigInfos}    Build portConfigInfos    ${SwitchIP}    ${Bay}    ${Port}    ${desiredSpeed}
    @{portConfigInfosList}    Create List    ${portConfigInfos}
    [Return]    @{portConfigInfosList}

Build portConfigInfos
    [Arguments]    ${SwitchIP}    ${Bay}    ${Port}    ${desiredSpeed}=Auto
    ${location}    Build Port Entry    ${SwitchIP}    ${Bay}    ${Port}
    ${portConfigInfos}    Create Dictionary    desiredSpeed=${desiredSpeed}    location=${location}
    [Return]    ${portConfigInfos}

Build Port Entry
    [Arguments]    ${SwitchIP}    ${Bay}    ${Port}
    ${PortItem}    Create Dictionary    type=Port    value=XGE1/0/${Port}
    ${BayItem}    Create Dictionary    type=Bay    value=${Bay}
    ${EncItem}    Create Dictionary    type=Ip    value=${SwitchIP}
    ${locationEntry}    Create List    ${PortItem}    ${BayItem}    ${EncItem}
    ${location}    Create Dictionary    locationEntries=${locationEntry}
    [Return]    ${location}


Get Infos List from UplinkSet
    [Arguments]    ${name}
    ${UplinkSets}    Fusion Api Get Uplink Sets
    ${members}    Get from Dictionary    ${UplinkSets}    members
    ${count}    Get From Dictionary    ${UplinkSets}    count
    : FOR    ${Index}    IN RANGE    0    ${count}
    \    ${UplinkSet}=    Get From Dictionary    ${members}    ${Index}
    \    ${ULSname}    Get From Dictionary    ${UplinkSet}    name
    \    Exit For Loop if    '${ULSname}'=='${name}'
    ${portConfigInfos}    Get From Dictionary    ${UplinkSet}    portConfigInfos
    ${LIUri}    Get From Dictionary    ${UplinkSet}    logicalInterconnectUri
    ${uristring}    Get From Dictionary    ${UplinkSet}    uri
    @{temp}=    Split String From Right    ${uristring}    separator=/
    Set Suite Variable    ${ULSuri}    @{temp}[-1]
    @{NWUris}    Get From Dictionary    ${UplinkSet}    networkUris
    [Return]    ${ULSuri}    ${LIUri}    ${portConfigInfos}    @{NWUris}

Add Uplinkset Port
    [Arguments]    ${name}    ${SwitchIP}    ${bay}    ${port}
    ${uri}    ${LIUri}    ${PCIs}    @{NWUris}    Get Infos List from UplinkSet    ${name}
    ${newPCI}    Build portconfiginfos    ${SwitchIP}    ${bay}    ${port}
    Append To List    ${PCIs}    ${newPCI}
    ${uplinkset}    Build new UplinkSet    ${PCIs}    ${Name}    ${LIUri}    @{NWUris}
    ${response}    Fusion Api Set Uplink Sets Id    ${uri}    ${uplinkset}
    [Return]    ${response}

Remove Uplinkset Port
    [Arguments]    ${name}    ${remPort}
    log    ${remPort}
    ${newPCIs}    Create List
    ${uri}    ${LIUri}    ${PCIs}    Get Infos List from UplinkSet    ${name}
    : FOR    ${pci}    IN    @{PCIs}
    \    ${locations}=    Get From Dictionary    ${pci}    location
    \    ${ents}=    Get From Dictionary    ${locations}    locationEntries
    \    ${result}    Check For Port Entries    ${ents}    ${remPort}
    \    log    ${result}
    \    Run Keyword if    ${result}==False    Append to List    ${newPCIs}    ${pci}
    \    log    ${newPCIs}
    ${uplinkset}    Build new UplinkSet    ${newPCIs}    ${Name}    ${LIUri}
    ${response}    Fusion Api Set Uplink Sets Id    ${uri}    ${uplinkset}
    [Return]    ${response}

Check for Port Entries
    [Arguments]    ${ents}    ${remPort}
    Set suite variable    ${remPort}    ${remPort}
    : FOR    ${ent}    IN    @{ents}
    \    ${type}    Get From Dictionary    ${ent}    type
    \    ${value}    Get From Dictionary    ${ent}    value
    \    Exit Forloop if    '${type}'=='Port'
    ${status}    Run Keyword and return status    should end with    ${value}    /${remPort}
    [Return]    ${status}

Build new UplinkSet
    [Arguments]    ${portCIs}    ${name}    ${LIUri}    @{networkUris}
    # Consider accepting @{networkUris} @{fcNetworkUris} as parameters
    @{networkUris}    Create List    # list can be empty but not null.
    @{fcNetworkUris}    Create List    # list can be empty but not null.
    ${UplinkSet}    Create Dictionary    name=${name}    type=uplink-set    fcNetworkUris=@{fcNetworkUris}    networkUris=@{networkUris}    portConfigInfos=${portCIs}
    ...    manualLoginRedistributionState=NotSupported    connectionMode=Auto    logicalInterconnectUri=${LIUri}    networkType=Ethernet
    [Return]    ${UplinkSet}

Remove Uplink Sets
    ${UplinkSets}    Fusion Api Get Uplink Sets
    ${members}    Get From Dictionary    ${UplinkSets}    members
    ${count}    Get From Dictionary    ${UplinkSets}    count
    : FOR    ${Index}    IN RANGE    0    ${count}
    \    ${UplinkSet}=    Get From Dictionary    ${members}    ${Index}
    \    ${uplinkuri}=    Get From Dictionary    ${UplinkSet}    uri
    \    @{uri}=    Split String from right    ${uplinkuri}    separator=/
    \    ${response}    Fusion Api delete Uplink Sets Id    @{uri}[-1]
    \    Check Response    ${response}

#---------------------------------------------------------------------------------
#        FIRMWARE
#---------------------------------------------------------------------------------
Get Firmware Driver Uri
    [Documentation]    Get Firmware Driver Uri By Name
    [Arguments]    ${FwBundleName}
    ${FirmwareDriverCollection}=    Fusion Api Get Firmware Drivers    filter="name='${FwBundleName}'"
    ${count}=    Get From Dictionary      ${FirmwareDriverCollection}    count
    Should not be Equal as Integers       ${count}            0          msg=Failed to find Firmware Driver ${FwBundleName}
    ${members}=    Get From Dictionary    ${FirmwareDriverCollection}    members
    ${member}=     Get From List          ${members}                     0
    ${name}=       Get From Dictionary    ${member}                      name
    Should Be Equal as Strings            ${FwBundleName}    ${name}    msg=Firmwre Driver Name did not match.
    ${uri}=        Get From Dictionary    ${member}           uri
    [Return]    ${uri}

#---------------------------------------------------------------------------------
#        ENCLOSURE GROUPS
#---------------------------------------------------------------------------------
Get Enclosure Group
    [Documentation]    Get Enclosure Group by Name
    [Arguments]    ${EncGroupName}
    ${EnclosureGroupCollection}=    Fusion Api Get Enclosure Groups      filter="name='${EncGroupName}'"
    ${count}=    Get From Dictionary      ${EnclosureGroupCollection}    count
    Should not be Equal as Integers       ${count}      0                msg=Failed to find Enclosure ${EncGroupName}
    ${members}=    Get From Dictionary    ${EnclosureGroupCollection}    members
    ${member}=     Get From List          ${members}                     0
    [Return]    ${member}

Get Enclosure Group Uri
    [Documentation]    Get Enclosure Group Uri by Name
    [Arguments]    ${EncGroupName}
    # ${EnclosureGroupCollection}=    Fusion Api Get Enclosure Groups      filter="name='${EncGroupName}'"
    # ${count}=    Get From Dictionary      ${EnclosureGroupCollection}    count
    # Should not be Equal as Integers       ${count}           0           msg=Failed to find Enclosure Group ${EncGroupName}
    # ${members}=    Get From Dictionary    ${EnclosureGroupCollection}    members
    # ${member}=     Get From List          ${members}                     0
    ${member}=     Get Enclosure Group    ${EncGroupName}
    ${name}=       Get From Dictionary    ${member}                      name
    Should Be Equal as Strings            ${EncGroupName}    ${name}     msg=Enclosure Group Name did not match.
    ${uri}=        Get From Dictionary    ${member}          uri
    [Return]    ${uri}

Build Enclosure Group Payload
    [Documentation]    Build json payload to Add new Enclosure Group
    [Arguments]    ${Name}    ${LIG NAME}

    ${LIG_uri}=    Get Logical Interconnect Group Uri    ${LIG NAME}

    # Create InterconnectBayMappings Dictionary
    ${InterconnectBayMappings}=    Create List
    :FOR   ${Bay}     IN RANGE    1    9
    \     ${InterconnectBay}=     Create Dictionary    interconnectBay=${Bay}
    \     ...                                          logicalInterconnectGroupUri=${LIG_uri}
    \     Append To List    ${InterconnectBayMappings}     ${InterconnectBay}

    # Create Dictionary Structure
    ${EnclosureGroups}    Create Dictionary    type=EnclosureGroupV2
    ...                                        name=${Name}    
    ...                                        stackingMode=Enclosure
    ...                                        interconnectBayMappings=${InterconnectBayMappings}
    Log Dictionary    ${EnclosureGroups}
    [Return]    ${EnclosureGroups}

Create Enclosure Group
    [Documentation]    Creates a new Enclosure Group
    [Arguments]    ${Name}    ${LIG NAME}

    # Build Payload
    ${EnclosureGroups}=    Build Enclosure Group Payload    ${Name}    ${LIG NAME}

    # Add Enclosure Groups
    ${Response}=     Fusion API Add Enclosure Group    ${EnclosureGroups}
    Log Dictionary    ${Response}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == 'OK'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

#---------------------------------------------------------------------------------
#        ENCLOSURES
#---------------------------------------------------------------------------------

Create Enclosure
    [Documentation]    Creates a new Enclosure Group
    [Arguments]    ${EncGroupUri}    ${EncIP}=${ENC_IP}    ${EncUsername}=${ENC_USERNAME}
    ...    ${EncPassword}=${ENC_PASSWORD}    ${Force}=${False}    ${FwBundleUri}=${EMPTY}
    ...    ${UpdateFwOn}=EnclosureOnly    ${ForceInstallFw}=${False}    ${timeout}=900

    # Build Payload
    ${Enc Payload}=    Create Dictionary    hostname=${ENC IP}
    ...                                     username=${ENC USERNAME}
    ...                                     password=${ENC PASSWORD}
    ...                                     force=${FORCE}
    ...                                     enclosureGroupUri=${ENC GROUP URI}
    ...                                     firmwareBaselineUri=${FW BUNDLE URI}
    ...                                     updateFirmwareOn=${UPDATE FW ON}
    ...                                     forceInstallFirmware=${FORCE INSTALL FW}
    Log Dictionary      ${Enc Payload}

    # Add Enclosure
    ${Response}=     Fusion API Add Enclosure    ${Enc Payload}    timeout=${TIMEOUT}
    Log Dictionary    ${Response}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'    ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

Get Enclosure
    [Documentation]    Get Enclosure by Name
    [Arguments]    ${EncName}=${ENC_NAME}
    ${EnclosureCollection}=    Fusion Api Get Enclosures             filter="name='${EncName}'"
    ${count}=    Get From Dictionary      ${EnclosureCollection}    count
    Should not be Equal as Integers       ${count}      0           msg=Failed to find Enclosure ${EncName}
    ${members}=    Get From Dictionary    ${EnclosureCollection}    members
    ${member}=     Get From List          ${members}                0
    [Return]    ${member}


Get Enclosure Uri
    [Documentation]    Get Enclosure Uri by Name
    [Arguments]    ${EncName}=${ENC_NAME}
    ${member}=     Get Enclosure          ${EncName}
    ${name}=       Get From Dictionary    ${member}     name
    Should Be Equal as Strings            ${EncName}    ${name}     msg=Enclosure Name did not match.
    ${uri}=        Get From Dictionary    ${member}     uri
    [Return]    ${uri}

Get Enclosure Bay
    [Documentation]     Get Device Bay presence by Number in a specified Enclosure
    [Arguments]    ${EncBayNumber}    ${EncName}=${ENC_NAME}

    # Get Enclosure data
    ${member}=     Get Enclosure          ${EncName}
    ${name}=       Get From Dictionary    ${member}     name
    Should Be Equal as Strings            ${EncName}    ${name}     msg=Enclosure Name did not match.

    # Get Device data
    ${deviceBays}=        Get From Dictionary    ${member}    deviceBays
    ${index}=    Evaluate    ${EncBayNumber}-1
    ${bay}=    Get From List    ${deviceBays}    ${index}
    Log Dictionary     ${bay}
    ${number}=    Get From Dictionary    ${bay}    bayNumber
    Should be Equal as Strings       ${number}     ${EncBayNumber}    msg=Incorrect bay information received.
    Dictionary Should Contain Key    ${bay}        devicePresence     msg=Bay information did not contain devicePresence attribute
    [Return]     ${bay}

# -----------------------------------------------------------------------------
#       SERVER PROFILES
# -----------------------------------------------------------------------------

Build Server Profile with assigned Hardware
    [Documentation]    Craete new Server Profile
    [Arguments]    ${Name}    ${ServerHwName}

    # Build Payload
    ${Payload}=    Build Server Profile Payload    ${Name}    ServerHwName=${ServerHwName}

    [Return]    ${Payload}

Build Server Profile with unassigned Hardware
    [Documentation]    Craete new Server Profile with unassigned Server Hardware
    ...                NOTE: Will not fail if Profile name already exists.
    [Arguments]     ${Name}    ${ServerHwTypeName}    ${EncGroupName}

    # Build Payload
    ${Payload}=    Build Server Profile Payload    ${Name}    ServerHwTypeName=${ServerHwTypeName}     
    ...                                                       EncGroupName=${EncGroupName}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Build Server Profile with empty bay
    [Documentation]    Craete new Server Profile with empty Server Hardware bay
    ...                NOTE: Will not fail if Profile name already exists.
    [Arguments]     ${Name}    ${ServerHwTypeName}    ${EncGroupName}    ${EncName}    ${EncBay}

    # Build Payload
    ${Payload}=    Build Server Profile Payload    ${Name}    ServerHwTypeName=${ServerHwTypeName}     
    ...                                                       EncGroupName=${EncGroupName}
    ...                                                       EncBay=${EncBay}
    ...                                                       EncName=${EncName}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Build Server Profile Payload
    [Documentation]    Create Payload dictionary with basic Server Profile required and optional attributes
    [Arguments]     ${Name}    ${Affinity}=${null}    ${Description}=${null}    
    ...             ${ServerHwName}=${null}    ${ServerHwTypeName}=${null}    
    ...             ${EncGroupName}=${null}    ${EncName}=${null}    ${EncBay}=${null}    
    ...             ${MacType}=${null}    ${WwnType}=${null}    ${SerialNumberType}=${null}

    ${EncUri}=         Run Keyword If    '${EncName}'!='${null}'         Get Enclosure Uri          ${EncName}
    ${EncGroupUri}=    Run Keyword If    '${EncGroupName}'!='${null}'    Get Enclosure Group Uri    ${EncGroupName}
    ${ServerHwUri}=    Run Keyword If    '${ServerHwName}'!='${null}'    Get Server Hardware Uri    ${ServerHwName}
    ${ServerHwTypeUri}=    Run Keyword If    '${ServerHwTypeName}'!='${null}'   Get Server Hardware Type Uri    ${ServerHwTypeName}

    # Build Payload
    ${Payload}=    Create Dictionary    type=ServerProfileV3
    ...                                 name=${Name}
    ...                                 affinity=${Affinity}
    ...                                 description=${Description}
    ...                                 macType=${macType}
    ...                                 wwnType=${WwnType}
    ...                                 serialNumberType=${SerialNumberType}
    ...                                 serverHardwareUri=${ServerHwUri}
    ...                                 serverHardwareTypeUri=${ServerHwTypeUri}
    ...                                 enclosureGroupUri=${EncGroupUri}
    ...                                 enclosureUri=${EncUri}
    ...                                 enclosureBay=${EncBay}

    [Return]  ${Payload}

Add Bios Settings to Server Profile
    [Documentation]    Adds bios settings to Server Profile Payload
    # "bios": {
    #     "manageBios": true,
    #      "overriddenSettings": [{ "id": "91", "value": "1" },
    #                             { "id": "158","value": "2" }]
    # },
    [Arguments]    ${Payload}    ${OverriddenSettings}    ${Manage}=${False}

    ${Bios Settings}=    Create Dictionary    manageBios=${Manage}
    ...                                       overriddenSettings=${OverriddenSettings}
    Set To Dictionary    ${Payload}    bios    ${Bios Settings}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Add Boot Order to Server Profile
    [Documentation]    Adds Boot Order Settings to Server Profile Payload
    # ... "boot": {
    # ...     "manageBoot": true,
    # ...     "order": ["PXE", "HardDisk", "CD", "Floppy", "USB"]
    # ... },
    [Arguments]    ${Payload}    ${Order}    ${Manage}=${False}

    ${Boot Settings}=    Create Dictionary    manageBoot=${Manage}
    ...                                       order=${Order}
    Set To Dictionary    ${Payload}    boot    ${Boot Settings}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Add Firmware Baseline to Server Profile
    [Documentation]     Adds Firmware Baseline to Server Profile Payload
    # "firmware": {
    #     "manageFirmware": true,
    #     "firmwareBaselineUri": "/rest/firmware-drivers/{fwBaselineId}",
    #     "forceInstallFirmware": false
    # }
    [Arguments]    ${Payload}     ${Name}    ${Manage}=${True}    ${ForceInstall}=${False}

    ${uri}=    Get Firmware Driver Uri    ${Name}

    ${Firmware}=    Create Dictionary    manageFirmware=${Manage}
    ...                                  firmwareBaselineUri=${uri}
    ...                                  forceInstallFirmware=${ForceInstall}
    Set To Dictionary    ${Payload}    firmware    ${Firmware}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Add Connection to Server Profile
    [Documentation]    
    # "connections": [{
    #         "id": 2,
    #         "functionType": "FibreChannel",
    #         "portId": "Auto",
    #         "requestedMbps": 2500,
    #         "wwpnType": "UserDefined",
    #         "wwnn": "10:00:1C:11:00:00:00:00",
    #         "wwpn": "10:00:1C:11:00:00:00:01",
    #         "macType": "UserDefined",
    #         "mac": "12:11:11:00:00:00",
    #         "networkUri": "/rest/fc-networks/{fcNetworkID}",
    #     }]
    [Arguments]    ${Payload}    ${type}    ${networkName}    
    ...            ${port}=${null}        ${bw}=${null}    ${boot}=${null}
    ...            ${wwpnType}=${null}    ${wwnn}=${null}    ${wwpn}=${null}
    ...            ${macType}=${null}     ${mac}=${null}

    # Check for existing connections and determine id
    ${rc}=    Run Keyword and Return Status    Dictionary Should Contain Key    ${Payload}    connections
    ${connections}=    Run Keyword If    '${rc}'=='${True}'    Get From Dictionary    ${Payload}    connections
    ...                ELSE              Create List
    ${size}=    Get Length    ${connections}
    ${id}=      Evaluate      ${size} + 1

    # Get Network Uri
    ${networkUri}=    Run Keyword If    '${type}'=='Ethernet'        Get Ethernet Network uri by Name         ${networkName}
    ...               ELSE IF           '${type}'=='FibreChannel'    Get Fibre Channel Network uri by Name    ${networkName}
    ...               ELSE               Fail                        msg=Unknown Netowrk Type '${type}'. Should be 'Ethernet' or 'FibreChannel'.

    # Build connection payload
    # Add Required Parameters
    ${Connection}=    Create Dictionary     id=${id}
    ...                                     functionType=${type}
    ...                                     networkUri=${networkUri}
    ...                                     portId=${port}
    ...                                     requestedMbps=${bw}
    ...                                     boot=${boot}
    ...                                     wwpnType=${wwpnType}
    ...                                     wwpn=${wwpn}
    ...                                     wwnn=${wwnn}
    ...                                     macType=${macType}
    ...                                     mac=${mac}

    # Add to Connections
    Append To List    ${connections}    ${connection}

    # Add to Payload
    Set To Dictionary    ${Payload}    connections    ${connections}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Add San Storage Volume to Server Profile
    [Documentation]    Adds SAN Storage volume to Server Profile Payload
    ...                If SAN Storage voluems exist, new volume will be added
    ...                to existing members.
    ...                NOTE: hostOSType, manageSanStorage parameters will be 
    ...                overwritten on each execution
    # "sanStorage": {
    #     "hostOSType": "Windows 2012 / WS2012 R2",
    #     "manageSanStorage": true,
    #     "volumeAttachments": [{
    #         "id": 1,
    #         "lunType": "Auto",
    #         "volumeUri": "/rest/storage-volumes/{volumeID}",
    #         "volumeStoragePoolUri": "/rest/storage-pools/{poolID}",
    #         "volumeStorageSystemUri": "/rest/storage-systems/{systemID}",
    #         "storagePaths": [{
    #             "storageTargets": [],
    #             "connectionId": 1,
    #             "isEnabled": true
    #         }]
    #     }
    [Arguments]    ${Payload}    ${HostOSType}    ${Manage}=${True}
    ...            ${Lun}=${null}    ${LunType}=Auto   
    ...            ${VolumeName}=${null}    ${PoolName}=${null}    ${StorageSystemName}=${null}
    ...            ${StoragePaths}=${null}    ${Description}=${null}    ${Type}=${null}
    ...            ${Sharable}=${null}    ${Capacity}=${null}

    # Storage keywords not implemented yet. 
    Log     Partially implemented until Storage Keywords are available.
    [Return]     ${True}
    
    # Get San Storage if exists
    ${status}=    Run Keyword and Return Status     Get From Dictionary    ${Payload}    sanStorage
    ${SanStorage}=    Run Keyword If    '${status}'=='${True}'    Set Variable    ${status}
    ...               ELSE                                     Create Dictionary

    # Get Volume Attachments if exists
    ${status}=    Run Keyword and Return Status     Get From Dictionary    ${SanStorage}    volumeAttachments
    ${Volumes}=    Run Keyword If    '${status}'=='${True}'    Set Variable    ${status}
    ...               ELSE                                     Create List
    ${size}=    Get Length    ${Volumes}
    ${id}=      Evaluate      ${size} + 1

    # Get Volume info
    ${VolUri}=     Run Keyword If    '${VolumeName}'!='${null}'    Get Storage Volume Uri    ${VolumeName}
    ${PoolUri}=    Run Keyword If    '${PoolName}'!='${null}'      Get Storage Pool Uri      ${PoolName}
    ${SystemUri}=    Run Keyword If    '${StorageSystemName}'!='${null}'    Get Storage System Uri    ${StorageSystemName}

    # Build Volume
    ${Volume}=    Create Dictionary    id=${id}
    ...                                lunType=${LunType}
    ...                                volumeUri=${VolUri}
    ...                                volumeStoragePoolUri=${PoolUri}
    ...                                volumeStorageSystemUri=${SystemUri}
    ...                                storagePaths=${StoragePaths}

    # Add to Volume list
    Append To List    ${Volumes}    ${Volume}

    # Build SanStorage
    ${SanStorage}=    Create Dictionary    hostOSType=${HostOSType}
    ...                                    manageSanStorage=${Manage}
    ...                                    volumeAttachments=${Volumes}

    # Add SanStorage to Payload
    Set To Dictionary    ${Payload}    sanStorage    ${SanStorage}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Add Local Storage to Server Profile
    [Documentation]     Adds Local Storage Drive to Server Profile Payload
    ...                 NOTE: manageLocalStorage and initialize parameters 
    ...                 are overwritten on each execution
    # "localStorage": {
    #     "manageLocalStorage": true,
    #     "initialize": false,
    #     "logicalDrives": [{
    #         "raidLevel": "Raid0",
    #         "bootable": false
    #     }]
    # },
    [Arguments]    ${Payload}     ${RaidLevel}    ${Bootable}=${False}    ${Manage}=${True}    ${Initialize}=${False}

    # Storage keywords not implemented yet. 
    Log     Partially implemented until Storage Keywords are available.
    [Return]     ${True}

    ${uri}=    Get Firmware Driver Uri    ${Name}

    # Get list of Logical Drives if exists
    ${status}=    Run Keyword and Return Status     Get From Dictionary    ${Payload}    localStorage
    ${LogicalDrives}=    Run Keyword If    '${status}'=='${True}'    Set Variable    ${status}
    ...                  ELSE                                     Create List

    # Logical Drive Info
    ${LogicalDrive}=    Create Dictionary    raidLevel=${RaidLevel}
    ...                                      bootable=${Bootable}

    # Add to list of Logical Drives
    Append To List    ${LogicalDrives}     ${LogicalDrive}

    # Local Storage Info
    ${LocalStorage}=    Create Dictionary    manageLocalStorage=${Manage}
    ...                                      initialize=${Initialize}
    ...                                      logicalDrives=${LogicalDrives}

    Set To Dictionary    ${Payload}    localStorage    ${LocalStorage}

    Log Dictionary    ${Payload}
    [Return]    ${Payload}

Create Server Profile
    [Documentation]     Add Server Profile
    [Arguments]     ${SP Payload}    ${timeout}=120

    ${Response}=     Fusion API Add Server Profile    ${SP Payload}    timeout=${timeout}
    Log Dictionary    ${Response}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'   ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

Get Server Profile
    [Documentation]    Get Server Profile by Name
    [Arguments]    ${ServerProfileName}
    ${ServerProfileCollection}=    Fusion Api Get Server Profiles
    ${count}=    Get From Dictionary      ${ServerProfileCollection}    count
    Should not be Equal as Integers       ${count}           0           msg=No Server Profiles Found
    @{members}=    Get From Dictionary    ${ServerProfileCollection}    members

    :FOR    ${member}    IN    @{members}
    \    Log Dictionary    ${member}
    \    ${name}=     Get From Dictionary    ${member}          name
    \    Continue For Loop If    '${ServerProfileName}'!='${name}'
    \    Return From Keyword    ${member}

    Fail    msg=Failed to find Server Profile ${ServerProfileName}.

# -----------------------------------------------------------------------------
#       SERVER HARDWARE
# -----------------------------------------------------------------------------

Get Server Hardware
    [Documentation]    Get unused Server Hardware by Name
    [Arguments]    ${ServerHwName}
    ${ServerHwCollection}=    Fusion Api Get Server Hardware        filter="serverProfileUri=null"
    ${count}=    Get From Dictionary      ${ServerHwCollection}    count
    Should not be Equal as Integers       ${count}           0           msg=No Server Hardware Found
    @{members}=    Get From Dictionary    ${ServerHwCollection}    members

    :FOR    ${member}    IN    @{members}
    \    Log Dictionary    ${member}
    \    ${name}=     Get From Dictionary    ${member}          name
    \    Continue For Loop If    '${ServerHwName}'!='${name}'
    \    Return From Keyword    ${member}

    Fail    msg=Failed to find Server Hardware ${ServerHwName}.

Get Server Hardware Uri
    [Documentation]    Get Uri of unused Server Hardware by Name
    [Arguments]    ${ServerHwName}
    ${ServerHw}=     Get Server Hardware    ${ServerHwName}
    Log Dictionary    ${ServerHw}
    ${name}=     Get From Dictionary    ${ServerHw}          name
    Continue For Loop If    '${ServerHwName}'!='${name}'
    ${uri}=       Get From Dictionary   ${ServerHw}          uri
    [Return]    ${uri}

# -----------------------------------------------------------------------------
#       SERVER HARDWARE TYPES
# -----------------------------------------------------------------------------

Get Server Hardware Type Uri
    [Documentation]    Get Uri of unused Server Hardware by Name
    [Arguments]    ${ServerHwTypeName}
    ${ServerHwTypeCollection}=    Fusion Api Get Server Hardware Types
    ${count}=    Get From Dictionary      ${ServerHwTypeCollection}    count
    Should not be Equal as Integers       ${count}           0           msg=No Server Hardware Types Found
    @{members}=    Get From Dictionary    ${ServerHwTypeCollection}    members

    :FOR    ${member}    IN    @{members}
    \    Log Dictionary    ${member}
    \    ${name}=     Get From Dictionary    ${member}          name
    \    Continue For Loop If    '${ServerHwTypeName}'!='${name}'
    \    ${uri}=       Get From Dictionary   ${member}          uri
    \    Return From Keyword    ${uri}

    Fail    msg=Failed to find Server Hardware Type ${ServerHwTypeName}.

#---------------------------------------------------------------------------------
#        LLDP
#---------------------------------------------------------------------------------
Get Port Neighbor Data From Fusion
    ${Id}    Fusion API Get Interconnects
	${First}=    Get From Dictionary    ${Id}    members
	${Myfirst}=    Get From List    ${First}    0
	${PayloadUri}=    Get From Dictionary    ${Myfirst}    uri
	${Uri}    Get Id From Uri    ${PayloadUri}
    ${Ports}    Fusion Api Get Interconnects Ports    ${Uri}
    @{Members}    Get From Dictionary    ${Ports}    members
	${Dict}    Create Dictionary    
    : FOR    ${Member}    IN    @{Members}
	\    ${PortName}    Get From Dictionary    ${Member}    portName
	\    ${Neighbor}    Get From Dictionary    ${Member}    neighbor
	\    @{temp}=    Split String    ${portName}    separator=GE
	\    Run Keyword If    "${Neighbor}" != "None"    Set To Dictionary    ${Dict}    @{temp}[-1]    ${Neighbor}
    [Return]    ${Dict}
    

	
#----------------------------------------------------------------------------
#       SAN MANAGERS
#-----------------------------------------------------------------------------
Create SAN Manager
    [Documentation]     Add SAN Manager
    [Arguments]     ${SP Payload}    ${timeout}=120

    ${Response}=     Fusion API Add SAN Manager    ${SP Payload}    timeout=${timeout}
    Log Dictionary    ${Response}
    ${Status}       Get From Dictionary    ${Response}    status
    Return From Keyword If    '${Status}' == '200'   ${Response}
    ${errorCode}    Get From Dictionary    ${Response}    errorCode
    ${message}      Get From Dictionary    ${Response}    message
    Fail    msg=Invalid response returned ${Status} ${errorCode} ${message}

Get Managed SAN
    [Documentation]    Get SAN Manager by Name
    [Arguments]    ${SANManagerName}
    ${SANManagerCollection} =    Fusion API Get Managed SAN
    ${count}=    Get From Dictionary      ${SANManagerCollection}=}    count
    Should not be Equal as Integers       ${count}           0           msg=No SAN Managers Found
    @{members}=    Get From Dictionary    ${SANManagerCollection}=}    members

    :FOR    ${member}    IN    @{members}
    \    Log Dictionary    ${member}
    \    ${name}=     Get From Dictionary    ${member}          name
    \    Continue For Loop If    '${SANManagerName}'!='${name}'
    \    Return From Keyword    ${member}

    Fail    msg=Failed to find SAN Manager ${SANManagerName}.


