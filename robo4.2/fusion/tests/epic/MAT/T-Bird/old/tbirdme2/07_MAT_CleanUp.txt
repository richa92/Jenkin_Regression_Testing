*** Settings ***
Documentation
...     This Test Suite uses Administrator credentials to Teardown the appliance.
...     First Test is to unassign Server Profile before removing all the resources that were added in other EPIC MAT Test Suites.
...     TAGS:                      CLEAN UP
Library  time
Resource                        ./resource_tbird.txt
Suite Setup                     MAT Suite Setup     ${admin_credentials}
Suite Teardown                  MAT Suite Teardown
Variables                       ./data_variables_tbird.py

*** Test Cases ***

Remove Server Profiles Async
    [Tags]    REMOVEPROFILE
    ${responses} =  Remove All Server Profiles Async
    Run Keyword for List with kwargs  ${responses}  Wait For Task2   timeout=3000    interval=15
    ${resp} =   Fusion Api Get Server Profiles
    Run Keyword Unless  '${resp['count']}' == '0'    Fail     msg=Not All Server Profiles were deleted

Remove Logical Enclosure from OV
    [Tags]    REMOVELE
    Remove All LEs

Remove EG
    [Tags]    REMOVEEG
    Remove All Enclosure Groups     ${VERIFY}

Remove LIG
    [Tags]    REMOVELIG
    Remove All LIGS     ${VERIFY}
    Remove All SAS LIGs      ${VERIFY}

Remove Network Set
    [Tags]    REMOVENETWORKSET
    Remove All Networks Sets Async      ${VERIFY}

Remove FC Network
    [Tags]    REMOVEFCNETWORK
    Remove All FC Networks Async    ${VERIFY}

Remove FCOE Network
    [Tags]    REMOVEFCOENETWORK
    Remove All FCoE Networks
    ${resp} =   Fusion Api Get Fcoe Networks
    Run Keyword Unless  '${resp['count']}' == '0'    Fail     msg=Not All FCoE Networks were deleted

Remove Ethernet Network
    [Tags]    REMOVEETHERNETNETWORK
    Remove All Ethernet Networks Async  ${VERIFY}

Remove Storage Volume
    [Tags]    REMOVESTORAGEVOL
    Remove All Storage Volumes Async    ${delete_storage_volume_ov_only_headers}  ${VERIFY}

Remove Storage System
    [Tags]    REMOVESTORAGESYS
    ${responses} =  Remove All Storage Systems
    Run Keyword for List with kwargs  ${responses}  Wait For Task2   timeout=600    interval=5
    ${resp} =   Fusion Api Get Storage System
    Run Keyword Unless  '${resp['count']}' == '0'    Fail     msg=Not All Storage Systems were deleted

Remove San Manager
    [Tags]    REMOVESANMANAGER
    Remove All San Managers     ${VERIFY}

Remove SPP
    [Tags]  REMOVESPP
    Delete SPP From Fusion    ${APPLIANCE_IP}    ${admin_credentials['userName']}     ${admin_credentials['password']}      ${spp_details['spp']}

Remove Users
    [Tags]    REMOVEUSER
    Remove All Users    ${VERIFY}

Remove Licenses
    [Tags]    REMOVELICENSE
    Delete All Fusion License     ${VERIFY}

Verify Enclosure
    [Tags]      VERIFY
    ${verify_enc_statuses} =   Create List
    :FOR    ${enc}  IN  @{encs_monitor}
    \   ${verify_enc}=   Verify TBird Resource     ${enc}
    \   Append To List  ${verify_enc_statuses}  ${verify_enc}
    :FOR    ${verify_enc}   IN  @{verify_enc_statuses}
    \   Run Keyword If  '${verify_enc['status']}'=='False'  Log   Verify Enclosure Failed for Enclosure ${verify_enc['name']}     WARN
    ${verify_server_statuses} =   Create List
    :FOR    ${server}  IN  @{server_monitor}
    \   ${verify_server}=   Verify TBird Resource     ${server}
    \   Append To List  ${verify_server_statuses}  ${verify_server}
    :FOR    ${verify_server}   IN  @{verify_server_statuses}
    \   Run Keyword If  '${verify_server['status']}'=='False'  Log   Verify Enclosure Failed for Server ${verify_server['name']}     WARN
    ${verify_interconnects_statuses} =   Create List
    :FOR    ${interconnects}  IN  @{interconnects_monitor}
    \   ${verify_interconnects}=   Verify TBird Resource     ${interconnects}
    \   Append To List  ${verify_interconnects_statuses}  ${verify_interconnects}
    :FOR    ${verify_interconnects}   IN  @{verify_interconnects_statuses}
    \   Run Keyword If  '${verify_interconnects['status']}'=='False'  Log   Verify Enclosure Failed for Interconnect ${verify_interconnects['name']}     WARN
    ${verify_sasinterconnects_statuses} =   Create List
    :FOR    ${sasinterconnects}  IN  @{sasinterconnects_monitor}
    \   ${verify_sasinterconnects}=   Verify TBird Resource     ${sasinterconnects}
    \   Append To List  ${verify_sasinterconnects_statuses}  ${verify_sasinterconnects}
    :FOR    ${verify_sasinterconnects}   IN  @{verify_sasinterconnects_statuses}
    \   Run Keyword If  '${verify_sasinterconnects['status']}'=='False'  Log   Verify Enclosure Failed for SasInterconnect ${verify_sasinterconnects['name']}     WARN
