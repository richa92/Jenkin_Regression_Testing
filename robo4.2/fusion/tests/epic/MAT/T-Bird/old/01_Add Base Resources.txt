*** Settings ***
Documentation
...     This Test Suite uses Administrator credentials for Refresh and Verify Enclosure, Add License, San Manager, User, Networks, Network Sets, Storage System, LIG, EG and upload SPP Tests.
...     These Setup Tests are prerequisite for other EPIC MAT Test Suites.
...     Test Data is defined in Python Data Variable file.
...     TAGS:                      SETUP
Resource                        ./resource_tbird.txt
Suite Setup                     MAT Suite Setup     ${admin_credentials}
Suite Teardown                  MAT Suite Teardown
Variables                       ./data_variables_tbird.py

*** Test Cases ***

Refresh Enclosure
    [Tags]      REFRESH
    ${responses}=  Refresh Enclosure Async   ${encs_monitor}
    Run Keyword for List with kwargs  ${responses}  Wait For Task2  timeout=1000    interval=20

Verify Enclosure
    [Tags]      VERIFY
    ${verify_enc_statuses} =   Create List
    :FOR    ${enc}  IN  @{encs_monitor}
    \   ${verify_enc}=   Verify TBird Resource     ${enc}
    \   Append To List  ${verify_enc_statuses}  ${verify_enc}
    :FOR    ${verify_enc}   IN  @{verify_enc_statuses}
    \   Run Keyword If  '${verify_enc['status']}'=='False'  Log   Verify Enclosure Failed for Enclosure ${verify_enc['name']}     WARN
    ${verify_server_statuses} =   Create List
    :FOR    ${server}  IN  @{server_monitor}
    \   ${verify_server}=   Verify TBird Resource     ${server}
    \   Append To List  ${verify_server_statuses}  ${verify_server}
    :FOR    ${verify_server}   IN  @{verify_server_statuses}
    \   Run Keyword If  '${verify_server['status']}'=='False'  Log   Verify Enclosure Failed for Server ${verify_server['name']}     WARN
    ${verify_interconnects_statuses} =   Create List
    :FOR    ${interconnects}  IN  @{interconnects_monitor}
    \   ${verify_interconnects}=   Verify TBird Resource     ${interconnects}
    \   Append To List  ${verify_interconnects_statuses}  ${verify_interconnects}
    :FOR    ${verify_interconnects}   IN  @{verify_interconnects_statuses}
    \   Run Keyword If  '${verify_interconnects['status']}'=='False'  Log   Verify Enclosure Failed for Interconnect ${verify_interconnects['name']}     WARN
    ${verify_sasinterconnects_statuses} =   Create List
    :FOR    ${sasinterconnects}  IN  @{sasinterconnects_monitor}
    \   ${verify_sasinterconnects}=   Verify TBird Resource     ${sasinterconnects}
    \   Append To List  ${verify_sasinterconnects_statuses}  ${verify_sasinterconnects}
    :FOR    ${verify_sasinterconnects}   IN  @{verify_sasinterconnects_statuses}
    \   Run Keyword If  '${verify_sasinterconnects['status']}'=='False'  Log   Verify Enclosure Failed for SasInterconnect ${verify_sasinterconnects['name']}     WARN

Add License
    [Tags]      ADDLICENSE      SETUP
    Run Keyword If  ${licenses} is not ${null}    Add Licenses from variable    ${licenses}     ${VERIFY}

Add San Manager Async
    [Tags]    ADDSANMANAGER     SETUP
    ${responses}=  Add Non Existing San Managers  ${san_managers}
    Run Keyword for List  ${responses}  Wait For Task2
    Verify Resources for List  ${expected_san_managers}

Add User Async
    [Tags]    ADDUSER       SETUP
    ${responses} =  Add Users from variable    ${users}
    Run Keyword for List  ${responses}  Wait For Task2

SPP Upload
    [Tags]    ADDSPP        SETUP
    Upload SPP to Fusion    ${APPLIANCE_IP}    ${admin_credentials['userName']}     ${admin_credentials['password']}      ${spp_details['path']}

Add Ethernet Networks Async
    [Tags]    ADDETHERNETNETWORK    SETUP
    Run Keyword If  '${PREV TEST STATUS}'=='FAIL'     Pause Execution    message=Add San Manager Async failed. Press OK to continue.
    Run Keyword If  ${ethernet_networks} is not ${null}    Add Ethernet Networks from variable async    ${ethernet_networks}  ${VERIFY}  ${expected_ethernet_networks}

Add FC Networks Async
    [Tags]    ADDFCNETWORK      SETUP
    ${responses}=  Add Non Existing FC Networks  ${fc_networks}
    Run Keyword for List  ${responses}  Wait For Task2
    Verify Resources for List  ${expected_fc_networks}

Add FCOE Networks
    [Tags]    ADDFCOENETWORK    SETUP
    Run Keyword If  ${fcoe_networks} is not ${null}    Add FCoE Networks from variable async    ${fcoe_networks}    ${VERIFY}   ${expected_fcoe_networks}

Add Network Sets Async
    [Tags]    ADDNETWORKSET     SETUP
    Run Keyword If  ${network_sets} is not ${null}    Add Networks Sets from variable async    ${network_sets}  ${VERIFY}  ${expected_network_sets}

Add Storage System Async
    [Tags]    ADDSTORAGESYS     SETUP
    ${responses}=  Add Non Existing Storage Systems  ${storage_systems}
    Run Keyword for List  ${responses}  Wait For Task2
    ${edit_responses}=  Edit Storage Systems  ${storage_systems}
    Run Keyword for List    ${edit_responses}  Wait For Task2
    Verify Resources for List  ${expected_storage_systems}

ADD LIGs
    [Tags]    ADDLIG        SETUP
    Run Keyword If  ${ligs} is not ${null}          Add LIG from list        ${ligs}
    Run Keyword If  ${sas_ligs} is not ${null}          Add SAS LIG from list        ${sas_ligs}

ADD EG
    [Tags]    ADDEG     SETUP
    Run Keyword If  ${enc_groups} is not ${null}    Add Enclosure Group from variable sync    ${enc_groups}
