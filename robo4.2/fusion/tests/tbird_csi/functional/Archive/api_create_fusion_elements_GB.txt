*** Settings ***
Documentation
...    = Usage =
...    | pybot | -L DEBUG | api_create_fusion_elements_GB.txt |
...    = Variables =
...    | ENCLOSURE | Required. Dictionary key from variables.py representing the desired enclosure. |

Library           Collections
Library           RoboGalaxyLibrary            # DVTs Robot Framework extensions
Library           FusionLibrary                # DVTs Robot Framework extensions
Variables         ../resources/variables.py    ${ENCLOSURE}
Variables	        ../resources/configFile2.py
Resource          ../resources/constants.txt
Resource          ../resources/fusion_api.txt  # DVT fusion API extensions
Resource          ../resources/em_api.txt
Resource          ../resources/enclosure_info.txt
Resource          ../resources/fusion_ssh.txt  # DVT fusion API extensions
Resource          ../resources/system_info.txt

Force Tags        API    HW

Suite Setup       Login To Fusion Via REST
Suite Teardown    Logout Of Fusion Via REST

*** Variables ***
#${Bay}           ${None}
#${UplinkSets}    ${None}


*** Test Cases ***
Verify Enclosure in Monitored State
    [Tags]    Monitored
    Verify Enclosure in Monitored State

Create FCoe Network
    [Tags]	FCoE
    : FOR    ${index}    IN RANGE    1    ${total_fcoenetwork}
    \  ${FCoe_Network_Name}    Catenate    SEPARATOR=_    FCoe_Network_Name    ${index}  
    \  ${FCoe_Network_VLAN}    Catenate    SEPARATOR=_    FCoe_Network_VLAN    ${index}
    \  Create FCoE Network    ${${FCoe_Network_Name}}    ${${FCoe_Network_VLAN}}
    

Create Ethernet Networks
    [Tags]    Ethernet
    : FOR    ${index}    IN RANGE    1    ${total_ethernetnetwork}
    \  ${Eth_Network_Name}    Catenate    SEPARATOR=_    Eth_Network_Name    ${index}  
    \  ${Eth_Network_VLAN}    Catenate    SEPARATOR=_    Eth_Network_VLAN    ${index}
    \  ${Preffered_Speed}    Catenate    SEPARATOR=_    Preffered_Speed    ${index}
    \  ${Maximum_Speed}    Catenate    SEPARATOR=_    Maximum_Speed    ${index}    
    \  Create Ethernet Networks    ${${Eth_Network_Name}}    ${${Eth_Network_VLAN}}    ${${Preffered_Speed}}    ${${Maximum_Speed}}
    Verify Enclosure in Monitored State

Add Uplink Set to LIG
#hard coded for ethernet network for now
     [Tags]    UplinkSet
     #${ICM Bay}=       Select Random Present Enclosure interconnectBays
     ${ICM_Bay}=    Select Bay    interconnectBays	${ICM Bay}
     Log    ${ICM_Bay }
     ${UplinkSets}=    Create Uplink Set Payload    ${ICM Port}    ${ICM_Bay}    ${Uplink_name}    ${Uplink_network_name}
     Log    ${UplinkSets}
     Set Suite Variable    ${UplinkSets}

Create Logical Interconnect Group
    [Tags]    LIG
    Create LIG		NAME=${LIG Name}    UPLINK_SETS=${UplinkSets}    REDUNDANCY_TYPE=${REDUNDANCY_TYPE}    ICM_BAY_SET=${ICM_BAY_SET}
    # Verify Enclosure in Monitored State

Create Enclosure Group
    [Tags]    EG
    Create EnclosureGroup    ${EG Name}    ${ipAddressingMode}    ${Total_Enc_count}
    #Verify Enclosure in Monitored State

Create Logical Enclosure
    [Tags]    LE
    Create LE    ${LE_name}
    #Verify Enclosure in Configured State

Create Server Profile
    [Tags]    SP
    Log     ${Network_Name}
    Log    ${Port_id}
    Log    ${Network_requested_speed[0]}
    Create ServerProfile    ${SP_Name}    ${SP_affinity}    ${HideUnusedFlexNics}    
    ...    ${Network_Name}    ${Port_id}    ${Network_requested_speed}    ${Bay_No}    ${Boot_Mode}
   

*** Keywords ***
Create Ethernet Networks
    [Arguments]		${Name}		${VLAN}     ${Preffered_Speed}     ${Maximum_Speed}
    [Documentation]	Creates multiple networks depending on the range and amount of VLAN IDs.
    Log    ${Preffered_Speed}
    ${Preffered_Speed}    Set Variable if    ${Preffered_Speed}==0    2500     ${Preffered_Speed}
    ${Maximum_Speed}      Set Variable if    ${Maximum_Speed}==0      20000    ${Maximum_Speed}
 
    @{VLAN_IDs}		Split String	${VLAN}		,

    :FOR	${index}	IN	@{VLAN_IDs}
	\	@{Nums}		Run Keyword If		'-' in '${index}'	Split String
	\	...					${index}		-
	\	Run Keyword If		'-' in '${index}'	Loop Through Range
  \	...		@{Nums}[0]	@{Nums}[1]	${Name}    ${Preffered_Speed}     ${Maximum_Speed}
	\	...	ELSE    Loop Through Range
	\	...		${VLAN}    ${VLAN}    ${Name}    ${Preffered_Speed}     ${Maximum_Speed}

Loop Through Range
    [Arguments]		${Num1}		${Num2}		${Name}    ${Preffered_Speed}     ${Maximum_Speed}
    [Documentation]	Adds a Network for each VLAN ID in the given range.
    Create Ethernet Network Bulk 
    ...    ${Name}    ${Num1}    ${Num2}     ${Preffered_Speed}     ${Maximum_Speed}

Select Bay
    [Arguments]    ${DeviceBayType}    ${Bay}=${None}
    [Documentation]    Select random bay if Bay variable is 'None'.
    ${Bay}=    Run Keyword If    "${Bay}"=="${None}"
    ...    Select Random Present Enclosure ${DeviceBayType}
    ...    ELSE    Set Variable    ${Bay}
    [Return]    ${Bay}

Select Server Hardware Bay
    [Arguments]    ${Bay}
    [Documentation]     Determine which Server Hardware Bay to use when creating Server Profile based on ${Bay} variable.

    # Use specified bay if not None
    Return From Keyword If    '${Bay}'!='${None}'    ${Bay}

    # Randomly select bay from available bays
    ${Available Blades}    ${Empty Bays}=    Find Filled Bays    /rest/v1/BladeBays
    ${Bay}=    Select Random Element from List    ${Available Blades}

    [Return]    ${Bay}

Create FCoE Network
    [Documentation]    Creates a Network using the supplied Name and vlanId.
    [Arguments]    ${Name}    ${vlanId}


    ${Payload}=    Create Dictionary    vlanId=${vlanId}
    ...                                 name=${Name}
    ...                                 type=fcoe-network
    #pjs line below gives error
    #...                                 connectionTemplateUri=/rest/connection-templates/defaultConnectionTemplate

    ${Response}=    Fusion API Create FCoe Network    ${Payload}
    Should Be Equal as Strings    ${Response['status_code']}          202	msg=Failed to initiate Create Network.

    # Wait for task to complete
    ${Response}    Fusion API Wait For Task To Complete    ${Response['uri']}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Should be True    ${Errors} == 0    msg=Errors encountered while creating FCoe Network.

    [Return]    ${Response}

# NOT YET WORKING
Create Server Profile With Managed Firmware
    [Arguments]    ${Name}    ${ServerHardwareName}    ${Connections}=${None}

    # Get Server Hardware Information
    ${ServerHardware}=    Fusion API Get Server Hardware    param=?filter="name='${ServerHardwareName}'"
    ${ServerHardwareData}=    Get From List    ${ServerHardware['members']}    0
    ${FirmwareDrivers}=	  Fusion API Get Firmware Drivers

    ${ForceInstall}=	false
    ${fwuri}=		SPPGen9Snap4_2015_0520_27
    ${Firmware}=	Create Dictionary	manageFirmware=true
    ...						firmwareBaselineUri=/rest/firmware-drivers/${fwuri}
    ...						firmwareInstallType=FirmwareOnlyOfflineMode
    ...						forceInstallFirmware=${ForceInstall}

    # Check PowerState
    Should Not Be Equal As Strings    ${ServerHardwareData['powerState']}    On    msg=Server Hardware ${ServerHardwareName} is powered on. Must be powered off for Server Profile creation.

    ${Server Profile Payload}=    Create Dictionary
    ...                           type=ServerProfileV5
    ...                           name=${Name}
    ...                           serverHardwareTypeUri=${ServerHardwareData['serverHardwareTypeUri']}
    ...                           enclosureGroupUri=${ServerHardwareData['serverGroupUri']}
    ...                           enclosureBay=${ServerHardwareData['position']}
    ...                           enclosureUri=${ServerHardwareData['locationUri']}
    ...				  firmware=${Firmware}

    # Include Connections if specified
    Run Keyword If    "${Connections}"!="${None}"
    ...    Set To Dictionary    ${Server Profile Payload}    connections    ${Connections}

    ${Response}=    Fusion API Create Server Profile    ${Server Profile Payload}
    Should Be Equal as Strings    ${Response['status_code']}          202             msg=Failed to initiate Create SP.

    # Wait for task to complete
    ${Retry Interval}    Convert To Number     60
    ${Retries}           Convert To Integer    15
    ${Response}=    Fusion API Wait For Task To Complete    ${Response['uri']}    sleep_time=${Retry Interval}    retries=${Retries}

    # Check for errors
    ${Errors}=    Get From Dictionary    ${Response}    taskErrors
    ${Errors}=    Get Length    ${Errors}
    Run Keyword If    ${Errors} != 0
    ...    Log    Errors encountered while creating Server Profile.    level=WARN

    [Return]    ${Response}

