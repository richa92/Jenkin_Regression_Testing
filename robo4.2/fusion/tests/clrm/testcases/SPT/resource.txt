*** Settings ***
Library          FusionLibrary
Library          RoboGalaxyLibrary
Library          OperatingSystem
Library          BuiltIn
Library          Collections
Library          XML
Library          String
Library          json
Library          Process
Library          copy
Resource         ../../../../Resources/api/fusion_api_resource.txt
Library          spt_common.py
Library          new_feature_support.py

*** Variables ***
${appliance_ip}        15.212.174.71
@{consistency_check_scope}=    Checked    Unchecked    CheckedMinimumChecked    CheckedMinimumUnchecked
# Below line is to be uncommented when OVF1053 is to be run so that correct scopes are formed during Pre-req run
# @{EG_optional_scope}=    NoOVF3651
#
*** Keywords ***
SPT SP by different users
    [Documentation]    CRUD operation on SPT and this include create SP from SPT
    [Arguments]    ${user}=Administrator    &{args}
    ${argument}    copy.deepcopy    ${args}
    ${cc_status}    run keyword and return status    dictionary should contain key    ${argument}    OVF1053
    run keyword if    ${cc_status}==True    Set Test Variable    ${OVF1053}    ${argument['OVF1053']}
    ${consistencyCheck_status}=    run keyword and return status    variable should exist    ${OVF1053}
    run keyword if    ${consistencyCheck_status}==True    Log    ${OVF1053}    console=True
    ${EGoptional_status}=    run keyword and return status    variable should exist    ${OVF3651}
    ${OVF3651}    Set variable if    ${EGoptional_status}==False     NoOVF3651    ${OVF3651}
    run keyword if    ${isDataVariableFile}==False    set to dictionary    ${argument}    SERVER_PROFILE_TEMPLATE_TYPE=${ServerProfileTemplate_type}
    ...    SERVER_PROFILE_TYPE=${ServerProfile_type}    CONSISTENCY_CHECK_HW=${Consistency_Check_Hardware}
    ${opns}    ${opn_data}    run keyword if    '${consistencyCheck_status}'=='True' and ${isDataVariableFile}==False   dynamic arguments    ${argument}    OVF1053=${OVF1053}    OVF3651=${OVF3651}
    ...    ELSE IF    '${consistencyCheck_status}'=='True' and ${isDataVariableFile}==True    dynamic arguments    ${argument}    NoChange=${isDataVariableFile}
    ...    ELSE IF    '${consistencyCheck_status}'=='False' and ${isDataVariableFile}==True    dynamic arguments    ${argument}    NoChange=${isDataVariableFile}
    Fusion Api Login Appliance    ${appliance_ip}    ${user_credentials['${user}']}
    Log    **** Log as ${user} ***    console=True
    set log level    TRACE
    ${opn_data1}=    copy.deepcopy    ${opn_data}
    :FOR    ${opn}    in    @{opns}
    \    ${opn_payload}    Add scope for create SPT from SP    ${user}    ${opn_data1['${opn}']["opn"]}    ${opn_data1['${opn}']["payload"]}
    \    ${errorMessage_exists}=    run keyword and return status    Dictionary Should Contain Key    ${opn_data1['${opn}']}    errorMessage
    \    ${errorMessage}=    set variable if   '${errorMessage_exists}' == 'True'    ${opn_data1['${opn}']["errorMessage"]}
    \    ...   ${Empty}
    \    Run keyword if  '${opn_data1['${opn}']["opn"]}'=='Update SP from SPT' or '${opn_data1['${opn}']["opn"]}' == 'Update SP with compliance check'    SPT SP operations     ${opn_data1['${opn}']["opn"]}    ${opn_payload}    compliancePreview=${opn_data1['${opn}']["compliancePreview"]}
    \    ...    ELSE IF  '${opn_data1['${opn}']["opn"]}'!='Update SP from SPT' and '${opn_data1['${opn}']["opn"]}'!='Update SP with compliance check'    SPT SP operations     ${opn_data1['${opn}']["opn"]}    ${opn_payload}     ${opn_data1['${opn}']["isPositive"]}    errorMessage=${errorMessage}
    \    ${ovf3651_status}=    run keyword and return status    variable should exist    ${OVF3651}
    \    ${validation_status}    run keyword if    ${ovf3651_status}==True    validation for EG optional    ${opn_data1['${opn}']["payload"]}
    \    run keyword if    ${ovf3651_status}==True    run keyword
    \    ...    run keyword if    ${validation_status}==False    FAIL    Validation Failed: available networks/servers not in EG
    ${iscompl_status}    run keyword and return status    dictionary should contain key    ${argument}    isComplete
    ${payloads}=    Create List
    run keyword if    '${iscompl_status}'=='False'    Reverse List    ${opns}
    ...    ELSE    run keyword if    '${argument['isComplete']}' == 'True'    Reverse List    ${opns}
    :FOR    ${opn}    in    @{opns}
    \    run keyword if    '${iscompl_status}'=='True'    run keyword if    '${argument['isComplete']}' == 'False'    Exit For Loop
    \    remove sp spt    ${opn_data1['${opn}']["payload"]}
    Fusion Api Logout Appliance

Add scope for create SPT from SP
    [Documentation]    Add scope for create SPT from SP
    [Arguments]    ${user}    ${opn}    ${opn_payload}
    ${uScope}    set variable    ${user_scope['${user}']}
    run keyword if    '${opn}'!='Create SPT from SP'    return from keyword    ${opn_payload}
    :FOR    ${payload}    in    @{opn_payload}
    \    set to dictionary    ${payload}    scope    ${uScope}
    \    Log    After adding scope:${payload}    console=True
    [return]    ${opn_payload}

SPT SP operations
    [Documentation]    operation on SPT and SP
    [Arguments]    ${operation}    ${payload}    ${isPositive}=${EMPTY}    ${compliancePreview}=${EMPTY}    ${errorMessage}=${Empty}
    run keyword if    '${operation}' == 'Create SPT'    Create SPT     ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Create SP'    Create SP    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Create SP from SPT'    Create SP from SPT    ${payload}    ${errorMessage}
    ...    ELSE IF    '${operation}' == 'Create SPT from SP'    Create SPT from SP    ${payload}
    ...    ELSE IF    '${operation}' == 'Create SP override firmware'    Create SP override firmware    ${payload}
    ...    ELSE IF    '${operation}' == 'Create SP with firmware'    Create SP with firmware    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Create SPT with firmware'    Create SPT with firmware    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Get SPT'    Get SPT       ${payload}
    ...    ELSE IF    '${operation}' == 'Get SPT by Uri'    Get SPT by Uri       ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Update SPT'    Edit SPT       ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Update SPT with volume'    update SPT with volume    ${payload}
    ...    ELSE IF    '${operation}' == 'Update SPT with firmware'    update SPT with firmware    ${payload}
    ...    ELSE IF    '${operation}' == 'Update SP with firmware'    update SP with firmware    ${payload}
    ...    ELSE IF    '${operation}' == 'Update SP from SPT'    update SP from SPT    ${payload}    ${compliancePreview}
    ...    ELSE IF    '${operation}' == 'Update SP with compliance check'    Update SP with compliance check    ${payload}    ${compliancePreview}
    ...    ELSE IF    '${operation}' == 'Update SP'    Update SP    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Rename SPT'    Rename SPT    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Rename SPT volume'    rename SPT vol    ${payload}
    ...    ELSE IF    '${operation}' == 'Delete SPT by uri'    Delete SPT by uri    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Delete SPT'    Delete SPT    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Delete volume by uri'    Delete volume by uri    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Profile compliance check'     profile compliance check    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Remove network and update in lig'    remove network and update in lig    ${payload}
    ...    ELSE IF    '${operation}' == 'Rename LIG'    Rename LIG    ${payload}
    ...    ELSE IF    '${operation}' == 'Update NetSet'    Update NetSet    ${payload}
    ...    ELSE IF    '${operation}' == 'Edit Users'    Edit Users    ${payload}
    ...    ELSE IF    '${operation}' == 'Update Scopes'    Update Scopes    ${payload}    ${isPositive}
    ...    ELSE IF    '${operation}' == 'Power On Server'  Power on Server    ${payload}
    ...    ELSE IF    '${operation}' == 'Power Off Server'  Power off Server    ${payload}
    ...    ELSE    FAIL    ${operation}" Operation is not specified "    console=True

Remove SP and spt
    [Documentation]    remove  sp and spt used in particular test cases
    [Arguments]    ${payload1}    ${payload2}=${EMPTY}    ${payload3}=${EMPTY}    ${payload4}=${EMPTY}
    ${opn1_payload}=     generate test data    ${payload1}    ${OVF1053}
    ${opn2_payload}=     generate test data    ${payload2}    ${OVF1053}
    ${opn3_payload}=     generate test data    ${payload3}    ${OVF1053}
    ${opn4_payload}=     generate test data    ${payload4}    ${OVF1053}
    remove sp spt    ${opn1_payload}    ${opn2_payload}    ${opn3_payload}    ${opn4_payload}

Create SPT
    [Documentation]    Create SPT with wait task
    [Arguments]    ${Create_payload}    ${isPositive}
    ${resp}=    run keyword if    '${isPositive}'=='True'    Add Non Existing Server Profile Templates    ${Create_payload}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Add Server Profile Template    ${Create_payload[0]}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SPT with invalid data
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SPT with invalid data
    run keyword if    '${isPositive}'=='True' and '${task_resp}'=='False'    FAIL    Failed to create SPT

create SPT with firmware
    [Documentation]    Create SPT with firmware bundle
    [Arguments]    ${Create_payload}    ${isPositive}
    :FOR    ${spt}    in    @{Create_payload}
    \    ${firmware_payload}    firmware bundle payload    ${spt['firmware']}
    \    set to dictionary    ${spt}    firmware=${firmware_payload}
    ${resp}=    run keyword if    '${isPositive}'=='True'    Add Non Existing Server Profile Templates    ${Create_payload}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Add Server Profile Template    ${Create_payload[0]}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SPT with invalid data
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SPT with invalid data
    run keyword if    '${isPositive}'=='True' and '${task_resp}'=='False'    FAIL    Failed to create SPT

Get SPT
    [Documentation]    Get SPT by name
    [Arguments]    ${payload}
    Log    Getting SERVER PROFILE TEMPLATES Details of ${payload[0]['name']}    console=True
    ${resp} =    Fusion Api Get Server Profile Templates  param=?filter="'name'=='${payload[0]['name']}'"
    Log  ${resp}    console=True
    run keyword if    ${resp['status_code']}!=200    Fail    Failed to get SPT by name

Get SPT by Uri
    [Documentation]    Get SPT by uri
    [Arguments]    ${payload}    ${isPositive}
    ${uri}=    Get Server Profile Template URI    ${payload[0]['name']}
    ${invalid_uri}    catenate    ${uri}123
    ${uri}    set variable if    '${isPositive}'=='False'    ${invalid_uri}    ${uri}
    ${resp}    Get Server Profile Template Transformation    ${uri}
    run keyword if    ${resp['status_code']}!=200 and '${isPositive}'=='True'    Fail    Failed to get SPT by URI
    run keyword if    ${resp['status_code']}!=404 and '${isPositive}'=='False'    Fail    Negative:Get SPT by uri successfully

Edit SPT
    [Documentation]    Update SPT with wait task
    [Arguments]    ${Update_payload}    ${isPositive}
    ${resp}=    run keyword if    '${isPositive}'=='True'    Edit Server Profile Templates from variable    ${Update_payload}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Edit Server Profile Templates from variable    ${Update_payload}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SPT with invalid data

update SP
    [Documentation]    update SP with wait task
    [Arguments]    ${update_payload}    ${isPositive}
    ${resp}=    run keyword if    '${isPositive}'=='True'    Edit Server Profiles from variable    ${update_payload}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}    timeout=4200    interval=10
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Edit Server Profiles from variable    ${update_payload}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SP with invalid data

update SP from SPT
    [Documentation]    Remediate SP to make consistent with SPT
    [Arguments]    ${update_payload}    ${profile_compliance}
    ${sp_compliance}=    copy.deepcopy    ${profile_compliance}
    Log to console    Checking compliance
    :FOR    ${sp}    IN    @{update_payload}
    \    inconsistent profile compliance check    ${sp_compliance}    ${sp['name']}
    ${resp}    Update Server Profiles from Template    ${update_payload}
    ${task_resp}    Wait for task2    ${resp}    timeout=4200    interval=5
    :FOR    ${sp}    IN    @{update_payload}
    \    consistent profile compliance check    ${sp_compliance}    ${sp['name']}

Update SP with compliance check
    [Documentation]    update SP manually to make consistent with SPT
    [Arguments]    ${update_payload}    ${profile_compliance}
    ${payloads}=     Create List
    ${sp_compliance}=    copy.deepcopy    ${profile_compliance}
    :FOR    ${sp}    IN    @{update_payload}
    \    inconsistent profile compliance check    ${sp_compliance}    ${sp['name']}
    :FOR    ${u_payload}    in    @{update_payload}
    \    ${firmware_payload}    firmware bundle payload    ${u_payload['firmware']}
    \    set to dictionary    ${u_payload}    firmware=${firmware_payload}
    \    ${payload} =  Create Server Profile Put Payload    ${u_payload}
    \    append to list    ${payloads}    ${payload}
    ${updated_payload}    update SP volume    ${payloads}
    :FOR    ${spt}     in     @{updated_payload}
    \    ${resp} =    Fusion Api Edit Server Profile    body=${spt}    uri=${spt['uri']}
    \    Wait for task2    ${resp}    timeout=4200
    :FOR    ${sp}    IN    @{update_payload}
    \    consistent profile compliance check    ${sp_compliance}    ${sp['name']}

profile compliance check
    [Documentation]    compliance check on profile
    [Arguments]    ${sp_compliance}    ${isPositive}=True
    ${isConsistencyCStatus}    run keyword and return status    Variable Should Exist    ${OVF1053}
    ${isEGoptionalStatus}    run keyword and return status    Variable Should Exist    ${OVF3651}
    ${isEGoptional}     set variable if     ${isEGoptionalStatus} == True and '${OVF3651}'=='NoOVF3651'    False    True
    ${sp_compliance1}    run keyword if     ${isConsistencyCStatus}==True or ${isEGoptional}==True    modify profile compliance payload    ${sp_compliance}    OVF1053=${OVF1053}    OVF3651=${OVF3651}
    ${sp_compliance}     Set variable if    ${isConsistencyCStatus}==True    ${sp_compliance1}    ${sp_compliance}
    ${status}    run keyword and return status    Verify Server Profile Compliance    ${sp_compliance}    VERBOSE=True
    ${compliance_status}    run keyword if     ${isConsistencyCStatus}==True     run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck'    validate profile compliance    ${sp_compliance}    ${status}
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='False'    Log    Validation Failed:Profile is not consistent with template    console=True
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='True'  Log    Validation Passed:Profile is consistent with template    console=True
    run keyword if    '${status}'=='False' and '${isPositive}'=='True'    FAIL    Compliance preview mismatching with expected result
    run keyword if    '${status}'=='True' and '${isPositive}'=='True'   Log    Compliance preview matched with expected result    console=True
    run keyword if    '${status}'=='False' and '${isPositive}'=='False'    Log    Negative test : Compliance preview mismatching with expected result    console=True
    run keyword if    '${status}'=='True' and '${isPositive}'=='False'    FAIL    Negative test : Compliance preview matched with expected result
    
inconsistent profile compliance check
    [Documentation]    verify the compliance when profile is inconsistent
    [Arguments]    ${sp_compliance}    ${sp_name}
    set to dictionary    ${sp_compliance}    name=${sp_name}
    ${isConsistencyCStatus}    run keyword and return status    Variable Should Exist    ${OVF1053}
    ${isEGoptionalStatus}    run keyword and return status    Variable Should Exist    ${OVF3651}
    ${isEGoptional}     set variable if     ${isEGoptionalStatus} == True and '${OVF3651}'=='NoOVF3651'    False    True
    ${sp_compliance1}    run keyword if     ${isConsistencyCStatus}==True or ${isEGoptional}==True    modify profile compliance payload    ${sp_compliance}    OVF1053=${OVF1053}    OVF3651=${OVF3651}
    ${sp_compliance}    Set variable if    ${isConsistencyCStatus}==True    ${sp_compliance1}    ${sp_compliance}
    ${status}    run keyword and return status    Verify Server Profile Compliance    ${sp_compliance}    VERBOSE=True
    ${compliance_status}    run keyword if     ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck'   validate profile compliance    ${sp_compliance}    ${status}
    run keyword if    ${status}==False    Log    Compliance preview mismatching with expected result    console=True
    run keyword if    ${status}==True    Log    Compliance preview matched with expected result    console=True
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='False'    Log    Validation Failed:Profile is not consistent with template    console=True
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='True'  Log    Validation Passed:Profile is consistent with template    console=True

consistent profile compliance check
    [Documentation]    verify the compliance when profile is consistent
    [Arguments]    ${sp_compliance}    ${sp_name}
    set to dictionary    ${sp_compliance}    name=${sp_name}
    ${length}    run keyword if   ${sp_compliance["compliance-preview"]['manualUpdates']}==${NONE}    convert to Integer   0
    ...    ELSE    get length    ${sp_compliance["compliance-preview"]['manualUpdates']}
    ${Empty_list}    Create List
    Set to dictionary    ${sp_compliance['compliance-preview']}    automaticUpdates=${Empty_list}
    ${isConsistencyCStatus}    run keyword and return status    Variable Should Exist    ${OVF1053}
    ${isEGoptionalStatus}    run keyword and return status    Variable Should Exist    ${OVF3651}
    ${isEGoptional}     set variable if     ${isEGoptionalStatus} == True and '${OVF3651}'=='NoOVF3651'    False    True
    ${sp_compliance1}    run keyword if     ${isConsistencyCStatus}==True or ${isEGoptional}==True    modify profile compliance payload    ${sp_compliance}    OVF1053=${OVF1053}    OVF3651=${OVF3651}
    ${sp_compliance}    Set variable if    ${isConsistencyCStatus}==True    ${sp_compliance1}    ${sp_compliance}
    ${status}    run keyword and return status    Verify Server Profile Compliance    ${sp_compliance}    VERBOSE=True
    ${compliance_status}    run keyword if     ${isConsistencyCStatus}==True     run keyword
    ...    run keyword if     '${OVF1053}'!='NoCheck'   validate profile compliance    ${sp_compliance}    ${status}
    run keyword if    ${status}==False    Log    Compliance preview mismatchinging with expected result    console=True
    run keyword if    ${status}==True    Log    Compliance preview matched with expected result    console=True
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='False'    Log    Validation Failed:Profile is not consistent with template    console=True
    run keyword if    ${isConsistencyCStatus}==True    run keyword
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${compliance_status}'=='True'  Log    Validation Passed:Profile is consistent with template    console=True

Create SP with firmware
    [Documentation]    Create SP with firmware
    [Arguments]    ${payload}    ${isPositive}
    :FOR    ${sp}    in    @{payload}
    \    ${firmware_payload}    firmware bundle payload    ${sp['firmware']}
    \    set to dictionary    ${sp}    firmware=${firmware_payload}
    ${resp}    Add Non Existing Server Profiles    ${payload}
    ${task_resp}    Wait for task2    ${resp}    timeout=4200

Create SP override firmware
    [Documentation]    Override payload  from SPT with firmware
    [Arguments]    ${payload}
    ${resplist}    Create List
    :FOR     ${sp}    in    @{payload}
    \    ${payload1}=    Create Server Profile POST Payload from SPT    ${sp}
    \    ${firmware_payload}    firmware bundle payload    ${sp['firmware']}
    \    set to dictionary    ${payload1}    firmware=${firmware_payload}
    \    ${resp} =   Fusion Api Create Server Profile   body=${payload1}
    \    Run Keyword And Continue on Failure   should be equal as integers  ${resp['status_code']}    202
    \    append to list        ${resplist}    ${resp}
    ${task_resp}    Wait for task2    ${resplist}    timeout=4200

Create SP
    [Documentation]    Create SP
    [Arguments]    ${payload}   ${isPositive}
    ${resp}=    run keyword if    '${isPositive}'=='True'    Add Non Existing Server Profiles    ${payload}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}    timeout=4200
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Add Non Existing Server Profiles    ${payload}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Created SP with invalid data

Create SPT from SP
    [Documentation]    Create SPT from SP
    [Arguments]    ${payload}
    ${resp} =    Create Server Profile Template from Profile    ${payload[0]['SP'][0]}    ${payload[0]['name']}    ${payload[0]['scope']}
    ${task_resp}    Wait For Task2    ${resp}
    ${consistencyCStatus}    run keyword and return status    Variable Should Exist    ${OVF1053}
    ${status}    run keyword if     ${consistencyCStatus}==True
    ...    run keyword if    '${OVF1053}'!='NoCheck'    validate spt created from sp    ${payload}
    run keyword if    ${consistencyCStatus}==True
    ...    run keyword if    '${OVF1053}'!='NoCheck' and '${status}'=='False'    FAIL    Validation Failed:Create SPT from SP

Rename SPT
    [Documentation]    Update SPT name
    [Arguments]    ${update_payload}   ${isPositive}
    ${profile_template_uri}=    Get Server Profile Template URI     ${update_payload[0]['name']}
    ${payload} =    Fusion Api Get Server Profile Templates    uri=${profile_template_uri}
    Set to dictionary    ${payload}    name=${update_payload[0]['new_name']}
    remove from Dictionary    ${payload}    headers
    remove from Dictionary    ${payload}    status_code
    ${resp} =    run keyword if    '${isPositive}'=='True'    Fusion Api Edit Server Profile Template    body=${payload}    uri=${profile_template_uri}
    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}
    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Fusion Api Edit Server Profile Template    body=${payload}    uri=${profile_template_uri}
    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}
    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Update SPT name failed

rename SPT vol
    [Documentation]    rename SPT volume
    [Arguments]    ${update_payload}
    ${profile_template_uri}=    Get Server Profile Template URI     ${update_payload[0]['name']}
    ${payload} =    Fusion Api Get Server Profile Templates    uri=${profile_template_uri}
    :FOR    ${vol}    in    @{update_payload[0]['sanStorage']['volumeAttachments']}
    \    ${newvol_status}    run keyword and return status	Dictionary should contain key	${vol['volume']['properties']}    new_name
    \    ${payload}    run keyword if    ${newvol_status}==True    update volume name in SPT    ${payload}    ${vol['volume']['properties']['name']}    ${vol['volume']['properties']['new_name']}
    remove from Dictionary    ${payload}    headers
    remove from Dictionary    ${payload}    status_code
    ${resp} =    Fusion Api Edit Server Profile Template    body=${payload}    uri=${profile_template_uri}
    Wait for task2    ${resp}

update volume name in SPT
    [Documentation]    update volume
    [Arguments]    ${payload}    ${originalName}    ${newName}
    :FOR    ${vol}    in    @{payload['sanStorage']['volumeAttachments']}
    \    run keyword if    '${vol['volume']['properties']['name']}'=='${originalName}'    Set to Dictionary    ${vol['volume']['properties']}    name=${newName}
    [Return]    ${payload}

update SPT with volume
    [Documentation]    update SPT with volume
    [Arguments]    ${update_payload}
    ${payloads}=     Create List
    :FOR    ${u_payload}    in    @{update_payload}
    \    ${payload}    Create Server Profile Template Payload    ${u_payload}
    \    append to list    ${payloads}    ${payload}
    ${updated_payload}    update SPT volume    ${payloads}
    :FOR    ${spt}     in     @{updated_payload}
    \    ${resp} =    Fusion Api Edit Server Profile Template    body=${spt}    uri=${spt['uri']}
    \    Wait for task2    ${resp}

update SPT with firmware
    [Documentation]    update SPT with volume
    [Arguments]    ${update_payload}
    ${payloads}=     Create List
    :FOR    ${u_payload}    in    @{update_payload}
    \    ${firmware_payload}    firmware bundle payload    ${u_payload['firmware']}
    \    set to dictionary    ${u_payload}    firmware=${firmware_payload}
    \    ${payload}    Create Server Profile Template Payload    ${u_payload}
    \    append to list    ${payloads}    ${payload}
    ${updated_payload}    update SPT volume    ${payloads}
    :FOR    ${spt}     in     @{updated_payload}
    \    ${resp} =    Fusion Api Edit Server Profile Template    body=${spt}    uri=${spt['uri']}
    \    Wait for task2    ${resp}

update SP with firmware
    [Documentation]    update SP with firmware and volume
    [Arguments]    ${update_payload}
    ${payloads}=     Create list
    :FOR    ${u_payload}    in    @{update_payload}
    \    ${firmware_payload}    firmware bundle payload    ${u_payload['firmware']}
    \    set to dictionary    ${u_payload}    firmware=${firmware_payload}
    \    ${payload} =  Create Server Profile Put Payload    ${u_payload}
    \    append to list    ${payloads}    ${payload}
    ${updated_payload}    update SP volume    ${payloads}
    :FOR    ${spt}     in     @{updated_payload}
    \    ${resp} =    Fusion Api Edit Server Profile    body=${spt}    uri=${spt['uri']}
    \    Wait for task2    ${resp}    timeout=4200

Delete SPT by uri
    [Documentation]    Delete SPT  by uri
    [Arguments]    ${delete_payload}        ${isPositive}
    ${profile_template_uri}=    Get Server Profile Template URI     ${delete_payload[0]['name']}
    ${invalid_uri}=    catenate    ${profile_template_uri}123
    ${profile_template_uri}=    Set variable if    '${isPositive}'=='False'    ${invalid_uri}    ${profile_template_uri}
    ${resp} =    Fusion Api Delete Server Profile Template    uri=${profile_template_uri}
    ${status}    run keyword and return status    Wait for task2    ${resp}
    run keyword if    '${isPositive}'=='True' and '${status}'=='False'    Fail    Failed to Delete SPT :${delete_payload[0]['name']} by uri
    run keyword if    '${isPositive}'=='False' and '${status}'=='True'    Fail    Negative test Failed : Created SPT  :${delete_payload[0]['name']} with invalid uri

Delete SPT
    [Documentation]    Delete SPT  by uri
    [Arguments]    ${delete_payload}    ${isPositive}
    ${resp}    Remove Server Profile Templates from variable    ${delete_payload}
    ${status}    run keyword and return status    Wait for task2    ${resp}
    run keyword if    '${isPositive}'=='True' and '${status}'=='False'    Fail    Failed to Delete SPT :${delete_payload[0]['name']} by uri
    run keyword if    '${isPositive}'=='False' and '${status}'=='True'    Fail    Negative test Failed : Created SPT  :${delete_payload[0]['name']} with invalid uri

Create SP from SPT
    [Documentation]    Create SP from SPT with wait task
    [Arguments]    ${SP_payload}    ${errormessage}=None
    ${resp_sp}=    Create Non Existing Server Profile from SPT    ${SP_payload}
    ${expectedResult}=    set variable if   '${errormessage}' == 'None'    Completed    Error
    ${status}    run keyword and return status    Wait for task2    ${resp_sp}    timeout=4200    interval=10    PASS=${expectedResult}    errorMessage=${errormessage}
    run keyword if    '${errormessage}' != 'None' and '${status}'=='False'    Log    Create SP from SPT failed as expected

Edit Users
    [Documentation]    Edit User for scopes
    [Arguments]    ${update_users}
    ${resp}    ${task}=    Update Users    ${update_users}
    Run Keyword If  '${resp['status_code']}' != '202' and '${task['status_code']}' != '200'   Fail    ${resp}
    ...    ELSE  log    \nUpdated User info successfully!    console=True

Update Scopes
    [Documentation]    Update scopes
    [Arguments]    ${scopes}    ${isPositive}
    :FOR    ${scope}    in    @{scopes}
    \    ${uri_add_list}    create urilist from resourcelist    ${scope['addedResourceUris']}
    \    ${uri_remove_list}    create urilist from resourcelist    ${scope['removedResourceUris']}
    \    ${resp}=    run keyword if    '${isPositive}'=='True'    Edit Scope     ${scope['name']}    ${uri_add_list}    ${uri_remove_list}
    \    ${task_resp}    run keyword if    '${isPositive}'=='True'    run keyword and return status    Wait for task2    ${resp}    timeout=10    interval=1
    \    ${resp1}=    run keyword if    '${isPositive}'=='False'    run keyword and ignore error    Edit Scope     $scope[name]    ${uri_add_list}    ${uri_remove_list}
    \    ${task_resp1}    run keyword if    '${isPositive}'=='False'    run keyword and return status    Wait for task2    ${resp1}    timeout=10    interval=1
    \    ${task_resp}=    set variable if    '${isPositive}'=='False'    ${task_resp1}    ${task_resp}
    \    run keyword if    '${isPositive}'=='False' and '${task_resp}'=='True'    FAIL    Negative test case: Editing Scope should have failed
    \    run keyword if    '${isPositive}'=='True' and '${task_resp}'=='False'    FAIL    Failed to edit SPT

Cleanup SP and SPT
    [Documentation]    Remove  all SP and SPTs
    [Arguments]    ${user}=${EMPTY}
    run keyword if    '${user}'!='${EMPTY}'    Fusion Api Login Appliance    ${appliance_ip}    ${user_credentials['${user}']}
    ${force}    Convert to Boolean    True
    ${tasks}=  Create List
    ${param} =  set variable if  ${force}==${False}  ${Empty}  ?force=${True}
    ${profiles} =     Fusion Api Get Server Profiles  param=?sort=name:ascending
    :FOR    ${profile}    IN    @{profiles['members']}
    \       Log      Removing SERVER ${profile['uri']}
    \        ${resp} =     Fusion Api Delete Server Profile    uri=${profile['uri']}   param=${param}
    \       Append To List    ${tasks}  ${resp}
    :FOR    ${task}    IN    @{tasks}
    \    Run Keyword And Continue on Failure  Wait For Task2  ${task}  timeout=600  interval=5
    ${del_spt}=    Remove All Server Profile Templates
    ${timeout}=    Convert To Integer    120
    ${interval}=    Convert To Integer    10
    run keyword and Ignore Error    Wait for task2    ${del_spt}    timeout=120    interval=10
    run keyword if    '${user}'!='${EMPTY}'    Fusion Api Logout Appliance

Setup Users and scopes
    [Documentation]    Setup Environment for Hypervisor Manager SBAC tests
    Set Log Level   TRACE
    ${Response}=    Fusion Api Get Appliance Version
    Set Suite Metadata     OneView Version    ${Response['softwareVersion']} : ${Response['date']}    top=True
    Add Users from variable    ${users}
    :FOR    ${scope}    in    @{scopes}
    \    ${uri_list}    create urilist from resourcelist    ${scope['addedResourceUris']}
    \    Set to Dictionary    ${scope}    addedResourceUris=${uri_list}
    \    ${resp} =   Fusion Api Create Scope     ${scope}
    \    Run Keyword If  '${resp['status_code']}' != '202' and '${resp['status_code']}' != '409'   Fail    ${resp}    ELSE  log    \n${scope['name']} : Scope Created successfully!    console=True
    \    Wait for task2    ${resp}    timeout=10    interval=1
    ${result}    ${task}=    Update Users    ${update_users}
    Run Keyword If  '${resp['status_code']}' != '202' and '${task['status_code']}' != '200'   Fail	${resp}
    ...    ELSE  log    \n${scope['name']} : updated User info successfully!    console=True

Setup Users and scopes for OVF1053 and OVF3651
    [Documentation]    Setup Environment for Hypervisor Manager SBAC tests
    ${Response}=    Fusion Api Get Appliance Version
    Set Suite Metadata     OneView Version    ${Response['softwareVersion']} : ${Response['date']}    top=True
    Add Users from variable    ${users}
    ${scopes}    generate scope data    ${scopes}    ${consistency_check_scope}    ${EG_optional_scope}    ${Consistency_Check_Hardware}
    :FOR    ${scope}    in    @{scopes}
    \    ${uri_list}    create urilist from resourcelist    ${scope['addedResourceUris']}
    \    Set to Dictionary    ${scope}    addedResourceUris=${uri_list}
    \    ${resp} =   Fusion Api Create Scope     ${scope}
    \    Run Keyword If  '${resp['status_code']}' != '202' and '${resp['status_code']}' != '409'   Fail    ${resp}    ELSE  log    \n${scope['name']} : Scope Created successfully!    console=True
    \    Wait for task2    ${resp}    timeout=100    interval=1
    ${result}    ${task}=    Update Users    ${update_users}
    Run Keyword If  '${resp['status_code']}' != '202' and '${task['status_code']}' != '200'   Fail	${resp}
    ...    ELSE  log    \n${scope['name']} : updated User info successfully!    console=True

create urilist from resourcelist
    [Documentation]    create uri list from resource list
    [Arguments]    ${resource_list}
    ${uri_lst}    Create List
    :FOR    ${resource}    in    @{resource_list}
    \    ${uri} =    Common URI Lookup By Name    ${resource}
    \    Append to List    ${uri_lst}    ${uri}
    [Return]    ${uri_lst}

clean up users and scopes
    [Documentation]    Teardown Environment for Hypervisor Manager SBAC tests
    Fusion Api Login Appliance    ${appliance_ip}     ${user_credentials['Administrator']}
    run keyword and return status    Remove All Users
    :FOR    ${scope}    in    @{scopes}
    \    ${resp_uri}=    Get Scope URI By Name  ${scope['name']}
    \    ${task}=    Run Keyword If    '${resp_uri}' != '/bad_scope_uri'    Fusion Api Delete Scope    ${resp_uri}
    \    Run Keyword If    ${task} is not ${None}    Wait For Task2  ${task}  timeout=60
    Fusion Api Logout Appliance

firmware bundle payload
    [Arguments]    ${firmware_payload}
    [Documentation]    Generate Firmware body
    ${payload} =    Copy Dictionary    ${firmware_payload}
    ${status}       run keyword and return status    Dictionary should contain key    ${payload}    firmwareBaselineUri
    ${firmware_uri}=    Get Firmware Bundle By Version    ${payload['firmwareBaselineUri']}
    run keyword if    '${status}'=='True' and '${payload['firmwareBaselineUri']}' != ''    Set to Dictionary    ${payload}    firmwareBaselineUri    ${firmware_uri}
    [Return]    ${payload}

remove network and update in lig
    [Arguments]    ${payload}
    [Documentation]    remove network and update LIG
    Edit LIG    ${payload['lig']}
    :FOR    ${li}    in    @{payload['li']}
    \    Update Logical interconnect from Group    ${li}
    ${uri_list}    Get Ethernet URIs    ${payload['networks']}
    :FOR    ${net}    IN    @{uri_list}
    \    ${resp} =    Fusion Api Delete Ethernet Network    uri=${net}
    \    ${task} =    Wait For Task    ${resp}    240s    2s

Rename LIG
    [Documentation]  Rename LIG
    [Arguments]     ${payload}
    ${lig_name} =    Get From Dictionary     ${payload}     name
    ${new_lig_name} =    Get From Dictionary     ${payload}     new_name
    ${lig_resp} =    Get Resource    LIG:${lig_name}
    Remove From Dictionary    ${lig_resp}    created    modified    status    state    status_code    headers
    Set To Dictionary    ${lig_resp}    name=${new_lig_name}
    ${update_resp} =    Fusion Api Edit LIG     ${lig_resp}    ${lig_resp['uri']}
    Wait For Task2    ${update_resp}    timeout=60    interval=5

Update NetSet
    [Arguments]    ${payload}
    [Documentation]    Add or remove network from network set
    Update Network Set    ${payload}

revert network removal from lig and li
    [Arguments]    ${payload}
    [Documentation]    revert removal of network and update LIG, LI
    Fusion Api Login Appliance    ${appliance_ip}    ${user_credentials["Administrator"]}
    ${resp}    Add Ethernet Networks from variable    ${ethernet_networks_revert}
    Log    ${resp}    console=True
    ${resp}    Edit LIG    ${payload['lig']}
    Log    LIG resp:${resp}    console=True
    :FOR    ${li}    in    @{payload['li']}
    \    Update Logical interconnect from Group    ${li}
    Update scopes    ${payload['scopes']}    isPositive=True
    Fusion Api Logout Appliance

Get Server Hardware Status
    [Documentation]    Get the Current Hardware State
    ...                    Get Server Hardware State    SH:${ENC1SHBAY1}
    [Arguments]        ${name}
    ${name} =  replace string using regexp  ${name}  SH:  ${EMPTY}
    ${server} =  Get Resource  SH:${name}
    Log        \nCurrent Hardware Status of Server ${server['name']} is ${server['status']}
    [return]    ${server['status']}

Reset Refresh Selected server hardware
    [Documentation]     Refresh and reset a list of server hardwares before using
    [Arguments]   ${ServerHardwareList}
    ${hardwares}=    Create List
    :FOR   ${SHw}  IN  @{ServerHardwareList}
    \    ${status} =     Get Server Hardware Status    SH:${SHw}
    \    Log to console    ${status}
    \    run keyword if    '${status}'!='OK'    Append to list    ${hardwares}    ${SHw}
    Log to console    ${hardwares}
    :FOR    ${hw}   in  @{hardwares}
    \   run keyword and continue on failure    Power on server     SH:${hw}
    \   run keyword and continue on failure    Reset Server    SH:${hw}
    \   run keyword and continue on failure    Power off Server    SH:${hw}
    \   run keyword and continue on failure    Refresh Server Hardware     SH:${hw}

Check And Clean Hardware Status
    [Documentation]  Test teardown after every test run
    [Arguments]    ${user}=${EMPTY}
    run keyword if    '${user}'!='${EMPTY}'    Fusion Api Login Appliance    ${appliance_ip}    ${user_credentials['${user}']}
    run keyword and continue on failure    Remove All Alerts
    run keyword and continue on failure    Reset Refresh Selected server hardware    ${ServerHardware}
    run keyword if    '${user}'!='${EMPTY}'    Fusion Api Logout Appliance

Delete volume by uri
    [Documentation]    Delete volume  by uri
    [Arguments]    ${storage_volumes}       ${isPositive}
    ${resp}=    Remove Storage Volumes Async   ${storage_volumes}  ?suppressDeviceUpdates=true
    ${status}    run keyword and return status    Wait for task2    ${resp[0]}
    run keyword if    '${isPositive}'=='True' and '${status}'=='False'    Fail    Failed to Delete Volume :${delete_payload[0]['name']} by uri
    run keyword if    '${isPositive}'=='False' and '${status}'=='True'    Fail    Negative test Failed : Created Volume  :${delete_payload[0]['name']} with invalid uri

Migrate SP to another server hardware
    [Documentation]        Migrate SP to another server hardware
    [Arguments]     ${Payload}    ${Payload_update}    ${param}=?force=ignoreServerHealth   ${headers}=${None}    ${api}=${None}    ${newname}=${None}
    :FOR   ${pld}  IN  @{Payload}
    \    Power off Server    ${pld['serverHardwareUri']}
    :FOR   ${pld_upd}  IN  @{Payload_update}
    \    ${get_sh} =    Get Resource    ${pld_upd['serverHardwareUri']}
    \    ${sp_resp} =    Get Resource    SP:${pld_upd['name']}
    \    ${profile_uri} =  Get From Dictionary    ${sp_resp}    uri
    \    Remove From Dictionary    ${sp_resp}    enclosureBay    created    modified    status    state    status_code    headers
    \    Set To Dictionary    ${sp_resp}    serverHardwareUri=${get_sh['uri']}
    \    ${update_resp} =    Fusion Api Edit Server Profile    body=${sp_resp}  uri=${profile_uri}  param=${param}  api=${api}  headers=${headers}
    \    Wait for task2    ${update_resp}    timeout=4200     interval=10
    \    Power on Server    ${pld_upd['serverHardwareUri']}