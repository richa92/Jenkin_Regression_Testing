*** Settings ***

Documentation    Tests and verify clrm operation on Synergy enclosure with feature toggles on/off

Library                         FusionLibrary
Library                         RoboGalaxyLibrary
Library                         OperatingSystem
Library                         BuiltIn
Library                         Collections
Library                         XML
Library                         String
Library                         json


Resource                        ../../../../../Resources/api/fusion_api_resource.txt
Resource                        ../../../support_files/clrm_common.txt
Resource                        ../../../support_files/Deployment_Utils.robot
Library                         ../../../support_files/clrm_support_functions.py
Suite Setup                     Setup Suite environment    ${APPLIANCE_IP}     ${admin_credentials}
Suite Teardown                  Tear down suite environment    ${APPLIANCE_IP}     ${admin_credentials}


*** Variables ***

${APPLIANCE_IP}         ${FUSION_IP}
${feature-toggle-loc}    /ci/bin/set-feature-toggles


*** Test Cases ***
vcenter_creation_testcase
    [Documentation]     Vcenter registration
    [Tags]    OVF0000    P0
    Import Certificate to OV    ${vcenter[0]['name']}        ${APPLIANCE_IP}     ${Fusion_credentials}        Vcenter
    ${validation}=    Convert to boolean    true
    Register vcenter    ${vCenter}    ${validation}
    Get vcenter        ${vCenter}

vcenter_get_testcase
    [Documentation]     Vcenter get
    [Tags]    OVF0000    P1
    Get vcenter        ${vCenter}

vcenter_update_testcase
    [Documentation]     Vcenter update
    [Tags]    OVF0000    P2
    Update vcenter    ${vCenter}    ${validation}
    Get vcenter        ${vCenter}

vcenter_delete_testcase
    [Documentation]     Vcenter delete
    [Tags]    OVF0000    P3
    Disconnect from vcenter        ${vCenter}

scvmm_creation_testcase
    [Documentation]     scvmm registration
    [Tags]    OVF0000    P0
    Import Certificate to OV    ${scvmm[0]['name']}        ${APPLIANCE_IP}     ${Fusion_credentials}        scvmm
    ${validation}=    Convert to boolean    true
    Register scvmm    ${vCenter}    ${validation}=False
    Get vcenter        ${scvmm}

scvmm_get_testcase
    [Documentation]     scvmm get
    [Tags]    OVF0000    P1
    Get vcenter        ${scvmm}

scvmm_update_testcase
    [Documentation]     scvmm update
    [Tags]    OVF0000    P2
    Update vcenter    ${scvmm}    ${validation}=False
    Get vcenter        ${scvmm}

scvmm_delete_testcase
    [Documentation]     scvmm delete
    [Tags]    OVF0000    P3
    Disconnect from vcenter        ${scvmm}

*** Keywords ***

Setup Suite environment
    [Documentation]    Setup Suite environment
    [Arguments]        ${APPLIANCE_IP}     ${admin_credentials}
    Set Log Level    TRACE
    Run keyword if    '${FeatureToggle}'=='ON'    Enable Feature Toggles For OV
    Fusion Api Login Appliance  ${APPLIANCE_IP}     ${admin_credentials}
    Remove All Alerts
    Power Off All Servers
    Sleep    120 seconds

Tear down suite environment
    [Documentation]    Tear down suite environment
    [Arguments]        ${APPLIANCE_IP}     ${admin_credentials}
    Fusion Api Logout Appliance
    Run keyword if    '${FeatureToggle}'=='ON'    Disable Feature Toggles For OV
    ${FeatureToggle}    Set variable    OFF
    Set Global Variable    ${FeatureToggle}

Enable Feature Toggles For OV
    [Documentation]     Enables Debug Logging for CLRM and Enables Feature Toggles
    [Arguments]    ${APPLIANCE_IP}    @{FEATURE_TOGGLES}
    Wait For Appliance To Become Pingable    ${APPLIANCE_IP}    30min    60sec
    Login to Appliance via SSH    ${APPLIANCE_IP}    ${FUSION_SSH_USERNAME}    ${FUSION_SSH_PASSWORD}
    Log    ${FEATURE_TOGGLES}    console=True
    ${command} =    catenate    ${feature-toggle-loc} -n
    :FOR    ${FEATURE}    IN    @{FEATURE_TOGGLES}
    \    ${command} =    catenate    ${command}
    \    ...    -e  ${FEATURE}
    Log    ${command}    console=True
    ${stdout} =  Execute Command    ${command}
    ${stdout} =  Execute Command    reboot
    Sleep    3m
    Wait For Appliance To Become Pingable    ${APPLIANCE_IP}    5min    60sec
    Wait Until Keyword Succeeds    20min  3sec    Wait For APPLIANCE To Be Ready    [${APPLIANCE_IP}]    20min    60sec

Disable Feature Toggles For OV
    [Documentation]     Disables Debug Logging for CLRM and Enables Feature Toggles
    [Arguments]    ${APPLIANCE_IP}    @{FEATURE_TOGGLES}
    Wait For Appliance To Become Pingable    ${APPLIANCE_IP}    30min    60sec
    Login to Appliance via SSH    ${APPLIANCE_IP}    ${FUSION_SSH_USERNAME}    ${FUSION_SSH_PASSWORD}
    Log    ${FEATURE_TOGGLES}    console=True
    ${command} =    catenate    ${feature-toggle-loc} -n
    :FOR    ${FEATURE}    IN    @{FEATURE_TOGGLES}
    \    ${command} =    catenate    ${command}
    \    ...    -d  ${FEATURE}
    Log    ${command}    console=True
    ${stdout} =  Execute Command    ${command}
    ${stdout} =  Execute Command    reboot
    Sleep    3m
    Wait For Appliance To Become Pingable    ${APPLIANCE_IP}    5min    60sec
    Wait Until Keyword Succeeds    20min  3sec    Wait For APPLIANCE To Be Ready    [${APPLIANCE_IP}]    20min    60sec

Login to Appliance via SSH
    [Documentation]    Connect to Appliance CIM Bash via SSH
    ...    Example:\n| Login to Appliance Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]    ${IP}    ${USERNAME}=${APP_SSH_USERNAME}
    ...    ${PASSWORD}=${APP_SSH_PASSWORD}
    ...    ${TIMEOUT}=${APP_TIMEOUT}    ${ALIAS}=APP_SSH
    ${Id} =    Open Connection    ${IP}    alias=${ALIAS}
    ${Output} =    Login    ${USERNAME}    ${PASSWORD}
    [Return]    ${Id}

Wait For Appliance To Become Pingable
    [Documentation]    Waits for an Appliance to become pingable
    [Arguments]    ${APPLIANCE_IP}={IP}    ${timeout}=1 min    ${interval}=5 s
    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Appliance is pingable    ${APPLIANCE_IP}

Appliance is pingable
    [Documentation]    Checks the IPV6 Ping in Windows
    [Arguments]    ${APPLIANCE_IP}
    Run keyword if    os.name == "nt"    Windows ping    ${APPLIANCE_IP}
    ...    ELSE    Unix ping    ${APPLIANCE_IP}

Appliance is unreachable
    [Documentation]    Waits for an Appliance to become unreachable
    [Arguments]    ${APPLIANCE_IP}    ${timeout}=1 min    ${interval}=5 s
    Wait Until Keyword Succeeds    ${timeout}    ${interval}    Windows ping unreachable check    ${APPLIANCE_IP}
    Run keyword if    os.name == "nt"    Windows ping unreachable check    ${APPLIANCE_IP}

Windows ping
    [Documentation]    Windows Ping
    [Arguments]    ${host}
    ${Output}=    Run    ping -n 4 ${host}
    Should Contain    ${Output}    Reply from
    [Return]    ${Output}

Windows ping unreachable check
    [Documentation]    Ping Check in Windows
    [Arguments]    ${host}
    ${Output}=    Run    ping -n 4 ${host}
    Should Contain    ${Output}    unreachable
    [Return]    ${Output}
