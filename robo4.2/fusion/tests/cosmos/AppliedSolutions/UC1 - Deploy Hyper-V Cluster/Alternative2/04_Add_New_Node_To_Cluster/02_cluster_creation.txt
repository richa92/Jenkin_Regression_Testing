*** Settings ***
Documentation		Creating Failover Cluster
Resource			../resource.txt
Resource			../../../altair_keywords.txt
Test Setup			Load Test Data	${DataFile}
Test Teardown		Logout and close all browsers
Library				OperatingSystem
Library				SSHLibrary
Library				Process


*** Test Case ***
Capture deployment IP of server1
	Log into Altair Appliance as Administrator
	${server_data} =	Set Variable	${Testdata.test_server[0]}
	${ilo_ip} =		Set Variable	${server_data.ip}
	${dep_ip1}=	Get Deployment IP		${ilo_ip}
	Log		${dep_ip1}
	set global variable		${dep_ip1}

Creating Failover Cluster
	Run		powershell Enable-PSRemoting -Force
	${clusterip} =	Set Variable	${TestData.clusterNode[0].clusterip}
	${clustername} =	Set Variable	${TestData.clusterNode[0].clustername}
	${username} =	Set Variable	${TestData.clusterNode[0].username}
	${password} =	Set Variable	${TestData.clusterNode[0].password}
	${domainusername} =	Set Variable	${TestData.clusterNode[0].domainusername}
	${domainpassword} =	Set Variable	${TestData.clusterNode[0].domainpassword}
	#To make disk online and remove read only
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip3}' -ScriptBlock { Get-Disk | where {$_.OperationalStatus -eq "Offline"} | Set-Disk -IsOffline $false;Set-Disk 1 -isReadOnly $false;Set-Disk 2 -isReadOnly $false } -credential $Cred
	#To enable CreditSSP
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip3}' -ScriptBlock { Enable-WSManCredSSP -Role Client -DelegateComputer * -Force; Enable-WSManCredSSP -Role server -Force } -credential $Cred
	Run		powershell Enable-WSManCredSSP -Role Client -DelegateComputer * -Force
	Run		powershell Enable-WSManCredSSP -Role server -Force
	#Disable IPV6
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip3}' -ScriptBlock { $eth="get-wmiobject win32_networkadapter -filter 'netconnectionstatus = 2'|select netconnectionid";Disable-NetAdapterBinding -InterfaceAlias $eth.netconnectionid -ComponentID ms_tcpip6 } -credential $Cred
	#To Create Failover Cluster
	Run		powershell $Username = '${domainusername}'; $Password = '${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { Get-Cluster ${clustername} | Add-ClusterNode ${dep_ip3} } -credential $Cred -Authentication credssp
	#To create quorm disk and shared volume
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${clusterip}' -ScriptBlock { Get-ClusterAvailableDisk | Add-ClusterDisk} -credential $Cred
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${clusterip}' -ScriptBlock { Set-ClusterQuorum -Cluster ${clustername} -NodeAndDiskMajority 'Cluster Disk 1' } -credential $Cred
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${clusterip}' -ScriptBlock { (Get-Cluster -Name ${clustername}).EnableSharedVolumes='Enable/NoticeRead' } -credential $Cred
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${clusterip}' -ScriptBlock { Add-ClusterSharedVolume -Cluster ${clustername} -Name 'Cluster Disk 2' } -credential $Cred

Creating Vswitch
	Run		powershell Enable-PSRemoting -Force
	${domainusername} =	Set Variable	${TestData.clusterNode[0].domainusername}
	${domainpassword} =	Set Variable	${TestData.clusterNode[0].domainpassword}
	${switchname1} =	Set Variable	${TestData.clusterNode[0].switchname1}
	${switchname2} =	Set Variable	${TestData.clusterNode[1].switchname2}
	#To create Hyper-V virtual Switch
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip3}' -ScriptBlock { $nets="Get-NetAdapter -physical | where status -eq 'up'";New-VMSwitch -Name ${switchname1} -NetAdapterName $nets[0].Name -AllowManagementOS $true -Notes 'Parent OS, VMs, LAN';New-VMSwitch -Name ${switchname2} -NetAdapterName $nets[1].Name -AllowManagementOS $true -Notes 'Parent OS, VMs, LAN' } -credential $Cred

Capture deployment IP of server3
	Log into Altair Appliance as Administrator
	${server_data} =	Set Variable	${Testdata.test_server_postfailover[0]}
	${ilo_ip} =		Set Variable	${server_data.ip}
	${dep_ip3}=	Get Deployment IP		${ilo_ip}
	Log		${dep_ip3}
	set global variable		${dep_ip3}
