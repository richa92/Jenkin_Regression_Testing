*** Settings ***
Documentation		Initial Setup for failover clustering
Resource			../resource.txt
Resource			../../../altair_keywords.txt
Test Setup			Load Test Data	${DataFile}
Test Teardown		Logout and close all browsers
Library				OperatingSystem
Library				SSHLibrary
Library				Process


*** Test Cases ***
Capture deployment IP of server1
	Log into Altair Appliance as Administrator
	${server_data} =	Set Variable	${Testdata.test_server[0]}
	${ilo_ip} =		Set Variable	${server_data.ip}
	${dep_ip1}=	Get Deployment IP		${ilo_ip}
	Log		${dep_ip1}
	set global variable		${dep_ip1}

Capture deployment IP of server2
	Log into Altair Appliance as Administrator
	${server_data} =	Set Variable	${Testdata.test_server[1]}
	${ilo_ip} =		Set Variable	${server_data.ip}
	${dep_ip2}=	Get Deployment IP		${ilo_ip}
	Log		${dep_ip2}
	set global variable		${dep_ip2}

Configuring DNS
	Run		powershell Enable-PSRemoting -Force
	${username} =	Set Variable	${TestData.clusterNode[0].username}
	${password} =	Set Variable	${TestData.clusterNode[0].password}
	${domainusername} =	Set Variable	${TestData.clusterNode[0].domainusername}
	${domainpassword} =	Set Variable	${TestData.clusterNode[0].domainpassword}
	${dns_ip} =	Set Variable	${TestData.clusterNode[0].dnsip}
	${dns_name} =	Set Variable	${TestData.clusterNode[0].dnsname}
	#To add roles
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { Import-Module ServerManager;Install-WindowsFeature -Name Hyper-V -IncludeManagementTools;Install-WindowsFeature -Name failover-clustering -IncludeManagementTools } -credential $Cred
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { Import-Module ServerManager;Install-WindowsFeature -Name Hyper-V -IncludeManagementTools;Install-WindowsFeature -Name failover-clustering -IncludeManagementTools } -credential $Cred
	#To assign DNS
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { $net = "Get-NetAdapter -physical | where status -eq 'up'";netsh interface ip set dns $net[0].Name static ${dns_ip} } -credential $Cred
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { $net = "Get-NetAdapter -physical | where status -eq 'up'";netsh interface ip set dns $net[0].Name static ${dns_ip} } -credential $Cred
	#To Join System to Domain
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { $domainuser = '${domainusername}';$domainpassword = '${domainpassword}';$domainpass = ConvertTo-SecureString -AsPlainText $domainpassword -Force; $domainCred = New-Object System.Management.Automation.PSCredential -ArgumentList $domainuser,$domainpass;add-computer -Credential $domainCred -DomainName ${dns_name} } -credential $Cred
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { $domainuser = '${domainusername}';$domainpassword = '${domainpassword}';$domainpass = ConvertTo-SecureString -AsPlainText $domainpassword -Force; $domainCred = New-Object System.Management.Automation.PSCredential -ArgumentList $domainuser,$domainpass;add-computer -Credential $domainCred -DomainName ${dns_name} } -credential $Cred
	#To Restart servers
	Run			powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { shutdown -r } -credential $Cred
	Run			powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { shutdown -r } -credential $Cred
	Sleep	900
	#To assign DNS
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { $net = "Get-NetAdapter -physical | where status -eq 'up'";netsh interface ip set dns $net[0].Name static ${dns_ip} } -credential $Cred
	Run		powershell $Username = '${username}'; $Password ='${password}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { $net = "Get-NetAdapter -physical | where status -eq 'up'";netsh interface ip set dns $net[0].Name static ${dns_ip} } -credential $Cred
	#To get Hostname
	${hostname1} =	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { hostname } -credential $Cred
	${hostname2} =	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { hostname } -credential $Cred
	#To add server to DNS domain
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dns_ip}' -ScriptBlock { dnscmd.exe ${dns_ip} /RecordAdd ${dns_name} ${hostname1} /CreatePTR A ${dep_ip1} } -credential $Cred
	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dns_ip}' -ScriptBlock { dnscmd.exe ${dns_ip} /RecordAdd ${dns_name} ${hostname2} /CreatePTR A ${dep_ip2} } -credential $Cred

Volume partition and formating
	Run		powershell Enable-PSRemoting -Force
	: For	${node}	   In	@{TestData.clusterNode}
	\	${domainusername} =	Set Variable	${node.domainusername}
	\	${domainpassword} =	Set Variable	${node.domainpassword}
	\	${disklabel} =	set variable	${node.disklabel}
	\	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip1}' -ScriptBlock { "Get-Disk |Where partitionstyle -eq raw |Initialize-Disk -PartitionStyle MBR -PassThru |New-Partition -AssignDriveLetter -UseMaximumSize |Format-Volume -FileSystem NTFS -NewFileSystemLabel '${node.disklabel}' -Confirm:$false" } -credential $Cred
	\	Run		powershell $Username = '${domainusername}'; $Password ='${domainpassword}'; Set-Item -force wsman:\\localhost\\client\\trustedhosts *; Restart-Service WinRM; $pass = ConvertTo-SecureString -AsPlainText $Password -Force; $Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass; Invoke-Command -ComputerName '${dep_ip2}' -ScriptBlock { "Get-Disk |Where partitionstyle -eq raw |Initialize-Disk -PartitionStyle MBR -PassThru |New-Partition -AssignDriveLetter -UseMaximumSize |Format-Volume -FileSystem NTFS -NewFileSystemLabel '${node.disklabel}' -Confirm:$false" } -credential $Cred
