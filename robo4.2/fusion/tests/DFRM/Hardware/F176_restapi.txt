*** Settings ***
Documentation     Verifying the features of F176 ie LIG , EG and LE : Get , post and delete calls 

Library			functions.py
Resource		resources.txt
Variables		variables.py

*** Test Cases ***

Login to fusion via REST
    [Documentation]         Connects to the Appliance and creates a session using the Username and Password. \n
    [Tags]                  Login	smoke	Hardware	cleanup
	[setup]			Run Keywords		
										Login to Fusion Via REST		${IP}    ${admin_credentials}
										
Create Logical Interconnect groups
	[Documentation]			Creating combinations of logical interconnect groups from the list provided in the variables.py file \n
	[Tags]					LIG		smoke	EG	Hardware
	[setup]			Run Keywords	
										
										Create LIG with bay combinations  ${LIG_Names}		
										

Getting on LIG
	[Documentation]			Getting the Sas Logical interconnect and validating each UID for Status, State, Power, Model and Serial Number \n
	[Tags]					LIG 	smoke	Hardware
	[setup]			Run Keywords		
										
										Set Log Level    TRACE
										${resp}		Fusion Api Get Resource			uri=/rest/sas-logical-interconnect-groups
										Logger 		\n Validating for /rest/sas-logical-interconnect-groups
										Validate URI for the response		${resp}
										${length} =		Get Length			${resp['members']}
										:FOR	${x}	IN RANGE	0	${length}
										\	${resp_uri}		Get From Dictionary		${resp['members'][${x}]}		uri
										\	Logger 		\n Validating for ${resp_uri} 
										\	${resp_uri1}		Fusion Api Get Resource			uri=${resp_uri}
										\	Validate resource attribute  uri  ${resp_uri}  ${resp_uri1}   
										\	Validate resource attribute  status_code  ${resp_uri}  ${resp_uri1}    200
										\	Validate resource attribute  state  ${resp_uri}  ${resp_uri1}    ${lig_state}
										\	Validate resource attribute  permittedInterconnectTypeUri  ${resp_uri}  ${resp_uri1['interconnectMapTemplate']['interconnectMapEntryTemplates'][0]}  ${permittedInterconnectTypeUri}

Create EG with 1 Enclosure 
    [Documentation]         Creates Enclosure Group with 1 Enclosure \n
    [Tags]                  EG		smoke	Hardware
    
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${1}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   RGEG1${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \   Create Enclosure Group  ${EG_NAME}  ${LIG_LIST[${i}]}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************


Create EG with 2 Enclosure combinations
    [Documentation]         Creates Enclosure Group with 2 Enclosure combinations \n
    [Tags]                  EG 	smoke
    
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${2}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   RGEG2${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \   Create Enclosure Group  ${EG_NAME}  ${LIG_LIST[${i}]}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    										
Create EG with 3 Enclosure combinations
    [Documentation]         Creates Enclosure Group with 3 Enclosure combinations \n
    [Tags]                  EG
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${3}
    Log to console  	${LIG_LIST}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   RGEG3${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \   Create Enclosure Group  ${EG_NAME}  ${LIG_LIST[${i}]}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    
Delete EG with 1 Enclosure
    [Documentation]         Delete Enclosure Groups which have one enclosure combination \n
    [Tags]                  EG	smoke 	cleanup
    
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${1}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   RGEG1${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \	Fusion Api Delete Enclosure Group  ${EG_NAME} 
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    
Delete EG with 2 Enclosures
    [Documentation]         Delete Enclosure Groups which have two enclosure combinations \n
    [Tags]                  EG	smoke
    
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${2}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   EG2${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \	Fusion Api Delete Enclosure Group  ${EG_NAME} 
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    
Delete EG with 3 Enclosures
    [Documentation]         Delete Enclosure Groups which have three enclosure combinations \n
    [Tags]                  EG 
    
    ${LIG_LIST}=  Combinations  ${LIG_Names}  ${3}
    ${LIG_LENGTH} =  Get Length  ${LIG_LIST}
    :FOR  ${i}   IN RANGE  0  ${LIG_LENGTH}
    \   ${EG_NAME}=  catenate   EG3${i}
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    \	${LIG_ENC}=  Convert to List  ${LIG_LIST[${i}]}
    \	Fusion Api Delete Enclosure Group  ${EG_NAME} 
    \	Log to console  **************************************************${EG_NAME}********************************************************************************
    
Delete LIG 
	[Documentation]			Deletes LIGS from a given list \n
	[Tags]					LIG	EG	smoke	cleanup
	
	Delete LIG from a list	${LIG_Names}
	
Create LIG with no bays 
	[Documentation]  Negative Testcase to create LIG with no bays configured \n
	...					where creation of LIG fails
	[Tags]		 negative	LIG  Hardware
	[setup]	 	Run Keywords
			
			${errormsg}=	Set Variable  Failed as the actual taskStatus is Internal error in adding SAS logical interconnect group. and expected is Added SAS logical Interconnect group.
			${Null_list}=  Create List
			Run Keyword And Expect Error  ${errormsg}	Create LIG	'abc'	${Null_list}										
										