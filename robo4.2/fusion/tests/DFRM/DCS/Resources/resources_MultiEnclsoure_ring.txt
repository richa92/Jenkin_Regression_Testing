*** Settings ***
Library     RoboGalaxyLibrary
Library     FusionLibrary
Library     Collections
Library     String
Library     OperatingSystem
Library     RoboGalaxyLibrary
Library     BuiltIn
Library     SSHLibrary
Library     ../UserInputs/functions.py
Variables   ../UserInputs/variables.py
Resource    resources.txt
#from robot.libraries.DateTime import Date, Time


*** Keywords ***
# New Resources file to Modularise the Keywords from main resources.txt, This file contains Keywords relevant for
# Multi Enclosure Ring Topology

CREATE ENCLOSURE GROUGP FOR 3 ENCLSOURE RING
    [Documentation]     This is to create EG with   3 enclosure
    ${resp}=            Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${logicalInterconnectGroupUri}=                 Get from dictionary     ${resp['members'][0]}   uri
    ${ic_topo_list}=    GET INTERCONNECT TOPOLOGY LIST FOR RING FRAME
    log                 ${ic_topo_list}
    # Get Enclosure lists for each Ring Topology and Append them in Enclosure Dictionary with ring key
    ${ic_Len}=          Get length              ${ic_topo_list}
    Run Keyword if      '${ic_Len}'=='0'        CREATION OF ENCLOSURE GROUP
    return from keyword if    ${ic_Len}==0
    ${loop_count}=      evaluate        ${ic_Len}*2
    :FOR                ${x}                        IN RANGE                0                      ${loop_count}
    \                   Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${x}]}
    \                   ...                         logicalInterconnectGroupUri
    \                   ...                         ${logicalInterconnectGroupUri}
    ${response}=        Fusion API Create Enclosure Group                   ${egpayloadfor3enclosure}

CREATE SINGLE DOMAIN ENCLOSURE GROUP FOR 3 ENCLOSURE RING
    [Documentation]             This is to create single domain EG with 3 enclosure
    [Arguments]                 ${icm_bayno}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${logicalinterconnectgroupuri}=                         Get from dictionary     ${resp['members'][0]}   uri
    Run Keyword If              ${icm_bayno} == 1           CREATE 3 ENCL EG WITH ICM IN BAY1   ${logicalinterconnectgroupuri}
    Run Keyword If              ${icm_bayno} == 4           CREATE 3 ENCL EG WITH ICM IN BAY4   ${logicalinterconnectgroupuri}

CREATE 3 ENCL EG WITH ICM IN BAY1
    [Documentation]             This is to create single domain EG with 3 enclosure having ICM in bay1
    [Arguments]                 ${logicalinterconnectgroupuri}
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${0}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${1}]}
    ...                         logicalInterconnectGroupUri
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${3}]}
    ...                         logicalInterconnectGroupUri
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${5}]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${2}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${4}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    ${response}=                Fusion API Create Enclosure Group                   ${egpayloadfor3enclosure}

CREATE 3 ENCL EG WITH ICM IN BAY4
    [Documentation]             This is to create single domain EG with 3 enclosure having ICM in bay1
    [Arguments]                 ${logicalinterconnectgroupuri}
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${1}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${0}]}
    ...                         logicalInterconnectGroupUri
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${2}]}
    ...                         logicalInterconnectGroupUri
    Remove From Dictionary      ${egpayloadfor3enclosure['interconnectBayMappings'][${4}]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${3}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    Set to dictionary           ${egpayloadfor3enclosure['interconnectBayMappings'][${5}]}
    ...                         logicalInterconnectGroupUri                         ${logicalinterconnectgroupuri}
    ${response}=        Fusion API Create Enclosure Group                   ${egpayloadfor3enclosure}

GET LOGICAL INTERCONNECT LIST
    [Documentation]     Keyword to list of the Logical Interconnect
    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_length}=       Get length                  ${LI_resp['members']}
    ${LI_List}=         Create list
    :FOR                ${LI}                       IN RANGE                0   ${LI_length}
    \                   ${LI_uri}=                  get from dictionary     ${LI_resp['members'][${LI}]}    uri
    \                   Append To List              ${LI_List}              ${LI_uri}
    [Return]            ${LI_List}

GET TBIRD ENCLOSURE LIST
    [Documentation]     Keyword to list of the TBIRD Enclosures
    ${ENCL_resp}=       Fusion Api Get Resource     uri=/rest/enclosures
    ${ENCL_length}=     Get length                  ${ENCL_resp['members']}
    ${ENCL_List}=       Create list
    :FOR                ${ENCL}                     IN RANGE                0   ${ENCL_length}
    \                   ${ENCL_uri}=                get from dictionary     ${ENCL_resp['members'][${ENCL}]}    uri
    \                   Append To List              ${ENCL_List}            ${ENCL_uri}
    [Return]            ${ENCL_List}

GET SERVER HARDWARE LIST
    [Documentation]     Keyword to list of the Server Hardware list
    ${SWHW_resp}=       Fusion Api Get Resource     uri=/rest/server-hardware
    ${SWHW_length}=     Get length                  ${SWHW_resp['members']}
    ${SWHW_List}=       Create list
    :FOR                ${SWHW}                     IN RANGE                0   ${SWHW_length}
    \                   ${SWHW_uri}=                get from dictionary     ${SWHW_resp['members'][${SWHW}]}    uri
    \                   Append To List              ${SWHW_List}            ${SWHW_uri}
    [Return]            ${SWHW_List}

GET DRIVE ENCLOSURE LIST PER LI
    [Documentation]         Keyword to list of the Drive Enclosure Per Logical Interconnect list
    [Arguments]             ${LI_uri}                   ${SWHW_list}
    ${LI_resp}=             Fusion Api Get Resource     uri=${LI_uri}
    ${encl_uri_from_LI}=    Get from dictionary         ${LI_resp}                  enclosureUris
    ${SWHW_len}=            Get Length                  ${SWHW_list}
    :FOR                    ${x}                        IN RANGE                    0               ${SWHW_len}
    \                       ${SWHW_resp}=               Fusion Api Get Resource     uri=${SWHW_list[${x}]}
    \                       ${loc_uri_from_swhw}=       Get from dictionary         ${SWHW_resp}    locationUri
    \                       ${DE_list}=                 Run Keyword If
    \                       ...                         '${encl_uri_from_LI[0]}'=='${loc_uri_from_swhw}'
    \                       ...                         ASSIGN DELIST
    \                       ...                         ${LI_resp}
    ...                     ELSE                        continue for loop
    [Return]                ${DE_list}

GET SERVER HARDWARE PER LI
    [Documentation]         Keyword to list of the Server Hardware Per Logical Interconnect list
    [Arguments]             ${LI_uri}                   ${SWHW_list}
    ${LI_resp}=             Fusion Api Get Resource     uri=${LI_uri}
    ${encl_uri_from_LI}=    Get from dictionary         ${LI_resp}                  enclosureUris
    ${SWHW_len}=            Get Length                  ${SWHW_list}
    ${SWHW_per_LI_list}=    Create List
    :FOR                    ${x}                        IN RANGE                    0               ${SWHW_len}
    \                       ${SWHW_resp}=               Fusion Api Get Resource     uri=${SWHW_list[${x}]}
    \                       ${swhw_ser_num}=            Get from dictionary         ${SWHW_resp}    serialNumber
    \                       Run Keyword If              '${swhw_ser_num}'=='MXQ806056N'             continue for loop
    \                       ${loc_uri_from_swhw}=       Get from dictionary         ${SWHW_resp}    locationUri
    \                       ${DE_list}=                 Run Keyword If
    \                       ...                         '${encl_uri_from_LI[0]}'=='${loc_uri_from_swhw}'
    \                       ...                         Append To List
    ...                     ${SWHW_per_LI_list}         ${SWHW_list[${x}]}
    ...                     ELSE                        continue for loop
    [Return]                ${SWHW_per_LI_list}

ASSIGN DELIST
    [Documentation]     ToAssign DE List and Return
    [Arguments]         ${LI_resp}
    ${DE_list}=         Create List
    ${DE_list}=         Get from dictionary     ${LI_resp}      driveEnclosureUris
    [return]            ${DE_list}

CLEANUP LISTS
    [Documentation]     CLEAN UP
    [Arguments]         ${SAS_HDD_List}
    ${r}=               Get Length          ${lists}
    :For                ${p}                IN RANGE            0   ${r}
    \                   Remove From List    ${lists}            0
    ${r1}=              Get Length          ${lists}
    :For                ${p1}               IN RANGE            0   ${r1}
    \                   Remove From List    ${SAS_HDD_List}     0

# ------------------ RING TOPOLOGY KEYWORDS ----------------
Get The Number Of Drives Present in Multi Enclosure
    [Documentation]     Create drive enclosure
    [Arguments]         ${DE_list}          ${drivelist}
    ${len}=             Get Length          ${DE_list}
    :FOR                ${x}                IN RANGE                    0               ${len}
    #\                  ${uri}=             set varibale                ${DE_list[${x}]}
    \                   ${response}=        Fusion Api Get resource     uri=${DE_list[${x}]}
    \                   ${de_enc_name}=     Get from dictionary         ${response}     serialNumber
    \                   ${len}=             Get Length                  ${response['driveBays']}
    \                   Extract Drives in Multi Enclosure               ${len}          ${response}     ${de_enc_name}
    \                   ...                 ${drivelist}

Extract Drives in Multi Enclosure
    [Documentation]     extract the drives
    [Arguments]         ${lens}                 ${responses}            ${de_enc_name}      ${drivelist}
    :FOR                ${x}                    IN RANGE                0                   ${lens}
    \                   ${driveinfo}=           get from dictionary     ${responses['driveBays'][${x}]}     drive
    \                   Run Keyword If          ${driveinfo}==None      Continue For Loop
    \                   ${deviceInterface}=     get from dictionary     ${driveinfo}        deviceInterface
    \                   ${driveMedia}=          get from dictionary     ${driveinfo}        driveMedia
    \                   ${capacity}=            get from dictionary     ${driveinfo}        capacity
    \                   Create Payload For Adding Ljbods for Multi Enclosure                ${deviceInterface}
    \                   ...                     ${driveMedia}
    \                   ...                     ${capacity}
    \                   ...                     ${x}                    ${de_enc_name}      ${drivelist}

Create Payload For Adding Ljbods for Multi Enclosure
    [Documentation]         create dynamic payload for the creation of adding ljbods
    [Arguments]             ${deviceInterfaces}     ${driveMedias}                  ${capacitys}    ${n}    ${de_enc_name}
    ...                     ${drivelist}
    ${indexvalueoflist}=    Get Length              ${drivelist}
    ${fid}=                 Evaluate                ${indexvalueoflist} + ${addone}
    ${sizeofdisk}=          Convert To Integer      ${capacitys}
    ${deviceInterface}=     Convert To Lowercase    ${deviceInterfaces}
    ${replacedstring}=      Remove String           ${deviceInterface}              s
    ${sasname}=             Run Keyword If          '${deviceInterface}'=='sas'     conversion to sas
    ...                     ELSE
    ...                     convert to sata

    #                       ${finalstringofSataorSas}=                  Catenate                    SEPARATOR=      ${letssay}
    #                       ...                     ${replacedstring}
    ${drivemedia}=          Convert To Lowercase    ${drivemedias}
    ${replacedstrings}=     Remove String           ${drivemedia}       h
    ${afterremovings}=      Remove String           ${drivemedia}       s
    ${gettext}=             Run Keyword If          "${replacedstrings}"=="dd"                      Convert It Into Hdd
    ...                     ${replacedstrings}
    ...                     ELSE
    ...                     Convert It Into Ssd
    ...                     ${afterremovings}
    # ${drivetechnology}=   Catenate                SEPARATOR=          ${finalstringofSataorSas}   ${gettext}
    ${drivetechnology}=     Catenate                SEPARATOR=          ${sasname}                  ${gettext}
    ${spdictionary}=        Create Dictionary
    Set to dictionary       ${spdictionary}         id                  ${fid}
    Set to dictionary       ${spdictionary}         deviceSlot          ${formezz}
    Set to dictionary       ${spdictionary}         name                ${forname}+${de_enc_name}+${n}
    Set to dictionary       ${spdictionary}         numPhysicalDrives   ${addone}
    Set to dictionary       ${spdictionary}         driveMinSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}         driveMaxSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}         driveTechnology     ${drivetechnology}
    Set to dictionary       ${spdictionary}         eraseData           ${False}
    Set to dictionary       ${spdictionary}         persistent          ${False}
    Set to dictionary       ${spdictionary}         sasLogicalJBODUri   ${None}
    Set to dictionary       ${spdictionary}         status              ${None}
    Append to List          ${drivelist}            ${spdictionary}

CREATE ONE LOGICAL ENCLOSURE FOR EACH RING TOPOLOGY
    [Documentation]     Keyword to create Logical Enclosure on ring frame. It creates 1 LE / Ring Topology ( 3 LI/Ring )
    ${enclosure_dictionay}=                     Create Dictionary
    ${ic_topo_list}=    GET INTERCONNECT TOPOLOGY LIST FOR RING FRAME
    log                 ${ic_topo_list}
    # Get Enclosure lists for each Ring Topology and Append them in Enclosure Dictionary with ring key
    ${ic_Len}=          Get length              ${ic_topo_list}

    # If test setup is a single enclosure then Create LE on Single Enclosure.
    Run Keyword if      '${ic_Len}'=='0'    CREATION OF LOGICAL ENCLOSURE AND LOGICAL INTERCONNECT
    return from keyword if       '${ic_Len}'=='0'

    :FOR                ${ic}                   IN RANGE                    0                       ${ic_Len}
    \                   ${ic_resp}=             Fusion Api Get Resource     uri=${ic_topo_list[${ic}]}
    \                   ${enclosuremanager}=    get from dictionary         ${ic_resp}              enclosureMembers
    \                   GET ENCLOSURES FOR EACH RING TOPOLOGY               ${enclosuremanager}     ${ic}
    \                   ...                     ${enclosure_dictionay}
    # get Enclosure Group URI
    ${response}=    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${urii}=        get from dictionary         ${response['members'][0]}                   uri
    # Create 1 LE for each of the RIng Topology
    :FOR            ${le}                       IN RANGE                0                   ${ic_Len}
    \               ${temp_encl_list}=          Get From Dictionary     ${enclosure_dictionay}                ring${le}
    \               Set to dictionary           ${lepayloadfor3enclosure}                   enclosureUris
    \               ...                         ${temp_encl_list}
    \               Set to dictionary           ${lepayloadfor3enclosure}                   enclosureGroupUri   ${urii}
    \               Set to dictionary           ${lepayloadfor3enclosure}                   name           LE_RING_${le}
    \               ${responsenew}=             Fusion Api Create Logical Enclosure         ${lepayloadfor3enclosure}
    \               ${headers}=                 Get From Dictionary     ${responsenew}      headers
    \               ${taskurii}=                Get From Dictionary     ${headers}          Location
    \               Wait Until Keyword Succeeds                         1200s               5s
    \               ...                         Running State Again
    \               ...                         ${taskurii}

GET INTERCONNECT TOPOLOGY LIST FOR RING FRAME
    [Documentation]         To Get the Interconnect Topologies from Ring
    ${IC_Topo_list}=        Create List
    ${IC_topo_resp}=        Fusion Api Get Resource     uri=/rest/interconnect-link-topologies
    ${IC_topo_length}=      Get length                  ${IC_topo_resp['members']}
    :FOR                    ${IC_link}                  IN RANGE                0   ${IC_topo_length}
    \                       ${link_uri}=                get from dictionary     ${IC_topo_resp['members'][${IC_link}]}      uri
    \                       Append To List              ${IC_Topo_list}         ${link_uri}
    Log                     ${IC_Topo_list}
    [Return]                ${IC_Topo_list}

GET ENCLOSURES FOR EACH RING TOPOLOGY
    [Documentation]         Keyword to Get Enclosures for each of the Rings and assign them in a RIng frame
    [Arguments]             ${Ring_encl_mem}            ${iter}                 ${Enclosure_Dictionay}
    ${enclosure_list}=      Create List
    :FOR                    ${x}                        IN RANGE                0   3
    \                       ${uri}=                     Get From Dictionary     ${Ring_encl_mem[${x}]}      enclosureUri
    \                       Append to list              ${enclosurelist}        ${uri}
    Set to dictionary       ${Enclosure_Dictionay}      ring${iter}             ${enclosurelist}

GET SERVER HARDWARE LIST PER ENCLSOURE
    [Documentation]     Test
    [Arguments]         ${ServerHWDict}
    ${ENCL_list}=       GET TBIRD ENCLOSURE LIST
    ${encl_len}=        get length                  ${ENCL_list}
    ${SWHW_resp}=       Fusion Api Get Resource     uri=/rest/server-hardware
    ${SWHW_len}=        Get length                  ${SWHW_resp['members']}
    :FOR                ${x}                        IN RANGE                    0               ${encl_len}
    \                   ${encl_uri}=                Get from list               ${ENCL_list}    ${x}
    \                   ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri}
    \                   ${encl_name}=               Get from Dictionary         ${encl_resp}    name
    \                   ${ServerHWDict}=            GET SERVER HARDWARE FOR ENCLSOURE           ${encl_uri}     ${SWHW_resp}
    \                   ...                         ${SWHW_len}
    \                   ...                         ${ServerHWDict}
    \                   ...                         ${encl_name}
    Log                 ${ServerHWDict}
    ${len}=             Get length                  ${ServerHWDict}
    [Return]            ${ServerHWDict}

 GET SERVER HARDWARE FOR ENCLSOURE
    [Documentation]         Testing 01
    [Arguments]             ${encl_uri}             ${SWHW_resp}                    ${SWHW_len}         ${ServerHWDict}
    ...                     ${encl_name}
    ${temp_swhw_list}=      Create List
    :FOR                    ${y}                    IN RANGE                        0                   ${SWHW_len}
    \                       ${portmap_dict}=        Create Dictionary
    \                       ${state}=               Get from Dictionary             ${SWHW_resp['members'][${y}]}
    \                       ...                     state
    \                       ${status}=              Get from Dictionary             ${SWHW_resp['members'][${y}]}
    \                       ...                     status
    \                       Run Keyword if          '${state}'!='NoProfileApplied'                      continue for loop
    \                       Run Keyword if          '${status}'!='OK'               continue for loop
    \                       ${loc_uri}=             Get from Dictionary             ${SWHW_resp['members'][${y}]}
    \                       ...                     locationUri
    \                       ${portmap_dict}=        Run Keyword If                  '${encl_uri}'=='${loc_uri}'
    ...                     Get from Dictionary     ${SWHW_resp['members'][${y}]}   portMap
    \                       ${swhw_uri}=            Run Keyword If                  '${encl_uri}'=='${loc_uri}'
    ...                     Get from Dictionary     ${SWHW_resp['members'][${y}]}   uri
    \                       ${Mezz_Card_present}=   Run Keyword If                  '${encl_uri}'=='${loc_uri}'
    ...                     CHECK IF MEZZ CARD IS PRESENT IN SERVER HARDWARE        ${swhw_uri}         ${portmap_dict}
    \                       Run Keyword If          '${Mezz_Card_present}'=='1'     append to list      ${temp_swhw_list}
    \                       ...                     ${swhw_uri}

    Set to dictionary   ${ServerHWDict}     ${encl_name}    ${temp_swhw_list}
    [Return]            ${ServerHWDict}

CHECK IF MEZZ CARD IS PRESENT IN SERVER HARDWARE
    [Documentation]     Keyword to Check if Mezzanine Card is present in server Hardware or Not
    [Arguments]         ${swhw_uri}     ${portmap_dict}

    ${device_slots}=        Get From Dictionary     ${portmap_dict}     deviceSlots
    ${Is_DCS}=              DFRM CHECK IS DCS
    #${device_slot_len}=    get length              ${device_slots}
    #:FOR                   ${n}                    IN RANGE            0               ${device_slot_len}
    #\
    ${Gen10_mezzCard}=      Run Keyword if          '${Is_DCS}'=='1'    set variable    HPE Smart Array P416ie-m SR Gen10
    ...                     ELSE
    ...                     set variable            HPE Smart Array P416ie-m SR G10
    ${MezzCardPresent}=     Run Keyword if          '${device_slots[${0}]['deviceName']}'=='Smart Array P542D Controller'
    ...                     Set variable            1
    ...                     ELSE IF
    ...                     '${device_slots[${0}]['deviceName']}'=='${Gen10_mezzCard}'
    ...                     Set variable            1

    [Return]    ${MezzCardPresent}

GET DRIVES FROM ENCLOSURE
    [Documentation]     To get Drive Dictionary for Each of the enclsoure
    [Arguments]         ${Drives_Dict}
    ${ENCL_list}=       GET TBIRD ENCLOSURE LIST
    ${encl_len}=        get length                  ${ENCL_list}
    ${DE_resp}=         Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${DE_len}=          Get length                  ${DE_resp['members']}
    :FOR                ${x}                        IN RANGE                    0               ${encl_len}
    \                   ${drivelist}=               Create List
    \                   ${encl_uri}=                Get from list               ${ENCL_list}    ${x}
    \                   ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri}
    \                   ${encl_name}=               Get from Dictionary         ${encl_resp}    name
    \                   ${DE_list}=                 GET DRIVE ENCLSOURE DICT PER ENCLSOURE      ${encl_uri}     ${encl_name}
    \                   ...                         ${DE_resp}
    \                   ...                         ${DE_len}
    \                   Get The Number Of Drives Present in Multi Enclosure     ${DE_list}      ${drivelist}
    \                   Set to dictionary           ${Drives_Dict}              ${encl_name}    ${drivelist}

    Log     ${Drives_Dict}

GET DRIVE ENCLSOURE DICT PER ENCLSOURE
    [Documentation]     Keyword to create drive enclsoure dictionary
    [Arguments]         ${encl_uri}             ${encl_name}                    ${DE_resp}          ${DE_len}
    ${temp_de_list}=    Create List
    :FOR                ${y}                    IN RANGE                        0                   ${DE_len}
    \                   ${enc_uri}=             Get from Dictionary             ${DE_resp['members'][${y}]}
    \                   ...                     enclosureUri
    \                   ${de_uri}=              Run Keyword If                  '${encl_uri}'=='${enc_uri}'
    ...                 Get from Dictionary     ${DE_resp['members'][${y}]}     uri
    \                   Run Keyword If          '${encl_uri}'=='${enc_uri}'     append to list      ${temp_de_list}
    \                   ...                     ${de_uri}
    [Return]            ${temp_de_list}

    #Set to dictionary      ${Drives_Dict}      ${encl_name}    ${temp_de_list}

Clear a List
    [Documentation]     this is to clear the lists
    ${len}=             Get Length          ${lists}
    :FOR                ${i}                IN RANGE    0   ${len}
    \                   Remove From List    ${lists}    0

CREATE SERVER PROFILE WITH LOGICAL JBOD
    [Documentation]     Keyword to Create Server Profile on a Ring frame
    [Arguments]         ${SP_Count}     ${ServerHWDict}     ${Drives_Dict}      ${LJBOD_Count}      ${SP_On_all_hw}

    ${LI_resp}=     Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=      Get length                  ${LI_resp['members']}
    :FOR            ${x}                        IN RANGE                    0                   ${LI_len}
    \               ${encl_uri}=                Get from Dictionary         ${LI_resp['members'][${x}]}         enclosureUris
    \               ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri[0]}
    \               ${encl_name}=               Get from Dictionary         ${encl_resp}        name
    \               ${sw_hw_list}=              Create List
    \               ${sw_hw_list}=              Get From Dictionary         ${ServerHWDict}     ${encl_name}
    \               ${drive_list}=              Get From Dictionary         ${Drives_Dict}      ${encl_name}
    \               LOG                         ${sw_hw_list}
    \               LOG                         ${drive_list}
    \               Run Keyword If              '${SP_On_all_hw}'=='True'
    ...             CREATE SERVER PROFILES ON ALL SERVER HARDWARE PER LI    ${SP_Count}         ${sw_hw_list}   ${drive_list}
    ...             ${encl_name}
    \               Run Keyword If              '${SP_On_all_hw}'=='False'
    ...             CREATE MULTIPLE SERVER PROFILES PER LI                  ${SP_Count}         ${sw_hw_list}   ${drive_list}
    ...             ${encl_name}
    \               Run Keyword If              '${SP_On_all_hw}'=='${LOGICAL_DRIVE}'
    ...             CREATE SERVER PROFILES WITH LOGICAL DRIVE PER LI        ${SP_Count}         ${sw_hw_list}   ${drive_list}
    ...             ${encl_name}

CREATE MULTIPLE SERVER PROFILES PER LI
    [Documentation]     Keyword to Create Multiple Server Profile Based on Server Profile Count argument
    [Arguments]         ${SP_Count}     ${sw_hw_list}   ${drive_list}   ${encl_name}

    :FOR    ${sp}               IN RANGE                        0               ${SP_Count}
    \       ${sw_hw_uri}=       Get from List                   ${sw_hw_list}   ${sp}
    \       ${drive_paylod}=    Get From List                   ${drive_list}   ${sp}
    \       CREATE SERVER PROFILE WITH LJBOD FOR RING FRAME     ${sw_hw_uri}    ${drive_paylod}     ${encl_name}    ${sp}

CREATE SERVER PROFILES ON ALL SERVER HARDWARE PER LI
    [Documentation]     Keyword to Create Server Profile on all server hardware available per enclsoure
    [Arguments]         ${SP_Count}         ${sw_hw_list}                   ${drive_list}   ${encl_name}
    ${sw_len}=          Get Length          ${sw_hw_list}
    :FOR                ${sp}               IN RANGE                        0               ${sw_len}
    \                   ${sw_hw_uri}=       Get from List                   ${sw_hw_list}   ${sp}
    \                   ${drive_paylod}=    Get From List                   ${drive_list}   ${sp}
    \                   CREATE SERVER PROFILE WITH LJBOD FOR RING FRAME     ${sw_hw_uri}    ${drive_paylod}     ${encl_name}
    \                   ...                 ${sp}

CREATE SERVER PROFILE WITH LJBOD FOR RING FRAME
    [Documentation]             This is used to create dynamic sp
    [Arguments]                 ${SWHW_uri}                 ${drive_paylod}         ${encl_name}    ${sp}
    # Power off Specific Server Hardware                    ${SWHW_uri}
    POWER OFF SERVER HW MULTI ENCLOSURE                     ${SWHW_uri}
    #Sleep                      15s
    ${resp}=                    Fusion Api Get Resource     uri=${SWHW_uri}
    ${serverHardwareTypeUri}=   get from dictionary         ${resp}                 serverHardwareTypeUri
    ${SWHW_SerialNum}=          Get from Dictionary         ${resp}                 serialNumber
    Set to dictionary           ${advancesppayload}         serverHardwareUri       ${SWHW_uri}
    ${oneviewversion}=         DFRM Get Oneview Version
    Run Keyword IF              '${oneviewversion}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV10
    Run Keyword IF              '${oneviewversion}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV11
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri   ${serverHardwareTypeUri}
    Set to dictionary           ${advancesppayload}         name                    SP_${encl_name}_${sp}_${SWHW_SerialNum}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary         ${resp['members'][0]}   uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri       ${EG_uri}
    ${localStorage}=            get from dictionary         ${advancesppayload}     localStorage
    Set to dictionary           ${advancesppayload}         localStorage            ${localStorage}
    ${localStorage['sasLogicalJBODs']}=                     Append To List          ${localStorage['sasLogicalJBODs']}
    ...                         ${drive_paylod}
    Set to dictionary           ${localStorage['sasLogicalJBODs'][0]}               name
    ...                         ljbod_${SWHW_SerialNum}_${sp}
    Set to dictionary           ${localStorage['sasLogicalJBODs'][0]}               id              ${addone}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}         param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}         serverHardwareUri
    Remove From dictionary      ${advancesppayload}         serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}         enclosureGroupUri
    Remove From Dictionary      ${localStorage}             sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    ${ljbod_len}=                   get length      ${drive_paylod}
    ${wait_time}=                   evaluate        ${ljbod_len}*90
    Wait Until Keyword Succeeds     ${wait_time}s   10s     Running State Again     ${spuri}

POWER OFF SERVER HW MULTI ENCLOSURE
    [Documentation]     Power Off Test
    [Arguments]         ${sw_hw_uri}
    ${body} =           Create Dictionary           powerState=Off      powerControl=MomentaryPress
    ${resp}=            Fusion Api Get Resource     uri=${sw_hw_uri}
    ${powerState}=      Get from Dictionary         ${resp}             powerState
    ${pweresp} =        run keyword if              '${powerState}'=='On'
    ...                 Fusion Api Edit Server Hardware Power State
    ...                 body=${body}
    ...                 uri=${sw_hw_uri}
    Run Keyword If      '${powerState}'=='Off'      log                 Server Hardware ${sw_hw_uri} already powered off
    Sleep               5s

CREATE SERVER PROFILE WITH LOGICAL JBOD AND MEZZ COMBINATION
    [Documentation]     Keyword to Create Server Profile on a Ring frame with Selection of Mezzanine Cards and Server
    ...                 Hardware Combination, If ${Multi_Mezz_Card}=True, LJBODS created on each Mezz card for SP
    ...                 else            ${Multi_Mezz_Card}=Fasle    LJBODs created on all Mezz card and server hardware
    [Arguments]         ${SP_Count}     ${ServerHWDict}             ${Drives_Dict}      ${LJBOD_Count}      ${Multi_Mezz_Card}

    ${LI_resp}=     Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=      Get length                  ${LI_resp['members']}
    :FOR            ${x}                        IN RANGE                    0                   ${LI_len}
    \               ${encl_uri}=                Get from Dictionary         ${LI_resp['members'][${x}]}         enclosureUris
    \               ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri[0]}
    \               ${encl_name}=               Get from Dictionary         ${encl_resp}        name
    \               ${sw_hw_list}=              Create List
    \               ${sw_hw_list}=              Get From Dictionary         ${ServerHWDict}     ${encl_name}
    \               ${drive_list}=              Get From Dictionary         ${Drives_Dict}      ${encl_name}
    \               LOG                         ${sw_hw_list}
    \               LOG                         ${drive_list}
    \               Run Keyword If              '${Multi_Mezz_Card}'=='True'
    ...             CREATE MULTIPLE SERVER PROFILE WITH LJBOD MULTIPLE MEZZ CARD                ${SP_Count}     ${sw_hw_list}
    ...             ${drive_list}
    ...             ${encl_name}
    ...             ELSE
    ...             CREATE MULTIPLE SERVER PROFILE WITH LJBOD ON ALL MEZZ CARD ALL SERVER HARDWARE              ${SP_Count}
    ...             ${sw_hw_list}
    ...             ${drive_list}               ${encl_name}

CREATE MULTIPLE SERVER PROFILE WITH LJBOD MULTIPLE MEZZ CARD
    [Documentation]     Keyword to Create Multiple Server Profile with Server Hardware having atleast 2 Smart Array mezz cards
    ...                 LJBODS created on each Mezz cards >=2
    [Arguments]         ${SP_Count}                 ${sw_hw_list}                   ${drive_list}   ${encl_name}
    ${sw_len}=          Get Length                  ${sw_hw_list}
    :FOR                ${sp}                       IN RANGE                        0               ${sw_len}
    \                   ${Mezz_device_num_list}=    Create List
    \                   ${sw_hw_uri}=               Get from List                   ${sw_hw_list}   ${sp}
    \                   ${drive_payload}=           Create Dictionary
    \                   GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE    ${sw_hw_uri}    ${Mezz_device_num_list}
    \                   ${mezz_length}=             Get Length                      ${Mezz_device_num_list}
    \                   Run Keyword If              '${mezz_length}'>='2'           CREATE LJBOD PAYLOAD FOR EACH MEZZ CARD
    \                   ...                         ${drive_list}
    ...                 ${Mezz_device_num_list}     ${drive_payload}
    ...                 ELSE                        continue for loop
    \                   CREATE SERVER PROFILE WITH MEZZ CARD                        ${sw_hw_uri}    ${drive_payload}
    \                   ...                         ${encl_name}
    \                   ...                         ${sp}

CREATE MULTIPLE SERVER PROFILE WITH LJBOD ON ALL MEZZ CARD ALL SERVER HARDWARE
    [Documentation]     Keyword to Create Multiple Server Profile on server hardware with atleast 1 mezzanine card
    [Arguments]         ${SP_Count}                 ${sw_hw_list}                   ${drive_list}   ${encl_name}
    ${sw_len}=          Get Length                  ${sw_hw_list}
    :FOR                ${sp}                       IN RANGE                        0               ${sw_len}
    \                   ${Mezz_device_num_list}=    Create List
    \                   ${sw_hw_uri}=               Get from List                   ${sw_hw_list}   ${sp}
    \                   ${drive_payload}=           Create Dictionary
    \                   GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE    ${sw_hw_uri}    ${Mezz_device_num_list}
    \                   ${mezz_length}=             Get Length                      ${Mezz_device_num_list}
    \                   Run Keyword If              '${mezz_length}'>='1'           CREATE LJBOD PAYLOAD FOR EACH MEZZ CARD
    \                   ...                         ${drive_list}
    ...                 ${Mezz_device_num_list}     ${drive_payload}
    ...                 ELSE                        continue for loop
    \                   CREATE SERVER PROFILE WITH MEZZ CARD                        ${sw_hw_uri}    ${drive_payload}
    \                   ...                         ${encl_name}
    \                   ...                         ${sp}

CREATE LJBOD PAYLOAD FOR EACH MEZZ CARD
    [Documentation]     Keyword to Create LJBOD Paylod for SP, for each mezz card
    [Arguments]         ${drive_list}       ${Mezz_device_num_list}     ${drive_payload}
    ${mezz_len}=        Get Length          ${Mezz_device_num_list}
    ${temp_list}=       Create List
    :FOR                ${mezz}             IN RANGE                    0               ${mezz_len}
    \                   ${temp_payload}=    Get from List               ${drive_list}   ${mezz}
    \                   ${slot}=            Get from List               ${Mezz_device_num_list}     ${mezz}
    \                   Set to dictionary   ${temp_payload}             deviceSlot      Mezz ${slot}
    \                   Set to dictionary   ${temp_payload}             name            LJBOD_Mezz_${slot}_${mezz}
    \                   ${temp_id}=         Evaluate                    ${mezz} + ${addone}
    \                   Set to dictionary   ${temp_payload}             id              ${temp_id}
    \                   Append to List      ${temp_list}                ${temp_payload}

    :FOR    ${rem}              IN RANGE        0   ${mezz_len}
    \       Remove from list    ${drive_list}   ${rem}

    Set to dictionary   ${drive_payload}    MezzCard    ${temp_list}

GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE
    [Documentation]         Keyword to Check if Mezzanine Card is present in server Hardware or Not
    [Arguments]             ${swhw_uri}                 ${Mezz_device_num_list}
    ${SW_HW_resp_loc}=      Fusion Api Get Resource     uri=${swhw_uri}
    #${SW_HW_resp_loc}=     Fusion Api Get Resource     uri=/rest/server-hardware/34323937-3431-4732-3230-313130384747
    ${portmap_dict_loc}=    Get from Dictionary         ${SW_HW_resp_loc}           portMap
    ${device_slots}=        Get From Dictionary         ${portmap_dict_loc}         deviceSlots
    ${device_slot_len}=     get length                  ${device_slots}
    ${Is_DCS}=              DFRM CHECK IS DCS
    ${Gen10_mezzCard}=      Run Keyword if              '${Is_DCS}'=='1'            set variable
    ...                     HPE Smart Array P416ie-m SR Gen10
    ...                     ELSE
    ...                     set variable                HPE Smart Array P416ie-m SR G10
    :FOR                    ${n}                        IN RANGE                    0   ${device_slot_len}
    \
    \                       ${MezzCardPresent}=         Run Keyword if
    \                       ...                         '${device_slots[${n}]['deviceName']}'=='Smart Array P542D Controller'
    ...                     Append to List              ${Mezz_device_num_list}     ${device_slots[${n}]['deviceNumber']}
    ...                     ELSE IF                     '${device_slots[${n}]['deviceName']}'=='${Gen10_mezzCard}'
    ...                     Append to List              ${Mezz_device_num_list}     ${device_slots[${n}]['deviceNumber']}

CREATE SERVER PROFILE WITH MEZZ CARD
    [Documentation]             This is used to create dynamic sp
    [Arguments]                 ${SWHW_uri}                 ${drive_paylod}         ${encl_name}    ${sp}
    # Power off Specific Server Hardware                    ${SWHW_uri}
    POWER OFF SERVER HW MULTI ENCLOSURE                     ${SWHW_uri}
    #Sleep                      15s
    ${resp}=                    Fusion Api Get Resource     uri=${SWHW_uri}
    ${serverHardwareTypeUri}=   get from dictionary         ${resp}                 serverHardwareTypeUri
    ${SWHW_SerialNum}=          Get from Dictionary         ${resp}                 serialNumber
    Set to dictionary           ${advancesppayload}         serverHardwareUri       ${SWHW_uri}
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri   ${serverHardwareTypeUri}
    ${oneviewversion}=         DFRM Get Oneview Version
    Run Keyword IF              '${oneviewversion}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV10
    Run Keyword IF              '${oneviewversion}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV11
    Set to dictionary           ${advancesppayload}         name                    SP_${encl_name}_${sp}_${SWHW_SerialNum}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary         ${resp['members'][0]}   uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri       ${EG_uri}
    ${localStorage}=            get from dictionary         ${advancesppayload}     localStorage
    Set to dictionary           ${advancesppayload}         localStorage            ${localStorage}

    ${paylod}=          Get from dictionary     ${drive_paylod}     MezzCard
    ${len}=             get length              ${paylod}
    #:FOR               ${m}                    IN RANGE            0                   ${len}
    Set to dictionary   ${advancesppayload['localStorage']}         sasLogicalJBODs     ${paylod}

    #${localStorage['sasLogicalJBODs']}=    Append To List          ${localStorage['sasLogicalJBODs']}
    #...                    ${paylod}
    #Set to dictionary      ${localStorage['sasLogicalJBODs'][0]}   name
    #...                    ljbod_${SWHW_SerialNum}_${sp}
    #Set to dictionary      ${localStorage['sasLogicalJBODs'][0]}   id      ${addone}

    ${resp}=                    Fusion Api Create Server Profile    ${advancesppayload}     param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}                 serverHardwareUri
    Remove From dictionary      ${advancesppayload}                 serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}                 enclosureGroupUri
    Remove From Dictionary      ${localStorage}                     sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    ${ljbod_len}=                   get length      ${drive_paylod}
    ${wait_time}=                   evaluate        ${ljbod_len}*90
    Wait Until Keyword Succeeds     ${wait_time}s   10s     Running State Again     ${spuri}

CREATE SERVER PROFILE WITH MAX LOGICAL JBOD
    [Documentation]     Keyword to create server profile with Maximum Logical JBODS
    [Arguments]         ${ServerHWDict}             ${Drives_Dict}              ${MaxFlag}
    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=          Get length                  ${LI_resp['members']}
    :FOR                ${x}                        IN RANGE                    0                   ${LI_len}
    \                   ${encl_uri}=                Get from Dictionary         ${LI_resp['members'][${x}]}
    \                   ...                         enclosureUris
    \                   ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri[0]}
    \                   ${encl_name}=               Get from Dictionary         ${encl_resp}        name
    \                   ${sw_hw_list}=              Create List
    \                   ${sw_hw_list}=              Get From Dictionary         ${ServerHWDict}     ${encl_name}
    \                   ${drive_list}=              Get From Dictionary         ${Drives_Dict}      ${encl_name}
    \                   Run keyword if              '${MaxFlag}'=='${MaxLJBOD}'
    \                   ...                         CREATE MULTIPLE SERVER PROFILES PER LI WITH MAX LJBODS
    ...                 ${sw_hw_list}               ${drive_list}               ${encl_name}        ${x}
    ...                 ELSE IF                     '${MaxFlag}'=='${MaxDrives}'
    ...                 CREATE MULTIPLE SERVER PROFILES PER LI LJBODS OF MAX DRIVES
    ...                 ${sw_hw_list}               ${drive_list}               ${encl_name}        ${x}

CREATE MULTIPLE SERVER PROFILES PER LI WITH MAX LJBODS
    [Documentation]     Keyword to Create SP with MAX LJBODS PER LI
    [Arguments]         ${sw_hw_list}   ${drive_list}   ${encl_name}    ${sp}

    ${sw_hw_uri}=   Get from List           ${sw_hw_list}   0
    POWER OFF SERVER HW MULTI ENCLOSURE     ${sw_hw_uri}

    ${resp}=                    Fusion Api Get Resource                 uri=${sw_hw_uri}
    ${serverHardwareTypeUri}=   get from dictionary                     ${resp}                 serverHardwareTypeUri
    ${SWHW_SerialNum}=          Get from Dictionary                     ${resp}                 serialNumber
    Set to dictionary           ${advancesppayload}                     serverHardwareUri       ${sw_hw_uri}
    Set to dictionary           ${advancesppayload}                     serverHardwareTypeUri   ${serverHardwareTypeUri}
    ${oneviewversion}=         DFRM Get Oneview Version
    Run Keyword IF              '${oneviewversion}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV10
    Run Keyword IF              '${oneviewversion}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV11
    Set to dictionary           ${advancesppayload}                     name
    ...                         SP_${encl_name}_${sp}_${SWHW_SerialNum}
    ${resp}=                    Fusion Api Get Resource                 uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary                     ${resp['members'][0]}   uri
    Set to dictionary           ${advancesppayload}                     enclosureGroupUri       ${EG_uri}
    ${localStorage}=            get from dictionary                     ${advancesppayload}     localStorage
    Set to dictionary           ${advancesppayload}                     localStorage            ${localStorage}
    Set to dictionary           ${advancesppayload['localStorage']}     sasLogicalJBODs         ${drive_list}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}                     param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}                     serverHardwareUri
    Remove From dictionary      ${advancesppayload}                     serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}                     enclosureGroupUri
    Remove From Dictionary      ${localStorage}                         sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    ${ljbod_len}=                   get length      ${drive_list}
    ${wait_time}=                   evaluate        ${ljbod_len}*90
    Wait Until Keyword Succeeds     ${wait_time}s   10s     Running State Again     ${spuri}
#   Wait Until Keyword Succeeds     7200s           10s     Running State Again     ${spuri}

CREATE MULTIPLE SERVER PROFILES PER LI LJBODS OF MAX DRIVES
    [Documentation]     Keyword to Create SP with MAX LJBODS PER LI
    [Arguments]         ${sw_hw_list}       ${drive_list}   ${encl_name}    ${sp}
    ${sw_hw_uri}=       Get from List       ${sw_hw_list}   0
    POWER OFF SERVER HW MULTI ENCLOSURE     ${sw_hw_uri}

CREATE MULTI ENCLOSURE SERVER PROFILE USING EXISTING LOGICAL JBOD
    [Documentation]     Keyword to Create Server Profile on a Ring frame
    [Arguments]         ${ServerHWDict}     ${LJBOD_Count}      ${flag}

    ${LI_resp}=     Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=      Get length                  ${LI_resp['members']}
    :FOR            ${x}                        IN RANGE                    0                   ${LI_len}
    \               ${encl_uri}=                Get from Dictionary         ${LI_resp['members'][${x}]}         enclosureUris
    \               ${LI_uri}=                  Get from Dictionary         ${LI_resp['members'][${x}]}         uri
    \               ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri[0]}
    \               ${encl_name}=               Get from Dictionary         ${encl_resp}        name
    \               ${sw_hw_list}=              Create List
    \               ${sw_hw_list}=              Get From Dictionary         ${ServerHWDict}     ${encl_name}
    \               ${ljbod_list}=              Create List
    \               GET SAS LOGICAL JBODS LIST FOR EACH LI                  ${LI_uri}           ${ljbod_list}
    \               ${drive_list}=              Create List
    \               ${payload}=                 CREATE LJBOD PAYLOAD USING EXISTING LJBODS      ${ljbod_list}   ${LJBOD_Count}
    \               ...                         ${drive_list}               ${flag}
    \               LOG                         ${sw_hw_list}
    \               Logger                      Creating SP
    \               CREATE SP PER LI WITH EXITING LJBOD                     ${sw_hw_list}       ${payload}      ${encl_name}

GET SAS LOGICAL JBODS LIST FOR EACH LI
    [Documentation]     Keyword to Get the list of SAS logical JBODS per Logical Interconnect
    [Arguments]         ${LI_uri}                   ${ljbod_list}
    ${ljbods_resp}=     Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${ljbods_len}=      Get Length                  ${ljbods_resp['members']}
    :FOR                ${ljbod}                    IN RANGE                0           ${ljbods_len}
    \                   ${ljbod_li_uri}=            Get from Dictionary     ${ljbods_resp['members'][${ljbod}]}
    \                   ...                         sasLogicalInterconnectUri
    \                   ${ljbod_uri}=               Get from Dictionary     ${ljbods_resp['members'][${ljbod}]}     uri
    \                   Run Keyword if              '${ljbod_li_uri}'=='${LI_uri}'      Append to List
    \                   ...                         ${ljbod_list}
    \                   ...                         ${ljbod_uri}
    ...                 ELSE                        Continue for loop

CREATE LJBOD PAYLOAD USING EXISTING LJBODS
    [Documentation]     Keyword to Create LJBOD PAYLOAD Using existing LJBODS PER LI
    [Arguments]         ${ljbod_list}   ${LJBOD_Count}      ${drive_list}   ${flag}

    ${ljbod_len}=       Get length              ${ljbod_list}
    Run Keyword if      '${ljbod_len}' < '${LJBOD_Count}'                   FAIL
    ...                 msg="Required No of LJBODs are not present"
    ${Temp_payload}=    create dictionary
    :FOR                ${cnt}                  IN RANGE                    0                       ${ljbod_len}
    \                   ${ljbod_paylod}=        Create dictionary
    \                   ${Drive_tech}=          set variable                0
    \                   ${ljbod_uri}=           Get from List               ${ljbod_list}           ${cnt}
    \                   ${ljbod_resp}=          Fusion Api Get Resource     uri=${ljbod_uri}
    \                   ${DriveInterface}=      set variable                ${ljbod_resp['driveTechnology']['deviceInterface']}
    \                   ${DriveMedia}=          set variable                ${ljbod_resp['driveTechnology']['driveMedia']}
    \                   ${Drive_tech}=          GET DRIVE TECNOLOGY FROM LJBOD RESPONSE             ${Drive_tech}
    \                   ...                     ${DriveInterface}
    \                   ...                     ${DriveMedia}
    \                   ${id}=                  Evaluate                    ${cnt} + ${addone}
    #                   \                       ${dev_slot}=                Get from Dictionary     ${ljbod_resp}   deviceSlot
    \                   ${name}=                Get from Dictionary         ${ljbod_resp}           name
    \                   ${num_disks}=           Get from Dictionary         ${ljbod_resp}           numPhysicalDrives
    \                   ${min_size}=            Get from Dictionary         ${ljbod_resp}           minSizeGB
    \                   ${max_size}=            Get from Dictionary         ${ljbod_resp}           maxSizeGB
    \                   ${ljbod_uri}=           Get from Dictionary         ${ljbod_resp}           uri

    \       Set to Dictionary   ${ljbod_paylod}                     id                  ${id}
    \       Set to Dictionary   ${ljbod_paylod}                     deviceSlot          ${formezz}
    \       Set to Dictionary   ${ljbod_paylod}                     name                ${name}
    \       Set to Dictionary   ${ljbod_paylod}                     numPhysicalDrives   ${num_disks}
    \       Set to Dictionary   ${ljbod_paylod}                     driveMinSizeGB      ${min_size}
    \       Set to Dictionary   ${ljbod_paylod}                     driveMaxSizeGB      ${max_size}
    \       Set to Dictionary   ${ljbod_paylod}                     driveTechnology     ${Drive_tech}
    \       Run keyword if      '${flag}'=='${ERASE_ENABLE}'        Set to Dictionary   ${ljbod_paylod}     eraseData       True
    ...     ELSE
    ...     Set to Dictionary   ${ljbod_paylod}                     eraseData           ${False}
    \       Run keyword if      '${flag}'=='${PERSIST_ENABLE}'      Set to Dictionary   ${ljbod_paylod}     persistent      True
    ...     ELSE
    ...     Set to Dictionary   ${ljbod_paylod}                     persistent          ${False}
    \       Set to Dictionary   ${ljbod_paylod}                     sasLogicalJBODUri   ${ljbod_uri}
    \       Set to Dictionary   ${ljbod_paylod}                     status              None
    \       Append to list      ${drive_list}                       ${ljbod_paylod}

    Set to Dictionary   ${Temp_payload}     ljbodpaylod     ${drive_list}

    [Return]    ${Temp_payload}

CREATE SP PER LI WITH EXITING LJBOD
    [Documentation]             SP creation
    [Arguments]                 ${sw_hw_list}               ${drive_list}           ${encl_name}
    ${SWHW_uri}=                Get from list               ${sw_hw_list}           0
    POWER OFF SERVER HW MULTI ENCLOSURE                     ${SWHW_uri}
    ${resp}=                    Fusion Api Get Resource     uri=${SWHW_uri}
    ${serverHardwareTypeUri}=   get from dictionary         ${resp}                 serverHardwareTypeUri
    ${SWHW_SerialNum}=          Get from Dictionary         ${resp}                 serialNumber
    Set to dictionary           ${advancesppayload}         serverHardwareUri       ${SWHW_uri}
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri   ${serverHardwareTypeUri}
    ${oneviewversion}=         DFRM Get Oneview Version
    Run Keyword IF              '${oneviewversion}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV10
    Run Keyword IF              '${oneviewversion}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}        type    ServerProfileV11
    Set to dictionary           ${advancesppayload}         name                    SP_${encl_name}_${SWHW_SerialNum}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary         ${resp['members'][0]}   uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri       ${EG_uri}
    ${localStorage}=            get from dictionary         ${advancesppayload}     localStorage
    Set to dictionary           ${advancesppayload}         localStorage            ${localStorage}
    ${dr_list}=                    Get from Dictionary         ${drive_list}           ljbodpaylod
    Set to dictionary           ${advancesppayload['localStorage']}                 sasLogicalJBODs     ${dr_list}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}         param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}         serverHardwareUri
    Remove From dictionary      ${advancesppayload}         serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}         enclosureGroupUri
    Remove From Dictionary      ${localStorage}             sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    Wait Until Keyword Succeeds     300s    10s     Running State Again     ${spuri}

GET DRIVE TECNOLOGY FROM LJBOD RESPONSE
    [Documentation]         To get drive technology
    [Arguments]             ${Drive_tech}           ${deviceInterfaces}             ${driveMedias}
    ${deviceInterface}=     Convert To Lowercase    ${deviceInterfaces}
    ${replacedstring}=      Remove String           ${deviceInterface}              s
    ${sasname}=             Run Keyword If          '${deviceInterface}'=='sas'     conversion to sas
    ...                     ELSE
    ...                     convert to sata
    ${drivemedia}=          Convert To Lowercase    ${drivemedias}
    ${replacedstrings}=     Remove String           ${drivemedia}                   h
    ${afterremovings}=      Remove String           ${drivemedia}                   s
    ${gettext}=             Run Keyword If          "${replacedstrings}"=="dd"      Convert It Into Hdd
    ...                     ${replacedstrings}
    ...                     ELSE
    ...                     Convert It Into Ssd
    ...                     ${afterremovings}
    ${Drive_tech}=          Catenate                SEPARATOR=                      ${sasname}      ${gettext}
    [Return]                ${Drive_tech}

MULTI ENCLOSURE EFUSE SAS INTERCONNECT
    [Documentation]     Efuse ICM command
    [Arguments]         ${Action}                   ${ICBay}
    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=          Get length                  ${LI_resp['members']}

    :FOR    ${x}                IN RANGE                        0               ${LI_len}
    \       ${encl_uri}=        Get from Dictionary             ${LI_resp['members'][${x}]}     enclosureUris
    \       ${enc_resp}=        Fusion Api Get Resource         uri=${encl_uri[0]}
    \       ${Serial_num}=      Get from Dictionary             ${enc_resp}     serialNumber
    \       MULTI ENCLOSURE EFUSE REQUIRED SAS INTERCONNECT     ${Action}       ${ICBay}        ${Serial_num}
    \       Run Keyword if      '${Action}'=='EFuseOff'         Sleep           300s
    \       Run Keyword if      '${Action}'=='EFuseOn'          Sleep           60s

MULTI ENCLOSURE EFUSE REQUIRED SAS INTERCONNECT
    [Documentation]     Efuse ICM command
    [Arguments]         ${Action}   ${ICBay}    ${Enc_Serial_num}

    SSHLibrary.Open Connection      ${FUSION_IP}
    ${login}    SSHLibrary.Login    root    hpvse1
    ${EM1}      SSHLibrary.Execute Command
    ...         /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enc_Serial_num}

    ${EM}       catenate    SEPARATOR=      ${EM1}%bond0
    ${EMN}=     Catenate    SEPARATOR=      [           ${EM}
    ${EMNEW}=   CATENATE    SEPARATOR=      ${EMN}      ]

    ${XAUTH}                SSHLibrary.Execute Command
    ...                     /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${Enc_Serial_num} -o t
    ${efuse_operation}      SSHLibrary.Execute Command
    ...                     curl -ks -H"X-Auth-Token:${XAUTH}" -X POST https://${EMNEW}/rest/v1/InterconnectBays/${ICBay} -d '{"Action":"${Action}"}'

# ----- Chandra changes after 11/16/2018
CREATE SP WITH LJBOD AND MULTI MEZZ CARD FOR PROFILE MOBILITY
    [Documentation]     Keyword to Create Server Profile on a Ring frame with Selection of Mezzanine Cards and Server
    ...                 Hardware Combination, If ${Multi_Mezz_Card}=True, LJBODS created on each Mezz card for SP
    ...                 else                ${Multi_Mezz_Card}=Fasle    LJBODs created on all Mezz card and server hardware
    [Arguments]         ${ServerHWDict}     ${Drives_Dict}              ${LJBOD_Count}      ${Multi_Mezz_Card}

    ${LI_resp}=     Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=      Get length                  ${LI_resp['members']}
    ${SP_Count}=    set variable                2
    :FOR            ${x}                        IN RANGE                        0                   ${LI_len}
    \               ${encl_uri}=                Get from Dictionary             ${LI_resp['members'][${x}]}
    \               ...                         enclosureUris
    \               ${encl_resp}=               Fusion Api Get Resource         uri=${encl_uri[0]}
    \               ${encl_name}=               Get from Dictionary             ${encl_resp}        name
    \               ${sw_hw_list}=              Create List
    \               ${sw_hw_list}=              Get From Dictionary             ${ServerHWDict}     ${encl_name}
    \               ${drive_list}=              Get From Dictionary             ${Drives_Dict}      ${encl_name}
    \               LOG                         ${sw_hw_list}
    \               LOG                         ${drive_list}
    \               ${temp_sw_hw-List}=         Create List
    \               GET SERVER HARDWARE LIST WITH MULTI MEZZ CARDS              ${sw_hw_list}       ${temp_sw_hw-List}
    \               ...                         ${INDENTICAL_SW_HW}
    \               ${Len_sw_hw}=               Get Length                      ${temp_sw_hw-List}
    \               Run Keyword if              '${Len_sw_hw}'<'2'              continue for loop
    \               Run Keyword If              '${Multi_Mezz_Card}'=='True'
    ...             CREATE TWO SERVER PROFILE WITH LJBOD ON MULTI MEZZ CARD     ${SP_Count}         ${temp_sw_hw-List}
    ...             ${drive_list}
    ...             ${encl_name}

CREATE TWO SERVER PROFILE WITH LJBOD ON MULTI MEZZ CARD
    [Documentation]     Keyword to Create Two Server Profile with Server Hardware having atleast 2 Smart Array mezz cards
    ...                 LJBODS created on each Mezz cards >=2
    [Arguments]         ${SP_Count}                 ${sw_hw_list}                   ${drive_list}   ${encl_name}
    :FOR                ${sp}                       IN RANGE                        0               ${SP_Count}
    \                   ${Mezz_device_num_list}=    Create List
    \                   ${sw_hw_uri}=               Get from List                   ${sw_hw_list}   ${sp}
    \                   ${drive_payload}=           Create Dictionary
    \                   GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE    ${sw_hw_uri}    ${Mezz_device_num_list}
    \                   ${mezz_length}=             Get Length                      ${Mezz_device_num_list}
    \                   Run Keyword If              '${mezz_length}'>='2'           CREATE LJBOD PAYLOAD FOR EACH MEZZ CARD
    \                   ...                         ${drive_list}
    ...                 ${Mezz_device_num_list}     ${drive_payload}
    ...                 ELSE                        continue for loop
    \                   CREATE SERVER PROFILE WITH MEZZ CARD                        ${sw_hw_uri}    ${drive_payload}
    \                   ...                         ${encl_name}
    \                   ...                         ${sp}

GET SERVER HARDWARE LIST WITH MULTI MEZZ CARDS
    [Documentation]     Keyword to Create Multiple Server Profile with Server Hardware having atleast 2 Smart Array mezz cards
    ...                 LJBODS created on each Mezz cards >=2
    [Arguments]         ${sw_hw_list}   ${temp_sw_hw-List}      ${flag}

    ${sw_len}=          Get Length                  ${sw_hw_list}
    :FOR                ${sp}                       IN RANGE                        0                   ${sw_len}
    \                   ${Mezz_device_num_list}=    Create List
    \                   ${sw_hw_uri}=               Get from List                   ${sw_hw_list}       ${sp}
    \                   GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE    ${sw_hw_uri}
    \                   ...                         ${Mezz_device_num_list}
    \                   ${mezz_length}=             Get Length                      ${Mezz_device_num_list}
    \                   Run Keyword If              '${mezz_length}'>='2'           Append to list      ${temp_sw_hw-List}
    \                   ...                         ${sw_hw_uri}
    ...                 ELSE                        continue for loop
    ${temp_sw_len}=     get length                  ${temp_sw_hw-List}
    # Run Keyword if    '${temp_sw_len}'<'2'        FAIL
    #...                 msg="Min 2 server hardware with multiple smart array mezz cards not found"
    ${final_list}=      Create List
    Run Keyword if      '${flag}'=='${INDENTICAL_SW_HW}'
    ...                 GET TWO IDENTICAL SERVER HARDWWARE                          ${final_list}       ${temp_sw_hw-List}
    ...                 ${temp_sw_len}

GET TWO IDENTICAL SERVER HARDWWARE
    [Documentation]     Keyword to get two Identical server hardware from a given list
    [Arguments]         ${final_list}   ${temp_sw_hw-List}      ${temp_sw_len}

    :FOR                ${sw}                   IN RANGE                    0                       ${temp_sw_len}
    \                   ${sw_uri}=              Get from list               ${temp_sw_hw-List}      ${sw}
    \                   ${resp}=                Fusion Api Get Resource     uri=${sw_uri}
    \                   ${model}=               Get from Dictionary         ${resp}                 model
    \                   LOOP INNER LOOP         ${sw_uri}                   ${sw}                   ${model}
    \                   ...                     ${temp_sw_hw-List}
    \                   ...                     ${final_list}
    \                   ...                     ${temp_sw_len}
    ${final_len}=       get length              ${final_list}
    Run Keyword if      '${final_len}'<'2'      FAIL
    ...                 msg='Two identical server hardware are not available in system"
    :FOR                ${sw}                   IN RANGE                    0                       ${temp_sw_len}
    \                   Remove from list        ${temp_sw_hw-List}          ${sw}

    :FOR    ${sw}               IN RANGE                0               ${final_len}
    \       ${fin_uri}=         Get from list           ${final_list}   ${sw}
    \       Append to List      ${temp_sw_hw-List}      ${sw}

LOOP INNER LOOP
    [Documentation]     Inner loop
    [Arguments]         ${sw_uri}           ${sw}                       ${model}                ${temp_sw_hw-List}
    ...                 ${final_list}
    ...                 ${temp_sw_len}
    :FOR                ${yw}               IN RANGE                    0                       ${temp_sw_len}
    \                   run keyword if      '${yw}'=='${sw}'            continue for loop
    \                   ${sw_uri_iloop}=    Get from list               ${temp_sw_hw-List}      ${sw}
    \                   ${resp_iloop}=      Fusion Api Get Resource     uri=${sw_uri_iloop}
    \                   ${model_iloop}=     Get from Dictionary         ${resp_iloop}           model
    \                   Run Keyword if      '${model} '!='${model_iloop}'                       continue for loop
    \                   Run keyword if      '${model} '=='${model_iloop}'                       Append to list
    \                   ...                 ${final_list}
    \                   ...                 ${sw_uri}
    \                   Run keyword if      '${model} '=='${model_iloop}'                       Append to list
    \                   ...                 ${final_list}
    \                   ...                 ${sw_uri_iloop}

GET SERVER FULL HEIGHT SERVER HARDWARE LIST
    [Documentation]     Keyword to get the list of full hieght server hardware      with required number of smart array mezz
    ...                 cards from test setup
    [Arguments]         ${sw_hw_list}   ${temp_sw_hw-List}                          ${Mezz_count}   ${flag}

    ${sw_len}=          Get Length                  ${sw_hw_list}
    :FOR                ${sp}                       IN RANGE                        0               ${sw_len}
    \                   ${Mezz_device_num_list}=    Create List
    \                   ${sw_hw_uri}=               Get from List                   ${sw_hw_list}   ${sp}
    \                   ${full_height_flag}=        CHECK IF SERVER IS FULL HIEGHT                  ${sw_hw_uri}
    \                   Run Keyword If              '${full_height_flag}'!='1'      continue for loop
    \                   GET ALL SMART ARRAY MEZZ CARD PRESENT IN SERVER HARDWARE    ${sw_hw_uri}    ${Mezz_device_num_list}
    \                   ${mezz_length}=             Get Length                      ${Mezz_device_num_list}
    \                   Run Keyword If              '${mezz_length}'>='${Mezz_count}'               Append to list
    \                   ...                         ${temp_sw_hw-List}
    \                   ...                         ${sw_hw_uri}
    ...                 ELSE                        continue for loop
    ${temp_sw_len}=     get length                  ${temp_sw_hw-List}
    ${final_list}=      Create List
    Run Keyword if      '${flag}'=='${INDENTICAL_SW_HW}'
    ...                 GET TWO IDENTICAL SERVER HARDWWARE                          ${final_list}   ${temp_sw_hw-List}
    ...                 ${temp_sw_len}

CHECK IF SERVER IS FULL HIEGHT
    [Documentation]     Keyword to verify if server hardware is full height or not
    [Arguments]         ${sw_hw_uri}
    ${temp_flag}=       Set variable                0
    ${sw_resp}=         Fusion Api Get Resource     uri=${sw_hw_uri}
    ${farm_factor}=     Get from Dictionary         ${sw_resp}                          formFactor
    ${temp_flag}=       run keyword if              '${farm_factor}'=='FullHeight'      Set Variable    1
    [return]            ${temp_flag}

CREATE SP ON FULL HEIGHT SERVER FOR PROFILE MOBILITY
    [Documentation]     Keyword to Create Server Profile on a Ring frame, using full height server and smart array mezz
    ...                 else                ${Multi_Mezz_Card}=Fasle    LJBODs created on all Mezz card and server hardware
    [Arguments]         ${ServerHWDict}     ${Drives_Dict}              ${LJBOD_Count}      ${Multi_Mezz_Card}

    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=          Get length                  ${LI_resp['members']}
    ${SP_Count}=        set variable                2
    ${Mezz_count}=      Run Keyword If              '${Multi_Mezz_Card}'=='True'    Set Variable        2
    ...                 ELSE                        Set Variable                    1
    :FOR                ${x}                        IN RANGE                        0                   ${LI_len}
    \                   ${encl_uri}=                Get from Dictionary             ${LI_resp['members'][${x}]}
    \                   ...                         enclosureUris
    \                   ${encl_resp}=               Fusion Api Get Resource         uri=${encl_uri[0]}
    \                   ${encl_name}=               Get from Dictionary             ${encl_resp}        name
    \                   ${sw_hw_list}=              Create List
    \                   ${sw_hw_list}=              Get From Dictionary             ${ServerHWDict}     ${encl_name}
    \                   ${drive_list}=              Get From Dictionary             ${Drives_Dict}      ${encl_name}
    \                   LOG                         ${sw_hw_list}
    \                   LOG                         ${drive_list}
    \                   ${temp_sw_hw-List}=         Create List
    \                   GET SERVER FULL HEIGHT SERVER HARDWARE LIST                 ${sw_hw_list}       ${temp_sw_hw-List}
    ...                 ${Mezz_count}               ${INDENTICAL_SW_HW}
    \                   ${Len_sw_hw}=               Get Length                      ${temp_sw_hw-List}
    \                   Run Keyword if              '${Len_sw_hw}'=='0'
    ...                 FAIL                        msg="Zero Full height Server Hardware found with Smart Array Mezzanine card"
    \                   Run Keyword if              '${Mezz_count}'=='1'
    ...                 CREATE MULTIPLE SERVER PROFILES PER LI                      ${SP_Count}         ${temp_sw_hw-List}
    ...                 ${drive_list}
    ...                 ${encl_name}
    \                   Run Keyword if              '${Len_sw_hw}'>='2'
    ...                 CREATE TWO SERVER PROFILE WITH LJBOD ON MULTI MEZZ CARD     ${Mezz_count}
    ...                 ${temp_sw_hw-List}
    ...                 ${drive_list}               ${encl_name}
    ...                 ELSE                        FAIL
    ...                 msg="Enclosure doesn't have 2 full height server with 2 smart array mezz cards"

PERFORM MULTI ENCLLOSURE PROFILE MOBILITY
    [Documentation]     Keyword to perform Profile Mobility on a multi enclosure platform.. i.e.
    ...                 unassign server hardware from server profiles and assign server hardware vice versa
    [Arguments]         ${ServerHWDict}
    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_len}=          Get length                  ${LI_resp['members']}
    :FOR                ${x}                        IN RANGE                    0                   ${LI_len}
    \                   ${encl_uri}=                Get from Dictionary         ${LI_resp['members'][${x}]}
    \                   ...                         enclosureUris
    \                   ${encl_resp}=               Fusion Api Get Resource     uri=${encl_uri[0]}
    \                   ${encl_name}=               Get from Dictionary         ${encl_resp}        name
    \                   ${sw_hw_list}=              Create List
    \                   ${sw_hw_list}=              Get From Dictionary         ${ServerHWDict}     ${encl_name}
    \                   ${temp_sw_list}=            create list
    \                   ${sp_uri_list}=             Create List
    \                   GET SERVER LIST FROM SERVER PROFILE                     ${temp_sw_list}     ${sw_hw_list}
    \                   MULTI ENCL UNASSIGN SERVER HARDWARE FROM EACH SP        ${temp_sw_list}     ${sp_uri_list}
    \                   MULTI ENCL REASSIGN DIFF SERVER HARDWARE TO EACH SP     ${temp_sw_list}     ${sp_uri_list}
    \                   ...                         ${encl_uri}

GET SERVER LIST FROM SERVER PROFILE
    [Documentation]     Keyword to get server uri list per enclosure assigned to server profiles
    [Arguments]         ${temp_sw_list}     ${sw_hw_list}
    ${sw_len}=          Get Length          ${sw_hw_list}
    :FOR                ${sw}               IN RANGE                        0                   ${sw_len}
    \                   ${sw_uri}=          Get from List                   ${sw_hw_list}       ${sw}
    \                   ${sw_resp}=         Fusion Api Get Resource         uri=${sw_uri}
    \                   ${state}=           Get from Dictionary             ${sw_resp}          state
    \                   Run Keyword if      '${state}'=='NoProfileApplied'                      continue for loop
    \                   Run Keyword if      '${state}'=='ProfileApplied'    Append to List      ${temp_sw_list}     ${sw_uri}

MULTI ENCL UNASSIGN SERVER HARDWARE FROM EACH SP
    [Documentation]     Keyword to unassign server hardware from server profile.
    [Arguments]         ${temp_sw_list}     ${sp_uri_list}
    ${sw_len}=          Get Length          ${temp_sw_list}
    :FOR                ${swhw}             IN RANGE                    0                   ${sw_len}
    \                   ${sw_uri}=          Get from List               ${temp_sw_list}     ${swhw}
    \                   ${sw_resp}=         Fusion Api Get Resource     uri=${sw_uri}
    \                   ${sp_uri}=          Get from Dictionary         ${sw_resp}          serverProfileUri
    \                   Append to List      ${sp_uri_list}              ${sp_uri}
    \                   UNASSIGN SERVER HARDWARE FROM SP                ${sp_uri}

MULTI ENCL REASSIGN DIFF SERVER HARDWARE TO EACH SP
    [Documentation]     Keyword to re-assign different server hardware to each server profile.
    [Arguments]         ${temp_sw_list}     ${sp_uri_list}      ${encl_uri}

    ${sp_uri}=                          Get from List   ${sp_uri_list}      0
    ${swhw_uri}=                        Get from List   ${temp_sw_list}     ${sw_hw_2_index}
    RE-ASSIGN SERVER HARDWARE TO SP     ${sp_uri}       ${swhw_uri}         ${encl_uri}
    ${sp_uri}=                          Get from List   ${sp_uri_list}      1
    ${swhw_uri}=                        Get from List   ${temp_sw_list}     ${sw_hw_1_index}
    RE-ASSIGN SERVER HARDWARE TO SP     ${sp_uri}       ${swhw_uri}         ${encl_uri}

UNASSIGN SERVER HARDWARE FROM SP
    [Documentation]             Edit Server Profile and Unassign Server Hardware from SP.
    [Arguments]                 ${sp_uri}                   ${api}=${None}              ${headers}=${None}      ${api}=${None}
    ${resp}=                    Fusion Api Get Resource     uri=${sp_uri}
    ${eTag}=                    get from dictionary         ${resp}                     eTag
    ${uri}=                     get from dictionary         ${resp}                     uri
    ${serverhardwareuri}=       get from dictionary         ${resp}                     serverHardwareUri
    ${serverhardwaretypeuri}=   get from dictionary         ${resp}                     serverHardwareTypeUri
    ${name}=                    get from dictionary         ${resp}                     name
    ${enclosurebay}=            get from dictionary         ${resp}                     enclosureBay
    ${serialNumber}=            get from dictionary         ${resp}                     serialNumber
    ${uuid}=                    get from dictionary         ${resp}                     uuid
    ${scopeuri}=                get from dictionary         ${resp}                     scopesUri
    ${localStorage}=            get from dictionary         ${resp}                     localStorage
    ${EG_resp}=                 Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary         ${EG_resp['members'][0]}    uri
    Set to dictionary           ${unassignedhw}             scopesUri                   ${scopeuri}
    Set to dictionary           ${unassignedhw}             enclosureGroupUri           ${EG_uri}
    Set to dictionary           ${unassignedhw}             uuid                        ${uuid}
    Set to dictionary           ${unassignedhw}             serialNumber                ${serialNumber}
    Set to dictionary           ${unassignedhw}             enclosureUri                ${check}
    Set to dictionary           ${unassignedhw}             name                        ${name}
    Set to dictionary           ${unassignedhw}             eTag                        ${eTag}
    Set to dictionary           ${unassignedhw}             uri                         ${uri}
    Set to dictionary           ${unassignedhw}             serverHardwareUri           ${check}
    Set to dictionary           ${unassignedhw}             serverHardwareTypeUri       ${serverhardwaretypeuri}
    Set to dictionary           ${unassignedhw}             enclosureBay                ${check}
    Set to dictionary           ${unassignedhw}             localStorage                ${localStorage}
    ${onevieversion}=           DFRM Get Oneview Version
    Run Keyword IF              '${onevieversion}' == '4.20'
    ...                         Set to Dictionary                   ${unassignedhw}     type    ServerProfileV10
    Run Keyword IF              '${onevieversion}' == '5.00'
    ...                         Set to Dictionary                   ${unassignedhw}     type    ServerProfileV11
    ${resps} =                  Fusion Api Edit Server Profile                          body=${unassignedhw}    uri=${uri}
    ...                         api=${api}
    ...                         headers=${headers}
    ...                         param=?force=ignoreServerHealth
    ${headers}=                 Get From Dictionary         ${resps}                    headers
    ${spuri}=                   Get From Dictionary         ${headers}                  Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

RE-ASSIGN SERVER HARDWARE TO SP
    [Documentation]             Keyword to Re-assign different server hardware again to server profile
    [Arguments]                 ${sp_uri}                   ${swhw_uri}     ${encl_uri}     ${headers}=${None}
    ...                         ${api}=${None}
    ${sp_resp}=                 Fusion Api Get Resource     uri=${sp_uri}
    ${swhw_resp}=               Fusion Api Get Resource     uri=${swhw_uri}
    ${name}=                    get from dictionary         ${swhw_resp}    name
    ${enclosureBay}=            Get Substring               ${name}         16
    ${serverHardwareTypeUri}=   get from dictionary         ${swhw_resp}    serverHardwareTypeUri

    Remove from dictionary      ${sp_resp}              enclosureUri
    Remove From Dictionary      ${sp_resp}              enclosureBay
    Remove From Dictionary      ${sp_resp}              enclosureHardwareUri
    Remove From Dictionary      ${sp_resp}              serverHardwareUri
    Remove From dictionary      ${sp_resp}              status_code
    Remove From Dictionary      ${sp_resp}              headers
    Remove From Dictionary      ${sp_resp}              serverHardwareTypeUri
    Set to dictionary           ${sp_resp}              enclosureUri            ${encl_uri}
    Set to dictionary           ${sp_resp}              enclosureBay            ${enclosureBay}
    Set to dictionary           ${sp_resp}              serverHardwareUri       ${swhw_uri}
    Set to dictionary           ${sp_resp}              serverHardwareTypeUri   ${serverHardwareTypeUri}
    Power off Specific Server Hardware                  ${swhw_uri}
    Sleep                       15s
    ${resps} =                  Fusion Api Edit Server Profile                  body=${sp_resp}     uri=${sp_uri}   api=${api}
    ...                         headers=${headers}
    ...                         param=?force=ignoreServerHealth
    ${headers}=                 Get From Dictionary     ${resps}                headers
    ${spuri}=                   Get From Dictionary     ${headers}              Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

#########------------------------ Changes for Logical Drive (RAID) SP

MultiEnclosure Get Two Similar disks from list
    [Documentation]         RG Keyword to extract two similar disks from list per enclosure
    [Arguments]             ${drive_list}
    ${len}=                 Get Length              ${drive_list}
    # ${drive_type_dict}=   create dictionary
    # CREATE DICTIONARY OF DRIVES TYPE PER ENCLOSURE LIST                   ${drive_list}           ${drive_type_dict}
    ${temp_drive_list}=     Create List
    ${temp_drive_list}=     set variable            ${drive_list}
    :FOR                    ${x}                    IN RANGE                0                       ${len}
    \                       ${valueoflist}=         Get From List           ${drive_list}           ${x}
    \                       ${driveMinSize}=        Get From Dictionary     ${valueoflist}          driveMinSizeGB
    \                       ${driveTechnology}=     Get From Dictionary     ${valueoflist}          driveTechnology
    \                       ${l}=                   MultiEnclosure comparing with other list values     ${temp_drive_list}
    ...                     ${driveMinSize}         ${x}                    ${driveTechnology}      ${len}
    \                       Run Keyword If          ${l}==1                 Exit For Loop
    ${m}=                   Run Keyword If          ${l}==1                 returningdiskwithsametype   ${x}
    [Return]                ${m}

MultiEnclosure comparing with other list values
    [Documentation]     This is to compare with the other disks
    [Arguments]         ${temp_drive_list}      ${drivesize}            ${n}                    ${drivetech}    ${length}
    :FOR                ${x_cnt}                IN RANGE                ${n}+1                  ${length}
    \                   ${valueoflist}=         Get From List           ${temp_drive_list}      ${x_cnt}
    \                   ${driveMinSize}=        Get From Dictionary     ${valueoflist}          driveMinSizeGB
    \                   ${driveTechnology}=     Get From Dictionary     ${valueoflist}          driveTechnology
    \                   ${f}=                   Run Keyword If
    \                   ...                     ${driveMinSize} == ${drivesize} and "${driveTechnology}" =="${drivetech}"
    \                   ...                     raiseone
    \                   Run Keyword If          ${f}==1                 Exit For Loop

    ${ii}=      Run Keyword If      ${f}==1     raiseone
    [Return]    ${ii}

CREATE SERVER PROFILES WITH LOGICAL DRIVE PER LI
    [Documentation]         Keyword to Create           Server Profile with Logical Drive based on Server Profile Count argument
    [Arguments]             ${SP_Count}                 ${sw_hw_list}   ${drive_list}           ${encl_name}
    ${temp_sw_hw-List}=     Create List
    GET SERVER HARDWARE LIST WITH MULTI MEZZ CARDS      ${sw_hw_list}   ${temp_sw_hw-List}      false
    :FOR                    ${sp}                       IN RANGE        0                       ${SP_Count}
    \                       ${sw_hw_uri}=               Get from List   ${temp_sw_hw-List}      ${sp}
    \                       ${ret_value}=               MultiEnclosure Get Two Similar disks from list          ${drive_list}
    \                       ${drive_paylod}=            Get From List   ${drive_list}           ${ret_value}
    \                       CREATE SERVER PROFILE WITH LOGICAL DRIVES RAID FOR RING FRAME       ${sw_hw_uri}    ${drive_paylod}
    ...                     ${encl_name}                ${sp}

CREATE SERVER PROFILE WITH LOGICAL DRIVES RAID FOR RING FRAME
    [Documentation]             Keyword to create Server Profile with Logical Drives (RAID) per LI on a RIng Frame
    [Arguments]                 ${SWHW_uri}                     ${drive_paylod}         ${encl_name}        ${sp}
    POWER OFF SERVER HW MULTI ENCLOSURE                         ${SWHW_uri}
    ${resp}=                    Fusion Api Get Resource         uri=${SWHW_uri}
    ${serverHardwareTypeUri}=   get from dictionary             ${resp}                 serverHardwareTypeUri
    ${SWHW_SerialNum}=          Get from Dictionary             ${resp}                 serialNumber
    ${SW_HW_GEN}=               get from dictionary             ${resp}                 generation
    Set to dictionary           ${sppayloadforlogicaldrives}    serverHardwareUri       ${SWHW_uri}
    Set to dictionary           ${sppayloadforlogicaldrives}    serverHardwareTypeUri   ${serverHardwareTypeUri}
    ${oneviewversion}=         DFRM Get Oneview Version
    Run Keyword IF              '${oneviewversion}' == '4.20'
    ...                         Set to Dictionary           ${sppayloadforlogicaldrives}   type    ServerProfileV10
    Run Keyword IF              '${oneviewversion}' == '5.00'
    ...                         Set to Dictionary           ${sppayloadforlogicaldrives}   type    ServerProfileV11
    Set to dictionary           ${sppayloadforlogicaldrives}    name                    SP_${encl_name}_${sp}_${SWHW_SerialNum}
    ${resp}=                    Fusion Api Get Resource         uri=/rest/enclosure-groups
    ${EG_uri}=                  get from dictionary             ${resp['members'][0]}   uri
    Set to dictionary           ${sppayloadforlogicaldrives}    enclosureGroupUri       ${EG_uri}
    ${localStorage}=            get from dictionary             ${sppayloadforlogicaldrives}                localStorage
    Set to dictionary           ${sppayloadforlogicaldrives}    localStorage            ${localStorage}
    ${localStorage['sasLogicalJBODs']}=                         Append To List          ${localStorage['sasLogicalJBODs']}
    ...                         ${drive_paylod}
    Set to dictionary           ${localStorage['sasLogicalJBODs'][0]}                   name
    ...                         ljbod_${SWHW_SerialNum}_${sp}
    Set to dictionary           ${localStorage['sasLogicalJBODs'][0]}                   id                  ${addone}
    Set to dictionary           ${localStorage['sasLogicalJBODs'][0]}                   numPhysicalDrives   ${RAID_PHY_DRIVE}
    Run Keyword If              '${SW_HW_GEN}'=='Gen10'
    ...                         Set To Dictionary               ${localStorage['controllers'][0]}           mode
    ...                         Mixed
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${sppayloadforlogicaldrives}    param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${sppayloadforlogicaldrives}    serverHardwareUri
    Remove From dictionary      ${sppayloadforlogicaldrives}    serverHardwareTypeUri
    Remove From dictionary      ${sppayloadforlogicaldrives}    enclosureGroupUri
    Remove From Dictionary      ${localStorage}                 sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=                     Get From Dictionary     ${resp}         headers
    ${spuri}=                       Get From Dictionary     ${headers}      Location
    ${ljbod_len}=                   get length              ${drive_paylod}
    ${wait_time}=                   evaluate                ${ljbod_len}*90
    Wait Until Keyword Succeeds     ${wait_time}s           10s             Running State Again     ${spuri}

