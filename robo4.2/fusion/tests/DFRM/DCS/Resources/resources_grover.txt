*** Settings ***
Library     RoboGalaxyLibrary
Library     FusionLibrary
Library     Collections
Library     String
Library     OperatingSystem
Library     RoboGalaxyLibrary
Library     BuiltIn
Library     SSHLibrary
Library     ../UserInputs/functions.py
Variables   ../UserInputs/variables_grover.py
Variables   ../UserInputs/variables.py
Resource    resources.txt
#from robot.libraries.DateTime import Date, Time


*** Keywords ***

GET ICM LIST FROM ENCLOSURE
    [Documentation]     To get all ICM's present in all Enclosures.
    [Arguments]         ${sas_icm_type}             ${icm_list}
    ${encl_resp}=       Fusion API Get Resource     uri=/rest/enclosures
    ${encl_length}=     Get Length                  ${encl_resp['members']}
    :FOR                ${encl}                     IN RANGE                0               ${encl_length}
    \                   ${encl_uri}=                Get From Dictionary     ${encl_resp['members'][${encl}]}    uri
    \                   Log                         ${encl_uri}             console=true
    \                   GET ICM PER ENCLOSURE       ${encl_uri}             ${icm_list}     ${sas_icm_type}

VALIDATE ICM PRODUCT NAME AND PART NUMBER
    [Documentation]     Keyword to validate ICM Product name and ICM Part number
    [Arguments]         ${icm_list}             ${prod_name}    ${part_no}      ${sas_icm_type}
    ${icm_count}=       Get Length             ${icm_list}
    Run Keyword if      '${icm_count}'=='0'    FAIL            msg=${sas_icm_type} is not found in system.

    :FOR    ${icm}                  IN RANGE                    0   ${icm_count}
    \       ${icm_resp}=            Fusion API Get Resource     uri=${icm_list[${icm}]}
    \       ${locationentries}=     Get from dictionary         ${icm_resp['interconnectLocation']}     locationEntries

    # Validatng Product Name
    \       ${product_name}=    Get From Dictionary     ${icm_resp}     productName
    \       Run Keyword IF      '${product_name}' != '${prod_name}'
    ...     FAIL                msg= ICM at the location ${locationentries} has invalid Product name.

    # Validating Part Number
    \       ${part_number}=     Get From Dictionary     ${icm_resp}     partNumber
    \       Run Keyword IF      '${part_number}' != '${part_no}'
    ...     FAIL                msg= ICM at location ${locationentries} has invalid Part number.

GET ICM PER ENCLOSURE
    [Documentation]     Keyword to get Interconnect per enclosure
    [Arguments]         ${encl_uri}                 ${icm_list}             ${sas_icm_type}
    ${per_encl_resp}=   Fusion API Get Resource     uri=${encl_uri}
    ${icm_count}=       Get Length                  ${per_encl_resp['interconnectBays']}
    :FOR                ${icm}                      IN RANGE                0   ${icm_count}
    \                   ${icm_model}=               Get From Dictionary     ${per_encl_resp['interconnectBays'][${icm}]}
    ...                 interconnectModel
    \                   ${icm_uri}=                 Get From Dictionary     ${per_encl_resp['interconnectBays'][${icm}]}
    ...                 interconnectUri
    \                   Run Keyword IF              '${icm_model}' == '${sas_icm_type}'
    ...                 Append to list              ${icm_list}             ${icm_uri}
    [Return]            ${icm_list}

VALIDATE ICM STATUS
    [Documentation]     To check if SAS interconnects are in good state
    [Arguments]         ${icm_list}             ${sas_icm_type}
    ${icm_number}=      Get Length              ${icm_list}
    Run Keyword if      '${icm_number}'=='0'    FAIL                        msg=${sas_icm_type} ICM not found in system.
    :FOR                ${icm}                  IN RANGE                    0                   ${icm_number}
    \                   ${icm_response}=        Fusion API Get Resource     uri=${icm_list[${icm}]}
    \                   ${icm_stat}=            Get From Dictionary         ${icm_response}     status
    \                   Run Keyword IF          '${icm_stat}' != 'OK'
    ...                 FAIL                    msg=ICM not in good state. Please bring ICM's to good state and re run the script.

VALIDATE BIG BIRD STATUS
    [Documentation]     To check if drive enclosure is in good state
    ${de_response}=     Fusion API Get Resource     uri=/rest/drive-enclosures
    ${de_length}=       Get Length                  ${de_response['members']}
    :FOR                ${de}                       IN RANGE                    0   ${de_length}
    \                   ${de_status}=               Get from Dictionary         ${de_response['members'][${de}]}    status
    \                   Run Keyword IF              '${de_status}' != 'OK'      FAIL
    ...                 msg=Drive enclosure is not in good state. Please bring DE to good state and re run the script.

VALIDATE ICM STATE
    [Documentation]     To check if SAS interconnects are in required state after specific configurations
    [Arguments]         ${icm_list}
    ${icm_number}=      Get Length              ${icm_list}
    Run Keyword if      '${icm_number}'=='0'    FAIL                        msg=ICM not found in system.
    :FOR                ${icm}                  IN RANGE                    0                   ${icm_number}
    \                   ${icm_response}=        Fusion API Get Resource     uri=${icm_list[${icm}]}
    \                   ${icm_state}=           Get From Dictionary         ${icm_response}     state
    \                   Run Keyword IF          '${icm_state}' != 'Monitored'
    ...                 FAIL                    msg=ICM not in expected state.

CREATION OF SINGLE DOMAIN SAS LIG BAY4
    [Documentation]             Creating Single Domain Grover LIG in bay 4
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/enclosures
    ${response}=                Fusion Api Create Sas Lig                       ${GROVER_SINGLEDOMAINBAY4_LIG_PAYLOAD}
    ${respurii}                 Get From Dictionary         ${response}         uri
    Wait Until Keyword Succeeds                             1200s               5s                      Running State Again
    ...                         ${respurii}

