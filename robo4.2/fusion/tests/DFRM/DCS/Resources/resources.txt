*** Settings ***
Library     RoboGalaxyLibrary
Library     FusionLibrary
Library     Collections
Library     String
Library     OperatingSystem
Library     RoboGalaxyLibrary
Library     BuiltIn
Library     SSHLibrary
Library     ../UserInputs/functions.py
Variables   ../UserInputs/variables.py
Resource    ../../../../Resources/api/fusion_api_resource.txt
#from robot.libraries.DateTime import Date, Time


*** Keywords ***
Login to Fusion Via REST
    [Documentation]     Connects to the Appliance and creates a session using the Username and Password.
    ...                 Example : \n| Login to Fusion Via REST | 10.0.12.106 | Administrator | hpvse123 |

    ${admin_credentials} =      Create Dictionary       userName=${FUSION_ADMIN_LOGIN}      password=${FUSION_ADMIN_PASSWORD}
    Logger                      The appliance is ${FUSION_IP}
    Logger                      Credentials are ${admin_credentials}                        DEBUG
    ${Response}                 ${SessionId}            Fusion Api Login Appliance          ${FUSION_IP}    ${admin_credentials}
    #Log to console             ${Response}
    ${Status}                   Get From Dictionary     ${Response}                         status_code
    Return From Keyword If      '${Status}' == '200'    ${Response}
    ${errorCode}                Get From Dictionary     ${Response}                         errorCode
    ${message}                  Get From Dictionary     ${Response}                         message
    Fatal Error                 msg=Invalid response returned ${Status} ${errorCode} ${message}
    Logger                      Successfully Logged into Fusion.

Logout from fusion via REST
    [Documentation]     Log out from the session
    ${resp}             Fusion Api Logout Appliance
    Logger              ${resp}     DEBUG

Logger
    [Documentation]     Logs the messages for particular level mentioned. Eg: Logger *messages      DEBUG
    ...                 | Now supporting INFO and DEBUG
    [Arguments]         ${message}              ${Arg_log}=None
    Run Keyword If      '${Arg_log}'=='None'    Log to console                  ${message}
    Run Keyword If      '${Arg_log}'=='DEBUG' and '${loggerlevel}'=='DEBUG'     Log to console      ${message}

###########################################UI keywords##################################################################

Open Browser and Login
    [Documentation]     Opens the Browser and Logs in Hp Oneview
    Set Log Level       TRACE
    Logger              The appliance is ${FUSION_IP}
    Logger              The ip is ${FUSION_IP} and browser ${BROWSER}   DEBUG
    Open Browser        https://${FUSION_IP}/   ${BROWSER}
    Sleep               5
    LoginGUI

LoginGUI
    [Documentation]     this is to login the gui

    Input Text      id=hp-login-user        ${FUSION_ADMIN_LOGIN}
    Input Text      id=hp-login-password    ${FUSION_ADMIN_PASSWORD}
    Click Button    hp-login-button
    Sleep           3

Append the LIG xml output to a file
    [Documentation]     Appending LIG combinations output to a xml file
    [Arguments]         ${EG_count}             ${Ligs_list}
    Create File         ${CURDIR}/../UserInputs/EGdata.xml          <data><Eggrp>
    ${LIGS_LENGTH}=     Get Length              ${Ligs_list}
    :FOR                ${eachLig}              IN RANGE            0                   ${LIGS_LENGTH}
    \                   Logger                  The lig list ${Ligs_list[${eachLig}]}   DEBUG
    \                   ${final_Ligs_list} =    Convert to list     ${Ligs_list[${eachLig}]}
    \                   ${Bay_list} =           Get Bay List        ${final_Ligs_list}
    \                   Logger                  The lig list is ${final_Ligs_list}
    \                   Logger                  The bay list is ${Bay_list}
    \                   ${EgName}=              catenate            RGEG${EG_count}${eachLig}
    \                   Logger                  EGname ${EgName}
    \                   ${LigXml}=              CreateEgXML         ${EgName}           ${final_Ligs_list}      ${Bay_list}
    \                   Append To File          ${CURDIR}/../UserInputs/EGdata.xml      ${LigXml}
    Append To File      ${CURDIR}/../UserInputs/EGdata.xml          </Eggrp></data>
    Sleep               2

Get Bay List
    [Documentation]     This is to create bay list
    [Arguments]         ${bay_lig_list}
    ${baylistno} =      Create List
    ${LIG_LENGTH} =     Get Length          ${bay_lig_list}
    :FOR                ${j}                IN RANGE                    0               ${LIG_LENGTH}
    \                   ${bay_no} =         Get Logical Interconnect Group Bay          ${bay_lig_list[${j}]}
    \                   Logger              the bay no is ${bay_no}     DEBUG
    #\                  ${baylistno} =      Create List                 ${baylistno}    ${bay_no}
    \                   Append To List      ${baylistno}                ${bay_no}
    Logger              The final baylist is ${baylistno}               DEBUG
    [Return]            ${baylistno}

###########################################End of UI keyword############################################################

##########################################Start of LIG Keywords##########################################################
Get Logical Interconnect Group Uri
    [Documentation]     Return a Logical Interconnect Groups' Uri by Name
    [Arguments]         ${Name}
    ${resp}             Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    #Validate URI for the response                  ${resp}
    #log to console     ${resp}
    ${length} =         Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                        0   ${length}
    \                   ${resp_name}                Get From Dictionary             ${resp['members'][${x}]}    name
    \                   ${resp_uri}                 Get From Dictionary             ${resp['members'][${x}]}    uri
    \                   return from Keyword If      '${Name}' == '${resp_name}'     ${resp_uri}

Get Logical Interconnect Group Bay
    [Documentation]     Return a Logical Interconnect Groups' bay by Name
    [Arguments]         ${Name}
    ${resp}             Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    #Validate URI for the response                  ${resp}
    ${length} =         Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                        0           ${length}
    \                   ${resp_name}                Get From Dictionary             ${resp['members'][${x}]}    name
    \                   ${bay_length} =             Get Length
    \                   ...                         ${resp['members'][${x}]['interconnectMapTemplate']['interconnectMapEntryTemplates']}
    \                   ${bay_list}=                Bay loop                        ${resp}     ${bay_length}   ${x}
    \                   Return from keyword if      '${Name}' == '${resp_name}'     ${bay_list}

Bay loop
    [Documentation]     Return a list of bay for each LIG
    [Arguments]         ${resp}     ${bay_length}   ${memb_count}

    ${bay_list} =           Create List
    :FOR                    ${x}                IN RANGE            0                       ${bay_length}
    \                       ${bay_expr}=        Set Variable
    \                       ...                 ${resp['members'][${memb_count}]['interconnectMapTemplate']['interconnectMapEntryTemplates'][${x}]['logicalLocation']['locationEntries'][0]['type']}
    \                       ${bay_val}=         Set Variable If     "${bay_expr}"=="Bay"    0   1
    \                       ${resp_uri_bay}     Get From Dictionary
    \                       ...                 ${resp['members'][${memb_count}]['interconnectMapTemplate']['interconnectMapEntryTemplates'][${x}]['logicalLocation']['locationEntries'][${bay_val}]}
    \                       ...                 relativeValue
    \                       Append to list      ${bay_list}         ${resp_uri_bay}
    return from keyword     ${bay_list}

Create LIG
    [Documentation]         Build json payload to Add new Enclosure Group
    [Arguments]             ${LIG_Name}                 ${BAY_LIST}
    Logger                  Creating LIG : ${LIG_Name}
    ${Lig_Payload}          Build LIG Payload           ${LIG_Name}     ${BAY_LIST}
    ${resp} =               Fusion Api Create SAS Lig   ${Lig_Payload}
    Sleep                   3s
    Validating task URI     ${resp}                     ${task_create_status}
    Logger                  The response is ${resp}     DEBUG

Build LIG Payload
    [Documentation]     Build json payload to Add new Enclosure Group
    [Arguments]         ${LIG_Name}     ${BAY_LIST}

    ${InterconnectMapEntryTemplatesList}    Build Interconnect Map Entry Templates List     ${BAY_LIST}
    ${InterconnectMapTemplate}              Create Dictionary
    ...                 interconnectMapEntryTemplates=${InterconnectMapEntryTemplatesList}
    ${enclosureType}    Create List         ${1}

    ${LIG}      Create Dictionary   type=sas-logical-interconnect-group
    ...         name=${LIG_Name}
    ...         interconnectMapTemplate=${InterconnectMapTemplate}
    ...         state=Active
    ...         enclosureIndexes=${enclosureType}
    ...         enclosureType=SY12000
    ...         interconnectBaySet=1
    Logger      *********${LIG}     DEBUG
    [Return]    ${LIG}

Build Interconnect Map Entry Templates List
    [Documentation]     For internal use only.
    [Arguments]         ${BAY_LIST}
    ${InterconnectMapEntryTemplatesList}    Create List
    : FOR               ${Index}            IN              @{BAY_LIST}
    \                   ${InterconnectMapEntryTemplate}     Build Interconnect Map Entry Template   ${Index}
    \                   Append To List      ${InterconnectMapEntryTemplatesList}
    \                   ...                 ${InterconnectMapEntryTemplate}
    [Return]            ${InterconnectMapEntryTemplatesList}

Build Interconnect Map Entry Template
    [Documentation]             For internal use only.
    [Arguments]                 ${BayNumber}
    ${Enclosure}                Create Dictionary   relativeValue=1
    ...                         type=Enclosure
    ${Bay}                      Create Dictionary   relativeValue=${BayNumber}
    ...                         type=Bay
    ${locationEntriesList}      Create List         ${Enclosure}        ${Bay}
    ${logicalLocation}          Create Dictionary   locationEntries=${locationEntriesList}
    ${interconnectMapEntryTemplate}                 Create Dictionary   enclosureIndex=1
    ...                         logicalLocation=${logicalLocation}
    ...                         permittedInterconnectTypeUri=${permittedInterconnectTypeUri}

    [Return]    ${interconnectMapEntryTemplate}

Create LIG with bay combinations
    [Documentation]     Creates LIG with according to bay
    [Arguments]         ${LIG_LIST}
    ${Lig_Length}=      Get Length      ${LIG_LIST}
    :FOR                ${bay}          IN RANGE                0               ${Lig_Length}
    \                   Run keyword and continue on Failure     Create LIG      ${LIG_LIST[${bay}]}     ${bay_list[${bay}]}

Delete LIG from a list
    [Documentation]     Deletes Ligs from a given list
    [Arguments]         ${LIG_LIST}
    :FOR                ${lig}                  IN              @{LIG_LIST}
    \                   Log To Console          Deleting ${lig}
    \                   ${lig_uri}              Get Logical Interconnect Group Uri      ${lig}
    \                   Logger                  ${lig_uri}      DEBUG
    \                   Run keyword and continue on Failure     Delete LIG from URI     ${lig_uri}
    #\                  Validating task URI     ${resp}         ${Delete_LIG_Status}    uri

Delete LIG from URI
    [Documentation]                 this is the lig from uri
    [Arguments]                     ${lig_uri}
    ${resp}=                        Fusion Api Delete Lig   uri=${lig_uri}
    Logger                          ${resp}                 DEBUG
    Wait Until Keyword Succeeds     30 sec                  2 sec                   Validate computedPercentComplete    ${resp}
    Validating task URI             ${resp}                 ${Delete_LIG_Status}    uri

Get Logical Interconnect Group
    [Documentation]     Return a Logical Interconnect Group by Name
    [Arguments]         ${Name}
    ${LogicalInterconnectGroupCollection}       Fusion Api Get Enclosure Groups
    ...                 filter="'name'='${Name}'"
    ${Count}            Get From Dictionary     ${LogicalInterconnectGroupCollection}   count
    Should Be Equal As Numbers                  ${Count}        1                       msg=Cant find lig named ${Name}
    ${Members}          Get From Dictionary     ${LogicalInterconnectGroupCollection}   members
    ${Lig}              Get From List           ${Members}      0
    ${LigName}          Get From Dictionary     ${Lig}          name
    Should Be Equal As Strings                  ${Name}         ${LigName}
    [Return]            ${Lig}

Verify sas_Interconnects
    [Documentation]     Verify sas-interconnect through rest
    [Arguments]         ${sas_interconnect_list}
    ${length} =         Get Length                  ${sas_interconnect_list}
    :FOR                ${x}                        IN RANGE        0               ${length}
    \                   ${sasInterconnectUri}=      Set Variable    ${sas_interconnect_list[${x}]}
    \                   Logger                      \n Validating for ${sasInterconnectUri}
    \                   ${resp2}=                   Fusion Api Get Resource         uri=${sasInterconnectUri}
    \                   Validate resource attribute                 status_code     ${sasInterconnectUri}   ${resp2}    200
    \                   Validate resource attribute                 state           ${sasInterconnectUri}   ${resp2}
######################################End of LIG Keywords#######################################################################

######################################Start of EG Keywords######################################################################
Get Enclosure Group Uri
    [Documentation]     Return a Enclosure Groups' Uri by Name
    [Arguments]         ${Name}
    ${resp}             Fusion Api Get Resource     uri=/rest/enclosure-groups
    Validate URI for the response                   ${resp}
    #log to console     ^^^^^${resp}
    ${length} =         Get Length                  ${resp['members']}
    #log to console     *****${length}
    :FOR                ${x}                        IN RANGE                        0   ${length}
    \                   ${resp_name}                Get From Dictionary             ${resp['members'][${x}]}    name
    \                   ${resp_uri}                 Get From Dictionary             ${resp['members'][${x}]}    uri
    \                   return from Keyword If      '${Name}' == '${resp_name}'     ${resp_uri}

Build EG Payload
    [Documentation]     Build json payload to Add new Enclosure Group
    [Arguments]         ${EG_Name}      ${LIG_ENC_LIST}

    ${InterconnectBayMappings}=                     Create List
    ${enclosure_count}=     Get Length              ${LIG_ENC_LIST}
    ${x}=                   Create List
    :FOR                    ${each_enclosure}       IN RANGE                0                       ${enclosure_count}
    \                       ${LIG_NAME}=            Set Variable            ${LIG_ENC_LIST[${each_enclosure}]}
    \                       ${LIG_uri}=             Get Logical Interconnect Group Uri              ${LIG_NAME}
    \                       ${interconnect_bay}=    Get Logical Interconnect Group Bay              ${LIG_NAME}
    \                       ${enclosure_index}=     Evaluate                ${each_enclosure}+1
    \                       ${InterconnectBay}=     Create EG Bay Payload   ${enclosure_index}      ${LIG_uri}
    \                       ...                     ${interconnect_bay}
    \                       ${InterconnectBayMappings}=                     Combine Lists           ${InterconnectBayMappings}
    \                       ...                     ${InterconnectBay}
    # Create Dictionary Structure
    ${EnclosureGroups}      Create Dictionary       type=EnclosureGroupV300
    ...                     name=${EG_Name}
    ...                     stackingMode=Enclosure
    ...                     interconnectBayMappings=${InterconnectBayMappings}
    ...                     interconnectBayMappingCount=6
    ...                     ipAddressingMode=External
    ...                     enclosureCount=${enclosure_count}
    ...                     enclosureTypeUri="/rest/enclosure-types/SY12000"
    Logger                  *********${EnclosureGroups}                     DEBUG
    [Return]                ${EnclosureGroups}

Create EG Bay Payload
    [Documentation]     Build json payload to Add new Enclosure Group
    [Arguments]         ${EnclosureIndex}   ${LIG_Uri}      ${Interconnect_Bay_Index}

    ${InterconnectBayMappings}=     Create List

    ${InterconnectBay}=     Create Dictionary
    :FOR                    ${bay}                  IN                  @{Interconnect_Bay_Index}
    \                       ${InterconnectBay}=     Create Dictionary   interconnectBay=${bay}
    \                       ...                     logicalInterconnectGroupUri=${LIG_Uri}
    \                       ...                     enclosureIndex=${EnclosureIndex}
    \                       Append To List          ${InterconnectBayMappings}      ${InterconnectBay}
    Return From Keyword     ${InterconnectBayMappings}

Create Enclosure Group
    [Documentation]     Creates a new Enclosure Group
    [Arguments]         ${Name}     ${LIG_NAME_List}

    # Build Payload
    ${EnclosureGroups}=     Build EG Payload            ${Name}                     ${LIG_NAME_List}
    # Add Enclosure Groups
    ${Response}=            Fusion API Create Enclosure Group                       ${EnclosureGroups}
    Logger                  ^^^^^^^^${Response}         DEBUG
    Validate resource attribute                         status_code                 ${Name}     ${Response}
    ${EG_uri}=              get from dictionary         ${Response}                 uri
    Logger                  ${EG_uri}
    ${resp}                 Fusion Api Get Resource     uri=${EG_uri}
    logger                  ${resp}
    Validate resource attribute                         status_code                 ${EG_uri}   ${resp}
    Run Keyword And Continue On Failure                 validating content on uri   ${resp}     state
    ...                     Normal
    Run Keyword And Continue On Failure                 validating content on uri   ${resp}     status      OK
    Run Keyword And Continue On Failure                 validating content on uri   ${resp}     ipAddressingMode
    ...                     External
    Run Keyword And Continue On Failure                 validating content on uri   ${resp}     powerMode
    ...                     RedundantPowerFeed
    Run Keyword And Continue On Failure                 validating content on uri   ${resp}     stackingMode
    ...                     Enclosure

validating content on uri
    [Documentation]     validate the contents on uri
    [Arguments]         ${resp}                         ${yourinput}    ${myexpected}
    ${name} =           get from dictionary             ${resp}         ${yourinput}
    logger              ${name}
    run keyword if      '${name}' != '${myexpected}'    Fail
    ...                 msg=Detail found is ${name} and my expected is ${myexpected}

    #Validate resource attribute    name                        ${Name}         ${Response}     ${Name}
    #${LIG_resp}                    Fusion Api Get Resource     uri=${LIG_uri}
    #Log to console                 Validation for ${LIG_uri}
    #Validate resource attribute    status_code                 ${LIG_uri}      ${Response}

######################################END of EG Keywords########################################################################

######################################Start of LE Keywords######################################################################

Build Logical Enclosure Payload
    [Documentation]     Build json payload to Add new Logical Enclosure
    [Arguments]         ${Name}     ${EG_NAME}

    ${EG_uri}=              Get Enclosure Group Uri     ${EG_NAME}
    #${interconnect_bay}=   Get Logical Interconnect Group Bay      ${LIG_NAME}
    # Create InterconnectBayMappings Dictionary
    ${enclosureUris}=       Create List                 /rest/enclosures/0000000000A66101   /rest/enclosures/0000000000A66102
    ...                     /rest/enclosures/0000000000A66103

    # Create Dictionary Structure
    ${LogicalEnclosure}     Create Dictionary   name=${Name}
    ...                     enclosureGroupUri=${EG_uri}
    ...                     enclosureUris=${enclosureUris}
    [Return]                ${LogicalEnclosure}

Build sas logical jbod Payload
    [Documentation]     Build json payload to Add new sas logical jbod
    [Arguments]         ${jbod_Name}    ${sasLogicalInterconnectUri}    ${DriveType}    ${LJbodmaxSizeGB}

    ${driveTechnology_dict}=    Create drive technology Dict    ${DriveType}

    ${sas_logical_jbod}     Create Dictionary   name=${jbod_Name}
    ...                     type=${sasLogicalJbodType}
    ...                     numPhysicalDrives=${num_Jbod_Drives}
    ...                     minSizeGB=${LJbodminSizeGB}
    ...                     maxSizeGB=${LJbodmaxSizeGB}
    ...                     clearMetaData=false
    ...                     driveTechnology=${driveTechnology_dict}
    ...                     sasLogicalInterconnectUri= ${sasLogicalInterconnectUri}
    [Return]                ${sas_logical_jbod}

Create Logical Enclosure
    [Documentation]     Creates a new Enclosure Group
    [Arguments]         ${Name}     ${EG_NAME}

    # Build Payload
    ${LogicalEnclosure}=    Build Logical Enclosure Payload     ${Name}     ${EG_NAME}
    Log to console          ***${LogicalEnclosure}

    # Add Enclosure Groups
    ${Response}=    Fusion Api Create Logical Enclosure     ${LogicalEnclosure}

    Log to console      ${Response}

    #Get LIG and EG Uris by Name
    #${LIG_uri}=    Get Logical Interconnect Group Uri      ${LIG_NAME}
    #${EG_uri}=     Get From Dictionary                     ${Response}     uri
    #Validation of EG and LIG

    #Log to console                 Validation for ${EG_uri}
    #Validate resource attribute    status_code                 ${Name}         ${Response}     201
    #Validate resource attribute    uri                         ${EG_uri}       ${Response}
    #Validate resource attribute    status                      ${EG_uri}       ${Response}     OK
    #Validate resource attribute    name                        ${Name}         ${Response}     ${Name}
    #${LIG_resp}                    Fusion Api Get Resource     uri=${LIG_uri}
    #Log to console                 Validation for ${LIG_uri}
    #Validate resource attribute    status_code                 ${LIG_uri}      ${Response}     201

Create LJbod per LI
    [Documentation]     Verify sas-interconnect through rest
    [Arguments]         ${num}      ${AvailDriveTypesandSizeDict}   ${sasLIUri}

    ${x}=                   Set Variable            ${0}
    ${items}=               Get Dictionary Values   ${AvailDriveTypesandSizeDict}
    ${items_len}=           Get Length              ${items}
    ${actualLJbodsNum}=     Set Variable            ${0}
    :FOR                    ${var}                  IN RANGE                0               ${items_len}
    \                       ${actualLJbodsNum}=     Evaluate
    \                       ...                     ${actualLJbodsNum}+${items[${var}][${1}]}/${num_Jbod_Drives}
    Logger                  Total Num of jbods can be created are ${actualLJbodsNum}
    Run Keyword If          ${sasLJbodNumPerLI} > ${actualLJbodsNum}        Fail
    ...                     ${actualLJbodsNum} LJbods can only be created for ${sasLIUri}, Please verify sasLJbodNumPerLI and num_Jbod_Drives in variables.py
    ${DriveTypes}=          Get Dictionary items    ${AvailDriveTypesandSizeDict}
    ${finalDriveTypesList}=                         Create List
    :FOR                    ${key}                  ${value}                IN              @{DriveTypes}
    \                       ${jbod_len}=            Evaluate                ${value[${1}]}/${num_Jbod_Drives}
    \                       ${DriveType}=           Set Variable            ${key}
    \                       ${tempList}=            Create DriveType List   ${DriveType}    ${jbod_len}
    \                       ${finalDriveTypesList}=                         Combine Lists   ${finalDriveTypesList}
    \                       ...                     ${tempList}
    :FOR                    ${i}                    IN RANGE                0               ${sasLJbodNumPerLI}
    \                       Logger                  Creating LJbod TestLJbod${num}${i}
    \                       ${MaxSize}=             Get Max Size of DriveType               ${AvailDriveTypesandSizeDict}
    \                       ...                     ${finalDriveTypesList[${i}]}
    \                       Logger                  ^^^^^^enclosure${i}^^^^^^^${finalDriveTypesList[${i}]}:${MaxSize}
    \                       ...                     DEBUG
    \                       ${sas_ljbod_Payload}=   Build sas logical jbod Payload          TestJbod${num}${i}      ${sasLIUri}
    \                       ...                     ${finalDriveTypesList[${i}]}
    \                       ...                     ${MaxSize}
    \                       Logger                  &&Payload:${sas_ljbod_Payload}          DEBUG
    \                       ${ljbodoutresp}=        Fusion Api Create Sas Logical Jbod      ${sas_ljbod_Payload}
    \                       Logger                  **Resp:${ljbodoutresp}                  DEBUG
    \                       Validate resource attribute                     status_code     TestLJbod${num}${i}
    \                       ...                     ${ljbodoutresp}
    \                       ...                     200
    \                       Wait Until Keyword Succeeds                     4 min           15 sec
    \                       ...                     Validate computedPercentComplete
    \                       ...                     ${ljbodoutresp}
    \                       Validating task URI     ${ljbodoutresp}         ${sasLJbod_task_create_status}          uri

Build ServerProfile Payload
    [Documentation]             Create ServerProfile Payload
    [Arguments]                 ${SP_Name}          ${ServerHardwareUri}
    ${controllers}=             Create List
    ${overriddenSettings}=      Create List
    ${connections}=             Create List
    #${Null}=                   Set Variable        null
    ${sasLogicalJBODsDict}      Create Dictionary   id=${1}
    ...                         deviceSlot=Mezz 1
    ...                         name=SAS-ljbod-009
    ...                         numPhysicalDrives=${2}
    ...                         driveMinSizeGB=${10}
    ...                         driveMaxSizeGB=${600}
    ...                         driveTechnology=SasHdd
    ...                         sasLogicalJBODUri=${null}
    ${sasLogicalJBODs}=         Create List         ${sasLogicalJBODsDict}
    ${localStorage}             Create Dictionary   sasLogicalJBODs=${sasLogicalJBODs}
    ...                         controllers=${controllers}
    ${bios}                     Create Dictionary   manageBios=false
    ...                         overriddenSettings=${overriddenSettings}
    ${firmware}                 Create Dictionary   manageFirmware=false
    ...                         firmwareBaselineUri=
    ...                         forceInstallFirmware=false
    ...                         firmwareInstallType=${null}
    ${bootMode}                 Create Dictionary   manageMode=false
    ${SPpayload}                Create Dictionary   name=${SP_Name}
    ...                         type=${serverProfileType}
    ...                         serverHardwareUri=${serverHardwareUri}
    ...                         serverHardwareTypeUri=
    ...                         enclosureGroupUri=
    ...                         serialNumberType=Virtual
    ...                         iscsiInitiatorNameType=AutoGenerated
    ...                         macType=Virtual
    ...                         wwnType=Virtual
    ...                         description=
    ...                         affinity=Bay
    ...                         connections=${connections}
    ...                         boot=${null}
    ...                         sanStorage=${null}
    ...                         hideUnusedFlexNics=true
    ...                         iscsiInitiatorName=
    ...                         osDeploymentSettings=${null}
    ...                         localStorage=${localStorage}
    ...                         bios=${bios}
    ...                         bootMode=${bootMode}
    ...                         firmware=${firmware}
    ...
    [Return]                    ${SPpayload}

Get Available Drives For LI
    [Documentation]         Get the Available Drives for Logial Interconnect
    [Arguments]             ${sasLIUri}
    ${sasLIResp}=           Fusion Api Get Resource                         uri=${sasLIUri}
    #Logger                 ******sasliresp: ${sasLIResp}
    ${SASHDDDrivecapacity}=                     Create List
    ${SASSSDDrivecapacity}=                     Create List
    ${SATAHDDDrivecapacity}=                    Create List
    ${SATASSDDrivecapacity}=                    Create List
    ${Drives_dict}=         Create Dictionary
    ${driveEnclosureLen}=   Get Length          ${sasLIResp['driveEnclosureUris']}
    ${TotalavailDriveLen}=                      Set Variable                ${0}
    :FOR                    ${eachDriveEnc}     IN RANGE                    0               ${driveEnclosureLen}
    \                       ${driveEncResp}=    Fusion Api Get Resource
    \                       ...                 uri=${sasLIResp['driveEnclosureUris'][${eachDriveEnc}]}
    \                       ${Drives_len}=      Get Length                  ${driveEncResp['driveBays']}
    \                       ${availDriveLen}=   Get Available Drives per Drive Enclosure    ${driveEncResp}
    \                       ${SASHDDDrivecapacity}=                         Combine Lists   ${SASHDDDrivecapacity}
    \                       ...                 ${availDriveLen[${0}]}
    \                       ${SASSSDDrivecapacity}=                         Combine Lists   ${SASSSDDrivecapacity}
    \                       ...                 ${availDriveLen[${1}]}
    \                       ${SATAHDDDrivecapacity}=                        Combine Lists   ${SATAHDDDrivecapacity}
    \                       ...                 ${availDriveLen[${2}]}
    \                       ${SATASSDDrivecapacity}=                        Combine Lists   ${SATASSDDrivecapacity}
    \                       ...                 ${availDriveLen[${3}]}
    ${maxSASHDDDriveCapacity}=                  Get Max Value in the List   ${SASHDDDrivecapacity}
    ${maxSASSSDDriveCapacity}=                  Get Max Value in the List   ${SASSSDDrivecapacity}
    ${maxSATAHDDDriveCapacity}=                 Get Max Value in the List   ${SATAHDDDrivecapacity}
    ${maxSATASSDDriveCapacity}=                 Get Max Value in the List   ${SATASSDDrivecapacity}
    Remove Values From List                     ${SASHDDDrivecapacity}      ${0}
    Remove Values From List                     ${SASSSDDrivecapacity}      ${0}
    Remove Values From List                     ${SATAHDDDrivecapacity}     ${0}
    Remove Values From List                     ${SATASSDDrivecapacity}     ${0}
    ${SASHDDcount}=         Run Keyword If      ${maxSASHDDDriveCapacity}!=${0}             Get Length
    ...                     ${SASHDDDrivecapacity}
    ...                     ELSE                Set Variable                ${0}
    ${SASSSDcount}=         Run Keyword If      ${maxSASSSDDriveCapacity}!=${0}             Get Length
    ...                     ${SASSSDDrivecapacity}
    ...                     ELSE                Set Variable                ${0}
    ${SATAHDDcount}=        Run Keyword If      ${maxSATAHDDDriveCapacity}!=${0}            Get Length
    ...                     ${SATAHDDDrivecapacity}
    ...                     ELSE                Set Variable                ${0}
    ${SATASSDcount}=        Run Keyword If      ${maxSATASSDDriveCapacity}!=${0}            Get Length
    ...                     ${SATASSDDrivecapacity}
    ...                     ELSE                Set Variable                ${0}
    ${SASHDDmaxSizeCountList}=                  Create List                 ${maxSASHDDDriveCapacity}
    ...                     ${SASHDDcount}
    ${SASSSDmaxSizeCountList}=                  Create List                 ${maxSASSSDDriveCapacity}
    ...                     ${SASSSDcount}
    ${SATAHDDmaxSizeCountList}=                 Create List                 ${maxSATAHDDDriveCapacity}
    ...                     ${SATAHDDcount}
    ${SATASSDmaxSizeCountList}=                 Create List                 ${maxSATASSDDriveCapacity}
    ...                     ${SATASSDcount}

    Run Keyword If      ${SASHDDcount} != 0         Set To Dictionary   ${Drives_dict}      SASHDD=${SASHDDmaxSizeCountList}
    Run Keyword If      ${SASSSDcount} != 0         Set To Dictionary   ${Drives_dict}      SASSSD=${SASSSDmaxSizeCountList}
    Run Keyword If      ${SATAHDDcount} != 0        Set To Dictionary   ${Drives_dict}      SATAHDD=${SATAHDDmaxSizeCountList}
    Run Keyword If      ${SATASSDcount} != 0        Set To Dictionary   ${Drives_dict}      SATASSD=${SATASSDmaxSizeCountList}
    Logger              Dictionary:${Drives_dict}   Debug
    [Return]            ${Drives_dict}

Get Available Drives per Drive Enclosure
    [Documentation]         Get the Available Drives for Logial Interconnect
    [Arguments]             ${driveEncResp}
    ${TotalSASHDDcount}=    Set Variable        ${0}
    ${TotalSASSSDcount}=    Set Variable        ${0}
    ${TotalSATAHDDcount}=   Set Variable        ${0}
    ${TotalSATASSDcount}=   Set Variable        ${0}
    ${SAS_HDD_size_list}=   Create List
    ${SAS_SSD_size_list}=   Create List
    ${SATA_HDD_size_list}=                      Create List
    ${SATA_SSD_size_list}=                      Create List
    ${SATA_HDD_size_list}=                      Create List
    ${Drives_len}=          Get Length          ${driveEncResp['driveBays']}
    :FOR                    ${s}                IN RANGE                0                       ${Drives_len}
    \                       ${model}=           Get From Dictionary     ${driveEncResp['driveBays'][${s}]}      model
    \                       ${SASHDDsize}=      Run Keyword If          "${model}" != 'None'    Get Drive Size
    \                       ...                 ${driveEncResp['driveBays'][${s}]}
    \                       ...                 HDD
    \                       ...                 SAS
    \                       ...                 ELSE                    Set Variable            ${0}
    \                       ${SASSSDsize}=      Run Keyword If          "${model}" != 'None'    Get Drive Size
    \                       ...                 ${driveEncResp['driveBays'][${s}]}
    \                       ...                 SSD
    \                       ...                 SAS
    \                       ...                 ELSE                    Set Variable            ${0}
    \                       ${SATAHDDsize}=     Run Keyword If          "${model}" != 'None'    Get Drive Size
    \                       ...                 ${driveEncResp['driveBays'][${s}]}
    \                       ...                 HDD
    \                       ...                 SATA
    \                       ...                 ELSE                    Set Variable            ${0}
    \                       ${SATASSDsize}=     Run Keyword If          "${model}" != 'None'    Get Drive Size
    \                       ...                 ${driveEncResp['driveBays'][${s}]}
    \                       ...                 SSD
    \                       ...                 SATA
    \                       ...                 ELSE                    Set Variable            ${0}
    \                       Append to List      ${SAS_HDD_size_list}    ${SASHDDsize}
    \                       Append to List      ${SAS_SSD_size_list}    ${SASSSDsize}
    \                       Append to List      ${SATA_HDD_size_list}   ${SATAHDDsize}
    \                       Append to List      ${SATA_SSD_size_list}   ${SATASSDsize}

    [Return]    ${SAS_HDD_size_list}    ${SAS_SSD_size_list}    ${SATA_HDD_size_list}   ${SATA_SSD_size_list}

Get Drive Size
    [Documentation]         Get the Available Drives for Logial Interconnect
    [Arguments]             ${availableDriveBay}    ${Media}                        ${Interface}
    #Logger                 *******${availableDriveBay}
    #${driveMedia}=         Get from Dictionary     ${availableDriveBay['drive']['driveType']}      driveMedia
    ${driveMedia}=          Get from Dictionary     ${availableDriveBay['drive']}   driveMedia
    #${deviceInterface}=    Get from Dictionary     ${availableDriveBay['drive']['driveType']}      deviceInterface
    ${deviceInterface}=     Get from Dictionary     ${availableDriveBay['drive']}   deviceInterface
    ${SASHDDCapacity}=      Run Keyword If          "${driveMedia}" == '${Media}' and "${deviceInterface}" == '${Interface}'
    ...                     Get from Dictionary
    ...                     ${availableDriveBay['drive']}
    ...                     capacity
    ...                     ELSE                    Set Variable                    ${0}
    [Return]                ${SASHDDCapacity}

Get Max Value in the List
    [Documentation]     Return the Maximum value in the list
    [Arguments]         ${List}
    ${length}=          Get Length      ${List}
    ${max}=             Set Variable    ${List[${0}]}
    :FOR                ${x}            IN RANGE            0   ${length}
    \                   ${max}=         Set Variable If     ${List[${x}]} > ${max}      ${List[${x}]}   ${max}
    [Return]            ${max}

Create DriveType List
    [Documentation]     Create Drive Technology Dictionary with deviceInterface and DriveType
    [Arguments]         ${type}             ${len}
    ${DriveList}=       Create List
    :FOR                ${x}                IN RANGE        0   ${len}
    \                   Append To List      ${DriveList}    ${type}
    [Return]            ${DriveList}

Get Max Size of DriveType
    [Documentation]             Get the max size of the drive type from the given dictionary
    [Arguments]                 ${AvailDriveTypesandSizeDict}   ${type}
    Return From Keyword If      '${type}'=='SASHDD'             ${AvailDriveTypesandSizeDict['${type}'][0]}
    Return From Keyword If      '${type}'=='SASSSD'             ${AvailDriveTypesandSizeDict['${type}'][0]}
    Return From Keyword If      '${type}'=='SATAHDD'            ${AvailDriveTypesandSizeDict['${type}'][0]}
    Return From Keyword If      '${type}'=='SATASSD'            ${AvailDriveTypesandSizeDict['${type}'][0]}

Create drive technology Dict
    [Documentation]     Create Drive Technology Dictionary with deviceInterface and DriveType
    [Arguments]         ${DriveType}

    ${driveTechnology_dict}=    Create Dictionary

    Run Keyword If      '${DriveType}' == 'SASHDD'      Set To Dictionary   ${driveTechnology_dict}     deviceInterface=${0}
    ...                 driveMedia=${0}
    Run Keyword If      '${DriveType}' == 'SASSSD'      Set To Dictionary   ${driveTechnology_dict}     deviceInterface=${0}
    ...                 driveMedia=${1}
    Run Keyword If      '${DriveType}' == 'SATAHDD'     Set To Dictionary   ${driveTechnology_dict}     deviceInterface=${1}
    ...                 driveMedia=${0}
    Run Keyword If      '${DriveType}' == 'SATASSD'     Set To Dictionary   ${driveTechnology_dict}     deviceInterface=${1}
    ...                 driveMedia=${1}

    [Return]    ${driveTechnology_dict}

Create enclosure Jbod dictionary
    [Documentation]     Get the response of the Logical Enclosure and validate the creation of Logical Interconnects \n
    ${encResp}=         Fusion Api Get Resource     uri=${enclosure_uri}
    ${encLength}=       Get Length                  ${encResp['members']}
    ${encJBoddict}=     Create Dictionary
    :FOR                ${enc}                      IN RANGE                        0   ${encLength}
    \                   ${LJbodListName}=           Get LJbods of an enclosure      ${encResp['members'][${enc}]['uri']}
    \                   Set to Dictionary           ${encJBoddict}
    \                   ...                         ${encResp['members'][${enc}]['uri']}=${LJbodListName}
    [return]            ${encJBoddict}

Create enclosure ServerProfiles dictionary
    [Documentation]     Get the response of the Logical Enclosure and validate the creation of Logical Interconnects \n
    ${encResp}=         Fusion Api Get Resource     uri=${enclosure_uri}
    ${encLength}=       Get Length                  ${encResp['members']}
    ${encspdict}=       Create Dictionary
    :FOR                ${enc}                      IN RANGE        0                       ${encLength}
    \                   ${SPListName}=              Get ServerProfiles of an enclosure      ${encResp['members'][${enc}]['uri']}
    \                   Set to Dictionary           ${encspdict}    ${encResp['members'][${enc}]['uri']}=${SPListName}
    [return]            ${encspdict}

Get ServerProfiles of an enclosure
    [Documentation]         Get the response of the Logical Enclosure and validate the creation of Logical Interconnects \n
    [Arguments]             ${encuri}
    ${serverProfileResp}=   Fusion Api Get Resource     uri=${serverProfileUri}
    ${SPList}=              Create List
    ${splength} =           Get Length                  ${serverProfileResp['members']}
    :FOR                    ${x}                        IN RANGE        0                   ${splength}
    \                       ${enclosureUri}=            set variable    ${serverProfileResp['members'][${x}]['enclosureUri']}
    \                       Run Keyword If              '${enclosureUri}' == '${encuri}'    Append to List      ${SPList}
    \                       ...                         ${serverProfileResp['members'][${x}]['uri']}
    #\                      Logger                      ******${SPList}
    [return]                ${SPList}

Create enclosure Server Hardware dictionary
    [Documentation]     Create a Dictionary with enclosure as key and server hardware Uris as values \n
    [Arguments]         ${ServerHardwareList}
    ${encResp}=         Fusion Api Get Resource     uri=${enclosure_uri}
    ${encLength}=       Get Length                  ${encResp['members']}
    ${encJBoddict}=     Create Dictionary
    :FOR                ${enc}                      IN RANGE            0                   ${encLength}
    \                   ${LJbodListName}=           Get Server Hardware of an enclosure     ${encResp['members'][${enc}]['uri']}
    \                   ...                         ${ServerHardwareList}
    \                   Set to Dictionary           ${encJBoddict}      ${encResp['members'][${enc}]['uri']}=${LJbodListName}
    [return]            ${encJBoddict}

Get Server Hardware of an enclosure
    [Documentation]     Ger the List of ServerHardware Uris List of the enclosure
    [Arguments]         ${enclosureUri}             ${ServerHardwareList}
    ${length} =         Get Length                  ${ServerHardwareList}
    #Logger             *****${length}
    ${SHList}=          Create List
    :FOR                ${x}                        IN RANGE                    0                       ${length}
    #\                  Logger                      ^^^^^^^^${jbodresp['members'][${x}]['sasLogicalInterconnectUri']}
    \                   ${ServerHardwareResp}=      Fusion Api Get Resource     uri=${ServerHardwareList[${x}]}
    #\                  ${enclosureUri1}=           Create List                 ${ServerHardwareResp['enclosureUris']}
    \                   ${enclosureUri1}=           Get From Dictionary         ${ServerHardwareResp}   locationUri
    \                   Logger                      ^^^^^^^^${enclosureUri1}
    #\                  ${result} =                 Lists Should be equal       ${enclosureUri}         ${enclosureUri1}
    \                   Run Keyword If              '${enclosureUri}' == '${enclosureUri1}'
    \                   ...                         append to list              ${SHList}
    \                   ...                         ${ServerHardwareList[${x}]}
    #\                  logger                      *****${JbodList}
    [return]            ${SHList}

Create LJbod ServerProfile Dictionary
    [Documentation]     Get the response of the Logical Enclosure and validate the creation of Logical Interconnects \n
    [Arguments]         ${encJBoddict}      ${enclosureUri}     ${sasLJbodNumPerServerProfile}

    ${val}=         Get from Dictionary     ${encJBoddict}              ${enclosureUri}
    ${LJbodList}=   Create List
    :FOR            ${num}                  IN RANGE                    ${sasLJbodNumPerServerProfile-1}    -1      -1
    #\              Logger                  ^^^&&&^^&&^^&&^^&&${num}
    \               Append To List          ${LJbodList}                ${val[${num}]}
    #\              Logger                  ********${val[${num}]}      l
    \               remove from list        ${encJBoddict['${enclosureUri}']}   ${num}
    \               ${dict_len}=            Get Length                  ${encJBoddict['${enclosureUri}']}
    #\              Logger                  ***${dict_len}**^^^^^${encJBoddict}
    Logger          ${LJbodList}

    [Return]    ${encJBoddict}      ${LJbodList}

Build sas-logical-jbod-attachment Payload test
    [Documentation]     Build payload of sas-logical-jbod-attachemnt
    [Arguments]         ${serverProfileUri}         ${serverHardwareUri}    ${LJbodUriList}
    ${length} =         Get Length                  ${LJbodUriList}
    #Logger             *********${length}
    :FOR                ${LJBOD}                    IN                      @{LJbodUriList}
    \                   ${LJbodAttachment}=         Create Dictionary       type=${sasLogicalJbodAttachmentType}
    \                   ...                         serverProfileUri=${serverProfileUri}
    \                   ...                         sasLogicalJBODUri=${LJBOD}
    \                   ...                         serverHardwareUri=${serverHardwareUri}
    \                   ...                         mezzSlotNumber=${1}
    \                   Logger                      *******${LJbodAttachment}
    \                   ${LJbodAttachmentresp}=     Fusion Api Create Sas Logical Jbod Attachment   ${LJbodAttachment}
    \                   sleep                       10
    #\                  logger                      ^*^*^*^*^*^*${LJbodAttachmentresp}
    \                   Validate resource attribute                         status_code             ${LJBOD}
    \                   ...                         ${LJbodAttachmentresp}
    \                   ...                         200
    \                   Validating task URI         ${LJbodAttachmentresp}
    \                   ...                         ${sasLJbodAttachment_create_status}
    \                   ...                         uri
    #\                  ${taskResp}=                Fusion Api Get Resource
    ...                 ${LJbodAttachmentresp['uri']}
    #\                  ${LJbodAttachmentUri}=      Get From Dictionary     ${taskResp['associatedResource']}
    ...                 resourceUri
    #\                  Logger                      Hello******${LJbodAttachmentUri}
    \                   ${LJbodAttachmentpatchresp}=                        Fusion Api Patch Sas Logical Jbod Attachment
    \                   ...                         ${LJbodAttachment}
    \                   ...                         uri=${LJbodAttachmentUri}
    #\                  Logger                      ^^^^^^^^${LJbodAttachmentpatchresp}
    #\                  Validate resource attribute                         status_code             ${LJBOD}
    ...                 ${LJbodAttachmentpatchresp}
    ...                 200

Get LJbods of an enclosure
    [Documentation]     Build payload of sas-logical-jbod-attachemnt
    [Arguments]         ${enclosureUri}
    ${jbodresp}=        Fusion Api Get Resource     uri=${sasLogicalJbodUri}
    ${length} =         Get Length                  ${jbodresp['members']}
    #Logger             *****${length}
    ${JbodList}=        Create List
    :FOR                ${x}                        IN RANGE                0                   ${length}
    #\                  Logger                      ^^^^^^^^${jbodresp['members'][${x}]['sasLogicalInterconnectUri']}
    \                   ${sasInterconnectResp}=     Fusion Api Get Resource
    \                   ...                         uri=${jbodresp['members'][${x}]['sasLogicalInterconnectUri']}
    #\                  ${enclosureUri1}=           Create List             ${sasInterconnectResp['enclosureUris']}
    #\                  Logger                      ^^^^^^^^${enclosureUri1}
    #\                  ${result} =                 Lists Should be equal   ${enclosureUri}     ${enclosureUri1}
    \                   Run Keyword If              "${enclosureUri}" in @{sasInterconnectResp['enclosureUris']}
    \                   ...                         append to list          ${JbodList}
    \                   ...                         ${jbodresp['members'][${x}]['uri']}
    #\                  logger                      *****${JbodList}
    [return]            ${JbodList}

Map ServerProfile and LJbod
    [Documentation]     Map Server Profile and Logical Jbod
    [Arguments]         ${encSPList}            ${encJbodList}      ${SpHardwareDict}
    ${spLen}=           Get Length              ${encSPList}
    ${jbodlen}=         Get Length              ${encJbodList}
    ${divlen}=          Evaluate                ${spLen}/${jbodlen}
    ${spjbodDict}=      Run Keyword If          ${divlen} == ${0}   Create SP Ljbod dict when SPs are less      ${encSPList}
    ...                 ${encJbodList}
    ${spjbodDict}=      Run Keyword If          ${divlen} != ${0}   Create SP Ljbod dict when SPs are more      ${encSPList}
    ...                 ${encJbodList}
    #Logger             **&&**&&**&&${spjbodDict}
    Build Payload and Create the attachment     ${spjbodDict}       ${SpHardwareDict}

Build Payload and Create the attachment
    [Documentation]     Build payload of sas-logical-jbod-attachemnt
    [Arguments]         ${spjbodDict}           ${SpHardwareDict}
    @{spKeys}=          Get Dictionary Keys     ${spjbodDict}
    Logger              &*&*&*&*&*&*&*&*&*&*${spjbodDict}
    :FOR                ${spKey}                IN              @{spKeys}
    \                   Logger                  ^^^&&&&^^^^^${spKey}*****${spjbodDict['${spKey}']}
    \                   ${JbodListLen}=         Get Length      ${spjbodDict['${spKey}']}
    \                   Logger                  *****************************${JbodListLen}
    \                   ${jbodListvalue}=       Copy List       ${spjbodDict['${spKey}']}
    \                   ${LJBODattachmentPayload}=              Build LJBOD Payload     ${spKey}    ${jbodListvalue}
    \                   ...                     ${SpHardwareDict['${spKey}']}

Build LJBOD Payload
    [Documentation]     Build payload of sas-logical-jbod-attachemnt
    [Arguments]         ${spKey}    ${LjbodList}    ${ServerHardwareUri}

    ${JbodListLen}=     Get Length              ${LjbodList}
    Logger              *&^*&^*&^${LjbodList}*******${JbodListLen}
    :FOR                ${x}                    IN RANGE            0   ${JbodListLen}
    \                   ${LJbodAttachment}=     Create Dictionary   type=${sasLogicalJbodAttachmentType}
    \                   ...                     serverProfileUri=${spKey}
    \                   ...                     sasLogicalJBODUri=${LjbodList[${x}]}
    \                   ...                     serverHardwareUri=${ServerHardwareUri}
    \                   ...                     mezzSlotNumber=${1}
    \                   Logger                  *******${LJbodAttachment}
Create SP Ljbod dict when SPs are less
    [Documentation]     Get SP LJBOD Dict when Server Profiles are less than Jbods
    [Arguments]         ${encSPList}            ${encJbodList}

    ${spjbodDict}=      Create Dictionary
    ${spLen}=           Get Length          ${encSPList}
    ${lbodLen}=         Get Length          ${encJbodList}
    ${div}=             Evaluate            ${lbodLen}/${spLen}
    :FOR                ${y}                IN RANGE                0                   ${spLen}
    \                   ${jlist}=           Get Slice From List     ${encJbodList}      0   ${div}
    \                   Set to Dictionary   ${spjbodDict}           ${encSPList[${y}]}= ${jlist}
    #Logger             )()()()()()()${spjbodDict}
    [Return]            ${spjbodDict}

Create SP Ljbod dict when SPs are more
    [Documentation]     Get SP LJBOD Dict when Server Profiles are more than Jbods
    [Arguments]         ${encSPList}    ${encJbodList}

    ${spjbodDict}=      Create Dictionary
    ${lbodLen}=         Get Length          ${encJbodList}
    Logger              ********########${encJbodList} ################${lbodLen}
    #
    :FOR                ${y}                IN RANGE            0   ${lbodLen}
    \                   ${jbodList}=        Convert to List     ${encJbodList[${y}]}
    \                   Logger              ********${jbodList}
    \                   Set to Dictionary   ${spjbodDict}       ${encSPList[${y}]}= ${jbodList}
    Logger              )()()()()()()${spjbodDict}
    exit
    [Return]            ${spjbodDict}

powerOffServerHardware
    [Documentation]     Create ServerProfile Payload
    [Arguments]         ${ServerHardwareUri}

    Logger      *****powerofff ${ServerHardwareUri}
######################################END of LE Keywords########################################################################

######################################Start of Validation Keywords##############################################################
Validating task URI
    [Documentation]     Validates the given response for the particular task
    [Arguments]         ${resp}                 ${task_status}          ${uri}=uri              ${task_uri}=None
    Logger              ${resp}                 DEBUG
    ${uri}=             Run Keyword If          '${task_uri}'=='None'   Get from dictionary     ${resp}     ${uri}
    ...                 ELSE                    Set Variable            ${task_uri}
    Logger              ${uri}                  DEBUG
    #${uri} =           Get From Dictionary     ${resp}                 ${uri}
    Logger              The task uri is ${uri}
    ${resp}             Fusion Api Get Li       uri=${uri}
    Logger              Response from taskuri ${resp}                   DEBUG
    Validate resource attribute                 taskStatus              ${uri}                  ${resp}     ${task_status}
    Validate resource attribute                 taskState               ${uri}                  ${resp}     ${task_state}

Validate resource attribute
    [Documentation]     Verify the permitted interconnect type of the resource and log messages if the permitted interconnect type is not the expected one
    [Arguments]         ${attribute}                ${uri}                  ${response}
    ...                 ${expected_attribute_value}=''
    ${hw_list} =        Create List                 '201' '202' '200'
    ${actual_attribute_value} =                     get from dictionary     ${response}     ${attribute}
    Run Keyword If      "${attribute}" in ['uri','productName','firmwareVersion','serialNumber','partNumber','enclosureName','sasWWN','wwid','driveBayCount']
    ...                 Run Keyword If              "${actual_attribute_value}" is 'None'   Fail
    ...                 Failed for the uri: ${uri} as the actual ${attribute} has None as the value
    Run Keyword If      "${attribute}" == 'status_code'
    ...                 List should contain Value   @{list}                 '${actual_attribute_value}'
    ...                 Failed for the uri: ${uri} as the actual ${attribute} is ${actual_attribute_value} and expected is @{list}
    Run Keyword If      "${attribute}" not in ['uri','productName','status_code','state','firmwareVersion','serialNumber','partNumber','enclosureName','sasWWN','wwid','driveBayCount']
    ...                 Run Keyword If              "${actual_attribute_value}" is not '${expected_attribute_value}'    Fail
    ...                 Failed for the uri: ${uri} as the actual ${attribute} is ${actual_attribute_value}
    ...                 and expected is ${expected_attribute_value}
    Run Keyword If      '${attribute}' == 'state'
    ...                 Run Keyword If              "${actual_attribute_value}" not in ['ConfigError','Configured','Monitored','Active']
    ...                 Fail
    ...                 Failed for the uri: ${uri} as the actual ${attribute} is ${actual_attribute_value} and expected is ${expected_attribute_value}
    Log to console      SUCCESS:The ${attribute} of the above uri is ${actual_attribute_value}

Output Response Error Messages
    [Documentation]     Output all response errors
    [Arguments]         ${response}
    Log                 \n Response code is: ${response['status_code']}             console=${True}
    Log                 \n Message: ${response['message']}                          console=${True}
    Log                 \n recommendedActions: ${response['recommendedActions']}    console=${True}

Validate URI for the response
    [Documentation]         Verify the URI of the resource and log message if the URI is not available
    [Arguments]             ${response}
    ${actual_resp_uri} =    get from dictionary                 ${response}     uri
    #Log to console         ***${actual_resp_uri}
    Run Keyword If          "${actual_resp_uri}" is 'None'      Fail            msg=The expected URI is not available
    Log to Console          SUCCESS:The Uri from the response is ${actual_resp_uri}

Validate computedPercentComplete
    [Documentation]     Verify the URI of the resource and log message if the URI is not available
    [Arguments]         ${response}     ${uri}=uri      ${task_uri}=None

    ${task_resp_uri}=       Run Keyword If              '${task_uri}'=='None'       Get from dictionary     ${response}
    ...                     ${uri}
    ...                     ELSE                        Set Variable                ${task_uri}
    ${task_resp}=           Fusion API get resource     ${task_resp_uri}
    ${computePercent}=      Set Variable                ${task_resp['computedPercentComplete']}
    Logger                  The percent complete of the task is ${computePercent}   DEBUG
    Run Keyword If          ${task_resp['computedPercentComplete']} != 100          FAIL
    ...                     msg=Failed as the computed percent complete of the task is not 100 after the timeout

Get Rest Uri from URL
    [Documentation]     Verify the URI of the resource and log message if the URI is not available
    [Arguments]         ${response}
    ${string} =         Set Variable        ${response['headers']['location']}
    ${split}=           split string        ${string}       /
    ${len}=             Get Length          ${split}
    ${str_list}=        Create List
    :FOR                ${i}                IN RANGE        3   ${len}
    \                   Append to List      ${str_list}     ${split[${i}]}
    ${my string}=       Catenate            SEPARATOR=/     @{str_list}
    ${my string}=       Catenate            /${my string}
    [Return]            ${my string}

Validate the response
    [Documentation]     validate the response uri
    [Arguments]         ${resp}
    ${resp_uri} =       Get from dictionary             ${resp}         uri
    #Wait Until Keyword Succeeds                        ${timeout}      ${polling_time}     Validate computedPercentComplete
    ...                 ${resp}
    ${resp} =           Fusion api get resource         ${resp_uri}
    ${taskstate} =      Get from dictionary             ${resp}         taskState
    logger              ${taskstate}                    DEBUG
    ${taskerror} =      Get from dictionary             ${resp}         taskErrors
    Run keyword If      '${taskstate}' != 'Completed'   Task Error      ${taskerror}
    ...                 ${resp_uri}
    [return]            ${resp}

Task Error
    [Documentation]     to check the status of task error
    [Arguments]         ${taskerror}                ${resp_uri}
    Logger              taskeror : ${taskerror}     DEBUG
    ${error_code} =     Get from dictionary         ${taskerror[0]}     errorCode
    ${message} =        Get from dictionary         ${taskerror[0]}     message
    Fail                msg= Failed for the uri ${resp_uri} due to ${error_code} \n Additional Info : ${message}

Pass With Warnings
    [Documentation]     Pass the warnings
    [Arguments]         ${msg}
    Log                 ${msg}      WARN
    Pass Execution      Test case skipped, check the above warning message for info

######################################End of Validation Keywords###############################################################

######################################CLI Keywords#############################################################################
Login to Fusion via SSH
    [Documentation]     Connect to Fusion VM Bash via SSH
    ...                 Example:\n| Login to Fusion Via SSH | 10.0.12.106 | Administrator | hpvse123 |
    [Arguments]         ${IP}               ${USERNAME}         ${PASSWORD}
    #Log Many           ${IP}               ${USERNAME}         ${PASSWORD}     ${PROMPT}   ${TIMEOUT}
    #Set Default Configuration              prompt=${PROMPT}    timeout=${TIMEOUT}
    ${Id}=              Open Connection     ${FUSION_IP}        alias=${ALIAS}
    ${OP}=              Login               ${USERNAME}         ${PASSWORD}
    #[Return]           ${Id}

Execute the command and log the output
    [Documentation]     Execute the command and log the output
    [Arguments]         ${command}

    Log to Console      Command executed is ${command} \n
    Write               ${command}
    ${Output}=          Read    delay=0.5s
    Log to console      ${Output}

######################################END of CLI Keywords######################################################################

######################################Start of IO Adapters Keywords###############################################################
Get IOadapter info of enclosures
    [Documentation]     Verify sas-IO Adapters through rest
    [Arguments]         ${ioAdapter}                ${index}
    ${resp}             Fusion Api Get Enclosures   uri=${drive_enclosure_uri}
    ${len}=             Get Length                  ${ioadapter}
    :FOR                ${x}                        IN RANGE    0   ${len}
    \                   Logger                      ************** Details of IO Adapter:: ${x} ***************
    \                   Logger                      IOAdapter's wwid is ${ioadapter[${x}]['wwid']}
    \                   Logger                      IOAdapter's model is ${ioadapter[${x}]['model']}
    \                   Logger                      IOAdapter's serialNumber is ${ioadapter[${x}]['serialNumber']}
    \                   Logger                      IOAdapter's partNumber is ${ioadapter[${x}]['partNumber']}
    \                   Logger                      IOAdapter's status is ${ioadapter[${x}]['status']}
    \                   Logger                      IOAdapter's portCount is ${ioadapter[${x}]['portCount']}
    \                   Get IOadapters PORT info    ${resp['members'][${index}]['ioAdapters'][${x}]['ports']}

Get IOadapters PORT info
    [Documentation]     Verify IO Adapters each PORT INFO rest
    [Arguments]         ${port}
    ${len}=             Get Length      ${port}
    :FOR                ${x}            IN RANGE    0   ${len}
    \                   Logger          =========Details of IO Adapter's PORT :: ${x} INFO ==========
    \                   Logger          IOAdapter's portType is ${port[${x}]['portType']}
    \                   Logger          IOAdapter's state is ${port[${x}]['state']}
    \                   Logger          IOAdapter's status is ${port[${x}]['status']}
    \                   Logger          IOAdapter's portName is ${port[${x}]['portName']}
    \                   Logger          IOAdapter's portType is ${port[${x}]['portType']}
    \                   Logger          IOAdapter's portLocation is ${port[${x}]['portLocation']}
    \                   Logger          IOAdapter's linkedPortUri is ${port[${x}]['linkedPortUri']}

Get DriveBay Info
    [Documentation]     To fecth DRIVE BAY information of EACH ENCLOSURE
    [Arguments]         ${drivebay}
    ${length1} =        Get Length      ${drivebay}
    Log to console      ***** Length of Drivebay is::: ${length1} *******
    :FOR                ${x}            IN RANGE    0   ${length1}
    \                   Logger          Drive's position is ${drivebay[${x}]['name']}
    \                   Logger          Drive's model is ${drivebay[${x}]['model']}
    \                   Logger          Drive's state is ${drivebay[${x}]['state']}
    \                   Logger          Drive's attachedDeviceInterface is ${drivebay[${x}]['attachedDeviceInterface']}
    \                   Logger          Drive's attachedDeviceWWID is ${drivebay[${x}]['attachedDeviceWWID']}
    \                   Logger          ========= End of ${drivebay[${x}]['name']} =======================

######################################End of IO Adapters Keywords###############################################################

######################################Start of F636 Keywords######################################################################
Build Action Payload
    [Documentation]     Return a Logical Interconnect Groups' Uri by Name
    [Arguments]         ${path}     ${value}

    ${payload_dict}=    Create Dictionary   op=replace
    ...                 path=/${path}
    ...                 value=${value}

    ${final_payload}=   Create List     ${payload_dict}
    [Return]            ${final_payload}

######################################End of F636 Keywords#########################################################

# ${hw_list} is containing a list of id's of hardware which have mezzanine controller.
# ${lists} is containing the entire payload of the disks required for the creation of ljbods.
# ${listforalertindex}      contains the list of alerts indexes which are either in active state or in Locked state.
# ${listofalertvalues}      contains the id of the alerts which are in locked state or in active state.

# This function is used to check whether our hardware can run the script or not
Validation Of Hardware Inventory
    [Documentation]     checks for the hardware inventory and decides whether the script can be run on that hardware
    # natasha list is checking the number of sas switches present so that they can make a dual domain configuration
    ${natasha_list}=    Get Natasha Interconnect List
    ${count}=           Get length                  ${natasha_list}
    Run Keyword If      ${count}<2                  Fatal Error
    ...                 msg= Test suit cannot be run on the particular hardware. Change the configuration of the hardware and run the test suite again.
    # Check the count shows the number of server hardwares which supports the creation of ljbods
    Check The Count Of Server Hardwares Present
    ${total}=           Get length                  ${hw_list}
    Run Keyword If      ${total}<2                  Fatal Error
    ...                 msg= Test suit cannot be run on the particular hardware. Change the configuration of the hardware and run the test suite again.
    ...                 msg=the script will stop executing as it has less than 2 hardwares with mezz controolers so two sp cannot be created
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=             Get Length                  ${resp['members']}
    Run Keyword If      ${len}<1                    Fatal Error
    ...                 msg= Test suit cannot be run on the particular hardware. Change the configuration of the hardware and run the test suite again.
    ...                 msg=there was no drive enclosure so sp cannot be created so exiting the script
    # It shows the number of drives present in the drive enclosures
    # Get The Number Of Drives Present
    # ${sum}=           Get Length                  ${lists}
    # Run keyword If    ${sum}<2                    Fatal Error
    ...                 msg= Test suit cannot be run on the particular hardware. Change the configuration of the hardware and run the test suite again.

Validation Of Hardware Inventory For One Server Profile
    [Documentation]     checks for the hardware inventory and decides whether the script can be run on that hardware
    # natasha list is checking the number of sas switches present so that they can make a dual domain configuration
    ${natasha_list}=    Get Natasha Interconnect List
    ${count}=           Get length                  ${natasha_list}
    Run Keyword If      ${count}<2                  FAIL    msg=dual domain configuration cannot be build so exiting the script.
    # Check the count shows the number of server hardwares which supports the creation of ljbods
    Check The Count Of Server Hardwares Present
    ${total}=           Get length                  ${hw_list}
    Run Keyword If      ${total}<1                  FAIL
    ...                 msg=the script will stop executing as it has less than 1 hardware with mezz controllers so two sp cannot be created
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=             Get Length                  ${resp['members']}
    Run Keyword If      ${len}<1                    FAIL
    ...                 msg=there was no drive enclosure so sp cannot be created so exiting the script
    # It shows the number of drives present in the drive enclosures
#   Get The Number Of Drives Present
#   ${sum}=             Get Length                  ${lists}
#   Run keyword If      ${sum}<1                    FAIL    msg= server profile cannot be created as the disks are not there.

Get Natasha Interconnect List
    [Documentation]     Keyword to identify all the natasha switches connected to system
    ${api_resp}=        Fusion Api Get Resource     uri=/rest/sas-interconnects
    # It is used to get the list of natasha switches present
    ${api_len_resp}=    Get Length                  ${api_resp['members']}
    ${natasha_list}=    Create List
    :For                ${x}                        IN RANGE    0   ${api_len_resp}
    \                   Append To List              ${natasha_list}
    \                   ...                         ${api_resp['members'][${x}]['interconnectLocation']['locationEntries'][0]['value']}

    [Return]    ${natasha_list}

Check The Count Of Server Hardwares Present
    [Documentation]     check which serverhardware is having mezz controller
    ${resp}=            Fusion Api Get Resource     uri=/rest/server-hardware
    ${count}=           get from dictionary         ${resp}                     count
    #It is used to count the number of server hardwares which support the creation of ljbods
    :FOR                ${x}                        IN RANGE                    0               ${count}
    \                   ${port_map}=                get from dictionary         ${resp['members'][${x}]}    portMap
    \                   ${device_Slot}=             get from dictionary         ${port_map}     deviceSlots
    \                   ${len}=                     Get Length                  ${device_Slot}
    \                   ${check}=                   Check The Mezz Controller   ${len}          ${device_Slot}
    \                   ${lists}=                   Run keyword if              ${check}==1
    \                   ...                         Dictionary Which Contains List Of Indexes Of Mezz Controller
    \                   ...                         ${x}
    \                   ...                         #this is to get the index of all the hardwares present with mezzanine controller

Check The Mezz Controller
    [Documentation]     this is to check for if condition in mezzcontroller
    [Arguments]         ${lens}                 ${device_Slots}
    ${huyt}=            BuiltIn.Set Variable    0
    :FOR                ${j}                    IN RANGE                0                       ${lens}
    \                   ${devicename}=          get from dictionary     ${device_Slots[${j}]}   deviceName
    \                   ${huyt} =               Run Keyword If          '${devicename}' == 'Smart Array P542D Controller'
    \                   ...                     Set Counter             ELSE
    \                   ...                     Run Keyword If          '${devicename}' == 'HPE Smart Array P416ie-m SR G10'
    \                   ...                     Set Counter
    \                   Run keyword if          ${huyt}==1              Exit From Inner Loop
    [return]            ${huyt}

Set Counter
    [Documentation]     this is to just set counter
    ${counter}=         BuiltIn.Set Variable    1
    [return]            ${counter}

Dictionary Which Contains List Of Indexes Of Mezz Controller
    [Documentation]     this is to create a index of all the server hardware swhich have mezz controllers
    [ARGUMENTS]         ${n}
    Append To List      ${hw_list}      ${n}
    [return]            ${hw_list}

Exit From Inner Loop
    [Documentation]     exit from inner loop
    Exit For Loop

#############Content of driveenclosure to get drives #############
Get The Number Of Drives Present
    [Documentation]     Create drive enclosure
    [Arguments]         ${api}=${None}              ${headers}=${None}
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=             Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                    0               ${len}
    \                   ${uri}=                     get from dictionary         ${resp['members'][${x}]}    uri
    \                   ${response}=                Fusion Api Get resource     uri=${uri}
    \                   ${enc_name}=                Get from dictionary         ${resp['members'][${x}]}    enclosureName
    \                   ${ser_num}=                 Get from dictionary         ${resp['members'][${x}]}    serialNumber
    \                   ${len}=                     Get Length                  ${response['driveBays']}
    \                   Extract Drives              ${len}                      ${response}     ${ser_num}

Extract Drives
    [Documentation]     extract the drives
    [Arguments]         ${lens}                 ${responses}            ${enc_name}
    :FOR                ${x}                    IN RANGE                0                       ${lens}
    \                   ${driveinfo}=           get from dictionary     ${responses['driveBays'][${x}]}         drive
    \                   Run Keyword If          ${driveinfo}==None      Continue For Loop
    \                   ${deviceInterface}=     get from dictionary     ${driveinfo}            deviceInterface
    \                   ${driveMedia}=          get from dictionary     ${driveinfo}            driveMedia
    \                   ${capacity}=            get from dictionary     ${driveinfo}            capacity
    \                   Run keyword if          '${capacity}'=='0'      continue for loop
    \                   ${status}=              get from dictionary     ${driveinfo}            status
    \                   Run keyword if          '${status}'!='OK'       continue for loop
    \                   Create Payload For Adding Ljbods                ${deviceInterface}      ${driveMedia}   ${capacity}
    \                   ...                     ${x}                    ${enc_name}

Create Payload For Adding Ljbods
    [Documentation]         create dynamic payload for the creation of adding ljbods
    [Arguments]             ${deviceInterfaces}     ${driveMedias}                  ${capacitys}    ${n}    ${enc_name}
    ${indexvalueoflist}=    Get Length              ${lists}
    ${fid}=                 Evaluate                ${indexvalueoflist} + ${addone}
    ${sizeofdisk}=          Convert To Integer      ${capacitys}
    ${deviceInterface}=     Convert To Lowercase    ${deviceInterfaces}
    ${replacedstring}=      Remove String           ${deviceInterface}              s
    ${sasname}=             Run Keyword If          '${deviceInterface}'=='sas'     conversion to sas
    ...                     ELSE
    ...                     convert to sata

    #                       ${finalstringofSataorSas}=                  Catenate                    SEPARATOR=      ${letssay}
    #                       ...                     ${replacedstring}
    ${drivemedia}=          Convert To Lowercase    ${drivemedias}
    ${replacedstrings}=     Remove String           ${drivemedia}       h
    ${afterremovings}=      Remove String           ${drivemedia}       s
    ${gettext}=             Run Keyword If          "${replacedstrings}"=="dd"                      Convert It Into Hdd
    ...                     ${replacedstrings}
    ...                     ELSE
    ...                     Convert It Into Ssd
    ...                     ${afterremovings}
    # ${drivetechnology}=   Catenate                SEPARATOR=          ${finalstringofSataorSas}   ${gettext}
    ${drivetechnology}=     Catenate                SEPARATOR=          ${sasname}                  ${gettext}
    ${spdictionary}=        Create Dictionary
    Set to dictionary       ${spdictionary}         id                  ${fid}
    Set to dictionary       ${spdictionary}         deviceSlot          ${formezz}
    Set to dictionary       ${spdictionary}         name                ${forname}+${enc_name}+${n}
    Set to dictionary       ${spdictionary}         numPhysicalDrives   ${addone}
    Set to dictionary       ${spdictionary}         driveMinSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}         driveMaxSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}         driveTechnology     ${drivetechnology}
    Set to dictionary       ${spdictionary}         eraseData           ${False}
    Set to dictionary       ${spdictionary}         persistent          ${False}
    Set to dictionary       ${spdictionary}         sasLogicalJBODUri   ${None}
    Set to dictionary       ${spdictionary}         status              ${None}
    Append to List          ${lists}                ${spdictionary}

convert to sata
    [Documentation]     this is to convert to sata
    [Return]            ${satasmall}

conversion to sas
    [Documentation]     this is to convert to sas
    [Return]            ${sassmall}

Convert It Into Hdd
    [Documentation]         Convert to HDD
    [Arguments]             ${replace}
    ${finalstringofHdd}=    Catenate    SEPARATOR=      ${capitalh}     ${replace}
    [return]                ${finalstringofHdd}

Convert It Into Ssd
    [Documentation]         Convert into SSD
    [Arguments]             ${replace}
    ${replacedstring}=      Remove String   ${replace}      s
    ${finalstringofHdd}=    Catenate        SEPARATOR=      ${capitals}     ${replacedstring}
    [return]                ${finalstringofHdd}

#########################################################################################################################
##################################################Creation of independent ljbod with recent feature######################
Get The Number Of Drives Present for independent ljbod
    [Documentation]     Create drive enclosure
    [Arguments]         ${api}=${None}              ${headers}=${None}
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=             Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                    0   ${len}
    \                   ${uri}=                     get from dictionary         ${resp['members'][${x}]}    uri
    \                   ${response}=                Fusion Api Get resource     uri=${uri}
    \                   ${len}=                     Get Length                  ${response['driveBays']}
    \                   Extracting Drives           ${len}                      ${response}
    Logger              ${listforindependentljbod}

Extracting Drives
    [Documentation]     extract the drives
    [Arguments]         ${lens}                 ${responses}
    :FOR                ${x}                    IN RANGE                0                       ${lens}
    \                   ${driveinfo}=           get from dictionary     ${responses['driveBays'][${x}]}         drive
    \                   Run Keyword If          ${driveinfo}==None      Continue For Loop
    \                   ${addition}=            Evaluate                ${x}+1
    \                   ${baynumber}=           Set Variable            ${addition}
    \                   ${uri}=                 get from dictionary     ${driveinfo}            uri
    \                   ${deviceInterface}=     get from dictionary     ${driveinfo}            deviceInterface
    \                   ${driveMedia}=          get from dictionary     ${driveinfo}            driveMedia
    \                   ${capacity}=            get from dictionary     ${driveinfo}            capacity
    \                   Run keyword if          '${capacity}'=='0'      continue for loop
    \                   ${status}=              get from dictionary     ${driveinfo}            status
    \                   Run keyword if          '${status}'!='OK'       continue for loop
    \                   Create Payload For Adding Independent Ljbods    ${deviceInterface}      ${driveMedia}   ${capacity}
    \                   ...                     ${baynumber}
    \                   ...                     ${uri}
    \                   ...                     ${x}

Create Payload For Adding Independent Ljbods
    [Documentation]         create dynamic payload for the creation of adding ljbods
    [Arguments]             ${deviceInterfaces}     ${driveMedias}                  ${capacitys}    ${baynum}   ${uris}     ${n}
    ${indexvalueoflist}=    Get Length              ${lists}
    ${fid}=                 Evaluate                ${indexvalueoflist} + ${addone}
    ${sizeofdisk}=          Convert To Integer      ${capacitys}
    ${deviceInterface}=     Convert To Lowercase    ${deviceInterfaces}
    ${replacedstring}=      Remove String           ${deviceInterface}              s
    ${sasname}=             Run Keyword If          '${deviceInterface}'=='sas'     conversion to sas
    ...                     ELSE
    ...                     convert to sata
    ${drivemedia}=          Convert To Lowercase    ${drivemedias}
    ${replacedstrings}=     Remove String           ${drivemedia}                   h
    ${afterremovings}=      Remove String           ${drivemedia}                   s
    ${gettext}=             Run Keyword If          "${replacedstrings}"=="dd"      Convert It Into Hdd
    ...                     ${replacedstrings}
    ...                     ELSE
    ...                     Convert It Into Ssd
    ...                     ${afterremovings}

    ${drivetechnology}=     Catenate                        SEPARATOR=          ${sasname}      ${gettext}
    ${spdictionary}=        Create Dictionary
    Set to dictionary       ${spdictionary}                 uri                 ${uris}
    Set to dictionary       ${spdictionary}                 baynumber           ${baynum}
    Set to dictionary       ${spdictionary}                 id                  ${fid}
    Set to dictionary       ${spdictionary}                 deviceSlot          ${formezz}
    Set to dictionary       ${spdictionary}                 name                ${forname}+${n}
    Set to dictionary       ${spdictionary}                 numPhysicalDrives   ${addone}
    Set to dictionary       ${spdictionary}                 driveMinSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}                 driveMaxSizeGB      ${sizeofdisk}
    Set to dictionary       ${spdictionary}                 driveTechnology     ${drivetechnology}
    Set to dictionary       ${spdictionary}                 eraseData           ${False}
    Set to dictionary       ${spdictionary}                 persistent          ${False}
    Set to dictionary       ${spdictionary}                 sasLogicalJBODUri   ${None}
    Set to dictionary       ${spdictionary}                 status              ${None}
    Append to List          ${listforindependentljbod}      ${spdictionary}

###############################################start of testcases####################################

Running State Again
    [Documentation]     Checking for running state
    [Arguments]         ${finalurii}
    ${responsenew}      Fusion Api Get Resource         uri=${finalurii}
    ${taskstate}=       Get From Dictionary             ${responsenew}              taskState
    run keyword if      '${taskstate}' == 'Error'       DFRM GET FAILURE DUMPS      ${responsenew}      ${taskstate}
    Run Keyword If      '${taskstate}' != 'Completed'   FAIL                        msg=creation not yet completed

DFRM GET FAILURE DUMPS
    [Documentation]     Keyword to Gather required DFRM resources data from test setup upon failure of any tasks
    [Arguments]         ${responsenew}      ${taskstate}

    # Download LE Support Dump on failure
    ${LE_resp}=         Fusion Api Get Resource     uri=/rest/logical-enclosures
    ${LE_count}=        Get Length                  ${LE_resp['members']}
    Run keyword if      '${LE_count}' != '0'        DOWNLOAD LOGICAL ENCLOSURE SUPPORT DUMP
    Run keyword if      '${LE_count}' == '0'        log     "Unable to create LE support dump as LE count is Zero"

    # Get failed task URI
    ${task_status}=     Get From Dictionary     ${responsenew}      taskStatus
    log                 ${task_status}          console=true
    ${task_Errors}=     Get From Dictionary     ${responsenew}      taskErrors
    log                 ${task_Errors}          console=true

    # Gather LI details and dump in RG logs file
    ${LI_resp}=         Fusion Api Get Resource     uri=/rest/sas-logical-interconnects/
    ${LI_count}=        Get Length                  ${LI_resp['members']}
    Run keyword if      '${LI_count}' == '0'        LOG     "ZERO LOGICAL INTERCONNECTS FOUND IN TEST SYSTEM"

    :FOR    ${LI}               IN RANGE                    0   ${LI_count}
    \       ${LI_uri}=          Get From Dictionary         ${LI_resp['members'][${LI}]}    uri
    \       ${LI_ind_resp}=     Fusion Api Get Resource     uri=${LI_uri}
    \       LOG                 ${LI_ind_resp}

    # Gather ICM details and Dump in RG log file
    ${ICM_resp}=        Fusion Api Get Resource     uri=/rest/sas-interconnects
    ${ICM_count}=       Get Length                  ${ICM_resp['members']}
    Run keyword if      '${ICM_count}' == '0'       Fatal Error     msg=Error !!! Zero SAS Interconnects found in test setup

    :FOR    ${x}                IN RANGE                    0   ${ICM_count}
    \       ${ICM_uri}=         Get From Dictionary         ${ICM_resp['members'][${x}]}    uri
    \       ${ICM_ind_resp}=    Fusion Api Get Resource     uri=${ICM_uri}
    \       LOG                 ${ICM_ind_resp}

    # Abort Test run at the end of gathering all required data from Test setup
    Fatal Error     msg= Aborting/Terminating RG Automation Test run, Due to Failure in test case. See Above for Errors.

Deletion Of Alert
    [Documentation]     This is     to delete alerts

    ${response}=    fusion api delete alert
    sleep           10s

checkingalertidforsanitizeoperation
    [Documentation]     Checking whether the complete alert is appearing.
    [Arguments]         ${prev_Cnt}
    ${value}=           set variable                0
    ${resp}=            Fusion Api Get Resource     uri=/rest/alerts
    ${len}=             Get Length                  ${resp['members']}
    ${length}=          Evaluate                    ${len}-${prev_Cnt}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${info}=                    get from dictionary     ${resp['members'][${x}]}
    \                   ...                         alertTypeID
    \                   ${value}=                   Run Keyword If          '${info}'=='dfrm.de.drive.eraseCompleted'   setcount
    \                   Run Keyword If              ${value}==1             Exit For Loop

    Run Keyword If      ${value}!=1     Fail

ValidateSanitizationStart
    [Documentation]                 this is to validate the sanitization process
    [Arguments]                     ${prev_Cnt}
    ${Alert__str_Cnt}=              set variable    ${prev_Cnt}
    Wait Until Keyword Succeeds     1200s           5s      CheckForSanitizeStartOperation      ${Alert__str_Cnt}

CheckForSanitizeStartOperation
    [Documentation]     Checking whether the complete alert is appearing.
    [Arguments]         ${prev_Cnt}
    ${value}=           set variable                0
    ${resp}=            Fusion Api Get Resource     uri=/rest/alerts
    ${len}=             Get Length                  ${resp['members']}
    ${length}=          Evaluate                    ${len}-${prev_Cnt}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${info}=                    get from dictionary     ${resp['members'][${x}]}
    \                   ...                         alertTypeID
    \                   ${value}=                   Run Keyword If          '${info}'=='dfrm.de.drive.eraseStarted'     setcount
    \                   Run Keyword If              ${value}==1             Exit For Loop

    Run Keyword If      ${value}!=1     FAIL    msg=Drive Sanitization did not Start

setcount
    [Documentation]     this is to return 1
    [Return]            1

Validation for sanitization
    [Documentation]                 this is to validate the sanitization process
    [Arguments]                     ${prev_Cnt}
    ${Alert_Cnt}=                   set variable    ${prev_Cnt}
    Wait Until Keyword Succeeds     7200s           5s      checkingalertidforsanitizeoperation     ${Alert_Cnt}

CREATION OF DUAL DOMAIN SAS LIG
    [Documentation]             Creating onfly lig
    ${resp}=                    Fusion Api Get Resource         uri=/rest/enclosures
    ${enclosuretype}=           get from dictionary             ${resp['members'][0]}   enclosureType
    Remove from dictionary      ${advanceligpayload}            enclosureType
    Set to dictionary           ${advanceligpayload}            enclosureType           ${enclosuretype}
    ${resp_interconnect}=       Fusion Api Get Resource         uri=/rest/sas-interconnects
    ${icm_count}=               Get Length                      ${resp_interconnect['members']}
    Run Keyword if              '${icm_count}' < '2'            FAIL
    ...                         msg= For Dual domain LIG two sas interconnects required,
    ${icm_prod_name}=           GET INTERCONNECT PRODUCT NAME   ${resp_interconnect}    ${icm_count}
    ${response}=                Run Keyword if                  '${icm_prod_name}'=='Synergy 24Gb SAS Interconnect Module'
    ...                         Fusion Api Create Sas Lig       ${GROVER_DUALDOMAIN_LIG_PAYLOAD}
    ...                         ELSE
    ...                         Fusion Api Create Sas Lig       ${advanceligpayload}
    ${icm_type_uri}=            Get from Dictionary             ${resp_interconnect['members'][0]}      interconnectTypeUri

    ${respurii}                     Get From Dictionary     ${response}     uri
    Wait Until Keyword Succeeds     1200s                   5s              Running State Again     ${respurii}

CREATION OF ENCLOSURE GROUP
    [Documentation]             Create onflyeg
    ${resp}=                    Fusion Api Get Resource             uri=/rest/sas-logical-interconnect-groups
    ${uri}=                     get from dictionary                 ${resp['members'][0]}   uri
    Remove From Dictionary      ${advanceegpayload['interconnectBayMappings'][0]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${advanceegpayload['interconnectBayMappings'][0]}           logicalInterconnectGroupUri
    ...                         ${uri}
    Remove From Dictionary      ${advanceegpayload['interconnectBayMappings'][1]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${advanceegpayload['interconnectBayMappings'][1]}           logicalInterconnectGroupUri
    ...                         ${uri}
    ${Response}=                Fusion API Create Enclosure Group   ${advanceegpayload}

EDIT ENCLOSURE GROUP WITH SINGLE DOMAIN LIG
    [Documentation]     Keyword to Edit Enclosure group
    [Arguments]         ${newligname}
    ${resp_lig}=        Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${length}=          get length                  ${resp_lig['members']}
    ${resp_eg}=         Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${eg_type}=         get from dictionary         ${resp_eg['members'][0]}        type
    ${eg_count}=        get from dictionary         ${resp_eg['members'][0]}        enclosureCount
    ${eg_uri}=          get from dictionary         ${resp_eg['members'][0]}        uri
    ${asso_lig_uri}=    get from dictionary         ${resp_eg['members'][0]}        associatedLogicalInterconnectGroups
    ${e_tag}=           get from dictionary         ${resp_eg['members'][0]}        eTag
    ${icm_bay_resp}=    Fusion API Get Resource     uri=${eg_uri}
    ${icm_bay_map}=     get from dictionary         ${icm_bay_resp}                 interconnectBayMappings
    ${bay_length}=      Get Length                  ${icm_bay_map}
    :FOR                ${x}                        IN RANGE                        0       ${Bay_length}
    \                   ${licmuri}=                 Get From Dictionary             ${icm_bay_map[${x}]}    logicalInterconnectGroupUri
    \                   ${icm_bay}=                 Run Keyword IF                  '${licmuri}' != 'None'
    \                   ...                         Get From Dictionary
    \                   ...                         ${ICM_Bay_Map[${x}]}            interconnectBay
    \                   ...                         ELSE                            Continue For Loop
    :FOR                ${x}                        IN RANGE                        0   ${length}
    \                   ${ligname}=                 get from dictionary             ${resp_lig['members'][${x}]}    name
    \                   ${editliguri}=              Run Keyword If                  '${ligname}'=='${newligname}'
    \                   ...                         get from dictionary
    \                   ...                         ${resp_lig['members'][${x}]}
    \                   ...                         uri
    \                   Run Keyword If              '${ligname}'=='${newligname}'   Exit For Loop
    ${i_bay}=           Run Keyword IF              '${icm_bay}' == '1'             Set Variable    1
    ...                 ELSE                         Set Variable    4
    ${e_index}=         Run Keyword IF              '${i_bay}' == '1'               Set Variable    1
    ...                 ELSE                         Set Variable    2
    Remove From Dictionary      ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}          interconnectBay
    Set to Dictionary           ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}          interconnectBay     ${i_bay}
    Remove From Dictionary      ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}          enclosureIndex
    Set to Dictionary           ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}          enclosureIndex      ${e_index}
    Remove From Dictionary      ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN['interconnectBayMappings'][0]}          logicalInterconnectGroupUri
    ...                         ${editliguri}
    Remove From Dictionary      ${EGPAYLOADSINGLEDOMAIN}            type
    Set to Dictionary           ${EGPAYLOADSINGLEDOMAIN}            type                        ${eg_type}
    Remove From Dictionary      ${EGPAYLOADSINGLEDOMAIN}            enclosureCount
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            enclosureCount              ${eg_count}
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            uri                         ${eg_uri}
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            associatedLogicalInterconnectGroups     ${asso_lig_uri}
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            eTag                        ${e_tag}
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            scopesUri                   ${eg_uri}
    Set to dictionary           ${EGPAYLOADSINGLEDOMAIN}            interconnectBayMappingCount             2
    ${response}=                Fusion API Edit Enclosure Group     ${EGPAYLOADSINGLEDOMAIN}    ${eg_uri}
    Sleep                       5s

EDIT ENCLOSURE GROUP WITH DUAL DOMAIN LIG
    [Documentation]     Keyword to Edit Enclosure group With Copy LIG
    [Arguments]         ${new_lig}
    ${resp_lig}=        Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${length}=          get length                  ${resp_lig['members']}
    ${resp_eg}=         Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${eg_type}=         get from dictionary         ${resp_eg['members'][0]}        type
    ${eg_uri}=          get from dictionary         ${resp_eg['members'][0]}        uri
    ${eg_count}=        get from dictionary         ${resp_eg['members'][0]}        enclosureCount
    ${asso_lig_uri}=    get from dictionary         ${resp_eg['members'][0]}        associatedLogicalInterconnectGroups
    ${e_tag}=           get from dictionary         ${resp_eg['members'][0]}        eTag
    :FOR                ${x}                        IN RANGE                        0   ${length}
    \                   ${ligname}=                 get from dictionary             ${resp_lig['members'][${x}]}    name
    \
    \                   ${copyliguri}=              Run Keyword If                  '${ligname}'=='${new_lig}'
    \                   ...                         get from dictionary
    \                   ...                         ${resp_lig['members'][${x}]}
    \                   ...                         uri
    \                   Run Keyword If              '${ligname}'=='${new_lig}'      Exit For Loop

    Remove From Dictionary      ${EDITEGCOPYLIGPAYLOAD['interconnectBayMappings'][0]}
    ...                         logicalInterconnectGroupUri
    Remove From Dictionary      ${EDITEGCOPYLIGPAYLOAD}             type
    Set to Dictionary           ${EDITEGCOPYLIGPAYLOAD}             type                        ${eg_type}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD['interconnectBayMappings'][0]}           logicalInterconnectGroupUri
    ...                         ${copyliguri}
    Remove From Dictionary      ${EDITEGCOPYLIGPAYLOAD['interconnectBayMappings'][1]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD['interconnectBayMappings'][1]}           logicalInterconnectGroupUri
    ...                         ${copyliguri}
    Remove From Dictionary      ${EDITEGCOPYLIGPAYLOAD}             enclosureCount
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             enclosureCount              ${eg_count}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             uri                         ${eg_uri}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             associatedLogicalInterconnectGroups     ${asso_lig_uri}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             eTag                        ${e_tag}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             scopesUri                   ${eg_uri}
    Set to dictionary           ${EDITEGCOPYLIGPAYLOAD}             interconnectBayMappingCount             2
    ${response}=                Fusion API Edit Enclosure Group     ${EDITEGCOPYLIGPAYLOAD}     ${eg_uri}
    Sleep                       5s

CREATION OF LOGICAL ENCLOSURE AND LOGICAL INTERCONNECT
    [Documentation]                 Create onfly LE
    ${resp}=                        Fusion Api Get Resource     uri=/rest/enclosures
    ${enclist}=                     Create List
    ${enc_uri}=                     get from dictionary         ${resp['members'][0]}       uri
    Append to List                  ${enclist}                  ${enc_uri}
    ${resps}=                       Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${urii}=                        get from dictionary         ${resps['members'][0]}      uri
    Remove from dictionary          ${advancelepayload}         enclosureUris
    Remove from dictionary          ${advancelepayload}         enclosureGroupUri
    Set to dictionary               ${advancelepayload}         enclosureUris               ${enclist}
    Set to dictionary               ${advancelepayload}         enclosureGroupUri           ${urii}
    ${LEResp}=                      Fusion Api Create Logical Enclosure                     ${advancelepayload}
    ${headers}=                     Get From Dictionary         ${LEResp}                   headers
    ${taskurii}=                    Get From Dictionary         ${headers}                  Location
    Wait Until Keyword Succeeds     1200s                       5s                          Running State Again     ${taskurii}

CREATE FIRST SERVER PROFILE WITH LJBOD
    [Documentation]             This is used to create dynamic sp
    ${resp}=                    Fusion Api Get Resource     uri=/rest/server-hardware
    ${f}=                       get from list               ${hw_list}                  0
    ${uri}=                     get from dictionary         ${resp['members'][${f}]}    uri
    Power off Specific Server Hardware                      ${uri}
    Sleep                       15s
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV11
    ${serverHardwareUri}=       get from dictionary         ${resp['members'][${f}]}    serverHardwareTypeUri
    Set to dictionary           ${advancesppayload}         serverHardwareUri           ${uri}
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri       ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary         ${resp['members'][0]}       uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri           ${uri}
    ${localStorage}=            get from dictionary         ${advancesppayload}         localStorage
    ${firstvalueofdisk}=        get from list               ${lists}                    0
    ${localStorage['sasLogicalJBODs']}=                     Append To List              ${localStorage['sasLogicalJBODs']}
    ...                         ${firstvalueofdisk}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}         param=?force=ignoreServerHealth
    Log                         ${resp}
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}         serverHardwareUri
    Remove From dictionary      ${advancesppayload}         serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}         enclosureGroupUri
    Remove From Dictionary      ${localStorage}             sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

    ${getonlogicalinterconnect}=    Fusion Api Get Resource     uri=/rest/sas-logical-interconnects/
    #   ${status}=                  get from dictionary         ${getonlogicalinterconnect['members'][0]}   status
    #   Run Keyword If              '${status}' != 'OK'         FAIL
    #   ...                         msg=Failed as the status of Logical Interconnect is not equal to ok

CREATE Second SERVER PROFILE WITH LJBOD
    [Documentation]             This is used to create dynamic sp
    ${sasLogicalJBODS}=         Create List
    ${resp}=                    Fusion Api Get Resource     uri=/rest/server-hardware
    ${f}=                       get from list               ${hw_list}                  1
    ${uri}=                     get from dictionary         ${resp['members'][${f}]}    uri
    Power off Specific Server Hardware                      ${uri}
    Sleep                       15s
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary           ${advancesp2payload}        type    ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary           ${advancesp2payload}        type    ServerProfileV11
    ${serverHardwareUri}=       get from dictionary         ${resp['members'][${f}]}    serverHardwareTypeUri
    Set to dictionary           ${advancesp2payload}        serverHardwareUri           ${uri}
    Set to dictionary           ${advancesp2payload}        serverHardwareTypeUri       ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary         ${resp['members'][0]}       uri
    Set to dictionary           ${advancesp2payload}        enclosureGroupUri           ${uri}
    Remove From Dictionary      ${advancesp2payload}        name
    Set to dictionary           ${advancesp2payload}        name                        sp1
    ${localStorage}=            get from dictionary         ${advancesp2payload}        localStorage
    ${len}=                     Get length                  ${lists}
    ${division}=                Evaluate                    ${len}/2
    ${secondvalueofdisk}=       get from list               ${lists}                    ${division}
    Append To List              ${localStorage['sasLogicalJBODs']}                      ${secondvalueofdisk}
    Remove From Dictionary      ${advancesp2payload['localStorage']['sasLogicalJBODs'][0]}      id
    Set to dictionary           ${advancesp2payload['localStorage']['sasLogicalJBODs'][0]}      id      1
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesp2payload}        param=?force=ignoreServerHealth

    Remove From dictionary      ${advancesp2payload}    serverHardwareUri
    Remove From dictionary      ${advancesp2payload}    serverHardwareTypeUri
    Remove From dictionary      ${advancesp2payload}    enclosureGroupUri
    Remove From Dictionary      ${localStorage}         sasLogicalJBODs
    Set to dictionary           ${localStorage}         sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

    ${getonlogicalinterconnect}=                Fusion Api Get Resource
    ...                 uri=/rest/sas-logical-interconnects/
    # ${status}=        get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    # Run Keyword If    '${status}' != 'OK'     FAIL
    # ...               msg=Failed as the status of Logical Interconnect is not equal to ok

ADD LJBODS TO FIRST SERVER PROFILE
    [Documentation]     Edit of server profile on go
    [Arguments]         ${api}=${none}              ${headers}=${none}
    ${callforsp}=       Fusion Api Get Resource     uri=/rest/server-profiles
    ${getthepayload}=   get from dictionary         ${callforsp['members'][0]}                      localStorage
    ${urii}=            get from dictionary         ${callforsp['members'][0]}                      uri
    ${len}=             Get length                  ${lists}
    ${division}=        Evaluate                    ${len}/2
    :FOR                ${j}                        IN RANGE                1                       ${division}
    \                   ${secondvalueofdisk}=       get from list           ${lists}                ${j}
    \                   Remove From Dictionary      ${secondvalueofdisk}    id
    \                   ${need}=                    Evaluate                ${j}+${addone}
    \                   Set to dictionary           ${secondvalueofdisk}    id                      ${need}
    \                   Append To List              ${listtoaddljbods}      ${secondvalueofdisk}
    ${letssee}=         Get Length                  ${listtoaddljbods}
    :FOR                ${x}                        IN RANGE                0                       ${letssee}
    \                   ${getfinal}=                GET FROM LIST           ${listtoaddljbods}      ${x}
    \                   Append To List              ${getthepayload['sasLogicalJBODs']}             ${getfinal}
    Remove From Dictionary                          ${callforsp['members'][0]}                      localStorage
    Set to dictionary   ${callforsp['members'][0]}                          localStorage            ${getthepayload}
    ${resps} =          Fusion Api Edit Server Profile                      body=${callforsp['members'][0]}
    ...                 uri=${urii}
    ...                 api=${api}
    ...                 headers=${headers}
    ...                 param=?force=ignoreServerHealth
    ${headers}=         Get From Dictionary         ${resps}                headers
    ${spuri}=           Get From Dictionary         ${headers}              Location
    ${wait_time}=       Evaluate                    ${division}*90
    Wait Until Keyword Succeeds                     ${wait_time}s           10s                     Running State Again
    ...                 ${spuri}

ADD LJBODS TO SECOND SERVER PROFILE
    [Documentation]     Edit of server profile on go
    [Arguments]         ${api}=${none}              ${headers}=${none}
    ${callforsp}=       Fusion Api Get Resource     uri=/rest/server-profiles
    ${getthepayload}=   get from dictionary         ${callforsp['members'][1]}                      localStorage
    ${urii}=            get from dictionary         ${callforsp['members'][1]}                      uri
    ${len}=             Get length                  ${lists}
    ${division}=        Evaluate                    ${len}/2
    ${exactvalue}=      Evaluate                    ${division}+${addone}
    :FOR                ${j}                        IN RANGE                ${exactvalue}           ${len}
    \                   ${secondvalueofdisk}=       get from list           ${lists}                ${j}
    \                   Remove From Dictionary      ${secondvalueofdisk}    id
    \                   ${zero}=                    Evaluate                ${zero}+${addone}
    \                   Set to dictionary           ${secondvalueofdisk}    id                      ${zero}
    \                   Append To List              ${listtoaddljbodss}     ${secondvalueofdisk}
    ${letssee}=         Get Length                  ${listtoaddljbodss}
    :FOR                ${x}                        IN RANGE                0                       ${letssee}
    \                   ${getfinal}=                GET FROM LIST           ${listtoaddljbodss}     ${x}
    \                   Append To List              ${getthepayload['sasLogicalJBODs']}             ${getfinal}
    Remove From Dictionary                          ${callforsp['members'][1]}                      localStorage
    Set to dictionary   ${callforsp['members'][1]}                          localStorage            ${getthepayload}
    ${resps} =          Fusion Api Edit Server Profile                      body=${callforsp['members'][1]}     uri=${urii}
    ...                 api=${api}
    ...                 headers=${headers}
    ...                 param=?force=ignoreServerHealth
    ${headers}=         Get From Dictionary         ${resps}                headers
    ${spuri}=           Get From Dictionary         ${headers}              Location

    ${wait_time}=                   Evaluate        ${division}*90
    Wait Until Keyword Succeeds     ${wait_time}s   10s     Running State Again     ${spuri}

Delete All ServerProfile
    [Documentation]     Delete Server Profiles
    [Tags]              F177                        Smoke
    ${SPResp}=          Fusion Api Get Resource     uri=${serverProfileUri}
    ${length} =         Get Length                  ${SPResp['members']}
    Run keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${SPUri}=                   Set Variable            ${SPResp['members'][${x}]['uri']}
    \                   ${SPoutResp}=               Fusion Api delete Server Profile
    ...                 uri=${SPUri}                param=?force=True
    \                   ${response} =               get from dictionary     ${SPoutResp}    headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10s
    \                   ...                         Running State Again
    \                   ...                         ${uri}
    \                   ${getonlogicalinterconnect}=                        Fusion Api Get Resource
    \                   ...                         uri=/rest/sas-logical-interconnects/
    # \                 ${status}=                  get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    # \                 Run Keyword If              '${status}' != 'OK'     FAIL
    #\                  ...                         msg=Failed as the status of Logical Interconnect is not equal to ok

DELETE LOGICAL ENCLOSURE
    [Documentation]     Delete Specific Logical Enclosure, where Argument to be passed is   LE_Name
    [Arguments]         ${LEName}
    # It deletes the logical enclosure with the specified name
    ${resp}             Fusion Api Get Resource     uri=${logicalEnclosureUri}
    ${length} =         Get Length                  ${resp['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${resp['members'][${x}]['uri']}
    \                   ${resp1}=                   run keyword if          '${resp['members'][${x}]['name']}' == '${LEName}'
    \                   ...                         Fusion Api Delete Logical Enclosure
    \                   ...                         uri=${resp1_uri}
    \                   ...                         param=?force=True
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec      Running State Again
    \                   ...                         ${uri}

DELETE ALL LOGICAL ENCLOSURE
    [Documentation]     Delete All Logical Enclosure
    ${resp}             Fusion Api Get Resource     uri=${logicalEnclosureUri}
    ${length} =         Get Length                  ${resp['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${resp['members'][${x}]['uri']}
    \                   ${resp1}=                   Fusion Api Delete Logical Enclosure     uri=${resp1_uri}
    ...                 param=?force=True
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec      Running State Again
    \                   ...                         ${uri}

DELETE ENCLOSURE GROUP
    [Documentation]     Delete Specific Enclosure Group from the system
    [Arguments]         ${EGName}
    #                   It deletes the enclosure group with the specified name
    ${resp1}            Create List
    ${resp}             Fusion Api Get Resource     uri=${enclosureGroupUri}
    ${length} =         Get Length                  ${resp['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${resp['members'][${x}]['uri']}
    \                   ${resp1} =                  run keyword if          '${resp['members'][${x}]['name']}' == '${EGName}'
    \                   ...                         Fusion Api Delete Logical Enclosure
    \                   ...                         uri=${resp1_uri}        param=?force=True
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec      Running State Again
    \                   ...                         ${uri}

DELETE ALL ENCLOSURE GROUP
    [Documentation]     Delete Specific Enclosure Group from the system
    ${resp1}            Create List
    ${resp}             Fusion Api Get Resource     uri=${enclosureGroupUri}
    ${length} =         Get Length                  ${resp['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${resp['members'][${x}]['uri']}
    \                   ${resp1} =                  Fusion Api Delete Logical Enclosure     uri=${resp1_uri}
    \                   ...                         param=?force=True
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec
    \                   ...                         Running State Again
    \                   ...                         ${uri}

DELETE LOGICAL INTERCONNECT GROUP
    [Documentation]     Deletes LIGS from a given list \n
    [Arguments]         ${LIGName}
    # It deletes the lig with the given name
    ${getlig}=          Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups/
    ${length} =         Get Length                  ${getlig['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${getlig['members'][${x}]['uri']}
    \                   ${resp1}=                   run keyword if          '${getlig['members'][${x}]['name']}' == '${LIGName}'
    \                   ...                         Fusion Api Delete Lig   uri=${resp1_uri}
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec      Running State Again
    \                   ...                         ${uri}

DELETE ALL LOGICAL INTERCONNECT GROUP
    [Documentation]     Deletes LIGS from a given list
    ${getlig}=          Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups/
    ${length} =         Get Length                  ${getlig['members']}
    Run Keyword If      '${length}' == '0'          exitfromfunction
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${resp1_uri}=               Set Variable            ${getlig['members'][${x}]['uri']}
    \                   ${resp1}=                   Fusion Api Delete Lig   uri=${resp1_uri}
    \                   ${response} =               get from dictionary     ${resp1}        headers
    \                   ${uri}=                     get from dictionary     ${response}     Location
    \                   Wait Until Keyword Succeeds                         20 min          10 sec      Running State Again
    \                   ...                         ${uri}

exitfromfunction
    [DOCUMENTATION]     this is to return from the function
    [Return]            1

Power off Specific Server Hardware
    [Documentation]     Querys the appliance for all Servers and then Powers them off required server sent as Argument
    [Arguments]         ${ServerHWuri}
    # It is powering off Server Hardware with the specified uri
    ${body} =           Create Dictionary       powerState=Off
    ...                 powerControl=MomentaryPress
    Log                 Powering Specific Server HW                 console=True
    ${servers} =        Fusion Api Get Server Hardware
    ${resp_list} =      Create List
    :FOR                ${server}               IN                  @{servers['members']}
    \                   Continue For Loop If    '${server['powerState']}'!='On'
    \                   run keyword if          '${server['uri']}'=='${ServerHWuri}'    Log
    \                   ...                     Powering Off ${server['name']}, uri ${server['uri']}
    \                   ...                     console=True
    \                   ${resp} =               run keyword if      '${server['uri']}'=='${ServerHWuri}'
    \                   ...                     Fusion Api Edit Server Hardware Power State
    \                   ...                     body=${body}
    \                   ...                     uri=${server['uri']}
    \                   run keyword if          '${server['uri']}'=='${ServerHWuri}'    Append To List
    \                   ...                     ${resp_list}
    \                   ...                     ${resp}
    ${count} =          Get Length              ${resp_list}
    Run Keyword If      '${count}'=='0'         Log                 All servers were off, no need to Wait For Task
    Return From Keyword If                      '${count}'=='0'
    :FOR                ${resp}                 IN                  @{resp_list}
    \                   ${task} =               Wait For Task       ${resp}

Pre Conditions Check
    [DOCUMENTATION]     IT IS TO EMPTY ALL THE LISTS WHICH HAVE BEEN ADDED.
    PreCheck ICM Availability
    PreCheck ICM PowerStatus
    PreCheck DriveEnclosure PowerStatus
    ${value}=           Delete All ServerProfile
    Deletion of independent ljbods
    ${value}=           DELETE ALL LOGICAL ENCLOSURE
    ${value}=           DELETE ALL ENCLOSURE GROUP
    ${value}=           DELETE ALL LOGICAL INTERCONNECT GROUP
    GLOBAL VARIABLES CLEANUP

GLOBAL VARIABLES CLEANUP
    [DOCUMENTATION]     this is to cleanup all the global variables
    ${x}=               Get Length                  ${hw_list}
    :FOR                ${i}                        IN RANGE                0   ${x}
    \                   Remove From List            ${hw_list}              0
    ${r}=               Get Length                  ${lists}
    :For                ${p}                        IN RANGE                0   ${r}
    \                   Remove From List            ${lists}                0
    ${rr}=              Get Length                  ${listtoaddljbods}
    :For                ${pp}                       IN RANGE                0   ${rr}
    \                   Remove From List            ${listtoaddljbods}      0
    ${rrr}=             Get Length                  ${listtoaddljbodss}
    :For                ${ppp}                      IN RANGE                0   ${rrr}
    \                   Remove From List            ${listtoaddljbodss}     0
    ${xx}=              Get Length                  ${checkspdictionary}
    :For                ${ii}                       IN RANGE                0   ${xx}
    \                   Remove From Dictionary      ${checkspdictionary}    0

Teardown
    [Documentation]     This is to logout from appliance
    Fusion Api Logout Appliance

UPDATE FROM GROUP LE
    [Documentation]     to update from grp to remove error
    [Tags]              F176
    ${resp}=            Fusion Api Get Resource     uri=/rest/logical-enclosures
    ${LE_Length}=       Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                0               ${LE_Length}
    \
    \                   ${scopeuri}=                Get From Dictionary     ${resp['members'][${x}]}        uri
    \                   ${finaluri}=                Catenate                SEPARATOR=/     ${scopeuri}     ${uriiii}
    \                   ${resp1} =                  Fusion Api Edit Lig     ${payloadoflogicalenclosureupdatefromgroup}
    \                   ...                         ${finaluri}
    \                   ${headers}=                 Get From Dictionary     ${resp1}        headers
    \                   ${location}=                get from dictionary     ${headers}      Location
    \                   Wait Until Keyword Succeeds                         1200s           10s             Running State Again
    \                   ...                         ${location}

CONVERSION OF SAS LIG FROM DUAL DOMAIN TO SINGLE DOMAIN
    [Documentation]             this is to convert LIG from dual domain to single domain
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/enclosures
    ${enclosureType}=           get from dictionary     ${resp['members'][0]}   enclosureType
    Remove from dictionary      ${advanceligpayloadforsingledomain}             enclosureType
    Set to dictionary           ${advanceligpayloadforsingledomain}             enclosureType
    ...                         ${enclosureType}
    ${response}=                Fusion Api Get Resource                         uri=/rest/sas-logical-interconnect-groups
    ${resp_uri}                 Get From Dictionary     ${response['members'][0]}               uri
    ${resp} =                   Fusion Api Edit Lig     ${advanceligpayloadforsingledomain}     ${resp_uri}
    ${respurii}                 Get From Dictionary     ${resp}                 uri
    Wait Until Keyword Succeeds                         1200s                   10s             Running State Again
    ...                         ${respurii}

CONVERSION OF SAS LIG FROM SINGLE DOMAIN TO DUAL DOMAIN
    [Documentation]     this is to convert lig from single to double domain

    ${resp}=                        Fusion Api Get Resource     uri=/rest/enclosures
    ${enclosureType}=               get from dictionary         ${resp['members'][0]}       enclosureType
    Remove from dictionary          ${advanceligpayload}        enclosureType
    Set to dictionary               ${advanceligpayload}        enclosureType               ${enclosureType}
    ${response}=                    Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${resp_uri}                     Get From Dictionary         ${response['members'][0]}   uri
    ${resp} =                       Fusion Api Edit Lig         ${advanceligpayload}        ${resp_uri}
    ${respurii}                     Get From Dictionary         ${resp}                     uri
    Wait Until Keyword Succeeds     1200s                       10s                         Running State Again     ${respurii}

UNASSIGN HARDWARE FROM SERVER HARDWARE
    [Documentation]     editing server profile to unassigned
    [Arguments]         ${sp_id}    ${headers}=${None}      ${api}=${None}

    ${resp}=                    Fusion Api Get Resource             uri=/rest/server-profiles/
    ${eTag}=                    get from dictionary                 ${resp['members'][${sp_id}]}        eTag
    ${uri}=                     get from dictionary                 ${resp['members'][${sp_id}]}        uri
    ${getonuri}=                Fusion Api Get Resource             uri=${uri}
    ${serverhardwareuri}=       get from dictionary                 ${getonuri}                 serverHardwareUri
    ${serverhardwaretypeuri}=   get from dictionary                 ${getonuri}                 serverHardwareTypeUri
    ${name}=                    get from dictionary                 ${resp['members'][${sp_id}]}        name
    ${enclosurebay}=            get from dictionary                 ${getonuri}                 enclosureBay
    ${serialNumber}=            get from dictionary                 ${resp['members'][${sp_id}]}        serialNumber
    ${uuid}=                    get from dictionary                 ${resp['members'][${sp_id}]}        uuid
    ${scopeuri}=                get from dictionary                 ${resp['members'][${sp_id}]}        scopesUri
    ${localStorage}=            get from dictionary                 ${resp['members'][${sp_id}]}        localStorage
    ${checkit}=                 Fusion Api Get Resource             uri=/rest/enclosure-groups/
    ${urii}=                    get from dictionary                 ${checkit['members'][0]}    uri
    Set to dictionary           ${unassignedhw}                     scopesUri                   ${scopeuri}
    Set to dictionary           ${unassignedhw}                     enclosureGroupUri           ${urii}
    Set to dictionary           ${unassignedhw}                     uuid                        ${uuid}
    Set to dictionary           ${unassignedhw}                     serialNumber                ${serialNumber}
    Set to dictionary           ${unassignedhw}                     enclosureUri                ${check}
    Set to dictionary           ${unassignedhw}                     name                        ${name}
    Set to dictionary           ${unassignedhw}                     eTag                        ${eTag}
    Set to dictionary           ${unassignedhw}                     uri                         ${uri}
    Set to dictionary           ${unassignedhw}                     serverHardwareUri           ${check}
    Set to dictionary           ${unassignedhw}                     serverHardwareTypeUri       ${serverhardwaretypeuri}
    Set to dictionary           ${unassignedhw}                     enclosureBay                ${check}
    Set to dictionary           ${unassignedhw}                     localStorage                ${localStorage}
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary                   ${unassignedhw}             type    ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary                   ${unassignedhw}             type    ServerProfileV11
    ${resps} =                  Fusion Api Edit Server Profile      body=${unassignedhw}        uri=${uri}
    ...                         api=${api}
    ...                         headers=${headers}
    ...                         param=?force=ignoreServerHealth
    ${headers}=                 Get From Dictionary                 ${resps}                    headers
    ${spuri}=                   Get From Dictionary                 ${headers}                  Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

ASSIGN ANOTHER HARDWARE TO THE SERVER PROFILE
    [Documentation]             assigning hardware again to server profile
    [Arguments]                 ${sp_id}                    ${sw_hw_id}                     ${headers}=${None}
    ...                         ${api}=${None}
    ${resp}=                    Fusion Api Get resource     uri=/rest/server-profiles/
    ${uri}=                     get from dictionary         ${resp['members'][${sp_id}]}    uri
    ${resp1}=                   Fusion Api Get Resource     uri=${uri}
    ${seeresp}=                 Fusion Api Get Resource     uri=/rest/enclosures
    ${resp11}=                  Fusion Api Get Resource     uri=/rest/server-hardware
    ${sw_hw_id_int}=            Convert To Integer          ${sw_hw_id}
    ${f}=                       get from list               ${hw_list}                      ${sw_hw_id_int}
    ${serverHardwareUri}=       get from dictionary         ${resp11['members'][${f}]}      uri
    ${enclosureUri}=            get from dictionary         ${seeresp['members'][0]}        uri
    ${name}=                    get from dictionary         ${resp11['members'][${f}]}      name
    ${enclosureBay}=            Get Substring               ${name}                         16
    ${serverHardwareTypeUri}=   get from dictionary         ${resp11['members'][${f}]}      serverHardwareTypeUri

    Remove from dictionary      ${resp1}                enclosureUri
    Remove From Dictionary      ${resp1}                enclosureBay
    Remove From Dictionary      ${resp1}                enclosureHardwareUri
    Remove From Dictionary      ${resp1}                serverHardwareUri
    Remove From dictionary      ${resp1}                status_code
    Remove From Dictionary      ${resp1}                headers
    Remove From Dictionary      ${resp1}                serverHardwareTypeUri
    Set to dictionary           ${resp1}                enclosureUri            ${enclosureUri}
    Set to dictionary           ${resp1}                enclosureBay            ${enclosureBay}
    Set to dictionary           ${resp1}                serverHardwareUri       ${serverHardwareUri}
    Set to dictionary           ${resp1}                serverHardwareTypeUri   ${serverHardwareTypeUri}
    Power off Specific Server Hardware                  ${serverHardwareUri}
    Sleep                       15s
    ${resps} =                  Fusion Api Edit Server Profile                  body=${resp1}   uri=${uri}      api=${api}
    ...                         headers=${headers}
    ...                         param=?force=ignoreServerHealth
    ${headers}=                 Get From Dictionary     ${resps}                headers
    ${spuri}=                   Get From Dictionary     ${headers}              Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

DOWNLOAD LOGICAL ENCLOSURE SUPPORT DUMP

    [Documentation]     this is used to collect the support dump of the code upto double domain creation
    [Tags]              F176
    ${time}=            Get Time                    epoch
    ${stime}=           Convert to string           ${time}
    ${Sdump_name}=      set variable                ${stime}.sdmp
    logger              ${Sdump_name}
    ${test}=            Fusion Api Get Resource     uri=/rest/logical-enclosures
    ${uri}=             get from dictionary         ${test['members'][0]}   uri
    ${urii}=            Fetch From Right            ${uri}                  /
    ${uriii}=           Fetch From Left             ${urii}                 ,
    ${resp}=            fusion_api_get_logical_enclosure_support_dump       ${supportpayload}   ${uriii}
    ${headers}=         get from dictionary         ${resp}                 headers
    ${location}=        get from dictionary         ${headers}              Location
    Wait Until Keyword Succeeds                     1800s                   10s                 Running State Again
    ...                 ${location}
    ${response}=        Fusion Api Get Resource     uri=${location}
    ${associated}=      get from dictionary         ${response}             associatedResource
    ${resourceuri}=     get from dictionary         ${associated}           resourceUri
    ${resps}=           Fusion Api Download Support Dump                    uri=${resourceuri}
    ...                 localfile=${Sdump_name}

ADD LJBODS TO FIRST SERVER PROFILE With Maximum Capacity Possible
    [Documentation]     This will add ljbods to first server profile with maximum capacity possible.
    [Arguments]         ${api}=${none}              ${headers}=${none}
    ${callforsp}=       Fusion Api Get Resource     uri=/rest/server-profiles
    ${getthepayload}=   get from dictionary         ${callforsp['members'][0]}                      localStorage
    ${urii}=            get from dictionary         ${callforsp['members'][0]}                      uri
    ${len}=             Get length                  ${lists}
    ${division}=        Evaluate                    ${len}/1
    :FOR                ${j}                        IN RANGE                1                       ${division}
    \                   ${secondvalueofdisk}=       get from list           ${lists}                ${j}
    \                   Remove From Dictionary      ${secondvalueofdisk}    id
    \                   ${need}=                    Evaluate                ${j}+${addone}
    \                   Set to dictionary           ${secondvalueofdisk}    id                      ${need}
    \                   Append To List              ${listtoaddljbods}      ${secondvalueofdisk}
    ${letssee}=         Get Length                  ${listtoaddljbods}
    :FOR                ${x}                        IN RANGE                0                       ${letssee}
    \                   ${getfinal}=                GET FROM LIST           ${listtoaddljbods}      ${x}
    \                   Append To List              ${getthepayload['sasLogicalJBODs']}             ${getfinal}
    Remove From Dictionary                          ${callforsp['members'][0]}                      localStorage
    Set to dictionary   ${callforsp['members'][0]}                          localStorage            ${getthepayload}
    ${resps} =          Fusion Api Edit Server Profile                      body=${callforsp['members'][0]}     uri=${urii}
    ...                 api=${api}
    ...                 headers=${headers}
    ...                 param=?force=ignoreServerHealth
    ${headers}=         Get From Dictionary         ${resps}                headers
    ${spuri}=           Get From Dictionary         ${headers}              Location

    ${wait_time}=                   Evaluate        ${division}*90
    Wait Until Keyword Succeeds     ${wait_time}s   10s     Running State Again     ${spuri}

DFRM GET SAS HDD DRIVE LIST FOR LJBOD
    [Documentation]     Gets Drive List of SAS HDD drives from the available inventory
    #Get The Number Of Drives Present
    Log                 ${lists}
    ${totalDrv}=        get length              ${lists}
    ${SAS_HDD_List}=    create list
    :FOR                ${drvLoop}              IN RANGE            0   ${totalDrv}
    \                   Run keyword IF          '${lists[${drvLoop}]['driveTechnology']}' == 'SasHdd'
    ...                 append to list          ${SAS_HDD_List}     ${lists[${drvLoop}]}
    ...                 ELSE                    continue for loop
    \                   Log                     ${lists[${drvLoop}]['driveTechnology']}
    \                   Log                     ${lists[${drvLoop}]}
    Log                 ${SAS_HDD_List}
    [Return]            ${SAS_HDD_List}
    #Search for the disk in different bays      ${SAS_HDD_List}

DFRM GET SAS SSD DRIVE LIST FOR LJBOD
    [Documentation]     Gets Drive List of SAS SSD drives from the available inventory
    Get The Number Of Drives Present
    Log                 ${lists}
    ${totalDrv}=        get length          ${lists}
    ${SAS_SSD_List}=    create list
    :FOR                ${drvLoop}          IN RANGE            0   ${totalDrv}
    \                   Run keyword IF      '${lists[${drvLoop}]['driveTechnology']}' == 'SaSsd'
    ...                 append to list      ${SAS_SSD_List}     ${lists[${drvLoop}]}
    ...                 ELSE                continue for loop
    \                   Log                 ${lists[${drvLoop}]['driveTechnology']}
    \                   Log                 ${lists[${drvLoop}]}
    Log                 ${SAS_SSD_List}
    [Return]            ${SAS_SSD_List}

DFRM GET SATA HDD DRIVE LIST FOR LJBOD
    [Documentation]     Gets Drive List of SATA HDD drives from the available inventory
    Get The Number Of Drives Present
    Log                 ${lists}
    ${totalDrv}=        get length          ${lists}
    ${SATA_HDD_List}=   create list
    :FOR                ${drvLoop}          IN RANGE            0   ${totalDrv}
    \                   Run keyword IF      '${lists[${drvLoop}]['driveTechnology']}' == 'SataHdd'
    ...                 append to list      ${SATA_HDD_List}    ${lists[${drvLoop}]}
    ...                 ELSE                continue for loop
    \                   Log                 ${lists[${drvLoop}]['driveTechnology']}
    \                   Log                 ${lists[${drvLoop}]}
    Log                 ${SATA_HDD_List}
    [Return]            ${SATA_HDD_List}

DFRM GET SATA SSD DRIVE LIST FOR LJBOD
    [Documentation]     Gets Drive List of SATA SSD drives from the available inventory
    Get The Number Of Drives Present
    Log                 ${lists}
    ${totalDrv}=        get length          ${lists}
    ${SATA_SSD_List}=   create list
    :FOR                ${drvLoop}          IN RANGE            0   ${totalDrv}
    \                   Run keyword IF      '${lists[${drvLoop}]['driveTechnology']}' == 'SataSsd'
    ...                 append to list      ${SATA_SSD_List}    ${lists[${drvLoop}]}
    ...                 ELSE                continue for loop
    \                   Log                 ${lists[${drvLoop}]['driveTechnology']}
    \                   Log                 ${lists[${drvLoop}]}
    Log                 ${SATA_SSD_List}
    [Return]            ${SATA_SSD_List}

GET REQUIRED DISK FOR LJBOD
    [Documentation]     Creates a list of required type of disks for LJBOD
    [Arguments]         ${Disk_Type}
    Log                 ${Disk_Type}
    ${Disk_List}=       create list
    ${Disk_List}=       Run keyword IF      '${Disk_Type}' == 'SASHDD'      DFRM GET SAS HDD DRIVE LIST FOR LJBOD
    ...                 ELSE IF             '${Disk_Type}' == 'SASSSD'      DFRM GET SAS SSD DRIVE LIST FOR LJBOD
    ...                 ELSE IF             '${Disk_Type}' == 'SATAHDD'     DFRM GET SATA HDD DRIVE LIST FOR LJBOD
    ...                 ELSE IF             '${Disk_Type}' == 'SATASSD'     DFRM GET SATA SSD DRIVE LIST FOR LJBOD

    Log         ${Disk_List}
    [Return]    ${Disk_List}

######################################################################################################################

Soft Reset Of Interconnect
    [Documentation]     this is to soft reset the interconnects
    [Arguments]         ${baynumber}
    ${resp1}=           Fusion Api Get Resource     uri=/rest/sas-interconnects/
    ${length}=          get length                  ${resp1['members']}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${locationentries}=         get from dictionary     ${resp1['members'][${x}]['interconnectLocation']}
    \                   ...                         locationEntries
    \                   extractbaynumber            ${locationentries}      ${baynumber}

    ${uri}=         get from dictionary             ${resp1['members'][${x}]}   uri
    ${resp} =       fusion api patch interconnect   body=${interconnect_softresets}
    ...             uri=${uri}
    ${Headers}=     get from dictionary             ${resp}                     headers
    ${Location}=    get from dictionary             ${Headers}                  Location
    Wait Until Keyword Succeeds                     20min                       5 sec   Running State Again
    ...             ${Location}
    [Return]        ${uri}

extractbaynumber
    [Documentation]     this is to extract the bay number
    [Arguments]         ${locationentry}    ${baynum}
    ${length}=          Get Length          ${locationentry}
    :FOR                ${y}                IN RANGE            0   ${length}
    \                   ${value}=           Run Keyword If      '${locationentry[${y}]['type']}'=='Bay'     extractingbay
    \                   ...                 ${locationentry}
    \                   ...                 ${y}
    \                   ...                 ${baynum}
    \                   Run Keyword If      ${value}==1         Exit For Loop
    Run Keyword If      ${value}==1         Exit For Loop

extractingbay
    [Documentation]     this is to extract the uri of the particular bay number
    [Arguments]         ${locationentries}      ${xs}                       ${baynumber}
    ${baynum}=          get from dictionary     ${locationentries[${xs}]}   value
    ${countervalue}=    Run Keyword If          ${baynum}==${baynumber}     setthecounter
    [Return]            ${countervalue}

setthecounter
    [Documentation]     this is to set the counter
    ${counterofbay}=    BuiltIn.Set Variable    1
    [Return]            ${counterofbay}

Hard Reset Of Interconnect
    [Documentation]     this is to hard reset the interconnect
    [Arguments]         ${baynumber}
    ${resp1}=           Fusion Api Get Resource     uri=/rest/sas-interconnects/
    ${length}=          get length                  ${resp1['members']}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${locationentries}=         get from dictionary     ${resp1['members'][${x}]['interconnectLocation']}
    \                   ...                         locationEntries
    \                   extractbaynumber            ${locationentries}      ${baynumber}

    ${uri}=         get from dictionary             ${resp1['members'][${x}]}   uri
    ${resp} =       fusion api patch interconnect   body=${interconnect_hardreset}
    ...             uri=${uri}
    ${Headers}=     get from dictionary             ${resp}                     headers
    ${Location}=    get from dictionary             ${Headers}                  Location
    Wait Until Keyword Succeeds                     20min                       5 sec   Running State Again
    ...             ${Location}
    [Return]        ${uri}

Efuse Interconnect
    [Documentation]     Efuse ICM command
    [Arguments]         ${Action}                   ${ICBay}
    ${resp}=            Fusion Api Get Resource     uri=/rest/enclosures
    ${serialnumber}=    get from dictionary         ${resp['members'][0]}   serialNumber
    SSHLibrary.Open Connection                      ${FUSION_IP}
    ${login}            SSHLibrary.Login            root                    hpvse1
    ${EM1}              SSHLibrary.Execute Command
    ...                 /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${serialnumber}

    ${EM}       catenate    SEPARATOR=      ${EM1}%bond0
    ${EMN}=     Catenate    SEPARATOR=      [           ${EM}
    ${EMNEW}=   CATENATE    SEPARATOR=      ${EMN}      ]

    ${XAUTH}                SSHLibrary.Execute Command
    ...                     /ci/bin/tbird/appliance-hal.sh get-enclosure-credentials -s ${serialnumber} -o t
    ${efuse_operation}      SSHLibrary.Execute Command
    ...                     curl -ks -H"X-Auth-Token:${XAUTH}" -X POST https://${EMNEW}/rest/v1/InterconnectBays/${ICBay} -d '{"Action":"${Action}"}'

POWER OFF INTERCONNECT

    [Documentation]     Power Off Interconnect
    [Arguments]         ${baynumber}
    ${resp1}=           Fusion Api Get Resource     uri=/rest/sas-interconnects/
    ${length}=          get length                  ${resp1['members']}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${locationentries}=         get from dictionary     ${resp1['members'][${x}]['interconnectLocation']}
    \                   ...                         locationEntries
    \                   extractbaynumber            ${locationentries}      ${baynumber}

    ${uri}=         get from dictionary             ${resp1['members'][${x}]}   uri
    ${resp} =       fusion api patch interconnect   body=${interconnect_poweroff}
    ...             uri=${uri}
    ${header}=      get from dictionary             ${resp}                     headers
    ${Location}=    get from dictionary             ${header}                   Location
    Wait Until Keyword Succeeds                     1200s                       10s     Running State Again
    ...             ${Location}

POWER ON INTERCONNECT
    [Documentation]     Power Off Interconnect
    [Arguments]         ${baynumber}
    ${resp1}=           Fusion Api Get Resource     uri=/rest/sas-interconnects/
    ${length}=          get length                  ${resp1['members']}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${locationentries}=         get from dictionary     ${resp1['members'][${x}]['interconnectLocation']}
    \                   ...                         locationEntries
    \                   extractbaynumber            ${locationentries}      ${baynumber}

    ${uri}=         get from dictionary             ${resp1['members'][${x}]}   uri
    ${resp} =       fusion api patch interconnect   body=${interconnect_poweron}
    ...             uri=${uri}
    ${header}=      get from dictionary             ${resp}                     headers
    ${Location}=    get from dictionary             ${header}                   Location
    Wait Until Keyword Succeeds                     1200s                       10s     Running State Again
    ...             ${Location}

Getting all the active alerts

    [Documentation]         this is to get the list of all active alerts
    [Arguments]             ${prev_alert_cnt}
    ${resp}=                Fusion Api Get resource     uri=/rest/alerts
    ${Curr_alert_Cnt}=      Get Length                  ${resp['members']}
    ${length}=              Evaluate                    ${Curr_alert_Cnt}-${prev_alert_cnt}
    Log                     ${length}
    :FOR                    ${x}                        IN RANGE                    0               ${length}
    \                       ${alertstate}=              get from dictionary         ${resp['members'][${x}]}    alertState
    \                       Run Keyword If              '${alertstate}'=='Locked'   addingtolist    ${x}
    \                       Run Keyword If              '${alertstate}'=='Active'   addingtolist    ${x}

    ${length}=              Get Length                  ${listforalertindex}
    ${resp}=                Fusion Api Get Resource     uri=/rest/alerts
    :FOR                    ${x}                        IN RANGE                0                       ${length}
    \                       ${index}=                   Get From List           ${listforalertindex}    ${x}
    \                       ${value}=                   get from dictionary     ${resp['members'][${index}]}    alertTypeID
    \                       Append To List              ${listofalertvalues}    ${value}
    ${listofalertvalues}=   Remove Duplicates           ${listofalertvalues}
    [Return]                ${listofalertvalues}

Get Alerts Count
    [Documentation]     To Get Alerts Count
    ${resp}=            Fusion Api Get resource     uri=/rest/alerts
    ${length}=          Get Length                  ${resp['members']}
    [Return]            ${length}

addingtolist
    [Documentation]     Adding elements to the list
    [Arguments]         ${index}
    Append To List      ${listforalertindex}    ${index}

Drive Enclosure Power on
    [Documentation]                 Power On Drive enclosure
    [Arguments]                     ${driveuris}
    ${PowerOnPayload}=              Build Action Payload    powerState          On
    ${PowerOnResp}=                 Fusion Api Patch Drive Enclosure            ${PowerOnPayload}       uri=${driveuris}
    ${headers}=                     get from dictionary     ${PowerOnResp}      headers
    ${Location}=                    get from dictionary     ${headers}          Location
    Wait Until Keyword Succeeds     1200s                   10s                 Running State Again     ${Location}

Drive Enclosure Power off
    [Documentation]                 Power Off Drive enclosure
    [Arguments]                     ${driveuris}
    ${PowerOffPayload}=             Build Action Payload    powerState          Off
    ${PowerOffResp}=                Fusion Api Patch Drive Enclosure            ${PowerOffPayload}      uri=${driveuris}
    ${headers}=                     get from dictionary     ${PowerOffResp}     headers
    ${Location}=                    get from dictionary     ${headers}          Location
    Wait Until Keyword Succeeds     1200s                   10s                 Running State Again     ${Location}

Drive Enclosure Reset
    [Documentation]     It is to reset the drive enclosure
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${length}=          Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                0               ${length}
    \                   ${eachRespUri}=             Get From Dictionary     ${resp['members'][${x}]}    uri
    \                   ${response}=                Fusion Api Patch Drive Enclosure        ${payloadforresetofdriveneclosure}
    \                   ...                         uri=${eachRespUri}
    \                   ${headers}=                 get from dictionary     ${response}     headers
    \                   ${Location}=                get from dictionary     ${headers}      Location
    \                   Wait Until Keyword Succeeds                         1200s           10s         Running State Again
    \                   ...                         ${Location}

Validation after performing hard reset on drive enclosure
    [Documentation]     This is to check whether the drive enclosure is ok state after performing hard reset.
    ${resp}=            Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=             Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                0   ${len}
    \                   ${status}=                  get from dictionary     ${resp['members'][${x}]}    status
    \                   Run Keyword If              '${status}' != 'OK'     Fail
    \                   ...                         msg=Drive enclosure is not in good state after performing hard rese
    ValidationoflLISPLJBODstatus

ValidationoflLISPLJBODstatus
    [Documentation]     this si to validate the status of LI, and server profile
    # Validate SAS Logical interconnect status
    ${liresp}=          Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_Length}=       Get length                  ${liresp['members']}
    :FOR                ${x}                        IN RANGE                0       ${LI_Length}
    \                   Log                         ${liresp['members'][${x}]}
    \                   ${status}=                  get from dictionary     ${liresp['members'][${x}]}          status
    \                   Log                         ${status}
    \                   Run Keyword If              '${status}'!='OK'       Fail
    \                   ...                         msg=Logical Interconnect is not in good state.
    # Validate Server Profile Status
    ${spresp}=          Fusion Api Get Resource     uri=/rest/server-profiles
    ${SP_Length}=       Get length                  ${spresp['members']}
    :FOR                ${x}                        IN RANGE                0       ${SP_Length}
    \                   Log                         ${spresp['members'][${x}]}
    \                   ${status}=                  get from dictionary     ${spresp['members'][${x}]}          status
    \                   Log                         ${status}
    \                   Run Keyword If              '${status}'!='OK'       Fail    msg=Server Profile is not in good state.
    # Validate Logical JBOD's status
    ${ljbodresponse}=   Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${LJBOD_Length}=    Get length                  ${ljbodresponse['members']}
    :FOR                ${x}                        IN RANGE                0       ${LJBOD_Length}
    \                   Log                         ${ljbodresponse['members'][${x}]}
    \                   ${status}=                  get from dictionary     ${ljbodresponse['members'][${x}]}   status
    \                   Log                         ${status}
    \                   Run Keyword If              '${status}'!='OK'       Fail    msg=Independent Ljbod are not in good state.

Validation Of Soft Reset
    [Documentation]     this is to validate the interconnect,LI,SP status
    [Arguments]         ${urii}
    ${response}=        Fusion Api Get Resource     uri=${urii}
    ${status}=          get from dictionary         ${response}     status
    Run Keyword If      '${status}'!='OK'           Fail
    ...                 msg=Interconnect is not in good state after performing soft reset.
    ValidationoflLISPLJBODstatus

Validation Of Hard Reset
    [Documentation]     this is to validate the interconnect,LI,SP status
    [Arguments]         ${urii}
    ${response}=        Fusion Api Get Resource     uri=${urii}
    ${status}=          get from dictionary         ${response}     status
    Run Keyword If      '${status}'!='OK'           Fail
    ...                 msg=Interconnect is not in good state after performing Hard reset.
    ValidationoflLISPLJBODstatus

####################################################################################################################
validation of test alerts
    [Documentation]     this is the validation for alerts
    [Arguments]         ${listofactivealerts}       ${listofpredefinedalerts}
    ${length}=          Get length                  ${listofactivealerts}
    :FOR                ${j}                        IN RANGE    0                       ${length}
    \                   checkforalertsinpredefine   ${j}        ${listofactivealerts}   ${listofpredefinedalerts}

    compare the lists   ${listofactivealerts}   ${listofpredefinedalerts}

checkforalertsinpredefine
    [Documentation]     this is compare the alert with predefined alerts
    [Arguments]         ${y}                    ${listofactivealert}    ${listofpredefinedalert}
    ${value}=           Get From List           ${listofactivealert}    ${y}
    ${len}=             Get Length              ${listofpredefinedalert}
    :FOR                ${i}                    IN RANGE                0       ${len}
    \                   ${predefinevalue}=      Get From List           ${listofpredefinedalert}            ${i}
    \                   ${sum}=                 Run Keyword If          '${value}'=='${predefinevalue}'     increasecounter
    \                   Run Keyword If          ${sum}==1               Exit For Loop
    Run Keyword If      ${sum}==1               changethevalueoflist    ${y}    ${listofactivealert}
    ...                 ${listofpredefinedalert}

changethevalueoflist
    [Documentation]     this is to change the value of list
    [Arguments]         ${x}                    ${listofactivealerts}   ${listofpredefinedalerts}
    Remove From List    ${listofactivealerts}   ${x}
    Insert Into List    ${listofactivealerts}   ${x}                    ${stringvalue}

increasecounter
    [Documentation]         this is to increase the counter
    ${counterofalerts}=     Set Variable    1
    [Return]                ${counterofalerts}

compare the lists
    [Documentation]     this is to check the count of number of 1s present.
    [Arguments]         ${listofactivealert}    ${listofpredefinedalert}    ${countnumberofones}=0
    ${length}=          Get Length              ${listofpredefinedalert}
    ${len}=             Get Length              ${listofactivealert}
    ${temp-Value}=      set variable            0
    :FOR                ${i}                    IN RANGE                    0   ${len}

    \       ${value}=               Get from list       ${listofactivealert}    ${i}
    \       ${temp-Value}=          Run Keyword If      '${value}'=='1'         Set Variable    1
    ...     ELSE                    Set Variable        0
    \       ${countnumberofones}=   Evaluate            ${countnumberofones}+${temp-Value}

#   \       ${countnumberofones}=   Run Keyword If      '${value}'=='1'     Evaluate    ${countnumberofones}+1
#   ...     ELSE                    switchingfunction   ${countnumberofones}

    Run keyword if      ${countnumberofones} != ${length}   Fail    msg=some alerts missing

switchingfunction
    [Documentation]     this is to switch function
    [Arguments]         ${countones}
    [Return]            ${countones}

Clear Off List
    [Documentation]     this is to clear the lists
    ${len}=             Get Length          ${listforalertindex}
    :FOR                ${i}                IN RANGE                0   ${len}
    \                   Remove From List    ${listforalertindex}    0
    \                   Remove From List    ${listofalertvalues}    0

CREATION OF INDEPENDENT LJBODS
    [Documentation]             this is to create independent ljbods
    ${driveenclosurelist}=      Create List

    ${response}=    Fusion Api Get Resource     uri=/rest/sas-interconnects
    ${saslogicalinterconnecturi}=               Get From Dictionary     ${response['members'][0]}   sasLogicalInterconnectUri
    ${resp}=        Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${len}=         Get Length                  ${resp['members']}
    :FOR            ${x}                        IN RANGE                0   ${len}
    \               ${uri}=                     get from dictionary     ${resp['members'][${x}]}    uri
    \               Append To List              ${driveenclosurelist}   ${uri}

    ${secondvalueofdisk}=       get from list           ${lists}                1
    ${minsize}=                 get from dictionary     ${secondvalueofdisk}    driveMinSizeGB
    ${maxsize}=                 get from dictionary     ${secondvalueofdisk}    driveMaxSizeGB
    ${sminsize}=                Convert To String       ${minsize}
    ${smaxsize}=                Convert to string       ${maxsize}
    Set to dictionary           ${independentljbodpayload}                      minSizeGB           ${sminsize}
    Set to dictionary           ${independentljbodpayload}                      maxSizeGB           ${smaxsize}
    ${drivetechno}=             get from dictionary     ${secondvalueofdisk}    driveTechnology
    ${length}=                  Get Length              ${drivetechno}
    ${deviceinterface}=         Run Keyword If          ${length}==6            itissas
    ...                         ELSE                    itissata
    ${drivemedia}=              Run keyword if          ${length}==6            finddrivemediasas   ${drivetechno}
    ...                         ELSE                    finddrivemediasata      ${drivetechno}
    Set to dictionary           ${independentljbodpayload}                      sasLogicalInterconnectUri
    ...                         ${saslogicalinterconnecturi}
    Set to dictionary           ${independentljbodpayload}                      driveEnclosureUris
    ...                         ${driveenclosurelist}
    ${drivetechnology}=         Create Dictionary
    Set to dictionary           ${independentljbodpayload}                      driveTechnology     ${drivetechnology}
    Set to dictionary           ${independentljbodpayload['driveTechnology']}   deviceInterface     ${deviceinterface}
    Set to dictionary           ${independentljbodpayload['driveTechnology']}   driveMedia          ${drivemedia}
    ${resp}=                    fusion_api_post_sas_logical_jbods               ${independentljbodpayload}
    Remove From Dictionary      ${independentljbodpayload}                      sasLogicalInterconnectUri
    Remove From Dictionary      ${independentljbodpayload}                      driveEnclosureUris
    Remove From Dictionary      ${independentljbodpayload}                      drivetechnology
    ${headers}=                 get from dictionary     ${resp}                 headers
    ${Location}=                get from dictionary     ${headers}              Location
    Wait Until Keyword Succeeds                         20min                   10s                 Running State Again
    ...                         ${Location}

finddrivemediasata
    [Documentation]     This is tgo extract the drive media
    [Arguments]         ${drivetech}
    ${drivemedias}=     Get Substring           ${drivetech}    4   7
    ${cdrivemedias}=    Convert To Uppercase    ${drivemedias}

    [Return]    ${cdrivemedias}

finddrivemediasas
    [Documentation]     this is to extract the drive media
    [Arguments]         ${drivetech}
    ${drivemedias}=     Get Substring           ${drivetech}    3   6
    ${cdrivemedias}=    Convert To Uppercase    ${drivemedias}
    [Return]            ${cdrivemedias}

itissas
    [Documentation]     The Disk Is SAS
    [Return]            ${sas}

itissata
    [Documentation]     THE DISK IS SATA
    [Return]            ${sata}

Deletion of independent ljbods
    [Documentation]     This is to delete independent ljbod
    ${resp}=            fusion_api_get_sas_logical_jbods        uri=/rest/sas-logical-jbods
    ${len}=             Get Length      ${resp['members']}
    :FOR                ${x}            IN RANGE                0               ${len}
    \                   ${resp1}=       fusion_api_get_sas_logical_jbods        uri=/rest/sas-logical-jbods
    \                   ${uri}=         get from dictionary     ${resp1['members'][0]}      uri
    \                   ${resp}=        fusion_api_delete_sas_logical_jbods     uri=${uri}
    \                   ${headers}=     get from dictionary     ${resp}         headers
    \                   ${Location}=    get from dictionary     ${headers}      Location
    \                   Wait Until Keyword Succeeds             1200s           5s          Running State Again     ${Location}

Edit Of Independent LJBOD
    [Documentation]             This is to edit the independent ljbod
    ${resp}=                    fusion_api_get_sas_logical_jbods    uri=/rest/sas-logical-jbods
    Logger                      ${resp}
    ${uri}=                     get from dictionary                 ${resp['members'][0]}   uri
    Remove from dictionary      ${resp['members'][0]}               name
    Set to dictionary           ${resp['members'][0]}               name                    ${editedjbodname}
    Remove from dictionary      ${resp['members'][0]}               description
    Set to dictionary           ${resp['members'][0]}               description             ${description}
    Remove from dictionary      ${resp['members'][0]}               eraseData
    Set to dictionary           ${resp['members'][0]}               eraseData               ${False}

    ${response}=                    fusion_api_patch_sas_logical_jbods      ${editofindependentljbod}   uri=${uri}
    ${headers}=                     get from dictionary     ${response}     headers
    ${Location}=                    get from dictionary     ${headers}      Location
    Wait Until Keyword Succeeds     20min                   10s             Running State Again         ${Location}

###########################################GURU SIR#################################################
search for the disk in different bays
    [Documentation]     this is to search for the different bays disk
    [Arguments]         ${listforsearch}
    ${response}=        Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${listforuri}=      Create List
    ${len}=             Get Length                  ${response['members']}
    :FOR                ${x}                        IN RANGE                0               ${len}
    \                   ${uri}=                     get from dictionary     ${response['members'][${x}]}    uri
    \                   Append To List              ${listforuri}           ${uri}
    ${firstdriveenclosureuri}=                      Get From List           ${listforuri}   0
    ${seconddriveenclosureuri}=                     Get From List           ${listforuri}   1
    ${length}=          Get length                  ${listforsearch}
    :FOR                ${i}                        IN RANGE                0               ${length}
    \                   ${uri}=                     get from dictionary     ${listforsearch[${i}]}          uri
    \                   ${driveenclosureuri}=       Get Substring           ${uri}          0               33
    \                   Run Keyword If              '${driveenclosureuri}'=='${firstdriveenclosureuri}'     addingtolist1   ${i}
    \                   ...                         ${listforsearch}
    \                   Run Keyword If              '${driveenclosureuri}'=='${seconddriveenclosureuri}'    addingtolist2   ${i}
    \                   ...                         ${listforsearch}
    Creation of ljbod giving drivebaysuri

addingtolist1
    [Documentation]     This is to add disks from 1 enclosure of one type
    [Arguments]         ${x}                    ${listforsearches}
    ${value}=           Get from List           ${listforsearches}      ${x}
    Append To List      ${disksfromfirstbay}    ${value}

addingtolist2
    [Documentation]     This is to add disks from 2nd drive enclosure to list
    [Arguments]         ${x}                    ${listforsearches}
    ${value}=           Get from List           ${listforsearches}      ${x}
    Append To List      ${disksfromsecondbay}   ${value}

Creation of ljbod giving drivebaysuri
    [Documentation]                 this is to create ljbod given drivebaysuri
    ${collectionofuri}=             Create List
    ${firstvaluefromfirstlist}=     Get from list                       ${disksfromfirstbay}            0
    ${value1}=                      get from dictionary                 ${firstvaluefromfirstlist}      uri
    ${firstvaluefromsecondlist}=    Get From List                       ${disksfromsecondbay}           0
    ${value2}=                      get from dictionary                 ${firstvaluefromsecondlist}     uri
    Append to list                  ${collectionofuri}                  ${value1}
    Append to list                  ${collectionofuri}                  ${value2}
    ${response}=                    Fusion Api Get resource             uri=/rest/sas-logical-interconnects
    ${uri}=                         get from dictionary                 ${response['members'][0]}       uri
    Set to dictionary               ${drivebaseduri}                    sasLogicalInterconnectUri       ${uri}
    Set to dictionary               ${drivebaseduri}                    driveBayUris                    ${collectionofuri}
    ${resp}=                        fusion_api_post_sas_logical_jbods   ${drivebaseduri}

Refresh Of Sas Interconnect
    [Documentation]     this is to refresh the sas interconnect
    [Arguments]         ${baynumber}
    ${resp}=            Fusion Api Get Resource     uri=/rest/sas-interconnects
    ${length}=          get length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                0           ${length}
    \                   ${locationentries}=         get from dictionary     ${resp['members'][${x}]['interconnectLocation']}
    \                   ...                         locationEntries
    \                   extractbaynumber            ${locationentries}      ${baynumber}
    ${uri}=             get from dictionary         ${resp['members'][${x}]}            uri
    ${finaluri}=        CATENATE                    SEPARATOR=              ${uri}      /refreshState
    ${response}=        fusion api patch interconnect                       body=${refreshpayload}              uri=${finaluri}
    ${headers}=         get from dictionary         ${response}             headers
    ${Location}=        get from dictionary         ${headers}              Location
    Wait Until Keyword Succeeds                     1200s                   5s          Running State Again     ${Location}

Refresh of drive enclosure
    [Documentation]     this is to refresh the drive enclosure
    ${resp}             Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${length}=          Get Length                  ${resp['members']}
    :FOR                ${x}                        IN RANGE                0   ${length}
    \                   ${uri}=                     Get From Dictionary     ${resp['members'][${x}]}    uri

    \   ${RefreshResp}=     Fusion Api Put Drive Enclosure      ${refreshpayload}   uri=${uri}

    \   ${headers}=                     get from dictionary     ${RefreshResp}      headers
    \   ${Location}=                    get from dictionary     ${headers}          Location
    \   Wait Until Keyword Succeeds     1200s                   10s                 Running State Again     ${Location}

To Extract The Drive Enclosure Used For Creation Of LJBOD
    [Documentation]     This is to get the uri of the drive enclosure being used to create ljbod.

    ${resp}=        Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${uri}=         get from dictionary         ${resp['members'][0]}   uri
    ${finaluri}=    CATENATE                    SEPARATOR=              ${index}    ${uri}
    ${response}=    Fusion Api Get Resource     uri=${finaluri}

    ${info}=            get from dictionary     ${response}         children
    ${moreinfo}=        get from dictionary     ${info}             SAS_LOGICAL_JBOD_TO_DRIVEBAYS_ASSOCIATION
    ${extrainfo}=       get from list           ${moreinfo}         0
    ${somemoreinfo}=    get from dictionary     ${extrainfo}        children
    ${digmoreinfo}=     get from dictionary     ${somemoreinfo}     DRIVE_BAY_TO_DRIVE_ASSOC

    ${letscheck}=           get from list           ${digmoreinfo}      0
    ${finalinfo}=           get from dictionary     ${letscheck}        resource
    ${finalinfo1}=          get from dictionary     ${finalinfo}        attributes
    ${driveenclosureuri}=   get from dictionary     ${finalinfo1}       driveEnclosureUri
    ${DE_Serial_Num}=       get from dictionary     ${finalinfo1}       serialNumber
    [Return]                ${driveenclosureuri}

COPY OF A LIG
    [Documentation]                 DFRM Keyword to make the copy of a lig
    ${resp}=                        Fusion Api Get Resource     uri=/rest/sas-logical-interconnect-groups
    ${payload}=                     get from list               ${resp['members']}      0
    Remove From Dictionary          ${payload}                  name
    Set to dictionary               ${payload}                  name                    CopyLig
    ${response}=                    Fusion Api Create Sas Lig   ${payload}
    ${respurii}                     Get From Dictionary         ${response}             uri
    Wait Until Keyword Succeeds     300s                        5s                      Running State Again     ${respurii}

CREATE FIRST SERVER PROFILE WITH LJBOD And persistent Enabled
    [Documentation]             This is used to create dynamic sp
    #Get The Number Of Drives Present
    ${resp}=                    Fusion Api Get Resource     uri=/rest/server-hardware
    ${f}=                       get from list               ${hw_list}                  0
    ${uri}=                     get from dictionary         ${resp['members'][${f}]}    uri
    Power off Specific Server Hardware                      ${uri}
    Sleep                       15s
    ${serverHardwareUri}=       get from dictionary         ${resp['members'][${f}]}    serverHardwareTypeUri
    Set to dictionary           ${advancesppayload}         serverHardwareUri           ${uri}
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri       ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary         ${resp['members'][0]}       uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri           ${uri}
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV11
    ${localStorage}=            get from dictionary         ${advancesppayload}         localStorage
    ${firstvalueofdisk}=        get from list               ${lists}                    0
    ##new lines added here to set persistent flag #################################################
    Remove From Dictionary      ${firstvalueofdisk}         persistent
    Set to Dictionary           ${firstvalueofdisk}         persistent                  ${True}
    ########################################################################################################
    ${localStorage['sasLogicalJBODs']}=                     Append To List              ${localStorage['sasLogicalJBODs']}
    ...                         ${firstvalueofdisk}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}         param=?force=ignoreServerHealth
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}         serverHardwareUri
    Remove From dictionary      ${advancesppayload}         serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}         enclosureGroupUri
    Remove From Dictionary      ${localStorage}             sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

    ${getonlogicalinterconnect}=                Fusion Api Get Resource                     uri=/rest/sas-logical-interconnects/
    ${status}=          get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    Run Keyword If      '${status}' != 'OK'     FAIL
    ...                 msg=Failed as the status of Logical Intercinnect is not equal to ok

CREATE FIRST SERVER PROFILE WITH LJBOD And Drive Erase Enabled
    [Documentation]             This is used to create dynamic sp
    Get The Number Of Drives Present
    ${resp}=                    Fusion Api Get Resource     uri=/rest/server-hardware
    ${f}=                       get from list               ${hw_list}                  0
    ${uri}=                     get from dictionary         ${resp['members'][${f}]}    uri
    Power off Specific Server Hardware                      ${uri}
    Sleep                       15s
    ${serverHardwareUri}=       get from dictionary         ${resp['members'][${f}]}    serverHardwareTypeUri
    Set to dictionary           ${advancesppayload}         serverHardwareUri           ${uri}
    Set to dictionary           ${advancesppayload}         serverHardwareTypeUri       ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource     uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary         ${resp['members'][0]}       uri
    Set to dictionary           ${advancesppayload}         enclosureGroupUri           ${uri}
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary           ${advancesppayload}         type    ServerProfileV11
    ${localStorage}=            get from dictionary         ${advancesppayload}         localStorage
    ${firstvalueofdisk}=        get from list               ${lists}                    0
    ######################new lines added here#########################################################
    Remove From Dictionary      ${firstvalueofdisk}         eraseData
    Set to Dictionary           ${firstvalueofdisk}         eraseData                   ${True}
    ########################################################################################################
    ${localStorage['sasLogicalJBODs']}=                     Append To List              ${localStorage['sasLogicalJBODs']}
    ...                         ${firstvalueofdisk}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}         param=?force=ignoreServerHealth
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}         serverHardwareUri
    Remove From dictionary      ${advancesppayload}         serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}         enclosureGroupUri
    Remove From Dictionary      ${localStorage}             sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=     Get From Dictionary     ${resp}         headers
    ${spuri}=       Get From Dictionary     ${headers}      Location

    Wait Until Keyword Succeeds     1200s   10s     Running State Again     ${spuri}

    ${getonlogicalinterconnect}=                Fusion Api Get Resource                     uri=/rest/sas-logical-interconnects/
    ${status}=          get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    Run Keyword If      '${status}' != 'OK'     FAIL
    ...                 msg=Failed as the status of Logical Intercinnect is not equal to ok

VALIDATE LJBOD STATUS
    [Documentation]     Keyword to Verify LJBOD status

    ${resp_ljbod}=      Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${length}=          get length                  ${resp_ljbod['members']}
    Run Keyword If      '${length}' == '0'          FAIL    msg=Post deletion of SP with permanent enabled, LJBOD doesnot exits
    ${status}=          get from dictionary         ${resp_ljbod['members'][0]}     status
    Run Keyword If      '${status}' != 'OK'         FAIL    msg=Failed as the status of LJBOD is not equal to ok

ADD LJBODS TO FIRST SERVER PROFILE AFTER DE POWEROFF
    [Documentation]     Edit of server profile on go
    [Arguments]         ${api}=${none}              ${headers}=${none}
    ${callforsp}=       Fusion Api Get Resource     uri=/rest/server-profiles
    ${getthepayload}=   get from dictionary         ${callforsp['members'][0]}                      localStorage
    ${urii}=            get from dictionary         ${callforsp['members'][0]}                      uri
    ${clr}=             Get Length                  ${lists}
    :For                ${p}                        IN RANGE                0                       ${clr}
    \                   Remove From List            ${lists}                0
    Get The Number Of Drives Present
    ${len}=             Get length                  ${lists}
    :FOR                ${j}                        IN RANGE                1                       ${len}
    \                   ${secondvalueofdisk}=       get from list           ${lists}                ${j}
    \                   Remove From Dictionary      ${secondvalueofdisk}    id
    \                   ${need}=                    Evaluate                ${j}+${addone}
    \                   Set to dictionary           ${secondvalueofdisk}    id                      ${need}
    \                   Append To List              ${listtoaddljbods}      ${secondvalueofdisk}
    ${letssee}=         Get Length                  ${listtoaddljbods}
    :FOR                ${x}                        IN RANGE                0                       ${letssee}
    \                   ${getfinal}=                GET FROM LIST           ${listtoaddljbods}      ${x}
    \                   Append To List              ${getthepayload['sasLogicalJBODs']}             ${getfinal}
    Remove From Dictionary                          ${callforsp['members'][0]}                      localStorage
    Set to dictionary   ${callforsp['members'][0]}                          localStorage            ${getthepayload}
    ${resps} =          Fusion Api Edit Server Profile                      body=${callforsp['members'][0]}
    ...                 uri=${urii}
    ...                 api=${api}
    ...                 headers=${headers}
    ...                 param=?force=ignoreServerHealth
    ${headers}=         Get From Dictionary         ${resps}                headers
    ${spuri}=           Get From Dictionary         ${headers}              Location
    ${wait_time}=       Evaluate                    ${len}*90
    Wait Until Keyword Succeeds                     ${wait_time}s           10s                     Running State Again
    ...                 ${spuri}

CREATE FIRST SERVER PROFILE WITH SATA LJBOD And Drive Erase Enabled
    [Documentation]             This is used to create dynamic sp
    ${Sata_list}=               GET REQUIRED DISK FOR LJBOD                     SATAHDD
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/server-hardware
    ${f}=                       get from list           ${Sata_list}            0
    ${uri}=                     get from dictionary     ${resp['members'][0]}   uri
    Power off Specific Server Hardware                  ${uri}
    Sleep                       15s
    ${serverHardwareUri}=       get from dictionary     ${resp['members'][0]}   serverHardwareTypeUri
    Set to dictionary           ${advancesppayload}     serverHardwareUri       ${uri}
    Set to dictionary           ${advancesppayload}     serverHardwareTypeUri   ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary     ${resp['members'][0]}   uri
    Set to dictionary           ${advancesppayload}     enclosureGroupUri       ${uri}
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary       ${advancesppayload}     type                ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary       ${advancesppayload}     type                ServerProfileV11
    ${localStorage}=            get from dictionary     ${advancesppayload}     localStorage
    ${firstvalueofdisk}=        get from list           ${Sata_list}            0
    ######################new lines added here#########################################################
    Remove From Dictionary      ${firstvalueofdisk}     eraseData
    Set to Dictionary           ${firstvalueofdisk}     eraseData               ${True}
    ########################################################################################################
    ${localStorage['sasLogicalJBODs']}=                 Append To List          ${localStorage['sasLogicalJBODs']}
    ...                         ${firstvalueofdisk}
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${advancesppayload}     param=?force=ignoreServerHealth
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}     serverHardwareUri
    Remove From dictionary      ${advancesppayload}     serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}     enclosureGroupUri
    Remove From Dictionary      ${localStorage}         sasLogicalJBODs
    Set to dictionary           ${localStorage}         sasLogicalJBODs         ${sasLogicalJBODs}
    ${headers}=                 Get From Dictionary     ${resp}                 headers
    ${status_code}=             Get From Dictionary     ${resp}                 status_code
    Run Keyword if              '${status_code}'=='400'                         FAIL
    ...                         msg="Invaliud JSON Type, Correct the JSON"
    ${spuri}=                   Get From Dictionary     ${headers}              Location
    Wait Until Keyword Succeeds                         1200s                   10s                 Running State Again
    ...                         ${spuri}
    ${getonlogicalinterconnect}=                        Fusion Api Get Resource
    ...                         uri=/rest/sas-logical-interconnects/
    ${status}=                  get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    Run Keyword If              '${status}' != 'OK'     FAIL
    ...                         msg=Failed as the status of Logical Intercinnect is not equal to ok

Efuse ICM while Deleting independent ljbods
    [Documentation]     This is to delete independent ljbod
    ${resp}=            fusion_api_get_sas_logical_jbods                uri=/rest/sas-logical-jbods
    ${len}=             Get Length              ${resp['members']}
    :FOR                ${x}                    IN RANGE                0               ${len}
    \                   ${uri}=                 get from dictionary     ${resp['members'][${x}]}    uri
    \                   ${resp}=                fusion_api_delete_sas_logical_jbods     uri=${uri}
    \                   ${headers}=             get from dictionary     ${resp}         headers
    \                   ${Location}=            get from dictionary     ${headers}      Location
    \                   Efuse Interconnect      EFuseOn                 ${bay_1}
    \                   sleep                   30s

REAPPLY CONFIG ON LOGICAL INTERCONNECT
    [Documentation]                 To Reapply COnfiguration from Logical Interconnect
    ${resp}=                        Fusion Api Get Resource     uri=/rest/sas-logical-interconnects/
    ${LI_uri}=                      Get From Dictionary         ${resp['members'][0]}   uri
    ${resp1} =                      Fusion Api Reapply Li Configuration                 ${LI_uri}
    ${headers}=                     Get From Dictionary         ${resp1}                headers
    ${location}=                    get from dictionary         ${headers}              Location
    Wait Until Keyword Succeeds     1200s                       10s                     Running State Again     ${location}

CREATION OF SINGLE DOMAIN SAS LIG
    [Documentation]             Creating Single Domain SAS LIG in bay 1
    
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/enclosures
    ${enclosuretype}=           get from dictionary     ${resp['members'][0]}   enclosureType
    Remove from dictionary      ${advancesingledomainligpayload}                enclosureType
    Set to dictionary           ${advancesingledomainligpayload}                enclosureType           ${enclosuretype}
    ${resp_interconnect}=       Fusion Api Get Resource                         uri=/rest/sas-interconnects
    ${icm_count}=               Get Length              ${resp_interconnect['members']}
    ${icm_prod_name}=           GET INTERCONNECT PRODUCT NAME                   ${resp_interconnect}    ${icm_count}
    ${response}=                Run Keyword if          '${icm_prod_name}'=='Synergy 24Gb SAS Interconnect Module'
    ...                         Fusion Api Create Sas Lig                       ${GROVER_SINGLEDOMAINBAY1_LIG_PAYLOAD}
    ...                         ELSE
    ...                         Fusion Api Create Sas Lig                       ${advancesingledomainligpayload}
    ${respurii}                 Get From Dictionary     ${response}             uri
    Wait Until Keyword Succeeds                         1200s                   5s                      Running State Again
    ...                         ${respurii}

CREATION OF SINGLE DOMAIN ENCLOSURE GROUP
    [Documentation]             Create Single Domain Enclosure Group
    ${resp}=                    Fusion Api Get Resource             uri=/rest/sas-logical-interconnect-groups
    ${uri}=                     get from dictionary                 ${resp['members'][0]}   uri
    Remove From Dictionary      ${advanceegpayload['interconnectBayMappings'][0]}
    ...                         logicalInterconnectGroupUri
    Set to dictionary           ${advanceegpayload['interconnectBayMappings'][0]}           logicalInterconnectGroupUri
    ...                         ${uri}
    Remove From Dictionary      ${advanceegpayload['interconnectBayMappings'][1]}
    ...                         logicalInterconnectGroupUri
    ${Response}=                Fusion API Create Enclosure Group   ${advanceegpayload}

CREATE SERVER PROFILE WITH EXISTING LJBOD
    [Documentation]         This is used to create dynamic sp
    ${resp}=                Fusion Api Get Resource                         uri=/rest/server-hardware
    ${uri}=                 get from dictionary     ${resp['members'][0]}   uri
    Power off Specific Server Hardware              ${uri}
    Sleep                   15s
    ${serverHardwareUri}=   get from dictionary     ${resp['members'][0]}   serverHardwareTypeUri
    Set to dictionary       ${advancesppayload}     serverHardwareUri       ${uri}
    Set to dictionary       ${advancesppayload}     serverHardwareTypeUri   ${serverHardwareUri}
    ${resp}=                Fusion Api Get Resource                         uri=/rest/enclosure-groups
    ${uri}=                 get from dictionary     ${resp['members'][0]}   uri
    Set to dictionary       ${advancesppayload}     enclosureGroupUri       ${uri}
    ${ONEVIEW_VERSION}=     DFRM Get Oneview Version
    Run Keyword IF          '${ONEVIEW_VERSION}' == '4.20'
    ...                     Set to Dictionary       ${advancesppayload}     type    ServerProfileV10
    Run Keyword IF          '${ONEVIEW_VERSION}' == '5.00'
    ...                     Set to Dictionary       ${advancesppayload}     type    ServerProfileV11
    ${localStorage}=        get from dictionary     ${advancesppayload}     localStorage
    #                       ${jbod_list}=           create list
    ${jbod_list}=           Get Existing LJBODS
    ${jbod_len}=            Get Length              ${jbod_list}
    #${firstvalueofdisk}=   get from list           ${lists}                0
    ${localStorage['sasLogicalJBODs']}=             Append To List          ${localStorage['sasLogicalJBODs']}      ${jbod_list}
    ${resp}=                Fusion Api Create Server Profile
    ...                     ${advancesppayload}     param=?force=ignoreServerHealth
    Log                     ${resp}
    ${sasLogicalJBODs}=     Create List
    Remove From dictionary                          ${advancesppayload}     serverHardwareUri
    Remove From dictionary                          ${advancesppayload}     serverHardwareTypeUri
    Remove From dictionary                          ${advancesppayload}     enclosureGroupUri
    Remove From Dictionary                          ${localStorage}         sasLogicalJBODs

    Set to dictionary   ${localStorage}     sasLogicalJBODs     ${sasLogicalJBODs}

    ${headers}=                     Get From Dictionary     ${resp}         headers
    ${spuri}=                       Get From Dictionary     ${headers}      Location
    ${wait_time}=                   ${jbod_len}*90
    Wait Until Keyword Succeeds     ${wait_time}s           10s             Running State Again     ${spuri}

    ${getonlogicalinterconnect}=                Fusion Api Get Resource                     uri=/rest/sas-logical-interconnects/
    ${status}=          get from dictionary     ${getonlogicalinterconnect['members'][0]}   status
    Run Keyword If      '${status}' != 'OK'     FAIL
    ...                 msg=Failed as the status of Logical Intercinnect is not equal to ok

Get Existing LJBODS
    [Documentation]     Create drive enclosure
    [Arguments]         ${api}=${None}              ${headers}=${None}
    ${resp}=            Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${len}=             Get Length                  ${resp['members']}
    ${uri}=             get from dictionary         ${resp['members'][0]}   uri
    Log                 ${uri}
    ${ljbod_resp}=      Fusion Api Get Resource     uri=${uri}
    log                 ${ljbod_resp['driveTechnology']}
    Log                 ${ljbod_resp['driveTechnology']['deviceInterface']}
    log                 ${ljbod_resp['driveTechnology']['driveMedia']}

    ${DriveInterface}=      set variable    ${ljbod_resp['driveTechnology']['deviceInterface']}
    ${DriveMedia}=          set variable    ${ljbod_resp['driveTechnology']['driveMedia']}
    # ${LJBOD_List}=        create list
    ${LJBOD_List}=          Create Payload For Adding existing Ljbod to SP      ${DriveInterface}   ${DriveMedia}
    ...                     ${ljbod_resp}
    [Return]                ${LJBOD_List}

Create Payload For Adding existing Ljbod to SP
    [Documentation]         create dynamic payload for the creation of adding ljbods
    [Arguments]             ${deviceInterfaces}     ${driveMedias}          ${ljbod_resp}
    ${deviceInterface}=     Convert To Lowercase    ${deviceInterfaces}
    ${replacedstring}=      Remove String           ${deviceInterface}      s
    ${sasname}=             Run Keyword If          '${deviceInterface}'=='sas'             conversion to sas
    ...                     ELSE
    ...                     convert to sata
    ${drivemedia}=          Convert To Lowercase    ${drivemedias}
    ${replacedstrings}=     Remove String           ${drivemedia}           h
    ${afterremovings}=      Remove String           ${drivemedia}           s
    ${gettext}=             Run Keyword If          "${replacedstrings}"=="dd"              Convert It Into Hdd
    ...                     ${replacedstrings}
    ...                     ELSE
    ...                     Convert It Into Ssd
    ...                     ${afterremovings}
    ${drivetechnology}=     Catenate                SEPARATOR=              ${sasname}      ${gettext}
    ${Temp_List}=           create list
    ${spdictionary}=        Create Dictionary
    Set to dictionary       ${spdictionary}         id                      ${addone}
    Set to dictionary       ${spdictionary}         deviceSlot              ${formezz}
    Set to dictionary       ${spdictionary}         name                    ${ljbod_resp['name']}
    Set to dictionary       ${spdictionary}         numPhysicalDrives       ${ljbod_resp['numPhysicalDrives']}
    Set to dictionary       ${spdictionary}         driveMinSizeGB          ${ljbod_resp['minSizeGB']}
    Set to dictionary       ${spdictionary}         driveMaxSizeGB          ${ljbod_resp['maxSizeGB']}
    Set to dictionary       ${spdictionary}         driveTechnology         ${drivetechnology}
    Set to dictionary       ${spdictionary}         eraseData               ${False}
    Set to dictionary       ${spdictionary}         persistent              ${False}
    Set to dictionary       ${spdictionary}         sasLogicalJBODUri       ${ljbod_resp['uri']}
    Set to dictionary       ${spdictionary}         status                  ${None}
    [Return]                ${spdictionary}

Backup the appliance
    [Documentation]     this is to backup the appliance
    ${resp}=            Fusion Api Create Backup
    Sleep               20s
    ${bkup_response}=   fusion api get resource     uri=/rest/backups
    ${bkup_uri}=        get from dictionary         ${bkup_response['members'][0]}      uri
    ${bkup_task_uri}=   get from dictionary         ${bkup_response['members'][0]}      taskUri
    Wait Until Keyword Succeeds                     1200s   10s                         Running State Again     ${bkup_task_uri}
    Download Backup
    Sleep               30s

Restore The Appliance
    [Documentation]             This is to restore the appliance
    ${bkup_response}=           fusion api get resource     uri=/rest/backups
    ${bkup_uri}=                get from dictionary         ${bkup_response['members'][0]}      uri
    Remove From dictionary      ${payloadforrestore}        uriOfBackupToRestore
    Set to Dictionary           ${payloadforrestore}        uriOfBackupToRestore                ${bkup_uri}
    ${response}=                fusion api restore backup   ${payloadforrestore}

Reapply Interconnect Configuration
    [Documentation]     THis is to reapply configuration
    ${response}=        fusion api get resource     uri=/rest/logical-enclosures
    ${uri}=             get from dictionary         ${response['members'][0]}   uri
    ${resp}=            fusion_api_reapply_interconnect_configuration           uri=${uri}

Download Backup
    [Documentation]     TO download the Backup
    [Arguments]         ${filename}=None
    ${bkup_response}=   fusion api get resource     uri=/rest/backups
    ${bkup_id}=         get from dictionary         ${bkup_response['members'][0]}      id
    ${download_uri}=    get from dictionary         ${bkup_response['members'][0]}      downloadUri
    ${file}=            Run Keyword If              '${filename}'=='None'
    ...                 Set Variable                ${bkup_id}
    ...                 ELSE                        Set Variable    ${filename}
    ${download_resp}=   Fusion Api Download Backup                  ${download_uri}     ${file}

PreCheck ICM PowerStatus
    [Documentation]         Keywork to pre check if both SAS Interconnects are in Powered ON state
    ${resp}=                Fusion Api Get Resource             uri=/rest/sas-interconnects
    ${length}=              Get length                          ${resp['members']}
    ${power_state_bay1}=    get from dictionary                 ${resp['members'][0]}   powerState
    Run Keyword If          '${power_state_bay1}' == 'Off'      Power On interconnect   ${bay_1}
    ${power_state_bay4}=    get from dictionary                 ${resp['members'][1]}   powerState
    Run Keyword If          '${power_state_bay4}' == 'Off'      Power On interconnect   ${bay_4}

PreCheck DriveEnclosure PowerStatus
    [Documentation]     Keywords to pre check if Drive Enclosures attached to frame are in Powered ON state

    ${resp}=        Fusion Api Get Resource     uri=/rest/drive-enclosures
    ${length}=      Get length                  ${resp['members']}
    :FOR            ${x}                        IN RANGE                        0   ${length}
    \               ${de_power_state}=          get from dictionary             ${resp['members'][${x}]}    powerState
    \               ${drive_uri}=               get from dictionary             ${resp['members'][${x}]}    uri
    \               Run Keyword If              '${de_power_state}' == 'Off'    Drive Enclosure Power on    ${drive_uri}

PreCheck ICM Availability
    [Documentation]     Keywork to pre check if both SAS Interconnects are present, If not Add them.

    ${resp}=            Fusion Api Get Resource     uri=/rest/sas-interconnects
    ${length}=          Get length                  ${resp['members']}
    Run Keyword If      '${length}' == '2'          exitfromfunction
    Run Keyword If      '${length}' == '0'          Efuse Both SAS Interconnects
    run keyword if      '${length}' == '1'          Efuse required SAS Interconnect     ${resp}

Efuse Both SAS Interconnects
    [Documentation]         Efuse Both SAS Interconnects
    #                       Efuse Off Bay-1
    Efuse Interconnect      EFuseOff    ${bay_1}
    Sleep                   300s
    #                       Efuse Off Bay-4
    Efuse Interconnect      EFuseOff    ${bay_4}
    Sleep                   300s

Efuse required SAS Interconnect
    [Documentation]         Efuse OFF required SAS Interconnect
    [Arguments]             ${ICM_resp}
    ${Interconnectlocation}=                        get from dictionary         ${ICM_resp['members'][0]}
    ...                     interconnectLocation
    ${locationentries}=     get from dictionary     ${Interconnectlocation}     locationEntries
    ${loc_length} =         get length              ${locationentries}
    :FOR                    ${x}                    IN RANGE                    0   ${loc_length}
    \                       ${Bay_Value}=           Run Keyword If              '${locationentries[${x}]['type']}' == 'Bay'
    \                       ...                     Exit For Loop

    ${Bay_Value}=       Set variable            ${locationentries[${x}]['value']}
    Run Keyword If      '${Bay_Value}' == '1'   Efuse Interconnect      EFuseOff    ${bay_4}
    ...                 ELSE                    Efuse Interconnect      EFuseOff    ${bay_1}
    Sleep               300s

ValidateLIandLJBODStatus
    [Documentation]     Keyword to validate the status of LI, and LJBOD Status
    # Validate SAS Logical interconnect status
    ${liresp}=          Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${LI_Length}=       Get length                  ${liresp['members']}
    :FOR                ${x}                        IN RANGE                0       ${LI_Length}
    \                   Log                         ${liresp['members'][${x}]}
    \                   ${status}=                  get from dictionary     ${liresp['members'][${x}]}          status
    \                   Log                         ${status}
    \                   Run Keyword If              '${status}'!='OK'       Fail
    \                   ...                         msg=Logical Interconnect is not in good state.
    # Validate Logical JBOD's status
    ${ljbodresponse}=   Fusion Api Get Resource     uri=/rest/sas-logical-jbods
    ${LJBOD_Length}=    Get length                  ${ljbodresponse['members']}
    :FOR                ${x}                        IN RANGE                0       ${LJBOD_Length}
    \                   Log                         ${ljbodresponse['members'][${x}]}
    \                   ${status}=                  get from dictionary     ${ljbodresponse['members'][${x}]}   status
    \                   Log                         ${status}
    \                   Run Keyword If              '${status}'!='OK'       Fail    msg=Independent Ljbod are not in good state.

Check If Restore Appliance Completed
    [Documentation]         Keyword to check if the Restore operation completed and appliance is accessible.
    ${uri}=                 set variable                /rest/sas-logical-interconnects
    ${response}=            Fusion Api Get Resource     uri=/rest/sas-logical-interconnects
    ${Restore_ERR_Code}=    get from dictionary         ${response}                         errorCode
    Run keyword If          '${Restore_ERR_Code}' == 'ERR_CONTROLLER_RESTORE_IN_PROGRESS'   WaitForRestoreToComplete

WaitForRestoreToComplete
    [Documentation]                 Wait till Restore completes
    Wait Until Keyword Succeeds     1600s   60s     Login to Fusion Via REST after Restore

Login to Fusion Via REST after Restore
    [Documentation]     Connects to the Appliance and creates a session using the Username and Password.
    ...                 Example : \n| Login to Fusion Via REST | 10.0.12.106 | Administrator | hpvse123 |

    ${admin_credentials} =      Create Dictionary       userName=${FUSION_ADMIN_LOGIN}      password=${FUSION_ADMIN_PASSWORD}
    #Logger                     The appliance is ${FUSION_IP}
    Logger                      Credentials are ${admin_credentials}    DEBUG
    ${Response}                 ${SessionId}            Fusion Api Login Appliance          ${FUSION_IP}    ${admin_credentials}
    #Log to console             ${Response}
    ${Status}                   Get From Dictionary     ${Response}     status_code
    Return From Keyword If      '${Status}' == '200'    ${Response}
    Run Keyword If              '${Status}' != '200'    FAIL            msg=Restore not Completed Yet.

Create Server Profile With Logical Drives
    [Documentation]             this is to create server profile with logical drives
    [Arguments]                 ${Erase_flag}           ${Persist_flag}
    ${physicaldrives}=          Set Variable            2
    ${numofphysicaldrives}=     Convert To Integer      ${physicaldrives}
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/server-hardware
    ${f}=                       get from list           ${hw_list}              0
    #${f}=                      Set Variable            1
    ${uri}=                     get from dictionary     ${resp['members'][${f}]}                        uri
    #${uri}=                    get from dictionary     ${resp['members'][1]}   uri
    Power off Specific Server Hardware                  ${uri}
    Sleep                       5s
    ${SW_HW_GEN}=               get from dictionary     ${resp['members'][${f}]}                        generation
    ${serverHardwareUri}=       get from dictionary     ${resp['members'][${f}]}                        serverHardwareTypeUri
    Set to dictionary           ${sppayloadforlogicaldrives}                    serverHardwareUri       ${uri}
    Set to dictionary           ${sppayloadforlogicaldrives}                    serverHardwareTypeUri   ${serverHardwareUri}
    ${resp}=                    Fusion Api Get Resource                         uri=/rest/enclosure-groups
    ${uri}=                     get from dictionary     ${resp['members'][0]}   uri
    Set to dictionary           ${sppayloadforlogicaldrives}                    enclosureGroupUri       ${uri}
    ${ONEVIEW_VERSION}=         DFRM Get Oneview Version
    Run Keyword IF              '${ONEVIEW_VERSION}' == '4.20'
    ...                         Set to Dictionary       ${sppayloadforlogicaldrives}                    type
    ...                         ServerProfileV10
    Run Keyword IF              '${ONEVIEW_VERSION}' == '5.00'
    ...                         Set to Dictionary       ${sppayloadforlogicaldrives}                    type
    ...                         ServerProfileV11
    ${t}=                       Extracting two similar disks from list
    ${localStorage}=            get from dictionary     ${sppayloadforlogicaldrives}                    localStorage
    ${firstvalueofdisk}=        get from list           ${lists}                ${t}
    Remove From Dictionary      ${firstvalueofdisk}     numPhysicalDrives
    Set To Dictionary           ${firstvalueofdisk}     numPhysicalDrives       ${numofphysicaldrives}
    ${localStorage['sasLogicalJBODs']}=                 Append To List          ${localStorage['sasLogicalJBODs']}
    ...                         ${firstvalueofdisk}
    Run keyword If              '${Erase_flag}' == '1'                          EnableDriveErase
    ...                         ${sppayloadforlogicaldrives}
    Run keyword If              '${Persist_flag}' == '1'                        EnablePersistent
    ...                         ${sppayloadforlogicaldrives}
    Run Keyword If              '${SW_HW_GEN}'=='Gen10'
    ...                         Set To Dictionary       ${localStorage['controllers'][0]}               mode    Mixed
    ${resp}=                    Fusion Api Create Server Profile
    ...                         ${sppayloadforlogicaldrives}                    param=?force=ignoreServerHealth
    ${sasLogicalJBODs}=         Create List
    Remove From dictionary      ${advancesppayload}     serverHardwareUri
    Remove From dictionary      ${advancesppayload}     serverHardwareTypeUri
    Remove From dictionary      ${advancesppayload}     enclosureGroupUri
    Remove From Dictionary      ${localStorage}         sasLogicalJBODs
    Set to dictionary           ${localStorage}         sasLogicalJBODs         ${sasLogicalJBODs}
    ${headers}=                 Get From Dictionary     ${resp}                 headers
    ${spuri}=                   Get From Dictionary     ${headers}              Location
    Wait Until Keyword Succeeds                         1200s                   10s                     Running State Again
    ...                         ${spuri}

Extracting two similar disks from list
    [Documentation]     This is to extract two similar disks from list
    ${len}=             Get Length              ${lists}
    :FOR                ${x}                    IN RANGE                0                   ${len}
    \                   ${valueoflist}=         Get From List           ${lists}            ${x}
    \                   ${driveMinSize}=        Get From Dictionary     ${valueoflist}      driveMinSizeGB
    \                   ${driveTechnology}=     Get From Dictionary     ${valueoflist}      driveTechnology
    \                   ${l}=                   comparing with other list values            ${x}    ${driveMinSize}
    \                   ...                     ${driveTechnology}
    \                   ...                     ${len}
    \                   Run Keyword If          ${l}==1                 Exit For Loop
    ${m}=               Run Keyword If          ${l}==1                 returningdiskwithsametype   ${x}
    [Return]            ${m}

returningdiskwithsametype
    [Documentation]     this is to return the disks with same type
    [Arguments]         ${n}
    [Return]            ${n}

comparing with other list values
    [Documentation]     This is to compare with the other disks
    [Arguments]         ${n}                    ${drivesize}            ${drivetech}        ${length}
    :FOR                ${x}                    IN RANGE                ${n}+1              ${length}
    \                   ${valueoflist}=         Get From List           ${lists}            ${x}
    \                   ${driveMinSize}=        Get From Dictionary     ${valueoflist}      driveMinSizeGB
    \                   ${driveTechnology}=     Get From Dictionary     ${valueoflist}      driveTechnology
    \                   ${f}=                   Run Keyword If
    \                   ...                     ${driveMinSize} == ${drivesize} and "${driveTechnology}" =="${drivetech}"
    \                   ...                     raiseone
    \                   Run Keyword If          ${f}==1                 Exit For Loop

    ${ii}=      Run Keyword If      ${f}==1     raiseone
    [Return]    ${ii}

raiseone
    [Documentation]     This is to return one
    [Return]            1

EnableDriveErase
    [Documentation]             Keyword to Enable Drive Erase on Deletion flag
    [Arguments]                 ${sppayloadforlogicaldrives}
    Remove from dictionary      ${sppayloadforlogicaldrives['localStorage']['sasLogicalJBODs'][0]}      eraseData
    Set to dictionary           ${sppayloadforlogicaldrives['localStorage']['sasLogicalJBODs'][0]}      eraseData   ${True}

EnablePersistent
    [Documentation]             Keyword to Enable Persistent on Deletion flag
    [Arguments]                 ${sppayloadforlogicaldrives}
    Remove from dictionary      ${sppayloadforlogicaldrives['localStorage']['sasLogicalJBODs'][0]}      persistent
    Set to dictionary           ${sppayloadforlogicaldrives['localStorage']['sasLogicalJBODs'][0]}      persistent      ${True}

EDIT SERVER PROFILE TO DELETE LJBODS
    [Documentation]             This will Delete ljbods from server profile.
    [Arguments]                 ${api}=${none}                      ${headers}=${none}
    ${SP_Resp}=                 Fusion Api Get Resource             uri=/rest/server-profiles
    ${LocalStorage}=            get from dictionary                 ${SP_Resp['members'][0]}        localStorage
    ${sp_uri}=                  get from dictionary                 ${SP_Resp['members'][0]}        uri
    Remove From Dictionary      ${SP_Resp['members'][0]}            localStorage
    ${resps} =                  Fusion Api Edit Server Profile      body=${SP_Resp['members'][0]}   uri=${sp_uri}
    ...                         api=${api}
    ...                         headers=${headers}
    ...                         param=?force=ignoreServerHealth

    ${headers}=                     Get From Dictionary     ${resps}        headers
    ${spuri}=                       Get From Dictionary     ${headers}      Location
    Wait Until Keyword Succeeds     1200s                   10s             Running State Again     ${spuri}

UPDATE FROM GROUP LE EXPECT ERROR
    [Documentation]     to update from grp to remove error
    [Tags]              F176
    ${resp}=            Fusion Api Get Resource     uri=/rest/logical-enclosures
    ${scopeuri}=        Get From Dictionary         ${resp['members'][0]}   uri
    ${finaluri}=        Catenate                    SEPARATOR=/             ${scopeuri}             ${uriiii}
    ${resp1} =          Fusion Api Edit Lig         ${payloadoflogicalenclosureupdatefromgroup}     ${finaluri}
    ${headers}=         Get From Dictionary         ${resp1}                headers
    ${location}=        get from dictionary         ${headers}              Location
    ${responsenew}      Fusion Api Get Resource     uri=${location}
    ${taskstate}=       Get From Dictionary         ${responsenew}          taskState
    Run Keyword If      '${taskstate}' != 'Error'   exitfromfunction

DFRM Get Oneview Version
    [Documentation]     DFRM Keyword to fetch Oneview Vesion in required format ( eg. 4.20 or 5.00 )
    SSHLibrary.Open Connection              ${FUSION_IP}
    ${login}            SSHLibrary.Login    root                hpvse1
    ${Command}=         Set Variable        cat /ci/etc/version
    ${stdout}           ${stderr}           ${rc}=              SSHLibrary.Execute Command      ${Command}
    ...                 return_stderr=True
    ...                 return_rc=True}
    Should Be Equal As Integers             ${rc}               0   msg=Failed to get Fusion Version.
    ${split_before}=    set variable        ${stdout}
    ${split}=           split string        ${split_before}     ,
    ${split_1}=         split string        ${split[0]}         -
    ${split_2}=         split string        ${split_1[0]}       .
    ${OV_Version}=      catenate            ${split_2[0]}.${split_2[1]}
    log                 ${OV_Version}
    [Return]            ${OV_Version}

DFRM CHECK IS DCS
    [Documentation]         Keyword to Check if test setup is DCS or Not
    ${isDCS_ret_Value}=     Set Variable        0
    SSHLibrary.Open Connection                  ${FUSION_IP}
    ${login}                SSHLibrary.Login    root            hpvse1
    ${Command}=             Set Variable        dcs status #rpm -qa | grep dcs
    ${stdout}               ${stderr}           ${rc}=          SSHLibrary.Execute Command      ${Command}
    ...                     return_stderr=True
    ...                     return_rc=True}
    ${isDCS_ret_Value}=     Run Keyword If      '${rc}'=='0'    Set Variable                    1
    ...                     ELSE
    ...                     Set Variable        0
    [return]                ${isDCS_ret_Value}

EMPTY CIDEBUG LOG
    [Documentation]     To Clear/Empy ciDebug.log
    SSHLibrary.Open Connection                          ${FUSION_IP}
    ${login}            SSHLibrary.Login                root    hpvse1
    ${command}=         set variable                    > /ci/logs/ciDebug.log
    ${stdout}=          SSHLibrary.Execute Command      ${command}
    log                 ${stdout}                       console=true

GET INTERCONNECT PRODUCT NAME
    [Documentation]     Keyword to get Interconnects Product Name
    [Arguments]         ${resp_interconnect}    ${icm_count}

    :FOR        ${icm}              IN RANGE                0   ${icm_count}
    \           ${icm_part_num}=    Get from Dictionary     ${resp_interconnect['members'][${icm}]}     partNumber
    \           ${icm_prod_name}=   Get from Dictionary     ${resp_interconnect['members'][${icm}]}     productName
    [Return]    ${icm_prod_name}

