*** Settings ***
Documentation     Loading and doing firmware upgradation  
Suite Setup 		Login to Fusion Via REST
Library			../UserInputs/functions.py
Resource		../Resources/resources.txt
Variables		../UserInputs/variables.py


*** Variables ***
${SPPfilepath}		S:\SPPgen9snap6.2016_0517.107.iso

*** comments ***
Assuming the loading of SPP will take place after BTI integrates.
Need to assign SPP for both upgrade and downgrade

Loading the SPP
	[Documentation]	Loads the firmware bundle from an iso file
	[Tags]		F178	Smoke
	[setup]		Run Keywords
			${resp} =	Fusion Api Upload Firmware Bundle		${SPPfilepath}
			Logger		${resp}
			
*** Test Cases ***	
Fetching the type of Flashing of the firmware and Upgrading it
		[Documentation]   Upgrades the appliance if the SPP firmware version is higher than the appliance version 
		[Tags]		F178	Smoke
		${SPPNameAndVersion} = 	Get the first SPP firmware name and version
		logger		SPP name is ${SPPNameAndVersion[0]}
		logger		SPP firmware version is ${SPPNameAndVersion[1]} 
		Change the natasha properties in dcs	${FUSION_IP}	${SPPNameAndVersion[1][0]}		${SPPNameAndVersion[1][1]}		#for DCS
		${resp} =	fusion_api_get_li		uri=/rest/sas-logical-interconnects	
		Logger		${resp}		DEBUG
		${length} =		Get length		${resp['members']}
		:FOR 	${i}	IN RANGE	0	${length}
		\	${natasha_uri} =	Get from dictionary		${resp['members'][${i}]}		sasInterconnectUris
		\	${enclosure_uri} =	Get from Dictionary		${resp['members'][${i}]}		driveEnclosureUris
		\	${Logical_interconnect_uri} = 	Get from Dictionary		${resp['members'][${i}]}	uri
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}		#prevalidation		
		\	Logger		Natasha uri ${natasha_uri}
		\	Logger		Enclosure uri ${enclosure_uri}
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Logger		Appliance version is ${appliance_firmware_version}
		\	Run Keyword If	'${SPPNameAndVersion[1][0]}' > '${appliance_firmware_version[0]}' and '${SPPNameAndVersion[1][1]}' > '${appliance_firmware_version[1]}'		Upgrade flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]}
		\	...	ELSE	Fail	msg=Unable to Upgrade firmware,since the SPP version is not greater than appliance version. SPPVersion : ${SPPNameAndVersion[1]} Appliance version: ${appliance_firmware_version} 
		#Validating the LI after firmware is flashed 
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Lists Should Be Equal	${appliance_firmware_version}	${SPPNameAndVersion[1]}		msg=The appliance version ${appliance_firmware_version} is not the same as spp version ${SPPNameAndVersion} after flashing the firmware
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}
		
	
Force flashing of the firmware
		[Documentation]   After the upgradation has happened this does a force flashing of the firmware
		[Tags]		F178	Smoke
		${SPPNameAndVersion} = 	Get the first SPP firmware name and version
		logger		SPP name is ${SPPNameAndVersion[0]}
		logger		SPP firmware version is ${SPPNameAndVersion[1]} 
		Change the natasha properties in dcs	${FUSION_IP}	${SPPNameAndVersion[1][0]}		${SPPNameAndVersion[1][1]}	#for DCS
		${resp} =	fusion_api_get_li		uri=/rest/sas-logical-interconnects
		Logger		${resp}		DEBUG
		${length} =		Get length		${resp['members']}
		:FOR 	${i}	IN RANGE	0	${length}
		\	${natasha_uri} =	Get from dictionary		${resp['members'][${i}]}		sasInterconnectUris
		\	${enclosure_uri} =	Get from Dictionary		${resp['members'][${i}]}		driveEnclosureUris
		\	${Logical_interconnect_uri} = 	Get from Dictionary		${resp['members'][${i}]}	uri
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}		#prevalidation
		\	Logger		Natasha uri ${natasha_uri}
		\	Logger		Enclosure uri ${enclosure_uri}
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Logger		Appliance version is ${appliance_firmware_version}
		\	Run Keyword If	'${SPPNameAndVersion[1][0]}' == '${appliance_firmware_version[0]}' and '${SPPNameAndVersion[1][1]}' == '${appliance_firmware_version[1]}'		Force flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]}
		\	...	ELSE	Fail	msg=Unable to force flash firmware,since the SPP and appliance version are not equal. SPPVersion : ${SPPNameAndVersion[1]} Appliance version: ${appliance_firmware_version}
		#Validating the LI after firmware is flashed
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Lists Should Be Equal	${appliance_firmware_version}	${SPPNameAndVersion[1]}		msg=The appliance version ${appliance_firmware_version} is not the same as spp version ${SPPNameAndVersion} after flashing the firmware
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}
		
			
Downgrade flashing of the firmware
		[Documentation]   After the upgradation has happened this does a downgrade on the firmware
		[Tags]		F178	Smoke
		${SPPNameAndVersion} = 	Get the Second SPP firmware name and version
		logger		SPP name is ${SPPNameAndVersion[0]}
		logger		SPP firmware version is ${SPPNameAndVersion[1]} 
		Change the natasha properties in dcs	${FUSION_IP}	${SPPNameAndVersion[1][0]}		${SPPNameAndVersion[1][1]}	#for DCS
		${resp} =	fusion_api_get_li		uri=/rest/sas-logical-interconnects
		Logger		${resp}		DEBUG
		${length} =		Get length		${resp['members']}
		:FOR 	${i}	IN RANGE	0	${length}
		\	${natasha_uri} =	Get from dictionary		${resp['members'][${i}]}		sasInterconnectUris
		\	${enclosure_uri} =	Get from Dictionary		${resp['members'][${i}]}		driveEnclosureUris
		\	${Logical_interconnect_uri} = 	Get from Dictionary		${resp['members'][${i}]}	uri
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}
		\	Logger		Natasha uri ${natasha_uri}
		\	Logger		Enclosure uri ${enclosure_uri}
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Logger		Appliance version is ${appliance_firmware_version}
		\	Run Keyword If	'${SPPNameAndVersion[1][0]}' < '${appliance_firmware_version[0]}' and '${SPPNameAndVersion[1][1]}' < '${appliance_firmware_version[1]}'		Downgrade flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]}
		\	...	ELSE	Fail	msg=Unable to downgrade firmware,since the SPP version is not lesser than appliance version. SPPVersion : ${SPPNameAndVersion[1]} Appliance version: ${appliance_firmware_version}
		#Validating the LI after firmware is flashed
		\	${appliance_firmware_version} =		Check the appliance firmware version		${natasha_uri}	${enclosure_uri}
		\	Lists Should Be Equal	${appliance_firmware_version}	${SPPNameAndVersion[1]}		msg=The appliance version ${appliance_firmware_version} is not the same as spp version ${SPPNameAndVersion} after flashing the firmware
		\	Validation for LI		${natasha_uri}		${Logical_interconnect_uri}
				
		
*** keywords ***
Flash the LI
	[Arguments]		${Logical_interconnect_uri}		${SPPNameAndVersion}		${appliance_firmware_version}
	${SPP_firmware_version} =	Set Variable	${SPPNameAndVersion[1]}
	Logger	Checking for type of flashing
	${flashing_type} =	Run Keyword If	'${SPP_firmware_version[0]}'=='${appliance_firmware_version[0]}' and '${SPP_firmware_version[1]}'=='${appliance_firmware_version[1]}' 	Force flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]}	
	...	ELSE IF		'${SPP_firmware_version[0]}' < '${appliance_firmware_version[0]}' and '${SPP_firmware_version[1]}' < '${appliance_firmware_version[1]}' 	Downgrade flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]}  
	...	ELSE IF		'${SPP_firmware_version[0]}' > '${appliance_firmware_version[0]}' and '${SPP_firmware_version[1]}' > '${appliance_firmware_version[1]}'		Upgrade flash of the firmware		${Logical_interconnect_uri}		${SPPNameAndVersion[0]} 
	...	ELSE	Fail	Msg=Unable to detect the type of flashing, firmware version mismatch 
	logger		The type of flashing is ${flashing_type} 


Get the first SPP firmware name and version
		${resp} =	 Fusion Api Get Firmware Driver
		#Logger		firmware response is ${resp}		DEBUG
		${components} =		get from dictionary		${resp['members'][0]}	fwComponents   #Members[0] for the first firmware bundle
		${isofilename} =	get from dictionary		${resp['members'][0]}	resourceId
		${length} =		Get length		${components}
		Logger		${length}		DEBUG
		:FOR	${x}	IN RANGE	0	${length}
		\	${SPP_firmware_version} =	Fetch the filename and return version 		${components[${x}]}
		${SPPNameAndVersion}=	Create List		${isofilename}		${SPP_firmware_version}
		[return]		${SPPNameAndVersion}

Get the Second SPP firmware name and version
		${resp} =	 Fusion Api Get Firmware Driver
		#Logger		firmware response is ${resp}		DEBUG
		${components} =		get from dictionary		${resp['members'][1]}	fwComponents   #Members[1] for the second firmware bundle
		${isofilename} =	get from dictionary		${resp['members'][1]}	resourceId
		${length} =		Get length		${components}
		Logger		${length}		DEBUG
		:FOR	${x}	IN RANGE	0	${length}
		\	${SPP_firmware_version} =	Fetch the filename and return version 		${components[${x}]}
		${SPPNameAndVersion}=	Create List		${isofilename}		${SPP_firmware_version}
		[return]		${SPPNameAndVersion}


Check the appliance firmware version
	[Arguments]		${natasha_uri}	${enclosure_uri}
	${resp} =	Fusion api get resource		${natasha_uri[0]}
	${natasha_firware_version} = 	get from dictionary		${resp}		firmwareVersion
	${resp} =	Fusion api get resource		${enclosure_uri[0]}
	${enclsoure_firware_version} = 	get from dictionary		${resp}		firmwareVersion
	${appliance_firmware_version} =		Create List		${natasha_firware_version}		${enclsoure_firware_version}
	[return]		${appliance_firmware_version}											

Upgrade flash of the firmware 
#update and orchestrated
	[Arguments]		${Logical_interconnect_uri}		${isofilename}
	logger		Upgrade flashing the firmware
	logger		the li uri is ${Logical_interconnect_uri}
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateOnly
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateFailFast
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors
	


Force flash of the firmware 
	[Arguments]		${Logical_interconnect_uri}		${isofilename}
	logger		Upgrade flashing the firmware
	logger		the li uri is ${Logical_interconnect_uri}
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateOnly	force=true
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateFailFast	force=true
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors



Downgrade flash of the firmware
	[Arguments]		${Logical_interconnect_uri}		${isofilename}
	logger		Upgrade flashing the firmware
	logger		the li uri is ${Logical_interconnect_uri}
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateOnly	force=True
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors
	${payload} =	Build firmware payload		Update	${isofilename}		Orchestrated	ValidateFailFast	force=True
	${resp} =	fusion_api_li_upgrade_firmware	${payload}		${Logical_interconnect_uri}
	Validate the firmware response until completed		${resp}  #check for errors

Build firmware payload
	[Arguments]		${command}	${isofilename}	${fwActivationMode}=None	${validationType}=None		${force}=false
	${payload} =		Create Dictionary		command=${command}
	...											fwBaseline=
	...											sppUri=${isofilename}
	...											fwActivationMode=${fwActivationMode}
	...											validationType=${validationType}
	...											force=${force}
	Logger		The payload is ${payload}
	[return]	${payload}
	
	
Validate the firmware response until completed		
	[Arguments]		${resp}
	${location} =	Get from dictionary		${resp['headers']}		location
	${host}		${task} =	Split String	${location}		rest
	${location} =	Catenate	SEPARATOR=	/rest	${task}
	logger	 the location is ${location}
	${resp} = 		Fusion Api Get Resource 	uri=${location}
	logger		${resp}
	Wait Until Keyword Succeeds		30 min	5 sec	Validate the response	${resp}  #task status is checked for completed 	


Validation for LI 
	[Arguments]		${interconnect_uri}		${LIuri}
	${resp} =	Fusion Api Get Resource			uri=${LIuri}
	${LIstate} =	Get from dictionary		${resp}		consistencyStatus
	Run Keyword If		'${LIstate}' != 'CONSISTENT'		Fail	msg=State for the LI is ${LIstate} and expected is CONSISTENT
	${length} =		Get length		${interconnect_uri}
	:FOR	${i}	IN RANGE	0	${length}
	\	${resp}=    Fusion Api Get Resource			uri=${interconnect_uri[${i}]}
	\	${state} =		get from dictionary		${resp}		state
	\	Run Keyword If		'${state}' != 'Configured'		Fail	msg=State for the ${interconnect_uri[${i}]} is ${state} and expected is Configured
	\	logger		state of interconnect is ${state} 


Check for percent complete
	[Arguments]		${resp}	
	${uri} =	Get from dictionary		${resp}		 uri
	${resp} = 		Fusion Api get resource 	uri=${uri}
	logger	 the percent is ${resp['percentComplete']}
	Run Keyword If  ${resp['percentComplete']} != 100  FAIL  msg=Failed as the percent complete is not 100 after the timeout	
		