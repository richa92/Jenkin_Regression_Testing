*** Settings ***
Documentation     Verifying the feature F176 through UI 

Library			../UserInputs/functions.py
Resource		../Resources/resources.txt
Variables		../UserInputs/variables.py
*** Test Cases ***

Open Browser and Login into HP OneView
	[Documentation]		Opens the browser and logins into HP oneview \n
	[Tags]		smoke 	login	try	Hardware
	[setup]			Run keywords
									Logger		Logging into HPOneView
									Open Browser and Login

CreateLIG
	[Documentation]		Create LIG passed in the Ligdata.xml file \n
	[Tags]			LIG		smoke	try
	[setup]			Run keywords
										
										Set Log Level 		TRACE 
										Fusion UI Navigate To Logical Interconnect Groups Page
										Load Test data		${CURDIR}/Ligdata.xml	
										Fusion UI SAS Create Logical Interconnect Group			@{Testdata.ligs}  # Creates the LIG and verifies the existence of the same 
										Sleep	 5

EditLIG
	[Documentation]		Edit LIG as per the inputs in Ligdata.xml file \n
	[Tags]			LIG		smoke		
	[setup]			Run keywords
										Open Browser and Login
										Set Log Level 		TRACE 
										Sleep 	4
										Load Test data		${CURDIR}/Ligdata.xml	
										Fusion Ui SAS Edit Logical Interconnect Group		@{Testdata.ligs_edit}
	
										
Verify LIG exists 															
	[Documentation]			Verifying the LIG specified in the variables.py. used to check only one at a time  \n
	[Tags]					LIG	smoke
	[setup]			Run Keywords		
										
										Set Log Level 		TRACE 
										Sleep	 02
										Logger		Verifying whether LIG: ${UI_LIG_name} is created.
										${resp} =		Fusion Ui SAS Verify Logical Interconnect Group				${UI_LIG_name}    # Verify's the LIG by the name passed in variables.py 
										Logger		Verify parameter is ${resp}		DEBUG
										Run keyword If 		'${resp}'=='False'		Fail		${UI_LIG_name} is not created	

										
Create_EG_1
	[Documentation]		Creating EG having one enclosure count in the EGdata.xml file \n
	[Tags]			EG		smoke	try
	[setup]			Run keywords
										Open Browser and Login
										Sleep		5
										Login to Fusion Via REST		${IP}    ${admin_credentials}
										Set Log Level		TRACE
										${EG_count} =		Set Variable	1
										${LIG_LIST}=  Combinations  ${LIG_Names}  ${${EG_count}}
										Logger		lig LIst is : ${LIG_LIST}		DEBUG
										Append the LIG xml output to a file		${EG_count}		${LIG_LIST}
										Sleep	3
										Load Test data		${CURDIR}/EGdata.xml
										Fusion SAS UI Create Enclosure Group		@{Testdata.Eggrp}
										Sleep	4

Create_LE
	[Documentation]		Creating Logical Enclosure from three enclosure combination provided in the LEdata.xml file \n
	[Tags]		LE		smoke	Hardware
	[setup]		Run Keywords			
										#Open Browser and Login
										Load Test data 		${CURDIR}/LEdata.xml
										#Fusion SAS UI Create Enclosure Group		@{Testdata.Eggrp}	#Create one enclosure group for the LE creation  
										Fusion UI Navigate to Logical Enclosures Page
										Fusion UI Create Logical Enclosure		@{Testdata.LE_create}


Verify Logical Interconnect through Rest
	[Documentation]    Get the response of the Logical Enclosure and validate the creation of Logical Interconnects
    [Tags]		Hardware
    [setup]			   Run Keywords
    ${resp}		Fusion Api Get Resource			uri=${logicalEnclosureUri}
    Logger 		\n Validating for ${logicalEnclosureUri}
    Validate resource attribute  status_code  ${logicalEnclosureUri}  ${resp}    200
    Validate resource attribute  uri  ${logicalEnclosureUri}  ${resp}
    ${length} =		Get Length  ${resp['members'][0]['logicalInterconnectUris']}
    :FOR	${x}	IN RANGE	0	${length}    
    \	${resp1_uri}=  Set Variable    ${resp['members'][0]['logicalInterconnectUris'][${x}]}
    \	Logger 		\n Validating for ${resp1_uri}
    \	${resp1}=		Fusion Api Get Resource			uri=${resp1_uri}
    \	Validate resource attribute  status_code  ${resp1_uri}  ${resp1}    200
    \	Validate resource attribute  consistencyStatus  ${resp1_uri}  ${resp1}  CONSISTENT
    \	Validate resource attribute  permittedInterconnectTypeUri  ${resp1_uri}  ${resp1['interconnectMap']['interconnectMapEntries'][0]}  ${permittedInterconnectTypeUri}
    \	Verify sas_Interconnects  ${resp1['sasInterconnectUris']}
    
    
Verify_LI after creation
	[Documentation]    Verify the creation of LI after LE is created \n
    [Tags]             LE smoke	Hardware
    [setup]			   Run Keywords
    					#Open Browser and Login 
    					Sleep		5
    					Load Test data 		 ${CURDIR}/LEdata.xml
    					Fusion UI Verify Logical Interconnects Status		@{Testdata.LIS}
    					

Create Server Profile
	[Documentation]		Create a server profile based on the SPdata.xml file 
	[Tags]				Hardware	try
	[setup]				Run Keywords
						Load Test data		${CURDIR}/SPdata.xml
						Open Browser and Login
						#Load Test data		${CURDIR}/SPdata.xml
						Fusion UI Create Server Profile			@{TestData.servers}    

Verify ServerProfile 
	[Documentation]    Get the response of the ServerProfile and Validate
    
    ${resp}		Fusion Api Get Resource			uri=${serverProfileUri}
    Logger 		\n Validating for ${serverProfileUri}
    Validate resource attribute  status_code  ${serverProfileUri}  ${resp}    200
    Validate resource attribute  uri  ${serverProfileUri}  ${resp}
    ${length} =		Get Length			${resp['members']}
    :FOR	${x}	IN RANGE	0	${length}
    \	${member_uri}		Get From Dictionary		${resp['members'][${x}]}		uri
	\	Logger 		\n Validating for ${member_uri}
    \	Validate resource attribute  status  ${serverProfileUri}  ${resp['members'][${x}]}    OK
    \	${member_resp}	Fusion Api Get Resource			uri=${member_uri}
    \	Validate resource attribute  status_code  ${member_uri}  ${member_resp}    200
    \	Validate resource attribute  uri  ${member_uri}  ${member_resp}
    \	${SP_NAME}=  Set Variable  ${member_resp['name']}
    \	${task_status}=	catenate	Created server profile: ${SP_NAME}.
    \	${task_uri}	Get From Dictionary  ${member_resp}  taskUri
    \	Validating task URI	${member_resp}  ${task_status}  taskUri
    
    

Create sas-logical-jbod
	[Documentation]    Create sas-logical-jbod on each LI \n
    [Tags]             LJBOD  smoke  hardware
	[setup]			   Run Keywords
	
	
	${sasLIResp}=  Fusion Api Get Resource			uri=${sasLogicalInterconnectUri}
	${length} =		Get Length			${sasLIResp['members']}
	:FOR  ${x}  IN RANGE  0  ${length}
	\	  ${sasLIUri}=   Set Variable  ${sasLIResp['members'][${x}]['uri']}
	\	  ${sas_ljbod_Payload}=  Build sas logical jbod Payload   testJbod${x}  ${sasLIUri}
	\     ${ljbodoutresp}=   Fusion Api Create Sas Logical Jbod   ${sas_ljbod_Payload}
    \	  Logger 		\n Validating for ${logicalEnclosureUri}
    \     Validate resource attribute  status_code  ${logicalEnclosureUri}  ${ljbodoutresp}    200
    \     Validate resource attribute  uri  ${logicalEnclosureUri}  ${ljbodoutresp}
    \	  sleep  5
    \	  Validating task URI	${ljbodoutresp}  ${sasLJbod_task_create_status}


#at the end 
Delete sas-logical-jbod
		[Documentation]    Create sas-logical-jbod on each LI \n
    	[Tags]             LJBOD  smoke  hardware
		[setup]			   Run Keywords
		  
	      ${sasLJbodResp}=  Fusion Api Get Resource			uri=${sasLogicalJbodUri}
		  ${length} =		Get Length			${sasLJbodResp['members']}
		  :FOR  ${x}  IN RANGE  0  ${length}
		  \	  ${sasLJbodUri}=   Set Variable  ${sasLJbodResp['members'][${x}]['uri']}
		  \   ${ljbodoutresp}=   Fusion Api Delete Sas Logical Jbod   uri=${sasLJbodUri}
		  \   sleep  3
		  \   Validate resource attribute  status_code  ${sasLJbodUri}  ${ljbodoutresp}    200
		  \   Validating task URI	${ljbodoutresp}  ${sasLJbod_task_delete_status}    
    
        


    											
										