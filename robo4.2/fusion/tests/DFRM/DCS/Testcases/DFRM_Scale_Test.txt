*** Settings ***
Documentation     Performing Scale test for 20 enclosures with 40 server hardware 100 drive enclosures and 4000 disk drives

Suite Setup         Login to Fusion Via REST
#Suite Teardown     Run Keyword If Any Critical Tests Failed        Fatal Error     msg=Critical test case failed so test suite can't continue
Library         ../UserInputs/functions.py
Resource        ../Resources/resources.txt
#Resource            ../../../resource/fusion_api_all_resource_files.txt
Variables       ../UserInputs/variables.py


*** Test Cases ***

Creation of LIG
    [Documentation]         Creating combinations of logical interconnect groups from the list provided in the variables.py file \n
    [Tags]  F176   Scale


                                        Create LIG with bay combinations  ${LIG_Names}


Validating Attributes For LIG
    [Documentation]         Getting the Sas Logical interconnect and validating each UID for Status, State, Power, Model and Serial Number \n
    [Tags]  F176   Scale


                                        Set Log Level    TRACE
                                        ${resp}     Fusion Api Get Resource         uri=/rest/sas-logical-interconnect-groups
                                        Logger      \n Validating for /rest/sas-logical-interconnect-groups
                                        Validate URI for the response       ${resp}
                                        ${length} =     Get Length          ${resp['members']}
                                        :FOR    ${x}    IN RANGE    0   ${length}
                                        \   ${resp_uri}     Get From Dictionary     ${resp['members'][${x}]}        uri
                                        \   Logger      \n Validating for ${resp_uri}
                                        \   ${resp_uri1}        Fusion Api Get Resource         uri=${resp_uri}
                                        \   Validate resource attribute  uri  ${resp_uri}  ${resp_uri1}
                                        \   Validate resource attribute  status_code  ${resp_uri}  ${resp_uri1}    200
                                        \   Validate resource attribute  state  ${resp_uri}  ${resp_uri1}    ${lig_state}
                                        \   Validate resource attribute  permittedInterconnectTypeUri  ${resp_uri}  ${resp_uri1['interconnectMapTemplate']['interconnectMapEntryTemplates'][0]}  ${permittedInterconnectTypeUri}


EG creation for LE
    [Documentation]         After Getting on encl ring topology creation of EG LE & LIs
    [Tags]  F176  Scale


                                        Set Log Level    TRACE
                                        ${getENCL}=          Fusion Api Get Resource            uri=/rest/enclosures
                                        ${count}=        get from dictionary        ${getENCL}      count
                                        logger      Tota count of encl is ${count}
                                        run Keyword if       '${count}' == '1'      creating logical enclosure if single enclosure found        ${count}        ${getENCL}
                                        ${resp}         Fusion Api Get Resource         uri=/rest/interconnect-link-topologies
                                        Logger      \n Validating for /rest/sas-logical-interconnect-groups
                                        Validate URI for the response       ${resp}
                                        ${count}=   get from dictionary     ${resp}     count
                                        logger      total link topology attached are ${count}
                                        ${length} =     Get Length          ${resp['members']}
                                        :FOR    ${x}    IN RANGE    0   ${length}
                                        \   ${enclosureMembers}     Get From Dictionary     ${resp['members'][${x}]}    enclosureMembers
                                        \   logger      ring members are ${enclosureMembers}
                                        \   Read enclosure member from topology     ${enclosureMembers}
                                        \   ${enc_list} =   Read enclosure member from topology     ${enclosureMembers}
                                        \   ${EGNAME}=      catenate    RG_EG${x}
                                        \   ${LENAME}=      catenate    RG_LE${x}
                                        \   Creation of LE      ${enc_list}     ${EGNAME}       ${LENAME}
                                        \   ${getLE}            Fusion Api Get Resource         uri=/rest/logical-enclosures
                                        \   logger      ${getLE}





Power off test
    [Documentation]    Powering OFF all server Hardware for creation of server profile \n
    [Tags]             F636  Scale


    Power off ALL servers





Create ServerProfile

    [Documentation]    Create server profile on each server hardware and attaching jbods to it \n
    [Tags]             F176  Scale


    ${ServerHarwareResp}=     Fusion Api Get Resource   uri=${serverHardwareUri}
    logger  ServerHarwareResp:${ServerHarwareResp}
    ${SPlength}=  Get Length   ${ServerHarwareResp['members']}
    ${serverHardwareUriPowerOffList}=  Create List
    :FOR      ${x}      IN RANGE      0      ${SPlength}
    \  ${PowerState}=    Get from Dictionary   ${ServerHarwareResp['members'][${x}]}    powerState
    \  ${serverHardwareUri}=   Get from Dictionary   ${ServerHarwareResp['members'][${x}]}    uri
    \  Run Keyword If  '${PowerState}' == 'Off'  Append to List  ${serverHardwareUriPowerOffList}  ${serverHardwareUri}
    ${AvailServerHarwareLen}=   Get Length  ${serverHardwareUriPowerOffList}
    Logger   total number of server hardware is ${AvailServerHarwareLen}
    ${SH_hereList}=    Get Variable Value     ${serverHardwareUriPowerOffList}
    Logger    here is the list of SHHW in list ${SH_hereList}
    ${AllLIlist}=    Get Available LI on OneView
    Logger    these are total logical interconnects ${AllLIlist}
    ${AllLIlistLen}=   Get Length     ${AllLIlist}
    Logger    at this point LI present are ${AllLIlistLen}
    ${Final_SH_List}     Get All Server Hardware Within OneView Appliance
    Logger      Final value for HW is ${Final_SH_List}
    :FOR       ${x}      IN RANGE       0          ${AllLIlistLen}
    \  ${sasLIUri}=    Get Variable Value    ${AllLIlist[${x}]}
    \  Logger    this LI will give link to specific encl ${sasLIUri}
    \  ${finalDriveTypesList}    Get Available drives    ${ServerHardwareUri}    ${sasLIUri}
    \  Logger    Total list of drive present is ${finalDriveTypesList}
    \  ${Final_SH1_List}        Server Hardware List For SP Creation Payload
    \  ${count1}=    Get Length     ${Final_SH1_List[${x}]}
    \  ${NumOfLJbod}=    Set Variable    ${finalDriveTypesList}
    \  ${get_len_jbods}=    Get Length     ${NumOfLJbod}
    \  ${Final_NumOfLJBOD}=    Evaluate      ${get_len_jbods}/${count1}
    \  Logger    Final ljbods to be created  are ${Final_NumOfLJBOD}
    \  Select numbers of drives for first 100 JBODs     ${finalDriveTypesList}        ${Final_NumOfLJBOD}      ${x}      ${sasLIUri}











*** keywords ***


Build Logical Enclosure Payload For Scale
    [Documentation]    Build json payload to Add new Logical Enclosure
    [Arguments]    ${Name}    ${EG_NAME}    ${enc_list}
    ${EG_uri}=    Get Enclosure Group Uri    ${EG_NAME}
    ${LogicalEnclosure}    Create Dictionary    name=${Name}
    ...                                        enclosureGroupUri=${EG_uri}
    ...                                        enclosureUris=${enc_list}
    Logger      the build le payload is ${LogicalEnclosure}
    [Return]    ${LogicalEnclosure}





Create LJbod per LI For Scale
    [Documentation]   Verify sas-interconnect through rest
    [Arguments]      ${AvailDriveTypesandSizeDict}    #${num}
     ${items}=    Get Dictionary Values    ${AvailDriveTypesandSizeDict}
     ${items_len}=  Get Length   ${items}
     Logger  length of available drive type is ${items_len}
     ${DriveTypes}=  Get Dictionary items  ${AvailDriveTypesandSizeDict}
     ${finalDriveTypesList}=  Create List
     :FOR  ${key}  ${value}  IN  @{DriveTypes}
     \   ${jbod_len}=  Evaluate  ${value[${1}]}/${num_Jbod_Drives}
     \   ${DriveType}=  Set Variable  ${key}
     \   ${tempList}=   Create DriveType List    ${DriveType}   ${jbod_len}
     \   ${finalDriveTypesList}=  Combine Lists   ${finalDriveTypesList}    ${tempList}
     [Return]   ${finalDriveTypesList}





Read enclosure member from topology
    [Arguments]         ${resp}
    ${len}=  Get Length    ${resp}
    logger  ${len}
    ${enc_list}=    Create list
    :FOR  ${i}  IN RANGE  0  ${len}
    \   ${enclosureuri}=    get from dictionary     ${resp[${i}]}       enclosureUri
    \   logger      ${enclosureuri}
    \   Append to list      ${enc_list}         ${enclosureuri}
    logger      list of encloser is ${enc_list}
    [return]        ${enc_list}






Creation of LE

    [Arguments]             ${enc_list}         ${EGNAME}       ${LENAME}
            ${enclCount}=       Get Length      ${enc_list}
            logger      encloser count in this ring is ${enclCount}
            ${interconnect}=    Fusion Api Get Resource         uri=/rest/sas-interconnects
            ${length} =     Get Length          ${interconnect['members']}
            :FOR    ${x}    IN RANGE    0   ${length}
            \   ${interconnect_uri}=   get from dictionary      ${interconnect['members'][${x}]}    uri
            \   ${eachinterconnect}         Fusion Api Get Resource         uri=${interconnect_uri}
            ${EGResp}=    Fusion Api Get Resource           uri=${enclosureGroupUri}
            Logger      \n Validating for ${enclosureGroupUri}
            Validate resource attribute  status_code  ${enclosureGroupUri}  ${EGResp}    200
            Validate resource attribute      uri    ${enclosureGroupUri}     ${EGResp}
            ${EGmembers}=  Get Length   ${EGResp['members']}
            ${LIG_List}=  Create List
            :FOR  ${x}  IN RANGE  0  ${enclCount}
            \   Append to List  ${LIG_List}  ${LIG_Names[2]}
            Create Enclosure Group  ${EGNAME}     ${LIG_List}
            ${LEpayload}=       Build Logical Enclosure Payload For Scale    ${LENAME}        ${EGNAME}         ${enc_list}
            ${LEResp}=          Fusion Api Create Logical Enclosure           ${LEpayload}
            Logger   Creating Logical Enclosure  ${LENAME}
            Logger  This is responce of LE create payload ${LEResp}     DEBUG
            Validate resource attribute     status_code         ${LEResp['uri']}         ${LEResp}       200
            Validate API response For Scale         ${LEResp}
            ${LIResp}=    Fusion Api Get Resource           uri=/rest/sas-logical-interconnects
            logger      Response of LI is ${LIResp}
            ${Status}    Get From Dictionary    ${LIResp}    status_code
            run keyword if    '${Status}' == 200    Pass        msg=LI is fine
            ${length} =     Get Length          ${LIResp['members']}
            :FOR    ${x}    IN RANGE    0   ${length}
            \   Run Keyword And Continue On Failure     Logical Interconnect Should Exist       ${LIResp['members'][${x}]}




Verifying LE & LI creation through Rest
    [Arguments]         ${getLE}

    Logger      \n Validating for ${logicalEnclosureUri}
    Validate resource attribute  status_code  ${logicalEnclosureUri}  ${getLE}    200
    Validate resource attribute  uri  ${logicalEnclosureUri}  ${getLE}
    ${length} =     Get Length  ${getLE['members'][0]['logicalInterconnectUris']}
    :FOR    ${x}    IN RANGE    0   ${length}
    \   ${resp1_uri}=  Set Variable    ${getLE['members'][0]['logicalInterconnectUris'][${x}]}
    \   Logger      \n Validating for ${resp1_uri}
    \   ${resp1}=       Fusion Api Get Resource         uri=${resp1_uri}
    \   Validate resource attribute      status_code      ${resp1_uri}      ${resp1}    200
    \   Validate resource attribute      consistencyStatus      ${resp1_uri}      ${resp1}      Consistent
    \   Validate resource attribute      permittedInterconnectTypeUri      ${resp1_uri}      ${resp1['interconnectMap']['interconnectMapEntries'][0]}      ${permittedInterconnectTypeUri}
    \   Verify sas_Interconnects      ${resp1['sasInterconnectUris']}





creating logical enclosure if single enclosure found
    [Arguments]     ${length}       ${resp}
    ${getENCL}=          Fusion Api Get Resource            uri=/rest/enclosures
    ${count}=            get from dictionary                ${getENCL}          count
    logger      ${count}
    ${LIG_List}=  Create List
    :FOR  ${x}  IN RANGE  0  ${count}
    \   Append to List  ${LIG_List}  ${LIG_Names[2]}
    Create Enclosure Group    ${EGNAMENO}         ${LIG_List}
    ${LEpayload}=   Build Logical Enclosure Payload For Scale   ${LENAMENO}   ${EGNAMENO}       ${enc_list1}
    ${LEResp}=   Fusion Api Create Logical Enclosure  ${LEpayload}
    Logger   Creating Logical Enclosure  ${LENAMENO}
    Logger  Create LE responce for one encloser is ${LEResp}        DEBUG
    Validate resource attribute  status_code  ${LEResp['uri']}  ${LEResp}    200
    Validate API response For Scale         ${LEResp}
    ${LIResp}=    Fusion Api Get Resource           uri=/rest/sas-logical-interconnects
    logger      Response of LI is ${LIResp}
    ${Status}    Get From Dictionary    ${LIResp}    status_code
    run keyword if    '${Status}' == 200    Pass        msg=LI is fine
    ${length} =     Get Length          ${LIResp['members']}
    :FOR    ${x}    IN RANGE    0   ${length}
    \   Run Keyword And Continue On Failure     Logical Interconnect Should Exist       ${LIResp['members'][${x}]}
    ${getLE}            Fusion Api Get Resource         uri=/rest/logical-enclosures
    logger      ${getLE}
    Verifying LE & LI creation through Rest         ${getLE}
    Pass Execution          All features available in this version tested





Interconnect State Should Be
    [Arguments]     ${resp}     ${yourinput}        ${expected}
    ${state} =      get from dictionary     ${resp}         ${yourinput}
    run keyword if      '${state}' != '${expected}'     Fail        msg=state for my expected is ${expected} and actual is ${state}
    logger      state of interconnect is ${state}


Logical Interconnect Should Exist
    [Arguments]     ${resp}
    ${sasLogicalInterconnectGroupAttached} =    get from dictionary         ${resp}         sasLogicalInterconnectGroupUri
    ${length}=  Get Length          ${sasLogicalInterconnectGroupAttached}
    run keyword if          '${length}' == 0        Fail    msg=sasLogicalInterconnectGroupURI name is null
    logger      Attached SAS LIG URIs are ${sasLogicalInterconnectGroupAttached}
    ${sasInterconnectAttached} =    get from dictionary         ${resp}         sasInterconnectUris
    ${length}=  Get Length      ${sasInterconnectAttached}
    ${state1} =     get from dictionary         ${resp}         state
    run keyword if          '${length}' == 0        Fail        msg=sasInterconnectURI name is null
    run keyword if          '${length}' == '1'      Logical Interconnect State Should Be   ${state1}   NotRedundant
    run keyword if          '${length}' > '1'       Logical Interconnect State Should Be   ${state1}   Redundant
    logger      ${state1}
    logger      Attached interconnect uris are${sasInterconnectAttached}
    ${driveEnclosureAttached} = get from dictionary         ${resp}         driveEnclosureUris
    ${length}=  Get Length      ${driveEnclosureAttached}
    run keyword if          '${length}' == 0        Fail    msg=driveEnclosureURI name is null
    logger      Attached drive enclosure URI is ${driveEnclosureAttached}


Logical Interconnect State Should Be
    [arguments]     ${state}    ${expected}
    logger      state is ${state}
    logger      expected is ${expected}
    run keyword if      '${state}' != '${expected}'     Fail    msg=state for my expected is ${expected} and actual is ${state}







validating content on uri
    [Arguments]     ${resp}     ${yourinput}    ${myexpected}
    ${name} =   get from dictionary     ${resp} ${yourinput}
    logger      ${name}
    run keyword if      '${name}' != '${myexpected}'    Fail    msg=Detail found is ${name} and my expected is ${myexpected}


Validate API response For Scale
    [Arguments]     ${resp}
    ${resp_uri} =   Get from dictionary     ${resp}     uri
    Wait Until Keyword Succeeds  10 min    10 sec  Validate computedPercentComplete   ${resp}
    ${resp} =   Fusion api get resource     ${resp_uri}
    ${taskstate} =      Get from dictionary     ${resp}     taskState
    logger      ${taskstate}        DEBUG
    ${taskerror} =      Get from dictionary     ${resp}     taskErrors
    Run keyword If      '${taskstate}' != 'Completed'        Task Error     ${taskerror}    ${resp_uri}


Task Error
    [Arguments]     ${taskerror}    ${resp_uri}
    Logger  taskeror : ${taskerror}     DEBUG
    ${error_code} =     Get from dictionary     ${taskerror[0]}     errorCode
    ${message} =    Get from dictionary     ${taskerror[0]}     message
    Fail    msg= Failed for the uri ${resp_uri} due to ${error_code} \n Additional Info : ${message}





Build ServerProfile Payload For Scale
    [Documentation]   Create ServerProfile Payload
    [Arguments]     ${SP_Name}    ${finalDriveTypesList}     ${NumOfLJbod}     ${sasLIUri}     ${mem1}
    ${content_HW}    Get For Mezz Slots Value of Server Hardware    ${mem1}
    Logger      number of slot is ${content_HW}
    Logger    here spname is ${SP_Name}
    Logger    here drives is ${finalDriveTypesList}
    Logger    here jbods number is ${NumOfLJbod}
    ${controllers}=  Create List
    ${overriddenSettings}=  Create List
    ${connections}=  Create List
    ${sasLogicalJBODs}=   Create List
    :FOR    ${x}    IN RANGE    1    ${NumOfLJbod}
    \  ${sasLogicalJBODsDict}=    Create Dictionary   id=${x}
    \  ...                        deviceSlot=Mezz ${content_HW}
    \  ...                        name=SAS-ljbod-00${x}
    \  ...                        numPhysicalDrives=${1}
    \  ...                        driveMinSizeGB=${1}
    \  ...                        driveMaxSizeGB=${10000}
    \  ...                        driveTechnology=${finalDriveTypesList[${x}]}
    \  ...                        sasLogicalJBODUri=${null}
    \  Append To List    ${sasLogicalJBODs}    ${sasLogicalJBODsDict}
    ${localStorage}  Create Dictionary   sasLogicalJBODs=${sasLogicalJBODs}
    ...                                  controllers=${controllers}
    ${bios}    Create Dictionary  manageBios=false
    ...                           overriddenSettings=${overriddenSettings}
    ${firmware}  Create Dictionary  manageFirmware=false
    ...                             firmwareBaselineUri=
    ...                             forceInstallFirmware=false
    ...                             firmwareInstallType=${null}
    ${bootMode}    Create Dictionary   manageMode=false
    ${SPpayload}   Create Dictionary           name=${SP_Name}
    ...                                        type=${serverProfileType}
    ...                                        serverHardwareUri=${mem1}
    ...                                        serverHardwareTypeUri=
    ...                                        enclosureGroupUri=
    ...                                        serialNumberType=Virtual
    ...                                        iscsiInitiatorNameType=AutoGenerated
    ...                                        macType=Virtual
    ...                                        wwnType=Virtual
    ...                                        description=
    ...                                        affinity=Bay
    ...                                        connections=${connections}
    ...                                        boot=${null}
    ...                                        sanStorage=${null}
    ...                                        hideUnusedFlexNics=true
    ...                                        iscsiInitiatorName=
    ...                                        osDeploymentSettings=${null}
    ...                                        localStorage=${localStorage}
    ...                                        bios=${bios}
    ...                                        bootMode=${bootMode}
    ...                                        firmware=${firmware}

    [Return]   ${SPpayload}


Select numbers of drives for first 100 JBODs
    [Documentation]   Selecting drives for 100 ljbods each from list of total 200 drives
    [Arguments]    ${finalDriveTypesList}        ${Final_NumOfLJBOD}     ${x}    ${sasLIUri}
    ${List1}=     Set Variable     ${finalDriveTypesList[0:100]}
    Logger     our list one is ${List1}
    ${List2}=     Set Variable        ${finalDriveTypesList[100: ]}
    ${Final_SH1_List}        Server Hardware List For SP Creation Payload
    ${count1}=    Get Length     ${Final_SH1_List[${x}]}
    :FOR    ${i}    IN RANGE    0    ${count1}
    \     ${mem1}=     Get Variable Value     ${Final_SH1_List[${x}][${i}]}
    \    Logger    the value of final mem one to be part of payload is ${mem1}
    \    Run Keyword If     ${i}==0     creation of serverprofile for scale    TestSP${x}${i}         ${List1}       ${Final_NumOfLJBOD}    ${sasLIUri}    ${mem1}    ${x}    ${i}
    \    ...                ELSE     creation of serverprofile for scale    TestSP${x}${i}        ${List2}       ${Final_NumOfLJBOD}    ${sasLIUri}    ${mem1}    ${x}    ${i}




creation of serverprofile for scale
    [Documentation]   Final call for server profile payload
    [Arguments]    ${SP_Name}        ${List}       ${Final_NumOfLJBOD}    ${sasLIUri}    ${mem}    ${x}    ${i}
    ${SPpayload}=  Build ServerProfile Payload For Scale     ${SP_Name}        ${List}       ${Final_NumOfLJBOD}    ${sasLIUri}    ${mem}
    Logger   Creating TestSP${x}${i} Server Profile
    Logger   payload for sp creation is ${SPpayload}
    ${SPCreateResp}=   Fusion Api Create Server Profile  ${SPpayload}
    Logger  Responce for server profile creation is ${SPCreateResp}





Get All Device Bays
    [Documentation]    to select drive bays from members of encl
    [Arguments]      ${resp}
    Logger  the first member is ${resp}
    ${len_bays}=    Get Length    ${resp['deviceBays']}
    Logger    total device bays are ${len_bays}
    ${sh_uri}=  Set Variable  ${EMPTY}
    ${Specific_SH}=    Create List
    :FOR    ${x}    IN RANGE    0    ${len_bays}
    \   ${uri}=   get from dictionary        ${resp['deviceBays'][${x}]}      coveredByDevice
    \   ${resp_uri}=     Fusion Api Get Resource       uri=${uri}
    \   ${Category}    Get From Dictionary    ${resp_uri}    category
    \   ${sh_uri}     Get From Dictionary    ${resp_uri}    uri
    \   Run Keyword If       ${Category.startswith('server-hardware')} == True     Append To List     ${Specific_SH}     ${sh_uri}
    \   Logger    each server hardware in an encloser ${Specific_SH}
    [Return]     ${Specific_SH}



Get all server hardware in an enclosure
        ${resp}=     Fusion Api Get Resource     uri=/rest/enclosures
        ${resp_len}=     Get Length      ${resp}
        ${AllSHHWof encl}=    Create List
        :FOR     ${x}    IN RANGE    1        ${resp_len}
        \    ${resp1}=     Fusion Api Get Resource     uri=/rest/server-hardware?filter="'locationUri' eq '/rest/enclosures/0000000000A6610${x}'"
        \    Logger    All server hardware in an encloser after filter is ${resp1}
        \    ${resp1_len}=    Get Length     ${resp1['members']}
        \    Logger    length of serverHW after filter in an encl is ${resp1_len}




Get All Server Hardware Within OneView Appliance
    [Documentation]    selecting all server hardware within the OneView appliance
    ${resp}=  Fusion Api Get Resource       uri=/rest/enclosures
    ${len_resp}=    Get Length       ${resp['members']}
    ${Final_SH_List}=   Create List
    :For    ${x}    IN RANGE    0    ${len_resp}
    \    Get All Device Bays    ${resp['members'][${x}]}
    \   ${sh_uri}        Get All Device Bays    ${resp['members'][${x}]}
    \    Append To List     ${Final_SH_List}     ${sh_uri}
    Logger    Final list of server hardwarefor enc uri ${Final_SH_List}
    [Return]     ${Final_SH_List}



Server Hardware List For SP Creation Payload
    Get all server hardware in an enclosure
    ${resp}=  Fusion Api Get Resource       uri=/rest/enclosures
    ${len_resp}=    Get Length       ${resp['members']}
    ${Final_SH1_List}=   Create List
    :For    ${x}    IN RANGE    0    ${len_resp}
    \    ${Specific_SH}     Get All Device Bays     ${resp['members'][${x}]}
    \    Logger    list of server Hardware within enc {Specific_SH}
    \    Append To List      ${Final_SH1_List}      ${Specific_SH}
    \    Logger    Final list of hardware to use in payload ${Final_SH1_List}
    [Return]     ${Final_SH1_List}




Get Available drives
    [Documentation]    Create Drive Technology Dictionary with deviceInterface and DriveType
    [Arguments]          ${ServerHardwareUri}    ${sasLIUri}
     ${AvailDriveTypesandSizeDict}=  Get Available Drives For LI   ${sasLIUri}
     Create LJbod per LI For Scale    ${AvailDriveTypesandSizeDict}
     ${finalDriveTypesList}    Create LJbod per LI For Scale    ${AvailDriveTypesandSizeDict}
     Logger    final drive type for list is ${finalDriveTypesList}
     ${length}=    Get Length    ${finalDriveTypesList}
     Logger    length of drive is ${Length}
     :FOR    ${i}    IN RANGE    0    ${Length}
     \    Logger    each drive type is here hahaha ${finalDriveTypesList[${i}]}
     [Return]               ${finalDriveTypesList}



Get Available LI on OneView
    [Documentation]  Get the Available LI on OneView
    ${resp}     Fusion Api Get Resource         uri=/rest/sas-logical-interconnects
    ${length} =     Get Length          ${resp['members']}
    ${AllLIlist}=  Create List
    :FOR    ${x}    IN RANGE    0   ${length}
    \   ${Li_uri}=   get from dictionary        ${resp['members'][${x}]}    uri
    \   Logger  ${Li_uri}
    \    Append To List     ${AllLIlist}        ${Li_uri}
    [Return]    ${AllLIlist}


Get For Mezz Slots Value of Server Hardware
    [Documentation]    Collecting mezz slot value for the server hardware which is going to be part of server profile
    [Arguments]          ${ServerHardwareUri}
    ${resp}=  Fusion Api Get Resource       ${ServerHardwareUri}
    ${port_map}=   get from dictionary        ${resp}       portMap
    ${device_Slot}=     get from dictionary   ${port_map}       deviceSlots
    Logger      device slot value content is ${device_Slot}
    ${len}=     Get Length      ${device_Slot}
    Logger      Length of device slot is ${len}
    ${ServerHW_dict}=   Server Hardware Dictionary for P542D controller Type        ${device_Slot}     ${ServerHardwareUri}
    ${content_HW}=      get from dictionary     ${ServerHW_dict}    ${ServerHardwareUri}
    Logger      number of slot is ${content_HW}
    [Return]        ${content_HW}


Server Hardware Dictionary for P542D controller Type
    [Documentation]    collecting all server hardwares where device name is Smart Array P542D Controller
    [Arguments]     ${device_Slot}         ${ServerHardwareUri}
    ${len}=     Get Length      ${device_Slot}
    ${ServerHW_dict}=  Create Dictionary
    :FOR    ${x}    IN RANGE    0       ${len}
    \   Run Keyword If  '${device_Slot[${x}]['deviceName']}' == 'Smart Array P542D Controller'       Set To Dictionary   ${ServerHW_dict}      ${ServerHardwareUri}=${device_Slot[${x}]['slotNumber']}
    [Return]    ${ServerHW_dict}


