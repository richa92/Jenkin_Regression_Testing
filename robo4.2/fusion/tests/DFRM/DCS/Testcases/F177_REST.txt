*** Settings ***
Documentation     Verifying the features of F177 ie Creating single, multiple and unassigned server profiles ! 

Suite Setup 		Login to Fusion Via REST
Library			../UserInputs/functions.py
Resource		../Resources/resources.txt
Variables		../UserInputs/variables.py


*** Test Cases ***

Create ServerProfile with single Jbod
        [Documentation]    Create server profile with single jbod \n
        [Tags]             F177  Smoke  
        [setup]                       Run Keywords
       ${serverHardwareUriPowerOffList}=  Get the Server Hardware and power off	 
       :FOR   ${x}  IN RANGE  0  ${numofServerProfiles}
       \    ${SPpayload}=  Build ServerProfile Payload   RG_SP${x}     ${serverHardwareUriPowerOffList[${x}]}
       \    Logger   Creating RG_SP${x} Server Profile on serverHarwareUri ${serverHardwareUriPowerOffList[${x}]}
       \    Logger   ****${SPpayload}	DEBUG
       \    ${SPCreateResp}=   Fusion Api Create Server Profile  ${SPpayload}
       \    Logger  SPCreateResp:${SPCreateResp}
       \    Validate resource attribute  status_code  ${serverHardwareUriPowerOffList[${x}]}   ${SPCreateResp}  200
       \    Wait Until Keyword Succeeds  4 min    10 sec  Validate computedPercentComplete   ${SPCreateResp}
       \    ${server_profile_create_status}=   Set Variable  Created server profile: RG_SP${x}.
       \    Validating task URI  ${SPCreateResp}  ${server_profile_create_status}
             
Create Unassigned ServerProfile
		[Documentation] 	Create unassigned server profile \n
		[Tags]				F177	Regression
		[setup]				Run Keywords
		   
		   ${enclosureGroup}=     Fusion Api Get Resource   uri=${enclosureGroupUri}
		   ${EGuri} = 	Get From dictionary 	${enclosureGroup['members'][0]}	uri
		   Logger		***${EGuri}		DEBUG
		   :FOR   ${x}  IN RANGE  0  ${numofServerProfiles}
		    \   ${SHtypeuri_resp}=	Get the Server Hardware Type
			#\   ${SHTuri}= 	Get from List 	${SHtypeuri_resp[${x}]}
			#\   Logger		***${SHTuri}	DEBUG 
			\	 ${SPpayload}=  Build Unassigned ServerProfile Payload   unassignedSP${x}	${SHtypeuri_resp[${x}]}		${EGuri}		
			\  Logger   ****${SPpayload}	DEBUG
			\	 ${SPCreateResp}=   Fusion Api Create Server Profile  ${SPpayload}
			\	 Logger  SPCreateResp:${SPCreateResp}
			\	 Wait Until Keyword Succeeds  4 min    10 sec  Validate computedPercentComplete   ${SPCreateResp}
			\  ${server_profile_create_status}=   Set Variable  Created server profile: unassignedSP${x}.
			\	 Validating task URI  ${SPCreateResp}  ${server_profile_create_status}
   
       	
Create ServerProfile with multiple jbod
		[Documentation] 	Create Server profile with multiple ljbod \n
		[Tags]				F177	Regression		
		[setup]				Run Keywords
       # Get the Server Hardware Type
        ${serverHardwareUriPowerOffList} =	Get the Server Hardware and power off
       :FOR   ${x}  IN RANGE  0  ${numofServerProfiles}
       #\    ${serverHardwareUriPowerOffList[3]}= 	Get from List 	${serverHardwareUriPowerOffList}
       \    ${SPpayload}=  Build Multiple Jbod ServerProfile Payload   RG_MultiSP${x}     ${serverHardwareUriPowerOffList[3]}
       \    Logger   Creating RG_MultiSP${x} Server Profile on serverHarwareUri ${serverHardwareUriPowerOffList[3]}
       \    Logger   ****${SPpayload}	DEBUG
       \    ${SPCreateResp}=   Fusion Api Create Server Profile  ${SPpayload}
       \    Logger  SPCreateResp:${SPCreateResp}
       \    Validate resource attribute  status_code  ${serverHardwareUriPowerOffList[3]}   ${SPCreateResp}  200
       \    Wait Until Keyword Succeeds  4 min    10 sec  Validate computedPercentComplete   ${SPCreateResp}
       \    ${server_profile_create_status}=   Set Variable  Created server profile: RG_MultiSP${x}.
       \    Validating task URI  ${SPCreateResp}  ${server_profile_create_status}
 
 
Validating SAS Ljbod after Server Profile creation
		[Documentation] 	Validating Jbod after SP creation \n
		[Tags]				F177	Smoke			
		[setup]				Run Keywords
		${Ljbodresp} = 	Fusion Api Get Sas Logical Jbods 	
        Validate resource attribute  status_code  ${sasLogicalJbodUri}   ${Ljbodresp}  
        Verify SAS LJbod after creation of Server Profile		${Ljbodresp}
        

Delete Server Profile
	[Documentation]    Delete Server Profiles
    [Tags]             F177  Smoke	Deletion
	[setup]			   Run Keywords
	
	${SPResp}=  Fusion Api Get Resource   uri=${serverProfileUri}
	Logger 		\n Validating for ${serverProfileUri}
    Validate resource attribute  status_code  ${serverProfileUri}  ${SPResp}    200
    Validate resource attribute  uri  ${serverProfileUri}  ${SPResp}
	${length} =		Get Length			${SPResp['members']}
	Run keyword If 		'${length}' == '0'		Fail	msg=No server profile available for deletion
	:FOR  ${x}  IN RANGE  0  ${length}
	\	  ${SPUri}=   Set Variable  ${SPResp['members'][${x}]['uri']}
	\	  Logger   Deleting ${SPUri} Server Profile				
	\	  ${SPoutResp}=  Fusion Api delete Server Profile   uri=${SPUri}
	\	  Logger   ******${SPoutResp}		DEBUG
	\     Validate resource attribute  status_code  ${SPUri}  ${SPoutResp}    200
	\	  Wait Until Keyword Succeeds  4 min    15 sec  Validate computedPercentComplete   ${SPoutResp}   
	
	    
        
*** Keywords ***


Get the Server Hardware Type
			[Documentation] 	Get Server Hardware Type of the model SY 480 Gen9 \
			${enclosureGroup}=     Fusion Api Get Resource   uri=${enclosureGroupUri}
   			${EGuri} = 	Get From dictionary 	${enclosureGroup['members'][0]}	uri
   			${serverHardwareType}=	Fusion Api Get Resource  uri=${serverHardwareTypeUri}
   			${SHtypelength}=  Get Length   ${serverHardwareType['members']}
   			${SHtypeuri_resp}=   Create List
			:FOR  ${x}  IN RANGE  0  ${SHtypelength}
   			\  ${SHTuri} = 	Get From dictionary 	${serverHardwareType['members'][${x}]}	uri
   			\  Logger  ***uri ${SHTuri}	DEBUG
   			\  ${SHTmodel}=     Get From dictionary     ${serverHardwareType['members'][${x}]} 	model
   			\  Logger  **Adptr ${SHTmodel}	DEBUG
   			\  Run Keyword If  '${SHTmodel}' == 'Synergy 480 Gen9 Compute Module'  Append to List  ${SHtypeuri_resp}  	${SHTuri}
   			Logger  ** uri SHT ${SHtypeuri_resp}	DEBUG
   			#Logger   *** SHT1 ${SHtypeuri_resp[${0}]}
   			[return]  ${SHtypeuri_resp}
   			
   			
Get the Server Hardware and power off 
        [Documentation]		Get the Server Hardware of type SY 480 Gen9 and powering off all of them\
        ${SH_uri_resp}= 	Create List  
   		${serverHardware}=	Fusion Api Get Resource  uri=${serverHardwareUri}
   		${SHlength}=  Get Length   ${serverHardware['members']}
		:FOR  ${x}  IN RANGE  0  ${SHlength}
   		\  	${SH1uri} = 	Get From dictionary 	${serverHardware['members'][${x}]}	uri
   		\  	Logger  ***uri ${SH1uri}	DEBUG
   		\  	${SH1name}=  Get From dictionary     ${serverHardware['members'][${x}]} 	model
   		\  	Logger  **Model ${SH1name}	DEBUG	
   		\  	Run Keyword If  	'${SH1name}'=='HPE Synergy 480 Gen9 Compute Module'  	Append to list		${SH_uri_resp}		${SH1uri}
     	Logger  ** SHuri ${SH_uri_resp}
     	${SH_resp_length}=  Get Length   ${SH_uri_resp}
     	Logger  *** ${SH_resp_length}
        ${serverHardwareUriPowerOffList}=	Create List
       :FOR  ${x}  IN RANGE  0  ${SH_resp_length}
       \   ${ServerHarwareResp}=     Fusion Api Get Resource   uri=${SH_uri_resp[${x}]}
       \   Logger  **${ServerHarwareResp}	DEBUG
       \    ${serverHardwareMemberUri}=   Get from Dictionary   ${ServerHarwareResp}    uri
       \    Logger      Powering off ${serverHardwareMemberUri}
       \    Power off Server Hardware  ${serverHardwareMemberUri} 
       \	${ServerHarwareResp}=     Fusion Api Get Resource   uri=${serverHardwareMemberUri}
       \    ${PowerState}=    Get from Dictionary   ${ServerHarwareResp}    powerState
       \  Logger  Power state is ${PowerState} for uri ${serverHardwareMemberUri}
       \  ${serverHardwareUri}=   Get from Dictionary   ${ServerHarwareResp}    uri
       \  Run Keyword If  '${PowerState}' == 'Off'  Append to List  ${serverHardwareUriPowerOffList}  ${serverHardwareUri}
       \  ${AvailServerHarwareLen}=   Get Length  ${serverHardwareUriPowerOffList}
       \  Run Keyword If  "${AvailServerHarwareLen}" < '${numofServerProfiles}'  Fail  msg=Failed to create ${numofServerProfiles} server profiles as there are only ${AvailServerHarwareLen} Server Hardware Uris in powered off state
       [return]		${serverHardwareUriPowerOffList}



Power off Server Hardware
       [Documentation]      Querys the appliance for all Servers and then Powers them off
       [Arguments]  ${serverHardwareUri}
       ${body} =     Create Dictionary    powerState=Off
       ...                                                    powerControl=MomentaryPress
       ${resp} =     Fusion Api Edit Server Hardware Power State            body=${body}       uri=${serverHardwareUri}
       Wait Until Keyword Succeeds  4 min    10 sec  Validate computedPercentComplete   ${resp}
       ${ServerHarwareOffResp}=     Fusion Api Get Resource   uri=${serverHardwareUri}
       ${PowerState}=    Get from Dictionary   ${ServerHarwareOffResp}    powerState
       Logger  ******${PowerState}		DEBUG
       Run Keyword If  '${PowerState}' != 'Off'  Fail  Powering off server Hardware Uri:${serverHardwareUri} failed as the Power State is not Off
       

Verify SAS LJbod after creation of Server Profile
        [Documentation]    verify all the jbod after server profile creation
       	[Arguments]  		${Ljbodresp}
       
       	${ljbod_count}=   Get from Dictionary  ${Ljbodresp}  count 
       :FOR   ${x}  IN RANGE  0  ${ljbod_count}
       \ 	${DriveTechnology}= 	Get from Dictionary	${Ljbodresp['members'][${x}]}  driveTechnology
       \ 	${actual_LjbodState}= 	Get from Dictionary	${Ljbodresp['members'][${x}]}  state
       \ 	${actual_LjbodStatus}= 	Get from Dictionary	${Ljbodresp['members'][${x}]}  status
       \ 	${actual_LjbodName}= 	Get from Dictionary	${Ljbodresp['members'][${x}]}  name
       \ 	${actual_LjbodUri}= 	Get from Dictionary	${Ljbodresp['members'][${x}]}  uri
	   \    ${DInterface}=   Get from Dictionary   ${DriveTechnology}    deviceInterface
	   \    ${Dmedia}=		Get from Dictionary   ${DriveTechnology}    driveMedia
       \    ${ActualRes}= 	Create List 	${actual_LjbodName}		${actual_LjbodUri}		${actual_LjbodStatus}	${DriveTechnology}	${actual_LjbodState}
       #\   Validate the response	${Ljbodresp}
       \   Run Keyword If   "${actual_LjbodState}" not in ['Configured'] 	Fail	Failed for the uri: ${actual_LjbodUri} as the actual State is ${actual_LjbodState} and expected is Configured.
       \   Run Keyword If  "${actual_LjbodStatus}" not in ['OK']        Fail	Failed for the uri: ${actual_LjbodUri} as the actual Status is ${actual_LjbodStatus} and expected is OK.
	   \   Run Keyword If   "${DInterface}" not in ['SAS','SATA'] 	Fail	Failed for the uri: ${actual_LjbodUri} as the actual driveTechnology is ${DInterface} and not as expected 
       \   Run Keyword If   "${Dmedia}" not in ['HDD','SSD'] 	Fail	Failed for the uri: ${actual_LjbodUri} as the actual driveTechnology is ${Dmedia} and not as expected 
       \   Log to console  SUCCESS:The no. of Jbod is ${ljbod_count} and ${ActualRes} of the above uri is as expected
       \   Log to console  SUCCESS:The State and Status of the task uri ${actual_LjbodUri} is ${actual_LjbodState} and ${actual_LjbodStatus}


Build Unassigned ServerProfile Payload
    [Documentation]   Create Unassigned ServerProfile Payload
    [Arguments]    ${SP_Name}  	${serverHardwareTypeUri} 	${enclosureGroupUri} 
    ${controllers}=  Create List
    ${overriddenSettings}=  Create List
    ${connections}=  Create List
    #${Null}=  Set Variable  null
    ${sasLogicalJBODsDict}  Create Dictionary   id=${1}
    ...                     deviceSlot=Mezz 1
    ...                     name=SAS-ljbod
    ...                     numPhysicalDrives=${2}
    ...                     driveMinSizeGB=${10}
    ...                     driveMaxSizeGB=${600}
    ...                     driveTechnology=SasHdd
    ...                     sasLogicalJBODUri=${null}
    ${sasLogicalJBODs}=   Create List  ${sasLogicalJBODsDict}
    ${localStorage}  Create Dictionary   sasLogicalJBODs=${sasLogicalJBODs}
    ...                                  controllers=${controllers}
    ${bios}    Create Dictionary  manageBios=false
    ...				              overriddenSettings=${overriddenSettings}
    ${firmware}  Create Dictionary  manageFirmware=false
    ...                             firmwareBaselineUri=
    ...                             forceInstallFirmware=false
    ...                             firmwareInstallType=${null}
    ${bootMode}    Create Dictionary   manageMode=false
    ${SPpayload}   Create Dictionary           name=${SP_Name} 
    ...                                        type=${serverProfileType}
    ...                                        serverHardwareUri=${null}
    ...                                        serverHardwareTypeUri=${serverHardwareTypeUri}
    ...                                        enclosureGroupUri=${enclosureGroupUri}
    ...                                        serialNumberType=Virtual
    ...                                        iscsiInitiatorNameType=AutoGenerated
    ...                                        macType=Virtual
    ...                                        wwnType=Virtual
    ...                                        description=
    ...                                        affinity=Bay
    ...                                        connections=${connections}
    ...                                        boot=${null}
    ...                                        sanStorage=${null}
    ...                                        hideUnusedFlexNics=true
    ...                                        iscsiInitiatorName=
    ...                                        osDeploymentSettings=${null}
    ...                                        localStorage=${localStorage}
    ...                                        bios=${bios}             
    ...                                        bootMode=${bootMode}
    ...                                        firmware=${firmware}       
    ...                                                                           
    [Return]   ${SPpayload} 
    
    
Build Multiple Jbod ServerProfile Payload
    [Documentation]   Create ServerProfile Payload
    [Arguments]   	${SP_Name}    ${ServerHardwareUri} 
     ${controllers}=  Create List
    ${overriddenSettings}=  Create List
    ${connections}=  Create List
    ${sasLogicalJBODsDict1}  	Create Dictionary   id=${1}
    ...                     					deviceSlot=Mezz 1
    ...                     					name=SAS-ljbod-001
    ...                    						numPhysicalDrives=${2}
    ...                     					driveMinSizeGB=${10}
    ...                    					    driveMaxSizeGB=${600}
    ...                   	 					driveTechnology=SasHdd
    ...                     					sasLogicalJBODUri=null
    ...
    ${sasLogicalJBODsDict2}		Create Dictionary   id=${2}
    ...                     					      deviceSlot=Mezz 1
    ...                     						name=SAS-ljbod-002
    ...                     						numPhysicalDrives=${4}
    ...                     						driveMinSizeGB=${10}
    ...                     						driveMaxSizeGB=${600}
    ...                     						driveTechnology=SataHdd
    ...                     						sasLogicalJBODUri=null
    ...						
    ${sasLogicalJBODsDict3}		Create Dictionary   id=${3}
    ...                     						deviceSlot=Mezz 1
    ...                    							name=SAS-ljbod-003
    ...                     						numPhysicalDrives=${4}
    ...                     						driveMinSizeGB=${10}
    ...                    							driveMaxSizeGB=${600}
    ...                     					    driveTechnology=SasSsd
    ...                     						sasLogicalJBODUri=null
   	... 
    ${sasLogicalJBODsDict4}		Create Dictionary   id=${4}
    ...                     						deviceSlot=Mezz 1
    ...                     						name=SAS-ljbod-004
    ...                     						numPhysicalDrives=${4}
    ...                     						driveMinSizeGB=${10}
    ...                     						driveMaxSizeGB=${600}
    ...                     						driveTechnology=SataSsd
    ...                     						sasLogicalJBODUri=null
    ${sasLogicalJBODsDict}= 	Create List 	${sasLogicalJBODsDict1}  ${sasLogicalJBODsDict2}  ${sasLogicalJBODsDict3}  ${sasLogicalJBODsDict4}
    ${localStorage}  Create Dictionary   sasLogicalJBODs=${sasLogicalJBODsDict}
    ...                                  controllers=${controllers}
    ${bios}    Create Dictionary  manageBios=false
    ...				              overriddenSettings=${overriddenSettings}
    ${firmware}  Create Dictionary  manageFirmware=false
    ...                             firmwareBaselineUri=
    ...                             forceInstallFirmware=false
    ...                             firmwareInstallType=${null}
    ${bootMode}    Create Dictionary   manageMode=false
    ${SPpayload}   Create Dictionary           name=${SP_Name} 
    ...                                        type=${serverProfileType}
    ...                                        serverHardwareUri=${serverHardwareUri}
    ...                                        serverHardwareTypeUri=
    ...                                        enclosureGroupUri=
    ...                                        serialNumberType=Virtual
    ...                                        iscsiInitiatorNameType=AutoGenerated
    ...                                        macType=Virtual
    ...                                        wwnType=Virtual
    ...                                        description=
    ...                                        affinity=Bay
    ...                                        connections=${connections}
    ...                                        boot=${null}
    ...                                        sanStorage=${null}
    ...                                        hideUnusedFlexNics=true
    ...                                        iscsiInitiatorName=
    ...                                        osDeploymentSettings=${null}
    ...                                        localStorage=${localStorage}
    ...                                        bios=${bios}             
    ...                                        bootMode=${bootMode}
    ...                                        firmware=${firmware}       
    ...                                                                           
    [Return]   ${SPpayload} 
    
    
