##################################################
# VimService_services.py
# generated by ZSI.generate.wsdl2python
##################################################

from pysphere.resources.VimService_services_types import *
from pysphere.ZSI import client
import pysphere.ZSI
#alias
ZSI = pysphere.ZSI

# Locator
class VimServiceLocator:
    VimPortType_address = "https://localhost/sdk/vimService"
    def getVimPortTypeAddress(self):
        return VimServiceLocator.VimPortType_address
    def getVimPortType(self, url=None, **kw):
        return VimBindingSOAP(url or VimServiceLocator.VimPortType_address, **kw)

# Methods
class VimBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: DestroyPropertyFilter
    def DestroyPropertyFilter(self, request):
        if isinstance(request, DestroyPropertyFilterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyPropertyFilterResponseMsg.typecode)
        return response

    # op: CreateFilter
    def CreateFilter(self, request):
        if isinstance(request, CreateFilterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFilterResponseMsg.typecode)
        return response

    # op: RetrieveProperties
    def RetrieveProperties(self, request):
        if isinstance(request, RetrievePropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrievePropertiesResponseMsg.typecode)
        return response

    # op: CheckForUpdates
    def CheckForUpdates(self, request):
        if isinstance(request, CheckForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckForUpdatesResponseMsg.typecode)
        return response

    # op: WaitForUpdates
    def WaitForUpdates(self, request):
        if isinstance(request, WaitForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(WaitForUpdatesResponseMsg.typecode)
        return response

    # op: CancelWaitForUpdates
    def CancelWaitForUpdates(self, request):
        if isinstance(request, CancelWaitForUpdatesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelWaitForUpdatesResponseMsg.typecode)
        return response

    # op: WaitForUpdatesEx
    def WaitForUpdatesEx(self, request):
        if isinstance(request, WaitForUpdatesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(WaitForUpdatesExResponseMsg.typecode)
        return response

    # op: RetrievePropertiesEx
    def RetrievePropertiesEx(self, request):
        if isinstance(request, RetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrievePropertiesExResponseMsg.typecode)
        return response

    # op: ContinueRetrievePropertiesEx
    def ContinueRetrievePropertiesEx(self, request):
        if isinstance(request, ContinueRetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ContinueRetrievePropertiesExResponseMsg.typecode)
        return response

    # op: CancelRetrievePropertiesEx
    def CancelRetrievePropertiesEx(self, request):
        if isinstance(request, CancelRetrievePropertiesExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelRetrievePropertiesExResponseMsg.typecode)
        return response

    # op: CreatePropertyCollector
    def CreatePropertyCollector(self, request):
        if isinstance(request, CreatePropertyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreatePropertyCollectorResponseMsg.typecode)
        return response

    # op: DestroyPropertyCollector
    def DestroyPropertyCollector(self, request):
        if isinstance(request, DestroyPropertyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyPropertyCollectorResponseMsg.typecode)
        return response

    # op: AddAuthorizationRole
    def AddAuthorizationRole(self, request):
        if isinstance(request, AddAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddAuthorizationRoleResponseMsg.typecode)
        return response

    # op: RemoveAuthorizationRole
    def RemoveAuthorizationRole(self, request):
        if isinstance(request, RemoveAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAuthorizationRoleResponseMsg.typecode)
        return response

    # op: UpdateAuthorizationRole
    def UpdateAuthorizationRole(self, request):
        if isinstance(request, UpdateAuthorizationRoleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAuthorizationRoleResponseMsg.typecode)
        return response

    # op: MergePermissions
    def MergePermissions(self, request):
        if isinstance(request, MergePermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MergePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveRolePermissions
    def RetrieveRolePermissions(self, request):
        if isinstance(request, RetrieveRolePermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveRolePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveEntityPermissions
    def RetrieveEntityPermissions(self, request):
        if isinstance(request, RetrieveEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityPermissionsResponseMsg.typecode)
        return response

    # op: RetrieveAllPermissions
    def RetrieveAllPermissions(self, request):
        if isinstance(request, RetrieveAllPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAllPermissionsResponseMsg.typecode)
        return response

    # op: SetEntityPermissions
    def SetEntityPermissions(self, request):
        if isinstance(request, SetEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetEntityPermissionsResponseMsg.typecode)
        return response

    # op: ResetEntityPermissions
    def ResetEntityPermissions(self, request):
        if isinstance(request, ResetEntityPermissionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetEntityPermissionsResponseMsg.typecode)
        return response

    # op: RemoveEntityPermission
    def RemoveEntityPermission(self, request):
        if isinstance(request, RemoveEntityPermissionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveEntityPermissionResponseMsg.typecode)
        return response

    # op: HasPrivilegeOnEntity
    def HasPrivilegeOnEntity(self, request):
        if isinstance(request, HasPrivilegeOnEntityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HasPrivilegeOnEntityResponseMsg.typecode)
        return response

    # op: ReconfigureCluster_Task
    def ReconfigureCluster_Task(self, request):
        if isinstance(request, ReconfigureCluster_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureCluster_TaskResponseMsg.typecode)
        return response

    # op: ApplyRecommendation
    def ApplyRecommendation(self, request):
        if isinstance(request, ApplyRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyRecommendationResponseMsg.typecode)
        return response

    # op: CancelRecommendation
    def CancelRecommendation(self, request):
        if isinstance(request, CancelRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelRecommendationResponseMsg.typecode)
        return response

    # op: RecommendHostsForVm
    def RecommendHostsForVm(self, request):
        if isinstance(request, RecommendHostsForVmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RecommendHostsForVmResponseMsg.typecode)
        return response

    # op: AddHost_Task
    def AddHost_Task(self, request):
        if isinstance(request, AddHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddHost_TaskResponseMsg.typecode)
        return response

    # op: MoveInto_Task
    def MoveInto_Task(self, request):
        if isinstance(request, MoveInto_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveInto_TaskResponseMsg.typecode)
        return response

    # op: MoveHostInto_Task
    def MoveHostInto_Task(self, request):
        if isinstance(request, MoveHostInto_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveHostInto_TaskResponseMsg.typecode)
        return response

    # op: RefreshRecommendation
    def RefreshRecommendation(self, request):
        if isinstance(request, RefreshRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshRecommendationResponseMsg.typecode)
        return response

    # op: RetrieveDasAdvancedRuntimeInfo
    def RetrieveDasAdvancedRuntimeInfo(self, request):
        if isinstance(request, RetrieveDasAdvancedRuntimeInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDasAdvancedRuntimeInfoResponseMsg.typecode)
        return response

    # op: ClusterEnterMaintenanceMode
    def ClusterEnterMaintenanceMode(self, request):
        if isinstance(request, ClusterEnterMaintenanceModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ClusterEnterMaintenanceModeResponseMsg.typecode)
        return response

    # op: ReconfigureComputeResource_Task
    def ReconfigureComputeResource_Task(self, request):
        if isinstance(request, ReconfigureComputeResource_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureComputeResource_TaskResponseMsg.typecode)
        return response

    # op: AddCustomFieldDef
    def AddCustomFieldDef(self, request):
        if isinstance(request, AddCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddCustomFieldDefResponseMsg.typecode)
        return response

    # op: RemoveCustomFieldDef
    def RemoveCustomFieldDef(self, request):
        if isinstance(request, RemoveCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveCustomFieldDefResponseMsg.typecode)
        return response

    # op: RenameCustomFieldDef
    def RenameCustomFieldDef(self, request):
        if isinstance(request, RenameCustomFieldDefRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomFieldDefResponseMsg.typecode)
        return response

    # op: SetField
    def SetField(self, request):
        if isinstance(request, SetFieldRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetFieldResponseMsg.typecode)
        return response

    # op: DoesCustomizationSpecExist
    def DoesCustomizationSpecExist(self, request):
        if isinstance(request, DoesCustomizationSpecExistRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DoesCustomizationSpecExistResponseMsg.typecode)
        return response

    # op: GetCustomizationSpec
    def GetCustomizationSpec(self, request):
        if isinstance(request, GetCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GetCustomizationSpecResponseMsg.typecode)
        return response

    # op: CreateCustomizationSpec
    def CreateCustomizationSpec(self, request):
        if isinstance(request, CreateCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCustomizationSpecResponseMsg.typecode)
        return response

    # op: OverwriteCustomizationSpec
    def OverwriteCustomizationSpec(self, request):
        if isinstance(request, OverwriteCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(OverwriteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DeleteCustomizationSpec
    def DeleteCustomizationSpec(self, request):
        if isinstance(request, DeleteCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DuplicateCustomizationSpec
    def DuplicateCustomizationSpec(self, request):
        if isinstance(request, DuplicateCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DuplicateCustomizationSpecResponseMsg.typecode)
        return response

    # op: RenameCustomizationSpec
    def RenameCustomizationSpec(self, request):
        if isinstance(request, RenameCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomizationSpecResponseMsg.typecode)
        return response

    # op: CustomizationSpecItemToXml
    def CustomizationSpecItemToXml(self, request):
        if isinstance(request, CustomizationSpecItemToXmlRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizationSpecItemToXmlResponseMsg.typecode)
        return response

    # op: XmlToCustomizationSpecItem
    def XmlToCustomizationSpecItem(self, request):
        if isinstance(request, XmlToCustomizationSpecItemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(XmlToCustomizationSpecItemResponseMsg.typecode)
        return response

    # op: CheckCustomizationResources
    def CheckCustomizationResources(self, request):
        if isinstance(request, CheckCustomizationResourcesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationResourcesResponseMsg.typecode)
        return response

    # op: QueryConnectionInfo
    def QueryConnectionInfo(self, request):
        if isinstance(request, QueryConnectionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConnectionInfoResponseMsg.typecode)
        return response

    # op: PowerOnMultiVM_Task
    def PowerOnMultiVM_Task(self, request):
        if isinstance(request, PowerOnMultiVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnMultiVM_TaskResponseMsg.typecode)
        return response

    # op: RefreshDatastore
    def RefreshDatastore(self, request):
        if isinstance(request, RefreshDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDatastoreResponseMsg.typecode)
        return response

    # op: RefreshDatastoreStorageInfo
    def RefreshDatastoreStorageInfo(self, request):
        if isinstance(request, RefreshDatastoreStorageInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDatastoreStorageInfoResponseMsg.typecode)
        return response

    # op: UpdateVirtualMachineFiles_Task
    def UpdateVirtualMachineFiles_Task(self, request):
        if isinstance(request, UpdateVirtualMachineFiles_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualMachineFiles_TaskResponseMsg.typecode)
        return response

    # op: RenameDatastore
    def RenameDatastore(self, request):
        if isinstance(request, RenameDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameDatastoreResponseMsg.typecode)
        return response

    # op: DestroyDatastore
    def DestroyDatastore(self, request):
        if isinstance(request, DestroyDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyDatastoreResponseMsg.typecode)
        return response

    # op: DatastoreEnterMaintenanceMode
    def DatastoreEnterMaintenanceMode(self, request):
        if isinstance(request, DatastoreEnterMaintenanceModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DatastoreEnterMaintenanceModeResponseMsg.typecode)
        return response

    # op: DatastoreExitMaintenanceMode_Task
    def DatastoreExitMaintenanceMode_Task(self, request):
        if isinstance(request, DatastoreExitMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DatastoreExitMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: QueryDescriptions
    def QueryDescriptions(self, request):
        if isinstance(request, QueryDescriptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDescriptionsResponseMsg.typecode)
        return response

    # op: BrowseDiagnosticLog
    def BrowseDiagnosticLog(self, request):
        if isinstance(request, BrowseDiagnosticLogRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(BrowseDiagnosticLogResponseMsg.typecode)
        return response

    # op: GenerateLogBundles_Task
    def GenerateLogBundles_Task(self, request):
        if isinstance(request, GenerateLogBundles_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateLogBundles_TaskResponseMsg.typecode)
        return response

    # op: FetchDVPortKeys
    def FetchDVPortKeys(self, request):
        if isinstance(request, FetchDVPortKeysRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FetchDVPortKeysResponseMsg.typecode)
        return response

    # op: FetchDVPorts
    def FetchDVPorts(self, request):
        if isinstance(request, FetchDVPortsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FetchDVPortsResponseMsg.typecode)
        return response

    # op: QueryUsedVlanIdInDvs
    def QueryUsedVlanIdInDvs(self, request):
        if isinstance(request, QueryUsedVlanIdInDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUsedVlanIdInDvsResponseMsg.typecode)
        return response

    # op: ReconfigureDvs_Task
    def ReconfigureDvs_Task(self, request):
        if isinstance(request, ReconfigureDvs_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDvs_TaskResponseMsg.typecode)
        return response

    # op: PerformDvsProductSpecOperation_Task
    def PerformDvsProductSpecOperation_Task(self, request):
        if isinstance(request, PerformDvsProductSpecOperation_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PerformDvsProductSpecOperation_TaskResponseMsg.typecode)
        return response

    # op: MergeDvs_Task
    def MergeDvs_Task(self, request):
        if isinstance(request, MergeDvs_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MergeDvs_TaskResponseMsg.typecode)
        return response

    # op: AddDVPortgroup_Task
    def AddDVPortgroup_Task(self, request):
        if isinstance(request, AddDVPortgroup_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddDVPortgroup_TaskResponseMsg.typecode)
        return response

    # op: MoveDVPort_Task
    def MoveDVPort_Task(self, request):
        if isinstance(request, MoveDVPort_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDVPort_TaskResponseMsg.typecode)
        return response

    # op: UpdateDvsCapability
    def UpdateDvsCapability(self, request):
        if isinstance(request, UpdateDvsCapabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDvsCapabilityResponseMsg.typecode)
        return response

    # op: ReconfigureDVPort_Task
    def ReconfigureDVPort_Task(self, request):
        if isinstance(request, ReconfigureDVPort_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDVPort_TaskResponseMsg.typecode)
        return response

    # op: RefreshDVPortState
    def RefreshDVPortState(self, request):
        if isinstance(request, RefreshDVPortStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDVPortStateResponseMsg.typecode)
        return response

    # op: RectifyDvsHost_Task
    def RectifyDvsHost_Task(self, request):
        if isinstance(request, RectifyDvsHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RectifyDvsHost_TaskResponseMsg.typecode)
        return response

    # op: UpdateNetworkResourcePool
    def UpdateNetworkResourcePool(self, request):
        if isinstance(request, UpdateNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: AddNetworkResourcePool
    def AddNetworkResourcePool(self, request):
        if isinstance(request, AddNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: RemoveNetworkResourcePool
    def RemoveNetworkResourcePool(self, request):
        if isinstance(request, RemoveNetworkResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveNetworkResourcePoolResponseMsg.typecode)
        return response

    # op: EnableNetworkResourceManagement
    def EnableNetworkResourceManagement(self, request):
        if isinstance(request, EnableNetworkResourceManagementRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableNetworkResourceManagementResponseMsg.typecode)
        return response

    # op: QueryConfigOptionDescriptor
    def QueryConfigOptionDescriptor(self, request):
        if isinstance(request, QueryConfigOptionDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionDescriptorResponseMsg.typecode)
        return response

    # op: QueryConfigOption
    def QueryConfigOption(self, request):
        if isinstance(request, QueryConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionResponseMsg.typecode)
        return response

    # op: QueryConfigTarget
    def QueryConfigTarget(self, request):
        if isinstance(request, QueryConfigTargetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigTargetResponseMsg.typecode)
        return response

    # op: QueryTargetCapabilities
    def QueryTargetCapabilities(self, request):
        if isinstance(request, QueryTargetCapabilitiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryTargetCapabilitiesResponseMsg.typecode)
        return response

    # op: setCustomValue
    def setCustomValue(self, request):
        if isinstance(request, setCustomValueRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(setCustomValueResponseMsg.typecode)
        return response

    # op: UnregisterExtension
    def UnregisterExtension(self, request):
        if isinstance(request, UnregisterExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterExtensionResponseMsg.typecode)
        return response

    # op: FindExtension
    def FindExtension(self, request):
        if isinstance(request, FindExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindExtensionResponseMsg.typecode)
        return response

    # op: RegisterExtension
    def RegisterExtension(self, request):
        if isinstance(request, RegisterExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterExtensionResponseMsg.typecode)
        return response

    # op: UpdateExtension
    def UpdateExtension(self, request):
        if isinstance(request, UpdateExtensionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateExtensionResponseMsg.typecode)
        return response

    # op: GetPublicKey
    def GetPublicKey(self, request):
        if isinstance(request, GetPublicKeyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GetPublicKeyResponseMsg.typecode)
        return response

    # op: SetPublicKey
    def SetPublicKey(self, request):
        if isinstance(request, SetPublicKeyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetPublicKeyResponseMsg.typecode)
        return response

    # op: SetExtensionCertificate
    def SetExtensionCertificate(self, request):
        if isinstance(request, SetExtensionCertificateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetExtensionCertificateResponseMsg.typecode)
        return response

    # op: QueryManagedBy
    def QueryManagedBy(self, request):
        if isinstance(request, QueryManagedByRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryManagedByResponseMsg.typecode)
        return response

    # op: MoveDatastoreFile_Task
    def MoveDatastoreFile_Task(self, request):
        if isinstance(request, MoveDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: CopyDatastoreFile_Task
    def CopyDatastoreFile_Task(self, request):
        if isinstance(request, CopyDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: DeleteDatastoreFile_Task
    def DeleteDatastoreFile_Task(self, request):
        if isinstance(request, DeleteDatastoreFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: MakeDirectory
    def MakeDirectory(self, request):
        if isinstance(request, MakeDirectoryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MakeDirectoryResponseMsg.typecode)
        return response

    # op: ChangeOwner
    def ChangeOwner(self, request):
        if isinstance(request, ChangeOwnerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ChangeOwnerResponseMsg.typecode)
        return response

    # op: CreateFolder
    def CreateFolder(self, request):
        if isinstance(request, CreateFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFolderResponseMsg.typecode)
        return response

    # op: MoveIntoFolder_Task
    def MoveIntoFolder_Task(self, request):
        if isinstance(request, MoveIntoFolder_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoFolder_TaskResponseMsg.typecode)
        return response

    # op: CreateVM_Task
    def CreateVM_Task(self, request):
        if isinstance(request, CreateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVM_TaskResponseMsg.typecode)
        return response

    # op: RegisterVM_Task
    def RegisterVM_Task(self, request):
        if isinstance(request, RegisterVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterVM_TaskResponseMsg.typecode)
        return response

    # op: CreateCluster
    def CreateCluster(self, request):
        if isinstance(request, CreateClusterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterResponseMsg.typecode)
        return response

    # op: CreateClusterEx
    def CreateClusterEx(self, request):
        if isinstance(request, CreateClusterExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterExResponseMsg.typecode)
        return response

    # op: AddStandaloneHost_Task
    def AddStandaloneHost_Task(self, request):
        if isinstance(request, AddStandaloneHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddStandaloneHost_TaskResponseMsg.typecode)
        return response

    # op: CreateDatacenter
    def CreateDatacenter(self, request):
        if isinstance(request, CreateDatacenterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDatacenterResponseMsg.typecode)
        return response

    # op: UnregisterAndDestroy_Task
    def UnregisterAndDestroy_Task(self, request):
        if isinstance(request, UnregisterAndDestroy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterAndDestroy_TaskResponseMsg.typecode)
        return response

    # op: CreateDVS_Task
    def CreateDVS_Task(self, request):
        if isinstance(request, CreateDVS_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDVS_TaskResponseMsg.typecode)
        return response

    # op: CreateStoragePod
    def CreateStoragePod(self, request):
        if isinstance(request, CreateStoragePodRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateStoragePodResponseMsg.typecode)
        return response

    # op: SetCollectorPageSize
    def SetCollectorPageSize(self, request):
        if isinstance(request, SetCollectorPageSizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetCollectorPageSizeResponseMsg.typecode)
        return response

    # op: RewindCollector
    def RewindCollector(self, request):
        if isinstance(request, RewindCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RewindCollectorResponseMsg.typecode)
        return response

    # op: ResetCollector
    def ResetCollector(self, request):
        if isinstance(request, ResetCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetCollectorResponseMsg.typecode)
        return response

    # op: DestroyCollector
    def DestroyCollector(self, request):
        if isinstance(request, DestroyCollectorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyCollectorResponseMsg.typecode)
        return response

    # op: QueryHostConnectionInfo
    def QueryHostConnectionInfo(self, request):
        if isinstance(request, QueryHostConnectionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostConnectionInfoResponseMsg.typecode)
        return response

    # op: UpdateSystemResources
    def UpdateSystemResources(self, request):
        if isinstance(request, UpdateSystemResourcesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSystemResourcesResponseMsg.typecode)
        return response

    # op: ReconnectHost_Task
    def ReconnectHost_Task(self, request):
        if isinstance(request, ReconnectHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconnectHost_TaskResponseMsg.typecode)
        return response

    # op: DisconnectHost_Task
    def DisconnectHost_Task(self, request):
        if isinstance(request, DisconnectHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisconnectHost_TaskResponseMsg.typecode)
        return response

    # op: EnterMaintenanceMode_Task
    def EnterMaintenanceMode_Task(self, request):
        if isinstance(request, EnterMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: ExitMaintenanceMode_Task
    def ExitMaintenanceMode_Task(self, request):
        if isinstance(request, ExitMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: RebootHost_Task
    def RebootHost_Task(self, request):
        if isinstance(request, RebootHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootHost_TaskResponseMsg.typecode)
        return response

    # op: ShutdownHost_Task
    def ShutdownHost_Task(self, request):
        if isinstance(request, ShutdownHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownHost_TaskResponseMsg.typecode)
        return response

    # op: PowerDownHostToStandBy_Task
    def PowerDownHostToStandBy_Task(self, request):
        if isinstance(request, PowerDownHostToStandBy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerDownHostToStandBy_TaskResponseMsg.typecode)
        return response

    # op: PowerUpHostFromStandBy_Task
    def PowerUpHostFromStandBy_Task(self, request):
        if isinstance(request, PowerUpHostFromStandBy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerUpHostFromStandBy_TaskResponseMsg.typecode)
        return response

    # op: QueryMemoryOverhead
    def QueryMemoryOverhead(self, request):
        if isinstance(request, QueryMemoryOverheadRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadResponseMsg.typecode)
        return response

    # op: QueryMemoryOverheadEx
    def QueryMemoryOverheadEx(self, request):
        if isinstance(request, QueryMemoryOverheadExRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadExResponseMsg.typecode)
        return response

    # op: ReconfigureHostForDAS_Task
    def ReconfigureHostForDAS_Task(self, request):
        if isinstance(request, ReconfigureHostForDAS_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureHostForDAS_TaskResponseMsg.typecode)
        return response

    # op: UpdateFlags
    def UpdateFlags(self, request):
        if isinstance(request, UpdateFlagsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateFlagsResponseMsg.typecode)
        return response

    # op: EnterLockdownMode
    def EnterLockdownMode(self, request):
        if isinstance(request, EnterLockdownModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterLockdownModeResponseMsg.typecode)
        return response

    # op: ExitLockdownMode
    def ExitLockdownMode(self, request):
        if isinstance(request, ExitLockdownModeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitLockdownModeResponseMsg.typecode)
        return response

    # op: AcquireCimServicesTicket
    def AcquireCimServicesTicket(self, request):
        if isinstance(request, AcquireCimServicesTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCimServicesTicketResponseMsg.typecode)
        return response

    # op: UpdateIpmi
    def UpdateIpmi(self, request):
        if isinstance(request, UpdateIpmiRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpmiResponseMsg.typecode)
        return response

    # op: RetrieveHardwareUptime
    def RetrieveHardwareUptime(self, request):
        if isinstance(request, RetrieveHardwareUptimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveHardwareUptimeResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseGetManifest
    def HttpNfcLeaseGetManifest(self, request):
        if isinstance(request, HttpNfcLeaseGetManifestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseGetManifestResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseComplete
    def HttpNfcLeaseComplete(self, request):
        if isinstance(request, HttpNfcLeaseCompleteRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseCompleteResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseAbort
    def HttpNfcLeaseAbort(self, request):
        if isinstance(request, HttpNfcLeaseAbortRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseAbortResponseMsg.typecode)
        return response

    # op: HttpNfcLeaseProgress
    def HttpNfcLeaseProgress(self, request):
        if isinstance(request, HttpNfcLeaseProgressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HttpNfcLeaseProgressResponseMsg.typecode)
        return response

    # op: QueryIpPools
    def QueryIpPools(self, request):
        if isinstance(request, QueryIpPoolsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryIpPoolsResponseMsg.typecode)
        return response

    # op: CreateIpPool
    def CreateIpPool(self, request):
        if isinstance(request, CreateIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateIpPoolResponseMsg.typecode)
        return response

    # op: UpdateIpPool
    def UpdateIpPool(self, request):
        if isinstance(request, UpdateIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpPoolResponseMsg.typecode)
        return response

    # op: DestroyIpPool
    def DestroyIpPool(self, request):
        if isinstance(request, DestroyIpPoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyIpPoolResponseMsg.typecode)
        return response

    # op: UpdateAssignedLicense
    def UpdateAssignedLicense(self, request):
        if isinstance(request, UpdateAssignedLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAssignedLicenseResponseMsg.typecode)
        return response

    # op: RemoveAssignedLicense
    def RemoveAssignedLicense(self, request):
        if isinstance(request, RemoveAssignedLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAssignedLicenseResponseMsg.typecode)
        return response

    # op: QueryAssignedLicenses
    def QueryAssignedLicenses(self, request):
        if isinstance(request, QueryAssignedLicensesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAssignedLicensesResponseMsg.typecode)
        return response

    # op: QuerySupportedFeatures
    def QuerySupportedFeatures(self, request):
        if isinstance(request, QuerySupportedFeaturesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QuerySupportedFeaturesResponseMsg.typecode)
        return response

    # op: QueryLicenseSourceAvailability
    def QueryLicenseSourceAvailability(self, request):
        if isinstance(request, QueryLicenseSourceAvailabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseSourceAvailabilityResponseMsg.typecode)
        return response

    # op: QueryLicenseUsage
    def QueryLicenseUsage(self, request):
        if isinstance(request, QueryLicenseUsageRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseUsageResponseMsg.typecode)
        return response

    # op: SetLicenseEdition
    def SetLicenseEdition(self, request):
        if isinstance(request, SetLicenseEditionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLicenseEditionResponseMsg.typecode)
        return response

    # op: CheckLicenseFeature
    def CheckLicenseFeature(self, request):
        if isinstance(request, CheckLicenseFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckLicenseFeatureResponseMsg.typecode)
        return response

    # op: EnableFeature
    def EnableFeature(self, request):
        if isinstance(request, EnableFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableFeatureResponseMsg.typecode)
        return response

    # op: DisableFeature
    def DisableFeature(self, request):
        if isinstance(request, DisableFeatureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableFeatureResponseMsg.typecode)
        return response

    # op: ConfigureLicenseSource
    def ConfigureLicenseSource(self, request):
        if isinstance(request, ConfigureLicenseSourceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureLicenseSourceResponseMsg.typecode)
        return response

    # op: UpdateLicense
    def UpdateLicense(self, request):
        if isinstance(request, UpdateLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLicenseResponseMsg.typecode)
        return response

    # op: AddLicense
    def AddLicense(self, request):
        if isinstance(request, AddLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddLicenseResponseMsg.typecode)
        return response

    # op: RemoveLicense
    def RemoveLicense(self, request):
        if isinstance(request, RemoveLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveLicenseResponseMsg.typecode)
        return response

    # op: DecodeLicense
    def DecodeLicense(self, request):
        if isinstance(request, DecodeLicenseRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DecodeLicenseResponseMsg.typecode)
        return response

    # op: UpdateLicenseLabel
    def UpdateLicenseLabel(self, request):
        if isinstance(request, UpdateLicenseLabelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLicenseLabelResponseMsg.typecode)
        return response

    # op: RemoveLicenseLabel
    def RemoveLicenseLabel(self, request):
        if isinstance(request, RemoveLicenseLabelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveLicenseLabelResponseMsg.typecode)
        return response

    # op: Reload
    def Reload(self, request):
        if isinstance(request, ReloadRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReloadResponseMsg.typecode)
        return response

    # op: Rename_Task
    def Rename_Task(self, request):
        if isinstance(request, Rename_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(Rename_TaskResponseMsg.typecode)
        return response

    # op: Destroy_Task
    def Destroy_Task(self, request):
        if isinstance(request, Destroy_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(Destroy_TaskResponseMsg.typecode)
        return response

    # op: DestroyNetwork
    def DestroyNetwork(self, request):
        if isinstance(request, DestroyNetworkRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyNetworkResponseMsg.typecode)
        return response

    # op: ValidateHost
    def ValidateHost(self, request):
        if isinstance(request, ValidateHostRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateHostResponseMsg.typecode)
        return response

    # op: ParseDescriptor
    def ParseDescriptor(self, request):
        if isinstance(request, ParseDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ParseDescriptorResponseMsg.typecode)
        return response

    # op: CreateImportSpec
    def CreateImportSpec(self, request):
        if isinstance(request, CreateImportSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateImportSpecResponseMsg.typecode)
        return response

    # op: CreateDescriptor
    def CreateDescriptor(self, request):
        if isinstance(request, CreateDescriptorRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDescriptorResponseMsg.typecode)
        return response

    # op: QueryPerfProviderSummary
    def QueryPerfProviderSummary(self, request):
        if isinstance(request, QueryPerfProviderSummaryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfProviderSummaryResponseMsg.typecode)
        return response

    # op: QueryAvailablePerfMetric
    def QueryAvailablePerfMetric(self, request):
        if isinstance(request, QueryAvailablePerfMetricRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePerfMetricResponseMsg.typecode)
        return response

    # op: QueryPerfCounter
    def QueryPerfCounter(self, request):
        if isinstance(request, QueryPerfCounterRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterResponseMsg.typecode)
        return response

    # op: QueryPerfCounterByLevel
    def QueryPerfCounterByLevel(self, request):
        if isinstance(request, QueryPerfCounterByLevelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterByLevelResponseMsg.typecode)
        return response

    # op: QueryPerf
    def QueryPerf(self, request):
        if isinstance(request, QueryPerfRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfResponseMsg.typecode)
        return response

    # op: QueryPerfComposite
    def QueryPerfComposite(self, request):
        if isinstance(request, QueryPerfCompositeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCompositeResponseMsg.typecode)
        return response

    # op: CreatePerfInterval
    def CreatePerfInterval(self, request):
        if isinstance(request, CreatePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreatePerfIntervalResponseMsg.typecode)
        return response

    # op: RemovePerfInterval
    def RemovePerfInterval(self, request):
        if isinstance(request, RemovePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdatePerfInterval
    def UpdatePerfInterval(self, request):
        if isinstance(request, UpdatePerfIntervalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdateCounterLevelMapping
    def UpdateCounterLevelMapping(self, request):
        if isinstance(request, UpdateCounterLevelMappingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateCounterLevelMappingResponseMsg.typecode)
        return response

    # op: ResetCounterLevelMapping
    def ResetCounterLevelMapping(self, request):
        if isinstance(request, ResetCounterLevelMappingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetCounterLevelMappingResponseMsg.typecode)
        return response

    # op: EstimateDatabaseSize
    def EstimateDatabaseSize(self, request):
        if isinstance(request, EstimateDatabaseSizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EstimateDatabaseSizeResponseMsg.typecode)
        return response

    # op: UpdateConfig
    def UpdateConfig(self, request):
        if isinstance(request, UpdateConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConfigResponseMsg.typecode)
        return response

    # op: MoveIntoResourcePool
    def MoveIntoResourcePool(self, request):
        if isinstance(request, MoveIntoResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoResourcePoolResponseMsg.typecode)
        return response

    # op: UpdateChildResourceConfiguration
    def UpdateChildResourceConfiguration(self, request):
        if isinstance(request, UpdateChildResourceConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateChildResourceConfigurationResponseMsg.typecode)
        return response

    # op: CreateResourcePool
    def CreateResourcePool(self, request):
        if isinstance(request, CreateResourcePoolRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateResourcePoolResponseMsg.typecode)
        return response

    # op: DestroyChildren
    def DestroyChildren(self, request):
        if isinstance(request, DestroyChildrenRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyChildrenResponseMsg.typecode)
        return response

    # op: CreateVApp
    def CreateVApp(self, request):
        if isinstance(request, CreateVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVAppResponseMsg.typecode)
        return response

    # op: CreateChildVM_Task
    def CreateChildVM_Task(self, request):
        if isinstance(request, CreateChildVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateChildVM_TaskResponseMsg.typecode)
        return response

    # op: RegisterChildVM_Task
    def RegisterChildVM_Task(self, request):
        if isinstance(request, RegisterChildVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterChildVM_TaskResponseMsg.typecode)
        return response

    # op: ImportVApp
    def ImportVApp(self, request):
        if isinstance(request, ImportVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ImportVAppResponseMsg.typecode)
        return response

    # op: QueryResourceConfigOption
    def QueryResourceConfigOption(self, request):
        if isinstance(request, QueryResourceConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryResourceConfigOptionResponseMsg.typecode)
        return response

    # op: RefreshRuntime
    def RefreshRuntime(self, request):
        if isinstance(request, RefreshRuntimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshRuntimeResponseMsg.typecode)
        return response

    # op: FindByUuid
    def FindByUuid(self, request):
        if isinstance(request, FindByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByUuidResponseMsg.typecode)
        return response

    # op: FindByDatastorePath
    def FindByDatastorePath(self, request):
        if isinstance(request, FindByDatastorePathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDatastorePathResponseMsg.typecode)
        return response

    # op: FindByDnsName
    def FindByDnsName(self, request):
        if isinstance(request, FindByDnsNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDnsNameResponseMsg.typecode)
        return response

    # op: FindByIp
    def FindByIp(self, request):
        if isinstance(request, FindByIpRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByIpResponseMsg.typecode)
        return response

    # op: FindByInventoryPath
    def FindByInventoryPath(self, request):
        if isinstance(request, FindByInventoryPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByInventoryPathResponseMsg.typecode)
        return response

    # op: FindChild
    def FindChild(self, request):
        if isinstance(request, FindChildRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindChildResponseMsg.typecode)
        return response

    # op: FindAllByUuid
    def FindAllByUuid(self, request):
        if isinstance(request, FindAllByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByUuidResponseMsg.typecode)
        return response

    # op: FindAllByDnsName
    def FindAllByDnsName(self, request):
        if isinstance(request, FindAllByDnsNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByDnsNameResponseMsg.typecode)
        return response

    # op: FindAllByIp
    def FindAllByIp(self, request):
        if isinstance(request, FindAllByIpRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAllByIpResponseMsg.typecode)
        return response

    # op: CurrentTime
    def CurrentTime(self, request):
        if isinstance(request, CurrentTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CurrentTimeResponseMsg.typecode)
        return response

    # op: RetrieveServiceContent
    def RetrieveServiceContent(self, request):
        if isinstance(request, RetrieveServiceContentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveServiceContentResponseMsg.typecode)
        return response

    # op: ValidateMigration
    def ValidateMigration(self, request):
        if isinstance(request, ValidateMigrationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateMigrationResponseMsg.typecode)
        return response

    # op: QueryVMotionCompatibility
    def QueryVMotionCompatibility(self, request):
        if isinstance(request, QueryVMotionCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVMotionCompatibilityResponseMsg.typecode)
        return response

    # op: RetrieveProductComponents
    def RetrieveProductComponents(self, request):
        if isinstance(request, RetrieveProductComponentsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveProductComponentsResponseMsg.typecode)
        return response

    # op: UpdateServiceMessage
    def UpdateServiceMessage(self, request):
        if isinstance(request, UpdateServiceMessageRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceMessageResponseMsg.typecode)
        return response

    # op: Login
    def Login(self, request):
        if isinstance(request, LoginRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginResponseMsg.typecode)
        return response

    # op: LoginBySSPI
    def LoginBySSPI(self, request):
        if isinstance(request, LoginBySSPIRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginBySSPIResponseMsg.typecode)
        return response

    # op: Logout
    def Logout(self, request):
        if isinstance(request, LogoutRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LogoutResponseMsg.typecode)
        return response

    # op: AcquireLocalTicket
    def AcquireLocalTicket(self, request):
        if isinstance(request, AcquireLocalTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireLocalTicketResponseMsg.typecode)
        return response

    # op: AcquireGenericServiceTicket
    def AcquireGenericServiceTicket(self, request):
        if isinstance(request, AcquireGenericServiceTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireGenericServiceTicketResponseMsg.typecode)
        return response

    # op: TerminateSession
    def TerminateSession(self, request):
        if isinstance(request, TerminateSessionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateSessionResponseMsg.typecode)
        return response

    # op: SetLocale
    def SetLocale(self, request):
        if isinstance(request, SetLocaleRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLocaleResponseMsg.typecode)
        return response

    # op: LoginExtensionBySubjectName
    def LoginExtensionBySubjectName(self, request):
        if isinstance(request, LoginExtensionBySubjectNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginExtensionBySubjectNameResponseMsg.typecode)
        return response

    # op: LoginExtensionByCertificate
    def LoginExtensionByCertificate(self, request):
        if isinstance(request, LoginExtensionByCertificateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginExtensionByCertificateResponseMsg.typecode)
        return response

    # op: ImpersonateUser
    def ImpersonateUser(self, request):
        if isinstance(request, ImpersonateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ImpersonateUserResponseMsg.typecode)
        return response

    # op: SessionIsActive
    def SessionIsActive(self, request):
        if isinstance(request, SessionIsActiveRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SessionIsActiveResponseMsg.typecode)
        return response

    # op: AcquireCloneTicket
    def AcquireCloneTicket(self, request):
        if isinstance(request, AcquireCloneTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCloneTicketResponseMsg.typecode)
        return response

    # op: CloneSession
    def CloneSession(self, request):
        if isinstance(request, CloneSessionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneSessionResponseMsg.typecode)
        return response

    # op: ConfigureDatastoreIORM_Task
    def ConfigureDatastoreIORM_Task(self, request):
        if isinstance(request, ConfigureDatastoreIORM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureDatastoreIORM_TaskResponseMsg.typecode)
        return response

    # op: QueryIORMConfigOption
    def QueryIORMConfigOption(self, request):
        if isinstance(request, QueryIORMConfigOptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryIORMConfigOptionResponseMsg.typecode)
        return response

    # op: ApplyStorageDrsRecommendationToPod_Task
    def ApplyStorageDrsRecommendationToPod_Task(self, request):
        if isinstance(request, ApplyStorageDrsRecommendationToPod_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyStorageDrsRecommendationToPod_TaskResponseMsg.typecode)
        return response

    # op: ApplyStorageDrsRecommendation_Task
    def ApplyStorageDrsRecommendation_Task(self, request):
        if isinstance(request, ApplyStorageDrsRecommendation_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyStorageDrsRecommendation_TaskResponseMsg.typecode)
        return response

    # op: CancelStorageDrsRecommendation
    def CancelStorageDrsRecommendation(self, request):
        if isinstance(request, CancelStorageDrsRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelStorageDrsRecommendationResponseMsg.typecode)
        return response

    # op: RefreshStorageDrsRecommendation
    def RefreshStorageDrsRecommendation(self, request):
        if isinstance(request, RefreshStorageDrsRecommendationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageDrsRecommendationResponseMsg.typecode)
        return response

    # op: ConfigureStorageDrsForPod_Task
    def ConfigureStorageDrsForPod_Task(self, request):
        if isinstance(request, ConfigureStorageDrsForPod_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureStorageDrsForPod_TaskResponseMsg.typecode)
        return response

    # op: RecommendDatastores
    def RecommendDatastores(self, request):
        if isinstance(request, RecommendDatastoresRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RecommendDatastoresResponseMsg.typecode)
        return response

    # op: CancelTask
    def CancelTask(self, request):
        if isinstance(request, CancelTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelTaskResponseMsg.typecode)
        return response

    # op: UpdateProgress
    def UpdateProgress(self, request):
        if isinstance(request, UpdateProgressRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateProgressResponseMsg.typecode)
        return response

    # op: SetTaskState
    def SetTaskState(self, request):
        if isinstance(request, SetTaskStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetTaskStateResponseMsg.typecode)
        return response

    # op: SetTaskDescription
    def SetTaskDescription(self, request):
        if isinstance(request, SetTaskDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetTaskDescriptionResponseMsg.typecode)
        return response

    # op: ReadNextTasks
    def ReadNextTasks(self, request):
        if isinstance(request, ReadNextTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextTasksResponseMsg.typecode)
        return response

    # op: ReadPreviousTasks
    def ReadPreviousTasks(self, request):
        if isinstance(request, ReadPreviousTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousTasksResponseMsg.typecode)
        return response

    # op: CreateCollectorForTasks
    def CreateCollectorForTasks(self, request):
        if isinstance(request, CreateCollectorForTasksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForTasksResponseMsg.typecode)
        return response

    # op: CreateTask
    def CreateTask(self, request):
        if isinstance(request, CreateTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTaskResponseMsg.typecode)
        return response

    # op: RetrieveUserGroups
    def RetrieveUserGroups(self, request):
        if isinstance(request, RetrieveUserGroupsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveUserGroupsResponseMsg.typecode)
        return response

    # op: UpdateVAppConfig
    def UpdateVAppConfig(self, request):
        if isinstance(request, UpdateVAppConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVAppConfigResponseMsg.typecode)
        return response

    # op: UpdateLinkedChildren
    def UpdateLinkedChildren(self, request):
        if isinstance(request, UpdateLinkedChildrenRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLinkedChildrenResponseMsg.typecode)
        return response

    # op: CloneVApp_Task
    def CloneVApp_Task(self, request):
        if isinstance(request, CloneVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVApp_TaskResponseMsg.typecode)
        return response

    # op: ExportVApp
    def ExportVApp(self, request):
        if isinstance(request, ExportVAppRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportVAppResponseMsg.typecode)
        return response

    # op: PowerOnVApp_Task
    def PowerOnVApp_Task(self, request):
        if isinstance(request, PowerOnVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVApp_TaskResponseMsg.typecode)
        return response

    # op: PowerOffVApp_Task
    def PowerOffVApp_Task(self, request):
        if isinstance(request, PowerOffVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVApp_TaskResponseMsg.typecode)
        return response

    # op: SuspendVApp_Task
    def SuspendVApp_Task(self, request):
        if isinstance(request, SuspendVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVApp_TaskResponseMsg.typecode)
        return response

    # op: unregisterVApp_Task
    def unregisterVApp_Task(self, request):
        if isinstance(request, unregisterVApp_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(unregisterVApp_TaskResponseMsg.typecode)
        return response

    # op: CreateVirtualDisk_Task
    def CreateVirtualDisk_Task(self, request):
        if isinstance(request, CreateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: DeleteVirtualDisk_Task
    def DeleteVirtualDisk_Task(self, request):
        if isinstance(request, DeleteVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: MoveVirtualDisk_Task
    def MoveVirtualDisk_Task(self, request):
        if isinstance(request, MoveVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: CopyVirtualDisk_Task
    def CopyVirtualDisk_Task(self, request):
        if isinstance(request, CopyVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ExtendVirtualDisk_Task
    def ExtendVirtualDisk_Task(self, request):
        if isinstance(request, ExtendVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskFragmentation
    def QueryVirtualDiskFragmentation(self, request):
        if isinstance(request, QueryVirtualDiskFragmentationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskFragmentationResponseMsg.typecode)
        return response

    # op: DefragmentVirtualDisk_Task
    def DefragmentVirtualDisk_Task(self, request):
        if isinstance(request, DefragmentVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ShrinkVirtualDisk_Task
    def ShrinkVirtualDisk_Task(self, request):
        if isinstance(request, ShrinkVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ShrinkVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: InflateVirtualDisk_Task
    def InflateVirtualDisk_Task(self, request):
        if isinstance(request, InflateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(InflateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: EagerZeroVirtualDisk_Task
    def EagerZeroVirtualDisk_Task(self, request):
        if isinstance(request, EagerZeroVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EagerZeroVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ZeroFillVirtualDisk_Task
    def ZeroFillVirtualDisk_Task(self, request):
        if isinstance(request, ZeroFillVirtualDisk_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ZeroFillVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: SetVirtualDiskUuid
    def SetVirtualDiskUuid(self, request):
        if isinstance(request, SetVirtualDiskUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskUuid
    def QueryVirtualDiskUuid(self, request):
        if isinstance(request, QueryVirtualDiskUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskGeometry
    def QueryVirtualDiskGeometry(self, request):
        if isinstance(request, QueryVirtualDiskGeometryRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskGeometryResponseMsg.typecode)
        return response

    # op: RefreshStorageInfo
    def RefreshStorageInfo(self, request):
        if isinstance(request, RefreshStorageInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageInfoResponseMsg.typecode)
        return response

    # op: CreateSnapshot_Task
    def CreateSnapshot_Task(self, request):
        if isinstance(request, CreateSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RevertToCurrentSnapshot_Task
    def RevertToCurrentSnapshot_Task(self, request):
        if isinstance(request, RevertToCurrentSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToCurrentSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveAllSnapshots_Task
    def RemoveAllSnapshots_Task(self, request):
        if isinstance(request, RemoveAllSnapshots_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAllSnapshots_TaskResponseMsg.typecode)
        return response

    # op: ConsolidateVMDisks_Task
    def ConsolidateVMDisks_Task(self, request):
        if isinstance(request, ConsolidateVMDisks_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConsolidateVMDisks_TaskResponseMsg.typecode)
        return response

    # op: EstimateStorageForConsolidateSnapshots_Task
    def EstimateStorageForConsolidateSnapshots_Task(self, request):
        if isinstance(request, EstimateStorageForConsolidateSnapshots_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EstimateStorageForConsolidateSnapshots_TaskResponseMsg.typecode)
        return response

    # op: ReconfigVM_Task
    def ReconfigVM_Task(self, request):
        if isinstance(request, ReconfigVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigVM_TaskResponseMsg.typecode)
        return response

    # op: UpgradeVM_Task
    def UpgradeVM_Task(self, request):
        if isinstance(request, UpgradeVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVM_TaskResponseMsg.typecode)
        return response

    # op: ExtractOvfEnvironment
    def ExtractOvfEnvironment(self, request):
        if isinstance(request, ExtractOvfEnvironmentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtractOvfEnvironmentResponseMsg.typecode)
        return response

    # op: PowerOnVM_Task
    def PowerOnVM_Task(self, request):
        if isinstance(request, PowerOnVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVM_TaskResponseMsg.typecode)
        return response

    # op: PowerOffVM_Task
    def PowerOffVM_Task(self, request):
        if isinstance(request, PowerOffVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVM_TaskResponseMsg.typecode)
        return response

    # op: SuspendVM_Task
    def SuspendVM_Task(self, request):
        if isinstance(request, SuspendVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVM_TaskResponseMsg.typecode)
        return response

    # op: ResetVM_Task
    def ResetVM_Task(self, request):
        if isinstance(request, ResetVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetVM_TaskResponseMsg.typecode)
        return response

    # op: ShutdownGuest
    def ShutdownGuest(self, request):
        if isinstance(request, ShutdownGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownGuestResponseMsg.typecode)
        return response

    # op: RebootGuest
    def RebootGuest(self, request):
        if isinstance(request, RebootGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootGuestResponseMsg.typecode)
        return response

    # op: StandbyGuest
    def StandbyGuest(self, request):
        if isinstance(request, StandbyGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StandbyGuestResponseMsg.typecode)
        return response

    # op: AnswerVM
    def AnswerVM(self, request):
        if isinstance(request, AnswerVMRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AnswerVMResponseMsg.typecode)
        return response

    # op: CustomizeVM_Task
    def CustomizeVM_Task(self, request):
        if isinstance(request, CustomizeVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizeVM_TaskResponseMsg.typecode)
        return response

    # op: CheckCustomizationSpec
    def CheckCustomizationSpec(self, request):
        if isinstance(request, CheckCustomizationSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationSpecResponseMsg.typecode)
        return response

    # op: MigrateVM_Task
    def MigrateVM_Task(self, request):
        if isinstance(request, MigrateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MigrateVM_TaskResponseMsg.typecode)
        return response

    # op: RelocateVM_Task
    def RelocateVM_Task(self, request):
        if isinstance(request, RelocateVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RelocateVM_TaskResponseMsg.typecode)
        return response

    # op: CloneVM_Task
    def CloneVM_Task(self, request):
        if isinstance(request, CloneVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVM_TaskResponseMsg.typecode)
        return response

    # op: ExportVm
    def ExportVm(self, request):
        if isinstance(request, ExportVmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportVmResponseMsg.typecode)
        return response

    # op: MarkAsTemplate
    def MarkAsTemplate(self, request):
        if isinstance(request, MarkAsTemplateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsTemplateResponseMsg.typecode)
        return response

    # op: MarkAsVirtualMachine
    def MarkAsVirtualMachine(self, request):
        if isinstance(request, MarkAsVirtualMachineRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsVirtualMachineResponseMsg.typecode)
        return response

    # op: UnregisterVM
    def UnregisterVM(self, request):
        if isinstance(request, UnregisterVMRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterVMResponseMsg.typecode)
        return response

    # op: ResetGuestInformation
    def ResetGuestInformation(self, request):
        if isinstance(request, ResetGuestInformationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetGuestInformationResponseMsg.typecode)
        return response

    # op: MountToolsInstaller
    def MountToolsInstaller(self, request):
        if isinstance(request, MountToolsInstallerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MountToolsInstallerResponseMsg.typecode)
        return response

    # op: UnmountToolsInstaller
    def UnmountToolsInstaller(self, request):
        if isinstance(request, UnmountToolsInstallerRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountToolsInstallerResponseMsg.typecode)
        return response

    # op: UpgradeTools_Task
    def UpgradeTools_Task(self, request):
        if isinstance(request, UpgradeTools_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeTools_TaskResponseMsg.typecode)
        return response

    # op: AcquireMksTicket
    def AcquireMksTicket(self, request):
        if isinstance(request, AcquireMksTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireMksTicketResponseMsg.typecode)
        return response

    # op: AcquireTicket
    def AcquireTicket(self, request):
        if isinstance(request, AcquireTicketRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireTicketResponseMsg.typecode)
        return response

    # op: SetScreenResolution
    def SetScreenResolution(self, request):
        if isinstance(request, SetScreenResolutionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetScreenResolutionResponseMsg.typecode)
        return response

    # op: DefragmentAllDisks
    def DefragmentAllDisks(self, request):
        if isinstance(request, DefragmentAllDisksRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentAllDisksResponseMsg.typecode)
        return response

    # op: CreateSecondaryVM_Task
    def CreateSecondaryVM_Task(self, request):
        if isinstance(request, CreateSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: TurnOffFaultToleranceForVM_Task
    def TurnOffFaultToleranceForVM_Task(self, request):
        if isinstance(request, TurnOffFaultToleranceForVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(TurnOffFaultToleranceForVM_TaskResponseMsg.typecode)
        return response

    # op: MakePrimaryVM_Task
    def MakePrimaryVM_Task(self, request):
        if isinstance(request, MakePrimaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MakePrimaryVM_TaskResponseMsg.typecode)
        return response

    # op: TerminateFaultTolerantVM_Task
    def TerminateFaultTolerantVM_Task(self, request):
        if isinstance(request, TerminateFaultTolerantVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateFaultTolerantVM_TaskResponseMsg.typecode)
        return response

    # op: DisableSecondaryVM_Task
    def DisableSecondaryVM_Task(self, request):
        if isinstance(request, DisableSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: EnableSecondaryVM_Task
    def EnableSecondaryVM_Task(self, request):
        if isinstance(request, EnableSecondaryVM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableSecondaryVM_TaskResponseMsg.typecode)
        return response

    # op: SetDisplayTopology
    def SetDisplayTopology(self, request):
        if isinstance(request, SetDisplayTopologyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetDisplayTopologyResponseMsg.typecode)
        return response

    # op: StartRecording_Task
    def StartRecording_Task(self, request):
        if isinstance(request, StartRecording_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StartRecording_TaskResponseMsg.typecode)
        return response

    # op: StopRecording_Task
    def StopRecording_Task(self, request):
        if isinstance(request, StopRecording_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StopRecording_TaskResponseMsg.typecode)
        return response

    # op: StartReplaying_Task
    def StartReplaying_Task(self, request):
        if isinstance(request, StartReplaying_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StartReplaying_TaskResponseMsg.typecode)
        return response

    # op: StopReplaying_Task
    def StopReplaying_Task(self, request):
        if isinstance(request, StopReplaying_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StopReplaying_TaskResponseMsg.typecode)
        return response

    # op: PromoteDisks_Task
    def PromoteDisks_Task(self, request):
        if isinstance(request, PromoteDisks_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PromoteDisks_TaskResponseMsg.typecode)
        return response

    # op: CreateScreenshot_Task
    def CreateScreenshot_Task(self, request):
        if isinstance(request, CreateScreenshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateScreenshot_TaskResponseMsg.typecode)
        return response

    # op: QueryChangedDiskAreas
    def QueryChangedDiskAreas(self, request):
        if isinstance(request, QueryChangedDiskAreasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryChangedDiskAreasResponseMsg.typecode)
        return response

    # op: QueryUnownedFiles
    def QueryUnownedFiles(self, request):
        if isinstance(request, QueryUnownedFilesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnownedFilesResponseMsg.typecode)
        return response

    # op: reloadVirtualMachineFromPath_Task
    def reloadVirtualMachineFromPath_Task(self, request):
        if isinstance(request, reloadVirtualMachineFromPath_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(reloadVirtualMachineFromPath_TaskResponseMsg.typecode)
        return response

    # op: QueryFaultToleranceCompatibility
    def QueryFaultToleranceCompatibility(self, request):
        if isinstance(request, QueryFaultToleranceCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryFaultToleranceCompatibilityResponseMsg.typecode)
        return response

    # op: RemoveAlarm
    def RemoveAlarm(self, request):
        if isinstance(request, RemoveAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAlarmResponseMsg.typecode)
        return response

    # op: ReconfigureAlarm
    def ReconfigureAlarm(self, request):
        if isinstance(request, ReconfigureAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAlarmResponseMsg.typecode)
        return response

    # op: CreateAlarm
    def CreateAlarm(self, request):
        if isinstance(request, CreateAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateAlarmResponseMsg.typecode)
        return response

    # op: GetAlarm
    def GetAlarm(self, request):
        if isinstance(request, GetAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmResponseMsg.typecode)
        return response

    # op: AreAlarmActionsEnabled
    def AreAlarmActionsEnabled(self, request):
        if isinstance(request, AreAlarmActionsEnabledRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AreAlarmActionsEnabledResponseMsg.typecode)
        return response

    # op: EnableAlarmActions
    def EnableAlarmActions(self, request):
        if isinstance(request, EnableAlarmActionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableAlarmActionsResponseMsg.typecode)
        return response

    # op: GetAlarmState
    def GetAlarmState(self, request):
        if isinstance(request, GetAlarmStateRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmStateResponseMsg.typecode)
        return response

    # op: AcknowledgeAlarm
    def AcknowledgeAlarm(self, request):
        if isinstance(request, AcknowledgeAlarmRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcknowledgeAlarmResponseMsg.typecode)
        return response

    # op: ReconfigureDVPortgroup_Task
    def ReconfigureDVPortgroup_Task(self, request):
        if isinstance(request, ReconfigureDVPortgroup_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureDVPortgroup_TaskResponseMsg.typecode)
        return response

    # op: QueryAvailableDvsSpec
    def QueryAvailableDvsSpec(self, request):
        if isinstance(request, QueryAvailableDvsSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableDvsSpecResponseMsg.typecode)
        return response

    # op: QueryCompatibleHostForNewDvs
    def QueryCompatibleHostForNewDvs(self, request):
        if isinstance(request, QueryCompatibleHostForNewDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCompatibleHostForNewDvsResponseMsg.typecode)
        return response

    # op: QueryCompatibleHostForExistingDvs
    def QueryCompatibleHostForExistingDvs(self, request):
        if isinstance(request, QueryCompatibleHostForExistingDvsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCompatibleHostForExistingDvsResponseMsg.typecode)
        return response

    # op: QueryDvsCompatibleHostSpec
    def QueryDvsCompatibleHostSpec(self, request):
        if isinstance(request, QueryDvsCompatibleHostSpecRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsCompatibleHostSpecResponseMsg.typecode)
        return response

    # op: QueryDvsFeatureCapability
    def QueryDvsFeatureCapability(self, request):
        if isinstance(request, QueryDvsFeatureCapabilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsFeatureCapabilityResponseMsg.typecode)
        return response

    # op: QueryDvsByUuid
    def QueryDvsByUuid(self, request):
        if isinstance(request, QueryDvsByUuidRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsByUuidResponseMsg.typecode)
        return response

    # op: QueryDvsConfigTarget
    def QueryDvsConfigTarget(self, request):
        if isinstance(request, QueryDvsConfigTargetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsConfigTargetResponseMsg.typecode)
        return response

    # op: QueryDvsCheckCompatibility
    def QueryDvsCheckCompatibility(self, request):
        if isinstance(request, QueryDvsCheckCompatibilityRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDvsCheckCompatibilityResponseMsg.typecode)
        return response

    # op: RectifyDvsOnHost_Task
    def RectifyDvsOnHost_Task(self, request):
        if isinstance(request, RectifyDvsOnHost_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RectifyDvsOnHost_TaskResponseMsg.typecode)
        return response

    # op: ReadNextEvents
    def ReadNextEvents(self, request):
        if isinstance(request, ReadNextEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextEventsResponseMsg.typecode)
        return response

    # op: ReadPreviousEvents
    def ReadPreviousEvents(self, request):
        if isinstance(request, ReadPreviousEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousEventsResponseMsg.typecode)
        return response

    # op: RetrieveArgumentDescription
    def RetrieveArgumentDescription(self, request):
        if isinstance(request, RetrieveArgumentDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveArgumentDescriptionResponseMsg.typecode)
        return response

    # op: CreateCollectorForEvents
    def CreateCollectorForEvents(self, request):
        if isinstance(request, CreateCollectorForEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForEventsResponseMsg.typecode)
        return response

    # op: LogUserEvent
    def LogUserEvent(self, request):
        if isinstance(request, LogUserEventRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LogUserEventResponseMsg.typecode)
        return response

    # op: QueryEvents
    def QueryEvents(self, request):
        if isinstance(request, QueryEventsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryEventsResponseMsg.typecode)
        return response

    # op: PostEvent
    def PostEvent(self, request):
        if isinstance(request, PostEventRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(PostEventResponseMsg.typecode)
        return response

    # op: JoinDomain_Task
    def JoinDomain_Task(self, request):
        if isinstance(request, JoinDomain_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(JoinDomain_TaskResponseMsg.typecode)
        return response

    # op: JoinDomainWithCAM_Task
    def JoinDomainWithCAM_Task(self, request):
        if isinstance(request, JoinDomainWithCAM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(JoinDomainWithCAM_TaskResponseMsg.typecode)
        return response

    # op: ImportCertificateForCAM_Task
    def ImportCertificateForCAM_Task(self, request):
        if isinstance(request, ImportCertificateForCAM_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ImportCertificateForCAM_TaskResponseMsg.typecode)
        return response

    # op: LeaveCurrentDomain_Task
    def LeaveCurrentDomain_Task(self, request):
        if isinstance(request, LeaveCurrentDomain_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(LeaveCurrentDomain_TaskResponseMsg.typecode)
        return response

    # op: ReconfigureAutostart
    def ReconfigureAutostart(self, request):
        if isinstance(request, ReconfigureAutostartRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAutostartResponseMsg.typecode)
        return response

    # op: AutoStartPowerOn
    def AutoStartPowerOn(self, request):
        if isinstance(request, AutoStartPowerOnRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOnResponseMsg.typecode)
        return response

    # op: AutoStartPowerOff
    def AutoStartPowerOff(self, request):
        if isinstance(request, AutoStartPowerOffRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOffResponseMsg.typecode)
        return response

    # op: QueryBootDevices
    def QueryBootDevices(self, request):
        if isinstance(request, QueryBootDevicesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryBootDevicesResponseMsg.typecode)
        return response

    # op: UpdateBootDevice
    def UpdateBootDevice(self, request):
        if isinstance(request, UpdateBootDeviceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateBootDeviceResponseMsg.typecode)
        return response

    # op: ConfigureHostCache_Task
    def ConfigureHostCache_Task(self, request):
        if isinstance(request, ConfigureHostCache_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureHostCache_TaskResponseMsg.typecode)
        return response

    # op: EnableHyperThreading
    def EnableHyperThreading(self, request):
        if isinstance(request, EnableHyperThreadingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableHyperThreadingResponseMsg.typecode)
        return response

    # op: DisableHyperThreading
    def DisableHyperThreading(self, request):
        if isinstance(request, DisableHyperThreadingRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableHyperThreadingResponseMsg.typecode)
        return response

    # op: SearchDatastore_Task
    def SearchDatastore_Task(self, request):
        if isinstance(request, SearchDatastore_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastore_TaskResponseMsg.typecode)
        return response

    # op: SearchDatastoreSubFolders_Task
    def SearchDatastoreSubFolders_Task(self, request):
        if isinstance(request, SearchDatastoreSubFolders_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastoreSubFolders_TaskResponseMsg.typecode)
        return response

    # op: DeleteFile
    def DeleteFile(self, request):
        if isinstance(request, DeleteFileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteFileResponseMsg.typecode)
        return response

    # op: UpdateLocalSwapDatastore
    def UpdateLocalSwapDatastore(self, request):
        if isinstance(request, UpdateLocalSwapDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLocalSwapDatastoreResponseMsg.typecode)
        return response

    # op: QueryAvailableDisksForVmfs
    def QueryAvailableDisksForVmfs(self, request):
        if isinstance(request, QueryAvailableDisksForVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableDisksForVmfsResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreCreateOptions
    def QueryVmfsDatastoreCreateOptions(self, request):
        if isinstance(request, QueryVmfsDatastoreCreateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreCreateOptionsResponseMsg.typecode)
        return response

    # op: CreateVmfsDatastore
    def CreateVmfsDatastore(self, request):
        if isinstance(request, CreateVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVmfsDatastoreResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreExtendOptions
    def QueryVmfsDatastoreExtendOptions(self, request):
        if isinstance(request, QueryVmfsDatastoreExtendOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreExtendOptionsResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreExpandOptions
    def QueryVmfsDatastoreExpandOptions(self, request):
        if isinstance(request, QueryVmfsDatastoreExpandOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreExpandOptionsResponseMsg.typecode)
        return response

    # op: ExtendVmfsDatastore
    def ExtendVmfsDatastore(self, request):
        if isinstance(request, ExtendVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVmfsDatastoreResponseMsg.typecode)
        return response

    # op: ExpandVmfsDatastore
    def ExpandVmfsDatastore(self, request):
        if isinstance(request, ExpandVmfsDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExpandVmfsDatastoreResponseMsg.typecode)
        return response

    # op: CreateNasDatastore
    def CreateNasDatastore(self, request):
        if isinstance(request, CreateNasDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateNasDatastoreResponseMsg.typecode)
        return response

    # op: CreateLocalDatastore
    def CreateLocalDatastore(self, request):
        if isinstance(request, CreateLocalDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateLocalDatastoreResponseMsg.typecode)
        return response

    # op: RemoveDatastore
    def RemoveDatastore(self, request):
        if isinstance(request, RemoveDatastoreRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveDatastoreResponseMsg.typecode)
        return response

    # op: ConfigureDatastorePrincipal
    def ConfigureDatastorePrincipal(self, request):
        if isinstance(request, ConfigureDatastorePrincipalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureDatastorePrincipalResponseMsg.typecode)
        return response

    # op: QueryUnresolvedVmfsVolumes
    def QueryUnresolvedVmfsVolumes(self, request):
        if isinstance(request, QueryUnresolvedVmfsVolumesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnresolvedVmfsVolumesResponseMsg.typecode)
        return response

    # op: ResignatureUnresolvedVmfsVolume_Task
    def ResignatureUnresolvedVmfsVolume_Task(self, request):
        if isinstance(request, ResignatureUnresolvedVmfsVolume_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResignatureUnresolvedVmfsVolume_TaskResponseMsg.typecode)
        return response

    # op: UpdateDateTimeConfig
    def UpdateDateTimeConfig(self, request):
        if isinstance(request, UpdateDateTimeConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeConfigResponseMsg.typecode)
        return response

    # op: QueryAvailableTimeZones
    def QueryAvailableTimeZones(self, request):
        if isinstance(request, QueryAvailableTimeZonesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableTimeZonesResponseMsg.typecode)
        return response

    # op: QueryDateTime
    def QueryDateTime(self, request):
        if isinstance(request, QueryDateTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDateTimeResponseMsg.typecode)
        return response

    # op: UpdateDateTime
    def UpdateDateTime(self, request):
        if isinstance(request, UpdateDateTimeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeResponseMsg.typecode)
        return response

    # op: RefreshDateTimeSystem
    def RefreshDateTimeSystem(self, request):
        if isinstance(request, RefreshDateTimeSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDateTimeSystemResponseMsg.typecode)
        return response

    # op: QueryAvailablePartition
    def QueryAvailablePartition(self, request):
        if isinstance(request, QueryAvailablePartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePartitionResponseMsg.typecode)
        return response

    # op: SelectActivePartition
    def SelectActivePartition(self, request):
        if isinstance(request, SelectActivePartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectActivePartitionResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateOptions
    def QueryPartitionCreateOptions(self, request):
        if isinstance(request, QueryPartitionCreateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateOptionsResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateDesc
    def QueryPartitionCreateDesc(self, request):
        if isinstance(request, QueryPartitionCreateDescRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateDescResponseMsg.typecode)
        return response

    # op: CreateDiagnosticPartition
    def CreateDiagnosticPartition(self, request):
        if isinstance(request, CreateDiagnosticPartitionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDiagnosticPartitionResponseMsg.typecode)
        return response

    # op: EsxAgentHostManagerUpdateConfig
    def EsxAgentHostManagerUpdateConfig(self, request):
        if isinstance(request, EsxAgentHostManagerUpdateConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EsxAgentHostManagerUpdateConfigResponseMsg.typecode)
        return response

    # op: UpdateDefaultPolicy
    def UpdateDefaultPolicy(self, request):
        if isinstance(request, UpdateDefaultPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDefaultPolicyResponseMsg.typecode)
        return response

    # op: EnableRuleset
    def EnableRuleset(self, request):
        if isinstance(request, EnableRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableRulesetResponseMsg.typecode)
        return response

    # op: DisableRuleset
    def DisableRuleset(self, request):
        if isinstance(request, DisableRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableRulesetResponseMsg.typecode)
        return response

    # op: UpdateRuleset
    def UpdateRuleset(self, request):
        if isinstance(request, UpdateRulesetRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateRulesetResponseMsg.typecode)
        return response

    # op: RefreshFirewall
    def RefreshFirewall(self, request):
        if isinstance(request, RefreshFirewallRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshFirewallResponseMsg.typecode)
        return response

    # op: ResetFirmwareToFactoryDefaults
    def ResetFirmwareToFactoryDefaults(self, request):
        if isinstance(request, ResetFirmwareToFactoryDefaultsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetFirmwareToFactoryDefaultsResponseMsg.typecode)
        return response

    # op: BackupFirmwareConfiguration
    def BackupFirmwareConfiguration(self, request):
        if isinstance(request, BackupFirmwareConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(BackupFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: QueryFirmwareConfigUploadURL
    def QueryFirmwareConfigUploadURL(self, request):
        if isinstance(request, QueryFirmwareConfigUploadURLRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryFirmwareConfigUploadURLResponseMsg.typecode)
        return response

    # op: RestoreFirmwareConfiguration
    def RestoreFirmwareConfiguration(self, request):
        if isinstance(request, RestoreFirmwareConfigurationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RestoreFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: RefreshHealthStatusSystem
    def RefreshHealthStatusSystem(self, request):
        if isinstance(request, RefreshHealthStatusSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshHealthStatusSystemResponseMsg.typecode)
        return response

    # op: ResetSystemHealthInfo
    def ResetSystemHealthInfo(self, request):
        if isinstance(request, ResetSystemHealthInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetSystemHealthInfoResponseMsg.typecode)
        return response

    # op: HostImageConfigGetAcceptance
    def HostImageConfigGetAcceptance(self, request):
        if isinstance(request, HostImageConfigGetAcceptanceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HostImageConfigGetAcceptanceResponseMsg.typecode)
        return response

    # op: HostImageConfigGetProfile
    def HostImageConfigGetProfile(self, request):
        if isinstance(request, HostImageConfigGetProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(HostImageConfigGetProfileResponseMsg.typecode)
        return response

    # op: UpdateHostImageAcceptanceLevel
    def UpdateHostImageAcceptanceLevel(self, request):
        if isinstance(request, UpdateHostImageAcceptanceLevelRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateHostImageAcceptanceLevelResponseMsg.typecode)
        return response

    # op: QueryVnicStatus
    def QueryVnicStatus(self, request):
        if isinstance(request, QueryVnicStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVnicStatusResponseMsg.typecode)
        return response

    # op: QueryPnicStatus
    def QueryPnicStatus(self, request):
        if isinstance(request, QueryPnicStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPnicStatusResponseMsg.typecode)
        return response

    # op: QueryBoundVnics
    def QueryBoundVnics(self, request):
        if isinstance(request, QueryBoundVnicsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryBoundVnicsResponseMsg.typecode)
        return response

    # op: QueryCandidateNics
    def QueryCandidateNics(self, request):
        if isinstance(request, QueryCandidateNicsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryCandidateNicsResponseMsg.typecode)
        return response

    # op: BindVnic
    def BindVnic(self, request):
        if isinstance(request, BindVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(BindVnicResponseMsg.typecode)
        return response

    # op: UnbindVnic
    def UnbindVnic(self, request):
        if isinstance(request, UnbindVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnbindVnicResponseMsg.typecode)
        return response

    # op: QueryMigrationDependencies
    def QueryMigrationDependencies(self, request):
        if isinstance(request, QueryMigrationDependenciesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMigrationDependenciesResponseMsg.typecode)
        return response

    # op: QueryModules
    def QueryModules(self, request):
        if isinstance(request, QueryModulesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryModulesResponseMsg.typecode)
        return response

    # op: UpdateModuleOptionString
    def UpdateModuleOptionString(self, request):
        if isinstance(request, UpdateModuleOptionStringRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateModuleOptionStringResponseMsg.typecode)
        return response

    # op: QueryConfiguredModuleOptionString
    def QueryConfiguredModuleOptionString(self, request):
        if isinstance(request, QueryConfiguredModuleOptionStringRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfiguredModuleOptionStringResponseMsg.typecode)
        return response

    # op: CreateUser
    def CreateUser(self, request):
        if isinstance(request, CreateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateUserResponseMsg.typecode)
        return response

    # op: UpdateUser
    def UpdateUser(self, request):
        if isinstance(request, UpdateUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateUserResponseMsg.typecode)
        return response

    # op: CreateGroup
    def CreateGroup(self, request):
        if isinstance(request, CreateGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateGroupResponseMsg.typecode)
        return response

    # op: RemoveUser
    def RemoveUser(self, request):
        if isinstance(request, RemoveUserRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveUserResponseMsg.typecode)
        return response

    # op: RemoveGroup
    def RemoveGroup(self, request):
        if isinstance(request, RemoveGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveGroupResponseMsg.typecode)
        return response

    # op: AssignUserToGroup
    def AssignUserToGroup(self, request):
        if isinstance(request, AssignUserToGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AssignUserToGroupResponseMsg.typecode)
        return response

    # op: UnassignUserFromGroup
    def UnassignUserFromGroup(self, request):
        if isinstance(request, UnassignUserFromGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnassignUserFromGroupResponseMsg.typecode)
        return response

    # op: ReconfigureServiceConsoleReservation
    def ReconfigureServiceConsoleReservation(self, request):
        if isinstance(request, ReconfigureServiceConsoleReservationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureServiceConsoleReservationResponseMsg.typecode)
        return response

    # op: ReconfigureVirtualMachineReservation
    def ReconfigureVirtualMachineReservation(self, request):
        if isinstance(request, ReconfigureVirtualMachineReservationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureVirtualMachineReservationResponseMsg.typecode)
        return response

    # op: UpdateNetworkConfig
    def UpdateNetworkConfig(self, request):
        if isinstance(request, UpdateNetworkConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateNetworkConfigResponseMsg.typecode)
        return response

    # op: UpdateDnsConfig
    def UpdateDnsConfig(self, request):
        if isinstance(request, UpdateDnsConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDnsConfigResponseMsg.typecode)
        return response

    # op: UpdateIpRouteConfig
    def UpdateIpRouteConfig(self, request):
        if isinstance(request, UpdateIpRouteConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpRouteConfigResponseMsg.typecode)
        return response

    # op: UpdateConsoleIpRouteConfig
    def UpdateConsoleIpRouteConfig(self, request):
        if isinstance(request, UpdateConsoleIpRouteConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConsoleIpRouteConfigResponseMsg.typecode)
        return response

    # op: UpdateIpRouteTableConfig
    def UpdateIpRouteTableConfig(self, request):
        if isinstance(request, UpdateIpRouteTableConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpRouteTableConfigResponseMsg.typecode)
        return response

    # op: AddVirtualSwitch
    def AddVirtualSwitch(self, request):
        if isinstance(request, AddVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualSwitchResponseMsg.typecode)
        return response

    # op: RemoveVirtualSwitch
    def RemoveVirtualSwitch(self, request):
        if isinstance(request, RemoveVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualSwitchResponseMsg.typecode)
        return response

    # op: UpdateVirtualSwitch
    def UpdateVirtualSwitch(self, request):
        if isinstance(request, UpdateVirtualSwitchRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualSwitchResponseMsg.typecode)
        return response

    # op: AddPortGroup
    def AddPortGroup(self, request):
        if isinstance(request, AddPortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddPortGroupResponseMsg.typecode)
        return response

    # op: RemovePortGroup
    def RemovePortGroup(self, request):
        if isinstance(request, RemovePortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePortGroup
    def UpdatePortGroup(self, request):
        if isinstance(request, UpdatePortGroupRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePhysicalNicLinkSpeed
    def UpdatePhysicalNicLinkSpeed(self, request):
        if isinstance(request, UpdatePhysicalNicLinkSpeedRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePhysicalNicLinkSpeedResponseMsg.typecode)
        return response

    # op: QueryNetworkHint
    def QueryNetworkHint(self, request):
        if isinstance(request, QueryNetworkHintRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryNetworkHintResponseMsg.typecode)
        return response

    # op: AddVirtualNic
    def AddVirtualNic(self, request):
        if isinstance(request, AddVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveVirtualNic
    def RemoveVirtualNic(self, request):
        if isinstance(request, RemoveVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateVirtualNic
    def UpdateVirtualNic(self, request):
        if isinstance(request, UpdateVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualNicResponseMsg.typecode)
        return response

    # op: AddServiceConsoleVirtualNic
    def AddServiceConsoleVirtualNic(self, request):
        if isinstance(request, AddServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveServiceConsoleVirtualNic
    def RemoveServiceConsoleVirtualNic(self, request):
        if isinstance(request, RemoveServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateServiceConsoleVirtualNic
    def UpdateServiceConsoleVirtualNic(self, request):
        if isinstance(request, UpdateServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RestartServiceConsoleVirtualNic
    def RestartServiceConsoleVirtualNic(self, request):
        if isinstance(request, RestartServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RefreshNetworkSystem
    def RefreshNetworkSystem(self, request):
        if isinstance(request, RefreshNetworkSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshNetworkSystemResponseMsg.typecode)
        return response

    # op: CheckHostPatch_Task
    def CheckHostPatch_Task(self, request):
        if isinstance(request, CheckHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckHostPatch_TaskResponseMsg.typecode)
        return response

    # op: ScanHostPatch_Task
    def ScanHostPatch_Task(self, request):
        if isinstance(request, ScanHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatch_TaskResponseMsg.typecode)
        return response

    # op: ScanHostPatchV2_Task
    def ScanHostPatchV2_Task(self, request):
        if isinstance(request, ScanHostPatchV2_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatchV2_TaskResponseMsg.typecode)
        return response

    # op: StageHostPatch_Task
    def StageHostPatch_Task(self, request):
        if isinstance(request, StageHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StageHostPatch_TaskResponseMsg.typecode)
        return response

    # op: InstallHostPatch_Task
    def InstallHostPatch_Task(self, request):
        if isinstance(request, InstallHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatch_TaskResponseMsg.typecode)
        return response

    # op: InstallHostPatchV2_Task
    def InstallHostPatchV2_Task(self, request):
        if isinstance(request, InstallHostPatchV2_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatchV2_TaskResponseMsg.typecode)
        return response

    # op: UninstallHostPatch_Task
    def UninstallHostPatch_Task(self, request):
        if isinstance(request, UninstallHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UninstallHostPatch_TaskResponseMsg.typecode)
        return response

    # op: QueryHostPatch_Task
    def QueryHostPatch_Task(self, request):
        if isinstance(request, QueryHostPatch_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostPatch_TaskResponseMsg.typecode)
        return response

    # op: Refresh
    def Refresh(self, request):
        if isinstance(request, RefreshRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshResponseMsg.typecode)
        return response

    # op: UpdatePassthruConfig
    def UpdatePassthruConfig(self, request):
        if isinstance(request, UpdatePassthruConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePassthruConfigResponseMsg.typecode)
        return response

    # op: ConfigurePowerPolicy
    def ConfigurePowerPolicy(self, request):
        if isinstance(request, ConfigurePowerPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigurePowerPolicyResponseMsg.typecode)
        return response

    # op: UpdateServicePolicy
    def UpdateServicePolicy(self, request):
        if isinstance(request, UpdateServicePolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServicePolicyResponseMsg.typecode)
        return response

    # op: StartService
    def StartService(self, request):
        if isinstance(request, StartServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StartServiceResponseMsg.typecode)
        return response

    # op: StopService
    def StopService(self, request):
        if isinstance(request, StopServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StopServiceResponseMsg.typecode)
        return response

    # op: RestartService
    def RestartService(self, request):
        if isinstance(request, RestartServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceResponseMsg.typecode)
        return response

    # op: UninstallService
    def UninstallService(self, request):
        if isinstance(request, UninstallServiceRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UninstallServiceResponseMsg.typecode)
        return response

    # op: RefreshServices
    def RefreshServices(self, request):
        if isinstance(request, RefreshServicesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshServicesResponseMsg.typecode)
        return response

    # op: ReconfigureSnmpAgent
    def ReconfigureSnmpAgent(self, request):
        if isinstance(request, ReconfigureSnmpAgentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureSnmpAgentResponseMsg.typecode)
        return response

    # op: SendTestNotification
    def SendTestNotification(self, request):
        if isinstance(request, SendTestNotificationRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SendTestNotificationResponseMsg.typecode)
        return response

    # op: RetrieveDiskPartitionInfo
    def RetrieveDiskPartitionInfo(self, request):
        if isinstance(request, RetrieveDiskPartitionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: ComputeDiskPartitionInfo
    def ComputeDiskPartitionInfo(self, request):
        if isinstance(request, ComputeDiskPartitionInfoRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ComputeDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: ComputeDiskPartitionInfoForResize
    def ComputeDiskPartitionInfoForResize(self, request):
        if isinstance(request, ComputeDiskPartitionInfoForResizeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ComputeDiskPartitionInfoForResizeResponseMsg.typecode)
        return response

    # op: UpdateDiskPartitions
    def UpdateDiskPartitions(self, request):
        if isinstance(request, UpdateDiskPartitionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDiskPartitionsResponseMsg.typecode)
        return response

    # op: FormatVmfs
    def FormatVmfs(self, request):
        if isinstance(request, FormatVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FormatVmfsResponseMsg.typecode)
        return response

    # op: MountVmfsVolume
    def MountVmfsVolume(self, request):
        if isinstance(request, MountVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MountVmfsVolumeResponseMsg.typecode)
        return response

    # op: UnmountVmfsVolume
    def UnmountVmfsVolume(self, request):
        if isinstance(request, UnmountVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountVmfsVolumeResponseMsg.typecode)
        return response

    # op: RescanVmfs
    def RescanVmfs(self, request):
        if isinstance(request, RescanVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanVmfsResponseMsg.typecode)
        return response

    # op: AttachVmfsExtent
    def AttachVmfsExtent(self, request):
        if isinstance(request, AttachVmfsExtentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AttachVmfsExtentResponseMsg.typecode)
        return response

    # op: ExpandVmfsExtent
    def ExpandVmfsExtent(self, request):
        if isinstance(request, ExpandVmfsExtentRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExpandVmfsExtentResponseMsg.typecode)
        return response

    # op: UpgradeVmfs
    def UpgradeVmfs(self, request):
        if isinstance(request, UpgradeVmfsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmfsResponseMsg.typecode)
        return response

    # op: UpgradeVmLayout
    def UpgradeVmLayout(self, request):
        if isinstance(request, UpgradeVmLayoutRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmLayoutResponseMsg.typecode)
        return response

    # op: QueryUnresolvedVmfsVolume
    def QueryUnresolvedVmfsVolume(self, request):
        if isinstance(request, QueryUnresolvedVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryUnresolvedVmfsVolumeResponseMsg.typecode)
        return response

    # op: ResolveMultipleUnresolvedVmfsVolumes
    def ResolveMultipleUnresolvedVmfsVolumes(self, request):
        if isinstance(request, ResolveMultipleUnresolvedVmfsVolumesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResolveMultipleUnresolvedVmfsVolumesResponseMsg.typecode)
        return response

    # op: UnmountForceMountedVmfsVolume
    def UnmountForceMountedVmfsVolume(self, request):
        if isinstance(request, UnmountForceMountedVmfsVolumeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountForceMountedVmfsVolumeResponseMsg.typecode)
        return response

    # op: RescanHba
    def RescanHba(self, request):
        if isinstance(request, RescanHbaRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanHbaResponseMsg.typecode)
        return response

    # op: RescanAllHba
    def RescanAllHba(self, request):
        if isinstance(request, RescanAllHbaRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanAllHbaResponseMsg.typecode)
        return response

    # op: UpdateSoftwareInternetScsiEnabled
    def UpdateSoftwareInternetScsiEnabled(self, request):
        if isinstance(request, UpdateSoftwareInternetScsiEnabledRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSoftwareInternetScsiEnabledResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiDiscoveryProperties
    def UpdateInternetScsiDiscoveryProperties(self, request):
        if isinstance(request, UpdateInternetScsiDiscoveryPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiDiscoveryPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAuthenticationProperties
    def UpdateInternetScsiAuthenticationProperties(self, request):
        if isinstance(request, UpdateInternetScsiAuthenticationPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAuthenticationPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiDigestProperties
    def UpdateInternetScsiDigestProperties(self, request):
        if isinstance(request, UpdateInternetScsiDigestPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiDigestPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAdvancedOptions
    def UpdateInternetScsiAdvancedOptions(self, request):
        if isinstance(request, UpdateInternetScsiAdvancedOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAdvancedOptionsResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiIPProperties
    def UpdateInternetScsiIPProperties(self, request):
        if isinstance(request, UpdateInternetScsiIPPropertiesRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiIPPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiName
    def UpdateInternetScsiName(self, request):
        if isinstance(request, UpdateInternetScsiNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiNameResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAlias
    def UpdateInternetScsiAlias(self, request):
        if isinstance(request, UpdateInternetScsiAliasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAliasResponseMsg.typecode)
        return response

    # op: AddInternetScsiSendTargets
    def AddInternetScsiSendTargets(self, request):
        if isinstance(request, AddInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiSendTargets
    def RemoveInternetScsiSendTargets(self, request):
        if isinstance(request, RemoveInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: AddInternetScsiStaticTargets
    def AddInternetScsiStaticTargets(self, request):
        if isinstance(request, AddInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiStaticTargets
    def RemoveInternetScsiStaticTargets(self, request):
        if isinstance(request, RemoveInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: EnableMultipathPath
    def EnableMultipathPath(self, request):
        if isinstance(request, EnableMultipathPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableMultipathPathResponseMsg.typecode)
        return response

    # op: DisableMultipathPath
    def DisableMultipathPath(self, request):
        if isinstance(request, DisableMultipathPathRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableMultipathPathResponseMsg.typecode)
        return response

    # op: SetMultipathLunPolicy
    def SetMultipathLunPolicy(self, request):
        if isinstance(request, SetMultipathLunPolicyRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SetMultipathLunPolicyResponseMsg.typecode)
        return response

    # op: QueryPathSelectionPolicyOptions
    def QueryPathSelectionPolicyOptions(self, request):
        if isinstance(request, QueryPathSelectionPolicyOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPathSelectionPolicyOptionsResponseMsg.typecode)
        return response

    # op: QueryStorageArrayTypePolicyOptions
    def QueryStorageArrayTypePolicyOptions(self, request):
        if isinstance(request, QueryStorageArrayTypePolicyOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryStorageArrayTypePolicyOptionsResponseMsg.typecode)
        return response

    # op: UpdateScsiLunDisplayName
    def UpdateScsiLunDisplayName(self, request):
        if isinstance(request, UpdateScsiLunDisplayNameRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateScsiLunDisplayNameResponseMsg.typecode)
        return response

    # op: DetachScsiLun
    def DetachScsiLun(self, request):
        if isinstance(request, DetachScsiLunRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DetachScsiLunResponseMsg.typecode)
        return response

    # op: AttachScsiLun
    def AttachScsiLun(self, request):
        if isinstance(request, AttachScsiLunRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AttachScsiLunResponseMsg.typecode)
        return response

    # op: RefreshStorageSystem
    def RefreshStorageSystem(self, request):
        if isinstance(request, RefreshStorageSystemRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageSystemResponseMsg.typecode)
        return response

    # op: DiscoverFcoeHbas
    def DiscoverFcoeHbas(self, request):
        if isinstance(request, DiscoverFcoeHbasRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DiscoverFcoeHbasResponseMsg.typecode)
        return response

    # op: MarkForRemoval
    def MarkForRemoval(self, request):
        if isinstance(request, MarkForRemovalRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkForRemovalResponseMsg.typecode)
        return response

    # op: UpdateIpConfig
    def UpdateIpConfig(self, request):
        if isinstance(request, UpdateIpConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpConfigResponseMsg.typecode)
        return response

    # op: SelectVnic
    def SelectVnic(self, request):
        if isinstance(request, SelectVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectVnicResponseMsg.typecode)
        return response

    # op: DeselectVnic
    def DeselectVnic(self, request):
        if isinstance(request, DeselectVnicRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeselectVnicResponseMsg.typecode)
        return response

    # op: QueryNetConfig
    def QueryNetConfig(self, request):
        if isinstance(request, QueryNetConfigRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryNetConfigResponseMsg.typecode)
        return response

    # op: SelectVnicForNicType
    def SelectVnicForNicType(self, request):
        if isinstance(request, SelectVnicForNicTypeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectVnicForNicTypeResponseMsg.typecode)
        return response

    # op: DeselectVnicForNicType
    def DeselectVnicForNicType(self, request):
        if isinstance(request, DeselectVnicForNicTypeRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeselectVnicForNicTypeResponseMsg.typecode)
        return response

    # op: QueryOptions
    def QueryOptions(self, request):
        if isinstance(request, QueryOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryOptionsResponseMsg.typecode)
        return response

    # op: UpdateOptions
    def UpdateOptions(self, request):
        if isinstance(request, UpdateOptionsRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateOptionsResponseMsg.typecode)
        return response

    # op: CheckCompliance_Task
    def CheckCompliance_Task(self, request):
        if isinstance(request, CheckCompliance_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCompliance_TaskResponseMsg.typecode)
        return response

    # op: QueryComplianceStatus
    def QueryComplianceStatus(self, request):
        if isinstance(request, QueryComplianceStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryComplianceStatusResponseMsg.typecode)
        return response

    # op: ClearComplianceStatus
    def ClearComplianceStatus(self, request):
        if isinstance(request, ClearComplianceStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ClearComplianceStatusResponseMsg.typecode)
        return response

    # op: QueryExpressionMetadata
    def QueryExpressionMetadata(self, request):
        if isinstance(request, QueryExpressionMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryExpressionMetadataResponseMsg.typecode)
        return response

    # op: RetrieveDescription
    def RetrieveDescription(self, request):
        if isinstance(request, RetrieveDescriptionRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDescriptionResponseMsg.typecode)
        return response

    # op: DestroyProfile
    def DestroyProfile(self, request):
        if isinstance(request, DestroyProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyProfileResponseMsg.typecode)
        return response

    # op: AssociateProfile
    def AssociateProfile(self, request):
        if isinstance(request, AssociateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AssociateProfileResponseMsg.typecode)
        return response

    # op: DissociateProfile
    def DissociateProfile(self, request):
        if isinstance(request, DissociateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DissociateProfileResponseMsg.typecode)
        return response

    # op: CheckProfileCompliance_Task
    def CheckProfileCompliance_Task(self, request):
        if isinstance(request, CheckProfileCompliance_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckProfileCompliance_TaskResponseMsg.typecode)
        return response

    # op: ExportProfile
    def ExportProfile(self, request):
        if isinstance(request, ExportProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportProfileResponseMsg.typecode)
        return response

    # op: CreateProfile
    def CreateProfile(self, request):
        if isinstance(request, CreateProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateProfileResponseMsg.typecode)
        return response

    # op: QueryPolicyMetadata
    def QueryPolicyMetadata(self, request):
        if isinstance(request, QueryPolicyMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPolicyMetadataResponseMsg.typecode)
        return response

    # op: FindAssociatedProfile
    def FindAssociatedProfile(self, request):
        if isinstance(request, FindAssociatedProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(FindAssociatedProfileResponseMsg.typecode)
        return response

    # op: UpdateClusterProfile
    def UpdateClusterProfile(self, request):
        if isinstance(request, UpdateClusterProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateClusterProfileResponseMsg.typecode)
        return response

    # op: UpdateReferenceHost
    def UpdateReferenceHost(self, request):
        if isinstance(request, UpdateReferenceHostRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateReferenceHostResponseMsg.typecode)
        return response

    # op: UpdateHostProfile
    def UpdateHostProfile(self, request):
        if isinstance(request, UpdateHostProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateHostProfileResponseMsg.typecode)
        return response

    # op: ExecuteHostProfile
    def ExecuteHostProfile(self, request):
        if isinstance(request, ExecuteHostProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExecuteHostProfileResponseMsg.typecode)
        return response

    # op: ApplyHostConfig_Task
    def ApplyHostConfig_Task(self, request):
        if isinstance(request, ApplyHostConfig_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyHostConfig_TaskResponseMsg.typecode)
        return response

    # op: GenerateConfigTaskList
    def GenerateConfigTaskList(self, request):
        if isinstance(request, GenerateConfigTaskListRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateConfigTaskListResponseMsg.typecode)
        return response

    # op: QueryHostProfileMetadata
    def QueryHostProfileMetadata(self, request):
        if isinstance(request, QueryHostProfileMetadataRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostProfileMetadataResponseMsg.typecode)
        return response

    # op: QueryProfileStructure
    def QueryProfileStructure(self, request):
        if isinstance(request, QueryProfileStructureRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryProfileStructureResponseMsg.typecode)
        return response

    # op: CreateDefaultProfile
    def CreateDefaultProfile(self, request):
        if isinstance(request, CreateDefaultProfileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDefaultProfileResponseMsg.typecode)
        return response

    # op: UpdateAnswerFile_Task
    def UpdateAnswerFile_Task(self, request):
        if isinstance(request, UpdateAnswerFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAnswerFile_TaskResponseMsg.typecode)
        return response

    # op: RetrieveAnswerFile
    def RetrieveAnswerFile(self, request):
        if isinstance(request, RetrieveAnswerFileRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAnswerFileResponseMsg.typecode)
        return response

    # op: ExportAnswerFile_Task
    def ExportAnswerFile_Task(self, request):
        if isinstance(request, ExportAnswerFile_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ExportAnswerFile_TaskResponseMsg.typecode)
        return response

    # op: CheckAnswerFileStatus_Task
    def CheckAnswerFileStatus_Task(self, request):
        if isinstance(request, CheckAnswerFileStatus_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckAnswerFileStatus_TaskResponseMsg.typecode)
        return response

    # op: QueryAnswerFileStatus
    def QueryAnswerFileStatus(self, request):
        if isinstance(request, QueryAnswerFileStatusRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAnswerFileStatusResponseMsg.typecode)
        return response

    # op: RemoveScheduledTask
    def RemoveScheduledTask(self, request):
        if isinstance(request, RemoveScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveScheduledTaskResponseMsg.typecode)
        return response

    # op: ReconfigureScheduledTask
    def ReconfigureScheduledTask(self, request):
        if isinstance(request, ReconfigureScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureScheduledTaskResponseMsg.typecode)
        return response

    # op: RunScheduledTask
    def RunScheduledTask(self, request):
        if isinstance(request, RunScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RunScheduledTaskResponseMsg.typecode)
        return response

    # op: CreateScheduledTask
    def CreateScheduledTask(self, request):
        if isinstance(request, CreateScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateScheduledTaskResponseMsg.typecode)
        return response

    # op: RetrieveEntityScheduledTask
    def RetrieveEntityScheduledTask(self, request):
        if isinstance(request, RetrieveEntityScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityScheduledTaskResponseMsg.typecode)
        return response

    # op: CreateObjectScheduledTask
    def CreateObjectScheduledTask(self, request):
        if isinstance(request, CreateObjectScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateObjectScheduledTaskResponseMsg.typecode)
        return response

    # op: RetrieveObjectScheduledTask
    def RetrieveObjectScheduledTask(self, request):
        if isinstance(request, RetrieveObjectScheduledTaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveObjectScheduledTaskResponseMsg.typecode)
        return response

    # op: OpenInventoryViewFolder
    def OpenInventoryViewFolder(self, request):
        if isinstance(request, OpenInventoryViewFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(OpenInventoryViewFolderResponseMsg.typecode)
        return response

    # op: CloseInventoryViewFolder
    def CloseInventoryViewFolder(self, request):
        if isinstance(request, CloseInventoryViewFolderRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CloseInventoryViewFolderResponseMsg.typecode)
        return response

    # op: ModifyListView
    def ModifyListView(self, request):
        if isinstance(request, ModifyListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ModifyListViewResponseMsg.typecode)
        return response

    # op: ResetListView
    def ResetListView(self, request):
        if isinstance(request, ResetListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewResponseMsg.typecode)
        return response

    # op: ResetListViewFromView
    def ResetListViewFromView(self, request):
        if isinstance(request, ResetListViewFromViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewFromViewResponseMsg.typecode)
        return response

    # op: DestroyView
    def DestroyView(self, request):
        if isinstance(request, DestroyViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyViewResponseMsg.typecode)
        return response

    # op: CreateInventoryView
    def CreateInventoryView(self, request):
        if isinstance(request, CreateInventoryViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateInventoryViewResponseMsg.typecode)
        return response

    # op: CreateContainerView
    def CreateContainerView(self, request):
        if isinstance(request, CreateContainerViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateContainerViewResponseMsg.typecode)
        return response

    # op: CreateListView
    def CreateListView(self, request):
        if isinstance(request, CreateListViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewResponseMsg.typecode)
        return response

    # op: CreateListViewFromView
    def CreateListViewFromView(self, request):
        if isinstance(request, CreateListViewFromViewRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewFromViewResponseMsg.typecode)
        return response

    # op: RevertToSnapshot_Task
    def RevertToSnapshot_Task(self, request):
        if isinstance(request, RevertToSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveSnapshot_Task
    def RemoveSnapshot_Task(self, request):
        if isinstance(request, RemoveSnapshot_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RenameSnapshot
    def RenameSnapshot(self, request):
        if isinstance(request, RenameSnapshotRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameSnapshotResponseMsg.typecode)
        return response

    # op: CheckCompatibility_Task
    def CheckCompatibility_Task(self, request):
        if isinstance(request, CheckCompatibility_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCompatibility_TaskResponseMsg.typecode)
        return response

    # op: QueryVMotionCompatibilityEx_Task
    def QueryVMotionCompatibilityEx_Task(self, request):
        if isinstance(request, QueryVMotionCompatibilityEx_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVMotionCompatibilityEx_TaskResponseMsg.typecode)
        return response

    # op: CheckMigrate_Task
    def CheckMigrate_Task(self, request):
        if isinstance(request, CheckMigrate_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckMigrate_TaskResponseMsg.typecode)
        return response

    # op: CheckRelocate_Task
    def CheckRelocate_Task(self, request):
        if isinstance(request, CheckRelocate_TaskRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckRelocate_TaskResponseMsg.typecode)
        return response

    # op: ValidateCredentialsInGuest
    def ValidateCredentialsInGuest(self, request):
        if isinstance(request, ValidateCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateCredentialsInGuestResponseMsg.typecode)
        return response

    # op: AcquireCredentialsInGuest
    def AcquireCredentialsInGuest(self, request):
        if isinstance(request, AcquireCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCredentialsInGuestResponseMsg.typecode)
        return response

    # op: ReleaseCredentialsInGuest
    def ReleaseCredentialsInGuest(self, request):
        if isinstance(request, ReleaseCredentialsInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReleaseCredentialsInGuestResponseMsg.typecode)
        return response

    # op: MakeDirectoryInGuest
    def MakeDirectoryInGuest(self, request):
        if isinstance(request, MakeDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MakeDirectoryInGuestResponseMsg.typecode)
        return response

    # op: DeleteFileInGuest
    def DeleteFileInGuest(self, request):
        if isinstance(request, DeleteFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteFileInGuestResponseMsg.typecode)
        return response

    # op: DeleteDirectoryInGuest
    def DeleteDirectoryInGuest(self, request):
        if isinstance(request, DeleteDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDirectoryInGuestResponseMsg.typecode)
        return response

    # op: MoveDirectoryInGuest
    def MoveDirectoryInGuest(self, request):
        if isinstance(request, MoveDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDirectoryInGuestResponseMsg.typecode)
        return response

    # op: MoveFileInGuest
    def MoveFileInGuest(self, request):
        if isinstance(request, MoveFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveFileInGuestResponseMsg.typecode)
        return response

    # op: CreateTemporaryFileInGuest
    def CreateTemporaryFileInGuest(self, request):
        if isinstance(request, CreateTemporaryFileInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTemporaryFileInGuestResponseMsg.typecode)
        return response

    # op: CreateTemporaryDirectoryInGuest
    def CreateTemporaryDirectoryInGuest(self, request):
        if isinstance(request, CreateTemporaryDirectoryInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTemporaryDirectoryInGuestResponseMsg.typecode)
        return response

    # op: ListFilesInGuest
    def ListFilesInGuest(self, request):
        if isinstance(request, ListFilesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ListFilesInGuestResponseMsg.typecode)
        return response

    # op: ChangeFileAttributesInGuest
    def ChangeFileAttributesInGuest(self, request):
        if isinstance(request, ChangeFileAttributesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ChangeFileAttributesInGuestResponseMsg.typecode)
        return response

    # op: InitiateFileTransferFromGuest
    def InitiateFileTransferFromGuest(self, request):
        if isinstance(request, InitiateFileTransferFromGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(InitiateFileTransferFromGuestResponseMsg.typecode)
        return response

    # op: InitiateFileTransferToGuest
    def InitiateFileTransferToGuest(self, request):
        if isinstance(request, InitiateFileTransferToGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(InitiateFileTransferToGuestResponseMsg.typecode)
        return response

    # op: StartProgramInGuest
    def StartProgramInGuest(self, request):
        if isinstance(request, StartProgramInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(StartProgramInGuestResponseMsg.typecode)
        return response

    # op: ListProcessesInGuest
    def ListProcessesInGuest(self, request):
        if isinstance(request, ListProcessesInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ListProcessesInGuestResponseMsg.typecode)
        return response

    # op: TerminateProcessInGuest
    def TerminateProcessInGuest(self, request):
        if isinstance(request, TerminateProcessInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateProcessInGuestResponseMsg.typecode)
        return response

    # op: ReadEnvironmentVariableInGuest
    def ReadEnvironmentVariableInGuest(self, request):
        if isinstance(request, ReadEnvironmentVariableInGuestRequestMsg) is False:
            raise TypeError("%s incorrect request type" % (request.__class__))
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:vim25/5.0", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadEnvironmentVariableInGuestResponseMsg.typecode)
        return response

DestroyPropertyFilterRequestMsg = ns0.DestroyPropertyFilter_Dec().pyclass

DestroyPropertyFilterResponseMsg = ns0.DestroyPropertyFilterResponse_Dec().pyclass

CreateFilterRequestMsg = ns0.CreateFilter_Dec().pyclass

CreateFilterResponseMsg = ns0.CreateFilterResponse_Dec().pyclass

RetrievePropertiesRequestMsg = ns0.RetrieveProperties_Dec().pyclass

RetrievePropertiesResponseMsg = ns0.RetrievePropertiesResponse_Dec().pyclass

CheckForUpdatesRequestMsg = ns0.CheckForUpdates_Dec().pyclass

CheckForUpdatesResponseMsg = ns0.CheckForUpdatesResponse_Dec().pyclass

WaitForUpdatesRequestMsg = ns0.WaitForUpdates_Dec().pyclass

WaitForUpdatesResponseMsg = ns0.WaitForUpdatesResponse_Dec().pyclass

CancelWaitForUpdatesRequestMsg = ns0.CancelWaitForUpdates_Dec().pyclass

CancelWaitForUpdatesResponseMsg = ns0.CancelWaitForUpdatesResponse_Dec().pyclass

WaitForUpdatesExRequestMsg = ns0.WaitForUpdatesEx_Dec().pyclass

WaitForUpdatesExResponseMsg = ns0.WaitForUpdatesExResponse_Dec().pyclass

RetrievePropertiesExRequestMsg = ns0.RetrievePropertiesEx_Dec().pyclass

RetrievePropertiesExResponseMsg = ns0.RetrievePropertiesExResponse_Dec().pyclass

ContinueRetrievePropertiesExRequestMsg = ns0.ContinueRetrievePropertiesEx_Dec().pyclass

ContinueRetrievePropertiesExResponseMsg = ns0.ContinueRetrievePropertiesExResponse_Dec().pyclass

CancelRetrievePropertiesExRequestMsg = ns0.CancelRetrievePropertiesEx_Dec().pyclass

CancelRetrievePropertiesExResponseMsg = ns0.CancelRetrievePropertiesExResponse_Dec().pyclass

CreatePropertyCollectorRequestMsg = ns0.CreatePropertyCollector_Dec().pyclass

CreatePropertyCollectorResponseMsg = ns0.CreatePropertyCollectorResponse_Dec().pyclass

DestroyPropertyCollectorRequestMsg = ns0.DestroyPropertyCollector_Dec().pyclass

DestroyPropertyCollectorResponseMsg = ns0.DestroyPropertyCollectorResponse_Dec().pyclass

AddAuthorizationRoleRequestMsg = ns0.AddAuthorizationRole_Dec().pyclass

AddAuthorizationRoleResponseMsg = ns0.AddAuthorizationRoleResponse_Dec().pyclass

RemoveAuthorizationRoleRequestMsg = ns0.RemoveAuthorizationRole_Dec().pyclass

RemoveAuthorizationRoleResponseMsg = ns0.RemoveAuthorizationRoleResponse_Dec().pyclass

UpdateAuthorizationRoleRequestMsg = ns0.UpdateAuthorizationRole_Dec().pyclass

UpdateAuthorizationRoleResponseMsg = ns0.UpdateAuthorizationRoleResponse_Dec().pyclass

MergePermissionsRequestMsg = ns0.MergePermissions_Dec().pyclass

MergePermissionsResponseMsg = ns0.MergePermissionsResponse_Dec().pyclass

RetrieveRolePermissionsRequestMsg = ns0.RetrieveRolePermissions_Dec().pyclass

RetrieveRolePermissionsResponseMsg = ns0.RetrieveRolePermissionsResponse_Dec().pyclass

RetrieveEntityPermissionsRequestMsg = ns0.RetrieveEntityPermissions_Dec().pyclass

RetrieveEntityPermissionsResponseMsg = ns0.RetrieveEntityPermissionsResponse_Dec().pyclass

RetrieveAllPermissionsRequestMsg = ns0.RetrieveAllPermissions_Dec().pyclass

RetrieveAllPermissionsResponseMsg = ns0.RetrieveAllPermissionsResponse_Dec().pyclass

SetEntityPermissionsRequestMsg = ns0.SetEntityPermissions_Dec().pyclass

SetEntityPermissionsResponseMsg = ns0.SetEntityPermissionsResponse_Dec().pyclass

ResetEntityPermissionsRequestMsg = ns0.ResetEntityPermissions_Dec().pyclass

ResetEntityPermissionsResponseMsg = ns0.ResetEntityPermissionsResponse_Dec().pyclass

RemoveEntityPermissionRequestMsg = ns0.RemoveEntityPermission_Dec().pyclass

RemoveEntityPermissionResponseMsg = ns0.RemoveEntityPermissionResponse_Dec().pyclass

HasPrivilegeOnEntityRequestMsg = ns0.HasPrivilegeOnEntity_Dec().pyclass

HasPrivilegeOnEntityResponseMsg = ns0.HasPrivilegeOnEntityResponse_Dec().pyclass

ReconfigureCluster_TaskRequestMsg = ns0.ReconfigureCluster_Task_Dec().pyclass

ReconfigureCluster_TaskResponseMsg = ns0.ReconfigureCluster_TaskResponse_Dec().pyclass

ApplyRecommendationRequestMsg = ns0.ApplyRecommendation_Dec().pyclass

ApplyRecommendationResponseMsg = ns0.ApplyRecommendationResponse_Dec().pyclass

CancelRecommendationRequestMsg = ns0.CancelRecommendation_Dec().pyclass

CancelRecommendationResponseMsg = ns0.CancelRecommendationResponse_Dec().pyclass

RecommendHostsForVmRequestMsg = ns0.RecommendHostsForVm_Dec().pyclass

RecommendHostsForVmResponseMsg = ns0.RecommendHostsForVmResponse_Dec().pyclass

AddHost_TaskRequestMsg = ns0.AddHost_Task_Dec().pyclass

AddHost_TaskResponseMsg = ns0.AddHost_TaskResponse_Dec().pyclass

MoveInto_TaskRequestMsg = ns0.MoveInto_Task_Dec().pyclass

MoveInto_TaskResponseMsg = ns0.MoveInto_TaskResponse_Dec().pyclass

MoveHostInto_TaskRequestMsg = ns0.MoveHostInto_Task_Dec().pyclass

MoveHostInto_TaskResponseMsg = ns0.MoveHostInto_TaskResponse_Dec().pyclass

RefreshRecommendationRequestMsg = ns0.RefreshRecommendation_Dec().pyclass

RefreshRecommendationResponseMsg = ns0.RefreshRecommendationResponse_Dec().pyclass

RetrieveDasAdvancedRuntimeInfoRequestMsg = ns0.RetrieveDasAdvancedRuntimeInfo_Dec().pyclass

RetrieveDasAdvancedRuntimeInfoResponseMsg = ns0.RetrieveDasAdvancedRuntimeInfoResponse_Dec().pyclass

ClusterEnterMaintenanceModeRequestMsg = ns0.ClusterEnterMaintenanceMode_Dec().pyclass

ClusterEnterMaintenanceModeResponseMsg = ns0.ClusterEnterMaintenanceModeResponse_Dec().pyclass

ReconfigureComputeResource_TaskRequestMsg = ns0.ReconfigureComputeResource_Task_Dec().pyclass

ReconfigureComputeResource_TaskResponseMsg = ns0.ReconfigureComputeResource_TaskResponse_Dec().pyclass

AddCustomFieldDefRequestMsg = ns0.AddCustomFieldDef_Dec().pyclass

AddCustomFieldDefResponseMsg = ns0.AddCustomFieldDefResponse_Dec().pyclass

RemoveCustomFieldDefRequestMsg = ns0.RemoveCustomFieldDef_Dec().pyclass

RemoveCustomFieldDefResponseMsg = ns0.RemoveCustomFieldDefResponse_Dec().pyclass

RenameCustomFieldDefRequestMsg = ns0.RenameCustomFieldDef_Dec().pyclass

RenameCustomFieldDefResponseMsg = ns0.RenameCustomFieldDefResponse_Dec().pyclass

SetFieldRequestMsg = ns0.SetField_Dec().pyclass

SetFieldResponseMsg = ns0.SetFieldResponse_Dec().pyclass

DoesCustomizationSpecExistRequestMsg = ns0.DoesCustomizationSpecExist_Dec().pyclass

DoesCustomizationSpecExistResponseMsg = ns0.DoesCustomizationSpecExistResponse_Dec().pyclass

GetCustomizationSpecRequestMsg = ns0.GetCustomizationSpec_Dec().pyclass

GetCustomizationSpecResponseMsg = ns0.GetCustomizationSpecResponse_Dec().pyclass

CreateCustomizationSpecRequestMsg = ns0.CreateCustomizationSpec_Dec().pyclass

CreateCustomizationSpecResponseMsg = ns0.CreateCustomizationSpecResponse_Dec().pyclass

OverwriteCustomizationSpecRequestMsg = ns0.OverwriteCustomizationSpec_Dec().pyclass

OverwriteCustomizationSpecResponseMsg = ns0.OverwriteCustomizationSpecResponse_Dec().pyclass

DeleteCustomizationSpecRequestMsg = ns0.DeleteCustomizationSpec_Dec().pyclass

DeleteCustomizationSpecResponseMsg = ns0.DeleteCustomizationSpecResponse_Dec().pyclass

DuplicateCustomizationSpecRequestMsg = ns0.DuplicateCustomizationSpec_Dec().pyclass

DuplicateCustomizationSpecResponseMsg = ns0.DuplicateCustomizationSpecResponse_Dec().pyclass

RenameCustomizationSpecRequestMsg = ns0.RenameCustomizationSpec_Dec().pyclass

RenameCustomizationSpecResponseMsg = ns0.RenameCustomizationSpecResponse_Dec().pyclass

CustomizationSpecItemToXmlRequestMsg = ns0.CustomizationSpecItemToXml_Dec().pyclass

CustomizationSpecItemToXmlResponseMsg = ns0.CustomizationSpecItemToXmlResponse_Dec().pyclass

XmlToCustomizationSpecItemRequestMsg = ns0.XmlToCustomizationSpecItem_Dec().pyclass

XmlToCustomizationSpecItemResponseMsg = ns0.XmlToCustomizationSpecItemResponse_Dec().pyclass

CheckCustomizationResourcesRequestMsg = ns0.CheckCustomizationResources_Dec().pyclass

CheckCustomizationResourcesResponseMsg = ns0.CheckCustomizationResourcesResponse_Dec().pyclass

QueryConnectionInfoRequestMsg = ns0.QueryConnectionInfo_Dec().pyclass

QueryConnectionInfoResponseMsg = ns0.QueryConnectionInfoResponse_Dec().pyclass

PowerOnMultiVM_TaskRequestMsg = ns0.PowerOnMultiVM_Task_Dec().pyclass

PowerOnMultiVM_TaskResponseMsg = ns0.PowerOnMultiVM_TaskResponse_Dec().pyclass

RefreshDatastoreRequestMsg = ns0.RefreshDatastore_Dec().pyclass

RefreshDatastoreResponseMsg = ns0.RefreshDatastoreResponse_Dec().pyclass

RefreshDatastoreStorageInfoRequestMsg = ns0.RefreshDatastoreStorageInfo_Dec().pyclass

RefreshDatastoreStorageInfoResponseMsg = ns0.RefreshDatastoreStorageInfoResponse_Dec().pyclass

UpdateVirtualMachineFiles_TaskRequestMsg = ns0.UpdateVirtualMachineFiles_Task_Dec().pyclass

UpdateVirtualMachineFiles_TaskResponseMsg = ns0.UpdateVirtualMachineFiles_TaskResponse_Dec().pyclass

RenameDatastoreRequestMsg = ns0.RenameDatastore_Dec().pyclass

RenameDatastoreResponseMsg = ns0.RenameDatastoreResponse_Dec().pyclass

DestroyDatastoreRequestMsg = ns0.DestroyDatastore_Dec().pyclass

DestroyDatastoreResponseMsg = ns0.DestroyDatastoreResponse_Dec().pyclass

DatastoreEnterMaintenanceModeRequestMsg = ns0.DatastoreEnterMaintenanceMode_Dec().pyclass

DatastoreEnterMaintenanceModeResponseMsg = ns0.DatastoreEnterMaintenanceModeResponse_Dec().pyclass

DatastoreExitMaintenanceMode_TaskRequestMsg = ns0.DatastoreExitMaintenanceMode_Task_Dec().pyclass

DatastoreExitMaintenanceMode_TaskResponseMsg = ns0.DatastoreExitMaintenanceMode_TaskResponse_Dec().pyclass

QueryDescriptionsRequestMsg = ns0.QueryDescriptions_Dec().pyclass

QueryDescriptionsResponseMsg = ns0.QueryDescriptionsResponse_Dec().pyclass

BrowseDiagnosticLogRequestMsg = ns0.BrowseDiagnosticLog_Dec().pyclass

BrowseDiagnosticLogResponseMsg = ns0.BrowseDiagnosticLogResponse_Dec().pyclass

GenerateLogBundles_TaskRequestMsg = ns0.GenerateLogBundles_Task_Dec().pyclass

GenerateLogBundles_TaskResponseMsg = ns0.GenerateLogBundles_TaskResponse_Dec().pyclass

FetchDVPortKeysRequestMsg = ns0.FetchDVPortKeys_Dec().pyclass

FetchDVPortKeysResponseMsg = ns0.FetchDVPortKeysResponse_Dec().pyclass

FetchDVPortsRequestMsg = ns0.FetchDVPorts_Dec().pyclass

FetchDVPortsResponseMsg = ns0.FetchDVPortsResponse_Dec().pyclass

QueryUsedVlanIdInDvsRequestMsg = ns0.QueryUsedVlanIdInDvs_Dec().pyclass

QueryUsedVlanIdInDvsResponseMsg = ns0.QueryUsedVlanIdInDvsResponse_Dec().pyclass

ReconfigureDvs_TaskRequestMsg = ns0.ReconfigureDvs_Task_Dec().pyclass

ReconfigureDvs_TaskResponseMsg = ns0.ReconfigureDvs_TaskResponse_Dec().pyclass

PerformDvsProductSpecOperation_TaskRequestMsg = ns0.PerformDvsProductSpecOperation_Task_Dec().pyclass

PerformDvsProductSpecOperation_TaskResponseMsg = ns0.PerformDvsProductSpecOperation_TaskResponse_Dec().pyclass

MergeDvs_TaskRequestMsg = ns0.MergeDvs_Task_Dec().pyclass

MergeDvs_TaskResponseMsg = ns0.MergeDvs_TaskResponse_Dec().pyclass

AddDVPortgroup_TaskRequestMsg = ns0.AddDVPortgroup_Task_Dec().pyclass

AddDVPortgroup_TaskResponseMsg = ns0.AddDVPortgroup_TaskResponse_Dec().pyclass

MoveDVPort_TaskRequestMsg = ns0.MoveDVPort_Task_Dec().pyclass

MoveDVPort_TaskResponseMsg = ns0.MoveDVPort_TaskResponse_Dec().pyclass

UpdateDvsCapabilityRequestMsg = ns0.UpdateDvsCapability_Dec().pyclass

UpdateDvsCapabilityResponseMsg = ns0.UpdateDvsCapabilityResponse_Dec().pyclass

ReconfigureDVPort_TaskRequestMsg = ns0.ReconfigureDVPort_Task_Dec().pyclass

ReconfigureDVPort_TaskResponseMsg = ns0.ReconfigureDVPort_TaskResponse_Dec().pyclass

RefreshDVPortStateRequestMsg = ns0.RefreshDVPortState_Dec().pyclass

RefreshDVPortStateResponseMsg = ns0.RefreshDVPortStateResponse_Dec().pyclass

RectifyDvsHost_TaskRequestMsg = ns0.RectifyDvsHost_Task_Dec().pyclass

RectifyDvsHost_TaskResponseMsg = ns0.RectifyDvsHost_TaskResponse_Dec().pyclass

UpdateNetworkResourcePoolRequestMsg = ns0.UpdateNetworkResourcePool_Dec().pyclass

UpdateNetworkResourcePoolResponseMsg = ns0.UpdateNetworkResourcePoolResponse_Dec().pyclass

AddNetworkResourcePoolRequestMsg = ns0.AddNetworkResourcePool_Dec().pyclass

AddNetworkResourcePoolResponseMsg = ns0.AddNetworkResourcePoolResponse_Dec().pyclass

RemoveNetworkResourcePoolRequestMsg = ns0.RemoveNetworkResourcePool_Dec().pyclass

RemoveNetworkResourcePoolResponseMsg = ns0.RemoveNetworkResourcePoolResponse_Dec().pyclass

EnableNetworkResourceManagementRequestMsg = ns0.EnableNetworkResourceManagement_Dec().pyclass

EnableNetworkResourceManagementResponseMsg = ns0.EnableNetworkResourceManagementResponse_Dec().pyclass

QueryConfigOptionDescriptorRequestMsg = ns0.QueryConfigOptionDescriptor_Dec().pyclass

QueryConfigOptionDescriptorResponseMsg = ns0.QueryConfigOptionDescriptorResponse_Dec().pyclass

QueryConfigOptionRequestMsg = ns0.QueryConfigOption_Dec().pyclass

QueryConfigOptionResponseMsg = ns0.QueryConfigOptionResponse_Dec().pyclass

QueryConfigTargetRequestMsg = ns0.QueryConfigTarget_Dec().pyclass

QueryConfigTargetResponseMsg = ns0.QueryConfigTargetResponse_Dec().pyclass

QueryTargetCapabilitiesRequestMsg = ns0.QueryTargetCapabilities_Dec().pyclass

QueryTargetCapabilitiesResponseMsg = ns0.QueryTargetCapabilitiesResponse_Dec().pyclass

setCustomValueRequestMsg = ns0.setCustomValue_Dec().pyclass

setCustomValueResponseMsg = ns0.setCustomValueResponse_Dec().pyclass

UnregisterExtensionRequestMsg = ns0.UnregisterExtension_Dec().pyclass

UnregisterExtensionResponseMsg = ns0.UnregisterExtensionResponse_Dec().pyclass

FindExtensionRequestMsg = ns0.FindExtension_Dec().pyclass

FindExtensionResponseMsg = ns0.FindExtensionResponse_Dec().pyclass

RegisterExtensionRequestMsg = ns0.RegisterExtension_Dec().pyclass

RegisterExtensionResponseMsg = ns0.RegisterExtensionResponse_Dec().pyclass

UpdateExtensionRequestMsg = ns0.UpdateExtension_Dec().pyclass

UpdateExtensionResponseMsg = ns0.UpdateExtensionResponse_Dec().pyclass

GetPublicKeyRequestMsg = ns0.GetPublicKey_Dec().pyclass

GetPublicKeyResponseMsg = ns0.GetPublicKeyResponse_Dec().pyclass

SetPublicKeyRequestMsg = ns0.SetPublicKey_Dec().pyclass

SetPublicKeyResponseMsg = ns0.SetPublicKeyResponse_Dec().pyclass

SetExtensionCertificateRequestMsg = ns0.SetExtensionCertificate_Dec().pyclass

SetExtensionCertificateResponseMsg = ns0.SetExtensionCertificateResponse_Dec().pyclass

QueryManagedByRequestMsg = ns0.QueryManagedBy_Dec().pyclass

QueryManagedByResponseMsg = ns0.QueryManagedByResponse_Dec().pyclass

MoveDatastoreFile_TaskRequestMsg = ns0.MoveDatastoreFile_Task_Dec().pyclass

MoveDatastoreFile_TaskResponseMsg = ns0.MoveDatastoreFile_TaskResponse_Dec().pyclass

CopyDatastoreFile_TaskRequestMsg = ns0.CopyDatastoreFile_Task_Dec().pyclass

CopyDatastoreFile_TaskResponseMsg = ns0.CopyDatastoreFile_TaskResponse_Dec().pyclass

DeleteDatastoreFile_TaskRequestMsg = ns0.DeleteDatastoreFile_Task_Dec().pyclass

DeleteDatastoreFile_TaskResponseMsg = ns0.DeleteDatastoreFile_TaskResponse_Dec().pyclass

MakeDirectoryRequestMsg = ns0.MakeDirectory_Dec().pyclass

MakeDirectoryResponseMsg = ns0.MakeDirectoryResponse_Dec().pyclass

ChangeOwnerRequestMsg = ns0.ChangeOwner_Dec().pyclass

ChangeOwnerResponseMsg = ns0.ChangeOwnerResponse_Dec().pyclass

CreateFolderRequestMsg = ns0.CreateFolder_Dec().pyclass

CreateFolderResponseMsg = ns0.CreateFolderResponse_Dec().pyclass

MoveIntoFolder_TaskRequestMsg = ns0.MoveIntoFolder_Task_Dec().pyclass

MoveIntoFolder_TaskResponseMsg = ns0.MoveIntoFolder_TaskResponse_Dec().pyclass

CreateVM_TaskRequestMsg = ns0.CreateVM_Task_Dec().pyclass

CreateVM_TaskResponseMsg = ns0.CreateVM_TaskResponse_Dec().pyclass

RegisterVM_TaskRequestMsg = ns0.RegisterVM_Task_Dec().pyclass

RegisterVM_TaskResponseMsg = ns0.RegisterVM_TaskResponse_Dec().pyclass

CreateClusterRequestMsg = ns0.CreateCluster_Dec().pyclass

CreateClusterResponseMsg = ns0.CreateClusterResponse_Dec().pyclass

CreateClusterExRequestMsg = ns0.CreateClusterEx_Dec().pyclass

CreateClusterExResponseMsg = ns0.CreateClusterExResponse_Dec().pyclass

AddStandaloneHost_TaskRequestMsg = ns0.AddStandaloneHost_Task_Dec().pyclass

AddStandaloneHost_TaskResponseMsg = ns0.AddStandaloneHost_TaskResponse_Dec().pyclass

CreateDatacenterRequestMsg = ns0.CreateDatacenter_Dec().pyclass

CreateDatacenterResponseMsg = ns0.CreateDatacenterResponse_Dec().pyclass

UnregisterAndDestroy_TaskRequestMsg = ns0.UnregisterAndDestroy_Task_Dec().pyclass

UnregisterAndDestroy_TaskResponseMsg = ns0.UnregisterAndDestroy_TaskResponse_Dec().pyclass

CreateDVS_TaskRequestMsg = ns0.CreateDVS_Task_Dec().pyclass

CreateDVS_TaskResponseMsg = ns0.CreateDVS_TaskResponse_Dec().pyclass

CreateStoragePodRequestMsg = ns0.CreateStoragePod_Dec().pyclass

CreateStoragePodResponseMsg = ns0.CreateStoragePodResponse_Dec().pyclass

SetCollectorPageSizeRequestMsg = ns0.SetCollectorPageSize_Dec().pyclass

SetCollectorPageSizeResponseMsg = ns0.SetCollectorPageSizeResponse_Dec().pyclass

RewindCollectorRequestMsg = ns0.RewindCollector_Dec().pyclass

RewindCollectorResponseMsg = ns0.RewindCollectorResponse_Dec().pyclass

ResetCollectorRequestMsg = ns0.ResetCollector_Dec().pyclass

ResetCollectorResponseMsg = ns0.ResetCollectorResponse_Dec().pyclass

DestroyCollectorRequestMsg = ns0.DestroyCollector_Dec().pyclass

DestroyCollectorResponseMsg = ns0.DestroyCollectorResponse_Dec().pyclass

QueryHostConnectionInfoRequestMsg = ns0.QueryHostConnectionInfo_Dec().pyclass

QueryHostConnectionInfoResponseMsg = ns0.QueryHostConnectionInfoResponse_Dec().pyclass

UpdateSystemResourcesRequestMsg = ns0.UpdateSystemResources_Dec().pyclass

UpdateSystemResourcesResponseMsg = ns0.UpdateSystemResourcesResponse_Dec().pyclass

ReconnectHost_TaskRequestMsg = ns0.ReconnectHost_Task_Dec().pyclass

ReconnectHost_TaskResponseMsg = ns0.ReconnectHost_TaskResponse_Dec().pyclass

DisconnectHost_TaskRequestMsg = ns0.DisconnectHost_Task_Dec().pyclass

DisconnectHost_TaskResponseMsg = ns0.DisconnectHost_TaskResponse_Dec().pyclass

EnterMaintenanceMode_TaskRequestMsg = ns0.EnterMaintenanceMode_Task_Dec().pyclass

EnterMaintenanceMode_TaskResponseMsg = ns0.EnterMaintenanceMode_TaskResponse_Dec().pyclass

ExitMaintenanceMode_TaskRequestMsg = ns0.ExitMaintenanceMode_Task_Dec().pyclass

ExitMaintenanceMode_TaskResponseMsg = ns0.ExitMaintenanceMode_TaskResponse_Dec().pyclass

RebootHost_TaskRequestMsg = ns0.RebootHost_Task_Dec().pyclass

RebootHost_TaskResponseMsg = ns0.RebootHost_TaskResponse_Dec().pyclass

ShutdownHost_TaskRequestMsg = ns0.ShutdownHost_Task_Dec().pyclass

ShutdownHost_TaskResponseMsg = ns0.ShutdownHost_TaskResponse_Dec().pyclass

PowerDownHostToStandBy_TaskRequestMsg = ns0.PowerDownHostToStandBy_Task_Dec().pyclass

PowerDownHostToStandBy_TaskResponseMsg = ns0.PowerDownHostToStandBy_TaskResponse_Dec().pyclass

PowerUpHostFromStandBy_TaskRequestMsg = ns0.PowerUpHostFromStandBy_Task_Dec().pyclass

PowerUpHostFromStandBy_TaskResponseMsg = ns0.PowerUpHostFromStandBy_TaskResponse_Dec().pyclass

QueryMemoryOverheadRequestMsg = ns0.QueryMemoryOverhead_Dec().pyclass

QueryMemoryOverheadResponseMsg = ns0.QueryMemoryOverheadResponse_Dec().pyclass

QueryMemoryOverheadExRequestMsg = ns0.QueryMemoryOverheadEx_Dec().pyclass

QueryMemoryOverheadExResponseMsg = ns0.QueryMemoryOverheadExResponse_Dec().pyclass

ReconfigureHostForDAS_TaskRequestMsg = ns0.ReconfigureHostForDAS_Task_Dec().pyclass

ReconfigureHostForDAS_TaskResponseMsg = ns0.ReconfigureHostForDAS_TaskResponse_Dec().pyclass

UpdateFlagsRequestMsg = ns0.UpdateFlags_Dec().pyclass

UpdateFlagsResponseMsg = ns0.UpdateFlagsResponse_Dec().pyclass

EnterLockdownModeRequestMsg = ns0.EnterLockdownMode_Dec().pyclass

EnterLockdownModeResponseMsg = ns0.EnterLockdownModeResponse_Dec().pyclass

ExitLockdownModeRequestMsg = ns0.ExitLockdownMode_Dec().pyclass

ExitLockdownModeResponseMsg = ns0.ExitLockdownModeResponse_Dec().pyclass

AcquireCimServicesTicketRequestMsg = ns0.AcquireCimServicesTicket_Dec().pyclass

AcquireCimServicesTicketResponseMsg = ns0.AcquireCimServicesTicketResponse_Dec().pyclass

UpdateIpmiRequestMsg = ns0.UpdateIpmi_Dec().pyclass

UpdateIpmiResponseMsg = ns0.UpdateIpmiResponse_Dec().pyclass

RetrieveHardwareUptimeRequestMsg = ns0.RetrieveHardwareUptime_Dec().pyclass

RetrieveHardwareUptimeResponseMsg = ns0.RetrieveHardwareUptimeResponse_Dec().pyclass

HttpNfcLeaseGetManifestRequestMsg = ns0.HttpNfcLeaseGetManifest_Dec().pyclass

HttpNfcLeaseGetManifestResponseMsg = ns0.HttpNfcLeaseGetManifestResponse_Dec().pyclass

HttpNfcLeaseCompleteRequestMsg = ns0.HttpNfcLeaseComplete_Dec().pyclass

HttpNfcLeaseCompleteResponseMsg = ns0.HttpNfcLeaseCompleteResponse_Dec().pyclass

HttpNfcLeaseAbortRequestMsg = ns0.HttpNfcLeaseAbort_Dec().pyclass

HttpNfcLeaseAbortResponseMsg = ns0.HttpNfcLeaseAbortResponse_Dec().pyclass

HttpNfcLeaseProgressRequestMsg = ns0.HttpNfcLeaseProgress_Dec().pyclass

HttpNfcLeaseProgressResponseMsg = ns0.HttpNfcLeaseProgressResponse_Dec().pyclass

QueryIpPoolsRequestMsg = ns0.QueryIpPools_Dec().pyclass

QueryIpPoolsResponseMsg = ns0.QueryIpPoolsResponse_Dec().pyclass

CreateIpPoolRequestMsg = ns0.CreateIpPool_Dec().pyclass

CreateIpPoolResponseMsg = ns0.CreateIpPoolResponse_Dec().pyclass

UpdateIpPoolRequestMsg = ns0.UpdateIpPool_Dec().pyclass

UpdateIpPoolResponseMsg = ns0.UpdateIpPoolResponse_Dec().pyclass

DestroyIpPoolRequestMsg = ns0.DestroyIpPool_Dec().pyclass

DestroyIpPoolResponseMsg = ns0.DestroyIpPoolResponse_Dec().pyclass

UpdateAssignedLicenseRequestMsg = ns0.UpdateAssignedLicense_Dec().pyclass

UpdateAssignedLicenseResponseMsg = ns0.UpdateAssignedLicenseResponse_Dec().pyclass

RemoveAssignedLicenseRequestMsg = ns0.RemoveAssignedLicense_Dec().pyclass

RemoveAssignedLicenseResponseMsg = ns0.RemoveAssignedLicenseResponse_Dec().pyclass

QueryAssignedLicensesRequestMsg = ns0.QueryAssignedLicenses_Dec().pyclass

QueryAssignedLicensesResponseMsg = ns0.QueryAssignedLicensesResponse_Dec().pyclass

QuerySupportedFeaturesRequestMsg = ns0.QuerySupportedFeatures_Dec().pyclass

QuerySupportedFeaturesResponseMsg = ns0.QuerySupportedFeaturesResponse_Dec().pyclass

QueryLicenseSourceAvailabilityRequestMsg = ns0.QueryLicenseSourceAvailability_Dec().pyclass

QueryLicenseSourceAvailabilityResponseMsg = ns0.QueryLicenseSourceAvailabilityResponse_Dec().pyclass

QueryLicenseUsageRequestMsg = ns0.QueryLicenseUsage_Dec().pyclass

QueryLicenseUsageResponseMsg = ns0.QueryLicenseUsageResponse_Dec().pyclass

SetLicenseEditionRequestMsg = ns0.SetLicenseEdition_Dec().pyclass

SetLicenseEditionResponseMsg = ns0.SetLicenseEditionResponse_Dec().pyclass

CheckLicenseFeatureRequestMsg = ns0.CheckLicenseFeature_Dec().pyclass

CheckLicenseFeatureResponseMsg = ns0.CheckLicenseFeatureResponse_Dec().pyclass

EnableFeatureRequestMsg = ns0.EnableFeature_Dec().pyclass

EnableFeatureResponseMsg = ns0.EnableFeatureResponse_Dec().pyclass

DisableFeatureRequestMsg = ns0.DisableFeature_Dec().pyclass

DisableFeatureResponseMsg = ns0.DisableFeatureResponse_Dec().pyclass

ConfigureLicenseSourceRequestMsg = ns0.ConfigureLicenseSource_Dec().pyclass

ConfigureLicenseSourceResponseMsg = ns0.ConfigureLicenseSourceResponse_Dec().pyclass

UpdateLicenseRequestMsg = ns0.UpdateLicense_Dec().pyclass

UpdateLicenseResponseMsg = ns0.UpdateLicenseResponse_Dec().pyclass

AddLicenseRequestMsg = ns0.AddLicense_Dec().pyclass

AddLicenseResponseMsg = ns0.AddLicenseResponse_Dec().pyclass

RemoveLicenseRequestMsg = ns0.RemoveLicense_Dec().pyclass

RemoveLicenseResponseMsg = ns0.RemoveLicenseResponse_Dec().pyclass

DecodeLicenseRequestMsg = ns0.DecodeLicense_Dec().pyclass

DecodeLicenseResponseMsg = ns0.DecodeLicenseResponse_Dec().pyclass

UpdateLicenseLabelRequestMsg = ns0.UpdateLicenseLabel_Dec().pyclass

UpdateLicenseLabelResponseMsg = ns0.UpdateLicenseLabelResponse_Dec().pyclass

RemoveLicenseLabelRequestMsg = ns0.RemoveLicenseLabel_Dec().pyclass

RemoveLicenseLabelResponseMsg = ns0.RemoveLicenseLabelResponse_Dec().pyclass

ReloadRequestMsg = ns0.Reload_Dec().pyclass

ReloadResponseMsg = ns0.ReloadResponse_Dec().pyclass

Rename_TaskRequestMsg = ns0.Rename_Task_Dec().pyclass

Rename_TaskResponseMsg = ns0.Rename_TaskResponse_Dec().pyclass

Destroy_TaskRequestMsg = ns0.Destroy_Task_Dec().pyclass

Destroy_TaskResponseMsg = ns0.Destroy_TaskResponse_Dec().pyclass

DestroyNetworkRequestMsg = ns0.DestroyNetwork_Dec().pyclass

DestroyNetworkResponseMsg = ns0.DestroyNetworkResponse_Dec().pyclass

ValidateHostRequestMsg = ns0.ValidateHost_Dec().pyclass

ValidateHostResponseMsg = ns0.ValidateHostResponse_Dec().pyclass

ParseDescriptorRequestMsg = ns0.ParseDescriptor_Dec().pyclass

ParseDescriptorResponseMsg = ns0.ParseDescriptorResponse_Dec().pyclass

CreateImportSpecRequestMsg = ns0.CreateImportSpec_Dec().pyclass

CreateImportSpecResponseMsg = ns0.CreateImportSpecResponse_Dec().pyclass

CreateDescriptorRequestMsg = ns0.CreateDescriptor_Dec().pyclass

CreateDescriptorResponseMsg = ns0.CreateDescriptorResponse_Dec().pyclass

QueryPerfProviderSummaryRequestMsg = ns0.QueryPerfProviderSummary_Dec().pyclass

QueryPerfProviderSummaryResponseMsg = ns0.QueryPerfProviderSummaryResponse_Dec().pyclass

QueryAvailablePerfMetricRequestMsg = ns0.QueryAvailablePerfMetric_Dec().pyclass

QueryAvailablePerfMetricResponseMsg = ns0.QueryAvailablePerfMetricResponse_Dec().pyclass

QueryPerfCounterRequestMsg = ns0.QueryPerfCounter_Dec().pyclass

QueryPerfCounterResponseMsg = ns0.QueryPerfCounterResponse_Dec().pyclass

QueryPerfCounterByLevelRequestMsg = ns0.QueryPerfCounterByLevel_Dec().pyclass

QueryPerfCounterByLevelResponseMsg = ns0.QueryPerfCounterByLevelResponse_Dec().pyclass

QueryPerfRequestMsg = ns0.QueryPerf_Dec().pyclass

QueryPerfResponseMsg = ns0.QueryPerfResponse_Dec().pyclass

QueryPerfCompositeRequestMsg = ns0.QueryPerfComposite_Dec().pyclass

QueryPerfCompositeResponseMsg = ns0.QueryPerfCompositeResponse_Dec().pyclass

CreatePerfIntervalRequestMsg = ns0.CreatePerfInterval_Dec().pyclass

CreatePerfIntervalResponseMsg = ns0.CreatePerfIntervalResponse_Dec().pyclass

RemovePerfIntervalRequestMsg = ns0.RemovePerfInterval_Dec().pyclass

RemovePerfIntervalResponseMsg = ns0.RemovePerfIntervalResponse_Dec().pyclass

UpdatePerfIntervalRequestMsg = ns0.UpdatePerfInterval_Dec().pyclass

UpdatePerfIntervalResponseMsg = ns0.UpdatePerfIntervalResponse_Dec().pyclass

UpdateCounterLevelMappingRequestMsg = ns0.UpdateCounterLevelMapping_Dec().pyclass

UpdateCounterLevelMappingResponseMsg = ns0.UpdateCounterLevelMappingResponse_Dec().pyclass

ResetCounterLevelMappingRequestMsg = ns0.ResetCounterLevelMapping_Dec().pyclass

ResetCounterLevelMappingResponseMsg = ns0.ResetCounterLevelMappingResponse_Dec().pyclass

EstimateDatabaseSizeRequestMsg = ns0.EstimateDatabaseSize_Dec().pyclass

EstimateDatabaseSizeResponseMsg = ns0.EstimateDatabaseSizeResponse_Dec().pyclass

UpdateConfigRequestMsg = ns0.UpdateConfig_Dec().pyclass

UpdateConfigResponseMsg = ns0.UpdateConfigResponse_Dec().pyclass

MoveIntoResourcePoolRequestMsg = ns0.MoveIntoResourcePool_Dec().pyclass

MoveIntoResourcePoolResponseMsg = ns0.MoveIntoResourcePoolResponse_Dec().pyclass

UpdateChildResourceConfigurationRequestMsg = ns0.UpdateChildResourceConfiguration_Dec().pyclass

UpdateChildResourceConfigurationResponseMsg = ns0.UpdateChildResourceConfigurationResponse_Dec().pyclass

CreateResourcePoolRequestMsg = ns0.CreateResourcePool_Dec().pyclass

CreateResourcePoolResponseMsg = ns0.CreateResourcePoolResponse_Dec().pyclass

DestroyChildrenRequestMsg = ns0.DestroyChildren_Dec().pyclass

DestroyChildrenResponseMsg = ns0.DestroyChildrenResponse_Dec().pyclass

CreateVAppRequestMsg = ns0.CreateVApp_Dec().pyclass

CreateVAppResponseMsg = ns0.CreateVAppResponse_Dec().pyclass

CreateChildVM_TaskRequestMsg = ns0.CreateChildVM_Task_Dec().pyclass

CreateChildVM_TaskResponseMsg = ns0.CreateChildVM_TaskResponse_Dec().pyclass

RegisterChildVM_TaskRequestMsg = ns0.RegisterChildVM_Task_Dec().pyclass

RegisterChildVM_TaskResponseMsg = ns0.RegisterChildVM_TaskResponse_Dec().pyclass

ImportVAppRequestMsg = ns0.ImportVApp_Dec().pyclass

ImportVAppResponseMsg = ns0.ImportVAppResponse_Dec().pyclass

QueryResourceConfigOptionRequestMsg = ns0.QueryResourceConfigOption_Dec().pyclass

QueryResourceConfigOptionResponseMsg = ns0.QueryResourceConfigOptionResponse_Dec().pyclass

RefreshRuntimeRequestMsg = ns0.RefreshRuntime_Dec().pyclass

RefreshRuntimeResponseMsg = ns0.RefreshRuntimeResponse_Dec().pyclass

FindByUuidRequestMsg = ns0.FindByUuid_Dec().pyclass

FindByUuidResponseMsg = ns0.FindByUuidResponse_Dec().pyclass

FindByDatastorePathRequestMsg = ns0.FindByDatastorePath_Dec().pyclass

FindByDatastorePathResponseMsg = ns0.FindByDatastorePathResponse_Dec().pyclass

FindByDnsNameRequestMsg = ns0.FindByDnsName_Dec().pyclass

FindByDnsNameResponseMsg = ns0.FindByDnsNameResponse_Dec().pyclass

FindByIpRequestMsg = ns0.FindByIp_Dec().pyclass

FindByIpResponseMsg = ns0.FindByIpResponse_Dec().pyclass

FindByInventoryPathRequestMsg = ns0.FindByInventoryPath_Dec().pyclass

FindByInventoryPathResponseMsg = ns0.FindByInventoryPathResponse_Dec().pyclass

FindChildRequestMsg = ns0.FindChild_Dec().pyclass

FindChildResponseMsg = ns0.FindChildResponse_Dec().pyclass

FindAllByUuidRequestMsg = ns0.FindAllByUuid_Dec().pyclass

FindAllByUuidResponseMsg = ns0.FindAllByUuidResponse_Dec().pyclass

FindAllByDnsNameRequestMsg = ns0.FindAllByDnsName_Dec().pyclass

FindAllByDnsNameResponseMsg = ns0.FindAllByDnsNameResponse_Dec().pyclass

FindAllByIpRequestMsg = ns0.FindAllByIp_Dec().pyclass

FindAllByIpResponseMsg = ns0.FindAllByIpResponse_Dec().pyclass

CurrentTimeRequestMsg = ns0.CurrentTime_Dec().pyclass

CurrentTimeResponseMsg = ns0.CurrentTimeResponse_Dec().pyclass

RetrieveServiceContentRequestMsg = ns0.RetrieveServiceContent_Dec().pyclass

RetrieveServiceContentResponseMsg = ns0.RetrieveServiceContentResponse_Dec().pyclass

ValidateMigrationRequestMsg = ns0.ValidateMigration_Dec().pyclass

ValidateMigrationResponseMsg = ns0.ValidateMigrationResponse_Dec().pyclass

QueryVMotionCompatibilityRequestMsg = ns0.QueryVMotionCompatibility_Dec().pyclass

QueryVMotionCompatibilityResponseMsg = ns0.QueryVMotionCompatibilityResponse_Dec().pyclass

RetrieveProductComponentsRequestMsg = ns0.RetrieveProductComponents_Dec().pyclass

RetrieveProductComponentsResponseMsg = ns0.RetrieveProductComponentsResponse_Dec().pyclass

UpdateServiceMessageRequestMsg = ns0.UpdateServiceMessage_Dec().pyclass

UpdateServiceMessageResponseMsg = ns0.UpdateServiceMessageResponse_Dec().pyclass

LoginRequestMsg = ns0.Login_Dec().pyclass

LoginResponseMsg = ns0.LoginResponse_Dec().pyclass

LoginBySSPIRequestMsg = ns0.LoginBySSPI_Dec().pyclass

LoginBySSPIResponseMsg = ns0.LoginBySSPIResponse_Dec().pyclass

LogoutRequestMsg = ns0.Logout_Dec().pyclass

LogoutResponseMsg = ns0.LogoutResponse_Dec().pyclass

AcquireLocalTicketRequestMsg = ns0.AcquireLocalTicket_Dec().pyclass

AcquireLocalTicketResponseMsg = ns0.AcquireLocalTicketResponse_Dec().pyclass

AcquireGenericServiceTicketRequestMsg = ns0.AcquireGenericServiceTicket_Dec().pyclass

AcquireGenericServiceTicketResponseMsg = ns0.AcquireGenericServiceTicketResponse_Dec().pyclass

TerminateSessionRequestMsg = ns0.TerminateSession_Dec().pyclass

TerminateSessionResponseMsg = ns0.TerminateSessionResponse_Dec().pyclass

SetLocaleRequestMsg = ns0.SetLocale_Dec().pyclass

SetLocaleResponseMsg = ns0.SetLocaleResponse_Dec().pyclass

LoginExtensionBySubjectNameRequestMsg = ns0.LoginExtensionBySubjectName_Dec().pyclass

LoginExtensionBySubjectNameResponseMsg = ns0.LoginExtensionBySubjectNameResponse_Dec().pyclass

LoginExtensionByCertificateRequestMsg = ns0.LoginExtensionByCertificate_Dec().pyclass

LoginExtensionByCertificateResponseMsg = ns0.LoginExtensionByCertificateResponse_Dec().pyclass

ImpersonateUserRequestMsg = ns0.ImpersonateUser_Dec().pyclass

ImpersonateUserResponseMsg = ns0.ImpersonateUserResponse_Dec().pyclass

SessionIsActiveRequestMsg = ns0.SessionIsActive_Dec().pyclass

SessionIsActiveResponseMsg = ns0.SessionIsActiveResponse_Dec().pyclass

AcquireCloneTicketRequestMsg = ns0.AcquireCloneTicket_Dec().pyclass

AcquireCloneTicketResponseMsg = ns0.AcquireCloneTicketResponse_Dec().pyclass

CloneSessionRequestMsg = ns0.CloneSession_Dec().pyclass

CloneSessionResponseMsg = ns0.CloneSessionResponse_Dec().pyclass

ConfigureDatastoreIORM_TaskRequestMsg = ns0.ConfigureDatastoreIORM_Task_Dec().pyclass

ConfigureDatastoreIORM_TaskResponseMsg = ns0.ConfigureDatastoreIORM_TaskResponse_Dec().pyclass

QueryIORMConfigOptionRequestMsg = ns0.QueryIORMConfigOption_Dec().pyclass

QueryIORMConfigOptionResponseMsg = ns0.QueryIORMConfigOptionResponse_Dec().pyclass

ApplyStorageDrsRecommendationToPod_TaskRequestMsg = ns0.ApplyStorageDrsRecommendationToPod_Task_Dec().pyclass

ApplyStorageDrsRecommendationToPod_TaskResponseMsg = ns0.ApplyStorageDrsRecommendationToPod_TaskResponse_Dec().pyclass

ApplyStorageDrsRecommendation_TaskRequestMsg = ns0.ApplyStorageDrsRecommendation_Task_Dec().pyclass

ApplyStorageDrsRecommendation_TaskResponseMsg = ns0.ApplyStorageDrsRecommendation_TaskResponse_Dec().pyclass

CancelStorageDrsRecommendationRequestMsg = ns0.CancelStorageDrsRecommendation_Dec().pyclass

CancelStorageDrsRecommendationResponseMsg = ns0.CancelStorageDrsRecommendationResponse_Dec().pyclass

RefreshStorageDrsRecommendationRequestMsg = ns0.RefreshStorageDrsRecommendation_Dec().pyclass

RefreshStorageDrsRecommendationResponseMsg = ns0.RefreshStorageDrsRecommendationResponse_Dec().pyclass

ConfigureStorageDrsForPod_TaskRequestMsg = ns0.ConfigureStorageDrsForPod_Task_Dec().pyclass

ConfigureStorageDrsForPod_TaskResponseMsg = ns0.ConfigureStorageDrsForPod_TaskResponse_Dec().pyclass

RecommendDatastoresRequestMsg = ns0.RecommendDatastores_Dec().pyclass

RecommendDatastoresResponseMsg = ns0.RecommendDatastoresResponse_Dec().pyclass

CancelTaskRequestMsg = ns0.CancelTask_Dec().pyclass

CancelTaskResponseMsg = ns0.CancelTaskResponse_Dec().pyclass

UpdateProgressRequestMsg = ns0.UpdateProgress_Dec().pyclass

UpdateProgressResponseMsg = ns0.UpdateProgressResponse_Dec().pyclass

SetTaskStateRequestMsg = ns0.SetTaskState_Dec().pyclass

SetTaskStateResponseMsg = ns0.SetTaskStateResponse_Dec().pyclass

SetTaskDescriptionRequestMsg = ns0.SetTaskDescription_Dec().pyclass

SetTaskDescriptionResponseMsg = ns0.SetTaskDescriptionResponse_Dec().pyclass

ReadNextTasksRequestMsg = ns0.ReadNextTasks_Dec().pyclass

ReadNextTasksResponseMsg = ns0.ReadNextTasksResponse_Dec().pyclass

ReadPreviousTasksRequestMsg = ns0.ReadPreviousTasks_Dec().pyclass

ReadPreviousTasksResponseMsg = ns0.ReadPreviousTasksResponse_Dec().pyclass

CreateCollectorForTasksRequestMsg = ns0.CreateCollectorForTasks_Dec().pyclass

CreateCollectorForTasksResponseMsg = ns0.CreateCollectorForTasksResponse_Dec().pyclass

CreateTaskRequestMsg = ns0.CreateTask_Dec().pyclass

CreateTaskResponseMsg = ns0.CreateTaskResponse_Dec().pyclass

RetrieveUserGroupsRequestMsg = ns0.RetrieveUserGroups_Dec().pyclass

RetrieveUserGroupsResponseMsg = ns0.RetrieveUserGroupsResponse_Dec().pyclass

UpdateVAppConfigRequestMsg = ns0.UpdateVAppConfig_Dec().pyclass

UpdateVAppConfigResponseMsg = ns0.UpdateVAppConfigResponse_Dec().pyclass

UpdateLinkedChildrenRequestMsg = ns0.UpdateLinkedChildren_Dec().pyclass

UpdateLinkedChildrenResponseMsg = ns0.UpdateLinkedChildrenResponse_Dec().pyclass

CloneVApp_TaskRequestMsg = ns0.CloneVApp_Task_Dec().pyclass

CloneVApp_TaskResponseMsg = ns0.CloneVApp_TaskResponse_Dec().pyclass

ExportVAppRequestMsg = ns0.ExportVApp_Dec().pyclass

ExportVAppResponseMsg = ns0.ExportVAppResponse_Dec().pyclass

PowerOnVApp_TaskRequestMsg = ns0.PowerOnVApp_Task_Dec().pyclass

PowerOnVApp_TaskResponseMsg = ns0.PowerOnVApp_TaskResponse_Dec().pyclass

PowerOffVApp_TaskRequestMsg = ns0.PowerOffVApp_Task_Dec().pyclass

PowerOffVApp_TaskResponseMsg = ns0.PowerOffVApp_TaskResponse_Dec().pyclass

SuspendVApp_TaskRequestMsg = ns0.SuspendVApp_Task_Dec().pyclass

SuspendVApp_TaskResponseMsg = ns0.SuspendVApp_TaskResponse_Dec().pyclass

unregisterVApp_TaskRequestMsg = ns0.unregisterVApp_Task_Dec().pyclass

unregisterVApp_TaskResponseMsg = ns0.unregisterVApp_TaskResponse_Dec().pyclass

CreateVirtualDisk_TaskRequestMsg = ns0.CreateVirtualDisk_Task_Dec().pyclass

CreateVirtualDisk_TaskResponseMsg = ns0.CreateVirtualDisk_TaskResponse_Dec().pyclass

DeleteVirtualDisk_TaskRequestMsg = ns0.DeleteVirtualDisk_Task_Dec().pyclass

DeleteVirtualDisk_TaskResponseMsg = ns0.DeleteVirtualDisk_TaskResponse_Dec().pyclass

MoveVirtualDisk_TaskRequestMsg = ns0.MoveVirtualDisk_Task_Dec().pyclass

MoveVirtualDisk_TaskResponseMsg = ns0.MoveVirtualDisk_TaskResponse_Dec().pyclass

CopyVirtualDisk_TaskRequestMsg = ns0.CopyVirtualDisk_Task_Dec().pyclass

CopyVirtualDisk_TaskResponseMsg = ns0.CopyVirtualDisk_TaskResponse_Dec().pyclass

ExtendVirtualDisk_TaskRequestMsg = ns0.ExtendVirtualDisk_Task_Dec().pyclass

ExtendVirtualDisk_TaskResponseMsg = ns0.ExtendVirtualDisk_TaskResponse_Dec().pyclass

QueryVirtualDiskFragmentationRequestMsg = ns0.QueryVirtualDiskFragmentation_Dec().pyclass

QueryVirtualDiskFragmentationResponseMsg = ns0.QueryVirtualDiskFragmentationResponse_Dec().pyclass

DefragmentVirtualDisk_TaskRequestMsg = ns0.DefragmentVirtualDisk_Task_Dec().pyclass

DefragmentVirtualDisk_TaskResponseMsg = ns0.DefragmentVirtualDisk_TaskResponse_Dec().pyclass

ShrinkVirtualDisk_TaskRequestMsg = ns0.ShrinkVirtualDisk_Task_Dec().pyclass

ShrinkVirtualDisk_TaskResponseMsg = ns0.ShrinkVirtualDisk_TaskResponse_Dec().pyclass

InflateVirtualDisk_TaskRequestMsg = ns0.InflateVirtualDisk_Task_Dec().pyclass

InflateVirtualDisk_TaskResponseMsg = ns0.InflateVirtualDisk_TaskResponse_Dec().pyclass

EagerZeroVirtualDisk_TaskRequestMsg = ns0.EagerZeroVirtualDisk_Task_Dec().pyclass

EagerZeroVirtualDisk_TaskResponseMsg = ns0.EagerZeroVirtualDisk_TaskResponse_Dec().pyclass

ZeroFillVirtualDisk_TaskRequestMsg = ns0.ZeroFillVirtualDisk_Task_Dec().pyclass

ZeroFillVirtualDisk_TaskResponseMsg = ns0.ZeroFillVirtualDisk_TaskResponse_Dec().pyclass

SetVirtualDiskUuidRequestMsg = ns0.SetVirtualDiskUuid_Dec().pyclass

SetVirtualDiskUuidResponseMsg = ns0.SetVirtualDiskUuidResponse_Dec().pyclass

QueryVirtualDiskUuidRequestMsg = ns0.QueryVirtualDiskUuid_Dec().pyclass

QueryVirtualDiskUuidResponseMsg = ns0.QueryVirtualDiskUuidResponse_Dec().pyclass

QueryVirtualDiskGeometryRequestMsg = ns0.QueryVirtualDiskGeometry_Dec().pyclass

QueryVirtualDiskGeometryResponseMsg = ns0.QueryVirtualDiskGeometryResponse_Dec().pyclass

RefreshStorageInfoRequestMsg = ns0.RefreshStorageInfo_Dec().pyclass

RefreshStorageInfoResponseMsg = ns0.RefreshStorageInfoResponse_Dec().pyclass

CreateSnapshot_TaskRequestMsg = ns0.CreateSnapshot_Task_Dec().pyclass

CreateSnapshot_TaskResponseMsg = ns0.CreateSnapshot_TaskResponse_Dec().pyclass

RevertToCurrentSnapshot_TaskRequestMsg = ns0.RevertToCurrentSnapshot_Task_Dec().pyclass

RevertToCurrentSnapshot_TaskResponseMsg = ns0.RevertToCurrentSnapshot_TaskResponse_Dec().pyclass

RemoveAllSnapshots_TaskRequestMsg = ns0.RemoveAllSnapshots_Task_Dec().pyclass

RemoveAllSnapshots_TaskResponseMsg = ns0.RemoveAllSnapshots_TaskResponse_Dec().pyclass

ConsolidateVMDisks_TaskRequestMsg = ns0.ConsolidateVMDisks_Task_Dec().pyclass

ConsolidateVMDisks_TaskResponseMsg = ns0.ConsolidateVMDisks_TaskResponse_Dec().pyclass

EstimateStorageForConsolidateSnapshots_TaskRequestMsg = ns0.EstimateStorageForConsolidateSnapshots_Task_Dec().pyclass

EstimateStorageForConsolidateSnapshots_TaskResponseMsg = ns0.EstimateStorageForConsolidateSnapshots_TaskResponse_Dec().pyclass

ReconfigVM_TaskRequestMsg = ns0.ReconfigVM_Task_Dec().pyclass

ReconfigVM_TaskResponseMsg = ns0.ReconfigVM_TaskResponse_Dec().pyclass

UpgradeVM_TaskRequestMsg = ns0.UpgradeVM_Task_Dec().pyclass

UpgradeVM_TaskResponseMsg = ns0.UpgradeVM_TaskResponse_Dec().pyclass

ExtractOvfEnvironmentRequestMsg = ns0.ExtractOvfEnvironment_Dec().pyclass

ExtractOvfEnvironmentResponseMsg = ns0.ExtractOvfEnvironmentResponse_Dec().pyclass

PowerOnVM_TaskRequestMsg = ns0.PowerOnVM_Task_Dec().pyclass

PowerOnVM_TaskResponseMsg = ns0.PowerOnVM_TaskResponse_Dec().pyclass

PowerOffVM_TaskRequestMsg = ns0.PowerOffVM_Task_Dec().pyclass

PowerOffVM_TaskResponseMsg = ns0.PowerOffVM_TaskResponse_Dec().pyclass

SuspendVM_TaskRequestMsg = ns0.SuspendVM_Task_Dec().pyclass

SuspendVM_TaskResponseMsg = ns0.SuspendVM_TaskResponse_Dec().pyclass

ResetVM_TaskRequestMsg = ns0.ResetVM_Task_Dec().pyclass

ResetVM_TaskResponseMsg = ns0.ResetVM_TaskResponse_Dec().pyclass

ShutdownGuestRequestMsg = ns0.ShutdownGuest_Dec().pyclass

ShutdownGuestResponseMsg = ns0.ShutdownGuestResponse_Dec().pyclass

RebootGuestRequestMsg = ns0.RebootGuest_Dec().pyclass

RebootGuestResponseMsg = ns0.RebootGuestResponse_Dec().pyclass

StandbyGuestRequestMsg = ns0.StandbyGuest_Dec().pyclass

StandbyGuestResponseMsg = ns0.StandbyGuestResponse_Dec().pyclass

AnswerVMRequestMsg = ns0.AnswerVM_Dec().pyclass

AnswerVMResponseMsg = ns0.AnswerVMResponse_Dec().pyclass

CustomizeVM_TaskRequestMsg = ns0.CustomizeVM_Task_Dec().pyclass

CustomizeVM_TaskResponseMsg = ns0.CustomizeVM_TaskResponse_Dec().pyclass

CheckCustomizationSpecRequestMsg = ns0.CheckCustomizationSpec_Dec().pyclass

CheckCustomizationSpecResponseMsg = ns0.CheckCustomizationSpecResponse_Dec().pyclass

MigrateVM_TaskRequestMsg = ns0.MigrateVM_Task_Dec().pyclass

MigrateVM_TaskResponseMsg = ns0.MigrateVM_TaskResponse_Dec().pyclass

RelocateVM_TaskRequestMsg = ns0.RelocateVM_Task_Dec().pyclass

RelocateVM_TaskResponseMsg = ns0.RelocateVM_TaskResponse_Dec().pyclass

CloneVM_TaskRequestMsg = ns0.CloneVM_Task_Dec().pyclass

CloneVM_TaskResponseMsg = ns0.CloneVM_TaskResponse_Dec().pyclass

ExportVmRequestMsg = ns0.ExportVm_Dec().pyclass

ExportVmResponseMsg = ns0.ExportVmResponse_Dec().pyclass

MarkAsTemplateRequestMsg = ns0.MarkAsTemplate_Dec().pyclass

MarkAsTemplateResponseMsg = ns0.MarkAsTemplateResponse_Dec().pyclass

MarkAsVirtualMachineRequestMsg = ns0.MarkAsVirtualMachine_Dec().pyclass

MarkAsVirtualMachineResponseMsg = ns0.MarkAsVirtualMachineResponse_Dec().pyclass

UnregisterVMRequestMsg = ns0.UnregisterVM_Dec().pyclass

UnregisterVMResponseMsg = ns0.UnregisterVMResponse_Dec().pyclass

ResetGuestInformationRequestMsg = ns0.ResetGuestInformation_Dec().pyclass

ResetGuestInformationResponseMsg = ns0.ResetGuestInformationResponse_Dec().pyclass

MountToolsInstallerRequestMsg = ns0.MountToolsInstaller_Dec().pyclass

MountToolsInstallerResponseMsg = ns0.MountToolsInstallerResponse_Dec().pyclass

UnmountToolsInstallerRequestMsg = ns0.UnmountToolsInstaller_Dec().pyclass

UnmountToolsInstallerResponseMsg = ns0.UnmountToolsInstallerResponse_Dec().pyclass

UpgradeTools_TaskRequestMsg = ns0.UpgradeTools_Task_Dec().pyclass

UpgradeTools_TaskResponseMsg = ns0.UpgradeTools_TaskResponse_Dec().pyclass

AcquireMksTicketRequestMsg = ns0.AcquireMksTicket_Dec().pyclass

AcquireMksTicketResponseMsg = ns0.AcquireMksTicketResponse_Dec().pyclass

AcquireTicketRequestMsg = ns0.AcquireTicket_Dec().pyclass

AcquireTicketResponseMsg = ns0.AcquireTicketResponse_Dec().pyclass

SetScreenResolutionRequestMsg = ns0.SetScreenResolution_Dec().pyclass

SetScreenResolutionResponseMsg = ns0.SetScreenResolutionResponse_Dec().pyclass

DefragmentAllDisksRequestMsg = ns0.DefragmentAllDisks_Dec().pyclass

DefragmentAllDisksResponseMsg = ns0.DefragmentAllDisksResponse_Dec().pyclass

CreateSecondaryVM_TaskRequestMsg = ns0.CreateSecondaryVM_Task_Dec().pyclass

CreateSecondaryVM_TaskResponseMsg = ns0.CreateSecondaryVM_TaskResponse_Dec().pyclass

TurnOffFaultToleranceForVM_TaskRequestMsg = ns0.TurnOffFaultToleranceForVM_Task_Dec().pyclass

TurnOffFaultToleranceForVM_TaskResponseMsg = ns0.TurnOffFaultToleranceForVM_TaskResponse_Dec().pyclass

MakePrimaryVM_TaskRequestMsg = ns0.MakePrimaryVM_Task_Dec().pyclass

MakePrimaryVM_TaskResponseMsg = ns0.MakePrimaryVM_TaskResponse_Dec().pyclass

TerminateFaultTolerantVM_TaskRequestMsg = ns0.TerminateFaultTolerantVM_Task_Dec().pyclass

TerminateFaultTolerantVM_TaskResponseMsg = ns0.TerminateFaultTolerantVM_TaskResponse_Dec().pyclass

DisableSecondaryVM_TaskRequestMsg = ns0.DisableSecondaryVM_Task_Dec().pyclass

DisableSecondaryVM_TaskResponseMsg = ns0.DisableSecondaryVM_TaskResponse_Dec().pyclass

EnableSecondaryVM_TaskRequestMsg = ns0.EnableSecondaryVM_Task_Dec().pyclass

EnableSecondaryVM_TaskResponseMsg = ns0.EnableSecondaryVM_TaskResponse_Dec().pyclass

SetDisplayTopologyRequestMsg = ns0.SetDisplayTopology_Dec().pyclass

SetDisplayTopologyResponseMsg = ns0.SetDisplayTopologyResponse_Dec().pyclass

StartRecording_TaskRequestMsg = ns0.StartRecording_Task_Dec().pyclass

StartRecording_TaskResponseMsg = ns0.StartRecording_TaskResponse_Dec().pyclass

StopRecording_TaskRequestMsg = ns0.StopRecording_Task_Dec().pyclass

StopRecording_TaskResponseMsg = ns0.StopRecording_TaskResponse_Dec().pyclass

StartReplaying_TaskRequestMsg = ns0.StartReplaying_Task_Dec().pyclass

StartReplaying_TaskResponseMsg = ns0.StartReplaying_TaskResponse_Dec().pyclass

StopReplaying_TaskRequestMsg = ns0.StopReplaying_Task_Dec().pyclass

StopReplaying_TaskResponseMsg = ns0.StopReplaying_TaskResponse_Dec().pyclass

PromoteDisks_TaskRequestMsg = ns0.PromoteDisks_Task_Dec().pyclass

PromoteDisks_TaskResponseMsg = ns0.PromoteDisks_TaskResponse_Dec().pyclass

CreateScreenshot_TaskRequestMsg = ns0.CreateScreenshot_Task_Dec().pyclass

CreateScreenshot_TaskResponseMsg = ns0.CreateScreenshot_TaskResponse_Dec().pyclass

QueryChangedDiskAreasRequestMsg = ns0.QueryChangedDiskAreas_Dec().pyclass

QueryChangedDiskAreasResponseMsg = ns0.QueryChangedDiskAreasResponse_Dec().pyclass

QueryUnownedFilesRequestMsg = ns0.QueryUnownedFiles_Dec().pyclass

QueryUnownedFilesResponseMsg = ns0.QueryUnownedFilesResponse_Dec().pyclass

reloadVirtualMachineFromPath_TaskRequestMsg = ns0.reloadVirtualMachineFromPath_Task_Dec().pyclass

reloadVirtualMachineFromPath_TaskResponseMsg = ns0.reloadVirtualMachineFromPath_TaskResponse_Dec().pyclass

QueryFaultToleranceCompatibilityRequestMsg = ns0.QueryFaultToleranceCompatibility_Dec().pyclass

QueryFaultToleranceCompatibilityResponseMsg = ns0.QueryFaultToleranceCompatibilityResponse_Dec().pyclass

RemoveAlarmRequestMsg = ns0.RemoveAlarm_Dec().pyclass

RemoveAlarmResponseMsg = ns0.RemoveAlarmResponse_Dec().pyclass

ReconfigureAlarmRequestMsg = ns0.ReconfigureAlarm_Dec().pyclass

ReconfigureAlarmResponseMsg = ns0.ReconfigureAlarmResponse_Dec().pyclass

CreateAlarmRequestMsg = ns0.CreateAlarm_Dec().pyclass

CreateAlarmResponseMsg = ns0.CreateAlarmResponse_Dec().pyclass

GetAlarmRequestMsg = ns0.GetAlarm_Dec().pyclass

GetAlarmResponseMsg = ns0.GetAlarmResponse_Dec().pyclass

AreAlarmActionsEnabledRequestMsg = ns0.AreAlarmActionsEnabled_Dec().pyclass

AreAlarmActionsEnabledResponseMsg = ns0.AreAlarmActionsEnabledResponse_Dec().pyclass

EnableAlarmActionsRequestMsg = ns0.EnableAlarmActions_Dec().pyclass

EnableAlarmActionsResponseMsg = ns0.EnableAlarmActionsResponse_Dec().pyclass

GetAlarmStateRequestMsg = ns0.GetAlarmState_Dec().pyclass

GetAlarmStateResponseMsg = ns0.GetAlarmStateResponse_Dec().pyclass

AcknowledgeAlarmRequestMsg = ns0.AcknowledgeAlarm_Dec().pyclass

AcknowledgeAlarmResponseMsg = ns0.AcknowledgeAlarmResponse_Dec().pyclass

ReconfigureDVPortgroup_TaskRequestMsg = ns0.ReconfigureDVPortgroup_Task_Dec().pyclass

ReconfigureDVPortgroup_TaskResponseMsg = ns0.ReconfigureDVPortgroup_TaskResponse_Dec().pyclass

QueryAvailableDvsSpecRequestMsg = ns0.QueryAvailableDvsSpec_Dec().pyclass

QueryAvailableDvsSpecResponseMsg = ns0.QueryAvailableDvsSpecResponse_Dec().pyclass

QueryCompatibleHostForNewDvsRequestMsg = ns0.QueryCompatibleHostForNewDvs_Dec().pyclass

QueryCompatibleHostForNewDvsResponseMsg = ns0.QueryCompatibleHostForNewDvsResponse_Dec().pyclass

QueryCompatibleHostForExistingDvsRequestMsg = ns0.QueryCompatibleHostForExistingDvs_Dec().pyclass

QueryCompatibleHostForExistingDvsResponseMsg = ns0.QueryCompatibleHostForExistingDvsResponse_Dec().pyclass

QueryDvsCompatibleHostSpecRequestMsg = ns0.QueryDvsCompatibleHostSpec_Dec().pyclass

QueryDvsCompatibleHostSpecResponseMsg = ns0.QueryDvsCompatibleHostSpecResponse_Dec().pyclass

QueryDvsFeatureCapabilityRequestMsg = ns0.QueryDvsFeatureCapability_Dec().pyclass

QueryDvsFeatureCapabilityResponseMsg = ns0.QueryDvsFeatureCapabilityResponse_Dec().pyclass

QueryDvsByUuidRequestMsg = ns0.QueryDvsByUuid_Dec().pyclass

QueryDvsByUuidResponseMsg = ns0.QueryDvsByUuidResponse_Dec().pyclass

QueryDvsConfigTargetRequestMsg = ns0.QueryDvsConfigTarget_Dec().pyclass

QueryDvsConfigTargetResponseMsg = ns0.QueryDvsConfigTargetResponse_Dec().pyclass

QueryDvsCheckCompatibilityRequestMsg = ns0.QueryDvsCheckCompatibility_Dec().pyclass

QueryDvsCheckCompatibilityResponseMsg = ns0.QueryDvsCheckCompatibilityResponse_Dec().pyclass

RectifyDvsOnHost_TaskRequestMsg = ns0.RectifyDvsOnHost_Task_Dec().pyclass

RectifyDvsOnHost_TaskResponseMsg = ns0.RectifyDvsOnHost_TaskResponse_Dec().pyclass

ReadNextEventsRequestMsg = ns0.ReadNextEvents_Dec().pyclass

ReadNextEventsResponseMsg = ns0.ReadNextEventsResponse_Dec().pyclass

ReadPreviousEventsRequestMsg = ns0.ReadPreviousEvents_Dec().pyclass

ReadPreviousEventsResponseMsg = ns0.ReadPreviousEventsResponse_Dec().pyclass

RetrieveArgumentDescriptionRequestMsg = ns0.RetrieveArgumentDescription_Dec().pyclass

RetrieveArgumentDescriptionResponseMsg = ns0.RetrieveArgumentDescriptionResponse_Dec().pyclass

CreateCollectorForEventsRequestMsg = ns0.CreateCollectorForEvents_Dec().pyclass

CreateCollectorForEventsResponseMsg = ns0.CreateCollectorForEventsResponse_Dec().pyclass

LogUserEventRequestMsg = ns0.LogUserEvent_Dec().pyclass

LogUserEventResponseMsg = ns0.LogUserEventResponse_Dec().pyclass

QueryEventsRequestMsg = ns0.QueryEvents_Dec().pyclass

QueryEventsResponseMsg = ns0.QueryEventsResponse_Dec().pyclass

PostEventRequestMsg = ns0.PostEvent_Dec().pyclass

PostEventResponseMsg = ns0.PostEventResponse_Dec().pyclass

JoinDomain_TaskRequestMsg = ns0.JoinDomain_Task_Dec().pyclass

JoinDomain_TaskResponseMsg = ns0.JoinDomain_TaskResponse_Dec().pyclass

JoinDomainWithCAM_TaskRequestMsg = ns0.JoinDomainWithCAM_Task_Dec().pyclass

JoinDomainWithCAM_TaskResponseMsg = ns0.JoinDomainWithCAM_TaskResponse_Dec().pyclass

ImportCertificateForCAM_TaskRequestMsg = ns0.ImportCertificateForCAM_Task_Dec().pyclass

ImportCertificateForCAM_TaskResponseMsg = ns0.ImportCertificateForCAM_TaskResponse_Dec().pyclass

LeaveCurrentDomain_TaskRequestMsg = ns0.LeaveCurrentDomain_Task_Dec().pyclass

LeaveCurrentDomain_TaskResponseMsg = ns0.LeaveCurrentDomain_TaskResponse_Dec().pyclass

ReconfigureAutostartRequestMsg = ns0.ReconfigureAutostart_Dec().pyclass

ReconfigureAutostartResponseMsg = ns0.ReconfigureAutostartResponse_Dec().pyclass

AutoStartPowerOnRequestMsg = ns0.AutoStartPowerOn_Dec().pyclass

AutoStartPowerOnResponseMsg = ns0.AutoStartPowerOnResponse_Dec().pyclass

AutoStartPowerOffRequestMsg = ns0.AutoStartPowerOff_Dec().pyclass

AutoStartPowerOffResponseMsg = ns0.AutoStartPowerOffResponse_Dec().pyclass

QueryBootDevicesRequestMsg = ns0.QueryBootDevices_Dec().pyclass

QueryBootDevicesResponseMsg = ns0.QueryBootDevicesResponse_Dec().pyclass

UpdateBootDeviceRequestMsg = ns0.UpdateBootDevice_Dec().pyclass

UpdateBootDeviceResponseMsg = ns0.UpdateBootDeviceResponse_Dec().pyclass

ConfigureHostCache_TaskRequestMsg = ns0.ConfigureHostCache_Task_Dec().pyclass

ConfigureHostCache_TaskResponseMsg = ns0.ConfigureHostCache_TaskResponse_Dec().pyclass

EnableHyperThreadingRequestMsg = ns0.EnableHyperThreading_Dec().pyclass

EnableHyperThreadingResponseMsg = ns0.EnableHyperThreadingResponse_Dec().pyclass

DisableHyperThreadingRequestMsg = ns0.DisableHyperThreading_Dec().pyclass

DisableHyperThreadingResponseMsg = ns0.DisableHyperThreadingResponse_Dec().pyclass

SearchDatastore_TaskRequestMsg = ns0.SearchDatastore_Task_Dec().pyclass

SearchDatastore_TaskResponseMsg = ns0.SearchDatastore_TaskResponse_Dec().pyclass

SearchDatastoreSubFolders_TaskRequestMsg = ns0.SearchDatastoreSubFolders_Task_Dec().pyclass

SearchDatastoreSubFolders_TaskResponseMsg = ns0.SearchDatastoreSubFolders_TaskResponse_Dec().pyclass

DeleteFileRequestMsg = ns0.DeleteFile_Dec().pyclass

DeleteFileResponseMsg = ns0.DeleteFileResponse_Dec().pyclass

UpdateLocalSwapDatastoreRequestMsg = ns0.UpdateLocalSwapDatastore_Dec().pyclass

UpdateLocalSwapDatastoreResponseMsg = ns0.UpdateLocalSwapDatastoreResponse_Dec().pyclass

QueryAvailableDisksForVmfsRequestMsg = ns0.QueryAvailableDisksForVmfs_Dec().pyclass

QueryAvailableDisksForVmfsResponseMsg = ns0.QueryAvailableDisksForVmfsResponse_Dec().pyclass

QueryVmfsDatastoreCreateOptionsRequestMsg = ns0.QueryVmfsDatastoreCreateOptions_Dec().pyclass

QueryVmfsDatastoreCreateOptionsResponseMsg = ns0.QueryVmfsDatastoreCreateOptionsResponse_Dec().pyclass

CreateVmfsDatastoreRequestMsg = ns0.CreateVmfsDatastore_Dec().pyclass

CreateVmfsDatastoreResponseMsg = ns0.CreateVmfsDatastoreResponse_Dec().pyclass

QueryVmfsDatastoreExtendOptionsRequestMsg = ns0.QueryVmfsDatastoreExtendOptions_Dec().pyclass

QueryVmfsDatastoreExtendOptionsResponseMsg = ns0.QueryVmfsDatastoreExtendOptionsResponse_Dec().pyclass

QueryVmfsDatastoreExpandOptionsRequestMsg = ns0.QueryVmfsDatastoreExpandOptions_Dec().pyclass

QueryVmfsDatastoreExpandOptionsResponseMsg = ns0.QueryVmfsDatastoreExpandOptionsResponse_Dec().pyclass

ExtendVmfsDatastoreRequestMsg = ns0.ExtendVmfsDatastore_Dec().pyclass

ExtendVmfsDatastoreResponseMsg = ns0.ExtendVmfsDatastoreResponse_Dec().pyclass

ExpandVmfsDatastoreRequestMsg = ns0.ExpandVmfsDatastore_Dec().pyclass

ExpandVmfsDatastoreResponseMsg = ns0.ExpandVmfsDatastoreResponse_Dec().pyclass

CreateNasDatastoreRequestMsg = ns0.CreateNasDatastore_Dec().pyclass

CreateNasDatastoreResponseMsg = ns0.CreateNasDatastoreResponse_Dec().pyclass

CreateLocalDatastoreRequestMsg = ns0.CreateLocalDatastore_Dec().pyclass

CreateLocalDatastoreResponseMsg = ns0.CreateLocalDatastoreResponse_Dec().pyclass

RemoveDatastoreRequestMsg = ns0.RemoveDatastore_Dec().pyclass

RemoveDatastoreResponseMsg = ns0.RemoveDatastoreResponse_Dec().pyclass

ConfigureDatastorePrincipalRequestMsg = ns0.ConfigureDatastorePrincipal_Dec().pyclass

ConfigureDatastorePrincipalResponseMsg = ns0.ConfigureDatastorePrincipalResponse_Dec().pyclass

QueryUnresolvedVmfsVolumesRequestMsg = ns0.QueryUnresolvedVmfsVolumes_Dec().pyclass

QueryUnresolvedVmfsVolumesResponseMsg = ns0.QueryUnresolvedVmfsVolumesResponse_Dec().pyclass

ResignatureUnresolvedVmfsVolume_TaskRequestMsg = ns0.ResignatureUnresolvedVmfsVolume_Task_Dec().pyclass

ResignatureUnresolvedVmfsVolume_TaskResponseMsg = ns0.ResignatureUnresolvedVmfsVolume_TaskResponse_Dec().pyclass

UpdateDateTimeConfigRequestMsg = ns0.UpdateDateTimeConfig_Dec().pyclass

UpdateDateTimeConfigResponseMsg = ns0.UpdateDateTimeConfigResponse_Dec().pyclass

QueryAvailableTimeZonesRequestMsg = ns0.QueryAvailableTimeZones_Dec().pyclass

QueryAvailableTimeZonesResponseMsg = ns0.QueryAvailableTimeZonesResponse_Dec().pyclass

QueryDateTimeRequestMsg = ns0.QueryDateTime_Dec().pyclass

QueryDateTimeResponseMsg = ns0.QueryDateTimeResponse_Dec().pyclass

UpdateDateTimeRequestMsg = ns0.UpdateDateTime_Dec().pyclass

UpdateDateTimeResponseMsg = ns0.UpdateDateTimeResponse_Dec().pyclass

RefreshDateTimeSystemRequestMsg = ns0.RefreshDateTimeSystem_Dec().pyclass

RefreshDateTimeSystemResponseMsg = ns0.RefreshDateTimeSystemResponse_Dec().pyclass

QueryAvailablePartitionRequestMsg = ns0.QueryAvailablePartition_Dec().pyclass

QueryAvailablePartitionResponseMsg = ns0.QueryAvailablePartitionResponse_Dec().pyclass

SelectActivePartitionRequestMsg = ns0.SelectActivePartition_Dec().pyclass

SelectActivePartitionResponseMsg = ns0.SelectActivePartitionResponse_Dec().pyclass

QueryPartitionCreateOptionsRequestMsg = ns0.QueryPartitionCreateOptions_Dec().pyclass

QueryPartitionCreateOptionsResponseMsg = ns0.QueryPartitionCreateOptionsResponse_Dec().pyclass

QueryPartitionCreateDescRequestMsg = ns0.QueryPartitionCreateDesc_Dec().pyclass

QueryPartitionCreateDescResponseMsg = ns0.QueryPartitionCreateDescResponse_Dec().pyclass

CreateDiagnosticPartitionRequestMsg = ns0.CreateDiagnosticPartition_Dec().pyclass

CreateDiagnosticPartitionResponseMsg = ns0.CreateDiagnosticPartitionResponse_Dec().pyclass

EsxAgentHostManagerUpdateConfigRequestMsg = ns0.EsxAgentHostManagerUpdateConfig_Dec().pyclass

EsxAgentHostManagerUpdateConfigResponseMsg = ns0.EsxAgentHostManagerUpdateConfigResponse_Dec().pyclass

UpdateDefaultPolicyRequestMsg = ns0.UpdateDefaultPolicy_Dec().pyclass

UpdateDefaultPolicyResponseMsg = ns0.UpdateDefaultPolicyResponse_Dec().pyclass

EnableRulesetRequestMsg = ns0.EnableRuleset_Dec().pyclass

EnableRulesetResponseMsg = ns0.EnableRulesetResponse_Dec().pyclass

DisableRulesetRequestMsg = ns0.DisableRuleset_Dec().pyclass

DisableRulesetResponseMsg = ns0.DisableRulesetResponse_Dec().pyclass

UpdateRulesetRequestMsg = ns0.UpdateRuleset_Dec().pyclass

UpdateRulesetResponseMsg = ns0.UpdateRulesetResponse_Dec().pyclass

RefreshFirewallRequestMsg = ns0.RefreshFirewall_Dec().pyclass

RefreshFirewallResponseMsg = ns0.RefreshFirewallResponse_Dec().pyclass

ResetFirmwareToFactoryDefaultsRequestMsg = ns0.ResetFirmwareToFactoryDefaults_Dec().pyclass

ResetFirmwareToFactoryDefaultsResponseMsg = ns0.ResetFirmwareToFactoryDefaultsResponse_Dec().pyclass

BackupFirmwareConfigurationRequestMsg = ns0.BackupFirmwareConfiguration_Dec().pyclass

BackupFirmwareConfigurationResponseMsg = ns0.BackupFirmwareConfigurationResponse_Dec().pyclass

QueryFirmwareConfigUploadURLRequestMsg = ns0.QueryFirmwareConfigUploadURL_Dec().pyclass

QueryFirmwareConfigUploadURLResponseMsg = ns0.QueryFirmwareConfigUploadURLResponse_Dec().pyclass

RestoreFirmwareConfigurationRequestMsg = ns0.RestoreFirmwareConfiguration_Dec().pyclass

RestoreFirmwareConfigurationResponseMsg = ns0.RestoreFirmwareConfigurationResponse_Dec().pyclass

RefreshHealthStatusSystemRequestMsg = ns0.RefreshHealthStatusSystem_Dec().pyclass

RefreshHealthStatusSystemResponseMsg = ns0.RefreshHealthStatusSystemResponse_Dec().pyclass

ResetSystemHealthInfoRequestMsg = ns0.ResetSystemHealthInfo_Dec().pyclass

ResetSystemHealthInfoResponseMsg = ns0.ResetSystemHealthInfoResponse_Dec().pyclass

HostImageConfigGetAcceptanceRequestMsg = ns0.HostImageConfigGetAcceptance_Dec().pyclass

HostImageConfigGetAcceptanceResponseMsg = ns0.HostImageConfigGetAcceptanceResponse_Dec().pyclass

HostImageConfigGetProfileRequestMsg = ns0.HostImageConfigGetProfile_Dec().pyclass

HostImageConfigGetProfileResponseMsg = ns0.HostImageConfigGetProfileResponse_Dec().pyclass

UpdateHostImageAcceptanceLevelRequestMsg = ns0.UpdateHostImageAcceptanceLevel_Dec().pyclass

UpdateHostImageAcceptanceLevelResponseMsg = ns0.UpdateHostImageAcceptanceLevelResponse_Dec().pyclass

QueryVnicStatusRequestMsg = ns0.QueryVnicStatus_Dec().pyclass

QueryVnicStatusResponseMsg = ns0.QueryVnicStatusResponse_Dec().pyclass

QueryPnicStatusRequestMsg = ns0.QueryPnicStatus_Dec().pyclass

QueryPnicStatusResponseMsg = ns0.QueryPnicStatusResponse_Dec().pyclass

QueryBoundVnicsRequestMsg = ns0.QueryBoundVnics_Dec().pyclass

QueryBoundVnicsResponseMsg = ns0.QueryBoundVnicsResponse_Dec().pyclass

QueryCandidateNicsRequestMsg = ns0.QueryCandidateNics_Dec().pyclass

QueryCandidateNicsResponseMsg = ns0.QueryCandidateNicsResponse_Dec().pyclass

BindVnicRequestMsg = ns0.BindVnic_Dec().pyclass

BindVnicResponseMsg = ns0.BindVnicResponse_Dec().pyclass

UnbindVnicRequestMsg = ns0.UnbindVnic_Dec().pyclass

UnbindVnicResponseMsg = ns0.UnbindVnicResponse_Dec().pyclass

QueryMigrationDependenciesRequestMsg = ns0.QueryMigrationDependencies_Dec().pyclass

QueryMigrationDependenciesResponseMsg = ns0.QueryMigrationDependenciesResponse_Dec().pyclass

QueryModulesRequestMsg = ns0.QueryModules_Dec().pyclass

QueryModulesResponseMsg = ns0.QueryModulesResponse_Dec().pyclass

UpdateModuleOptionStringRequestMsg = ns0.UpdateModuleOptionString_Dec().pyclass

UpdateModuleOptionStringResponseMsg = ns0.UpdateModuleOptionStringResponse_Dec().pyclass

QueryConfiguredModuleOptionStringRequestMsg = ns0.QueryConfiguredModuleOptionString_Dec().pyclass

QueryConfiguredModuleOptionStringResponseMsg = ns0.QueryConfiguredModuleOptionStringResponse_Dec().pyclass

CreateUserRequestMsg = ns0.CreateUser_Dec().pyclass

CreateUserResponseMsg = ns0.CreateUserResponse_Dec().pyclass

UpdateUserRequestMsg = ns0.UpdateUser_Dec().pyclass

UpdateUserResponseMsg = ns0.UpdateUserResponse_Dec().pyclass

CreateGroupRequestMsg = ns0.CreateGroup_Dec().pyclass

CreateGroupResponseMsg = ns0.CreateGroupResponse_Dec().pyclass

RemoveUserRequestMsg = ns0.RemoveUser_Dec().pyclass

RemoveUserResponseMsg = ns0.RemoveUserResponse_Dec().pyclass

RemoveGroupRequestMsg = ns0.RemoveGroup_Dec().pyclass

RemoveGroupResponseMsg = ns0.RemoveGroupResponse_Dec().pyclass

AssignUserToGroupRequestMsg = ns0.AssignUserToGroup_Dec().pyclass

AssignUserToGroupResponseMsg = ns0.AssignUserToGroupResponse_Dec().pyclass

UnassignUserFromGroupRequestMsg = ns0.UnassignUserFromGroup_Dec().pyclass

UnassignUserFromGroupResponseMsg = ns0.UnassignUserFromGroupResponse_Dec().pyclass

ReconfigureServiceConsoleReservationRequestMsg = ns0.ReconfigureServiceConsoleReservation_Dec().pyclass

ReconfigureServiceConsoleReservationResponseMsg = ns0.ReconfigureServiceConsoleReservationResponse_Dec().pyclass

ReconfigureVirtualMachineReservationRequestMsg = ns0.ReconfigureVirtualMachineReservation_Dec().pyclass

ReconfigureVirtualMachineReservationResponseMsg = ns0.ReconfigureVirtualMachineReservationResponse_Dec().pyclass

UpdateNetworkConfigRequestMsg = ns0.UpdateNetworkConfig_Dec().pyclass

UpdateNetworkConfigResponseMsg = ns0.UpdateNetworkConfigResponse_Dec().pyclass

UpdateDnsConfigRequestMsg = ns0.UpdateDnsConfig_Dec().pyclass

UpdateDnsConfigResponseMsg = ns0.UpdateDnsConfigResponse_Dec().pyclass

UpdateIpRouteConfigRequestMsg = ns0.UpdateIpRouteConfig_Dec().pyclass

UpdateIpRouteConfigResponseMsg = ns0.UpdateIpRouteConfigResponse_Dec().pyclass

UpdateConsoleIpRouteConfigRequestMsg = ns0.UpdateConsoleIpRouteConfig_Dec().pyclass

UpdateConsoleIpRouteConfigResponseMsg = ns0.UpdateConsoleIpRouteConfigResponse_Dec().pyclass

UpdateIpRouteTableConfigRequestMsg = ns0.UpdateIpRouteTableConfig_Dec().pyclass

UpdateIpRouteTableConfigResponseMsg = ns0.UpdateIpRouteTableConfigResponse_Dec().pyclass

AddVirtualSwitchRequestMsg = ns0.AddVirtualSwitch_Dec().pyclass

AddVirtualSwitchResponseMsg = ns0.AddVirtualSwitchResponse_Dec().pyclass

RemoveVirtualSwitchRequestMsg = ns0.RemoveVirtualSwitch_Dec().pyclass

RemoveVirtualSwitchResponseMsg = ns0.RemoveVirtualSwitchResponse_Dec().pyclass

UpdateVirtualSwitchRequestMsg = ns0.UpdateVirtualSwitch_Dec().pyclass

UpdateVirtualSwitchResponseMsg = ns0.UpdateVirtualSwitchResponse_Dec().pyclass

AddPortGroupRequestMsg = ns0.AddPortGroup_Dec().pyclass

AddPortGroupResponseMsg = ns0.AddPortGroupResponse_Dec().pyclass

RemovePortGroupRequestMsg = ns0.RemovePortGroup_Dec().pyclass

RemovePortGroupResponseMsg = ns0.RemovePortGroupResponse_Dec().pyclass

UpdatePortGroupRequestMsg = ns0.UpdatePortGroup_Dec().pyclass

UpdatePortGroupResponseMsg = ns0.UpdatePortGroupResponse_Dec().pyclass

UpdatePhysicalNicLinkSpeedRequestMsg = ns0.UpdatePhysicalNicLinkSpeed_Dec().pyclass

UpdatePhysicalNicLinkSpeedResponseMsg = ns0.UpdatePhysicalNicLinkSpeedResponse_Dec().pyclass

QueryNetworkHintRequestMsg = ns0.QueryNetworkHint_Dec().pyclass

QueryNetworkHintResponseMsg = ns0.QueryNetworkHintResponse_Dec().pyclass

AddVirtualNicRequestMsg = ns0.AddVirtualNic_Dec().pyclass

AddVirtualNicResponseMsg = ns0.AddVirtualNicResponse_Dec().pyclass

RemoveVirtualNicRequestMsg = ns0.RemoveVirtualNic_Dec().pyclass

RemoveVirtualNicResponseMsg = ns0.RemoveVirtualNicResponse_Dec().pyclass

UpdateVirtualNicRequestMsg = ns0.UpdateVirtualNic_Dec().pyclass

UpdateVirtualNicResponseMsg = ns0.UpdateVirtualNicResponse_Dec().pyclass

AddServiceConsoleVirtualNicRequestMsg = ns0.AddServiceConsoleVirtualNic_Dec().pyclass

AddServiceConsoleVirtualNicResponseMsg = ns0.AddServiceConsoleVirtualNicResponse_Dec().pyclass

RemoveServiceConsoleVirtualNicRequestMsg = ns0.RemoveServiceConsoleVirtualNic_Dec().pyclass

RemoveServiceConsoleVirtualNicResponseMsg = ns0.RemoveServiceConsoleVirtualNicResponse_Dec().pyclass

UpdateServiceConsoleVirtualNicRequestMsg = ns0.UpdateServiceConsoleVirtualNic_Dec().pyclass

UpdateServiceConsoleVirtualNicResponseMsg = ns0.UpdateServiceConsoleVirtualNicResponse_Dec().pyclass

RestartServiceConsoleVirtualNicRequestMsg = ns0.RestartServiceConsoleVirtualNic_Dec().pyclass

RestartServiceConsoleVirtualNicResponseMsg = ns0.RestartServiceConsoleVirtualNicResponse_Dec().pyclass

RefreshNetworkSystemRequestMsg = ns0.RefreshNetworkSystem_Dec().pyclass

RefreshNetworkSystemResponseMsg = ns0.RefreshNetworkSystemResponse_Dec().pyclass

CheckHostPatch_TaskRequestMsg = ns0.CheckHostPatch_Task_Dec().pyclass

CheckHostPatch_TaskResponseMsg = ns0.CheckHostPatch_TaskResponse_Dec().pyclass

ScanHostPatch_TaskRequestMsg = ns0.ScanHostPatch_Task_Dec().pyclass

ScanHostPatch_TaskResponseMsg = ns0.ScanHostPatch_TaskResponse_Dec().pyclass

ScanHostPatchV2_TaskRequestMsg = ns0.ScanHostPatchV2_Task_Dec().pyclass

ScanHostPatchV2_TaskResponseMsg = ns0.ScanHostPatchV2_TaskResponse_Dec().pyclass

StageHostPatch_TaskRequestMsg = ns0.StageHostPatch_Task_Dec().pyclass

StageHostPatch_TaskResponseMsg = ns0.StageHostPatch_TaskResponse_Dec().pyclass

InstallHostPatch_TaskRequestMsg = ns0.InstallHostPatch_Task_Dec().pyclass

InstallHostPatch_TaskResponseMsg = ns0.InstallHostPatch_TaskResponse_Dec().pyclass

InstallHostPatchV2_TaskRequestMsg = ns0.InstallHostPatchV2_Task_Dec().pyclass

InstallHostPatchV2_TaskResponseMsg = ns0.InstallHostPatchV2_TaskResponse_Dec().pyclass

UninstallHostPatch_TaskRequestMsg = ns0.UninstallHostPatch_Task_Dec().pyclass

UninstallHostPatch_TaskResponseMsg = ns0.UninstallHostPatch_TaskResponse_Dec().pyclass

QueryHostPatch_TaskRequestMsg = ns0.QueryHostPatch_Task_Dec().pyclass

QueryHostPatch_TaskResponseMsg = ns0.QueryHostPatch_TaskResponse_Dec().pyclass

RefreshRequestMsg = ns0.Refresh_Dec().pyclass

RefreshResponseMsg = ns0.RefreshResponse_Dec().pyclass

UpdatePassthruConfigRequestMsg = ns0.UpdatePassthruConfig_Dec().pyclass

UpdatePassthruConfigResponseMsg = ns0.UpdatePassthruConfigResponse_Dec().pyclass

ConfigurePowerPolicyRequestMsg = ns0.ConfigurePowerPolicy_Dec().pyclass

ConfigurePowerPolicyResponseMsg = ns0.ConfigurePowerPolicyResponse_Dec().pyclass

UpdateServicePolicyRequestMsg = ns0.UpdateServicePolicy_Dec().pyclass

UpdateServicePolicyResponseMsg = ns0.UpdateServicePolicyResponse_Dec().pyclass

StartServiceRequestMsg = ns0.StartService_Dec().pyclass

StartServiceResponseMsg = ns0.StartServiceResponse_Dec().pyclass

StopServiceRequestMsg = ns0.StopService_Dec().pyclass

StopServiceResponseMsg = ns0.StopServiceResponse_Dec().pyclass

RestartServiceRequestMsg = ns0.RestartService_Dec().pyclass

RestartServiceResponseMsg = ns0.RestartServiceResponse_Dec().pyclass

UninstallServiceRequestMsg = ns0.UninstallService_Dec().pyclass

UninstallServiceResponseMsg = ns0.UninstallServiceResponse_Dec().pyclass

RefreshServicesRequestMsg = ns0.RefreshServices_Dec().pyclass

RefreshServicesResponseMsg = ns0.RefreshServicesResponse_Dec().pyclass

ReconfigureSnmpAgentRequestMsg = ns0.ReconfigureSnmpAgent_Dec().pyclass

ReconfigureSnmpAgentResponseMsg = ns0.ReconfigureSnmpAgentResponse_Dec().pyclass

SendTestNotificationRequestMsg = ns0.SendTestNotification_Dec().pyclass

SendTestNotificationResponseMsg = ns0.SendTestNotificationResponse_Dec().pyclass

RetrieveDiskPartitionInfoRequestMsg = ns0.RetrieveDiskPartitionInfo_Dec().pyclass

RetrieveDiskPartitionInfoResponseMsg = ns0.RetrieveDiskPartitionInfoResponse_Dec().pyclass

ComputeDiskPartitionInfoRequestMsg = ns0.ComputeDiskPartitionInfo_Dec().pyclass

ComputeDiskPartitionInfoResponseMsg = ns0.ComputeDiskPartitionInfoResponse_Dec().pyclass

ComputeDiskPartitionInfoForResizeRequestMsg = ns0.ComputeDiskPartitionInfoForResize_Dec().pyclass

ComputeDiskPartitionInfoForResizeResponseMsg = ns0.ComputeDiskPartitionInfoForResizeResponse_Dec().pyclass

UpdateDiskPartitionsRequestMsg = ns0.UpdateDiskPartitions_Dec().pyclass

UpdateDiskPartitionsResponseMsg = ns0.UpdateDiskPartitionsResponse_Dec().pyclass

FormatVmfsRequestMsg = ns0.FormatVmfs_Dec().pyclass

FormatVmfsResponseMsg = ns0.FormatVmfsResponse_Dec().pyclass

MountVmfsVolumeRequestMsg = ns0.MountVmfsVolume_Dec().pyclass

MountVmfsVolumeResponseMsg = ns0.MountVmfsVolumeResponse_Dec().pyclass

UnmountVmfsVolumeRequestMsg = ns0.UnmountVmfsVolume_Dec().pyclass

UnmountVmfsVolumeResponseMsg = ns0.UnmountVmfsVolumeResponse_Dec().pyclass

RescanVmfsRequestMsg = ns0.RescanVmfs_Dec().pyclass

RescanVmfsResponseMsg = ns0.RescanVmfsResponse_Dec().pyclass

AttachVmfsExtentRequestMsg = ns0.AttachVmfsExtent_Dec().pyclass

AttachVmfsExtentResponseMsg = ns0.AttachVmfsExtentResponse_Dec().pyclass

ExpandVmfsExtentRequestMsg = ns0.ExpandVmfsExtent_Dec().pyclass

ExpandVmfsExtentResponseMsg = ns0.ExpandVmfsExtentResponse_Dec().pyclass

UpgradeVmfsRequestMsg = ns0.UpgradeVmfs_Dec().pyclass

UpgradeVmfsResponseMsg = ns0.UpgradeVmfsResponse_Dec().pyclass

UpgradeVmLayoutRequestMsg = ns0.UpgradeVmLayout_Dec().pyclass

UpgradeVmLayoutResponseMsg = ns0.UpgradeVmLayoutResponse_Dec().pyclass

QueryUnresolvedVmfsVolumeRequestMsg = ns0.QueryUnresolvedVmfsVolume_Dec().pyclass

QueryUnresolvedVmfsVolumeResponseMsg = ns0.QueryUnresolvedVmfsVolumeResponse_Dec().pyclass

ResolveMultipleUnresolvedVmfsVolumesRequestMsg = ns0.ResolveMultipleUnresolvedVmfsVolumes_Dec().pyclass

ResolveMultipleUnresolvedVmfsVolumesResponseMsg = ns0.ResolveMultipleUnresolvedVmfsVolumesResponse_Dec().pyclass

UnmountForceMountedVmfsVolumeRequestMsg = ns0.UnmountForceMountedVmfsVolume_Dec().pyclass

UnmountForceMountedVmfsVolumeResponseMsg = ns0.UnmountForceMountedVmfsVolumeResponse_Dec().pyclass

RescanHbaRequestMsg = ns0.RescanHba_Dec().pyclass

RescanHbaResponseMsg = ns0.RescanHbaResponse_Dec().pyclass

RescanAllHbaRequestMsg = ns0.RescanAllHba_Dec().pyclass

RescanAllHbaResponseMsg = ns0.RescanAllHbaResponse_Dec().pyclass

UpdateSoftwareInternetScsiEnabledRequestMsg = ns0.UpdateSoftwareInternetScsiEnabled_Dec().pyclass

UpdateSoftwareInternetScsiEnabledResponseMsg = ns0.UpdateSoftwareInternetScsiEnabledResponse_Dec().pyclass

UpdateInternetScsiDiscoveryPropertiesRequestMsg = ns0.UpdateInternetScsiDiscoveryProperties_Dec().pyclass

UpdateInternetScsiDiscoveryPropertiesResponseMsg = ns0.UpdateInternetScsiDiscoveryPropertiesResponse_Dec().pyclass

UpdateInternetScsiAuthenticationPropertiesRequestMsg = ns0.UpdateInternetScsiAuthenticationProperties_Dec().pyclass

UpdateInternetScsiAuthenticationPropertiesResponseMsg = ns0.UpdateInternetScsiAuthenticationPropertiesResponse_Dec().pyclass

UpdateInternetScsiDigestPropertiesRequestMsg = ns0.UpdateInternetScsiDigestProperties_Dec().pyclass

UpdateInternetScsiDigestPropertiesResponseMsg = ns0.UpdateInternetScsiDigestPropertiesResponse_Dec().pyclass

UpdateInternetScsiAdvancedOptionsRequestMsg = ns0.UpdateInternetScsiAdvancedOptions_Dec().pyclass

UpdateInternetScsiAdvancedOptionsResponseMsg = ns0.UpdateInternetScsiAdvancedOptionsResponse_Dec().pyclass

UpdateInternetScsiIPPropertiesRequestMsg = ns0.UpdateInternetScsiIPProperties_Dec().pyclass

UpdateInternetScsiIPPropertiesResponseMsg = ns0.UpdateInternetScsiIPPropertiesResponse_Dec().pyclass

UpdateInternetScsiNameRequestMsg = ns0.UpdateInternetScsiName_Dec().pyclass

UpdateInternetScsiNameResponseMsg = ns0.UpdateInternetScsiNameResponse_Dec().pyclass

UpdateInternetScsiAliasRequestMsg = ns0.UpdateInternetScsiAlias_Dec().pyclass

UpdateInternetScsiAliasResponseMsg = ns0.UpdateInternetScsiAliasResponse_Dec().pyclass

AddInternetScsiSendTargetsRequestMsg = ns0.AddInternetScsiSendTargets_Dec().pyclass

AddInternetScsiSendTargetsResponseMsg = ns0.AddInternetScsiSendTargetsResponse_Dec().pyclass

RemoveInternetScsiSendTargetsRequestMsg = ns0.RemoveInternetScsiSendTargets_Dec().pyclass

RemoveInternetScsiSendTargetsResponseMsg = ns0.RemoveInternetScsiSendTargetsResponse_Dec().pyclass

AddInternetScsiStaticTargetsRequestMsg = ns0.AddInternetScsiStaticTargets_Dec().pyclass

AddInternetScsiStaticTargetsResponseMsg = ns0.AddInternetScsiStaticTargetsResponse_Dec().pyclass

RemoveInternetScsiStaticTargetsRequestMsg = ns0.RemoveInternetScsiStaticTargets_Dec().pyclass

RemoveInternetScsiStaticTargetsResponseMsg = ns0.RemoveInternetScsiStaticTargetsResponse_Dec().pyclass

EnableMultipathPathRequestMsg = ns0.EnableMultipathPath_Dec().pyclass

EnableMultipathPathResponseMsg = ns0.EnableMultipathPathResponse_Dec().pyclass

DisableMultipathPathRequestMsg = ns0.DisableMultipathPath_Dec().pyclass

DisableMultipathPathResponseMsg = ns0.DisableMultipathPathResponse_Dec().pyclass

SetMultipathLunPolicyRequestMsg = ns0.SetMultipathLunPolicy_Dec().pyclass

SetMultipathLunPolicyResponseMsg = ns0.SetMultipathLunPolicyResponse_Dec().pyclass

QueryPathSelectionPolicyOptionsRequestMsg = ns0.QueryPathSelectionPolicyOptions_Dec().pyclass

QueryPathSelectionPolicyOptionsResponseMsg = ns0.QueryPathSelectionPolicyOptionsResponse_Dec().pyclass

QueryStorageArrayTypePolicyOptionsRequestMsg = ns0.QueryStorageArrayTypePolicyOptions_Dec().pyclass

QueryStorageArrayTypePolicyOptionsResponseMsg = ns0.QueryStorageArrayTypePolicyOptionsResponse_Dec().pyclass

UpdateScsiLunDisplayNameRequestMsg = ns0.UpdateScsiLunDisplayName_Dec().pyclass

UpdateScsiLunDisplayNameResponseMsg = ns0.UpdateScsiLunDisplayNameResponse_Dec().pyclass

DetachScsiLunRequestMsg = ns0.DetachScsiLun_Dec().pyclass

DetachScsiLunResponseMsg = ns0.DetachScsiLunResponse_Dec().pyclass

AttachScsiLunRequestMsg = ns0.AttachScsiLun_Dec().pyclass

AttachScsiLunResponseMsg = ns0.AttachScsiLunResponse_Dec().pyclass

RefreshStorageSystemRequestMsg = ns0.RefreshStorageSystem_Dec().pyclass

RefreshStorageSystemResponseMsg = ns0.RefreshStorageSystemResponse_Dec().pyclass

DiscoverFcoeHbasRequestMsg = ns0.DiscoverFcoeHbas_Dec().pyclass

DiscoverFcoeHbasResponseMsg = ns0.DiscoverFcoeHbasResponse_Dec().pyclass

MarkForRemovalRequestMsg = ns0.MarkForRemoval_Dec().pyclass

MarkForRemovalResponseMsg = ns0.MarkForRemovalResponse_Dec().pyclass

UpdateIpConfigRequestMsg = ns0.UpdateIpConfig_Dec().pyclass

UpdateIpConfigResponseMsg = ns0.UpdateIpConfigResponse_Dec().pyclass

SelectVnicRequestMsg = ns0.SelectVnic_Dec().pyclass

SelectVnicResponseMsg = ns0.SelectVnicResponse_Dec().pyclass

DeselectVnicRequestMsg = ns0.DeselectVnic_Dec().pyclass

DeselectVnicResponseMsg = ns0.DeselectVnicResponse_Dec().pyclass

QueryNetConfigRequestMsg = ns0.QueryNetConfig_Dec().pyclass

QueryNetConfigResponseMsg = ns0.QueryNetConfigResponse_Dec().pyclass

SelectVnicForNicTypeRequestMsg = ns0.SelectVnicForNicType_Dec().pyclass

SelectVnicForNicTypeResponseMsg = ns0.SelectVnicForNicTypeResponse_Dec().pyclass

DeselectVnicForNicTypeRequestMsg = ns0.DeselectVnicForNicType_Dec().pyclass

DeselectVnicForNicTypeResponseMsg = ns0.DeselectVnicForNicTypeResponse_Dec().pyclass

QueryOptionsRequestMsg = ns0.QueryOptions_Dec().pyclass

QueryOptionsResponseMsg = ns0.QueryOptionsResponse_Dec().pyclass

UpdateOptionsRequestMsg = ns0.UpdateOptions_Dec().pyclass

UpdateOptionsResponseMsg = ns0.UpdateOptionsResponse_Dec().pyclass

CheckCompliance_TaskRequestMsg = ns0.CheckCompliance_Task_Dec().pyclass

CheckCompliance_TaskResponseMsg = ns0.CheckCompliance_TaskResponse_Dec().pyclass

QueryComplianceStatusRequestMsg = ns0.QueryComplianceStatus_Dec().pyclass

QueryComplianceStatusResponseMsg = ns0.QueryComplianceStatusResponse_Dec().pyclass

ClearComplianceStatusRequestMsg = ns0.ClearComplianceStatus_Dec().pyclass

ClearComplianceStatusResponseMsg = ns0.ClearComplianceStatusResponse_Dec().pyclass

QueryExpressionMetadataRequestMsg = ns0.QueryExpressionMetadata_Dec().pyclass

QueryExpressionMetadataResponseMsg = ns0.QueryExpressionMetadataResponse_Dec().pyclass

RetrieveDescriptionRequestMsg = ns0.RetrieveDescription_Dec().pyclass

RetrieveDescriptionResponseMsg = ns0.RetrieveDescriptionResponse_Dec().pyclass

DestroyProfileRequestMsg = ns0.DestroyProfile_Dec().pyclass

DestroyProfileResponseMsg = ns0.DestroyProfileResponse_Dec().pyclass

AssociateProfileRequestMsg = ns0.AssociateProfile_Dec().pyclass

AssociateProfileResponseMsg = ns0.AssociateProfileResponse_Dec().pyclass

DissociateProfileRequestMsg = ns0.DissociateProfile_Dec().pyclass

DissociateProfileResponseMsg = ns0.DissociateProfileResponse_Dec().pyclass

CheckProfileCompliance_TaskRequestMsg = ns0.CheckProfileCompliance_Task_Dec().pyclass

CheckProfileCompliance_TaskResponseMsg = ns0.CheckProfileCompliance_TaskResponse_Dec().pyclass

ExportProfileRequestMsg = ns0.ExportProfile_Dec().pyclass

ExportProfileResponseMsg = ns0.ExportProfileResponse_Dec().pyclass

CreateProfileRequestMsg = ns0.CreateProfile_Dec().pyclass

CreateProfileResponseMsg = ns0.CreateProfileResponse_Dec().pyclass

QueryPolicyMetadataRequestMsg = ns0.QueryPolicyMetadata_Dec().pyclass

QueryPolicyMetadataResponseMsg = ns0.QueryPolicyMetadataResponse_Dec().pyclass

FindAssociatedProfileRequestMsg = ns0.FindAssociatedProfile_Dec().pyclass

FindAssociatedProfileResponseMsg = ns0.FindAssociatedProfileResponse_Dec().pyclass

UpdateClusterProfileRequestMsg = ns0.UpdateClusterProfile_Dec().pyclass

UpdateClusterProfileResponseMsg = ns0.UpdateClusterProfileResponse_Dec().pyclass

UpdateReferenceHostRequestMsg = ns0.UpdateReferenceHost_Dec().pyclass

UpdateReferenceHostResponseMsg = ns0.UpdateReferenceHostResponse_Dec().pyclass

UpdateHostProfileRequestMsg = ns0.UpdateHostProfile_Dec().pyclass

UpdateHostProfileResponseMsg = ns0.UpdateHostProfileResponse_Dec().pyclass

ExecuteHostProfileRequestMsg = ns0.ExecuteHostProfile_Dec().pyclass

ExecuteHostProfileResponseMsg = ns0.ExecuteHostProfileResponse_Dec().pyclass

ApplyHostConfig_TaskRequestMsg = ns0.ApplyHostConfig_Task_Dec().pyclass

ApplyHostConfig_TaskResponseMsg = ns0.ApplyHostConfig_TaskResponse_Dec().pyclass

GenerateConfigTaskListRequestMsg = ns0.GenerateConfigTaskList_Dec().pyclass

GenerateConfigTaskListResponseMsg = ns0.GenerateConfigTaskListResponse_Dec().pyclass

QueryHostProfileMetadataRequestMsg = ns0.QueryHostProfileMetadata_Dec().pyclass

QueryHostProfileMetadataResponseMsg = ns0.QueryHostProfileMetadataResponse_Dec().pyclass

QueryProfileStructureRequestMsg = ns0.QueryProfileStructure_Dec().pyclass

QueryProfileStructureResponseMsg = ns0.QueryProfileStructureResponse_Dec().pyclass

CreateDefaultProfileRequestMsg = ns0.CreateDefaultProfile_Dec().pyclass

CreateDefaultProfileResponseMsg = ns0.CreateDefaultProfileResponse_Dec().pyclass

UpdateAnswerFile_TaskRequestMsg = ns0.UpdateAnswerFile_Task_Dec().pyclass

UpdateAnswerFile_TaskResponseMsg = ns0.UpdateAnswerFile_TaskResponse_Dec().pyclass

RetrieveAnswerFileRequestMsg = ns0.RetrieveAnswerFile_Dec().pyclass

RetrieveAnswerFileResponseMsg = ns0.RetrieveAnswerFileResponse_Dec().pyclass

ExportAnswerFile_TaskRequestMsg = ns0.ExportAnswerFile_Task_Dec().pyclass

ExportAnswerFile_TaskResponseMsg = ns0.ExportAnswerFile_TaskResponse_Dec().pyclass

CheckAnswerFileStatus_TaskRequestMsg = ns0.CheckAnswerFileStatus_Task_Dec().pyclass

CheckAnswerFileStatus_TaskResponseMsg = ns0.CheckAnswerFileStatus_TaskResponse_Dec().pyclass

QueryAnswerFileStatusRequestMsg = ns0.QueryAnswerFileStatus_Dec().pyclass

QueryAnswerFileStatusResponseMsg = ns0.QueryAnswerFileStatusResponse_Dec().pyclass

RemoveScheduledTaskRequestMsg = ns0.RemoveScheduledTask_Dec().pyclass

RemoveScheduledTaskResponseMsg = ns0.RemoveScheduledTaskResponse_Dec().pyclass

ReconfigureScheduledTaskRequestMsg = ns0.ReconfigureScheduledTask_Dec().pyclass

ReconfigureScheduledTaskResponseMsg = ns0.ReconfigureScheduledTaskResponse_Dec().pyclass

RunScheduledTaskRequestMsg = ns0.RunScheduledTask_Dec().pyclass

RunScheduledTaskResponseMsg = ns0.RunScheduledTaskResponse_Dec().pyclass

CreateScheduledTaskRequestMsg = ns0.CreateScheduledTask_Dec().pyclass

CreateScheduledTaskResponseMsg = ns0.CreateScheduledTaskResponse_Dec().pyclass

RetrieveEntityScheduledTaskRequestMsg = ns0.RetrieveEntityScheduledTask_Dec().pyclass

RetrieveEntityScheduledTaskResponseMsg = ns0.RetrieveEntityScheduledTaskResponse_Dec().pyclass

CreateObjectScheduledTaskRequestMsg = ns0.CreateObjectScheduledTask_Dec().pyclass

CreateObjectScheduledTaskResponseMsg = ns0.CreateObjectScheduledTaskResponse_Dec().pyclass

RetrieveObjectScheduledTaskRequestMsg = ns0.RetrieveObjectScheduledTask_Dec().pyclass

RetrieveObjectScheduledTaskResponseMsg = ns0.RetrieveObjectScheduledTaskResponse_Dec().pyclass

OpenInventoryViewFolderRequestMsg = ns0.OpenInventoryViewFolder_Dec().pyclass

OpenInventoryViewFolderResponseMsg = ns0.OpenInventoryViewFolderResponse_Dec().pyclass

CloseInventoryViewFolderRequestMsg = ns0.CloseInventoryViewFolder_Dec().pyclass

CloseInventoryViewFolderResponseMsg = ns0.CloseInventoryViewFolderResponse_Dec().pyclass

ModifyListViewRequestMsg = ns0.ModifyListView_Dec().pyclass

ModifyListViewResponseMsg = ns0.ModifyListViewResponse_Dec().pyclass

ResetListViewRequestMsg = ns0.ResetListView_Dec().pyclass

ResetListViewResponseMsg = ns0.ResetListViewResponse_Dec().pyclass

ResetListViewFromViewRequestMsg = ns0.ResetListViewFromView_Dec().pyclass

ResetListViewFromViewResponseMsg = ns0.ResetListViewFromViewResponse_Dec().pyclass

DestroyViewRequestMsg = ns0.DestroyView_Dec().pyclass

DestroyViewResponseMsg = ns0.DestroyViewResponse_Dec().pyclass

CreateInventoryViewRequestMsg = ns0.CreateInventoryView_Dec().pyclass

CreateInventoryViewResponseMsg = ns0.CreateInventoryViewResponse_Dec().pyclass

CreateContainerViewRequestMsg = ns0.CreateContainerView_Dec().pyclass

CreateContainerViewResponseMsg = ns0.CreateContainerViewResponse_Dec().pyclass

CreateListViewRequestMsg = ns0.CreateListView_Dec().pyclass

CreateListViewResponseMsg = ns0.CreateListViewResponse_Dec().pyclass

CreateListViewFromViewRequestMsg = ns0.CreateListViewFromView_Dec().pyclass

CreateListViewFromViewResponseMsg = ns0.CreateListViewFromViewResponse_Dec().pyclass

RevertToSnapshot_TaskRequestMsg = ns0.RevertToSnapshot_Task_Dec().pyclass

RevertToSnapshot_TaskResponseMsg = ns0.RevertToSnapshot_TaskResponse_Dec().pyclass

RemoveSnapshot_TaskRequestMsg = ns0.RemoveSnapshot_Task_Dec().pyclass

RemoveSnapshot_TaskResponseMsg = ns0.RemoveSnapshot_TaskResponse_Dec().pyclass

RenameSnapshotRequestMsg = ns0.RenameSnapshot_Dec().pyclass

RenameSnapshotResponseMsg = ns0.RenameSnapshotResponse_Dec().pyclass

CheckCompatibility_TaskRequestMsg = ns0.CheckCompatibility_Task_Dec().pyclass

CheckCompatibility_TaskResponseMsg = ns0.CheckCompatibility_TaskResponse_Dec().pyclass

QueryVMotionCompatibilityEx_TaskRequestMsg = ns0.QueryVMotionCompatibilityEx_Task_Dec().pyclass

QueryVMotionCompatibilityEx_TaskResponseMsg = ns0.QueryVMotionCompatibilityEx_TaskResponse_Dec().pyclass

CheckMigrate_TaskRequestMsg = ns0.CheckMigrate_Task_Dec().pyclass

CheckMigrate_TaskResponseMsg = ns0.CheckMigrate_TaskResponse_Dec().pyclass

CheckRelocate_TaskRequestMsg = ns0.CheckRelocate_Task_Dec().pyclass

CheckRelocate_TaskResponseMsg = ns0.CheckRelocate_TaskResponse_Dec().pyclass

ValidateCredentialsInGuestRequestMsg = ns0.ValidateCredentialsInGuest_Dec().pyclass

ValidateCredentialsInGuestResponseMsg = ns0.ValidateCredentialsInGuestResponse_Dec().pyclass

AcquireCredentialsInGuestRequestMsg = ns0.AcquireCredentialsInGuest_Dec().pyclass

AcquireCredentialsInGuestResponseMsg = ns0.AcquireCredentialsInGuestResponse_Dec().pyclass

ReleaseCredentialsInGuestRequestMsg = ns0.ReleaseCredentialsInGuest_Dec().pyclass

ReleaseCredentialsInGuestResponseMsg = ns0.ReleaseCredentialsInGuestResponse_Dec().pyclass

MakeDirectoryInGuestRequestMsg = ns0.MakeDirectoryInGuest_Dec().pyclass

MakeDirectoryInGuestResponseMsg = ns0.MakeDirectoryInGuestResponse_Dec().pyclass

DeleteFileInGuestRequestMsg = ns0.DeleteFileInGuest_Dec().pyclass

DeleteFileInGuestResponseMsg = ns0.DeleteFileInGuestResponse_Dec().pyclass

DeleteDirectoryInGuestRequestMsg = ns0.DeleteDirectoryInGuest_Dec().pyclass

DeleteDirectoryInGuestResponseMsg = ns0.DeleteDirectoryInGuestResponse_Dec().pyclass

MoveDirectoryInGuestRequestMsg = ns0.MoveDirectoryInGuest_Dec().pyclass

MoveDirectoryInGuestResponseMsg = ns0.MoveDirectoryInGuestResponse_Dec().pyclass

MoveFileInGuestRequestMsg = ns0.MoveFileInGuest_Dec().pyclass

MoveFileInGuestResponseMsg = ns0.MoveFileInGuestResponse_Dec().pyclass

CreateTemporaryFileInGuestRequestMsg = ns0.CreateTemporaryFileInGuest_Dec().pyclass

CreateTemporaryFileInGuestResponseMsg = ns0.CreateTemporaryFileInGuestResponse_Dec().pyclass

CreateTemporaryDirectoryInGuestRequestMsg = ns0.CreateTemporaryDirectoryInGuest_Dec().pyclass

CreateTemporaryDirectoryInGuestResponseMsg = ns0.CreateTemporaryDirectoryInGuestResponse_Dec().pyclass

ListFilesInGuestRequestMsg = ns0.ListFilesInGuest_Dec().pyclass

ListFilesInGuestResponseMsg = ns0.ListFilesInGuestResponse_Dec().pyclass

ChangeFileAttributesInGuestRequestMsg = ns0.ChangeFileAttributesInGuest_Dec().pyclass

ChangeFileAttributesInGuestResponseMsg = ns0.ChangeFileAttributesInGuestResponse_Dec().pyclass

InitiateFileTransferFromGuestRequestMsg = ns0.InitiateFileTransferFromGuest_Dec().pyclass

InitiateFileTransferFromGuestResponseMsg = ns0.InitiateFileTransferFromGuestResponse_Dec().pyclass

InitiateFileTransferToGuestRequestMsg = ns0.InitiateFileTransferToGuest_Dec().pyclass

InitiateFileTransferToGuestResponseMsg = ns0.InitiateFileTransferToGuestResponse_Dec().pyclass

StartProgramInGuestRequestMsg = ns0.StartProgramInGuest_Dec().pyclass

StartProgramInGuestResponseMsg = ns0.StartProgramInGuestResponse_Dec().pyclass

ListProcessesInGuestRequestMsg = ns0.ListProcessesInGuest_Dec().pyclass

ListProcessesInGuestResponseMsg = ns0.ListProcessesInGuestResponse_Dec().pyclass

TerminateProcessInGuestRequestMsg = ns0.TerminateProcessInGuest_Dec().pyclass

TerminateProcessInGuestResponseMsg = ns0.TerminateProcessInGuestResponse_Dec().pyclass

ReadEnvironmentVariableInGuestRequestMsg = ns0.ReadEnvironmentVariableInGuest_Dec().pyclass

ReadEnvironmentVariableInGuestResponseMsg = ns0.ReadEnvironmentVariableInGuestResponse_Dec().pyclass
