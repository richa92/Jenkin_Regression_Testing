"""Library for MBT (Model Based Test)

    = Table of contents =

    - `Revision Notes`
    - `Usage`
    - `Valid log levels`
    - `Examples`
    - `Importing`
    - `Shortcuts`
    - `Keywords`

    = Revision Notes =

    | Rev      | Date         |   Originator              |  Comments                      |
    | 0.1     |   9/20/2013  |   Joseph Rodrigo & Michael Boucher    |  Initial implementation of basic keywods |



    = Usage =

    This library has keywords for StateChartMBT use.

    = Valid log levels =

    None

    = Examples =

    Notice how keywords are linked from examples.

    | `Run Random Model`  |  model=model1.xml  |  type=offline   |  file=offline_paths.txt  | transitions=4
    | `Run Random Model`  |  model=model1.xml  |  type=offline   |  file=offline_paths.txt  | minutes=10
    | `Run Random Model`  |  model=model1.xml  |  type=online   |  transitions=5
    | `Run Random Model`  |  model=model1.xml  |  type=online   |  minutes=20
    | `Run All Transitions Model`  |  model=model1.xml  |  type=offline  |  file=offline_paths.txt
    | `Run All Transitions Model`  |  model=model1.xml  |  type=online
    | `Run Defined Paths`  |  model=model1.xml  |  file=offline_paths.txt

"""
from RoboGalaxyLibrary.utilitylib import logging
from RoboGalaxyLibrary.mbt.state_chart_mbt import StateChartMBT
import pprint


class MBTKeywords(object):

    def run_random_model(self, model, type="online", file=None,
                         transitions=None, minutes=None, debug=0, skip_keyword_validation=0):
        '''
        Executes a Model based test in a random sequence constrained by time or number
        of transitions.

        Example:
        | Run Random Model  |  model=model1.xml  |  minutes=30
        | Run Random Model  |  model=model1.xml  |  transitions=10
        '''
        if transitions is not None:
            logging._info("Running model with %s transitions" % transitions)
        if minutes is not None:
            logging._info("Running model for %s minutes" % minutes)
        logging._info("Running %s model" % type)

        # Execute StateChartMBT
        mbt = StateChartMBT(model, debug, skip_keyword_validation)
        mbt.run_random_path(
            type=type, file=file, transitions=transitions, minutes=minutes)
        logging._info(
            "Successfully completed Random Model execution on %s" % model)

    def run_all_transitions_model(self, model, type="online",
                                  file=None, minutes=None, debug=0, skip_keyword_validation=0):
        '''
        Executes all available transitions in a Model based test.

        Example:
        | `Run All Transitions Model`  |  model=model1.xml
        '''
        logging._info("Running all transitions model")
        mbt = StateChartMBT(model, debug, skip_keyword_validation)
        mbt.run_all_transitions(type=type, file=file, minutes=minutes)
        logging._info(
            "Successfully completed All Transitions Model execution on %s" %
            model)

    def run_defined_paths(self, model, file, minutes=None, debug=0, skip_keyword_validation=0):
        '''
        Executes path defined in specified 'file' against defined 'model'
        for an optional time constraint 'minutes'.

        Example:
        | `Run Defined Paths`  |  model=model1.xml  |  file=offline_paths.txt
        '''
        logging._info("Running all model transitions")
        mbt = StateChartMBT(model, debug, skip_keyword_validation)
        mbt.run_defined_path(path=file, minutes=minutes)
        logging._info(
            "Successfully completed Defined Path execution on %s" % model)
