"""Library for iPDU Client.

    = Table of contents =

    - `Revision Notes`
    - `Usage`
    - `Valid log levels`
    - `Examples`
    - `Importing`
    - `Shortcuts`
    - `Keywords`

    = Revision Notes =

    | Rev      | Date         |   Originator              |  Comments                      |
    | 0.1     |   07/10/2013  |   Andy Tran               |  Initial version               |



    = Usage =

    This library has keywords for UI interaction with Fusion Enclosure UI page.

    = Valid log levels =

    None

    = Examples =

    Notice how keywords are linked from examples.

    | `iPDU Power Control`      | ${server}    | ${port}           |  TRUE/FALSE        |


"""

ROBOT_LIBRARY_VERSION = '0.1'

import socket
import sys
import ssl
from RoboGalaxyLibrary.utilitylib import logging


def ipdu_power_control(server, xml, port=50443):
    """ iPDU Power Control creates connection over the socket and send the XML commands to the iPDU via the xml file.

        server: The IP Address (or FQDN) of iPDU
        xml: XML file containing containing iPDU commands
        port: Port for XML queries is 50443
        Example:
        | iPDU Power Control      | ${server} | ${xml} | ${port} |
    """
    try:
        logging._log_to_console(
            "Connecting to iPDU server %s:%s" % (server, port))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
    except socket.error as msg:
        s.close()
        s = None

    if s is None:
        raise AssertionError('Could not open socket!')

    ins = open(xml, "r")

    ssl_sock = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_SSLv3)

    for line in ins:
        # write line by line to iPDU server
        logging._log_to_console_and_log_file(
            "Send XML data to iPDU server %s" % line)
        ssl_sock.write(line)

        # Read a chunk of data.  Will not necessarily
        # read all the data returned by the server.
    data = ssl_sock.read()

    # Note that you need to close the underlying socket, not the SSL object.
    del ssl_sock
    s.close()
