""" RoboGalaxy Listeners """
import os
import signal
import ctypes
from time import sleep


class Pause(object):
    """
    Pause listener
    This class allows the pausing of test suite execution if a file exists.
    Execution will resume when the file is removed.
    Usage:  pybot --listener RoboGalaxyLibrary.listeners.Pause;c:\\temp\\pausefile <your test suite>
    """
    ROBOT_LISTENER_API_VERSION = 3

    def __init__(self, filename=None):
        if filename is None:
            raise AssertionError("Please supply a pause listener filename")
        self.filename = filename
        print("{}\n* {} listener filename: {}\n{}".format("*" * 80, self.__class__.__name__, filename, "*" * 80))

    def pause_if_file_present(self, *args, **kwargs):
        """
        If the pause file is present, pause and wait for it to be removed
        Args:
            name: The suite/test/keyword name
            attrs: The attributes
        """
        if os.path.exists(self.filename):
            print("\nPaused.  Remove '{}' to continue.".format(self.filename))

            # sleep until the file is removed
            while os.path.exists(self.filename):
                sleep(1)

            print("'{}' removed.  Continuing execution".format(self.filename))

    # override all start methods with pause_if_file_present
    start_suite = pause_if_file_present
    start_test = pause_if_file_present
    start_keyword = pause_if_file_present


class Abort(object):
    """
    Abort listener
    This class allows the aborting of test suite execution if a file exists.
    Usage:  pybot --listener RoboGalaxyLibrary.listeners.Abort;c:\\temp\\abortfile <your test suite>
    """
    ROBOT_LISTENER_API_VERSION = 2
    ROBOT_LIBRARY_SCOPE = "GLOBAL"

    def send_terminate(self, signal_name):
        if os.name != 'nt':
            os.kill(self._process.pid, getattr(signal, signal_name))
        else:
            ctypes.windll.kernel32.GenerateConsoleCtrlEvent(0, 0)

    def __init__(self, filename=None):
        self._signal_sent = False
        if filename is None:
            raise AssertionError("Please supply an abort listener filename")
        self.filename = filename
        print("{}\n* {} listener filename: {}\n{}".format("*" * 80, self.__class__.__name__, filename, "*" * 80))

    def _set_handler_to_ignore_one_sigint(self):
        orig_handler = signal.getsignal(signal.SIGINT)
        signal.signal(signal.SIGINT, lambda signum, frame: signal.signal(signal.SIGINT, orig_handler))

    def abort_if_file_present(self, *args, **kwargs):
        """
        If the pause file is present, pause and wait for it to be removed
        Args:
            name: The suite/test/keyword name
            attrs: The attributes
        """
        if os.path.exists(self.filename) and not self._signal_sent:
            print("{} file found ***** Halting execution".format(self.filename))
            self.send_terminate(signal.SIGINT)
            # we only want to send the signal once, so set this flag to track
            self._signal_sent = True

    # override all start methods with abort_if_file_present
    start_keyword = abort_if_file_present
    end_keyword = abort_if_file_present
    start_suite = abort_if_file_present
    end_suite = abort_if_file_present
    start_test = abort_if_file_present
    end_test = abort_if_file_present
