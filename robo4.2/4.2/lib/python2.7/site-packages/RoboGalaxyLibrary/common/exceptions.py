import sys


class BaseException(Exception):

    """
    Base Exception

    """
    message = "An unknown exception occurred"

    def __init__(self, *args, **kwargs):
        try:
            self._error_string = self.message % kwargs
        except Exception:
            # at least get the core message out if something happened
            self._error_string = self.message
        if len(args) > 0:
            # If there is a non-kwarg parameter, assume it's the error
            # message or reason description and tack it on to the end
            # of the exception message
            # Convert all arguments into their string representations...
            args = ["%s" % arg for arg in args]
            self._error_string = (self._error_string +
                                  "\nDetails: %s" % '\n'.join(args))

    def __str__(self):
        return self._error_string


class AuthenticationFailure(BaseException):
    message = ("Authentication with user %(user)s and password "
               "%(password)s failed")


class IdentityError(BaseException):
    message = "Got identity error"


class ComputeFault(BaseException):
    message = "Got compute fault"


class TimeoutException(BaseException):
    message = "Request timed out"


class EndpointNotFound(BaseException):
    message = "Endpoint not found"


class CommandError(BaseException):

    """Invalid usage of CLI"""


class InvalidEndpoint(BaseException):

    """The provided endpoint is invalid."""


class CommunicationError(BaseException):

    """Unable to communicate with server."""


class ClientException(Exception):

    """DEPRECATED"""


class HTTPException(ClientException):

    """Base exception for all HTTP-derived exceptions"""
    code = 'N/A'

    def __init__(self, details=None):
        self.details = details

    def __str__(self):
        return "%s (HTTP %s)" % (self.__class__.__name__, self.code)


class BadRequest(HTTPException):

    """DEPRECATED"""
    code = 400


class InvalidConfiguration(BaseException):
    message = "Invalid Configuration"


class Duplicate(BaseException):
    message = "An object with that identifier already exists"


class HTTPBadRequest(BadRequest):
    pass


class RateLimitExceeded(BaseException):
    message = ("Rate limit exceeded.\nMessage: %(message)s\n"
               "Details: %(details)s")


class Unauthorized(HTTPException):

    """DEPRECATED"""
    code = 401


class HTTPUnauthorized(Unauthorized):
    pass


class Forbidden(HTTPException):

    """DEPRECATED"""
    code = 403


class RetryError(Exception):
    message = ("Retry Error")


class HTTPForbidden(Forbidden):
    pass


class NotFound(HTTPException):

    """DEPRECATED"""
    code = 404


class HTTPNotFound(NotFound):
    pass


class HTTPMethodNotAllowed(HTTPException):
    code = 405


class Conflict(HTTPException):

    """DEPRECATED"""
    code = 409


class HTTPConflict(Conflict):
    pass


class OverLimit(HTTPException):

    """DEPRECATED"""
    code = 413


class HTTPOverLimit(OverLimit):
    pass


class HTTPInternalServerError(HTTPException):
    code = 500


class HTTPNotImplemented(HTTPException):
    code = 501


class HTTPBadGateway(HTTPException):
    code = 502


class ServiceUnavailable(HTTPException):

    """DEPRECATED"""
    code = 503


class HTTPServiceUnavailable(ServiceUnavailable):
    pass


class HealthMonitorException(BaseException):
    message = "cannot continue with the test case, aborting test case ...."

# NOTE(bcwaldon): Build a mapping of HTTP codes to corresponding exception
# classes
_code_map = {}
for obj_name in dir(sys.modules[__name__]):
    if obj_name.startswith('HTTP'):
        obj = getattr(sys.modules[__name__], obj_name)
        _code_map[obj.code] = obj


def from_response(response):
    """Return an instance of an HTTPException based on httplib response."""
    cls = _code_map.get(response.status, HTTPException)
    return cls()


class TmBaseException(Exception):

    def __init__(self, msg=None, inner_exception_obj=None):
        self.message = msg
        self.inner_exception_obj = inner_exception_obj

    def __str__(self):
        return "%s" % ('' if self.message is None else self.message)


class ParameterException(Exception):
    pass


class ElementNotFoundException(TmBaseException):
    pass


class WaitTimeoutException(TmBaseException):
    pass


class NotExpectedElementException(TmBaseException):
    pass


class RemoteActionException(TmBaseException):
    pass


class OneViewFwToolException(TmBaseException):
    pass


class NonFatalError(RuntimeError):

    """Raise this exception for a non-exiting Robot error
    """
    ROBOT_EXIT_ON_FAILURE = False


class FatalError(RuntimeError):

    """Raise this exception for a exiting Robot error
    """
    ROBOT_EXIT_ON_FAILURE = True


class UIException(TmBaseException):
    pass
