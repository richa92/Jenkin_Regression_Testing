#!/usr/bin/python
# (C) Copyright 2013 Hewlett-Packard Development Company, L.P.


from RoboGalaxyLibrary.api.common import httplib2
from RoboGalaxyLibrary.api.common import utils
from RoboGalaxyLibrary.utilitylib import logging as logger
import json


class RESTException(Exception):

    def __init__(self, msg, resp=None):
        self.msg = msg
        self.resp = resp

    def __str__(self):
        try:
            resp = "%s\n\tResponse Headers: %s\n\tBody: %s" % (
                self.msg, self.resp, self.resp.body)
        except:
            resp = "%s\n\tResponse: %s" % (self.msg, self.resp)
        return resp


class HTTPClient(object):

    JsonTypes = ('application/json', 'javascript')
    DefaultContent = {
        "content-type": "application/json", "Accept": "application/json"}

    @staticmethod
    def isJSON(val):
        if "json" in val:
            return True
        for jtype in HTTPClient.JsonTypes:
            if val in jtype:
                return True
        return False
        return val in HTTPClient.JsonTypes

    def __init__(self, user=None, passwd=None,
                 proxy_host=None, proxy_port=None,
                 headers=None, base_url=None):
        if proxy_host:
            proxy = httplib2.ProxyInfo(
                httplib2.socks.PROXY_TYPE_HTTP, proxy_host, proxy_port)
        else:
            proxy = None
        self._client = httplib2.Http(
            proxy_info=proxy, disable_ssl_certificate_validation=True)
        if user:
            self._client.add_credentials(user, passwd)
        self.set_headers(headers)
        self._set_base_url(base_url)

    def _set_base_url(self, base):
        self._base_url = base

    def _construct_url(self, url):
        if self._base_url:
            return "%s%s" % (self._base_url, url)
        return url

    def set_headers(self, hdrs):
        if hdrs:
            self._headers = hdrs.copy()
        else:
            self._headers = HTTPClient.DefaultContent.copy()
        if 'content-type' not in self._headers:
            hdrs['content-type'] = HTTPClient.JsonTypes[0]
        return self._headers

    def _convert_headers(self, hdrs=None):
        xhdrs = self._headers.copy()
        if hdrs:
            xhdrs.update(hdrs)
        return xhdrs

    def _convert_body(self, body, ctype):
        if not body:
            return ""
        if not ctype or HTTPClient.isJSON(ctype):
            # return json.dumps(body)
            return json.dumps(
                body,
                sort_keys=True,
                indent=4,
                separators=(
                    ',',
                    ': '))
        return "%s" % (body)

    def _update_request(self, body=None, headers=None):
        xhdrs = self._convert_headers(headers)
        if body:
            xbody = self._convert_body(body, xhdrs['content-type'])
        else:
            xbody = body
        if xbody:
            xhdrs["content-length"] = "%s" % (len(xbody))
        return xbody, xhdrs

    def do_request(self, cmd, uri, resource=None, headers=None):
        if (not self._client):
            raise RESTException("HTTPClient: Client not initialized")
        xuri = self._construct_url(uri)
        xbody, xhdrs = self._update_request(body=resource, headers=headers)
        logger._info("HTTPClient: Performing %s on %s" % (cmd, xuri))
        logger._debug("\nRequest header: %s" % json.dumps(
            xhdrs, sort_keys=True, indent=4, separators=(',', ': ')))
        logger._debug("HTTPClient: Request Body %s" % xbody)
        try:
            resp, content = self._client.request(
                xuri, cmd, body=xbody, headers=xhdrs)
            logger._debug("\nHTTPClient: Response Header %s" % json.dumps(
                resp, sort_keys=True, indent=4, separators=(',', ': ')))
        except Exception as e:
            logger._info(
                "HTTPClient: Caught exception making %s request, E (%s) =\n\t%s" %
                (cmd, type(e), e))
            raise

        if content:
            if "content-type" in resp and HTTPClient.isJSON(
                    resp["content-type"]):
                resp.body = json.loads(content)
                # Convert list responses into dictionary
                if isinstance(resp.body, list):
                    count = len(resp.body)
                    resp.body = {'members': resp.body}
                    resp.body['count'] = count
                logger._debug(
                    "\nHTTPClient Response body: %s" %
                    json.dumps(
                        resp.body,
                        sort_keys=True,
                        indent=4,
                        separators=(
                            ',',
                            ': ')))
            else:
                logger._info(
                    "do_request: missing or unknown content type (%s)" %
                    resp["content-type"])
                resp.body = content
        else:
            resp.body = {}

        if resp.status >= 300:
            msg = "Error handling request: CMD %s, Headers %s, Resource %s" % (
                cmd, xhdrs, xbody)
            logger._info(msg)
# raise RESTException(msg, resp)

        logger._debug("\nHTTPClient: Response %s" % json.dumps(
            resp, sort_keys=True, indent=4, separators=(',', ': ')))
        return resp

    def put(self, uri, body=None, headers=None):
        return self.do_request("PUT", uri, resource=body, headers=headers)

    def post(self, uri, body, hdrs=None):
        return self.do_request("POST", uri, resource=body, headers=hdrs)

    def delete(self, uri, hdrs=None):
        return self.do_request("DELETE", uri, headers=hdrs)

    def get(self, uri, hdrs=None):
        return self.do_request("GET", uri, headers=hdrs)

    def patch(self, uri, body, hdrs=None):
        return self.do_request("PATCH", uri, resource=body, headers=hdrs)
