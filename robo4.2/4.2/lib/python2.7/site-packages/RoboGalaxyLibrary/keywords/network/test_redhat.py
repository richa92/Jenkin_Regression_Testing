#!/user/bin/env python27
# (C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
Unit tests for RedHatNetConfig object
"""
from copy import deepcopy
from mock import patch
from redhat import RedHatNetConfig
from unittest import TestCase
from test_data import rhel_conf, redhat_host


class TestRedHatNetConfigCommon(TestCase):
    """
    Object holding test cases for RedHatNetConfig
    """
    def test_missing_config(self):
        """
        Verify network configuration fails due to missing config parameter
        :return:
        """
        var = {"host": redhat_host, "config": []}
        r = RedHatNetConfig().configure_network(var)

        self.assertListEqual(r, list(), "Excepted empty results")

    def test_invalid_host(self):
        """
        Verify failure when there are no target system information
        :return:
        """
        var = {"host": dict(), "config": rhel_conf['config']}
        r = RedHatNetConfig().configure_network(var)

        self.assertListEqual(r, list(), "Excepted emtpy results")

    @patch('redhat.RedHatNetConfig._remote_cmd', return_value=False)
    def test_missing_modules(self, cmd):
        """
        Failure when modules are missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        var = {"host": redhat_host, "config": deepcopy(rhel_conf['config'][0])}
        r = RedHatNetConfig().configure_network(var)
        self.assertListEqual(r, list(), "Excepted emtpy results")

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_missing_nmcli(self, cmd):
        """
        Failure when 'nmcli' utility is not available
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, False]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        r = RedHatNetConfig().configure_network(var)
        self.assertListEqual(r, list(), "Excepted emtpy results")

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_missing_ports(self, cmd):
        """
        Failure when modules are missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        del var['config'][0]['ports']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'Unknown')
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_missing_networks(self, cmd):
        """
        Failure when network is unavailable in config
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        del var['config'][0]['networks']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_missing_network_type(self, cmd):
        """
        Failure when type is unavailable in config
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        del var['config'][0]['type']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_unknown_type(self, cmd):
        """
        Failure when network type is unknown in config
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        var['config'][0]['type'] = 'testtype'
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')


class TestRedHatNetConfigEthernet(TestCase):
    """
    Test case suite for validating configure_ethernet
    """

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_incorrect_port_number(self, cmd):
        """
        Failure when there is an incorrect number of ports
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        var['config'][0]['ports'].append('gg:kk:zz:yy')
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_invalid_device_name(self, cmd):
        """
        Failure when the MAC address is invalid
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, False, False, True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_fail_port_config(self, cmd):
        """
        Failure when the nmcli fails to configure the port
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, 'eth1', False, True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'eth1')
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_pass_port_config(self, cmd):
        """
        Verify the result when there is a pass
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, 'eth1', True, True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'eth1')
        self.assertEquals(r[0]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_pass_multi_network(self, cmd):
        """
        Verify the results when there are multiple networks
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, 'eth1'] + [True] * 4

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][1])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'eth1.100')
        self.assertEquals(r[0]['status'], 'Pass')
        self.assertEquals(r[1]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_fail_multi_network(self, cmd):
        """
        Verify the results when there are multiple networks and one fails
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, 'eth1'] + [False] + [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][1])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'eth1.100')
        self.assertEquals(r[0]['status'], 'Fail')
        self.assertEquals(r[1]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._verify_network_info', return_value=False)
    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_invalid_network_info(self, cmd, net):
        """
        Verify the results when there are multiple networks and one fails
        :param cmd: Handle to mock method _remote_cmd
        :param net: Handle to mock method _verify_network_info
        :return:
        """
        cmd.side_effect = [True, True, 'eth1', True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][0])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'eth1')
        self.assertEquals(r[0]['status'], 'Fail')


class TestRedHatNetConfigBond(TestCase):
    """
    Test cases Redhat bond network configuration type.
    """
    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_incorrect_port_number(self, cmd):
        """
        Failure when there is an incorrect number of ports
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        var['config'][0]['ports'].pop()
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_missing_network_name(self, cmd):
        """
        Failure when a required attribute is missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        del var['config'][0]['name']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_missing_bond_opts(self, cmd):
        """
        Failure when a required attribute is missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        del var['config'][0]['bond_opts']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_master_fail(self, cmd):
        """
        Failure in creating bond master
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True, True, False, True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_slave_port_fail(self, cmd):
        """
        Failure in creating bond master
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 5 + [False] + [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[1]['ports'], var['config'][0]['ports'][0])
        self.assertEquals(r[1]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_network_fail(self, cmd):
        """
        Failure during VLAN network creation
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3 + [False] + [True] * 5

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'bond0.0')
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_network_pass(self, cmd):
        """
        Verify the results on success
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 9

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][2])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'bond0.0')
        self.assertEquals(r[0]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_multi_network_fail(self, cmd):
        """
        Verify the result when there is a failure in one of the networks
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3 + [False] + [True] * 6

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][3])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'bond1.200')
        self.assertEquals(r[0]['status'], 'Fail')
        self.assertEquals(r[1]['ports'], 'bond1.201')
        self.assertEquals(r[1]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_bond_multi_network_pass(self, cmd):
        """
        Verify the results for multiple network success
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 10

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][3])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'bond1.200')
        self.assertEquals(r[0]['status'], 'Pass')
        self.assertEquals(r[1]['ports'], 'bond1.201')
        self.assertEquals(r[1]['status'], 'Pass')


class TestRedHatNetConfigTeam(TestCase):
    """
    Test cases for team network connection type
    """
    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_missing_team_opts(self, cmd):
        """
        Failure when a required attribute is missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        del var['config'][0]['team_opts']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_missing_team_port_cfg(self, cmd):
        """
        Failure when a required attribute is missing
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        del var['config'][0]['team_port_cfg']
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_incorrect_team_port_cfg(self, cmd):
        """
        Failure when there is an incorrect port configuration option
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        var['config'][0]['team_port_cfg'].pop()
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_cfg_master_fail(self, cmd):
        """
        Failure to configure team master
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 2 + [False, True]

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], var['config'][0]['ports'])
        self.assertEquals(r[0]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_cfg_port_fail(self, cmd):
        """
        Failure to configure team port
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 8 + [False] + [True] * 2

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[2]['ports'], var['config'][0]['ports'][1])
        self.assertEquals(r[2]['status'], 'Fail')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_cfg_net_fail(self, cmd):
        """
        Failure to configure team network
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 3 + [False] + [True] * 6

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'team1.200')
        self.assertEquals(r[0]['status'], 'Fail')
        self.assertEquals(r[1]['status'], 'Pass')

    @patch('redhat.RedHatNetConfig._remote_cmd')
    def test_team_cfg_net_pass(self, cmd):
        """
        Failure to configure team network
        :param cmd: Handle to mock method _remote_cmd
        :return:
        """
        cmd.side_effect = [True] * 10

        var = {"host": redhat_host,
               "config": [deepcopy(rhel_conf['config'][4])]}
        r = RedHatNetConfig().configure_network(var)

        self.assertEquals(r[0]['ports'], 'team1.200')
        self.assertEquals(r[0]['status'], 'Pass')
        self.assertEquals(r[1]['ports'], 'team1.201')
        self.assertEquals(r[1]['status'], 'Pass')
