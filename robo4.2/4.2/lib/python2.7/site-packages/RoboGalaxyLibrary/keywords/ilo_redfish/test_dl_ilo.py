#!/usr/bin/env python27
# (C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
Unit tests for DlIloKeywords using python mock
"""
from mock import patch, MagicMock
from unittest import TestCase


class FakeRedfishClient(object):
    """
    Mock object for redfish client
    """
    pass


class TestDlIloKeywords(TestCase):
    """
    Test Suite for DL ILO Keywords
    """
    def setUp(self):
        """
        Test suite environment setup method. Required to mock the redfish client
        :return:
        """
        self.redfish_mock = MagicMock()
        self.redfish_mock.RedfishClient.return_value = FakeRedfishClient
        module = {'redfish_client': self.redfish_mock}
        patch.dict('sys.modules', module).start()
        from dl_ilo import DlIloKeywords
        self.dlkey = DlIloKeywords

    def tearDown(self):
        """
        Test suite teardown method. Stops the mocking of the redfish client.
        :return:
        """
        self.redfish_mock.stop()

    def test_dl_ilo_login_key(self):
        """
        Validates DL Ilo Login keyword - happy path
        :return:
        """
        obj = self.dlkey()
        obj.login(host='192.168.20.10', user='TestAdmin', password='hpvse1')
        self.assertNotEqual(obj.client, None)

    def test_dl_ilo_login_with_sso(self):
        """
        Validate DL ILO Login keyword with token
        :return:
        """
        obj = self.dlkey()
        obj.login(host='192.168.20.10', session_key='DUMMY_ID')
        self.assertNotEqual(obj.client, None)

    def test_power_on_without_login(self):
        """
        Verify DL ILO API Power On Server fails when the login has not occurred
        :return:
        """
        with self.assertRaises(AssertionError) as e:
            obj = self.dlkey()
            obj.set_power_state_on()

        self.assertTrue('iLO login is required' in e.exception)

    @patch('dl_ilo.DlIloKeywords._set_power_state')
    def test_power_on_return_on_failure(self, mock_fn):
        """
        Verify the keyword returns false
        :param mock_fn: Handler to patched method
        :return:
        """
        mock_fn.return_value = False

        obj = self.dlkey()
        obj.login(host='192.168.20.10', user='TestAdmin', password='hpvse1')

        self.assertFalse(obj.set_power_state_on())

    @patch('dl_ilo.DlIloKeywords._set_power_state')
    def test_power_off_return_on_success(self, mock_fn):
        """
        Verify the keyword returns True when it is able
        :param mock_fn:
        :return:
        """
        mock_fn.return_value = True
        obj = self.dlkey()
        obj.login(host='192.168.20.10', user='TestAdmin', password='hpvse1')

        self.assertTrue(obj.set_power_state_off(force=True))
