#!/usr/bin/env python27
# (C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
HPE iLO Subsystem keywords that uses Redfish conformance
"""
from datetime import datetime, timedelta
from functools import wraps
from time import sleep
from robot.api.deco import keyword
from RoboGalaxyLibrary.keywords.ilo_redfish.redfish_client import RedfishClient
from RoboGalaxyLibrary.utilitylib.logging import logger


def ilo_login(func):
    """
    Decorator function that validates the iLO session
    :param func:
    :return:
    """
    @wraps(func)
    def ilo_wrap(self, *args, **kwargs):
        """
        Method that verifies the connection is authenticated
        :param self: The object
        :param args: Linear list of arguments
        :param kwargs: List of key value pairs
        :return: Results of the specified method.
        """
        if self.client is None:
            logger.debug("DEBUG: ILO communication not established.")
            raise AssertionError("iLO login is required")
        return func(self, *args, **kwargs)
    return ilo_wrap


class DlIloKeywords(object):
    """
    Custom keywords for iLO interaction that uses redfish conformance.
    """
    def __init__(self):
        """
        Initializes the object
        """
        self.client = None
        self.ilo_host = None
        self.ilo_user = None
        self.ilo_pass = None
        self.ilo_sso = None

    def __del__(self):
        """
        Object destructor
        :return:
        """
        try:
            self.client.logout()
        except AttributeError:
            pass

        self.client = None
        self.ilo_host = None
        self.ilo_user = None
        self.ilo_pass = None
        self.ilo_sso = None

    @keyword(name="DL ILO API Login")
    def login(self, host, user=None, password=None, session_key=None):
        """
        Establishes a session with the provided iLO sub-system using the
        provided credentials

        Example:
          | DL ILO API Login | 192.168.20.10 | Administrator | iwf01help |

        :param str host: IP or FQDN of the iLO Sub-system
        :param str user: Name of the user known in the iLO realm
        :param str password: Password of the provided user
        :param session_key: Authorization key for supporting Single Sign ON
        :return: None
        """
        self.ilo_host = host
        self.ilo_user = user
        self.ilo_pass = password
        self.ilo_sso = session_key

        try:
            self.client = RedfishClient(host=host, user=user, password=password,
                                        session_key=session_key)
        except:     # no-qa
            logger.debug("Unable to reach {}".format(host))
            raise AssertionError("Failed to establish communication")

    @keyword(name='DL ILO API Logout')
    def logout(self):
        """
        Performs a logout action
        Example:
          | DL ILO API Logout |

        :return:
        """
        self.__del__()

    @ilo_login
    @keyword(name="DL ILO API Reset iLO Manager")
    def reset_ilo(self):
        """
        Performs a reset of the iLO sub-system

        Example:
          | ${r}=   | DL ILO API Reset iLO Manager |

        :return: :bool True on success else False
        """
        uris = self.client.get_resource_uris('Manager.')
        # For rack server, there would only be one item however there are
        # instances where DL's holds multiple managers. One scenario is after
        # running SUT outside of OneView. So iterate through the managers

        for uri in uris:
            if self.client.type_path.defs.isgen9:
                r = self.client.post(uri['@odata.id'], {'Action': 'Reset'})
            else:
                pr = self.client.get(uri['@odata.id'])

                if pr.status == 200:
                    p = pr.dict['Actions']['#Manager.Reset']['target']
                else:
                    _ = "Unable to perform reset at {}".format(uri['@odata.id'])
                    logger.debug(_)
                    continue

                r = self.client.post(p, {'Action': 'Manager.Reset'})

            e = self.client.get_message(r)
            if e.get('error_code') == 'ResetInProgress':
                logger.debug('Sleeping for 90 seconds before verification')
                # Waking up to early results in-complete Resource entries which
                # cause feature not implemented errors.
                sleep(90)
                self.login(self.ilo_host, self.ilo_user, self.ilo_pass,
                           self.ilo_sso)
                return True

        return False

    def _set_power_state(self, state):
        """
        Applies the requested power state on the system.
        :param str state: Supported values are On, ForceOff, ForceRestart,
                          PushPowerButton
        :return: :bool True on success else False
        """
        uri = self.client.get_resource_uris('ComputerSystem.')[0]
        # For Rack server, there would ideally be only one item.

        if self.client.type_path.defs.isgen9:
            r = self.client.post(uri['@odata.id'], {'Action': 'Reset',
                                                    'ResetType': state})
        else:
            pr = self.client.get(uri['@odata.id'])

            if pr.status == 200:
                p = pr.dict['Actions']['#ComputerSystem.Reset']['target']
            else:
                _ = 'Unable to gather resource path to perform {}'.format(state)
                logger.debug(_)
                return False

            r = self.client.post(p, {'Action': 'ComputerSystem.Reset',
                                     'ResetType': state})

        e = self.client.get_message(r)
        if e.get('error_code') == 'Success':
            return True
        elif e.get('error_code') == 'InvalidOperationForSystemState':
            # System was in the requested state hence passing it
            logger.info(e.get('error_info'))
            return True

        return False

    @ilo_login
    @keyword(name='DL ILO API Power Off Server')
    def set_power_state_off(self, force=False):
        """
        Powers of the system gracefully by default. If force is enabled then the
        system is powered down without waiting for the OS to shutdown.

        Example:
          | ${r}=   | DL ILO API Power Off Server | force=${True} |
          | ${r}=   | DL ILO API Power Off Server |

        :param bool force: True for forcible else False
        :return bool: True on success else False
        """
        return self._set_power_state('ForceOff' if force else 'PushPowerButton')

    @ilo_login
    @keyword(name='DL ILO API Power On Server')
    def set_power_state_on(self):
        """
        Power's on the system.

        Example:
          | ${r}=   | DL ILO API Power On Server |

        :return: True on success else False
        """
        return self._set_power_state('On')

    @ilo_login
    @keyword(name='DL ILO API Reset Server')
    def force_reset_server(self):
        """
        Performs a forceful reset of the system.

        Example:
          | ${r}=   | DL ILO API Reset Server |

        :return: True on success else failure
        """
        return self._set_power_state('ForceRestart')

    @ilo_login
    @keyword(name='DL ILO API Get Power State')
    def get_power_state_server(self):
        """
        Retrieves the power status of the system

        Example:
          | ${pwr}=     | DL ILO API Get Power State |

        :return str:  On | Off | Unknown | Reset
        """
        uri = self.client.get_resource_uris('ComputerSystem.')[0]
        r = self.client.get(uri['@odata.id'])

        if r.status != 200:
            logger.debug("Unable to retrieve the power state.")
            return 'Unknown'

        return r.dict['PowerState']

    @ilo_login
    @keyword(name='DL ILO API Get Post State')
    def get_post_state_server(self):
        """
        Retrieves the Post state of the system

        Example:
          | ${state}=   | DL ILO API Get Post State

        :return str:  Unknown | Reset | PowerOff | InPost | FinishedPost | \
                      InPostDiscoveryComplete
        """
        uri = self.client.get_resource_uris('ComputerSystem.')[0]
        r = self.client.get(uri['@odata.id'])

        if r.status != 200:
            logger.debug("Unable to retrieve the Post State of the server.")
            return 'Unknown'

        if self.client.type_path.defs.isgen9:
            return r.dict['Oem']['Hp']['PostState']
        else:
            return r.dict['Oem']['Hpe']['PostState']

    @ilo_login
    @keyword(name='DL ILO API Return After POST Complete')
    def wait_till_finished_post(self, timeout=20, poll=10):
        """
        Waits till the system has completed Post Discovery stage and is
        booting the OS or searching for boot loader. Useful in cases where the
        manager is applying settings and rebooting

        Example:
          | ${r}=   | DL ILO API Return After POST Complete | <min> | <sec>

        :param int timeout: Timeout value in minutes
        :param int poll: Polling interval in seconds
        :return: True when POST is completed within time frame else False
        """
        if self.get_power_state_server() == 'Off':
            self.set_power_state_on()

        timeout = datetime.now() + timedelta(minutes=timeout)
        while timeout > datetime.now():
            logger.debug("Sleeping for {} seconds before poll".format(poll))
            sleep(poll)

            s = self.get_post_state_server()
            if s == 'InPostDiscoveryComplete' or s == 'FinishedPost':
                # System manager will request for a server reboot after this
                # stage when there pending settings to be applied so sleep and
                # if state is the same break
                sleep(3)
                rs = self.get_post_state_server()
                if rs == 'InPostDiscoveryComplete' or rs == 'FinishedPost':
                    return True

        logger.debug("Timeout: System has not completed POST")
        return False
