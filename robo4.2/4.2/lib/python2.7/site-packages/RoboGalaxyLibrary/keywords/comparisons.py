'''
Keywords to support comparison of data structures

'''

from RoboGalaxyLibrary.api.common import resource_dict
from RoboGalaxyLibrary.utilitylib import logging as logger


class ComparisonKeywords(object):

    def __init__(self):
        pass

    def make_complete_dictionary(self, type, objectFromRest, customProps):
        return resource_dict.make_complete_dictionary(
            type,
            objectFromRest,
            customProps)

    def get_nodes_iterability_and_top_level_identicality(self, observed, expected):
        """ Analyzes two nodes, passed in as arguments; each node should come from a different JSON object.
        One JSON object could be the observed output and the other could be the foundation of truth.
        If the arguments are iterable objects (lists or dicts), a status will be indicated
        so that the "Find Children In Dictionary" keyword can continue running recursively.
        If the arguments are literal, Nones, etc., that status will be indicated, as well as
        other output indicating if they are in fact equal.

        Example:
        | ${Result} | Find Children Or Compare Nodes | ${observedOutput} | ${foundationOfTruth} |
        """

        retObj = {"iterable": False, "identical": False}
        if isinstance(observed, dict) or isinstance(observed, list):
            retObj["iterable"] = True
            # Find out if the two items passed in are actually the same type of item (list or dict)
            if (isinstance(observed, dict) == isinstance(expected, dict)) and (isinstance(observed, list) == isinstance(expected, list)):
                retObj["identical"] = True
        else:
            retObj["identical"] = (observed == expected)
        return retObj
