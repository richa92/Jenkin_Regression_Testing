# pylint: disable=F0401
"""Native keywords for Windows

This module contains Windows specific RoboGalaxy keywords.
"""
import subprocess
import unittest

from robot.libraries.BuiltIn import BuiltIn
from RoboGalaxyLibrary.utilitylib import logging as logger
from RoboGalaxyLibrary.ui.common.ui_lib import ScreenshotDeco
import sys
if "win" in sys.platform:
    import autoit


class NativeOsKeywords(object):

    """ This class contains all keywords that are native to the Windows OS
    """
    # https://www.autoitscript.com/site/autoit/
    ROBOT_LIBRARY_SCOPE = 'Global'

    @ScreenshotDeco
    def send_keys_to_native_window(self, window_name, string):
        """ Send one or more keystrokes to the active window as if they were typed at the keyboard.
            This method is similar to the VB SendKeys method.
            Key          SendKey Equivalent    Description
            ~            {~}                   Send a tilde (~)
            !            {!}                   Send an exclamation point (!)
            ^            {^}                   Send a caret (^)
            +            {+}                   Send a plus sign (+)
            Alt          {ALT}                 Send an Alt keystroke
            Backspace    {BACKSPACE}           Send a Backspace keystroke
            Clear        {CLEAR}               Slear the field
            Delete       {DELETE}              Send a Delete keystroke
            Down Arrow   {DOWN}                Send a Down Arrow keystroke
            End          {END}                 Send an End keystroke
            Enter        {ENTER}               Send an Enter keystroke
            Escape       {ESCAPE}              Send an Esc keystroke
            F1 through F16    {F1} through {F16}   Send the appropriate Function key
            Page Down    {PGDN}                Send a Page Down keystroke
            Space        {SPACE}               Send a Spacebar keystroke
            Tab          {TAB}                 Send a Tab keystroke

            For SHIFT prefix with +
            For CTRL  prefix with ^
            For ALT   prefix with %
            Example:
                | Send Keys to Window | Notepad | This is a test |
        """
        # The activate_window method tries to activate an application whose title is the nearest match to strApplicationTitle.
        # https://www.autoitscript.com/autoit3/docs/functions/Send.htm
        logger.debug("Focusing native window '{0}'".format(window_name))
        self.activate_window(window_name)
        logger.debug("Sending keys to native window: '{0}'".format(string))
        autoit.send(string)

    @ScreenshotDeco
    def left_click_native(self, window_name, x, y):
        """ Click the left mouse button on a screen location
            Example:
            | Left Click Native | 320 | 240 |
        """
        logger.debug("Setting native cursor position to {0},{1}".format(x, y))
        logger.debug("Clicking left button")
        left, top, right, bottom = autoit.win_get_pos(window_name)
        autoit.mouse_move(left + x, top + y)
        autoit.mouse_click(x=left + x, y=top + y)

    @ScreenshotDeco
    def right_click_native(self, window_name, x, y):
        """ Click the left mouse button on a screen location
            Example:
            | Left Click Native | 320 | 240 |
        """
        logger.debug("Setting native cursor position to {0},{1}".format(x, y))
        logger.debug("Clicking right button")
        left, top, right, bottom = autoit.win_get_pos(window_name)
        autoit.mouse_move(left + x, top + y)
        autoit.mouse_click(button="right", x=left + x, y=top + y)

    @ScreenshotDeco
    def focus_native_window(self, window_name):
        """ Bring the native window into focus
            Examples:
            | Focus Native Window | Notepad |
        """
        self.activate_window(window_name)

    @ScreenshotDeco
    def get_current_native_window_focus(self):
        """ Return a handle of the foreground window
            Example:
            | Get Current Native Window Focus |
        """
        return autoit.win_get_handle("")

    @ScreenshotDeco
    def get_current_native_window_name(self):
        """ Return the name of the currently active window
            Examples:
            | Get Current Native Window Name |
        """
        hwnd = self.get_current_native_window_focus()
        return autoit.win_get_title_by_handle(hwnd)

    @ScreenshotDeco
    def find_native_window(self, window_name, timeout=5):
        """ Wait for a native window to become visible
            Example:
            | Wait for Native Window | Calculator |
        """
        logger.debug("Waiting {0}s for native window '{1}'".format(timeout, window_name))
        try:
            autoit.win_wait(window_name, timeout)
        except autoit.AutoItError:
            logger.warn("Can't find native window!")
            return None
        hwnd = autoit.win_get_handle(window_name)
        logger.debug("Found native window '{0}'. Handle is {1}".format(window_name, hwnd))
        return hwnd

    @ScreenshotDeco
    def native_window_should_exist(self, window_name):
        """ Ensure a window exists
            Example:
            | Native Window Should Exist | Calculator |
        """
        # since wait_for_native_window raises an exception, we call it here
        if self.find_native_window(window_name) is None:
            raise AssertionError("Window '{0}' should exist but it does not".format(window_name))

    @ScreenshotDeco
    def native_window_should_not_exist(self, window_name):
        """ Ensure a window exists
            Example:
            | Native Window Should Exist | Calculator |
        """
        # since wait_for_native_window raises an exception, we call it here
        if self.find_native_window(window_name) is not None:
            raise AssertionError("Window '{0}' should not exist but it does".format(window_name))

    @ScreenshotDeco
    def activate_window(self, window_name):
        """ Activate a window
            Example:
            | Activate Window | Calculator |
        """
        autoit.win_activate(window_name)

    @ScreenshotDeco
    def input_text(self, window_name, control_name, text):
        """ Input Text
            Example:
            | Input Text | Notepad | Edit1 | Text |
        """
        autoit.control_set_text(window_name, control_name, text)

    @ScreenshotDeco
    def click_button(self, window_name, button_name):
        """ Click a Button
            Example:
            | Click Button | Calculator | Button1 |
        """
        autoit.control_click(window_name, button_name)

    @ScreenshotDeco
    def wait_window_close(self, window_name, timeout=30):
        """ Wait a window closed
            Example:
            | Wait Window Close | Calculator |
        """
        autoit.win_wait_close(window_name, timeout)


class PosixNativeTest(unittest.TestCase):

    def test_find_native_window(self):
        logger.debug("test_find_native_window - opening calculator")
        proc = subprocess.Popen('calc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        win = NativeOsKeywords().find_native_window('Calculator')
        self.assertIsNotNone(win)
        BuiltIn().sleep(2)
        proc.kill()
        BuiltIn().sleep(2)

    def test_send_keys_to_native_window(self):
        native = NativeOsKeywords()
        logger.debug("test_send_keys_to_native_window - opening calculator")
        subprocess.Popen('calc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        current_window = native.get_current_native_window_name()
        native.send_keys_to_native_window("Calculator", "123")
        native.send_keys_to_native_window("Calculator", "{+}")
        native.send_keys_to_native_window("Calculator", "456")
        native.send_keys_to_native_window("Calculator", "=")
        BuiltIn().sleep(2)
        native.send_keys_to_native_window("Calculator", "%{F4}")
        native.focus_native_window(current_window)
        BuiltIn().sleep(2)

    def test_left_click_native(self):
        native = NativeOsKeywords()
        logger.debug("test_left_click_native - opening calculator")
        subprocess.Popen('calc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        native.find_native_window('Calculator')
        native.left_click_native('Calculator', 198, 12)
        BuiltIn().sleep(2)
        native.native_window_should_not_exist('Calculator')

    def test_focus_native_window(self):
        native = NativeOsKeywords()
        root_hwnd = native.get_current_native_window_focus()
        root_name = native.get_current_native_window_name()
        logger.debug("test_focus_native_window - opening calculator")
        proc = subprocess.Popen('calc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        self.assertNotEqual(root_hwnd, native.get_current_native_window_focus(), "Original window is still focused")
        win = native.find_native_window('Calculator')
        self.assertIsNotNone(win, 'Failed to find calculator window')
        self.assertNotEqual(0, win, 'Failed to find calculator window')
        native.focus_native_window('Calculator')
        new_win = native.get_current_native_window_focus()
        self.assertNotEqual(root_hwnd, new_win, "Failed to focus calculator")
        native.focus_native_window(root_name)
        self.assertEqual(root_hwnd, native.get_current_native_window_focus(), "Failed to focus root window")
        proc.kill()
        BuiltIn().sleep(2)
        try:
            native.focus_native_window('Calculator')
        except autoit.AutoItError:
            logger.debug("window closed as expected")

    def test_native_window_should_functions(self):
        native = NativeOsKeywords()
        logger.debug("test_native_window_should_functions - opening calculator")
        proc = subprocess.Popen('calc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        native.native_window_should_exist('Calculator')
        proc.kill()
        BuiltIn().sleep(2)
        native.native_window_should_not_exist('Calculator')

if __name__ == '__main__':
    unittest.main()
