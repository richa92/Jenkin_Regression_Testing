"""
toxiproxy.py

robotframework accessible keywords to install/start/configure toxiproxy on an Atlas based appliance

(C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
from functools import wraps
import json
import re
import requests
from requests.adapters import HTTPAdapter
from RoboGalaxyLibrary.common import exceptions
from robot.api.deco import keyword
from SSHLibrary import SSHLibrary
from time import sleep


def connected(decorated):
    """
    Decorator which ensures that the http session is connected before running a method
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        if self._host is None:
            raise exceptions.NonFatalError('No HTTP session to ToxiProxy host\port.  Need to issue Connect first!')
        return decorated(self, *args, **kwargs)
    return wrapper


def http_request_should_succeed(decorated):
    """
    Decorator which ensures that the http request to toxiproxy was 'successful', otherwise it raises an exception.

    :param decorated:
    :return:
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        resp = decorated(self, *args, **kwargs)
        if resp.status_code not in [200, 201, 202, 203, 204]:
            raise exceptions.NonFatalError('HTTP request was not successful. {}'.format(resp.status_code))
        return resp
    return wrapper


def ssh_request_should_succeed(decorated):
    """
    Decorator which ensures that the ssh request does not contain any failure strings in the output,
    throws NonFatalError if failure signatures are found.

    :param decorated:
    :return:
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        output = decorated(self, *args, **kwargs)
        failures = re.compile('(?i)error|fail')
        if failures.search(output):
            raise exceptions.NonFatalError('SSH command(s) failed. {}'.format(output))
    return wrapper


class ToxiProxyLibraryKeywords(object):
    """
    The ToxiProxy HTTP API keywords.   See: https://github.com/Shopify/toxiproxy#http-api
    """

    def __init__(self):
        self._http = requests.Session()
        self._http.mount('http://', HTTPAdapter(max_retries=3))
        self._host = ""
        self._port = ""

    @staticmethod
    def _create_ssh_connection_and_login(host, username='root', password='hpvse1'):
        try:
            ssh = SSHLibrary()
            ssh.set_default_configuration(timeout='30 seconds')
            ssh.open_connection(host)
            ssh.login(username, password)
            return ssh
        except:
            raise AssertionError("Failed to successfully login via ssh to %s" % host)

    @staticmethod
    @ssh_request_should_succeed
    def _run_ssh_commands(ssh, cmds, sleep_time=10):
        try:
            output = ssh.read_until('#')
            resp = ssh.write(cmds)
            sleep(sleep_time)  # give the cmds time to run
            output = ssh.read_until('#')
            return output
        except:
            raise AssertionError("ERROR: %s" % output)
        finally:
            ssh.close_all_connections()

    @keyword(name="ToxiProxy build proxy json")
    def tp_mk_proxy_json(self, **kwargs):
        """
        Builds json request body for creating a proxy.
        NOTE: The tpwebserver code was customized and requires 'transport' be specified.

        :param kwargs: Any key\value pair\n
        :return: json\n

        Examples:
        | ${pxy} = | ToxiProxy build proxy json | name=${proxy}    |
        | ...      |                            | enabled=${False} |

        """
        pxy = {'name': kwargs.get('name', None),
               'listen': kwargs.get('listen', None),
               'upstream': kwargs.get('upstream', None),
               'enabled': kwargs.get('enabled', True),
               'transport': kwargs.get('transport', 'tcp'),  # custom REQUIRED field
               'toxics': kwargs.get('toxics', [])
               }
        for key in kwargs:
            if key not in pxy:
                pxy[key] = kwargs[key]
        return json.dumps(pxy)

    @keyword(name="ToxiProxy build toxic json")
    def tp_mk_toxic_json(self, **kwargs):
        """
        Builds json request body for creating a toxic.

        :param kwargs: Any key\value pair\n
        :return: json\n

        Examples:
        | ${tx} = | ToxiProxy build toxic json | name=${toxic}    |
        | ...     |                            | type='latency'   |

        """
        tx = {'name': kwargs.get('name', None),
              'type': kwargs.get('type', None),
              'stream': kwargs.get('stream', None),
              'toxicity': kwargs.get('toxicity', 1.0),
              'attributes': kwargs.get('attributes', {})
              }
        for key in kwargs:
            if key not in tx:
                tx[key] = kwargs[key]
        return json.dumps(tx)

    @keyword(name="ToxiProxy build toxic attributes")
    def tp_mk_tx_attrs(self, **kwargs):
        """
        Builds the toxic 'attributes' dict for creating a toxic's attributes.
        Use in conjuction with ToxiProxy build toxic json

        :param kwargs: Any key\value pair\n
        :return: dict\n

        Examples:
        | ${at} = | ToxiProxy build toxic attributes | latency=10       |
        | ${tx} = | ToxiProxy build toxic json       | name=${toxic}    |
        | ...     |                                  | type='latency'   |
        | ...     |                                  | attributes=${at} |
        """
        ats = {'latency': kwargs.get('latency', 0),
               'jitter': kwargs.get('jitter', 0),
               'rate': kwargs.get('rate', 0),
               'delay': kwargs.get('delay', 0),
               'timeout': kwargs.get('timeout', 0),
               'average_size': kwargs.get('average_size', None),
               'size_variation': kwargs.get('size_variation', None),
               'bytes': kwargs.get('bytes', None)}
        for key in kwargs:
            if key not in ats:
                ats[key] = kwargs[key]
        return ats

    @keyword(name="ToxiProxy install on appliance")
    def toxiproxy_install(self, host, username='root', password='hpvse1'):
        """
        Connect to an appliance and run installation of toxiproxy.
        The binaries and installation shell script are located on github, here:
        https://github.hpe.com/OneView-TestTools/

        The build version can be changed below via VER.

        After the zip file is retrieved on the appliance, it is decompressed and
        the installation shell script is run.  The shell script simply copies 2
        binaries to /usr/local/bin, makes them executable and makes symlinks.

        :param host: *REQUIRED* - The ipv4\ipv6\fqdn of the appliance\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        |  toxiproxy install on appliance | 10.15.14.3 |
        """

        cmds = """VER='0.1'
TP='toxi-proxy'
export http_proxy=web-proxy.corp.hpecorp.net:8088
export https_proxy=web-proxy.corp.hpecorp.net:8088
wget -qO- -O tp.zip https://github.hpe.com/oneview-test-tools/$TP/archive/v$VER.zip &&
unzip tp.zip &&
cd $TP-$VER &&
chmod +x ./*.sh &&
cp *.sh ../ &&
./install_toxiproxy.sh
"""
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy remove iptables files on appliance")
    def toxiproxy_remove_iptables_files(self, host, username='root', password='hpvse1'):
        """
        Connect to an appliance and remove any iptables files generated for toxiproxy, then applies the settings.

        :param host: *REQUIRED* - The ipv4\ipv6\fqdn of the appliance\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        |  toxiproxy remove iptables files on appliance | 10.15.14.3 |
        """

        cmds = """rm -rf /ci/etc/iptables.d/31toxiproxy* && /ci/bin/apply-iptables"""
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy start webserver on appliance and open firewall port")
    def toxiproxy_start(self, host, port="8474", username='root', password='hpvse1'):
        """
        Connects to an appliance and starts the toxiproxy webserver to listen on the specified port.

        :param host: *REQUIRED* - The ipv4\ipv6\fqdn of the appliance\n
        :param port:  The tcp port that the ToxiProxy webserver is listening on. Defaults to 8474\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        |  ToxiProxy start webserver on appliance and open firewall port | 15.245.132.42 | 17988 |
        """

        cmds = """./create_toxiproxy_webserver_iptable_file.sh {} &&
/ci/bin/apply-iptables &&
nohup tpwebserver -host {} -port {} &""".format(port, host, port)
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy stop webserver on appliance")
    def toxiproxy_stop(self, host, username='root', password='hpvse1'):
        """
        Connect to an appliance and pkill all 'tpwebserver' processes.

        :param host: *REQUIRED* - The ipv4\ipv6\fqdn of the appliance\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        |  toxiproxy stop on appliance | 10.15.14.3 |
        """

        cmds = """pkill tpwebserver"""
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy add iptable file for managed device testing")
    def toxiproxy_add_ip_table_file(self, host, ov_ip, device_ip, tpx_ip, port, username='root', password='hpvse1'):
        """
        Connects to an appliance and adds a file to /ci/etc/iptables.d to handle traffic for the given device\port

        :param host:      *REQUIRED* - The ipv4\ipv6\fqdn of the appliance\n
        :param ov_ip:     *REQUIRED* - The ipv4\ipv6 of the appliance's primary mgmt ip\n
        :param device_ip: *REQUIRED* - The ipv4\ipv6 of the managed device\n
        :param tpx_ip:    *REQUIRED* - The dedicated IP added to the appliance for toxiproxy traffic\n
        :param port:      *REQUIRED* - The dedicated tcp port used for this managed device\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        | toxiproxy add IP to appliance for managed device testing | ${appliance} | ${tpx_ip} | 21 | |
        | toxiproxy add iptable file for managed device testing    | ${appliance} | ${ov_ip} | ${device} | ${tpx_ip} | 6001 |
        """

        cmds = """./create_iptable_file.sh {} {} {} {}""".format(ov_ip, device_ip, tpx_ip, port)
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy update listen.conf on appliance for RM to RM testing")
    def toxiproxy_rm_to_rm(self, host, port="8080", username='root', password='hpvse1'):
        """
        For RM-RM toxin injection testing. Connects to an appliance and rewrites the listen.conf file,
        then restarts httpd. This script will change the default port for HTTP traffic for OV from 80 to the
        given port, or to 8080 if no port is given. Then, it restarts Apache.

        Note: You can revert changes to the listen.conf by passing port=80
        Note: HTTPS (443) port is unaffected

        :param host: *REQUIRED* The ipv4\ipv6\fqdn of the appliance\n
        :param port:  the tcp port that the you want HTTP traffic to listen on. Defaults to port 8080.\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        |  toxiproxy update listen.conf on appliance for RM to RM testing | ${appliance} | 8081 |
        """

        cmds = """./update_listen.conf.sh {}""".format(port)
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy add IP to appliance for managed device testing")
    def toxiproxy_add_tp_ip(self, host, ip, cidr, username='root', password='hpvse1'):
        """
        For managed device toxin injection testing. Connects to an appliance and adds a new IP address to the
        management interface (eth0\bond0)

        :param host: *REQUIRED* The ipv4\ipv6\fqdn of the appliance\n
        :param ip:   *REQUIRED* The new ipv4\ipv6 address to assign to the mgmt interface\n
        :param cidr: *REQUIRED* The CIDR notation netmask value for the new IP\n
        :param username:  The user used to log in to the appliance via SSH\n
        :param password:  The password of the SSH user\n

        Example:
        | toxiproxy add IP to appliance for managed device testing | ${appliance} | 15.245.132.254 | 21 |



        """

        cmds = """./add_ip_for_tp.sh {} {}""".format(ip, cidr)
        ssh = self._create_ssh_connection_and_login(host, username, password)
        output = self._run_ssh_commands(ssh, cmds)
        return output

    @keyword(name="ToxiProxy connect")
    def tp_connect(self, host, port="8474"):
        """
        Sets the host and port of the ToxiProxy webserver for all future requests.
        *MUST* be called once before all other TP keywords!

        :param host:  *REQUIRED* The ipv4\ipv6\fqdn of the appliance\n
        :param port:  the tcp port that the ToxiProxy web server is listening on. Defaults to port 8474.\n

        Example:
        | ${resp} = |   Toxiproxy connect  |  15.245.132.42  |  17988 |


        """
        self._host = host
        self._port = port

    @connected
    @http_request_should_succeed
    def tp_delete(self, uri):
        """
        Generic Toxiproxy DELETE method

        :param uri:  The uri to delete

        Example:
        | ${resp} = | tp_delete | /proxy/myproxy |


        """
        return self._http.delete("http://{}:{}{}".format(self._host, self._port, uri))

    @connected
    @http_request_should_succeed
    def tp_get(self, uri=""):
        """
        Generic Toxiproxy GET method

        :param uri:  The uri to get

        Example:
        | ${resp} = | tp_get | /proxy/myproxy |


        """
        return self._http.get("http://{}:{}{}".format(self._host, self._port, uri))

    @connected
    @http_request_should_succeed
    def tp_post(self, uri, data):
        """
        Generic Toxiproxy POST method

        :param uri:  The uri to POST to
        :param data:  The json request body to POST

        Example:
        | ${resp} = | tp_post | /proxy/myproxy | ${data} |


        """
        return self._http.post("http://{}:{}{}".format(self._host, self._port, uri), data=data)

    @connected
    @keyword(name="ToxiProxy get version")
    def tp_version(self):
        """
        Gets the version of Toxiproxy

        Example:
        | ${resp} = |   Toxiproxy connect  |  15.245.132.42 |
        | ${ver} =  |   Toxiproxy get version | |
        """
        return self.tp_get(uri="/version")

    @connected
    @keyword(name="ToxiProxy list existing proxies and their toxics")
    def tp_list_all(self):
        """
        Lists existing proxies and their toxics

        Example:
        | ${resp} =  |   Toxiproxy connect  |  15.245.132.42 |
        | ${tp} =    |   ToxiProxy list existing proxies and their toxics| |
        """
        return self.tp_get(uri="/proxies").content

    @connected
    @keyword(name="ToxiProxy create a new proxy")
    def tp_create_proxy(self, data):
        """
        Creates a new proxy

        :param data:  The json proxy request body

        Example:
        | ${resp} = |   Toxiproxy connect  |  15.245.132.42 |
        | ${tp} =   |   ToxiProxy create a new proxy  | ${data} |
        """
        return self.tp_post(uri="/proxies", data=data)

    @connected
    @keyword(name="ToxiProxy create or replace a list of proxies")
    def tp_create_list_of_proxies(self, data):
        """
        Creates or updates a LIST of proxies

        :param data:  The json proxy request body. Should be a list

        Example:
        | ${resp} =   | Toxiproxy connect  |  15.245.132.42 |
        | ${tp} =     | ToxiProxy create or replace a list of proxies | ${data} |
        """
        return self.tp_post(uri="/populate", data=data)

    @connected
    @keyword(name="ToxiProxy show the proxy with all its active toxics")
    def tp_list_proxy(self, proxy):
        """
        Lists a proxy with all its active toxics

        :param proxy:  The name of the proxy to list

        Example:
        | ${resp} =  |  Toxiproxy connect   | 15.245.132.42 |
        | ${tp} =    |  ToxiProxy show the proxy with all its active toxics  | ${proxy} |
        """
        return self.tp_get(uri="/proxies/{}".format(proxy))

    @connected
    @keyword(name="ToxiProxy update a proxy")
    def tp_update_proxy(self, proxy, data):
        """
        Updates an existing proxy

        :param proxy:  The name of the proxy to update
        :param data:  The json proxy request body

        Example:
        | ${resp} =   | Toxiproxy connect  |  15.245.132.42 | |
        | ${tp} =     | ToxiProxy update a proxy  | ${proxy}  | ${data} |
        """
        return self.tp_post(uri="/proxies/{}".format(proxy), data=data)

    @connected
    @keyword(name="ToxiProxy delete an existing proxy")
    def tp_delete_proxy(self, proxy):
        """
        Deletes an existing proxy

        :param proxy:  The name of the proxy to delete

        Example:
        | ${resp} =  |  Toxiproxy connect  |  15.245.132.42 |
        | ${tp} =    |  ToxiProxy delete an existing proxy | ${proxy} |
        """
        return self.tp_delete(uri="/proxies/{}".format(proxy))

    @connected
    @keyword(name="ToxiProxy list active toxics")
    def tp_list_active_toxics(self, proxy):
        """
        Lists active toxics for a given proxy

        :param proxy:  The name of the proxy to list toxics for

        Example:
        | ${resp} =  |  Toxiproxy connect   | 15.245.132.42 |
        | ${tp} =    |  ToxiProxy list active toxics | ${proxy} |
        """
        return self.tp_get(uri="/proxies/{}/toxics".format(proxy))

    @connected
    @keyword(name="ToxiProxy create a new toxic")
    def tp_create_toxic(self, proxy, data):
        """
        Creates a new toxic for a given proxy

        :param proxy:  The name of the proxy to create a toxic for
        :param data:  The json toxic request body

        Example:
        | ${resp} =  |  Toxiproxy connect  |  15.245.132.42 | |
        | ${tp} =    |  ToxiProxy create a new toxic | ${proxy} | ${data} |
        """
        return self.tp_post(uri="/proxies/{}/toxics".format(proxy), data=data)

    @connected
    @keyword(name="ToxiProxy get active toxic fields")
    def tp_list_toxic_data(self, proxy, toxic):
        """
        Lists an active toxic's fields

        :param proxy:  The name of the parent proxy
        :param toxic:  The name of the toxic to list

        Example:
        | ${resp} =  |  Toxiproxy connect  |  15.245.132.42 | |
        | ${tp} =    |  ToxiProxy get active toxic fields | ${proxy} | ${toxic} |
        """
        return self.tp_get(uri="/proxies/{}/toxics/{}".format(proxy, toxic))

    @connected
    @keyword(name="ToxiProxy update an active toxic")
    def tp_update_toxic(self, proxy, toxic, data):
        """
        Updates an active toxic's fields

        :param proxy:  The name of the parent proxy
        :param toxic:  The name of the toxic to update
        :param data:  The json toxic request body

        Example:
        | ${resp} =   | Toxiproxy connect  |  15.245.132.42 | | |
        | ${tp} =     | ToxiProxy update an active toxic | ${proxy} | ${toxic} | ${data} |
        """
        return self.tp_post(uri="/proxies/{}/toxics/{}".format(proxy, toxic), data=data)

    @connected
    @keyword(name="ToxiProxy remove an active toxic")
    def tp_delete_toxic(self, proxy, toxic):
        """
        Removes an active toxic

        :param proxy:  The name of the parent proxy
        :param toxic:  The name of the toxic to remove

        Example:
        | ${resp} =   | Toxiproxy connect  |  15.245.132.42 | |
        | ${tp} =     | ToxiProxy remove an active toxic | ${proxy} | ${toxic} |
        """
        return self.tp_delete(uri="/proxies/{}/toxics/{}".format(proxy, toxic))

    @connected
    @keyword(name="ToxiProxy enable all proxies and remove all active toxics")
    def tp_reset(self, data):
        """
        Enables all proxies and removes all active toxics

        :param data:  json

        Example:
        | ${resp} =   | Toxiproxy connect  |  15.245.132.42 |
        | ${tp} =     | ToxiProxy enable all proxies and remove all active toxics | ${data} |
        """
        return self.tp_post(uri="/reset", data=data)
