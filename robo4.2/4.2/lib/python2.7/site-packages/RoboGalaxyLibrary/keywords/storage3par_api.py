"""
3PAR storage system keywords
Please see https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
for optional parameters to keywords.

(C) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
"""
import robot.utils.asserts as asserts
import unittest
import urllib3
from hpe3parclient import client, exceptions
from functools import wraps
from RoboGalaxyLibrary.utilitylib import logging as logger

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def connected(decorated):
    """
    Decorator which ensures that the 3PAR is connected before running a method
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        if self.client is None:
            raise AssertionError('Not logged into 3PAR system')
        return decorated(self, *args, **kwargs)
    return wrapper


class Storage3PARLibraryKeywords(object):

    """
    The 3PAR API keywords
    """

    def __init__(self):
        self.client = None

    def _get_members(self, data):
        """
        Helper function to return an empty list if the 'members' element
        isn't found in the dict
        :param data: a dictionary that may or may not have a 'members' element
        :return: list
        """
        return [] if 'members' not in data is None else data['members']

    def storage3par_open_connection(self, storage_system, username, password, port=8080, optional=None):
        """
        Open a connection to the 3PAR system
        Example:
        | Open Connection | 10.0.0.1 | user | password  |
        """

        self.client = client.HPE3ParClient('https://{}:{}/api/v1'.format(storage_system, port), suppress_ssl_warnings=True)
        self.client.login(username, password, optional)

    @connected
    def storage3par_close_connection(self):
        """
        Close the existing connection
        Example:
             | Close Connection |
        """
        self.client.logout()
        self.client = None

    ##########################################################################
    # Host methods
    ##########################################################################
    @connected
    def storage3par_get_hosts(self):
        """
        Return a list of the 3PAR hosts
        Example:
        | Storage3PAR Get Hosts |
        """
        return [v.get('name') for v in self._get_members(self.client.getHosts())]

    @connected
    def storage3par_get_host(self, name):
        """
        Return a single 3PAR host
        Example:
        | Storage3PAR Get Host | name |
        """
        try:
            return self.client.getHost(name)
        except exceptions.HTTPNotFound:
            return None

    @connected
    def storage3par_host_should_exist(self, name):
        """
        Ensure a host exists
        Example:
        | Storage3PAR Host Should Exist | name |
        """
        if self.storage3par_get_host(name) is None:
            raise AssertionError('3PAR host "{}" not found'.format(name))

    @connected
    def storage3par_create_host(self, name, iscsi_names=None, fc_wwns=None, optional=None, strict=False):
        """
        Create a Host
        Note - passing strict=True will raise an exception if the host exists
        See createHost in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        Example:
             | Storage3PAR Create Host | name |
        """
        try:
            self.client.createHost(name, iscsiNames=iscsi_names, FCWwns=fc_wwns, optional=optional)
        except exceptions.HTTPConflict as ex:
            if strict:
                raise ex
            else:
                logger.warn(ex)
        if strict:
            asserts.assert_true(self.client.getHost(name), 'Failed to create 3PAR host "{}"'.format(name))

    @connected
    def storage3par_delete_host(self, name, strict=False):
        """
        Delete a Host
        Note - passing strict=True will raise an exception if the host exists
        Example:
             | Storage3PAR Delete Host | name |
        """
        try:
            self.client.deleteHost(name)
        except exceptions.HTTPNotFound as ex:
            if strict:
                raise ex
            else:
                logger.info(ex)

    ##########################################################################
    # CPG methods
    ##########################################################################
    @connected
    def storage3par_cpg_should_exist(self, name):
        """
        Ensure a CPG exists
        Example:
             | Storage3PAR CPG Should Exist | mycpg |
        """
        if self.storage3par_get_cpg(name) is None:
            raise AssertionError('3PAR CPG "{}" not found'.format(name))

    @connected
    def storage3par_get_cpgs(self):
        """
        Get a list of the CPG names
        Example:
             | Storage3PAR Get CPGs |
        """
        return [cpg['name'] for cpg in self._get_members(self.client.getCPGs())]

    @connected
    def storage3par_get_cpg(self, name):
        """
        Get a CPG
        Example:
             | Storage3PAR Get CPG | name |
        """
        try:
            return self.client.getCPG(name)
        except exceptions.HTTPNotFound:
            return None

    @connected
    def storage3par_create_cpg(self, name, optional=None, strict=False):
        """
        Create a CPG
        Note - passing strict=True will raise an exception if the CPG exists
        See createCPG in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        Example:
             | Storage3PAR Create CPG | name |
        """
        try:
            self.client.createCPG(name=name, optional=optional)
        except exceptions.HTTPConflict as ex:
            if strict:
                raise ex
            else:
                logger.warn(ex)

    @connected
    def storage3par_delete_cpg(self, name, strict=True):
        """
        Delete a CPG
        Note - passing strict=True will raise an exception if the CPG does not exist
        Example:
             | Storage3PAR Delete CPG | name |
        """
        try:
            self.client.deleteCPG(name)
        except exceptions.HTTPNotFound as ex:
            if strict:
                raise ex
            else:
                logger.info(ex)

    ##########################################################################
    # Volume methods
    ##########################################################################
    @connected
    def storage3par_volume_should_exist(self, name):
        """
                Ensure a volume exists
                Example:
                     | Storage3PAR Volume Should Exist | myvol |
                """
        if self.storage3par_get_volume(name) is None:
            raise AssertionError('3PAR volume "{}" not found'.format(name))

    @connected
    def storage3par_get_volumes(self):
        """
        Return a list of volume names
        Example:
        | Storage3PAR Get Volumes |
        """
        return [v.get('name') for v in self._get_members(self.client.getVolumes())]

    @connected
    def storage3par_get_volume(self, name):
        """
        Return a volume
        Example:
             | Storage3PAR Get Volume | myvol |
        """
        try:
            return self.client.getVolume(name)
        except exceptions.HTTPNotFound:
            return None

    @connected
    def storage3par_create_volume(self, name, cpg, size=1024, optional=None, strict=True):
        """
        Create a volume
        Note - passing strict=True will raise an exception if the volume exists
        See createVolume in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        Example:
             | Storage3PAR Create CPG | name |
        """
        try:
            self.client.createVolume(name=name, cpgName=cpg, sizeMiB=size, optional=optional)
        except exceptions.HTTPConflict as ex:
            if strict:
                raise ex
            else:
                logger.warn(ex)

    @connected
    def storage3par_modify_volume(self, name, volume_mods):
        """
        Modify the volume.
        See modifyVolume in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        for details.
        | Storage3PAR Modify Volume | modify_data |
        """
        self.client.modifyVolume(name=name, volumeMods=volume_mods)

    @connected
    def storage3par_grow_volume(self, name, amount_mib):
        """
        Grow the volume.
        See growVolume in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        for details.
        | Storage3PAR Grow Volume | 1024 |
        """
        self.client.growVolume(name=name, amount=amount_mib)

    @connected
    def storage3par_delete_volume(self, name, strict=False):
        """
        Delete a volume
        Note - passing strict=True will raise an exception if the volume does not exist
        Example:
             | Storage3PAR Delete Volume | name |
        """
        try:
            self.client.deleteVolume(name)
        except exceptions.HTTPNotFound as ex:
            if strict:
                raise ex
            else:
                logger.info(ex)

    ##########################################################################
    # VLUN methods
    ##########################################################################
    @connected
    def storage3par_vlun_should_exist(self, host_name, volume_name, lunid):
        """
        Ensure the VLUN exists
        Example:
             | Storage3PAR VLUN Should Exist | my_volume |
        """
        data = self.storage3par_get_vlun(host_name, volume_name, lunid)
        # Get Vlun result can be None or Empty List
        if data is None or not data:
            raise AssertionError('3PAR VLUN for volume "{}" not found'.format(volume_name))

    @connected
    def storage3par_get_vluns(self):
        """
        Get a list of VLUNs
        Example:
             | Storage3PAR GET VLUNs |
        """
        return [v for v in self._get_members(self.client.getVLUNs())]

    @connected
    def storage3par_get_vlun(self, host_name, volume_name, lunid):
        """
        Get a volume VLUN
        Example:
             | Storage3PAR Get VLUN | my_volume |
        """
        try:
            vluns = self.storage3par_get_vluns()
            if vluns:
                vlun_list = []
                for vlun in vluns:
                    if vlun['volumeName'] == volume_name and vlun['hostname'] == host_name and vlun['lun'] == int(lunid):
                        vlun_list.append(vlun)
                return vlun_list
            raise exceptions.HTTPNotFound(
                {'code': 'NON_EXISTENT_VLUN', 'desc': "VLUN '%s' was not found" % volume_name})
        except exceptions.HTTPNotFound:
            return None

    @connected
    def storage3par_create_vlun(self, volume_name, lun=None, hostname=None, port_pos=None, strict=False, auto=False):
        """
        Create a volume VLUN
        When creating a VLUN, the volumeName is required.
        The lun member is not required if auto is set to True. Either hostname or portPos (or both in the case of matched sets) is also required.
        The noVcn and overrideLowerPriority members are optional.
        Parameters:
            volumeName (str) - the name of the volume to be exported
            lun (int) - The new LUN id
            hostname (str) - Name of the host which the volume is to be exported.
            portPos (dict) - System port of VLUN exported to.  It includes node number, slos number, and card port number
                portPos = { 'node': 1,   # System node (0-7)
                            'slot': 2,   # PCI bus slot in the node (0-5)
                            'port': 1}   # Port number on the FC card (0-4)
        Note - passing strict=True will raise an exception if the VLUN exists
        Example:
             | Storage3PAR Get VLUN | my_volume |
        """
        try:
            self.client.createVLUN(
                volumeName=volume_name,
                lun=lun,
                hostname=hostname,
                portPos=port_pos,
                auto=auto)
        except exceptions.HTTPConflict as ex:
            if strict:
                raise ex
            else:
                logger.warn(ex)

    @connected
    def storage3par_delete_vlun(self, volume_name, lun_id=None, hostname=None, port=None):
        """
        Delete volume VLUN
        Example:
             | Storage3PAR Delete VLUN | my_volume |
        """
        self.client.deleteVLUN(volumeName=volume_name, lunID=lun_id, hostname=hostname, port=port)

    ##########################################################################
    # Snapshot methods
    ##########################################################################
    @connected
    def storage3par_create_snapshot(self, name, volume_name, optional=None):
        """
        Create a volume snapshot
        See createSnapshot in https://pythonhosted.org/python-3parclient/api/hpe3parclient/client.html
        Example:
             | Storage3PAR Create Snapshot | name |
        """
        self.client.createSnapshot(name=name, copyOfName=volume_name, optional=optional)


class HostTests(unittest.TestCase):
    client = None
    system = "your system name or IP"
    username = "your username"
    password = "your pw"
    test_hostname = 'a test hostname - should not exist already'
    test_lun = "Lun id of volume"
    test_domain = 'your domain'
    test_cpgname = 'a test CPG name - should not exist'
    test_volume_cpg = 'a volume CPG - should exist or rewrite to use test_cpgname'
    test_volume = 'rg3parvol1_delete_me'
    grow_size = 1024

    def __init__(self, *args, **kwargs):
        super(HostTests, self).__init__(*args, **kwargs)

    class HostContext(object):

        """
        This class serves as a context manager for the test host.
        It will manage creating and deleting it with the accompanying checks.
        Example:
            with self.HostContext(self):
                do some stuff with the test host

        """

        def __init__(self, test_instance):
            self.test_instance = test_instance

        def __enter__(self):
            # create the volume
            self.test_instance.client.storage3par_create_host(self.test_instance.test_hostname, optional={'domain': self.test_instance.test_domain})

            # host should exist
            self.test_instance.assertIsNotNone(
                self.test_instance.client.storage3par_get_host(self.test_instance.test_hostname))
            self.test_instance.client.storage3par_host_should_exist(self.test_instance.test_hostname)

        def __exit__(self, exc_type, exc_val, exc_tb):
            self.test_instance.client.storage3par_delete_host(self.test_instance.test_hostname)
            self.test_instance.assertIsNone(
                self.test_instance.client.storage3par_get_host(self.test_instance.test_hostname))
            with self.test_instance.assertRaises(AssertionError):
                self.test_instance.client.storage3par_host_should_exist(self.test_instance.test_hostname)

    class VolumeContext(object):

        """
        This class serves as a context manager for the test volume.
        It will manage creating and deleting it with the accompanying checks.
        Example:
            with self.VolumeContext(self):
                do some stuff with the test volume
        """

        def __init__(self, test_instance):
            self.test_instance = test_instance

        def __enter__(self):
            # create the volume
            self.test_instance.client.storage3par_create_volume(
                self.test_instance.test_volume,
                cpg=self.test_instance.test_cpgname,
                optional={'snapCPG': self.test_instance.test_cpgname})
            # volume should exist
            self.test_instance.assertIsNotNone(self.test_instance.client.storage3par_get_volume(self.test_instance.test_volume))
            self.test_instance.client.storage3par_volume_should_exist(self.test_instance.test_volume)

        def __exit__(self, exc_type, exc_val, exc_tb):
            self.test_instance.client.storage3par_delete_volume(self.test_instance.test_volume)
            self.test_instance.assertIsNone(self.test_instance.client.storage3par_get_volume(self.test_instance.test_volume))
            with self.test_instance.assertRaises(AssertionError):
                self.test_instance.client.storage3par_volume_should_exist(self.test_instance.test_volume)

    @classmethod
    def setUpClass(cls):
        """ Make sure the test host doesn't already exist """
        cls.client = Storage3PARLibraryKeywords()
        cls.client.storage3par_open_connection(cls.system, cls.username, cls.password)

    def test_connected_decorator(self):
        self.client.storage3par_close_connection()
        with self.assertRaises(AssertionError):
            self.client.storage3par_get_hosts()
        self.client.storage3par_open_connection(self.system, self.username, self.password)

    def test_volumes(self):
        self.assertIsNotNone(self.client)

        # no volume has been created yet
        self.assertIsNone(self.client.storage3par_get_volume(self.test_volume))

        # volume shouldn't exist
        with self.assertRaises(AssertionError):
            self.client.storage3par_volume_should_exist(self.test_volume)

        # volume list length should be > 0
        volumes = self.client.storage3par_get_volumes()
        orig_vol_count = len(volumes)
        self.assertGreater(len(volumes), 0)

        # volume shouldn't be in the list of existing vols
        self.assertFalse(self.test_volume in volumes)

        # can't delete non-existing volume
        with self.assertRaises(exceptions.HTTPNotFound):
            self.client.storage3par_delete_volume(self.test_volume, strict=True)

        # create the volume
        with self.VolumeContext(self):
            # volume list should have grown by one
            volumes = self.client.storage3par_get_volumes()
            self.assertEqual(len(volumes), orig_vol_count + 1)

            # volume list should include new volume
            self.assertTrue(self.test_volume in volumes)

            # can't create existing volume
            with self.assertRaises(exceptions.HTTPConflict):
                self.client.storage3par_create_volume(self.test_volume, cpg=self.test_volume_cpg)

            # modify volume name and make sure it gets set
            new_name = self.test_volume + '_mod'
            self.client.storage3par_modify_volume(self.test_volume, volume_mods={'newName': new_name})
            self.assertIsNotNone(self.client.storage3par_get_volume(new_name))

            # set the name back and make sure it gets get
            self.client.storage3par_modify_volume(new_name, volume_mods={'newName': self.test_volume})
            self.assertIsNotNone(self.client.storage3par_get_volume(self.test_volume))

            # grow the volume and make sure the size is correct
            vol = self.client.storage3par_get_volume(self.test_volume)
            print('Existing volume size: {}'.format(vol['sizeMiB']))
            self.client.storage3par_grow_volume(self.test_volume, self.grow_size)
            vol1 = self.client.storage3par_get_volume(self.test_volume)
            print('New volume size: {}'.format(vol1['sizeMiB']))
            self.assertEqual(vol1['sizeMiB'], vol['sizeMiB'] + self.grow_size)

        # volume list length should equal original
        volumes = self.client.storage3par_get_volumes()
        self.assertEqual(len(volumes), orig_vol_count)
        self.assertFalse(self.test_volume in volumes)

    def test_create_and_delete_host(self):
        self.assertIsNotNone(self.client)   # make sure we have a client
        with self.assertRaises(AssertionError):
            self.client.storage3par_host_should_exist(self.test_hostname)
        self.assertIsNone(self.client.storage3par_get_host(self.test_hostname))
        self.client.storage3par_create_host(self.test_hostname, optional={'domain': self.test_domain})
        self.assertIsNotNone(self.client.storage3par_get_host(self.test_hostname))
        self.assertGreaterEqual(len(self.client.storage3par_get_hosts()), 0)
        with self.assertRaises(exceptions.HTTPConflict):
            self.client.storage3par_create_host(self.test_hostname, optional={'domain': self.test_domain}, strict=True)
        self.client.storage3par_delete_host(self.test_hostname)
        self.assertIsNone(self.client.storage3par_get_host(self.test_hostname))

    def test_cpg(self):
        self.assertIsNotNone(self.client)
        self.assertIsNone(self.client.storage3par_get_cpg(self.test_cpgname))
        cpg_count = len(self.client.storage3par_get_cpgs())
        self.client.storage3par_create_cpg(self.test_cpgname, optional={
            'growthIncrementMiB': 8192,
            'LDLayout': {
                'RAIDType': 1,
                'HA': 3
            }
        })
        self.assertGreater(cpg_count, len(self.client.storage3par_get_cpgs()))
        self.assertIsNotNone(self.client.storage3par_get_cpg(self.test_cpgname))
        with self.assertRaises(AssertionError):
            self.client.storage3par_cpg_should_exist(self.test_cpgname)
        self.assertEqual(self.client.storage3par_get_cpg(self.test_cpgname), self.test_cpgname)
        self.assertTrue(self.test_cpgname in self.client.storage3par_get_cpgs())
        self.client.storage3par_delete_cpg(self.test_cpgname)
        self.assertIsNone(self.client.storage3par_get_cpg(self.test_cpgname))

    def test_vluns(self):
        # vlun doesn't exist
        with self.assertRaises(AssertionError):
            self.client.storage3par_vlun_should_exist(self.test_hostname, self.test_volume, 1)
        self.assertIsNone(self.client.storage3par_get_vlun(self.test_hostname, self.test_volume, 1))
        with self.assertRaises(exceptions.HTTPNotFound):
            self.client.storage3par_create_vlun(self.test_volume, 1, self.test_hostname)
        orig_vlun_count = len(self.client.storage3par_get_vluns())
        self.assertRaises(exceptions.HTTPNotFound, self.client.storage3par_get_vlun(self.test_hostname, self.test_volume, 1))

        # create the volume and try creating vluns
        with self.HostContext(self):
            with self.VolumeContext(self):
                self.client.storage3par_create_vlun(self.test_volume, 1, self.test_hostname)
                self.assertIsNotNone(self.client.storage3par_get_vlun(self.test_hostname, self.test_volume, 1))
                vlun_count = len(self.client.storage3par_get_vluns())
                self.assertGreater(vlun_count, orig_vlun_count, "Original and new VLUN count doesn't match")
                self.client.storage3par_delete_vlun(self.test_volume, 1, self.test_hostname)
                self.assertIsNone(self.client.storage3par_get_vlun(self.test_hostname, self.test_volume, 1))
                vlun_count = len(self.client.storage3par_get_vluns())
                self.assertEqual(vlun_count, orig_vlun_count)

    # NOTE - since there is no support in the 3par library for deleting a snapshot, this is commented out
    # def test_snapshot(self):
    #     with self.VolumeContext(self):
    #         snapname = "{}_snapshot".format(self.test_volume)
    #         self.client.storage3par_create_snapshot(snapname, self.test_volume)


if __name__ == '__main__':
    unittest.main()
