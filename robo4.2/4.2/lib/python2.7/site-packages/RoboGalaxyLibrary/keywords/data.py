from RoboGalaxyLibrary.data import test_data
from random import shuffle


class RoboGalaxyTestDataKeywords(object):

    def load_test_data(self, file_name, eliminate_same_node=True):
        """ Load data from a file
            This keyword creates a Python object from XML which you can
            use in your test cases.  It places it into the ${TestData} variable and
            will append new data and overwrite existing data.

        Examples:
        | Load Test Data | c:\mydata.xml |    True/False    |
        """
        return test_data.load(file_name, eliminate_same_node=eliminate_same_node)

    def load_multi_test_data(self, config_file_name, eliminate_same_node=True):
        """ Load data from a configuration file. Configuration file contains sub data ID and file path.
            This keyword creates a Python object from XMLs which you can
            use in your test cases.  It places them into the ${TestData} variable and
            will append new data and overwrite existing data. Each object from each file
            is placed on ${TestData.<id>}, the id value could be None, if set id as None, each object
            from each file is placed on {TestData} one by one. if no duplicate data nodes in data files,
            recommend to set file id as "None".

            @config_file_name: test configuration file which contains data file location. in the configuration file,
                                "id" is sub-object name for each file, it could be a string or "None".
                                "path" is data file location, it could be an absolute path or relative path.

                    Examples of configuration files:
                        1. Set real value to "id"
                            <config>
                                <file id="common" path="datas/common.xml"/>
                                <file id="enclosures-and-servers" path="datas/servers.xml"/>
                                <file id="networks" path="datas/networks.xml"/>
                                <file id="server-profiles" path="datas/server-profiles.xml"/>
                                <file id="storages" path="datas/storages.xml"/>
                            </config>
                            call data objects with "${TestData.common.**}", "${TestData.enclosures-and-servers.**}",
                                "${TestData.networks.**}", "${TestData.server-profiles.**}", "${TestData.storages.**}"
                        2. Set "id" as "None"
                            <config>
                                <file id="None" path="datas/common.xml"/>
                                <file id="None" path="datas/servers.xml"/>
                                <file id="None" path="datas/networks.xml"/>
                                <file id="None" path="datas/server-profiles.xml"/>
                                <file id="None" path="datas/storages.xml"/>
                            </config>
                            call data objects with "${TestData.**}"

            @eliminate_same_node: "True" or "False", the default value is "True",
                            it decides whether eliminates child node name which has a list of same element,
                            fold the child's elements up as the current object.
                            This eliminates the need to index like: users.user[0].name,
                            if set as "True", you should use users[0].name;
                            if set as "False", you should use users.user[0].name

        Examples:
        | Load Multi Test Data | c:\myconfig.xml |    True/False    |
        """
        return test_data.load_multi_data_files_from_config(config_file_name, eliminate_same_node=eliminate_same_node)

    def get_data_by_property(self, data, *props):
        """ Get test data by property.
            This keyword will return a list of data objects that satisfy the query parameters.
            The first argument is the XML attribute, the second is it's value.  You can
            have as many key/value pairs as you want to help narrow down your search.

        Examples:
        | Get data by property | ${TestData.users} | role | Network administrator |
        | Get data by property | ${TestData.users} | role | Network administrator | name | NetworkUser1 |
        """

        ret = test_data.get_data_by_property(data, props)
        return ret

    def set_value_for_property(self, data_obj, prop, value):
        """ Update value for exist property.
            This keyword will return ${data_obj} as a data object .
            ${value} could be a string or data object.

        Examples:
        | Update data for property | ${DataObj} | role | Network administrator |
        """
        return test_data.set_value_for_property(data_obj, prop, value)

    def get_browser(self):
        """ Return the browser type specified in the data

        Examples:
        | Get Browser |
        """
        return test_data.get_variable(test_data.GlobalProperty.Browser)

    def get_users_from_test_data(self):
        """ return a list of all of the user objects

        Examples:
        |${users} = | Get Users From Test Data |
        """
        return test_data.get().users

    def get_user_from_test_data(self, user_name):
        """ return the user object based on the name provided

        Examples:
        | Get User From Test Data | Administrator |
        """
        user = [
            user for user in test_data.get().users if user.name == user_name]
        if len(user) == 0:
            return None
        else:
            return user[0]

    def get_usernames_from_test_data(self):
        """ return a list of all usernames

        Examples:
        | ${names} = | Get Usernames From Test Data |
        """
        return [user.name for user in test_data.get().users]

    def get_ethernet_networks_from_test_data(self):
        """ return a list of all ethernet network objects

        Examples:
        | ${networks} = | Get Ethernet Networks From Test Data |
        """
        return test_data.get().networks

    def get_fc_networks_from_test_data(self):
        """ return a list of all fibre channel network objects

        Examples:
        |${fc_networks} = | Get FC Networks From Test Data |
        """
        return test_data.get().fcnetworks

    def get_data_by_xpath(self, xpath, obj_id=None, eliminate_same_node=True):
        """ return a list of all elements that match specified xpath

        Examples:
        |${data} = | Get Data By Xpath | //users/user[@name='Administrator'] |    id    |
        """
        return test_data.get_data_by_xpath(xpath, obj_id, eliminate_same_node=eliminate_same_node)

    def shuffle_test_data(self, data):
        """ Randomize a list
        Examples:
        | Shuffle Test Data  |  ${TestData.users} |
        """
        shuffle(data)
