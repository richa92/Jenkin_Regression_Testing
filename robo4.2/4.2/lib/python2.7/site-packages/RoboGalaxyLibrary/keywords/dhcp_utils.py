"""
This module will lookup DHCP addresses using a Microsoft DHCP server running the GetDHCP-IP utility,
created during the Feb 2019 Hackathon

The tool can be found here: https://github.hpe.com/robogalaxy/get-dhcp-ip

"""
import json
import logging
import requests
from requests.adapters import HTTPAdapter
from robot.api.deco import keyword

log = logging.getLogger('dhcputils')


class DhcpUtilityKeywords(object):
    """
    Utility keywords for working with DHCP servers to retrieve data.
    """
    def __init__(self):
        self._http = requests.Session()
        self._http.mount('http://', HTTPAdapter(max_retries=3))
        self._http.mount('https://', HTTPAdapter(max_retries=3))

    @keyword("lookup ip address from mac")
    def lookup_ip_address_from_mac(self, dhcp_server, mac):
        """
        Retrieve IP info from a DHCP server running the GetDHCP-IP utility
        *Please see the README on github for complete details of the backend functionality
        :param dhcp_server:     the IPv4 or FQDN of the Microsoft DHCP server running the GetDHCP-IP utility
                                https://github.hpe.com/robogalaxy/get-dhcp-ip
        :param mac:             the MAC address to fetch an IP address for
        :return:                a dictionary of the response object

        example:    | ${resp} = | lookup ip address from mac | dhcp_server=10.146.0.11   | mac=3eb5ae50001c |
                    | Log       | ${resp}                    | console=True              |                  |
        """
        resp = self._http.get("http://{}:8080/lookup-ip?mac={}".format(dhcp_server, mac))
        respdict = dict()
        respdict['status_code'] = resp.status_code
        respdict['headers'] = resp.headers
        respdict['results'] = None
        if resp.content:
            log.debug('\nStatus %d\nResponse Headers %s\nResponse Body %s' %
                      (resp.status_code,
                       json.dumps(dict(**resp.headers), sort_keys=True, indent=4, separators=(',', ': ')),
                       json.dumps(resp.json(), sort_keys=True, indent=4, separators=(',', ': '))))
            respdict['results'] = resp.json()
        else:
            # Handle responses with empty content
            log.debug('\nStatus %d\nResponse Headers %s' %
                      (resp.status_code,
                       json.dumps(dict(**resp.headers), sort_keys=True, indent=4, separators=(',', ': '))))
        return respdict
