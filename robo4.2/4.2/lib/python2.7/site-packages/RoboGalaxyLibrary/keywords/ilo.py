'''
Created on Jul 10, 2013

@author: AndTran
'''
import os
import hpilo
import tempfile
import ftplib
from urlparse import urlsplit
from RoboGalaxyLibrary.cli.iLO import ilo_ssh
from RoboGalaxyLibrary.utilitylib import logging as logger


def connect(func):
    """
    Decorator that handles connection by connecting only
    if a connection is not established.
    """
    def wrapped(instance, *args, **kwargs):
        try:
            ret = func(instance, *args, **kwargs)
        except AttributeError:
            instance._connect()
        else:
            return ret

        return func(instance, *args, **kwargs)
    return wrapped


class iLOKeywords(object):

    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''
        pass

    def convert_ilo_cli_output_properties_to_dictionary(self, cli_output):
        """
        Convert iLO CLI output "Properties" field to dictionary format
        """
        return ilo_ssh.convert_ilo_cli_output_properties_to_dictionary(
            cli_output)

    def ilo_connect(
            self,
            hostname,
            login=None,
            password=None,
            timeout=60,
            port=443,
            protocol=None,
            delayed=False):
        """Store the arguments for future re-connections"""
        self.hostname = hostname
        self.login = login
        self.password = password
        self.timeout = timeout
        self.port = port
        self.protocol = protocol
        self.delayed = delayed
        self._connect()

    def _connect(self):
        """re-connect to iLO. It's a one-shot deal."""
        self.Ilo = hpilo.Ilo(
            self.hostname,
            self.login,
            self.password,
            self.timeout,
            self.port,
            self.protocol,
            self.delayed)

    @connect
    def ilo_get_uid_status(self):
        """Get server health information"""
        return self.Ilo.get_uid_status()

    @connect
    def ilo_get_fw_version(self):
        """Get server firmware version information"""
        return self.Ilo.get_fw_version()

    @connect
    def ilo_get_ilo_event_log(self, filter=None):
        ilo_log = self.Ilo.get_ilo_event_log()
        if (filter):
            filtered = [event for event in ilo_log if event['description'].find(filter) > -1]
        else:
            filtered = ilo_log
        return filtered

    @connect
    def ilo_get_embedded_health(self):
        """Get server health information"""
        return self.Ilo.get_embedded_health()

    @connect
    def ilo_get_host_power_status(self):
        """Whether the server is powered on or not"""
        return self.Ilo.get_host_power_status()

    @connect
    def ilo_set_host_power(self, host_power=True):
        """Turn host power on or off"""
        return self.Ilo.set_host_power(host_power)

    @connect
    def ilo_reset_server(self):
        """Power cycle the server"""
        return self.Ilo.reset_server()

    @connect
    def ilo_cold_boot_server(self):
        """ Force a cold boot of the server """
        self.Ilo.cold_boot_server()

    @connect
    def ilo_reset_rib(self):
        """ Reset the iLO/RILOE board """
        self.Ilo.reset_rib()

    @connect
    def ilo_set_one_time_boot(self, device):
        """Set one time boot device, device should be one of normal,
        floppy, cdrom, hdd, usb, rbsu or network. Ilo 4 also supports
        EMB-MENU (Displays the default boot menu), EMB-ACU (Boots into
        ACU), EMB-HPSUM-AUTO (Boots HPSUM in automatic update mode),
        EMB-DIAGS (Launches Insight Diagnostics for Linux in interactive
        mode) and RBSU (Boots into the system RBSU)"""
        return self.Ilo.set_one_time_boot(device)

    @connect
    def ilo_get_one_time_boot(self):
        return self.Ilo.get_one_time_boot()

    @connect
    def ilo_insert_virtual_media(
            self,
            device='cdrom',
            image_url='http://linuxcoe.corp.hp.com/LinuxCOE/CentOS-iso/6.5/x86_64/CentOS-6.5-x86_64-bin-DVD1.iso'):
        self.Ilo.insert_virtual_media(device, image_url)

    @connect
    def ilo_eject_virtual_media(
            self,
            device='cdrom'):
        self.Ilo.eject_virtual_media(device)

    @connect
    def ilo_set_virtual_media_status(
            self,
            device='cdrom',
            boot_option='connect',
            write_protect=True):
        self.Ilo.set_vm_status(device, boot_option, write_protect)

    @connect
    def ilo_get_virtual_media_status(self):
        return self.Ilo.get_vm_status()

    @connect
    def ilo_update_firmware(self, fw_url):
        assert fw_url.count("ftp://") > 0, "Only FTP URL's supported"
        # Retrieve file into a temp file
        [handle, tempfwbin] = tempfile.mkstemp()
        tempfwbin = '%s.bin' % tempfwbin
        #
        # could not get urllib2 to retrieve anonymous ftp://waco.rsn.hp.com url's
        # try:
        #     response = urllib2.urlopen( fw_url )
        # except urllib2.URLError, e:
        #     print e.reason
        #     exit
        # shutil.copyfileobj( response, handle )
        #

        try:
            U = urlsplit(fw_url)
            ftp = ftplib.FTP(U.netloc)
            # Assume anonymous login
            ftp.login()
            ftp.cwd(os.path.dirname(U.path))
            ftp.retrbinary(
                "RETR " + os.path.basename(U.path), open(tempfwbin, 'wb').write)
            ftp.quit()
        except Exception as e:
            logger.warn(e)
            return False

        try:
            self.Ilo.update_rib_firmware(tempfwbin, progress=logger._log)
        except AttributeError as e:
            raise e
        except Exception as e:
            logger.warn(e)
            return False

        return True

    @connect
    def ilo_get_product_name(self):
        """Get the model name of the server"""
        return self.Ilo.get_product_name()
