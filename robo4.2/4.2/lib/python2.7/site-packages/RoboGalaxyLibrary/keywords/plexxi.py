"""
plexxi.py    plexxi api Library
robotframework accessible keywords to make REST calls to Plexxi Composable Fabric Manager appliances
(C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
from functools import wraps
import logging
import json
import requests
from requests.adapters import HTTPAdapter
from RoboGalaxyLibrary.common import exceptions
from robot.api.deco import keyword
from robot.libraries.BuiltIn import BuiltIn

log = logging.getLogger('plexxi')


def pp(j):
    """
    json pretty printer
    :param j:   the json
    :return:    pprinted json
    """
    return json.dumps(j, sort_keys=True, indent=4, separators=(',', ': '))


def log_request_data(req, method, **kwargs):
    """
    Logs request headers and data. Performs pretty logging
    :return:
    """
    log.debug('\nURL\t{} {}\nRequest Headers {}\nHTTP Headers {}\n'.format(method, kwargs['uri'],
                                                                           pp(kwargs['headers']),
                                                                           pp(req._http.headers._store)))
    if 'body' in kwargs and kwargs['body'] is not None:
        log.debug('Request Body {}\n'.format(pp(json.loads(kwargs['body']))))


def log_resp_data(resp):
    """
    Creates a dict from a request response object.  Performs pretty logging
    :param resp:
    :return:
    """
    if resp.content and isinstance(resp.json(), dict):
        log.debug('\nStatus %d\nResponse Headers %s\nResponse Body %s' %
                  (resp.status_code,
                   json.dumps(dict(**resp.headers), sort_keys=True, indent=4, separators=(',', ': ')),
                   json.dumps(resp.json(), sort_keys=True, indent=4, separators=(',', ': '))))
        respdict = resp.json()
        respdict['status_code'] = resp.status_code
        respdict['headers'] = resp.headers
        return respdict
    else:
        # Handle responses with empty content
        log.debug('\nStatus %d\nResponse Headers %s' %
                  (resp.status_code,
                   json.dumps(dict(**resp.headers), sort_keys=True, indent=4, separators=(',', ': '))))
        respdict = dict()
        respdict['status_code'] = resp.status_code
        respdict['headers'] = resp.headers
        return respdict


def connected(decorated):
    """
    Decorator which ensures that the http session is connected before running a method
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        """ wrapper """
        if self._host is None and 'Authorization' not in self._headers:
            raise exceptions.NonFatalError('No authenticated HTTP session to host.  You must login first.')
        return decorated(self, *args, **kwargs)
    return wrapper


def http_request_should_succeed(decorated):
    """
    Decorator which ensures that the http request to Plexxi was 'successful', otherwise it logs a warning

    :param decorated:
    :return:
    """
    @wraps(decorated)
    def wrapper(self, *args, **kwargs):
        """ wrapper """
        resp = decorated(self, *args, **kwargs)
        if resp['status_code'] not in [200, 201, 202, 203, 204, 205, 206, 207]:
            log.warn('HTTP request was not successful. Status Code: {}'.format(resp['status_code']))
            # raise exceptions.NonFatalError('HTTP request was not successful. {}'.format(resp['status_code']))
        return resp
    return wrapper


class PlexxiLibraryKeywords(object):
    """
    plexxi api keywords.

    For specifics on each endpoint, see the API docs on the appliance at:
    https://<appliance>/api/docs

    All keywords can accept parameter 'param' that is used for things like query paramaters.
    For example:    | ${resp} = |    plexxi api get affinity groups  |  param=?count_only=true |

    All keywords can also accept parameter 'headers' to override the default headers.
    For example:    | ${resp} = |    plexxi api get affinity groups  |  headers=${myheaders} |

    All keywords can also accept parameter 'api' to override the api version for each request.

    """

    def __init__(self):
        self._http = requests.Session()
        self._http.mount('http://', HTTPAdapter(max_retries=3))
        self._http.mount('https://', HTTPAdapter(max_retries=3))
        self._headers = {'Content-Type': 'application/json',
                         'Accept': 'application/json; version=1.0'}
        self._host = None

    def __del__(self):
        self.plexxi_api_logout()

    # ------------------------------------------------------------------------------------------------------------------
    # Affinities
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete affinity")
    def plexxi_api_delete_affinity(self, uuid, **kwargs):
        """
        Delete a affinity by UUID
        :param uuid:  the UUID of the affinity to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/affinities/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get affinities")
    def plexxi_api_get_affinities(self, uuid='', **kwargs):
        """
        Get an array of Affinity objects, or if uuid is provided, a single object.
        :param uuid:  the UUID of the affinity to retrieve.  If empty, retrieves all affinities
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/affinities/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add affinity")
    def plexxi_api_add_affinity(self, body, **kwargs):
        """
        Add a new affinity object
        :param body:  the request body to create an affinity object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/affinities'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update affinity")
    def plexxi_api_update_affinity(self, uuid, body, **kwargs):
        """
        Update an affinity by UUID
        :param uuid:  the UUID of the affinity object to update
        :param body:  the request body to update an affinity object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/affinities/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Audits
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get audits")
    def plexxi_api_get_audits(self, uuid='', **kwargs):
        """
        Get list of Audit Log objects in order from most recent to least recent, or a single log if UUID is provided.
        :param uuid: the UUID of the audit to retrieve.  If empty, retrieves all audit logs
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/audits/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Authentication
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api logout")
    def plexxi_api_logout(self):
        """
        Logs out of the appliance.  Invalidates and removes the current user's authentication token
        from the default headers

        Example:
        | ${re} = | plexxi api logout |    |

        :return: response for the request
        """
        resp = self.delete(uri='/auth/token')
        if resp['status_code'] == 200:
            del self._headers['Authorization']
            self._host = None
        return resp

    @keyword(name="plexxi api login")
    def plexxi_api_login(self, host, username='admin', password='plexxi', **kwargs):
        """
        Logs in to the appliance.  Get's an authentication token and sets it in the
        default headers for future requests in this session

        :param host:      REQUIRED: The Plexxi appliance IP\FQDN
        :param username:  REQUIRED: The user name
        :param password:  REQUIRED: The password
        :return: response for the request

        Example:
        | ${re} = | plexxi api login | host=${IP}    |
        """
        self._host = host
        if 'api' not in kwargs:
            self._set_def_api_version()
        else:
            self._set_def_api_version(kwargs['api'])
        headers = self._headers.copy()
        headers['X-Auth-Username'] = username
        headers['X-Auth-Password'] = password
        resp = self.post(uri='/auth/token', headers=headers)
        if resp['status_code'] == 200:
            self._headers['Authorization'] = resp['result']
        return resp

    # ------------------------------------------------------------------------------------------------------------------
    # Authentication Sources
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete authentication source")
    def plexxi_api_delete_authentication_sources(self, uuid, **kwargs):
        """
        Delete an Authentication Source by UUID
        :param uuid: the UUID of the auth source to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get authentication sources")
    def plexxi_api_get_authentication_sources(self, uuid='', **kwargs):
        """
        Get an array of authentication sources, or a single object if UUID is supplied
        :param uuid: the UUID of the auth source to retrieve.  If empty, retrieves all auth sources
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add ldap authentication source")
    def plexxi_api_add_ldap_authentication_source(self, body, **kwargs):
        """
        Add a new LDAP authentication source
        :param body: the request body to add an auth source
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/ldap/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify ldap authentication source")
    def plexxi_api_verify_ldap_authentication_source(self, uuid, **kwargs):
        """
        Verify an existing LDAP authentication source by UUID
        :param uuid: the UUID of the LDAP auth source to verify
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/ldap/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update ldap authentication source")
    def plexxi_api_update_ldap_authentication_source(self, body, uuid, **kwargs):
        """
        Update a LDAP authentication source by UUID
        :param body: the request body to update the LDAP auth source
        :param uuid: the UUID of the LDAP auth source to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/ldap/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add pki authentication source")
    def plexxi_api_add_pki_authentication_source(self, body, **kwargs):
        """
        Add a new PKI authentication source
        :param body: the request body to add an auth source
        :param kwargs: api, headers, param
        :return: response for the request        """
        kwargs['uri'] = '/auth/sources/pki/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify pki authentication source")
    def plexxi_api_verify_pki_authentication_source(self, uuid, **kwargs):
        """
        Verify an existing PKI authentication source by UUID
        :param uuid: the UUID of the PKI auth source to verify
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/pki/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update pki authentication source")
    def plexxi_api_update_pki_authentication_source(self, body, uuid, **kwargs):
        """
        Update a PKI authentication source by UUID
        :param body: the request body to update the PKI auth source
        :param uuid: the UUID of the PKI auth source to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/auth/sources/pki/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Backups
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete backup")
    def plexxi_api_delete_backup(self, uuid, **kwargs):
        """
        Delete a backup by UUID
        :param uuid:  the UUID of the backup to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/backups/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get backups")
    def plexxi_api_get_backups(self, uuid='', **kwargs):
        """
        Get an array of backups, or a single object if UUID is supplied
        :param uuid: the UUID of the backup to retrieve.  If empty, retrieves all backups
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/backups/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api create backup")
    def plexxi_api_create_backup(self, **kwargs):
        """
        Creates a backup
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/backups'
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api upload backup")
    def plexxi_api_upload_backup(self, backupfile, **kwargs):
        """
        Uploads a backup image to the appliance
        :param backupfile:  the canonical filename of the backup image to upload
        :param kwargs: api, headers, param
        :return:

        example:

            ${resp} =    plexxi api upload backup    backupfile=c:\\temp\\composable-fabric-manager-backup-2019-01-28-194020956363.tar.gz

        """
        kwargs['uri'] = '/backups/upload'
        headers = self._headers.copy()
        headers['Content-Type'] = 'application/octet-stream'
        return self.post_file(headers=headers, file=backupfile, stream=True, **kwargs)

    @connected
    @keyword(name="plexxi api restore from backup")
    def plexxi_api_restore_backup(self, uuid, **kwargs):
        """
        Restores a backup
        :param uuid: the UUID of the backup to restore from
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/backups/{}/restore'.format(uuid)
        return self.put(**kwargs)

    @connected
    @keyword(name="plexxi api download backup")
    def plexxi_api_download_backup(self, uuid, backupfile, **kwargs):
        """
        Convenience method to download a backup by UUID
        :param uuid: the UUID of the backup to download
        :param backupfile:   The canonical path\name of the local file
        :param kwargs: api, headers, param
        :return: response of the request

        example:

            ${resp} =    plexxi api create backup
            ${resp} =    plexxi api get backups   af55d748388441f4bcc4445a6ff554ce
            ${resp} =    plexxi_api_download_backup   ${resp['result']['uuid']}
            ...   backupfile=c:\\temp\\${resp['result']['name']}
        """
        backup = self.plexxi_api_get_backups(uuid)
        kwargs['uri'] = '/files/backups/{}/{}?Authorization={}'.format(uuid, backup['result']['name'],
                                                                       self._headers['Authorization'])
        headers = self._headers.copy()
        headers['Content-Type'] = 'application/octet-stream'
        return self.get_file(headers=headers, file=backupfile, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Certificates
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get certificates")
    def plexxi_api_get_certificates(self, **kwargs):
        """
        Get current Certificate Information
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/certificates/ssl/'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api regenerate self-signed certificates")
    def plexxi_api_regenerate_self_signed_certificate(self, **kwargs):
        """
        Regenerate Self-Signed Certificate
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/certificates/ssl/regenerate/'
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api replace SSL/TLS certificate")
    def plexxi_api_replace_ssl_tls_certificate(self, body, **kwargs):
        """
        Replace SSL/TLS Certificate
        :param body: request body for New certificate and private key
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/certificates/ssl/'
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Clusters
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get clusters")
    def plexxi_api_get_clusters(self, uuid='', **kwargs):
        """
        Get an array of clusters, or a single object if UUID is provided
        :param uuid: the UUID of the cluster object to retrieve. All cluster retrieved if empty
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/clusters/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # DNS Client Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete dns client configuration")
    def plexxi_api_delete_dns_client_configuration(self, uuid, **kwargs):
        """
        Delete a DNS Client Configuration by UUID
        :param uuid:  the UUID of the DNS configuration to remove
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/dns_client_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get dns client configuration")
    def plexxi_api_get_dns_client_configuration(self, uuid='', **kwargs):
        """
        Get an array of DNS Client Configurations, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/dns_client_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add dns client configuration")
    def plexxi_api_add_dns_client_configuration(self, body, **kwargs):
        """
        Add a new DNS Client Configuration
        :param body: the request body to create a new DNS configuration
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/dns_client_configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update dns client configuration")
    def plexxi_api_update_dns_client_configuration(self, body, uuid, **kwargs):
        """
        Update a DNS Client Configuration by UUID
        :param body: the request body to update a DNS configuration
        :param uuid: the UUID of the DNS configuration to update
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/dns_client_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Fabric IP Network
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete fabric ip network")
    def plexxi_api_delete_fabric_ip_network(self, uuid, **kwargs):
        """
        Delete a Fabric IP Network configuration object
        :param uuid: the UUID of the fabric ip configuration to remove
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabric_ip_networks/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get fabric ip networks")
    def plexxi_api_get_fabric_ip_networks(self, uuid='', **kwargs):
        """
        Get an array of Fabric IP Network configurations, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabric_ip_networks/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add fabric ip network")
    def plexxi_api_add_fabric_ip_network(self, body, **kwargs):
        """
        Add a new Fabric IP Network configuration
        :param body: the request body to create a new fabric IP network
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabric_ip_networks'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update fabric ip network")
    def plexxi_api_update_fabric_ip_network(self, body, uuid, **kwargs):
        """
        Update a Fabric IP Network configuration by UUID
        :param body: the request body to update a fabric IP network
        :param uuid: the UUID of the fabric IP network to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabric_ip_networks/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Fabrics
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get fabrics")
    def plexxi_api_get_fabrics(self, uuid='', **kwargs):
        """
        Get an array of Fabric objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api patch fabric")
    def plexxi_api_patch_fabric(self, body, **kwargs):
        """
        Patch Request to update one or more fabrics
        :param body: the request body to update one or more fabrics
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics'
        return self.patch(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api discover fabric")
    def plexxi_api_discover_fabric(self, body, **kwargs):
        """
        Discovers a Fabric using the IP address of one switch.
        :param body:   the request body to update one or more fabrics
               example:{"ip_address": "192.168.1.1",
                        "name": "fabric-01",
                        "description": ""}

        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update fabric")
    def plexxi_api_update_fabrics(self, uuid, body, **kwargs):
        """
        Update a fabric.
        :param uuid: the UUID of the fabric to update
        :param body: the request body to update one or more fabrics
               example:{"description": "",
                        "foreign_manager_id": "00000111111000000000000000000001",
                        "foreign_fabric_state": "Configured",
                        "name": "fabric-01",
                        "foreign_manager_url": "https://remote-manager-address.domain"}

        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api rediscover fabric")
    def plexxi_api_rediscover_fabric(self, uuid, body, **kwargs):
        """
        Rediscovers a Fabric using the IP address of one switch.
        :param uuid: the UUID of the fabric to rediscover
        :param body: the request body to update one or more fabrics
               example:{"host": "192.168.1.1",
                        "use_default_token": false}

        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update fabric settings")
    def plexxi_api_update_fabric_settings(self, uuid, body, **kwargs):
        """
        Updates Fabric wide settings for various features.
        :param uuid: the UUID of the fabric to update
        :param body: the request body to update one or more fabrics
               example:{"bridge_loop_detection": {"threshold": 1,
                                                  "penalty_interval": 5000,
                                                  "reflect_mode": "block",
                                                  "loop_mode": "block"}
                        }

        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fabrics/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Fits
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete fit")
    def plexxi_api_delete_fit(self, uuid, **kwargs):
        """
        Delete a fit by UUID
        :param uuid: the UUID of the fit object to delete
        :param kwargs: api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fits/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get fits")
    def plexxi_api_get_fits(self, uuid='', **kwargs):
        """
        Get an array of fit objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fits/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api perform fit")
    def plexxi_api_perform_fit(self, body, **kwargs):
        """
        Perfom a fit
        :param body: the request body to perform a fit
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/fits'
        return self.post(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Hosts
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get infrastructure hosts")
    def plexxi_api_get_infrastructure_hosts(self, uuid='', **kwargs):
        """
        Get an array of Host objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hosts/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # HPE OneView
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete oneview configuration")
    def plexxi_api_delete_oneview_configuration(self, uuid, **kwargs):
        """
        Delete a HPE OneView configuration by UUID
        :param uuid: the UUID of the object to delete.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hpe/oneviews/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get oneview configuration")
    def plexxi_api_get_oneview_configuration(self, uuid='', **kwargs):
        """
        Get an array of HPE OneView configuration objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hpe/oneviews/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add oneview configuration")
    def plexxi_api_add_oneview_configuration(self, body, **kwargs):
        """
        Add a new HPE OneView configuration
        :param body: the request body to add a new OneView configuration
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hpe/oneviews'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify oneview configuration")
    def plexxi_api_verify_oneview_configuration(self, uuid, **kwargs):
        """
        Verify connectivity of a HPE OneView configuration by UUID
        :param uuid: the UUID of the OneView configuration object to verify
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hpe/oneviews/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update oneview configuration")
    def plexxi_api_update_oneview_configuration(self, body, uuid, **kwargs):
        """
        Update a HPE OneView configuration by UUID
        :param body: the request body to update a OneView configuration
        :param uuid: he UUID of the OneView configuration object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/hpe/oneviews/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Integrations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get integration sets")
    def plexxi_api_get_integration_sets(self, **kwargs):
        """
        Get an array of Integration Set objects
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/integration_sets'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get integrations")
    def plexxi_api_get_integrations(self, **kwargs):
        """
        Get an array of Integration objects
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/integrations'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get integration configuration schema")
    def plexxi_api_get_integration_configuration_schema(self, pack, **kwargs):
        """
        Get an Integration Configuration Schema object
        :param pack: the name of the pack object to retrieve.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/integrations/{}/schema'.format(pack)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api patch integration sets")
    def plexxi_api_patch_integration_sets(self, body, **kwargs):
        """
        Update one integration set using JSON patch(es) with the UUID.
        :param body: the request body to update an Integration Set
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/integration_sets'
        return self.patch(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api enable composable cloud integration set")
    def plexxi_api_enable_composable_cloud_integration_set(self, enabled=True, **kwargs):
        """
        Convenience method to enable the Composable Cloud integration set for OneView
        :param enabled: True/False.  True will enable, False will disable
        :param kwargs: api, headers, param
        :return: response of the request
        """
        resp = self.plexxi_api_get_integration_sets()
        body = [{"uuids": [result['uuid']],
                 "patch": [{"path": "/is_selected",
                            "value": enabled,
                            "op": "replace"
                            }
                           ]
                 } for result in resp['result'] if result['name'] == 'Composable Cloud']
        return self.plexxi_api_patch_integration_sets(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # IP Prefix Lists
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete ip prefix list")
    def plexxi_api_delete_ip_prefix_list(self, uuid, **kwargs):
        """
        Delete an IP Prefix List object by UUID
        :param uuid: the UUID of the object to delete.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ip_prefix_lists/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get ip prefix lists")
    def plexxi_api_get_ip_prefix_lists(self, uuid='', **kwargs):
        """
        Get an array of IP Prefix List objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ip_prefix_lists/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add ip prefix lists")
    def plexxi_api_add_ip_prefix_list(self, body, **kwargs):
        """
        Add a new IP Prefix List
        :param body: the request body to add a new IP prefix list
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ip_prefix_lists'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update ip prefix lists")
    def plexxi_api_update_ip_prefix_list(self, body, uuid, **kwargs):
        """
        Update an IP Prefix List object by UUID
        :param body: the request body to update a IP prefix list
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """

        kwargs['uri'] = '/ip_prefix_lists/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Kubernetes Master Configuration
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete kubernetes master configuration")
    def plexxi_api_delete_kubernetes_master_configuration(self, uuid, **kwargs):
        """
        Delete an Kubernetes configuration by UUID
        :param uuid: the UUID of the object to delete.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get kubernetes master configurations")
    def plexxi_api_get_kubernetes_master_configuration(self, uuid='', **kwargs):
        """
        Get an array of Kubernetes Master configurations objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add kubernetes master configuration")
    def plexxi_api_add_kubernetes_master_configuration(self, body, **kwargs):
        """
        Add a new Kubernetes Master configuration
        :param body: the request body to add a new Kubernetes Master configuration
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api register kubernetes plugin")
    def plexxi_api_register_kubernetes_plugin(self, uuid, **kwargs):
        """
        Register the Composable Fabric Manager Kubernetes/OpenShift Plugin by UUID
        :param uuid: the UUID of the object to register
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters/{}/register'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api verify kubernetes master configuration")
    def plexxi_api_verify_kubernetes_master_configuration(self, uuid, **kwargs):
        """
        Verify connectivity of an Kubernetes configuration by UUID
        :param uuid: the UUID of the object to verify
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api filter nodes for kubernetes pod scheduling")
    def plexxi_api_filter_nodes_for_kubernetes_pod_scheduling(self, uuid, body, **kwargs):
        """
        Filter nodes for Kubernetes pod scheduling
        :param uuid: the UUID of the UUID of Kubernetes cluster
        :param body: the request body of Kubernetes scheduler extender arguments
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/scheduler/{}/filter'.format(uuid)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api prioritize nodes for kubernetes pod scheduling")
    def plexxi_api_prioritize_nodes_for_kubernetes_pod_scheduling(self, uuid, body, **kwargs):
        """
        Prioritize nodes for Kubernetes pod scheduling
        :param uuid: the UUID of the Kubernetes cluster
        :param body: the request body of Kubernetes scheduler extender arguments
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/scheduler/{}/prioritize'.format(uuid)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update kubernetes master configuration")
    def plexxi_api_update_kubernetes_master_configuration(self, body, uuid, **kwargs):
        """
        Update an Kubernetes configuration by UUID
        :param uuid: the UUID of the configuration to update
        :param body: the request body of the Kubernetes Master configuration
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/kubernetes/masters/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Lags
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete lag")
    def plexxi_api_delete_lag(self, uuid, **kwargs):
        """
        Delete a provisioned LAG by UUID
        :param uuid: the UUID of the object to delete.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete multiple lags")
    def plexxi_api_delete_lags(self, uuids, **kwargs):
        """
        Delete multiple provisioned LAG objects
        :param uuids: a comma-separated list of UUIDs.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags'
        kwargs['param'] = '?lags={}{}'.format(uuids, kwargs.get('param', ''))
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get lags")
    def plexxi_api_get_lags(self, uuid='', **kwargs):
        """
        Get an array of LAG objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get lags mac learning defaults")
    def plexxi_api_get_lag_mac_learning_defaults(self, **kwargs):
        """
        Get the default MAC learning configuration
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/mac_learning_defaults/'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api patch lag")
    def plexxi_api_patch_lags(self, body=None, **kwargs):
        """
        Patch request to update LAG objects
        :param uuid: the UUID of the LAG to update
        :param body: the request body of the LAG
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/'
        return self.patch(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add lag")
    def plexxi_api_add_lag(self, body, **kwargs):
        """
        Add a new provisioned LAG object
        :param body: the request body of the LAG
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update lag")
    def plexxi_api_update_lags(self, body, uuid, **kwargs):
        """
        Update a LAG by UUID
        :param uuid: the UUID of the LAG to update
        :param body: the request body of the LAG
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update lag mac learning defaults")
    def plexxi_api_update_lag_mac_learning_defaults(self, body, **kwargs):
        """
        Update the default MAC learning configuration
        :param body: the request body of the MAC learning configuration
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/lags/mac_learning_defaults/'
        return self.put(body=body, **kwargs)

    @keyword(name="plexxi api make lag body")
    def plexxi_api_make_lag_body(self, name, fabric_uuid, port_uuids, lacp_fallback_port=None,
                                 lacp_fallback_tout=0, speed=100000, native_vlan=0, ug_vlans='1-4000', **kwargs):
        """
        Convenience method to build a LAG request body for 'plexxi api add lag' keyword

        :param name:                the name of the LAG to create
        :param fabric_uuid:         the uuid of the fabric to create the LAG in
        :param lacp_fallback_port:  port uuid of the lacp fallback port. Set to None to disable
        :param lacp_fallback_tout:  timeout for lacp fallback port
        :param port_uuids:          list of port uuids that are part of the LAG
        :param speed:               defaults to 100000.  speed setting for the LAG
        :param native_vlan:         defaults to zero.  the native VLAN
        :param ug_vlans:            defaults to 1-4000.  The range of VLANs allowed
        :param kwargs: api, headers, param              other key value pairs to be included in the payload
        :return:                    request body

        example:

        plexxi api login   ${PLX}
        @{ports} =   plexxi api get port uuid by switch name and port label   ${lag_ports}
        ${resp} =    plexxi api get fabrics
        ${fuuid} =   get from dictionary   ${resp['result'][0]}   uuid
        ${body} =    plexxi api make lag body    name=MyFirstLag
        ...                                      fabric_uuid=${fuuid}
        ...                                      port_uuids=${ports}
        ...                                     lacp_fallback_port=${ports[0]}
        ${resp} =    plexxi api add lag    body=${body}
        """
        body = {'name': name,
                'fabric_uuid': fabric_uuid,
                'native_vlan': native_vlan,
                'mac_learning_configuration': {'learning_limit': 1,
                                               'aging': False,
                                               'violation_action': 'restrict',
                                               'mode': 'dynamic'},
                'lacp_fallback': {'port_uuid': lacp_fallback_port,
                                  'timeout': lacp_fallback_tout},
                'port_properties': self._make_port_properties(port_uuids, speed),
                'ungrouped_vlans': ug_vlans,
                'vlan_group_uuids': [],
                }

        for key in kwargs:
            if key not in body:
                body[key] = kwargs[key]
        return body

    @staticmethod
    def _make_port_properties(port_uuids, speed):
        """
        static method to build the port properties list
        :param port_uuids:  uuids
        :param speed:  value for current and permitted speed
        :return:
        """
        return [{'lacp': {'aggregate_port_limits': {'maximum': 0,
                                                    'minimum': 0},
                          'intervals': {'fast': 1,
                                        'slow': 30},
                          'mode': 'active',
                          'priority': 32768},
                 'port_uuids': [p],
                 'speed': {'current': speed,
                           'permitted': [speed]}
                 } for p in port_uuids]

    # ------------------------------------------------------------------------------------------------------------------
    # Licenses
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete licenses")
    def plexxi_api_delete_licenses(self, fabric_uuid, **kwargs):
        """
        Delete licenses for fabric by fabric UUID
        :param fabric_uuid: UUID of Fabric for which licenses are to be deleted
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/licenses?fabric_uuid={}'.format(fabric_uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get licenses")
    def plexxi_api_get_licenses(self, **kwargs):
        """
        Get an array of licenses
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/licenses/'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get license capability request file")
    def plexxi_api_get_license_capability_request_file(self, fabric_uuid, activation_id, activation_count, **kwargs):
        """
        Get a capability request file
        :param fabric_uuid: UUID of Fabric for which license will be requested
        :param activation_id: License Activation ID with the format XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
        :param activation_count: Quantity of licensed products to request from the entitlement you are activating
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/licenses_request?fabric_uuid={}&activation_id={}&activation_count={}'.format(fabric_uuid,
                                                                                                       activation_id,
                                                                                                       int(activation_count))
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api upload license")
    def plexxi_api_upload_license(self, body, fabric_uuid, **kwargs):
        """
        Upload Licenses
        ** NOTE: the API docs on this are incomplete.  This method likely needs some work
        :param body: Base64 encoded License Binary File
        :param fabric_uuid: UUID of Fabric for which licenses are to be replaced
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/licenses/{}'.format(fabric_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api download license")
    def plexxi_api_download_license(self, fabric_uuid, activation_id, activation_count, **kwargs):
        """
        Download license from License Management System
        ** NOTE: the API docs on this are incomplete.  This method likely needs some work
        :param fabric_uuid: UUID of Fabric for which license will be requested
        :param activation_id: License Activation ID with the format XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
        :param activation_count: Quantity of licensed products to request from the entitlement you are activating
        :param kwargs:  api, headers, param
        :return: response of the request
        """

        kwargs['uri'] = '/licenses_request?fabric_uuid={}&activation_id={}&activation_count={}'.format(fabric_uuid,
                                                                                                       activation_id,
                                                                                                       int(activation_count))
        return self.put(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # MAC Attachments
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get mac attachments")
    def plexxi_api_get_mac_attachments(self, uuid='', **kwargs):
        """
        Get a list of MAC attachments filtering output by query parameters.
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/mac_attachments/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api refresh mac attachments")
    def plexxi_api_refresh_mac_attachments(self, **kwargs):
        """
        Refresh MAC attachments in persistent store.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/mac_attachments/refresh'
        return self.put(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Neighbor Discovery
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete neighbor discovery advertisement")
    def plexxi_api_delete_neighbor_discovery_advertisement(self, uuid, **kwargs):
        """
        Delete a user-defined Neighbor Discovery Advertisement by UUID
        :param uuid: UUID of user-defined advertisement to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/advertisements/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete neighbor discovery configuration")
    def plexxi_api_delete_neighbor_discovery_configuration(self, uuid, **kwargs):
        """
        Delete a Neighbor Discovery Configuration by UUID
        :param uuid: UUID of the Neighbor Discovery Configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get neighbor discovery advertisements")
    def plexxi_api_get_neighbor_discovery_advertisements(self, uuid='', **kwargs):
        """
        Get all neighbor discovery advertisements objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/advertisements/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get neighbor discovery configuration")
    def plexxi_api_get_neighbor_discovery_configuration(self, uuid='', **kwargs):
        """
        Get all neighbor discovery configuration objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get neighbor discovery statistics")
    def plexxi_api_get_neighbor_discovery_statistics(self, **kwargs):
        """
        Get neighbor discovery statistics
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/statistics'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add neighbor discovery advertisements")
    def plexxi_api_add_neighbor_discovery_advertisements(self, body, **kwargs):
        """
        Add a user-defined Neighbor Discovery Advertisement
        :param body: the request body of the User-Defined Neighbor Discovery Advertisement
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/advertisements'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add neighbor discovery configuration")
    def plexxi_api_add_neighbor_discovery_configuration(self, body, **kwargs):
        """
        Add a new Neighbor Discovery Configuration switch override
        :param body: the request body of the Neighbor discovery configuration to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api refresh neighbor discovery advertisements")
    def plexxi_api_refresh_neighbor_discovery_advertisements(self, **kwargs):
        """
        Refresh neighbor discovery advertisements in persistent store
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/advertisements/refresh'
        return self.put(**kwargs)

    @connected
    @keyword(name="plexxi api update neighbor discovery advertisements")
    def plexxi_api_update_neighbor_discovery_advertisements(self, uuid, body, **kwargs):
        """
        Modify an existing user-defined neighbor discovery advertisement
        :param uuid: the UUID of the user-defined advertisement to update
        :param body: the request body of the Neighbor Discovery advertisement object.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/advertisements/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update neighbor discovery configuration")
    def plexxi_api_update_neighbor_discovery_configuration(self, uuid, body, **kwargs):
        """
        Modify an existing neighbor discovery protocol configuration
        :param uuid: the UUID of the neighbor discovery configuration object to update
        :param body: the request body of the Neighbor Discovery configuration object.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/neighbor_discovery/configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # NSX
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete vmware nsx configuration")
    def plexxi_api_delete_nsx_configuration(self, uuid, **kwargs):
        """
        Delete a VMware NSX configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/vmware/nsxs/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get vmware nsx configurations")
    def plexxi_api_get_nsx_configurations(self, uuid='', **kwargs):
        """
        Get all NSX objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/vmware/nsxs/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add vmware nsx configuration")
    def plexxi_api_add_nsx_configuration(self, body, **kwargs):
        """
        Add a new VMware NSX configuration
        :param body: the request body of the NSX object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/vmware/nsxs/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify vmware nsx configuration")
    def plexxi_api_verify_nsx_configuration(self, uuid, **kwargs):
        """
        Verify connectivity of a VMware NSX configuration by UUID
        :param uuid:  UUID of configuration to verify
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/vmware/nsxs/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update vmware nsx configuration")
    def plexxi_api_update_nsx_configuration(self, body, uuid, **kwargs):
        """
        Update a VMware NSX configuration by UUID
        :param body: the request body of the NSX object to create.
        :param uuid: the UUID of the NSX object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/vmware/nsxs/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # NTP Client Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete ntp client configuration")
    def plexxi_api_delete_ntp_client_configuration(self, uuid, **kwargs):
        """
        Delete a NTP Client Configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ntp_client_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get ntp client configurations")
    def plexxi_api_get_ntp_client_configurations(self, uuid='', **kwargs):
        """
        Get all NTP objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ntp_client_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add ntp client configuration")
    def plexxi_api_add_ntp_client_configuration(self, body, **kwargs):
        """
        Add a new NTP client configuration
        :param body: the request body of the NTP object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ntp_client_configurations/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update ntp client configuration")
    def plexxi_api_update_ntp_client_configuration(self, body, uuid, **kwargs):
        """
        Update a NTP client configuration by UUID
        :param body: the request body of the NTP object to create.
        :param uuid: the UUID of the NTP object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ntp_client_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Nutanix
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete nutanix configuration")
    def plexxi_api_delete_nutanix_configuration(self, uuid, **kwargs):
        """
        Delete a Nutanix Prism configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/nutanix/prisms/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get nutanix configuration")
    def plexxi_api_get_nutanix_configuration(self, uuid='', **kwargs):
        """
        Get all Nutanix objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/nutanix/prisms/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add nutanix configuration")
    def plexxi_api_add_nutanix_configuration(self, body, **kwargs):
        """
        Add a new Nutanix client configuration
        :param body: the request body of the Nutanix object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/nutanix/prisms/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify nutanix configuration")
    def plexxi_api_verify_nutanix_configuration(self, uuid, **kwargs):
        """
        Verify connectivity of a Nutanix configuration by UUID
        :param uuid:  UUID of configuration to verify
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/nutanix/prisms/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update nutanix configuration")
    def plexxi_api_update_nutanix_configuration(self, body, uuid, **kwargs):
        """
        Update a Nutanix client configuration by UUID
        :param body: the request body of the Nutaix object to create.
        :param uuid: the UUID of the Nutanix object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/nutanix/prisms/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Openapi
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get openapi")
    def plexxi_api_get_openapi(self, **kwargs):
        """
        Get the Composable Fabric Manager OpenAPI Schema
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/openapi/'
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Path Actors
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete path actor")
    def plexxi_api_delete_path_actor(self, uuid, **kwargs):
        """
        Delete a Path Actor configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/path_actors/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get path actors")
    def plexxi_api_get_path_actors(self, uuid='', **kwargs):
        """
        Get all Path Actor objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/path_actors/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add path actor")
    def plexxi_api_add_path_actor(self, body, **kwargs):
        """
        Add a new Path Actor object
        :param body: the request body of the Path Actor object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/path_actors/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update path actor")
    def plexxi_api_update_path_actor(self, body, uuid, **kwargs):
        """
        Update a Path Actor object by UUID
        :param body: the request body of the Path Actor object to create.
        :param uuid: the UUID of the Path Actor object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/path_actors/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Peers
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get peers")
    def plexxi_api_get_peers(self, **kwargs):
        """
        Get all Peer objects
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/peers/'
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Ping
    # ------------------------------------------------------------------------------------------------------------------
    @keyword(name="plexxi api ping")
    def plexxi_api_ping(self, **kwargs):
        """
        Composable Fabric Manager API status check
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ping'
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Pods
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get pods")
    def plexxi_api_get_pods(self, uuid='', **kwargs):
        """
        Get all Pod objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/pods/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Port Mirrors
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete port mirror")
    def plexxi_api_delete_port_mirror(self, uuid, **kwargs):
        """
        Delete a Port Mirror configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/port_mirrors/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get port mirrors")
    def plexxi_api_get_port_mirrors(self, uuid='', **kwargs):
        """
        Get all Port Mirror objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/port_mirrors/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add port mirror")
    def plexxi_api_add_port_mirror(self, body, **kwargs):
        """
        Add a new Port Mirror object
        :param body: the request body of the Port Mirror object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/port_mirrors/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update port mirror")
    def plexxi_api_update_port_mirror(self, body, uuid, **kwargs):
        """
        Update a Port Mirror object by UUID
        :param body: the request body of the Port Mirror object to update.
        :param uuid: the UUID of the Port Mirror object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/port_mirrors/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Ports
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get ports")
    def plexxi_api_get_ports(self, uuid='', **kwargs):
        """
        Get all Port objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ports/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get port statistics")
    def plexxi_api_get_port_statistics(self, uuid='', **kwargs):
        """
        Get all Port statistic objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ports/statistics/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword("plexxi api get port uuids by label")
    def plexxi_api_get_port_uuids_by_label(self, ports):
        """
        Convenience method to return a list of UUIDs for a given list of port labels
        :param ports:   a list of port label values
        :return:  a list of port UUIDs
        """
        gports = []
        for p in ports:
            gw_ports = self.plexxi_api_get_ports(param="?port_label={}".format(p))
            for i in gw_ports['result']:
                gports.append(i['uuid'])
        return gports

    @connected
    @keyword("plexxi api get port uuid by switch name and port label")
    def plexxi_api_get_port_uuid_by_switch_and_label(self, switchports):
        """
        Convenience method to return a list of UUIDs for a given list of port labels for a given switch
        :param ports:   a list with dicts of key=switchname, value= port label value

                example   [{'p1r1large': 49},
                           {'p1r2large': 49}]
        :return:  a list of port UUIDs
        """
        gports = []
        for x in switchports:
            for switch, port in x.items():
                gw_ports = self.plexxi_api_get_ports(param="?port_label={}".format(port))
                for i in gw_ports['result']:
                    if i['switch_name'] == switch:
                        gports.append(i['uuid'])
        return gports

    @connected
    @keyword(name="plexxi api patch ports")
    def plexxi_api_patch_ports(self, body, **kwargs):
        """
        Update Port objects
        :param body: the request body of the Port object(s) to update.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ports/'
        return self.patch(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update port")
    def plexxi_api_update_port(self, body, uuid, **kwargs):
        """
        Update Port objects
        :param body: the request body of the Port object to update.
        :param uuid: the UUID of the Port object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/ports/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api bulk patch ports by label")
    def plexxi_api_bulk_patch_ports_by_label(self, ports, key, value, **kwargs):
        """
        Convenience method to perform bulk patch operations on a list of ports
        :param ports:  a list of port labels to patch  (ex. ['49', '50'] )
        :param key:  '/admin_state', '/qsfp_mode', etc
        :param value: 'enabled', 'qsfp_1x40_gbps', etc
        :param kwargs: api, headers, param
        :return:
        """
        kwargs['uri'] = '/ports/'

        body = [{'uuids': self.plexxi_api_get_port_uuids_by_label(ports),
                 'patch': [{'path': key,
                            'value': value,
                            'op': 'replace'},
                           ]
                 }]

        return self.patch(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Settings
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get settings")
    def plexxi_api_get_settings(self, key='', **kwargs):
        """
        Get all Settings objects, or a single object if key is provided
        :param key: the key of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/settings/{}'.format(key)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api update settings")
    def plexxi_api_update_settings(self, body, key, **kwargs):
        """
        Update Setting objects by key
        :param body: the request body of the object to update.
        :param key: the key of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/settings/{}'.format(key)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # sFlow Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete sflow configuration")
    def plexxi_api_delete_sflow_configuration(self, uuid, **kwargs):
        """
        Delete a sFlow configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/sflow_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get sflow configurations")
    def plexxi_api_get_sflow_configurations(self, uuid='', **kwargs):
        """
        Get all sFlow objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/sflow_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add sflow configuration")
    def plexxi_api_add_sflow_configuration(self, body, **kwargs):
        """
        Add a new sFlow object
        :param body: the request body of the sFlow object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/sflow_configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update sflow configuration")
    def plexxi_api_update_sflow_configuration(self, body, uuid, **kwargs):
        """
        Update a sFlow object by UUID
        :param body: the request body of the object to update.
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/sflow_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # HPE Simplivity Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete simplivity configuration")
    def plexxi_api_delete_simplivity_configuration(self, uuid, **kwargs):
        """
        Delete a Simplivity configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/simplivitys/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get simplivity configurations")
    def plexxi_api_get_simplivity_configurations(self, uuid='', **kwargs):
        """
        Get all Simplivity objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/simplivitys/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add simplivity configuration")
    def plexxi_api_add_simplivity_configuration(self, body, **kwargs):
        """
        Add a new Simplivity object
        :param body: the request body of the object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/simplivitys'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api verify simplivity configuration")
    def plexxi_api_verify_simplivity_configuration(self, uuid, **kwargs):
        """
        Verify connectivity of a HPE Simplivity configuration by UUID
        :param uuid: the UUID of the object to verify.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/simplivitys/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update simplivity configuration")
    def plexxi_api_update_simplivity_configuration(self, uuid, body, **kwargs):
        """
        Update a Simplivity object by UUID
        :param body: the request body of the object to update.
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/simplivitys/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # SNMP Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete snmp configuration")
    def plexxi_api_delete_snmp_configuration(self, uuid, **kwargs):
        """
        Delete a SNMP configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/snmp_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get snmp configurations")
    def plexxi_api_get_snmp_configurations(self, uuid='', **kwargs):
        """
        Get all SNMP objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/snmp_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add snmp configuration")
    def plexxi_api_add_snmp_configuration(self, body, **kwargs):
        """
        Add a new SNMP object
        :param body: the request body of the object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/snmp_configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update snmp configuration")
    def plexxi_api_update_snmp_configuration(self, body, uuid, **kwargs):
        """
        Update a SNMP object by UUID
        :param body: the request body of the object to update.
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/snmp_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Statistic Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get statistic configurations")
    def plexxi_api_get_statistic_configurations(self, uuid='', **kwargs):
        """
        Get all Statistic configuration objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/statistic_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api update statistic configuration")
    def plexxi_api_update_statistic_configuration(self, body, uuid, **kwargs):
        """
        Update a Statistic object by UUID
        :param body: the request body of the object to update.
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/statistic_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Support Bundles
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete support bundles")
    def plexxi_api_delete_support_bundle(self, name='', **kwargs):
        """
        Delete support bundles
        :param name: name of the support bundle to delete.  If emtpy, ALL support bundles are deleted.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/support_bundles/{}'.format(name)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get support bundles")
    def plexxi_api_get_support_bundles(self, name='', **kwargs):
        """
        Get all Support Bundle objects, or a single object if name is provided
        :param name: the name of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/support_bundles/{}'.format(name)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api create support bundle")
    def plexxi_api_create_support_bundle(self, **kwargs):
        """
        Add a new support bundle object
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/support_bundles'
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api download support bundle")
    def plexxi_api_download_support_bundle(self, name, bundlefile, **kwargs):
        """
        Convenience method to download a support bundle by name
        :param name:   The name of the support bundle (returned in POST or GET 'result')
        :param bundlefile:   The canonical path\name of the local file
        :param kwargs: api, headers, param
        :return:

        example:

            ${resp} =    plexxi api create support bundle
            ${name} =    get from dictionary    ${resp['result']}   name
            ${resp} =    plexxi_api_download_support_bundle   name=${name}
            ...   bundlefile=c:\\temp\\${name}

        """
        kwargs['uri'] = '/files/{}?Authorization={}'.format(name, self._headers['Authorization'])
        headers = self._headers.copy()
        headers['Content-Type'] = 'application/octet-stream'
        return self.get_file(headers=headers, file=bundlefile, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Switches
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete switch")
    def plexxi_api_delete_switch(self, uuid, **kwargs):
        """
        Deletes a switch from CFM
        :param uuid:   The UUID of the switch to remove
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete switch software images")
    def plexxi_api_delete_switch_images(self, name='', **kwargs):
        """
        Deletes switch software images from CFM
        :param name:   The name of the specific image to delete.  If not supplied, all
                       images are removed.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/images/{}'.format(name)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api abort switch software staging")
    def plexxi_api_abort_switch_software_staging(self, uuid, **kwargs):
        """
        Abort a switch software staging process by UUID
        :param uuid:   The UUID of the staging process to abort
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/stagings/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api abort switch software upgrade")
    def plexxi_api_abort_switch_software_upgrade(self, uuid, **kwargs):
        """
        Abort a switch software upgrade process by UUID
        :param uuid:   The UUID of the software upgrade process to abort
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/stagings/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get switches")
    def plexxi_api_get_switches(self, uuid='', **kwargs):
        """
        Get an array of Switch objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get switches status")
    def plexxi_api_get_switches_status(self, **kwargs):
        """
        Get an array of Switch Status objects
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/status'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get switch software")
    def plexxi_api_get_switch_software(self, uuid, **kwargs):
        """
        Get a switch software state by UUID
        :param uuid:   UUID of the switch for which to get software state
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/{}/software'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get switch software images")
    def plexxi_api_get_switch_software_images(self, name='', **kwargs):
        """
        Get an array of switch software images
        :param name:   The name of the image to retrieve.  If emtpy, returns all images.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/images/{}'.format(name)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get switch software stagings")
    def plexxi_api_get_switch_software_stagings(self, uuid='', **kwargs):
        """
        Get an array of switch software staging processes
        :param uuid:   The UUID of the staging process to retrieve.  If empty, retrieves all processes.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/stagings/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get switch software upgrades")
    def plexxi_api_get_switch_software_upgrades(self, uuid='', **kwargs):
        """
        Get an array of switch software staging processes
        :param uuid:   The UUID of the the upgrade process to retrieve.  If empty, retrieves all processes.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/upgrades/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api patch switch")
    def plexxi_api_patch_switch(self, body, **kwargs):
        """
        Update a switch object using JSON patch(es) with its UUID.
        See API documentation for valid request bodies.

        :param body:   The patch request body
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches'
        return self.patch(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api stage switch software")
    def plexxi_api_stage_switch_software(self, image, switch_uuids, **kwargs):
        """
        Add a new switch software staging process
        :param image:    The name of the image to stage.  **Note: must already be uploaded
        :param switch_uuids:   The uuids of the switches to stage the software on
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/stagings'
        body = {'image': image,
                'groups': [{'switches': switch_uuids,
                            'mode': 'parallel'}
                           ]
                }
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api start switch software upgrade")
    def plexxi_api_start_switch_software_upgrade(self, switch_uuids, accept_eula='true', **kwargs):
        """
        Upgrades switch software using the staged software
        :param switch_uuids:   The uuids of the switches to upgrade the software on
        :param accept_eula:    Assertion that the client accepts the end user license agreement (EULA)
        for the software to be staged in the request. A value of false indicates the user does not accept
        the agreement, and the request will be denied.  Defaults to true.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/upgrades?accept_eula={}'.format(accept_eula)
        body = {'groups': [{'switches': switch_uuids,
                            'mode': 'parallel'}]}
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api upload switch software image")
    def plexxi_api_upload_switch_software_image(self, imagefile, name, **kwargs):
        """
        Uploads switch image software to the appliance for staging\updating on switches
        :param imagefile:  the canonical filename of the software image to upload
        :param name:  the name to assign to the image
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/software/images/{}'.format(name)
        headers = self._headers.copy()
        headers['Content-Type'] = 'application/octet-stream'
        return self.put_file(headers=headers, file=imagefile, stream=True, **kwargs)

    @connected
    @keyword(name="plexxi api replace switch")
    def plexxi_api_replace_switch(self, body, force='true', **kwargs):
        """
        Replace a Switch by the UUID, this will make the new switch inherit UUID and all associated configuration
        will be reconciled on the new switch.
        :param body:   dict payload containing 'current_switch_uuid' and 'replacement_switch_uuid'.
        :param force:   Force a switch replacement in the system. (May be needed in the event the user wishes to
        replace the switch while other switches within the fabric can see it.)
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/switches/replacement?force={}'.format(force)
        return self.post(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Syslog Client Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete syslog client configuration")
    def plexxi_api_delete_syslog_client_configuration(self, uuid, **kwargs):
        """
        Delete a Syslog client configuration by UUID
        :param uuid: UUID of the configuration to delete
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/syslog_client_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get syslog client configurations")
    def plexxi_api_get_syslog_client_configurations(self, uuid='', **kwargs):
        """
        Get all Syslog objects, or a single object if UUID is provided
        :param uuid: the UUID of the object to retrieve.  All objects are retrieved if empty.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/syslog_client_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add syslog client configuration")
    def plexxi_api_add_syslog_client_configuration(self, body, **kwargs):
        """
        Add a new Syslog object
        :param body: the request body of the object to create.
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/syslog_client_configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update syslog client configuration")
    def plexxi_api_update_syslog_client_configuration(self, body, uuid, **kwargs):
        """
        Update a Syslog object by UUID
        :param body: the request body of the object to update.
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response of the request
        """
        kwargs['uri'] = '/syslog_client_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # TACACS Configurations
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete tacacs configuration")
    def plexxi_api_delete_tacacs_configuration(self, uuid, **kwargs):
        """
        Deletes a single TACACS configuration object.
        :param uuid:  The UUID of the TACACS object to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tacacs_configurations/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get tacacs configurations")
    def plexxi_api_get_tacacs_configurations(self, uuid='', **kwargs):
        """
        Retrieve an array of TACACS objects, or if UUID is provided, a single object
        :param uuid: the UUID of the object to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tacacs_configurations/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add tacacs configuration")
    def plexxi_api_add_tacacs_configuration(self, body, **kwargs):
        """
        Add a new TACACS configuration object
        :param body:  the request body to create a TACACS configuration object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tacacs_configurations'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update tacacs configuration")
    def plexxi_api_update_tacacs_configuration(self, body, uuid, **kwargs):
        """
        Updates a TACACS configuration object by UUID
        :param body: the request body to update a TACACS configuration object
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tacacs_configurations/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Tags
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete tag")
    def plexxi_api_delete_tag(self, uuid, **kwargs):
        """
        Delete a tag by UUID and remove from related objects
        :param uuid:  The UUID of the TAG object to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get tags")
    def plexxi_api_get_tag(self, uuid='', **kwargs):
        """
        Retrieve an array of TACACS objects, or if UUID is provided, a single object
        :param uuid: the UUID of the object to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add tag")
    def plexxi_api_add_tag(self, body, **kwargs):
        """
        Add a new Tag object
        :param body:  the request body to create a Tag object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add uuids to tag")
    def plexxi_api_add_uuids_to_tag(self, uuid, body, object_type, **kwargs):
        """
        Add a set of object UUIDs to the object type of the given tag
        :param uuid: the UUID of the tag object to add UUIDs to
        :param body:  the request body to add UUIDs to a Tag object
        :param object_type: the object type to add to the Tag
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags/{}/{}/uuids'.format(uuid, object_type)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update tag")
    def plexxi_api_update_tag(self, uuid, body, **kwargs):
        """
        Updates a Tag object by UUID
        :param body: the request body to update a Tag object
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update uuids for tag")
    def plexxi_api_update_uuids_for_tag(self, uuid, body, object_type, **kwargs):
        """
        Update (replace) the set of object UUIDs for the object type of the given tag
        :param body: the request body to update a Tag object
        :param uuid: the UUID of the object to update
        :param object_type: the object type to add to the Tag
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tags/{}/{}/uuids'.format(uuid, object_type)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Topologies
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete topologies")
    def plexxi_api_delete_toplogies(self, uuid, **kwargs):
        """
        Delete a Topology by UUID and remove from related objects
        :param uuid:  The UUID of the object to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/topologies/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get topologies")
    def plexxi_api_get_topologies(self, uuid='', **kwargs):
        """
        Retrieve an array of Topology objects, or if UUID is provided, a single object
        :param uuid: the UUID of the object to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/topologies/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get topology paths")
    def plexxi_api_get_topology_paths(self, uuid, **kwargs):
        """
        Get links used by a topology using the topology UUID
        :param uuid: the UUID of the object to retrieve.
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/topologies/{}/paths'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add topology")
    def plexxi_api_add_topology(self, body, **kwargs):
        """
        Add a new Topology object
        :param body:  the request body to create a Topology object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/topologies'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update topology")
    def plexxi_api_update_topology(self, body, uuid, **kwargs):
        """
        Update a topology by UUID
        :param body: the request body to update a Topology object
        :param uuid: the UUID of the object to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/topologies/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Traffic Matrices
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete traffic matrix")
    def plexxi_api_delete_traffic_matrix(self, uuid, **kwargs):
        """
        Deletes a single provisioned traffic matrix object.
        :param uuid:  The UUID of the traffic matrix to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/traffic_matrices/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get traffic matrices")
    def plexxi_api_get_traffic_matrices(self, uuid='', **kwargs):
        """
        Retrieve an array of traffic matrix objects, or if UUID is provided, a single object
        :param uuid: the UUID of the traffic matrix to retrieve.  If empty, retrieves all matrices
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/traffic_matrices/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add traffic matrix")
    def plexxi_api_add_traffic_matrix(self, body, **kwargs):
        """
        Add a new traffic matrix object
        :param body:  the request body to create a traffic matrix object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/traffic_matrices'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update traffic matrix")
    def plexxi_api_update_traffic_matrix(self, body, uuid, **kwargs):
        """
        Updates a traffic matrix object by UUID
        :param body: the request body to update a traffic matrix object
        :param uuid: the UUID of the traffic matrix to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/traffic_matrices/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Tranceivers
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get tranceivers")
    def plexxi_api_get_tranceivers(self, **kwargs):
        """
        Retrieve an array of tranceiver objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/tranceivers'
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Users
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete user")
    def plexxi_api_delete_user(self, uuid, **kwargs):
        """
        Delete a user by UUID
        :param uuid:  The UUID of the user to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get users")
    def plexxi_api_get_users(self, uuid='', **kwargs):
        """
        Retrieve an array of user objects, or if UUID is provided, a single object
        :param uuid: the UUID of the user to retrieve.  If empty, retrieves all users
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get current user")
    def plexxi_api_get_current_user(self, **kwargs):
        """
        Get the current user
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/current'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add user")
    def plexxi_api_add_user(self, body, **kwargs):
        """
        Add a new user
        :param body:  the request body to create a user object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api change current user password")
    def plexxi_api_change_current_user_password(self, body, **kwargs):
        """
        Change the password of the logged in user
        :param body:  the request body to change a user password
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/current/change_password'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update current user preferences")
    def plexxi_api_update_current_user_preferences(self):
        """
        *** For Composable Fabric Manager UI Use Only ***
        :return:
        """
        log.info('Per documentation, for UI use only')

    @connected
    @keyword(name="plexxi api update user")
    def plexxi_api_update_user(self, body, uuid, **kwargs):
        """
        Updates a user object by UUID
        :param body: the request body to update a user object
        :param uuid: the UUID of the user to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/users/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Versions
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get versions")
    def plexxi_api_get_versions(self, **kwargs):
        """
        Get the Composable Fabric Manager API Version
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/versions'
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # VLAN Groups
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete vlan group")
    def plexxi_api_delete_vlan_group(self, uuid, **kwargs):
        """
        Delete a VLAN group by UUID
        :param uuid:  The UUID of the VLAN group to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_groups/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get vlan groups")
    def plexxi_api_get_vlan_groups(self, uuid='', **kwargs):
        """
        Retrieve an array of VLAN group objects, or if UUID is provided, a single object
        :param uuid: the UUID of the VLAN group to retrieve.  If empty, retrieves all VLAN groups
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_groups/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add vlan group")
    def plexxi_api_add_vlan_group(self, body, **kwargs):
        """
        Add a VLAN group object
        :param body:  the request body to create a VLAN group object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_groups/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vlan group")
    def plexxi_api_update_vlan_group(self, body, uuid, **kwargs):
        """
        Updates a VLAN group object by UUID
        :param body: the request body to update a VLAN group object
        :param uuid: the UUID of the VLAN group to update
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_groups/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # VLAN Properties
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get vlan properties")
    def plexxi_api_get_vlan_properties(self, fabric_uuid='', **kwargs):
        """
        Retrieve an array of VLAN property objects
        :param fabric_uuid: the fabric UUID of the VLAN properties to retrieve.
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_properties/{}'.format(fabric_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api update vlan properties")
    def plexxi_api_update_vlan_properties(self, body, fabric_uuid, **kwargs):
        """
        Updates a VLAN properties
        :param body: the request body to update a VLAN properties object
        :param fabric_uuid: the fabric UUID of the VLAN properties to update.
        :param kwargs:  api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vlan_properties/{}'.format(fabric_uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # VMKernal Adapters
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get vmware vmkernel adapters")
    def plexxi_api_get_vmware_vmkernel_adapters(self, uuid='', **kwargs):
        """
        Retrieve an array of VMKernel Adapter objects, or if UUID is provided, a single object
        :param uuid: the UUID of the VMKernel Adapter to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vmkernel_adapters/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # VMs
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get vmware vms")
    def plexxi_api_get_vmware_vms(self, uuid='', **kwargs):
        """
        Retrieve an array of virtual machine objects, or if UUID is provided, a single object
        :param uuid: the UUID of the virtual machine to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vms/{}'.format(uuid)
        return self.get(**kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # VPCs
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete vpc")
    def plexxi_api_delete_vpc(self, vpc_uuid, **kwargs):
        """
        Delete a VPC object by UUID
        :param vpc_uuid:  The UUID of the VPC object to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}'.format(vpc_uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete vpc ip interfaces")
    def plexxi_api_delete_vpc_ip_interfaces(self, vpc_uuid, ifuuid='', **kwargs):
        """
        Delete IP Interfaces on a VPC object
        :param vpc_uuid:  The UUID of the VPC object to delete interfaces from
        :param ifuuid: The UUID of the Interface to delete from the VPC. If empty, all interfaces are deleted.
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_interfaces/{}'.format(vpc_uuid, ifuuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete vpc ip static routes")
    def plexxi_api_delete_vpc_static_routes(self, vpc_uuid, route_uuid='', **kwargs):
        """
        Delete IP Static Routes on a VPC object
        :param vpc_uuid:  The UUID of the VPC object to delete routes from
        :param route_uuid: The UUID of the IP Static Route to delete from the VPC. If empty, all routes are deleted.
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_static_routes/{}'.format(vpc_uuid, route_uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api delete vpc ospf area configuration")
    def plexxi_api_delete_vpc_ospf_area_configuration(self, vpc_uuid, area_uuid, **kwargs):
        """
        Delete OSPF areas configuration on a VPC object
        :param vpc_uuid:  The UUID of the VPC object to delete OSPF areas from
        :param area_uuid: The UUID of OSPF area for which to delete configuration
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/area/{}'.format(vpc_uuid, area_uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get vpcs")
    def plexxi_api_get_vpcs(self, vpc_uuid='', **kwargs):
        """
        Retrieve an array of VPC objects, or if UUID is provided, a single object
        :param vpc_uuid: the UUID of the VPC to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc reserved mac addresses")
    def plexxi_api_get_vpc_reserved_mac_addresses(self, **kwargs):
        """
        Get a list of reserved Virtual MAC Addresses
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/mac_addresses'
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc bgp configuration")
    def plexxi_api_get_vpc_bgp_configuration(self, vpc_uuid, **kwargs):
        """
        Retrieve VPC's global BGP configuration
        :param vpc_uuid: the UUID of the VPC to retrieve BGP config for
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc bgp intra-fabric configuration")
    def plexxi_api_get_vpc_bgp_intra_fabric_configuration(self, vpc_uuid, **kwargs):
        """
        Retrieve VPC's intra-fabric BGP configuration
        :param vpc_uuid: the UUID of the VPC to retrieve BGP intra-fabric config for
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/intra_fabric'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc bgp switch configuration")
    def plexxi_api_get_vpc_bgp_switch_configuration(self, vpc_uuid, switch_uuid, **kwargs):
        """
        Retrieve VPC's switch-level configuration
        :param vpc_uuid: the UUID of the VPC to retrieve BGP config for
        :param switch_uuid: UUID of switch for which BGP config is being retrieved
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/{}'.format(vpc_uuid, switch_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc bgp status")
    def plexxi_api_get_vpc_bgp_status(self, vpc_uuid, **kwargs):
        """
        Retrieve VPC's BGP state
        :param vpc_uuid: the UUID of the VPC to retrieve BGP status config for
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/status'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ip interfaces")
    def plexxi_api_get_vpc_ip_interfaces(self, vpc_uuid, if_uuid, **kwargs):
        """
        Retrieve VPC's Interface by UUID
        :param vpc_uuid: the UUID of the VPC to retrieve an Interface for
        :param if_uuid: UUID of Interface to retrieve
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_interfaces/{}'.format(vpc_uuid, if_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ip static routes")
    def plexxi_api_get_vpc_ip_static_routes(self, vpc_uuid, route_uuid, **kwargs):
        """
        Get an IP Static Route object associated with a VPC by UUID
        :param vpc_uuid: the UUID of the VPC to retrieve an route for
        :param route_uuid: UUID of the route to retrieve
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_static_routes/{}'.format(vpc_uuid, route_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ospf configuration")
    def plexxi_api_get_vpc_ospf_configuration(self, vpc_uuid, **kwargs):
        """
        Retrieve the global OSPF configuration for a Virtual Private Cloud
        :param vpc_uuid: the UUID of the VPC to retrieve an OSPF config for
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ospf area configuration")
    def plexxi_api_get_vpc_ospf_area_configuration(self, vpc_uuid, area_uuid, **kwargs):
        """
        Get OSPF areas configuration for a virtual private cloud
        :param vpc_uuid: the UUID of the VPC to retrieve an OSPF area for
        :param route_uuid: UUID of the OSPF area to retrieve
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/area/{}'.format(vpc_uuid, area_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ospf status")
    def plexxi_api_get_vpc_ospf_status(self, vpc_uuid, **kwargs):
        """
        Retrieve OSPF status information for a virtual private cloud
        :param vpc_uuid: the UUID of the VPC to retrieve an OSPF status for
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/status'.format(vpc_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ospf switch configuration")
    def plexxi_api_get_vpc_ospf_switch_configuration(self, vpc_uuid, switch_uuid, **kwargs):
        """
        Retrieve OSPF switch configuration for a virtual private cloud
        :param vpc_uuid: the UUID of the VPC to retrieve OSPF config for
        :param switch_uuid: UUID of switch for which OSPF config is being retrieved
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/{}'.format(vpc_uuid, switch_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api get vpc ospf switch interface configuration")
    def plexxi_api_get_vpc_ospf_switch_interface_configuration(self, vpc_uuid, switch_uuid, if_uuid, **kwargs):
        """
        Retrieve OSPF interface configuration virtual private cloud
        :param vpc_uuid: the UUID of the VPC to retrieve OSPF config for
        :param switch_uuid: UUID of switch for which OSPF config is being retrieved
        :param if_uuid: UUID of interface for which OSPF configuration is being retrieved
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/{}/interface/{}'.format(vpc_uuid, switch_uuid, if_uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api add vpc")
    def plexxi_api_add_vpc(self, body, **kwargs):
        """
        Add a new VPC object
        :param body:  the request body to create a VPC object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add vpc ip interfaces")
    def plexxi_api_add_vpc_ip_interfaces(self, body, vpc_uuid, **kwargs):
        """
        Create one or more VPC IP Interface objects
        :param body:  the request body to create a IP Interface object
        :param vpc_uuid: UUID of VPC in which interfaces are to be created
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_interfaces'.format(vpc_uuid)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add vpc ip static routes")
    def plexxi_api_add_vpc_static_routes(self, body, vpc_uuid, **kwargs):
        """
        Create one or more IP Static Route objects
        :param body:  the request body to create a IP Static route object
        :param vpc_uuid: UUID of VPC in which routes are to be created
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_static_routes'.format(vpc_uuid)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add vpc ospf area configuration")
    def plexxi_api_add_vpc_ospf_area_configuration(self, body, vpc_uuid, **kwargs):
        """
        Create OSPF area configuration for a virtual private cloud
        :param body:  the request body to create a OSPF area object
        :param vpc_uuid: UUID of VPC in which OSPF areas are to be created
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/area'.format(vpc_uuid)
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc")
    def plexxi_api_update_vpc(self, body, vpc_uuid, **kwargs):
        """
        Update a VPC object by UUID
        :param body:  the request body to update a VPC object
        :param vpc_uuid: UUID of VPC to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}'.format(vpc_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc bgp configuration")
    def plexxi_api_update_vpc_bgp_configuration(self, body, vpc_uuid, **kwargs):
        """
        Update VPC's global BGP configuration
        :param body:  the request body to update a VPC's BGP config object
        :param vpc_uuid: UUID of VPC to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp'.format(vpc_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc bgp intra-fabric configuration")
    def plexxi_api_update_vpc_bgp_intra_fabric_configuration(self, body, vpc_uuid, **kwargs):
        """
        Update VPC's intra-fabric BGP configuration
        :param body:  the request body to update a VPC's BGP fabric config object
        :param vpc_uuid: UUID of VPC to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/intra_fabric'.format(vpc_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc bgp switch configuration")
    def plexxi_api_update_vpc_bgp_switch_configuration(self, body, vpc_uuid, switch_uuid, **kwargs):
        """
        Update VPC's switch-level BGP configuration
        :param body:  the request body to update a VPC's BGP switch-level config object
        :param vpc_uuid: UUID of VPC to update
        :param switch_uuid: the UUID of switch for which BGP config is being updated
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/{}'.format(vpc_uuid, switch_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api reset vpc bgp neighbor")
    def plexxi_api_reset_vpc_bgp_neighbor(self, body, vpc_uuid, switch_uuid, neighbor_ip, **kwargs):
        """
        Perform reset on a BGP neighbor
        :param body:  the request body to reset a VPC's BGP neighbor
        :param vpc_uuid: UUID of VPC to update
        :param switch_uuid: the UUID of switch for which BGP neighbor is being reset
        :param neighbor_ip: IP address of BGP neighbor to be reset
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/bgp/{}/neighbor_reset/{}'.format(vpc_uuid, switch_uuid, neighbor_ip)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ip interface")
    def plexxi_api_update_vpc_ip_interface(self, body, vpc_uuid, if_uuid, **kwargs):
        """
        Update an VPC Interface specified by unique identifier
        :param body:  the request body to update a VPC's BGP Interface config object
        :param vpc_uuid: UUID of VPC to update
        :param if_uuid: UUID of Interface to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_interfaces/{}'.format(vpc_uuid, if_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ip static routes")
    def plexxi_api_update_vpc_ip_static_routes(self, body, vpc_uuid, route_uuid, **kwargs):
        """
        Update an IP Static Route object associated with a VPC by UUID
        :param body:  the request body to update a VPC's BGP static route config object
        :param vpc_uuid: UUID of VPC to update
        :param route_uuid: UUID of route to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ip_static_routes/{}'.format(vpc_uuid, route_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ospf configuration")
    def plexxi_api_update_vpc_ospf_configuration(self, body, vpc_uuid, **kwargs):
        """
        Update global OSPF configuration for a virtual private cloud
        :param body:  the request body to update a VPC's OSPF config object
        :param vpc_uuid: UUID of VPC to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf'.format(vpc_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ospf area configuration")
    def plexxi_api_update_vpc_ospf_area_configuration(self, body, vpc_uuid, area_uuid, **kwargs):
        """
        Update OSPF area configuration for a virtual private cloud
        :param body:  the request body to update a VPC's OSPF area config object
        :param vpc_uuid: UUID of VPC to update
        :param area_uuid: UUID of area to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/area/{}'.format(vpc_uuid, area_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ospf switch configuration")
    def plexxi_api_update_vpc_ospf_switch_configuration(self, body, vpc_uuid, switch_uuid, **kwargs):
        """
        Update OSPF switch configuration for a virtual private cloud
        :param body:  the request body to update a VPC's OSPF switch config object
        :param vpc_uuid: UUID of VPC to update
        :param switch_uuid: UUID of switch to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/{}'.format(vpc_uuid, switch_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api update vpc ospf switch interface configuration")
    def plexxi_api_update_vpc_ospf_switch_interface_configuration(self, body, vpc_uuid, switch_uuid, if_uuid, **kwargs):
        """
        Update OSPF interface configuration for a virtual private cloud
        :param body:  the request body to update a VPC's OSPF interface config object
        :param vpc_uuid: UUID of VPC to update
        :param switch_uuid: UUID of switch to update
        :param if_uuid: UUID of interface for which OSPF config is being updated
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/{}/interface/{}'.format(vpc_uuid, switch_uuid, if_uuid)
        return self.put(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api reset vpc ospf switch interface")
    def plexxi_api_reset_vpc_ospf_switch_interface(self, body, vpc_uuid, switch_uuid, if_uuid, **kwargs):
        """
        Reset OSPF interface properties
        :param body:  the request body to reset a VPC's OSPF interface config object
        :param vpc_uuid: UUID of VPC to update
        :param switch_uuid: UUID of switch to update
        :param if_uuid: UUID of interface for which OSPF config is being reset
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vpcs/{}/ospf/{}/interface_reset/{}'.format(vpc_uuid, switch_uuid, if_uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # vSphere Configuration
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api delete vmware vsphere configuration")
    def plexxi_api_get_vmware_vsphere_configuration(self, uuid, **kwargs):
        """
        Delete a VMware vSphere configuration by UUID
        :param uuid:  The UUID of the vSphere object to delete
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vcenters/{}'.format(uuid)
        return self.delete(**kwargs)

    @connected
    @keyword(name="plexxi api get vmware vsphere configurations")
    def plexxi_api_get_vmware_vsphere_configurations(self, uuid='', **kwargs):
        """
        Retrieve an array of vSphere config objects, or if UUID is provided, a single object
        :param vpc_uuid: the UUID of the vSphere config to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vcenters/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api register vmware vsphere web client plugin")
    def plexxi_api_register_vmware_vsphere_web_client_plugin(self, body, **kwargs):
        """
        Register the Composable Fabric Manager vSphere Web Client Plugin with vCenter
        :param body:  the request body to create a vSphere config object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/plugin/register'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api add vmware vsphere configuration")
    def plexxi_api_add_vmware_vsphere_configuration(self, body, **kwargs):
        """
        Add a new VMware vSphere configuration
        :param body:  the request body to create a vSphere config object
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vcenters/'
        return self.post(body=body, **kwargs)

    @connected
    @keyword(name="plexxi api register vmware vsphere plugin")
    def plexxi_api_register_vmware_vsphere_plugin(self, uuid, **kwargs):
        """
        Register the Composable Fabric Manager vSphere Client Plugin by UUID
        :param body:  the request body to register a vSphere config object
        :param uuid: UUID of configuration to use for registration
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vcenters/{}/register'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api verify vmware vsphere configuration")
    def plexxi_api_verify_vmware_vsphere_configuration(self, uuid, **kwargs):
        """
         Verify connectivity of a VMware vSphere configuration by UUID
         :param uuid: UUID of configuration to verify
         :param kwargs: api, headers, param
         :return: response for the request
         """
        kwargs['uri'] = '/vmware/vcenters/{}/verify'.format(uuid)
        return self.post(**kwargs)

    @connected
    @keyword(name="plexxi api update vmware vsphere configuration")
    def plexxi_api_update_vmware_vsphere_confiuration(self, body, uuid, **kwargs):
        """
        Update a VMware vSphere configuration by UUID
        :param body:  the request body to update a vSphere config object
        :param uuid: UUID of configuration to update
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vmware/vcenters/{}'.format(uuid)
        return self.put(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Virtual Switches
    # ------------------------------------------------------------------------------------------------------------------
    @connected
    @keyword(name="plexxi api get vmware virtual switches")
    def plexxi_api_get_vmware_virtual_switches(self, uuid='', **kwargs):
        """
        Retrieve an array of Virtual switch objects, or if UUID is provided, a single object
        :param vpc_uuid: the UUID of the Virtual switch to retrieve.  If empty, retrieves all objects
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vswitches/{}'.format(uuid)
        return self.get(**kwargs)

    @connected
    @keyword(name="plexxi api patch vmware virtual switches")
    def plexxi_api_patch_vmware_virtual_switches(self, body, **kwargs):
        """
        Path request to update one or more virtual switches
        :param body: the request body to Apply an array of patches to virtual switch resources.
        :param kwargs: api, headers, param
        :return: response for the request
        """
        kwargs['uri'] = '/vswitches'
        return self.patch(body=body, **kwargs)

    # ------------------------------------------------------------------------------------------------------------------
    # Other
    # ------------------------------------------------------------------------------------------------------------------
    def _set_req_api_version(self, api=None):
        """ internal method to set the api version for a request """
        headers = self._headers.copy()
        if api:
            headers['Accept'] = 'application/json;version={}'.format(str(api))
        return headers

    def _validate_version(self, api):
        """ internal method to validate an api version """
        version = self.get(uri='/versions')
        if str(api) not in version['result']['supported']:
            raise Exception('Unsupported API Version')

    def _current_version(self, **kwargs):
        """ internal method to get the current api version of an appliance """
        version = self.get(uri='/versions', **kwargs)
        if 'current' in version['result']:
            return str(version['result']['current'])
        raise Exception("Cannot find 'current' in /versions")

    def _set_def_api_version(self, api=None):
        """ internal method to set the default api version """
        if not api:
            try:   # allows non-RG uses of PlexxiLibrary
                if BuiltIn().get_variable_value("${PLX-API-VERSION}") is not None:
                    api = str(BuiltIn().get_variable_value("${PLX-API-VERSION}"))
                else:
                    api = self._current_version()
            except:   # noqa
                api = self._current_version()
        self._headers['Accept'] = 'application/json; version={}'.format(str(api))
        return self._headers

    @keyword(name="plexxi api get default headers")
    def plexxi_api_get_default_headers(self):
        """
        Retrieves the default headers
        :return: header dict
        """
        return self._headers

    @keyword(name="plexxi api set default headers")
    def plexxi_api_set_default_headers(self, headers):
        """
        Sets the default headers for all future requests
        :param headers:  header dict
        :return:
        """
        self._headers = headers

    def _arg_handler(decorated):     # pylint: disable=E0213
        """
        Decorator which handles common arguments, ensures headers are set and builds uri string
        :param decorated:
        :return:
        """
        @wraps(decorated)
        def wrapper(self, **kwargs):
            """
            This method does common handling for all requests
            :param self:
            :param kwargs: valid kwargs are: api, body, headers, uri, param

            :return:
            """
            api = kwargs.get('api', None)
            body = kwargs.get('body', None)
            headers = kwargs.get('headers', None)
            uri = kwargs.get('uri', None)
            param = kwargs.get('param', '')
            if api:
                headers = self._set_req_api_version(api)
            if not headers:
                headers = self._headers.copy()
            if body is not None:
                kwargs['body'] = json.dumps(body)
            else:
                kwargs['body'] = body
            kwargs['uri'] = 'https://{}/api{}{}'.format(self._host, uri, param)
            kwargs['headers'] = headers
            return decorated(self, **kwargs)   # pylint: disable=E1102
        return wrapper

    @_arg_handler
    @http_request_should_succeed
    def delete(self, **kwargs):
        """ core DELETE method """
        log_request_data(self, method='DELETE', **kwargs)
        return log_resp_data(self._http.delete(kwargs['uri'],
                             verify=False,
                             headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def get(self, **kwargs):
        """ core GET method """
        log_request_data(self, method='GET', **kwargs)
        return log_resp_data(self._http.get(kwargs['uri'],
                             verify=False,
                             headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def patch(self, **kwargs):
        """ core PATCH method """
        log_request_data(self, method='PATCH', **kwargs)
        return log_resp_data(self._http.patch(kwargs['uri'],
                             data=kwargs['body'],
                             verify=False,
                             headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def post(self, **kwargs):
        """ core POST method """
        log_request_data(self, method='POST', **kwargs)
        return log_resp_data(self._http.post(kwargs['uri'],
                             data=kwargs['body'],
                             verify=False,
                             headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def put(self, **kwargs):
        """ core PUT method """
        log_request_data(self, method='PUT', **kwargs)
        return log_resp_data(self._http.put(kwargs['uri'],
                             data=kwargs['body'],
                             verify=False,
                             headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def put_file(self, **kwargs):
        """ core PUT_FILE method """
        log_request_data(self, method='PUT_FILE', **kwargs)
        with open(kwargs['file'], 'rb') as f:
            return log_resp_data(self._http.put(kwargs['uri'],
                                 data=f,
                                 stream=True,
                                 verify=False,
                                 headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def post_file(self, **kwargs):
        """ core POST_FILE method """
        log_request_data(self, method='POST_FILE', **kwargs)
        with open(kwargs['file'], 'rb') as f:
            return log_resp_data(self._http.post(kwargs['uri'],
                                 data=f,
                                 stream=True,
                                 verify=False,
                                 headers=kwargs['headers']))

    @_arg_handler
    @http_request_should_succeed
    def get_file(self, **kwargs):
        """ core GET_FILE method """
        log_request_data(self, method='GET_FILE', **kwargs)
        resp = self._http.get(kwargs['uri'],
                              stream=True,
                              verify=False,
                              headers=kwargs['headers'])

        with open(kwargs['file'], 'wb') as f:
            for chunk in resp.iter_content(chunk_size=1024):
                if chunk:  # filter out keep-alive new chunks
                    f.write(chunk)
                    f.flush()
        return resp.__dict__
