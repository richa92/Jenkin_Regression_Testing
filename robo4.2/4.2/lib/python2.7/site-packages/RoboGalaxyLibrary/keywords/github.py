"""
github.py

robotframework accessible keywords to interact with GitHub Enterprise API

(C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
import json
from os import path, remove
import unittest
if __name__ == '__main__':
    # unit test specific imports and logger settings
    import logging
    import sys
    logger = logging.getLogger(__name__)    # pylint: disable=invalid-name
    logger.setLevel(logging.INFO)
    stream_handler = logging.StreamHandler(sys.stdout)  # pylint: disable=invalid-name
    logger.addHandler(stream_handler)
else:
    from RoboGalaxyLibrary.utilitylib import logging as logger
import requests
from RoboGalaxyLibrary.common import exceptions
from robot.api.deco import keyword

ROOT_URL = 'https://github.hpe.com/api/v3/'


class GitHubRepositoryNotFoundException(exceptions.NonFatalError):

    """ Exception for git hub repo not found """
    pass


class GitHubKeywords(object):

    """
    Keywords to utilize GitHub API
    """
    @staticmethod
    @keyword('Get GitHub Releases')
    def get_releases(repo=None):
        """
        Retrieve the release names for a specific repository.\n
        :param repo: a project/repository partial URL (Example: OneView-TestTools/tru)\n
        :return: list of versions\n

        Examples:
            | =Keyword= | =GitHub Project/Repo= |
            | Get GitHub Releases | OneView-TestTools/tru |
        """
        if repo is None:
            raise exceptions.NonFatalError('No GitHub repository URL provided')
        with requests.Session() as session:
            full_url = ROOT_URL + 'repos/' + repo + '/releases'
            resp = session.get(full_url)
            # check the response status code
            if resp.status_code == 404:
                raise GitHubRepositoryNotFoundException('Repository not found: {}'.format(full_url))
            return [i.get('name') for i in json.loads(resp.text)]

    @staticmethod
    @keyword("Download GitHub Release")
    def download_release(repo=None, file_name=None, version='master', file_type='zipball'):
        """
        Download a release as a zip or tar file\n
        :param repo:  a project/repository partial URL (Example: OneView-TestTools/tru)\n
        :file_name: The local file name to save as\n
        :param version: Optional release version to download (defaults to 'master') (Example: 2.1.1.24)\n
        :param file_type: The file type - one of 'tarball' or 'zipball' (default is zipball)\n
        :return: full local path to downloaded file\n

        Examples:
            | =Keyword= | =Repository= | =Local File Name= | =Version= | =File Type= |
            | Download GitHub Release | OneView-TestTools/tru | tru-2.1.1.20.zip | 2.1.1.20 | zipball |
            | Download GitHub Release | OneView-TestTools/tru | tru.zip |
            | Download GitHub Release | OneView-TestTools/tru | tru.zip | 2.1.1.20 |
        """
        if repo is None:
            raise exceptions.NonFatalError('No GitHub repository URL provided')

        # build the URL
        url = ROOT_URL + 'repos/' + repo.strip('/') + '/' + file_type + '/' + version.strip('/')

        # create the request session
        with requests.Session() as session:
            resp = session.get(url, stream=True)
            if resp.status_code != 200:
                raise exceptions.NonFatalError('Download request to GitHub failed: {}'.format(resp.text))

            # if the filename wasn't set, get the default from the headers
            if file_name is None:
                file_name = resp.headers.get('Content-Disposition').split('=')[-1]

            # save the stream to the output file
            file_path = path.abspath(file_name)
            logger.debug("Downloading %s and saving as %s", url, file_path)
            with open(file_path, 'wb') as fout:
                for chunk in resp.iter_content(chunk_size=1024):
                    if chunk:
                        fout.write(chunk)

        # make sure it downloaded
        if not path.exists(file_path):
            raise exceptions.NonFatalError('Failed to download from {}'.format(url))

        return file_path


class GitHubKeywordsUnitTests(unittest.TestCase):

    """
    Unit tests for the main class
    """

    def test_get_releases(self):
        """ Test the get_releases method """
        with self.assertRaises(GitHubRepositoryNotFoundException):
            GitHubKeywords.get_releases('non-existing-repo')
        self.assertGreater(GitHubKeywords.get_releases('OneView-TestTools/tru'), 0)

    def test_download_release(self):
        """ Test the download_release method """
        # repo not found test
        with self.assertRaises(exceptions.NonFatalError):
            GitHubKeywords.download_release('test')

        # specific zip version
        version = '2.1.1.20'
        file_name = 'tru-{}.zip'.format(version)
        if path.exists(file_name):
            remove(file_name)
        GitHubKeywords.download_release(repo='OneView-TestTools/tru', file_name=file_name, version=version)
        self.assertTrue(path.exists(file_name))
        if path.exists(file_name):
            remove(file_name)

        # specific tar version
        version = '2.1.1.24'
        file_name = 'tru-{}.tar'.format(version)
        if path.exists(file_name):
            remove(file_name)
        ret_file_path = GitHubKeywords.download_release(repo='OneView-TestTools/tru', file_name=file_name, version=version, file_type='tarball')
        self.assertEqual(path.abspath(file_name), ret_file_path)
        self.assertTrue(path.exists(file_name))
        if path.exists(file_name):
            remove(file_name)

        # latest tar version
        ret_file_path = GitHubKeywords.download_release(repo='OneView-TestTools/tru', file_name=file_name, version=version, file_type='tarball')
        self.assertEqual(path.abspath(file_name), ret_file_path)
        self.assertTrue(path.exists(ret_file_path))
        if path.exists(ret_file_path):
            remove(ret_file_path)

        # latest zip version
        file_path = GitHubKeywords.download_release(repo='OneView-TestTools/tru')
        self.assertTrue(path.exists(file_path))
        if path.exists(file_path):
            remove(file_path)

if __name__ == '__main__':
    unittest.main()
