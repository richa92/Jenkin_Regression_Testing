#!/usr/bin/env python27
# (C) Copyright 2018 Hewlett Packard Enterprise Development LP
"""
This module exposes custom Robot Framework keywords to end-users for deploying
VMware vCenter Server Appliance.
"""
from io import BytesIO
from os import path, sep, makedirs
from platform import system
from pycdlib.pycdlibexception import PyCdlibException
from robot.api.deco import keyword
from RoboGalaxyLibrary.utilitylib.exec_process import run_command
from RoboGalaxyLibrary.utilitylib.exec_process import return_command_exit_code
from RoboGalaxyLibrary.utilitylib import logging as log
from tempfile import mkdtemp
from shutil import rmtree
import pycdlib


class VCSAInstallKeywords(object):
    """
    Custom keywords for automated deployment of VCSA
    """
    @staticmethod
    def _shell_cmd(cmd, powershell=False):
        """
        Executes the command using Subprocess module
        :param list cmd: Command to be executed
        :param bool powershell: True when shell should be PowerShell
        :return str: Output of the executed command
        :raise: AssertionError
        """
        r = run_command(cmd, powershell)
        if r.get('return_code') != 0:
            log.warn('Error in executing command.\n {}'.format(r.get('error')))
            raise AssertionError("Command returned with an error.")

        return r

    @staticmethod
    def _extract_iso(fn):
        """
        User specified image is extracted to a temporary location and the path
        is returned to the calling object.
        :param str fn: Absolute path to the installation media
        :return str: Absolute path to the extracted directory
        """
        destn = mkdtemp(prefix='vcsa_iso_')
        iso_p = pycdlib.PyCdlib()
        iso_p.open(fn)

        def _extract_contents(obj):
            """
            Writes the contents to the local storage
            :param obj: drrecord path
            :return: None
            """
            for c in iso_p.list_children(rr_path=obj):
                cd_path = iso_p.full_path_from_dirrecord(c, rockridge=True)
                f = path.join(destn, cd_path.lstrip('/').replace('/', sep))
                if c.is_dir():
                    if not c.is_dot() and not c.is_dotdot():
                        if not path.exists(f):
                            makedirs(f)
                        _extract_contents(cd_path)
                else:
                    log.debug('Copying {}'.format(f))
                    content = BytesIO()
                    iso_p.get_file_from_iso_fp(content, rr_path=cd_path)
                    with open(f, 'wb+') as out:
                        out.write(content.getvalue())
        try:
            _extract_contents('/')
        except PyCdlibException:
            log.debug('Error encountered during image extraction.')
            raise AssertionError('Unable to extract the image.')
        finally:
            iso_p.close()

        return destn

    @staticmethod
    def _clean_up(fn):
        """
        User specified path is un-mounted
        :param list fn: Absolute path to the ISO image or Mounted directory
        :return: None
        """
        for i in fn:
            log.debug('Removing folder: {}'.format(i))
            rmtree(i)

    @keyword(name='VCSA Deploy')
    def vcsa_deploy(self, cfg, iso):
        """
        Keyword to deploy VCSA on an ESXi host

        Example:
          | VCSA Deploy | <json_file> | <iso> |

        :param str cfg: Absolute path to the configuration file
        :param str iso: Absolute path to the ISO image
        :return: None
        """
        if not (path.exists(iso) and iso.endswith('iso')):
            log.info("Invalid image provided. {}".format(iso))
            raise AssertionError('Invalid image provided.')

        if not path.exists(cfg):
            log.info("Configuration file does not exists")
            raise AssertionError('Configuration file does not exists')

        loc = self._extract_iso(iso)
        work_dir = mkdtemp(prefix='vcsa_install_')

        if system() == 'Linux':
            exe = '{}/vcsa-cli-installer/lin64/vcsa-deploy'.format(loc)
        elif system() == 'Windows':
            exe = '{}\\vcsa-cli-installer\win32\\vcsa-deploy.exe'.format(loc)
        else:
            log.info('Unsupported execution environment.')
            raise AssertionError('Unsupported platform')

        c = [exe, 'install', '--accept-eula', '--acknowledge-ceip', '-v',
             '--no-esx-ssl-verify', '--log-dir', work_dir, cfg]
        if return_command_exit_code(c) != 0:
            raise AssertionError('Deployment failed')

        log.info('VCSA Deployment has been completed successfully.')

        self._clean_up([loc, work_dir])
        log.debug('Successfully completed all tasks.')
