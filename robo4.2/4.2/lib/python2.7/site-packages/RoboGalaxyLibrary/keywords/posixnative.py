"""Native keywords for Windows

This module contains Windows specific RoboGalaxy keywords.
"""
import datetime
import os
import re
import subprocess
import unittest

from robot.libraries.BuiltIn import BuiltIn

from RoboGalaxyLibrary.utilitylib import logging as logger


class NativeOsKeywords(object):

    """ This class contains all keywords that are native to the Posix OS
        It utilizes xdotool, which must be installed prior to calling these keywords.

        See: http://www.semicomplete.com/projects/xdotool/xdotool.xhtml
    """
    ROBOT_LIBRARY_SCOPE = 'Global'
    POSIX_WIN_UTIL = "xdotool"

    def _map_string_to_posix_list(self, string):
        key_mapping = {
            "{ALT}": "Alt_L",
            "{BACKSPACE}": "BackSpace",
            "{BS}": "BackSpace",
            "{BKSP}": "BackSpace",
            "{BREAK}": "Break",
            "{CAPSLOCK}": "Caps_Lock",
            "{CLEAR}": "Clear",
            "{DELETE}": "Delete",
            "{DEL}": "Delete",
            "{DOWN}": "Down",
            "{END}": "KP_End",
            "{ENTER}": "KP_Enter",
            "{ESC}": "Escape",
            "{HELP}": "Help",
            "{HOME}": "Home",
            "{INSERT}": "Insert",
            "{INS}": "Insert",
            "{LEFT}": "Left",
            "{NUMLOCK}": "Numlock",
            "{RIGHT}": "Right",
            "{PGUP}": "KP_Page_Up",
            "{PGDN}": "KP_Page_Down",
            "{SPACE}": "KP_Space",
            "{TAB}": "KP_Tab",
            "{UP}": "Up",
            "{F1}": "F1",
            "{F2}": "F2",
            "{F3}": "F3",
            "{F4}": "F4",
            "{F5}": "F5",
            "{F6}": "F6",
            "{F7}": "F7",
            "{F8}": "F8",
            "{F9}": "F9",
            "{F10}": "F10",
            "{F11}": "F11",
            "{F12}": "F12",
            "{+}": "+",
            "{%}": "%",
            "{^}": "^"
        }
        # these are the substitution mappings for the special characters: +, %, ^, and ' '
        key_sub = [
            ('(?:^\+([a-z]))', r'shift+\1'),
            ('^%([a-z])', r'alt+\1'),
            ('^\^([a-z])', r'ctrl+\1'),
            ('\s', 'space')
        ]
        # Chis re checks for any match against the substitution list
        any_match = re.compile("|".join([i[0] for i in key_sub]))
        # Create a list of tokens
        tokens = re.findall("|".join(key_mapping) + "|\+[ -~]" + "|\^[ -~]" + "|%[ -~]" + "|[ -~]", string)
        ret = []
        # Traverse the list of tokens and make any replacements necessary for key modifiers (ctrl+, shift+, alt+)
        for i in tokens:
            if any_match.match(i):
                for k, v in key_sub:
                    if re.match(k, i):
                        print re.sub(k, v, i)
                        ret += [re.sub(k, v, i)]
                        break
            else:
                ret += i
        return ret

    def _execute_posix_win_tool(self, *parameters):
        """ Execute the posix XWin utility
        """
        print parameters
        cmd = [self.POSIX_WIN_UTIL] + list([str(p).strip() for p in parameters])
        logger.debug("Executing '{0}'".format(" ".join(cmd)))
        try:
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (output, err) = p.communicate()
            if err is not None and err.strip() != "":
                logger.warn(err)
            return output
        except OSError as e:
            if e.errno == os.errno.ENOENT:
                raise AssertionError("Failed to find {0}.  Please ensure it's installed to enable native interactions.".format(self.POSIX_WIN_UTIL))

    def send_keys_to_native_window(self, window_name, string):
        """ Send one or more keystrokes to the active window as if they were typed at the keyboard.
            This method is similar to the VB SendKeys method.
            Key          SendKey Equivalent    Description
            ~            {~}                   Send a tilde (~)
            !            {!}                   Send an exclamation point (!)
            ^            {^}                   Send a caret (^)
            +            {+}                   Send a plus sign (+)
            Alt          {ALT}                 Send an Alt keystroke
            Backspace    {BACKSPACE}           Send a Backspace keystroke
            Clear        {CLEAR}               Slear the field
            Delete       {DELETE}              Send a Delete keystroke
            Down Arrow   {DOWN}                Send a Down Arrow keystroke
            End          {END}                 Send an End keystroke
            Enter        {ENTER}               Send an Enter keystroke
            Escape       {ESCAPE}              Send an Esc keystroke
            F1 through F16    {F1} through {F16}   Send the appropriate Function key
            Page Down    {PGDN}                Send a Page Down keystroke
            Space        {SPACE}               Send a Spacebar keystroke
            Tab          {TAB}                 Send a Tab keystroke

            For SHIFT prefix with +
            For CTRL  prefix with ^
            For ALT   prefix with %
            Example:
                | Send Keys to Window | Mozilla Firefox | This is a test |
        """

        win = self.focus_native_window(window_name)
        if win is None:
            return False
        cmd = ['type', '--window', str(win)]
        mapped_keys = self._map_string_to_posix_list(string)
        cmd += mapped_keys
        logger.debug("Sending '{0}' to window '{1}'".format(mapped_keys, win))
        ret = self._execute_posix_win_tool(*cmd)
        return ret

    def left_click_native(self, window_name, x, y):
        """ Click the left mouse button on a screen location relative to the window
            Example:
            | Left Click Native | Calculator | 320 | 240 |
        """
        win = self.focus_native_window(window_name)
        self._execute_posix_win_tool('mousemove', '--window', win, '--sync', 0, 0)
        ret = self._execute_posix_win_tool('mousemove', '--window', win, '--sync', x, y)
        self._execute_posix_win_tool('click', 1)
        return ret

    def right_click_native(self, window_name, x, y):
        """ Click the left mouse button on a screen location relative to the window
            Example:
            | Right Click Native | Calculator | 320 | 240 |
        """
        win = self.focus_native_window(window_name)
        self._execute_posix_win_tool('mousemove', '--window', win, '--sync', 0, 0)
        self._execute_posix_win_tool('mousemove', '--window', win, '--sync', x, y)
        self._execute_posix_win_tool('click', 3)

    def focus_native_window(self, window_name):
        """ Bring the specified window into focus.
            Example:
            | Focus Native Window | Mozilla Firefox |
            | Focus Native Window | gedit |
        """
        win = self.find_native_window(window_name)
        if win is not None:
            logger.debug("Focusing window {0}".format(win))
            self._execute_posix_win_tool('windowactivate', '--sync', '{0}'.format(win))
            return win

    def find_native_window(self, window_name, timeout=5):
        """ Find the native window (and wait to become visible)
            Example:
            | Find Native Window | Calculator |
            | Find Native Window | GEdit | timeout=10
        """
        start = datetime.datetime.now()
        seconds = 0
        hwnd = None
        while hwnd is None and seconds < timeout:
            logger.debug('Waiting {0}s -> {1:.02f}s'.format(timeout, seconds))
            hwnd = self._execute_posix_win_tool('search', '--name', window_name)
            if len(hwnd.strip()) == 0:
                hwnd = None
            logger.debug('Window handle = "{0}"'.format(hwnd))
            seconds = (datetime.datetime.now() - start).total_seconds()
            BuiltIn().sleep(0.5)
        if hwnd == 0 or hwnd is None:
            logger.debug("Failed to find native window '{0}'.".format(window_name))
            return None
        logger.debug("Found native window '{0}'. Handle is {1}".format(window_name, hwnd))
        return int(hwnd.strip())

    def native_window_should_exist(self, window_name):
        """ Ensure a window exists
            Example:
            | Native Window Should Exist | Calculator |
        """
        # since wait_for_native_window raises an exception, we call it here
        if self.find_native_window(window_name) is None:
            raise AssertionError("Window '{0}' should exist but it does not".format(window_name))

    def native_window_should_not_exist(self, window_name):
        """ Ensure a window exists
            Example:
            | Native Window Should Exist | Calculator |
        """
        # since wait_for_native_window raises an exception, we call it here
        if self.find_native_window(window_name) is not None:
            raise AssertionError("Window '{0}' should not exist but it does".format(window_name))

    def get_current_native_window_focus(self):
        """ Return the window ID for the topmost window
        """
        return int(self._execute_posix_win_tool('getwindowfocus'))

    def get_current_native_window_name(self):
        """ Return the currently focused window name
        """
        return self._execute_posix_win_tool('getwindowname', self.get_current_native_window_focus()).strip()


class PosixNativeTest(unittest.TestCase):

    def test_find_native_window(self):
        proc = subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        win = NativeOsKeywords().find_native_window('Calculator')
        self.assertIsNotNone(win)
        BuiltIn().sleep(2)
        proc.kill()
        BuiltIn().sleep(2)

    def test_send_keys_to_native_window(self):
        native = NativeOsKeywords()
        current_window = native.get_current_native_window_name()
        proc = subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        native.send_keys_to_native_window("Calculator", "^e")
        native.send_keys_to_native_window("Calculator", "123")
        native.send_keys_to_native_window("Calculator", "{+}")
        native.send_keys_to_native_window("Calculator", "456")
        native.send_keys_to_native_window("Calculator", "=")

        BuiltIn().sleep(2)
        proc.kill()
        native.focus_native_window(current_window)
        BuiltIn().sleep(2)

    def test_left_click_native(self):
        subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        NativeOsKeywords().find_native_window('Calculator')
        NativeOsKeywords().left_click_native('Calculator', 15, -15)
        BuiltIn().sleep(2)
        NativeOsKeywords().native_window_should_not_exist('Calculator')

    def test_right_click_native(self):
        subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        NativeOsKeywords().find_native_window('Calculator')
        NativeOsKeywords().right_click_native('Calculator', 15, -15)
        BuiltIn().sleep(2)
        NativeOsKeywords().native_window_should_not_exist('Calculator')

    def test_focus_native_window(self):
        native = NativeOsKeywords()
        root_hwnd = native.get_current_native_window_focus()
        root_name = native.get_current_native_window_name()
        proc = subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        self.assertNotEqual(root_hwnd, native.get_current_native_window_focus(), "Original window is still focused")
        win = native.find_native_window('Calculator')
        self.assertIsNotNone(win, 'Failed to find calculator window')
        self.assertNotEqual(0, win, 'Failed to find calculator window')
        native.focus_native_window('Calculator')
        new_win = native.get_current_native_window_focus()
        self.assertNotEqual(root_hwnd, new_win, "Failed to focus calculator")
        native.focus_native_window(root_name)
        self.assertEqual(root_hwnd, native.get_current_native_window_focus(), "Failed to focus root window")
        proc.kill()
        BuiltIn().sleep(2)
        self.assertRaises(AssertionError, native.focus_native_window('Calculator'))

    def test_native_window_should_functions(self):
        native = NativeOsKeywords()
        proc = subprocess.Popen('xcalc', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        BuiltIn().sleep(2)
        native.native_window_should_exist('Calculator')
        proc.kill()
        BuiltIn().sleep(2)
        native.native_window_should_not_exist('Calculator')

if __name__ == '__main__':
    unittest.main()
