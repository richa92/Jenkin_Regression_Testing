# from cgi import escape
from os import path
import os
from glob import glob
import re
import subprocess
import shutil
"""Library for SAW wrapper for RoboGalaxy

    = Table of contents =

    - `Usage`
    - `Valid log levels`
    - `Examples`
    - `Importing`
    - `Shortcuts`
    - `Keywords`

    = Usage =

    This library has keywords for execution SAW testsets from Robot

    = Valid log levels =

    None

    = Examples =

    | `run_saw_test` | saw_home | config_name | data_file | mode | count | fusion_ip | altair_ip |

"""
from robot.api import logger
import xml.etree.ElementTree as et


class FatalError(RuntimeError):

    """ Used for fatal exceptions """
    ROBOT_EXIT_ON_FAILURE = True


class SawKeywords:

    """SAW wrapper for RoboGalaxy"""

    def __init__(self, saw_home='c:\\cosmos\\powershell\\saw'):
        self.saw_home = saw_home
        self.saw_report_folder = path.join(saw_home, 'report')
        self.saw_exe = path.join(saw_home, 'saw.exe')

    def _verify_run(self, config_file, run_name):
        doc = et.parse(path.join(self.saw_home, config_file))
        # find the setup used by the specified run
        run = doc.find('runs/run[@name="{0}"]'.format(run_name))
        if run is None:
            raise FatalError(
                'Failed to find run "{0}" in {1}'.format(
                    run_name,
                    config_file))

    def _set_data_file(self, config_file, run_name, data_file):
        doc = et.parse(path.join(self.saw_home, config_file))
        # find the setup used by the specified run
        run = doc.find('runs/run[@name="{0}"]'.format(run_name))
        if run.attrib['datafile'] != data_file:
            logger.console(
                'Setting data file in {0} for run {1} to {2}'.format(
                    config_file,
                    run_name,
                    data_file))
            run.attrib['datafile'] = data_file
            doc.write(path.join(self.saw_home, config_file))

    def _set_cic_ip(self, config_file, setup_name, cic_ip):
        doc = et.parse(path.join(self.saw_home, config_file))
        setup = doc.find('setups/setup[@name="{0}"]'.format(setup_name))
        if setup is None:
            raise Exception(
                'Failed to locate "fusion" setup in {0}'.format(config_file))
        if setup.attrib['cic'] != cic_ip:
            logger.console('Setting IP for {0} setup "{1}" to {2}'.format(
                config_file, setup_name, cic_ip))
            setup.attrib['cic'] = cic_ip
            doc.write(path.join(self.saw_home, config_file))

    def run_saw_test(self,
                     saw_home,
                     config_file,
                     run_name,
                     data_file=None,
                     mode='run',
                     count=1,
                     debug=False,
                     fusion_ip=None,
                     altair_ip=None):
        """ Execute a SAW test

        Example:
        | `run_saw_test`      | saw_home | config_name | data_file | mode | count | fusion_ip | altair_ip |
        """
        saw_exe = path.join(saw_home, 'saw.exe')
        logger.console('')
        fail = 0
        logger.console('Running SAW Test')
        logger.console('Config File: {0}'.format(config_file))
        logger.console('Run:         {0}'.format(run_name))
        logger.console('Fusion IP:   {0}'.format(fusion_ip))
        logger.console('Altair IP:   {0}'.format(altair_ip))
        logger.console('Data File:   {0}'.format(data_file))
        logger.console('Mode:        {0}'.format(mode))
        logger.console('Count:       {0}'.format(count))
        logger.console('Executing {0}'.format(saw_exe))

        # validate the run
        self._verify_run(config_file, run_name)

        # if the data file or CIC ip is set, then write them to the SAW config
        # file
        if data_file is not None:
            self._set_data_file(config_file, run_name, data_file)
        if fusion_ip is not None:
            self._set_cic_ip(config_file, 'fusion', fusion_ip)
        if altair_ip is not None and re.match(
                '[0-9]+.[0-9]+.[0-9]+.[0-9]+',
                altair_ip) is not None:
            self._set_cic_ip(config_file, 'altair', altair_ip)

        # build the list of parameters
        saw_params = [saw_exe,
                      '-mode', mode,
                      '-run', run_name,
                      '-file', config_file,
                      '-count', count,
                      '-datafile',
                      data_file]
        if debug:
            saw_params += '-debug'

        # start the SAW subprocess
        proc = subprocess.Popen(saw_params,
                                shell=False,
                                cwd=self.saw_home,
                                stdout=subprocess.PIPE)

        # parse the output for failed testcases
        error_text = ""
        while True:
            line = proc.stdout.readline().rstrip()
            if line == '' and proc.poll() is not None:
                break
            if len(line) > 0:
                logger.console(line)
                logger.info(line)

            if re.match('^FAIL', line):
                fail += 1
                error_text += line + '\n'
            if re.match('^TESTCASE <', line):
                if re.match('.* == FAIL$', line):
                    fail += 1
                    error_text += line + '\n'

        # get the name of the report folder (it's the one with the latest date)
        report_folder = sorted([name for name in glob(path.join(self.saw_report_folder,
                                                                '*')) if path.isdir(path.join(self.saw_report_folder,
                                                                                              name))],
                               key=path.getmtime)[-1]
        logger.console('SAW Report folder: {0}'.format(report_folder))

        # copy the results if executed from Jenkins
        if 'WORKSPACE' in os.environ:
            logger.info(
                'Copying SAW report to {0}'.format(os.environ['WORKSPACE']))
            for filename in glob(path.join(report_folder, '*.*')):
                shutil.copy(filename, os.environ['WORKSPACE'])

        if fail > 0:
            # error_text = escape(error_text)
            # error_text = error_text.replace('FAIL', '<span style="font-weight:bold; color:red">FAIL</span>')
            raise FatalError('{0}'.format(error_text))
