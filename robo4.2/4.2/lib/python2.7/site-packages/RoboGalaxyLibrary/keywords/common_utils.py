'''
Common keywords or Utility keywords that may be useful to others, but do not necessarily belong to a specific product or interface (API, CLI, etc).

'''
from RoboGalaxyLibrary.api.common import utils
import hashlib
import os
import sys
import tarfile
import stat
import subprocess
import random
import re
import requests
import sys
import uuid


class CommonUtilityKeywords(object):

    '''
        Common utility keywords
    '''

    ROBOT_LIBRARY_SCOPE = 'Global'

    def __init__(self):
        '''
        Constructor
        '''
        pass

    def convert_MAC_to_IPv6_link_local_address(self, mac_address):
        '''
            Converts a MAC address to a IPv6 Link Local address.
            MAC address format is m0:m1:m2:m3:m4:m5
            Standard IPv6 link local address format is fe80::m0m1:m2ff:fem3:m4m5, but bit 1 of m0 gets flipped.
        '''
        bytes = mac_address.split(':')
        bytes[0] = int(bytes[0], 16) ^ 2
        ipv6_address = 'fe80::%02x%s:%sff:fe%s:%s%s' % tuple(bytes)
        return ipv6_address

    def common_utils_conv_json_to_dict(self, json_str):
        ''' Converts json string to python dictionary
        json_str- is the string to be converted to python dictionary '''
        return utils.conv_json_to_dict(json_str)

    def extract_zip_file(self, zip_file_path, extract_path='.'):
        zip = tarfile.open(zip_file_path, 'r')
        try:
            zip.extractall(extract_path)
            zip.close()
            fileName, fileExtn = os.path.splitext(zip_file_path)
            if os.path.exists(fileName):
                return fileName
        except:
            raise Exception('Failed to extract the zip file"')

    def set_write_permission(self, path):
        # set this folder to writable
        os.chmod(path, stat.S_IWRITE)
        # step through all the files/folders and change permission
        for file_ in os.listdir(path):
            filePath = os.path.join(path, file_)
            # if it is a directory, do a recursive call
            if os.path.isdir(filePath):
                self.set_write_permission(filePath)
            # for files merely call chmod
            else:
                os.chmod(filePath, stat.S_IWRITE)

    def get_processes_running(self, process_name):
        tasks = subprocess.check_output(['tasklist']).split("\r\n")
        pid = []
        for task in tasks:
            match_obj = re.match("(.+?) +(\d+) (.+?) +(\d+) +(\d+.* K).*", task)
            if match_obj is not None:
                if match_obj.group(1) == process_name:
                    pid.append({"pid": match_obj.group(2), })
        return pid

    def join_list_into_string(self, list):
        ''' Converts the "list" input into a string.
            Each list element is separated by a newline and displayed with
            an index number in the final representation.
        '''
        numberedList = ["%d: %s" % (x + 1, list[x]) for x in range(0, len(list))]
        return "\r".join(numberedList)

    def get_random_values_for_input(self):
        ''' Returns a dictionary containing:
            ["word"]: random word pulled from a random word generator API
            ["md5"]: md5 hash of that word
            ["uuid"]: completely random UUID
            ["integer"]: random number between -(2 ^ 31) and (2 ^ 31) - 1
        '''
        randomValues = {}
        r = requests.get('http://randomword.setgetgo.com/get.php')
        randomValues["word"] = r.text.strip()
        randomValues["md5"] = md5hash = hashlib.md5(randomValues["word"]).hexdigest()
        randomValues["uuid"] = str(uuid.uuid4())
        random.seed(randomValues["word"])
        randomValues["integer"] = random.randrange(-sys.maxsize - 1, sys.maxsize)
        return randomValues
