"""  Data genericlib.functions.

    = Revision Notes =

    | Rev      | Date         |   Originator              |  Comments                      |
    | 0.1     |   07/13/2013  |   Andy Tran               |  Initial checkin               |
    | 0.2     |   07/25/2013  |   Andy Tran               |   Create object utility class.       |
    | 0.3     |   07/30/2013  |   Andy Tran               |   Added session utility functions       |

"""

__version__ = "$Revision: 63990 $"
# $Source$

from robot.libraries.BuiltIn import BuiltIn

from distutils import archive_util
import exceptions
import random
import shelve
import sys
import time
from functools import reduce


def _enum(**enums):
    return type('Enum', (), enums)


def _make_ezipfile(base_name, base_dir, verbose=0, dry_run=0):
    """ Zip all files in a directory. This is mainly used for zipping up Robot results or log files after the run """
    fname = archive_util.make_zipfile(base_name, base_dir, verbose, dry_run)
    return fname


def _rand_name(name='test'):
    """ Generate random name """
    return name + str(random.randint(1, 999999))


def _retry_loop(attempts, timeout):
    """ Use _retry_loop for any retry attempt in your code
        Usage:

        for retry in _retry_loop(x_times, timeout=timeout_value):
            try:
                do_something
            except SomeException:
                retry()

    """
    starttime = time.time()
    success = set()
    for i in range(attempts):
        success.add(True)
        yield success.clear
        if success:
            return
        if starttime + timeout < time.time():
            break
    raise exceptions.RetryError


def _elapsed_time(t):
    """ This function is very useful for performance measurement

        Example:

        import time

        t1 = time.time()
        do_something()
        t2 = time.time()
        print "Elapsed time:", elapsed_time( t2-t1 )

    """
    rediv = lambda ll, b: list(divmod(ll[0], b)) + ll[1:]
    return "%d:%02d:%02d.%03d" % tuple(
        reduce(rediv, [[t * 1000, ], 1000, 60, 60]))


def _save_session_data(key, value):
    internal_file = BuiltIn().get_variable_value("${internal_storage}")
    if internal_file:
        try:
            session = shelve.open(internal_file, writeback=True)
            session[key] = value
            session.close()
        except:
            e = sys.exc_info()[0]
            raise AssertionError(e)


def _get_session_data(key):
    internal_file = BuiltIn().get_variable_value("${internal_storage}")
    if internal_file:
        try:
            session = shelve.open(internal_file, writeback=True)
            value = session[key]
            session.close()
            return value
        except:
            e = sys.exc_info()[0]
            raise AssertionError(e)
