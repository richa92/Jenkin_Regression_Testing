'''
Misc. utility functions for dealing with file downloading and zip compression

'''
from RoboGalaxyLibrary.utilitylib import logging as logger
from datetime import date
import urllib2
import os
import sys
import time
import zipfile


def download_file(url, download_location):
    """ Downloading file in chunnks
        Required input:
            url - complete download url. ie. http://myserver/myfile.zip
            download_location - save file location; i.e. /temp
    """
    base_file = os.path.basename(url)
    os.umask(0o002)
    temp_path = download_location
    try:
        file = os.path.join(temp_path, base_file)

        req = urllib2.urlopen(url)
        total_size = int(req.info().getheader('Content-Length').strip())
        logger._log_to_console_and_log_file(
            "Total file size %s" % str(total_size))
        downloaded = 0
        CHUNK = 256 * 10240
        logger._log_to_console_and_log_file("Downloading file % s" % file)
        start = time.clock()
        with open(file, 'wb') as fp:
            while True:
                chunk = req.read(CHUNK)
                downloaded += len(chunk)
                if(downloaded % 52428800 == 0):
                    logger._log_to_console(
                        "Downloading %s MB\n" % str(downloaded / (1024 * 1024)))
                if not chunk:
                    break
                fp.write(chunk)
        elapsed_time = time.clock() - start
        logger._log_to_console_and_log_file(
            "Downloading file completed in %0.3f Minutes" %
            (elapsed_time / 60))
        # logger._log_to_console(elapsed_time)
    except urllib2.HTTPError as e:
        print "HTTP Error:", e.code, url
        return False
    except urllib2.URLError as e:
        print "URL Error:", e.reason, url
        return False

    return file


def unzip(source_filename, dest_dir):
    """ unzip file
        Required input:
            source_filename - /tmp/myfile.zip
            dest_dir - save file location; i.e. /temp
    """
    with zipfile.ZipFile(source_filename) as zf:
        for member in zf.infolist():
            words = member.filename.split('/')
            path = dest_dir
            for word in words[:-1]:
                drive, word = os.path.splitdrive(word)
                head, word = os.path.split(word)
                if word in (os.curdir, os.pardir, ''):
                    continue
                path = os.path.join(path, word)
            logger._log_to_console_and_log_file("Extracting file ")
            zf.extract(member, path)
            logger._log_to_console_and_log_file("Done extracting file")


def file_contains(filepath, searchtext, lines=15, reverse=True):
    """ This function is to search string within specified lines in a file either in reverse or from starting of a file.
        Example:
       file_contains(c:/tmp/logile, "supportDump", reverse=False)
    """
    with open(filepath) as f:
        data = f.readlines()
        if reverse:
            data = reversed(data)
        for lineno, line in enumerate(data):
            if searchtext in line and lineno < lines:
                logger._log_to_console_and_log_file('The entry "{0}" exists in log file'.format(searchtext))
                return True
    return False
