"""
storage.py contains methods that are used by config_manager.py to
configure storage settings such as creating domains, virtual volumes, cpgs, etc.


For all methods:
    mgt_ip       -->  Administrator IP of iLO console
    mgt_username -->  Administrator username
    mgt_pw       -->  Administrator password

"""
# ####### 3par related imports ########
from RoboGalaxyLibrary.configmgr.vulcanlib import ha_library
import custom_logging as log
import re
import time

# ###### EVA related imports #############
from fabric.api import local, env
from fabric import network
import os

# ###### EVA related definitions #############
if os.name == 'nt':
    SSSU = '.\sssu_win_amd64.exe '
else:
    SSSU = './sssu_linux_x64 '
SELECT_MANAGER = '"select manager %s username=%s password=%s" '
SELECT_SYSTEM = '"select system %s" '
EXIT = ' "exit" '


class StorageEva(object):

    """
    This class contains methods to interact with 3PAR hardware.

    Notes: Need to add handling for error when "set system %s manage "%system needs to be issued...
    """

    def __init__(self, login_ip, login_username, login_pw, system):
        """
            Initializing management credentials for EVA object...
        """
        self.mgt_ip = login_ip
        self.mgt_username = login_username
        self.mgt_pw = login_pw
        self.system = system
        self.validated = self.validate_system()

    def validate_system(self):
        """
        This function checks to see if the system exists within the manager.
        """
        try:
            output = execute_local_command(
                SELECT_MANAGER %
                (self.mgt_ip,
                 self.mgt_username,
                 self. mgt_pw) +
                '"ls system" ' +
                EXIT)
            if output:
                if self.system in output:
                    return True
                else:
                    log._warn("System name does not exist within manager")
                    return False
            else:
                log._warn("Failed to execute validate_system command")
                return False
        except:
            log._warn("storage_eva.py: Error in validate_system")
            return False

    def create_virtual_volume(self, name, size, user_cpg, thin=False):
        """
            Parameters:
                    name     -> Name of virtual volume, up to 31 characters
                    size     -> Size of the volume in GB, must be integer.
                    user_cpg -> Name of common provisioning group (CPG)
                    thin     -> Optional boolean flag for thin provisoned volume
                                Default is thick provision
        """
        if is_int(size):
            log._info("Creating Virtual Volume: %s" % name)
            if thin:
                output = execute_local_command(
                    SELECT_MANAGER %
                    (self.mgt_ip,
                     self.mgt_username,
                     self.mgt_pw) +
                    SELECT_SYSTEM %
                    (self.system) +
                    '"add storage ""%s"" GROUP=""\Disk Groups\%s"" SIZE=\"%s\" thin_provision=TRUE"' %
                    (name,
                     user_cpg,
                     size) +
                    EXIT)
            else:
                output = execute_local_command(
                    SELECT_MANAGER %
                    (self.mgt_ip, self.mgt_username, self.mgt_pw) + SELECT_SYSTEM %
                    (self.system) + '"add storage ""%s"" GROUP=""\Disk Groups\%s"" SIZE=\"%s\""' %
                    (name, user_cpg, size) + EXIT)
            if 'error' not in output:
                log._info("Virtual volume %s got created successfully" % name)
                return output
            else:
                log._warn(
                    "Error in creating virtual volume.  Make sure parameters are listed correctly in ConfigMgr.xml.  Output:%s" %
                    (output))
                return False
        else:
            raise ValueError("size not of type 'int'")

    def create_host(self, hostname, wwn_or_iscsi, conn_type, host_os):
        """
        Defines a new system host.  Either Fibre Channel or iSCSI specified by
        'conn_type' parameter.
        Parameters:
                hostname    -> Name of host, up to 31 characters
                wwn_or_iscsi -> Specifies a WWN or iSCSI name to be assigned
                host_os     -> Specifies OS running on host
                conn_type   -> valid values are 'wwn' or 'iscsi'
        """
        output = ""
        conn_type = conn_type.lower()
        log._info("Creating host : %s" % hostname)
        if ((conn_type == 'wwn') or (conn_type == 'fc')):
            output = execute_local_command(
                SELECT_MANAGER %
                (self.mgt_ip,
                 self.mgt_username,
                 self.mgt_pw) +
                SELECT_SYSTEM %
                (self.system) +
                '\"add host \"\"%s\"\" world_wide_name=\"\"%s\"\" operating_system=\"\"%s\"\"\" ' %
                (hostname,
                 wwn_or_iscsi,
                 host_os) +
                EXIT)
            time.sleep(5)

        elif conn_type == 'iscsi':
            output = execute_local_command(
                SELECT_MANAGER %
                (self.mgt_ip,
                 self.mgt_username,
                 self.mgt_pw) +
                SELECT_SYSTEM %
                (self.system) +
                '\"add iscsi_host \"\"\\Hosts\%s\"\" iscsi_iphost=\"\"%s\"\" operating_system=\"\"%s\"\"\" ' %
                (hostname,
                 wwn_or_iscsi,
                 host_os) +
                EXIT)
            time.sleep(5)
        else:
            raise ValueError(
                "invalid conn_type: only accepts either 'wwn' or 'iscsi'")
            return False

        if output:
            log._info("Host %s got created successfully" % hostname)
            return output
        else:
            log._warn("Failed to execute createhost command")
            return False
        return output

    def create_vlun(self, hostname, lun, vv_name):
        """
        Exports a virtual volume as a SCSI LUN

        Parameters:
                lun      -> LUN number as string from 0 to 16383 or 'auto'
                hostname -> Specifies the host where the LUN is exported, up to
                            31 characters
                vv_name  -> Specifies virtual volume name (virtual disk name)
        """
        if is_int(lun):
            log._info("Creating Vlun : %s" % (hostname + "\\" + lun))
            output = execute_local_command(
                SELECT_MANAGER %
                (self.mgt_ip, self.mgt_username, self. mgt_pw) + SELECT_SYSTEM %
                (self.system) + "add lun %s host=\"%s\" storage=\"%s\" " %
                (lun, hostname, vv_name) + EXIT)
            if output:
                log._info("Vlun : %s got created successfully" %
                          (hostname + "\\" + lun))
                return output
            else:
                log._warn("Failed to execute createvlun command")
                return False
        else:
            return False

    def create_cpg(self, cpg_name):
        """
        Description: Adds disk groups to the storage system
        Parameters:
                cpg_name    -> Name of common provisioning group being created

        Command sent to sssu -> ADD DISK_GROUP
        """
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            'add disk_group %s' %
            (cpg_name) +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute createcpg command")
            return False

    def delete_virtual_volume(self, vdisk_path):
        """
        Permanently removes a specified virtual disk.  Virtual disk is no longer
        accessible and all data is lost

        Return:  Will return an error if cirtual disk to be deleted is in a
                 failed state, and you must use the Command View GUI to delete
                 it
        """
        log._info("Deleting Vdisk %s" % vdisk_path)
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '\"delete vdisk \"\"%s\"\"\" ' %
            (vdisk_path) +
            EXIT)
        # output = execute_local_command('wait_until vdisk %s deleted'%(vdisk_path))
        if output:
            log._info("Vdisk %s got deleted successfully" % vdisk_path)
            return output
        else:
            log._warn("Failed to execute delete_virtual_volume command")
            return False

    def delete_host(self, hostname):
        """
        Deletes a host from the storage system
        """
        log._info("Deleting host %s" % hostname)
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '\"delete host \"\"%s\"\"\" ' %
            (hostname) +
            EXIT)
        if output:
            log._info("Host %s got deleted successfully" % hostname)
            return output
        else:
            log._warn("Failed to execute delete_host command")
            return False

    def delete_vlun(self, lun_number, host):
        """
        Removes access to a virtual disk from a host

        Parameters:
                lun_path -> path to lun as seen on sssu
                system   -> system on which lun exists

        """
        log._info("Deleting Vlun %s" % (host + "\\" + lun_number))
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip, self.mgt_username, self. mgt_pw) + SELECT_SYSTEM %
            (self.system) + '\"delete lun \"\"%s\"\"\" ' %
            (host + "\\" + lun_number) + EXIT)
        if output:
            log._info("Vlun %s got deleted successfully" %
                      (host + "\\" + lun_number))
            return output
        else:
            log._warn("Failed to execute createvlun command")
            return False

    def delete_cpg(self, cpg_name):
        """
        Deletes disk group, see add_disk_group
        """
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            'delete disk_group %s' %
            (cpg_name) +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute delete disk_group command")
            return False

    def set_host(self, hostname, wwn=None):
        """
        Changes the specified host properties, specifically wwn

        More options can be easily added later as needed..

        Parameters:
                hostname   -> hostname to be modified
                system     -> system where the host exists
                wwn        -> World wide name of the fibre channel adapter
        """
        if wwn is not None:
            output = execute_local_command(
                SELECT_MANAGER %
                (self.mgt_ip, self.mgt_username, self. mgt_pw) + SELECT_SYSTEM %
                (self.system) + 'set host "\Hosts\%s add_world_wide_name=%s' %
                (hostname, wwn) + EXIT)
            if output:
                return output
            else:
                log._warn("Failed to execute createvlun command")
                return False
        else:
            log._warn("set_host: no wwn passed to function")
            return False

    def get_virtualvolumes(self):
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '"ls vdisk full" ' +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute get_virtualvolumes command")
            return False

    def get_hosts(self):
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '"ls host full" ' +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute get_hosts command")
            return False

    def get_cpgs(self):
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '"ls disk_group full" ' +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute get_cpgs command")
            return False

    def get_vluns(self):
        output = execute_local_command(
            SELECT_MANAGER %
            (self.mgt_ip,
             self.mgt_username,
             self. mgt_pw) +
            SELECT_SYSTEM %
            (self.system) +
            '"ls lun full" ' +
            EXIT)
        if output:
            return output
        else:
            log._warn("Failed to execute get_vluns command")
            return False


class Storage3par(object):

    """
    This class contains methods to interact with 3PAR hardware.
    """

    def __init__(self, login_ip, login_username, login_pw):
        self.mgt_ip = login_ip
        self.mgt_username = login_username
        self.mgt_pw = login_pw

    def create_domain(self, domain_name, domain_users):
        """
        Parameters:
                domain_name  -> Specifies the name of the domain you are creating.
                                Cannot be longer than 31 characters.  Name "all"
                                is reserved.
                domain_users -> List of users to be added to domain.
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "createdomain %s" %
            (domain_name))
        for user in domain_users:
            test = self.create_user(user, domain_name)
            if test is False:
                log._debug("User '%s' not added", user)
                return False
        return output

    def create_virtual_volume(self, name, size, user_cpg, thin=False):
        """
        Parameters:
                name     -> Name of virtual volume, up to 31 characters
                size     -> Size of the volume in GB, must be integer.
                user_cpg -> Name of common provisioning group (CPG)
                thin     -> Optional boolean flag for thin provisoned volume
        """
        if is_int(size):
            if thin:
                output = ha_library.run_storage_commands(
                    self.mgt_ip,
                    self.mgt_username,
                    self.mgt_pw,
                    "createvv -tpvv %s %s %sg" %
                    (user_cpg,
                     name,
                     size))
            else:
                output = ha_library.run_storage_commands(
                    self.mgt_ip, self.mgt_username, self.mgt_pw, "createvv %s %s %sg" %
                    (user_cpg, name, size))
        else:
            raise ValueError("size not of type 'int'")
        return output

    def create_host(self, hostname, host_os, domain, wwn_or_iscsi=None):
        """
        Defines a new system host.  Either Fibre Channel or iSCSI specified by
        'conn_type' parameter.
        Parameters:
                hostname    -> Name of host, up to 31 characters
                wwn_or_iscsi -> Specifies a WWN or iSCSI name to be assigned
                host_os     -> Specifies OS running on host
                conn_type   -> valid values are 'wwn' or 'iscsi'
        """
        try:
            if wwn_or_iscsi is not None:
                if check_wwn(wwn_or_iscsi):
                    output = ha_library.run_storage_commands(
                        self.mgt_ip,
                        self.mgt_username,
                        self.mgt_pw,
                        "createhost -os %s -domain %a %s %s" %
                        (host_os,
                         domain,
                         hostname,
                         wwn_or_iscsi))
                else:
                    output = ha_library.run_storage_commands(
                        self.mgt_ip,
                        self.mgt_username,
                        self.mgt_pw,
                        "createhost -iscsi -os %s -domain %s %s %s" %
                        (host_os,
                         domain,
                         hostname,
                         wwn_or_iscsi))
                # else:
                    # raise ValueError("invalid conn_type: only accepts either 'wwn' or 'iscsi'")
            else:
                output = ha_library.run_storage_commands(
                    self.mgt_ip,
                    self.mgt_username,
                    self.mgt_pw,
                    "createhost -os %s -domain %s %s" %
                    (host_os,
                     domain,
                     hostname))
            time.sleep(5)
            return output
        except:
            log._warn("storage_3par: failed to execute create_host command..")
            return False

    def create_user(self, username, domain_name):
        """
        Parameters:
                username     -> Name of the user, up to 31 characters long. First
                                character must be alphanumeric, and can contain
                                period ('.'), dash ('-') and underscore ('_').
                domain_name  -> List of users to be added to domain.
        Optional Parameters:
                role         -> browse, edit, service, super [default is super]

        """
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "createuser -c password %s %s edit" %
            (username,
             domain_name))
        if output:
            return output
        else:
            log._warn("Failed to execute createuser command")
            return False

    def create_cpg(self, cpg_name, size, domain, raid_type):
        """
        Parameters:
                cpg_name    -> Name of common provisioning group being created
                size        -> Specifies auto-growth limit in GB, must be int
                domain      -> Name of domain with which the object will reside.
                raid_type   -> Specifies RAID type of logical disk
                       Ex. For RAID5, raid_type should be '5'
        """
        if 'raid' in raid_type.lower():
            raid_type = raid_type.translate(None, 'raidRAID')
        raid_type = raid_type.strip()
        if not is_int(size):
            log._warn("Invalid value for 'size' parameter")
            return False
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "createcpg -f -sdgs %sg -domain %s -t r%s %s" %
            (size,
             domain,
             raid_type,
             cpg_name))
        if output:
            return output
        else:
            log._warn("Failed to execute createcpg command")
            return False

    def create_vlun(self, lun, hostname, vv_name):
        """
        Exports a virtual volume as a SCSI LUN

        Parameters:
                lun      -> LUN as string from 0 to 16383 or 'auto'
                hostname -> Specifies the host where the LUN is exported, up to
                            31 characters
                vv_name  -> Specifies virtual volume name
        """
        lun = lun.lower()
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "createvlun %s %s %s" %
            (vv_name,
             lun,
             hostname))
        if output:
            return output
        else:
            log._warn("Failed to execute createvlun command")
            return False

    def get_domains(self):
        """
        Returns domains in 3PAR system
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showdomain")
        if output:
            return output
        else:
            log._warn("Failed to execute get_domains command")
            return False

    def get_virtualvolumes(self, verbose=False):
        """
        Returns virtual volumes on the 3par system.

        Optional Params:
                        verbose = boolean for verbose output, default is False
        """
        if verbose:
            command = 'showvv'
        else:
            command = 'showvv -showcols Name'

        output = ha_library.run_storage_commands(
            self.mgt_ip, self.mgt_username, self.mgt_pw, command)
        if output:
            return output
        else:
            log._warn("Failed to execute get_virtualvolumes command")
            return False

    def get_hosts(self):
        """
        Returns host information from 3par system
        """

        output = ha_library.run_storage_commands(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showhost")
        if output:
            return output
        else:
            log._warn("Failed to execute get_hosts command")
            return False

    def get_cpgs(self):
        """
        Returns common provisioning group information
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showcpg")
        if output:
            return output
        else:
            log._warn("Failed to execute get_cpg command")
            return False

    def get_vluns(self):
        """
        Returns VLUN information from the system
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showvlun")
        if output:
            return output
        else:
            log._warn("Failed to execute get_vlun command")
            return False

    def get_domains2(self):
        """
        Returns domains in 3PAR system
        """
        output = ha_library.run_storage_commands_and_return_output(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showdomain")
        if output:
            return output
        else:
            log._warn("Failed to execute get_domains command")
            return False

    def get_virtualvolumes2(self, verbose=False):
        """
        Returns virtual volumes on the 3par system.

        Optional Params:
                        verbose = boolean for verbose output, default is False
        """
        if verbose:
            command = 'showvv'
        else:
            command = 'showvv -showcols Name'

        output = ha_library.run_storage_commands_and_return_output(
            self.mgt_ip, self.mgt_username, self.mgt_pw, command)
        if output:
            return output
        else:
            log._warn("Failed to execute get_virtualvolumes command")
            return False

    def get_hosts2(self):
        """
        Returns host information from 3par system
        """
        output = ha_library.run_storage_commands_and_return_output(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showhost")
        if output[0]:
            return output
        else:
            log._warn("Failed to execute get_hosts command")
            return output

    def get_cpgs2(self):
        """
        Returns common provisioning group information
        """
        output = ha_library.run_storage_commands_and_return_output(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showcpg")
        if output:
            return output
        else:
            log._warn("Failed to execute get_cpg command")
            return False

    def get_vluns2(self):
        """
        Returns VLUN information from the system
        """
        output = ha_library.run_storage_commands_and_return_output(
            self.mgt_ip, self.mgt_username, self.mgt_pw, "showvlun")
        if output:
            return output
        else:
            log._warn("Failed to execute get_vlun command")
            return False

    def delete_user(self, username):
        """
        Parameters:                 username     -> Name of the user, up to 31 characters long. First
                                        character must be alphanumeric, and can contain
                                        period ('.'), dash ('-') and underscore ('_').
                                    domain_name  -> List of users to be added to domain.
        Optional Parameters:        role         -> browse, edit, service, super [default is super]
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removeuser -f %s" %
            (username))
        if output:
            return output
        else:
            log._warn("Failed to execute createuser command")
            return False

    def delete_domain(self, domain, domain_users):
        """
        Deletes domains in 3PAR system
        """
        for user in domain_users:
            test = self.delete_user(user)
            if test is False:
                log._debug("User '%s' not added", user)
                return False
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removedomain -f %s" %
            domain)
        if output:
            return output
        else:
            log._warn("Failed to execute delete_domain command")
            return False

    def delete_virtualvolume(self, virt_vol):
        """
        Deletes virtual volumes on the 3par system.

        """

        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removevv -f %s" %
            virt_vol)
        if output:
            return output
        else:
            log._warn(
                "Failed to execute delete_virtualvolume command on %s" %
                virt_vol)
            return False

    def delete_host(self, host):
        """
        Deletes host from 3par system
        """

        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removehost %s" %
            host)
        # can add check by issuing get_host and seeing if host in output of
        # get_host...
        if output:
            return output
        else:
            log._warn("Failed to execute delete_host command on %s" % host)
            return False

    def delete_cpg(self, cpg_name):
        """
        Deletes common provisioning group information
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removecpg -f %s" %
            cpg_name)
        if output:
            return output
        else:
            log._warn("Failed to execute delete_cpg command on %s" % cpg_name)
            return False

    def delete_vlun(self, lun, virt_vol, host):
        """
        Deletes VLUN from the system
        """
        output = ha_library.run_storage_commands(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "removevlun -f %s %s %s" %
            (virt_vol,
             lun,
             host))
        if output:
            return output
        else:
            log._warn("Failed to execute delete_vlun command for %s" %
                      virt_vol)
            return False


def check_wwn(wwn):
    """
    Uses regular expressions to validate WWN
    Returns True if valid WWN, False if not.
    """
    wwn_reg_expr = "^([0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f])$"
    matched_val_list = re.compile(wwn_reg_expr, re.IGNORECASE).findall(wwn)
    if(len(matched_val_list) > 0):
        log._debug("Given wwn number %s is a valid WWN number" % wwn)
        return True
    else:
        log._debug("Given wwn number %s is invalid WWN number" % wwn)
        return False


def is_int(string):
    """
    Boolean test if 'string' can be typecasted to an int.
    """
    try:
        int(string)
        return True
    except ValueError:
        return False


def close_connection():
    """
        Closes fabric connections
    """
    network.disconnect_all()


def execute_local_command(command):
    """
    Description : This function execute the commands on local machine.
                  Is main method that all other command-specific methods
                  use to execute the sssu command.
                  Note: Does not deal with OS checking
    Params      : command -->  the command you need to run on local machine
    Usage       : execute_local_commands('sssu_win_amd64 "select manager 127.0.0.1 username=admin password=mypw"')
    Return      : return output of command execution
    """
    # try:
    env.warn_only = True
    output_string = local(SSSU + command, capture=True)
    # output_string = local(pretty_cmd, capture=True)
    close_connection()
    return output_string

    # except :
    # raise Exception("Failed to execute_local_command %s"%command)
