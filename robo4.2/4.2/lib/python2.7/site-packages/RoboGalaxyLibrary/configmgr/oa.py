"""
OA.py provides methods used by configManager.py to configure
OA details automatically.

"""

# from RoboGalaxyLibrary.configmgr.vulcanlib import ha_library
from vulcanlib import ha_library
import custom_logging as log
import time
import os
import config_parser
import hw_objects


class OA:

    """
    Class for Onboard Administrator
        oa_ip           -->  IP address of OA
        oa_username     -->  OA username
        oa_password     -->  OA password
    """

    def __init__(self, login_ip, login_username, login_pw):
        self.oa_ip = login_ip
        self.oa_username = login_username
        self.oa_password = login_pw

    def change_oa_ip_address(self, chngoa_ip, subnetmask, gateway):
        """
            Description : This function changes the OA IP Address
            Params      :
                            chngoa_ip   -->  The New IP Address of OA
                            subnetmask -->  The subnet mask
                            gateway  -->the gateway IP
            Usage       : change_oa_ip("172.24.111.2", "255.255.255.0", "172.24.111.1")
            Return      : output message from console interaction
        """
        try:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set ipconfig static 1 %s %s %s" %
                (chngoa_ip,
                 subnetmask,
                 gateway))
            if output:
                log._info("OA IP is changed successfully")
            else:
                log._error("OA IP is not changed")

        except:
            raise Exception("Failed to change ip address")

    def set_ebipa_for_interconnect(self, start_server_address, subnetmask):
        """
            Description : This function sets an IP address for the four interconnect bays
            Params      :
                            start_server_address --> starting address of interconnect bays
                            subnetmask   --> subnet mask
            Usage       : set_ebipa_interconnect()
            Return      : return a message if there is no excpetion else return false
        """
        try:
            output1 = False
            output2 = False
            output1 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set ebipa interconnect %s %s 1-4" %
                (start_server_address,
                 subnetmask),
                "Successfully set interconnect bay # 1 to IP address")
            output2 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            if output1 and output2:
                log._info(
                    "EBIPA Interconnect Address set for all the interconnects")
            else:
                log._error(
                    "EBIPA Interconnect Address not set for all the interconnects")
        except:
            raise Exception("Failed to set EBIPA Interconnect Address")

    def enable_ebipa_for_server(self):
        """
            Description : This function enables EBIPA checkbox in OA
            Params      :
            Usage       : enable_ebipa_for_server()
            Return      : return message if there is no exception else return false
        """
        try:
            output1 = False
            output2 = False
            output1 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "enable ebipa server 1-16",
                "EBIPA is enabled for device (iLO) bay #")
            output2 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            if output1 and output2:
                log._info("EBIPA is set")
            else:
                log._error("EBIPA is not set")
        except:
            raise Exception("Failed to set EBIPA Address")

    def enable_ebipa_for_interconnect(self):
        """
            Description : This function enables EBIPA checkbox in OA
            Params      : none
            Usage       : enable_ebipa()
            Return      : return message if there is no exception else return false
        """
        try:
            output1 = False
            output2 = False
            output1 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "enable ebipa interconnect 1-4",
                "EBIPA is enabled for device (iLO) bay # 1.")
            output2 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            if output1 and output2:
                log._info("EBIPA is set")
            else:
                log._error("EBIPA is not set")
        except:
            raise Exception("Failed to communicate to OA")

    def set_ebipa_server_and_inter_gateway(self, gateway):
        """
            Description : This function sets EBIPA server and interconnect gateway ip address
            Params      :
                          gateway    --> gateway for OA
            Usage       : set_ebipa_ser_inter_gateway("172.24.110.2", "Admin", "Insight7", "172.24.110.1")
            Return      : return output if there is no exception else return false
        """
        try:
            output1 = False
            output2 = False
            output3 = False
            output4 = False
            output1 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set ebipa server gateway %s 1-16" %
                (gateway),
                "Successfully set the gateway")
            output2 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            output3 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set ebipa interconnect gateway %s 1-4" %
                (gateway),
                "Successfully set the gateway")
            output4 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            if output1 and output2 and output3 and output4:
                log._info("EBIPA interconnect and server gateway is set")
            else:
                log._error("EBIPA interconnect and server gateway is not set")
        except:
            raise Exception("Failed to set EBIPA Server Gateway")

    def clear_vc_mode(self):
        """
            Description : This function is used to clear VC Module
            Params      : none
            Usage       : clear_vc_mode()
            Return      : return output if there is no exception else return false
        """
        try:
            clear_vc = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "clear vcmode")
            return clear_vc
        except:
            raise Exception("Failed to clear VC mode")

    def restart_interconnect(self):
        """
            Description : This function restarts interconnects e.i., VC module
            Params      : none
            Usage       : restart_interconnect()
            Return      : return output if there is no exception else return false
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "restart interconnect 1",
                "Resetting Interconnect tray in bay")
            if output:
                log._info("VC module has been restarted successfully")
            else:
                log._error("Failed to restart VC module")
        except:
            raise Exception("Failed to clear VC mode")

    def poweroff_servers(self):
        """
            Description : This function poweroff all the server withing the enclosure
            Params      : none
            Usage       : poweroff_servers()
            Return      : return output if there is no exception else return false
        """
        try:
            power_off_servers = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "poweroff server all force")
        except:
            raise Exception("Failed to poweroff the server")

    def ping_vc_ip(self, vc_ip):
        """
            Description : This function checks if VC module is reachable when it is assigned with new IP
            Params      : vc_ip       -->  VC IP

            Usage       : ping_vc_ip()
            Return      : return output if there is no exception else return false
        """
        time.sleep(180)
        try:
            response = 1
            while response == 1:
                response = os.system("ping -n 1 " + vc_ip)
                time.sleep(10)
            log._info("VC module is back online with new IP %s " % vc_ip)

            if response == 0:
                log._info("VC is online")
            else:
                log._error("VC is not online")

        except:
            raise Exception("Unable to ping")

    def set_ebipa_servers(self, start_server_address, subnetmask):
        """
            Description : This function sets the IP address for all 16 bays
            Params      :
                            start_server_address --> starting Address of Bays
                            subnetmask -->  The subnet mask
            Usage       : set_ebipa_address("172.24.110.45", "255.255.255.0")
            Return      : return message if there is no exception else return false
        """
        try:
            output1 = False
            output2 = False
            output1 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set ebipa server %s %s 1-16" %
                (start_server_address,
                 subnetmask),
                "Successfully set device (iLO) bay # 1 to IP address")
            output2 = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SAVE EBIPA",
                "EBIPA configuration was saved.")
            if output1 and output2:
                log._info("EBIPA Address set for all the bays")
            else:
                log._error("EBIPA Address not set for all the bays")
        except:
            raise Exception("Failed to set EBIPA Address")

    def reset_ilo(self, ilo_bay_number, force="false"):
        """
            Description   :    This function will reset ilo present in a bay. It will reset based on the force parameter
            Params        :
                            ilo_bay_number--> Bay number of server which should be resetted
                            force    --> a boolean parameter based on which ilo will be reset. By default this parameter will be false.
            Return        :    Returns a message if command is executed else returns false
        """
        try:
            output1 = False
            output2 = False
            if force == "false":
                output1 = ha_library.runOAcommands(
                    self.oa_ip,
                    self.oa_username,
                    self.oa_password,
                    "reset iLO %s" %
                    (ilo_bay_number),
                    "Successfully reset iLO through IPMI")
            else:
                output2 = ha_library.runOAcommands(
                    self.oa_ip,
                    self.oa_username,
                    self.oa_password,
                    "reset iLO %s force" %
                    (ilo_bay_number),
                    "Successfully reset iLO through IPMI")
                log._debug(output2)
            if output1 or output2:
                log._info("ILO is successfully reset")
            else:
                log._error("ILO is not successfully reset")
        except:
            raise Exception("Failed to reset iLO")

    def getSnapshotdata(self):
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.oa_ip, self.oa_username, self.oa_password, "show ebipa")
        lines = output.split('\n')
        mline = ""
        for line in lines:
            mline += line.strip(' ').strip('\r').strip(' ') + "\n"
        serverdata = mline.split('Interconnect')[0]
        interconnectdata = mline.split('Interconnect')[1]

        serverstartaddress = ""
        subnetmaskaddress = ""
        gatewayaddress = ""
        interconnectstartaddress = ""
        mlines = serverdata.split('\n')
        for line in mlines:
            if "Yes" in line:
                serverstartaddress = line.split('   ')[2]
                subnetmaskaddress = line.split('   ')[3]
                gatewayaddress = line.split('   ')[4]
                break
        mlines = interconnectdata.split('\n')
        for line in mlines:
            if "Yes" in line:
                interconnectstartaddress = line.split('   ')[2]
                break
        finaldata = [serverstartaddress, subnetmaskaddress,
                     gatewayaddress, interconnectstartaddress]
        return finaldata

if __name__ == '__main__':
    p = config_parser.ConfigParser('testcase\ConfigMgr.xml')
    p.parse_xml()
    p.store_xml_data()
    for oa in p.oa_list:
        print(
            oa.ip_address,
            oa.username,
            oa.password,
            oa.gateway,
            oa.enable_ebipa,
            oa.subnet,
            oa.server_start_addr,
            oa.inter_start_addr,
            oa.reset_vc_module)

    oaconfig = OA(oa.ip_address, oa.username, oa.password)

    oaconfig.get_blade_info("show server info all")
    oaconfig.set_ebipa_for_interconnect(oa.inter_start_addr, oa.subnet)
    oaconfig.set_ebipa_servers(oa.server_start_addr, oa.subnet)
    oaconfig.set_ebipa_server_and_inter_gateway(oa.gateway)
    oaconfig.enable_ebipa_for_interconnect()
    oaconfig.enable_ebipa_for_server()

    oaconfig.clear_vc_mode()
    oaconfig.poweroff_servers()
    oaconfig.restart_interconnect()
    oaconfig.ping_vc_ip(oa.inter_start_addr)
