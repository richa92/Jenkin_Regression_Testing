"""
This module is to read configmgr.xml and create snapshot.xml file.
"""

from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement
import xml.etree.ElementTree as ET
from storage import StorageEva, Storage3par
import re
import custom_logging as customlog
import datetime
from switch import SwitchCfg
from oa import OA as OA_Class
from config_parser import ConfigParser
from san_switch import SwitchSN6000
# from sut import VSphere
import os
import socket
import device_discovery


def check_ipv4(address):
    """
    Checks ipv4 address to see if valid.
    Returns True if valid ipv4, False if not.
    """
    try:
        socket.inet_aton(address)
        if not device_discovery.ping_ip(address):
            customlog._warn("IP not reachable in %s" % address)
            return False
    except socket.error:
        return False


class RetrieveData(object):

    """ This class is to retrieve data from Config XML and devices """

    def __init__(self, filepath, fetchInfofor):
        self.ReadStatus = True

        filepath = filepath.replace('[', '').replace(']', '').replace("'", "")
        filepath = os.path.normpath(filepath)

        tree = ET.parse(filepath)
        self.root = tree.getroot()

        networkswitch_data = self.read_network_switch_data(fetchInfofor)
        self.NetworkSwitch_Object = networkswitch_data[1]
        if not (networkswitch_data[0]):
            customlog._warn("Failed to read network switch data")

        Storage_data = self.read_storage_data(fetchInfofor)
        self.Storage_Object = Storage_data[1]
        if not (Storage_data[0]):
            customlog._warn("Failed to read storage data")

        sanswith_data = self.read_san_switch_data(fetchInfofor)
        self.SanSwitch_Object = sanswith_data[1]
        if not (sanswith_data[0]):
            customlog._warn("Failed to read SAN switch data")

        rack_data = self.read_rack_data()
        self.Rack_Object = rack_data[1]
        if not (rack_data[0]):
            customlog._warn("Failed to read rack data")

        OA_data = self.read_OA_data()
        self.OA_Object = OA_data[1]
        if not (OA_data[0]):
            customlog._warn("Failed to read OA data")

        firmware_data = self.read_firmware_data()
        self.Firmware_Object = firmware_data[1]
        if not (firmware_data[0]):
            customlog._warn("Failed to read firmware data")

        hydrogen_data = self.read_hydrogen_data()
        self.Hydrogen_Object = hydrogen_data[1]
        if not (hydrogen_data[0]):
            customlog._warn("Failed to read hydrogen data")

        altair_data = self.read_Altair_Data()
        self.Altair_Object = altair_data[1]
        if not (altair_data[0]):
            customlog._warn("Failed to read Altair data")

        vSphere_data = self.read_vSphere_data()
        self.vSphere_Object = vSphere_data[1]
        if not (vSphere_data[0]):
            customlog._warn("Failed to read Vsphere data")

    def get_read_status(self):
        return self.ReadStatus

    def get_element(self, element, tagname):
        data = []
        data = element.find(tagname)
        if data is None:
            data = []
        return data

    # Function to retrieve Network switch data.
    def read_network_switch_data(self, fetchInfofor):
        status = True
        customlog._log_to_console_and_log_file(
            "Reading network switch data from configMgr.xml file")
        """Function to retrieve the data of network switches from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        switches = self.get_element(self.root, "Switches")
        networkworkswitches = []
        network_switches = self.get_element(switches, "Network_Switches")
        try:
            for networkswitch in network_switches:
                network_dict = networkswitch.attrib
                if not check_ipv4(network_dict['IPv4Address']):
                    customlog._log_to_console_and_log_file(
                        "Network switch %s:%s at %s is not reachable and will not be printed to XML" %
                        (networkswitch.tag, network_dict['Name'], network_dict['IPv4Address']))
                    continue
                else:
                    network_switch_server_obj = SwitchCfg(
                        network_dict['IPv4Address'],
                        network_dict['Username'],
                        network_dict['Password'],
                        "",
                        "")
                    vlan_info = network_switch_server_obj.get_VLAN_Info()
                    vlans_list = []
                    vlan_dict = {}
                    vlan_dict['name'] = "Vlans"
                    for key, value in vlan_info.iteritems():
                        vlan_dict = {}
                        vlan_dict['ID'] = key
                        vlan_dict['TaggedPorts'] = ",".join(value[0])
                        vlan_dict['UntaggedPorts'] = ",".join(value[1])
                        vlan_dict['VLAN_IP'] = {'IP': '', 'Netmask': ''}
                        vlans_list.append(vlan_dict)
                    # vlan_dict['VLAN'] = vlans_list
                    network_dict['VLAN'] = vlans_list

                    users_list = []
                    users_dict = {}
                    for users in self.get_element(networkswitch, "Users"):
                        users_dict = users.attrib
                        users_dict['name'] = users.tag
                        users_list.append(users_dict)
                    network_dict['users'] = users_list

                    ports_list = []
                    ports_dict = {}
                    for Port in self.get_element(networkswitch, "Ports"):
                        ports_dict = Port.attrib
                        ports_dict['name'] = Port.tag
                        ports_list.append(ports_dict)
                    network_dict['ports'] = ports_list

                    management_list = []
                    management_dict = {}
                    for mgmt in self.get_element(networkswitch, "Management"):
                        management_dict = mgmt.attrib
                        management_dict['name'] = mgmt.tag
                        management_list.append(management_dict)
                    network_dict['managements'] = management_list
                    networkworkswitches.append(network_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, networkworkswitches)

    # Function to retrieve SAN switch data.
    def read_san_switch_data(self, fetchInfofor):
        """Function to retrieve the data of SAN switches from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        status = True
        customlog._log_to_console_and_log_file(
            "Reading SAN switch data from configMgr.xml file")
        try:
            switches = self.get_element(self.root, "Switches")
            sanswitch_list = []
            san_switches = self.get_element(switches, "SAN_Switches")
            for sanswitch in san_switches:
                SanSWdict = sanswitch.attrib
                if not check_ipv4(SanSWdict['IPv4Address']):
                    customlog._log_to_console_and_log_file(
                        "SAN switch %s:%s at %s is not reachable and will not be printed to XML" %
                        (sanswitch.tag, SanSWdict['Name'], SanSWdict['IPv4Address']))
                    continue
                else:
                    SanSWdict['name'] = sanswitch.tag
                    san_switch_obj = SwitchSN6000(
                        SanSWdict['IPv4Address'],
                        SanSWdict['Username'],
                        SanSWdict['Password'])
                    portdata = san_switch_obj.list_port_attr()
                    zonesdata = san_switch_obj.list_Snapshot()
                    SanSWdict['ZoneConfigs'] = zonesdata
                    SanSWdict['PortAttributes'] = portdata
                    portzoning_list = []
                    for Pzone in self.get_element(sanswitch, "PortZoning"):
                        Portzoning_dict = {}
                        Portzoning_dict = Pzone.attrib
                        Portzoning_dict['name'] = Pzone.tag
                        portzoning_list.append(Portzoning_dict)
                    SanSWdict['PortZoning'] = portzoning_list
                    sanswitch_list.append(SanSWdict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, sanswitch_list)

    def read_storage_data(self, xmltype):
        """Function to retrieve the data of storages from storage devices / ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        status = True
        customlog._log_to_console_and_log_file(
            "Reading storage data from configMgr.xml file")
        # Fuction to retrieve storage data.
        try:
            storage_elemenet = self.get_element(self.root, "Storages")
            storage_list = []
            if xmltype == "teardown":
                # for teardown we will read the data from configMgr.xml and
                # update the same in teardown xml
                StorageElemenet = self.root.find("Storages")
                Storagedict = {}
                for storage in StorageElemenet:
                    storagedict = storage.attrib
                    if not check_ipv4(storagedict['IPv4Address']):
                        customlog._log_to_console_and_log_file(
                            "storage object %s:%s at %s is not reachable and will not be printed to XML" %
                            (storage.tag, storagedict['Name'], storagedict['IPv4Address']))
                        continue
                    else:
                        storagedict['name'] = storage.tag
                        Domaindict = {}
                        domainss = []
                        # adding domain to the storage dictionary
                        for domain in storage.find("Domains"):
                            Domaindict = domain.attrib
                            Domaindict['name'] = domain.tag
                            domainss.append(Domaindict)
                        storagedict['Domain'] = domainss
                        # adding Vdisk to the storage dictionary
                        vvdict = {}
                        vvlist = []
                        for vv in storage.find("VirtualVolumes"):
                            vvdict = vv.attrib
                            vvdict['name'] = vv.tag
                            vvlist.append(vvdict)
                        storagedict['VirtualVolumes'] = vvlist
                        # adding hosts to the storage dictionary
                        hostslist = []
                        for host in storage.find("Hosts"):
                            hostdict = host.attrib
                            hostdict['name'] = host.tag
                            hostslist.append(hostdict)
                        storagedict['Hosts'] = hostslist
                        # adding CPGs to the storage dictionary
                        cpgdict = {}
                        cpglist = []
                        for cpg in storage.find("CPGs"):
                            cpgdict = cpg.attrib
                            cpgdict['name'] = cpg.tag
                            cpglist.append(cpgdict)
                        storagedict['CPGs'] = cpglist
                        # adding Vlans to the storage dictionary
                        vlunsdict = {}
                        vlunslist = []
                        for vlun in storage.find("VLUNs"):
                            vlunsdict = vlun.attrib
                            vlunsdict['name'] = vlun.tag
                            vlunslist.append(vlunsdict)
                        storagedict['VLUNs'] = vlunslist

                        storage_list.append(storagedict)
            else:
                # for snapshot we will read the data from storage devices and
                # update the same in teardown xml
                for storage in storage_elemenet:
                    storage_dict = {}
                    storage_dict = storage.attrib
                    storage_dict['name'] = storage.tag
                    if not check_ipv4(storage_dict['IPv4Address']):
                        customlog._log_to_console_and_log_file(
                            "storage object %s:%s at %s is not reachable and will not be printed to XML" %
                            (storage.tag, storage_dict['Name'], storage_dict['IPv4Address']))
                        continue
                    else:
                        if("3PAR" in storage_dict['Model']):
                            # For 3PAR devices, reading data from 3PAR
                            DomainData = self.get_3par_Domains(storage_dict)
                            storage_dict['Domain'] = DomainData

                            VVData = self.get_3par_VVs(storage_dict)
                            storage_dict['VirtualVolumes'] = VVData

                            HostData = self.get_3par_Hosts(storage_dict)
                            storage_dict['Hosts'] = HostData

                            CPGData = self.get_3par_CPGs(storage_dict)
                            storage_dict['CPGs'] = CPGData

                            VlunsData = self.get_3par_VLUNs(storage_dict)
                            storage_dict['VLUNs'] = VlunsData

                        elif("EVA" in storage_dict['Model']):
                            # For EVA devices, reading data from EVA
                            Vluns_Data = self.get_EVA_VLUNs(storage_dict)
                            storage_dict['VLUNs'] = Vluns_Data

                            vv_list = self.get_EVA_virtualvolumes(storage_dict)
                            storage_dict['VirtualVolumes'] = vv_list

                            Hosts_Data = self.get_EVA_Hosts(storage_dict)
                            storage_dict['Hosts'] = Hosts_Data

                            cpg_dict = {}
                            cpg_list = []
                            for cpg in self.get_element(storage, "CPGs"):
                                cpg_dict = cpg.attrib
                                cpg_dict['name'] = cpg.tag
                                cpg_list.append(cpg_dict)
                            storage_dict['CPGs'] = cpg_list

                            domain_dict = {}
                            domain_list = []
                            for domain in self.get_element(storage, "Domains"):
                                domain_dict = domain.attrib
                                domain_dict['name'] = domain.tag
                                domain_list.append(domain_dict)
                            storage_dict['Domain'] = domain_list

                        else:
                            # For other devices, code yet to be implemented. We
                            # are updating the same info from configMgr.xml
                            vv_dict = {}
                            vv_list = []
                            for vv in self.get_element(storage, "VirtualVolumes"):
                                vv_dict = vv.attrib
                                vv_dict['name'] = vv.tag
                                vv_list.append(vv_dict)
                            storage_dict['VirtualVolumes'] = vv_list

                            hosts_dict = {}
                            hosts_list = []
                            for host in self.get_element(storage, "Hosts"):
                                hosts_dict = host.attrib
                                hosts_dict['name'] = host.tag
                                hosts_list.append(hosts_dict)
                            storage_dict['Hosts'] = hosts_list

                            cpg_dict = {}
                            cpg_list = []
                            for cpg in self.get_element(storage, "CPGs"):
                                cpg_dict = cpg.attrib
                                cpg_dict['name'] = cpg.tag
                                cpg_list.append(cpg_dict)
                            storage_dict['CPGs'] = cpg_list

                            vluns_dict = {}
                            vluns_list = []
                            for vlun in self.get_element(storage, "VLUNs"):
                                vluns_dict = vlun.attrib
                                vluns_dict['name'] = vlun.tag
                                vluns_list.append(vluns_dict)
                            storage_dict['VLUNs'] = vluns_list

                            domain_dict = {}
                            domain_list = []
                            for domain in self.get_element(storage, "Domains"):
                                domain_dict = domain.attrib
                                domain_dict['name'] = domain.tag
                                domain_list.append(domain_dict)
                            storage_dict['Domain'] = domain_list
                        storage_list.append(storage_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, storage_list)

    def get_EVA_Hosts(self, storage):
        """Function to parse EVA hosts info and return the data in the form of lists"""
        """Usage: get_EVA_Hosts(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing EVA hosts data and converting to list and dictionaries")
        data = StorageEva(storage['IPv4Address'], storage[
                          'Username'], storage['Password'], storage['Name'])
        HostData = data.get_hosts()
        parsedata = Parse_EVA_Storage_output(
            HostData,
            "osmodeindex",
            ("hostname",
             "osmode",
             "portwwn",
             "hosttype"))
        Hosts = []
        for datalist in parsedata:
            hostdict = {}
            for var in datalist:
                data = var.split(':')[0]
                if data == "hostname":
                    hostdict['Name'] = var.split(':')[1].strip("\r")
                elif data == "osmode":
                    hostdict['HostOS'] = var.split(':')[1].strip("\r")
                elif data == "portwwn":
                    hostdict['wwn_or_iqn'] = var.split(':')[1].strip("\r")
                elif data == "hosttype":
                    hostdict['ConnectionType'] = var.split(':')[1].strip("\r")
            Hosts.append(hostdict)
        return Hosts

    def get_EVA_virtualvolumes(self, storage):
        """Function to parse EVA virtual volumes info and return the data in the form of lists"""
        """Usage: get_EVA_virtualvolumes(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing EVA virtual disk data and converting to list and dictionaries")
        data = StorageEva(storage['IPv4Address'], storage[
                          'Username'], storage['Password'], storage['Name'])
        VVData = data.get_virtualvolumes()
        parsedata = Parse_EVA_Storage_output(
            VVData,
            "osmodeindex",
            ("objectname",
             "requestedcapacityblocks",
             "Domain",
             "UserCPG",
             "Thin"))
        virtualvolumes = []
        for datalist in parsedata:
            virtualvolumes_dict = {}
            for var in datalist:
                data = var.split(':')[0]
                if data == "objectname":
                    virtualvolumes_dict['Name'] = ""
                    if((var.split(':')[1]) != ""):
                        virtualvolumes_dict['Name'] = (
                            (var.split(':')[1]).split('\\'))[-2]
                elif data == "requestedcapacityblocks":
                    virtualvolumes_dict['Size'] = var.split(':')[1]
                elif data == "Domain":
                    virtualvolumes_dict['Domain'] = var.split(':')[1]
                elif data == "UserCPG":
                    virtualvolumes_dict['UserCPG'] = var.split(':')[1]
                elif data == "Thin":
                    virtualvolumes_dict['Thin'] = var.split(':')[1]
            if(virtualvolumes_dict['Name'] != ""):
                virtualvolumes.append(virtualvolumes_dict)
        return virtualvolumes

    def get_EVA_VLUNs(self, storage):
        """Function to parse EVA VLUNs info and return the data in the form of lists"""
        """Usage: get_EVA_VLUNs(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing EVA LUN details and converting to list and dictionaries")
        data = StorageEva(storage['IPv4Address'], storage[
                          'Username'], storage['Password'], storage['Name'])
        vlundata = data.get_vluns()
        parsedata = Parse_EVA_Storage_output(
            vlundata, "objectid", ("hostname", "lunnumber", "virtualdiskname"))
        vluns = []
        for datalist in parsedata:
            vlun_dict = {}
            for var in datalist:
                data = var.split(':')[0]
                if data == "hostname":
                    vlun_dict['HostName'] = var.split(':')[1]
                elif data == "lunnumber":
                    vlun_dict['LUN'] = var.split(':')[1]
                elif data == "virtualdiskname":
                    vlun_dict['VV_Name'] = var.split(':')[1]
            if(vlun_dict['LUN'] != ""):
                vluns.append(vlun_dict)
        return vluns

    def get_3par_Hosts(self, storage):
        """Function to parse 3PAR Hosts info and return the data in the form of lists"""
        """Usage: get_3par_Hosts(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR hosts data and converting to list and dictionaries")
        data = Storage3par(
            storage['IPv4Address'], storage['Username'], storage['Password'])
        datas = data.get_hosts2()
        if datas[0]:
            lines = datas[1].split('\n')
            data = []
            hostdict = {
                'Name': '',
                'ConnectionType': '',
                'HostOS': '',
                'wwn_or_iqn': ''}
            for line in lines:
                if "Generic" in line:
                    hostdict = {
                        'Name': '',
                        'ConnectionType': '',
                        'HostOS': '',
                        'wwn_or_iqn': ''}
                    newline = re.sub(' +', '#', line).strip("#")
                    Reqcol = newline.split('#')
                    hostdict['Name'] = Reqcol[1]
                    hostdict['ConnectionType'] = ""
                    hostdict['HostOS'] = ""
                    hostdict['wwn_or_iqn'] = Reqcol[3]
                    data.append(hostdict)
                else:
                    line.strip(" ")
                    newline = re.sub(' +', '#', line).strip("#")
                    Reqcol = newline.split('#')
                    hostdict['wwn_or_iqn'] = hostdict[
                        'wwn_or_iqn'] + "," + Reqcol[0]
        return data

    def get_3par_CPGs(self, storage):
        """Function to parse 3PAR CPG info and return the data in the form of lists"""
        """Usage: get_3par_CPGs(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR CPG data and converting to list and dictionaries")
        data = Storage3par(
            storage['IPv4Address'], storage['Username'], storage['Password'])
        datas = data.get_cpgs2()
        if datas[0]:
            lines = datas[1].split('\n')
            data = []
            for i in range(3, len(lines) - 2):
                CPGdict = {'Name': '', 'Size': ''}
                newline = re.sub(' +', '#', lines[i]).strip("#")
                Reqcol = newline.split('#')
                CPGdict['Name'] = Reqcol[1]
                CPGdict['Size'] = Reqcol[7]
                CPGdict['Domain'] = ""
                data.append(CPGdict)
        return data

    def get_3par_VVs(self, storage):
        """Function to parse 3PAR virtual vollumes info and return the data in the form of lists"""
        """Usage: get_3par_VVs(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR virtual volumes data and converting to list and dictionaries")
        data = Storage3par(
            storage['IPv4Address'], storage['Username'], storage['Password'])
        datas = data.get_virtualvolumes2(True)
        if datas[0]:
            lines = datas[1].split('\n')
            data = []
            for i in range(2, len(lines) - 2):
                VVdict = {
                    'Name': '',
                    'Size': '',
                    'Domain': '',
                    'Thin': '',
                    'UserCPG': ''}
                newline = re.sub(' +', '#', lines[i]).strip("#")
                Reqcol = newline.split('#')
                VVdict['Name'] = Reqcol[1]
                VVdict['Size'] = Reqcol[11]
                VVdict['Domain'] = ""
                VVdict['Thin'] = Reqcol[3]
                VVdict['UserCPG'] = ""
                data.append(VVdict)
        return data

    def get_3par_VVdata(self, data):
        """Function to parse 3PAR virtual vollumes info and return the data in the form of lists"""
        """Usage: get_3par_VVdata(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR hosts data and converting to list and dictionaries")
        Hosts = []
        for datalist in data:
            hostdict = {}
            for var in datalist:
                data = var.split(':')[0]
                if data == "hostname":
                    hostdict['Name'] = var.split(':')[1].strip("\r")
                elif data == "osmode":
                    hostdict['Size'] = var.split(':')[1].strip("\r")
                elif data == "portwwn":
                    hostdict['Domain'] = var.split(':')[1].strip("\r")
                elif data == "hosttype":
                    hostdict['UserCPG'] = var.split(':')[1].strip("\r")
                elif data == "hosttype":
                    hostdict['Thin'] = var.split(':')[1].strip("\r")
            Hosts.append(hostdict)
        return Hosts

    def get_3par_VLUNs(self, storage):
        """Function to parse 3PAR VLUN info and return the data in the form of lists"""
        """Usage: get_3par_VLUNs(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR VLUNs data and converting to list and dictionaries")
        data = Storage3par(
            storage['IPv4Address'], storage['Username'], storage['Password'])
        datas = data.get_vluns2()
        if datas[0]:
            lines = datas[1].split('\n')
            data = []
            temp_int = 0
            for i in range(2, len(lines) - 2):
                if (lines[i].replace("-", "").strip('\r') == ""):
                    temp_int = i + 3
                else:
                    if(i > temp_int):
                        VLUNdict = {'HostName': '', 'LUN': '', 'VV_Name': ''}
                        newline = re.sub(' +', '#', lines[i]).strip("#")
                        Reqcol = newline.split('#')
                        VLUNdict['HostName'] = Reqcol[2]
                        VLUNdict['LUN'] = Reqcol[0]
                        VLUNdict['VV_Name'] = Reqcol[1]
                        data.append(VLUNdict)
        return data

    def get_3par_Domains(self, storage):
        """Function to parse 3PAR Domains info and return the data in the form of lists"""
        """Usage: get_3par_Domains(storage_dict)"""
        customlog._log_to_console_and_log_file(
            "Processing 3PAR domains data and converting to list and dictionaries")
        data = Storage3par(
            storage['IPv4Address'], storage['Username'], storage['Password'])
        datas = data.get_domains2()
        if datas[0]:
            lines = datas[1].split('\n')
            data = []
            for i in range(1, len(lines)):
                Domaindict = {'Name': '', 'DomainUsers': ''}
                newline = re.sub(' +', '#', lines[i]).strip("#")
                Reqcol = newline.split('#')
                Domaindict['Name'] = Reqcol[1]
                Domaindict['DomainUsers'] = ""
                data.append(Domaindict)
        return data

    def read_rack_data(self):
        """Function to retrieve the data of Racks from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        status = True
        customlog._log_to_console_and_log_file(
            "Reading rack data from configMgr.xml file")
        try:
            Racks = self.get_element(self.root, "Racks")
            racks_list = []
            rack_dict = {}
            for rack in Racks:
                rack_dict = rack.attrib
                rack_dict['name'] = rack.tag
                serverlist = []
                serverdict = {}
                for server in self.get_element(rack, "Servers"):
                    serverdict = server.attrib
                    serverdict['name'] = server.tag
                    userslist = []
                    usersdict = {}
                    for user in self.get_element(server, "Users"):
                        usersdict = user.attrib
                        usersdict['name'] = user.tag
                        userslist.append(usersdict)
                    serverdict['Users'] = userslist
                    serverlist.append(serverdict)
                rack_dict['Servers'] = serverlist
                ipdu_dict = {}
                ipdu_list = []
                for ipdu in [self.get_element(rack, "iPDU")]:
                    ipdu_dict = ipdu.attrib
                    ipdu_list.append(ipdu_dict)
                rack_dict['IPDUs'] = ipdu_list
            racks_list.append(rack_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, racks_list)

    def read_OA_data(self):
        """Function to retrieve the data of OA from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        status = True
        try:
            customlog._log_to_console_and_log_file(
                "Reading OA data from configMgr.xml file")
            # OAs = self.get_element(self.root, "OA")
            OAlist = []
            # for OA in OAs:
            OA = self.get_element(self.root, "OA")
            OAdict = OA.attrib
            if not check_ipv4(OAdict['IPv4Address']):
                OAlist = []
                customlog._log_to_console_and_log_file(
                    "OA %s:%s at %s is not reachable and will not be printed to XML" %
                    (OA.tag, OAdict['IPv4Address'], OAdict['IPv4Address']))
            else:
                OA_obj = OA_Class(
                    OAdict['IPv4Address'],
                    OAdict['Username'],
                    OAdict['Password'])
                OAdata = OA_obj.getSnapshotdata()

                OAdict['name'] = OA.tag
                EBIPA = self.get_element(OA, "EBIPA")
                OAdict['EBIPA'] = {'name': EBIPA.tag, 'EBIPA': EBIPA.attrib}

                ServerStartAddress = self.get_element(OA, "ServerStartAddress")
                OAdict['ServerStartAddress'] = {
                    'name': ServerStartAddress.tag,
                    'ServerStartAddress': OAdata[0]}

                InterStartAddress = self.get_element(OA, "InterStartAddress")
                OAdict['InterStartAddress'] = {
                    'name': InterStartAddress.tag,
                    'InterStartAddress': OAdata[1]}

                SubnetMask = self.get_element(OA, "SubnetMask")
                OAdict['SubnetMask'] = {
                    'name': SubnetMask.tag, 'SubnetMask': OAdata[2]}

                Gateway = self.get_element(OA, "Gateway")
                OAdict['Gateway'] = {'name': Gateway.tag, 'Gateway': OAdata[3]}

                ResetVcModule = self.get_element(OA, "ResetVcModule")
                OAdict['ResetVcModule'] = {
                    'name': ResetVcModule.tag,
                    'ResetVcModule': ResetVcModule.attrib}

                """OAdict['name'] = OA.tag
                EBIPA = self.get_element(OA, "EBIPA")
                OAdict['EBIPA'] = {'name': EBIPA.tag, 'EBIPA': EBIPA.attrib}

                ServerStartAddress = self.get_element(OA, "ServerStartAddress")
                OAdict['ServerStartAddress'] = {'name': ServerStartAddress.tag, 'ServerStartAddress': data[0]}

                InterStartAddress = self.get_element(OA, "InterStartAddress")
                OAdict['InterStartAddress'] = {'name': InterStartAddress.tag, 'InterStartAddress': InterStartAddress.attrib}

                SubnetMask = self.get_element(OA, "SubnetMask")
                OAdict['SubnetMask'] = {'name': SubnetMask.tag, 'SubnetMask': data[1]}

                Gateway = self.get_element(OA, "Gateway")
                OAdict['Gateway'] = {'name': Gateway.tag, 'Gateway': data[2]}

                ResetVcModule = self.get_element(OA, "ResetVcModule")
                OAdict['ResetVcModule'] = {'name': ResetVcModule.tag, 'ResetVcModule': data[3]}"""

                OAlist.append(OAdict)

        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, OAlist)

    def read_firmware_data(self):
        """Function to retrieve the data of Firmware from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        status = True
        customlog._log_to_console_and_log_file(
            "Reading Firmware data from configMgr.xml file")
        # OAs = self.get_element(self.root, "OA")
        try:
            firmware_list = []
            # for OA in OAs:
            firmware = self.get_element(self.root, "Firmware")
            if(firmware != []):
                firmware_dict = firmware.attrib
                firmware_dict['name'] = firmware.tag
                OAFirmwareUpdateBayNumbers = self.get_element(
                    firmware, "OAFirmwareUpdateBayNumbers")
                firmware_dict['OAFirmwareUpdateBayNumbers'] = {
                    'name': OAFirmwareUpdateBayNumbers.tag,
                    'OAFirmwareUpdateBayNumbers': OAFirmwareUpdateBayNumbers.attrib}
                VirtualConnectDetails = self.get_element(
                    firmware, "VirtualConnectDetails")
                firmware_dict['VirtualConnectDetails'] = {
                    'name': VirtualConnectDetails.tag,
                    'VirtualConnectDetails': VirtualConnectDetails.attrib}
                NetworkSwitchFirmware = self.get_element(
                    firmware, "NetworkSwitchFirmware")
                firmware_dict['NetworkSwitchFirmware'] = {
                    'name': NetworkSwitchFirmware.tag,
                    'NetworkSwitchFirmware': NetworkSwitchFirmware.attrib}
                firmware_list.append(firmware_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, firmware_list)

    def read_hydrogen_data(self):
        """Function to retrieve hydrogen the data Firmware from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        customlog._log_to_console_and_log_file(
            "Reading Firmware data from configMgr.xml file")
        status = True
        # OAs = self.get_element(self.root, "OA")
        hydrogen_list = []
        # for OA in OAs:
        try:
            hydrogen = self.get_element(self.root, "Hydrogen")
            if (len(hydrogen) > 0):
                hydrogen_dict = hydrogen.attrib
                hydrogen_dict['name'] = hydrogen.tag
                Xmgr = self.get_element(hydrogen, "Xmgr")
                if (Xmgr != []):
                    hydrogen_dict['Xmgr'] = {
                        'name': Xmgr.tag, 'Xmgr': Xmgr.attrib}
                HC = self.get_element(hydrogen, "HC")
                if (HC != []):
                    hydrogen_dict['HC'] = {'name': HC.tag, 'HC': HC.attrib}
                H3CSwitch = self.get_element(hydrogen, "H3CSwitch")
                if (H3CSwitch != []):
                    hydrogen_dict['H3CSwitch'] = {
                        'name': H3CSwitch.tag, 'H3CSwitch': H3CSwitch.attrib}
                hydrogen_list.append(hydrogen_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, hydrogen_list)

    def read_Altair_Data(self):
        """Function to retrieve the Altair data from ConfigMgr.xml and convert it into list and dictionaries accordingly"""
        customlog._log_to_console_and_log_file(
            "Reading Firmware data from configMgr.xml file")
        status = True
        try:
            # OAs = self.get_element(self.root, "OA")
            altair_list = []
            # for OA in OAs:
            altair = self.get_element(self.root, "Altair")
            if (altair != []):
                altair_dict = altair.attrib
                altair_dict['name'] = altair.tag
                VirtualHost = self.get_element(altair, "VirtualHost")
                if (VirtualHost != []):
                    altair_dict['VirtualHost'] = {
                        'name': VirtualHost.tag,
                        'VirtualHost': VirtualHost.attrib}
                MediaServer = self.get_element(altair, "MediaServer")
                if (MediaServer != []):
                    altair_dict['MediaServer'] = {
                        'name': MediaServer.tag,
                        'MediaServer': MediaServer.attrib}
                altair_list.append(altair_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, altair_list)

    def read_vSphere_data(self):
        customlog._log_to_console_and_log_file(
            "Reading Firmware data from configMgr.xml file")
        status = True
        try:
            # OAs = self.get_element(self.root, "OA")
            vSphere_list = []
            # for OA in OAs:
            vSphere = self.get_element(self.root, "vSphere")
            if (vSphere != []):
                vSphere_dict = vSphere.attrib
                # vsphere_instance = VSphere('16,95.208.64','cosmos','Insight7')####
                # my_vm = vpshere_instance.get_vm('Daniel-jvm')#####
                # my_vm.name ####this returns the name
                vSphere_dict['name'] = vSphere.tag
                VMs = self.get_element(vSphere, "VMs")
                if (VMs != []):
                    vmlist = []
                    for vm in VMs.getchildren():
                        vmdict = vm.attrib
                        vmdict['name'] = vm.tag
                        vmlist.append(vmdict)
                    vSphere_dict['VM'] = vmlist
                vSphere_list.append(vSphere_dict)
        except Exception as e:
            status = False
            customlog._exception(e)
        return (status, vSphere_list)


class CreateSnapshotXml(object):

    """ This class is to create snapshot XML """

    def writeXML(self, DataObj, filepath, xmltype, snapshot_name=None):
        customlog._log_to_console_and_log_file(
            "Writing Data to snapshot XML file")
        status = True
        try:
            configManager = Element('ConfigMgr')

            customlog._log_to_console_and_log_file(
                "Writing Switches related data to XML")
            # switches related
            switches = SubElement(configManager, 'Switches')
            # switches.append(switches)
            # Network Switch
            NTswitches = SubElement(switches, 'Network_Switches')
            # NTswitches.append()
            customlog._log_to_console_and_log_file(
                "Writing network switches related data to XML")
            i = 1
            for dictn in DataObj.NetworkSwitch_Object:
                NSwitch = SubElement(
                    NTswitches,
                    'Network_Switches' + str(i),
                    Model=dictn['Model'],
                    Name=dictn['Name'],
                    IPv6Address=dictn['IPv6Address'],
                    IPv4Address=dictn['IPv4Address'],
                    FirmwareRev=dictn['FirmwareRev'],
                    Username=dictn['Username'],
                    Password=dictn['Password'])
                # SubElement(NSwitch, 'Configfile', filepath=dictn['Config_file_path'])
                VLANS = SubElement(NSwitch, 'VLANS')
                j = 1
                for VLANs in dictn['VLAN']:
                    VLAN1 = SubElement(
                        VLANS,
                        'VLAN' + str(j),
                        ID=VLANs['ID'],
                        TaggedPorts=str(
                            VLANs['TaggedPorts']),
                        UntaggedPorts=str(
                            VLANs['UntaggedPorts']))
                    VLANIP = VLANs['VLAN_IP']
                    SubElement(
                        VLAN1,
                        'VLAN_IP',
                        IP=VLANIP['IP'],
                        Netmask=VLANIP['Netmask'])
                    j += 1
                i += 1

                Users = SubElement(NSwitch, 'Users')
                j = 1
                for userr in dictn['users']:
                    SubElement(
                        Users,
                        'User' + str(j),
                        Username=userr['Username'],
                        Password=userr['Password'])
                    j += 1

                Ports = SubElement(NSwitch, 'Ports')
                j = 1
                for portatt in dictn['ports']:
                    SubElement(
                        Ports,
                        'PortAtttributes' + str(j),
                        PortList=portatt['PortList'],
                        PortState=portatt['PortState'],
                        PortDuplex=portatt['PortDuplex'],
                        PortSpeed=portatt['PortSpeed'])
                    j += 1

                Managements = SubElement(NSwitch, 'Management')
                j = 1
                for mgmt in dictn['managements']:
                    if(mgmt['name'] == "SNMPv1_2"):
                        SubElement(Managements, mgmt['name'], community=mgmt[
                                   'community'], Privilege=mgmt['Privilege'])
                    if(mgmt['name'] == "SNMPv3"):
                        SubElement(
                            Managements,
                            mgmt['name'],
                            User=mgmt['User'],
                            Auth=mgmt['Auth'],
                            blah=mgmt['blah'],
                            blahblah=mgmt['blahblah'])
                    j += 1

            # San Switch
            Sanswitches = SubElement(switches, 'San_Switches')
            customlog._log_to_console_and_log_file(
                "Writing SAN switches related data to XML")
            i = 1
            for dictn in DataObj.SanSwitch_Object:
                SSwitch = SubElement(
                    Sanswitches,
                    'San_Switch' + str(i),
                    Model=dictn['Model'],
                    Name=dictn['Name'],
                    IPv6Address=dictn['IPv6Address'],
                    IPv4Address=dictn['IPv4Address'],
                    FirmwareRev=dictn['FirmwareRev'],
                    Username=dictn['Username'],
                    Password=dictn['Password'])
                SubElement(SSwitch, 'PortZoning')
                # PortZoning = SubElement(SSwitch, 'PortZoning')
                # To be implemented
                """j = 1
                for PZ in dictn['PortZoning']:
                    PZel = SubElement(PortZoning, 'port' + str(j))
                    j += 1"""

                Zconfigs = SubElement(SSwitch, 'ZoneConfigs')
                j = 1
                for dictn1 in dictn['ZoneConfigs']:
                    ZconfigEle = SubElement(
                        Zconfigs, 'ZoneConfig' + str(j), Name=dictn1[0])
                    ZonesEle = SubElement(ZconfigEle, 'Zones')
                    k = 1
                    for dictn2 in dictn1[1]:
                        ZoneEle = SubElement(
                            ZonesEle, 'Zone' + str(k), alias=dictn2[0])
                        hostsEle = SubElement(ZoneEle, 'hosts')
                        l = 1
                        for dictn3 in dictn2[1]:
                            hostEle = SubElement(
                                hostsEle, 'host' + str(l), alias=dictn3[0])
                            WWNsEle = SubElement(hostEle, 'WWNs')
                            m = 1
                            for dictn4 in dictn3[1].split(';'):
                                SubElement(WWNsEle, 'WWN' + str(m), WWN=dictn4)
                                m += 1
                            l += 1
                        k += 1
                    j += 1

                PortAttr = SubElement(SSwitch, 'PortAttributes')
                # To be implemented according to the data updated in
                # "configMgr.xml" file
                j = 0
                for dictn2 in dictn['PortAttributes']:
                    if(j == 0):
                        if not dictn2:
                            break
                    else:
                        for values in dictn2:
                            SubElement(PortAttr,
                                       'Port' + str(values[0]),
                                       Speed=values[1],
                                       Fillword=values[2])
                    j += 1

            # Storage related
            Storages = SubElement(configManager, 'Storages')
            customlog._log_to_console_and_log_file(
                "Writing storage related data to XML")
            i = 1
            for dictn in DataObj.Storage_Object:
                Storage = SubElement(
                    Storages,
                    'Storage' + str(i),
                    Model=dictn['Model'],
                    Name=dictn['Name'],
                    IPv4Address=dictn['IPv4Address'],
                    IPv6Address=dictn['IPv6Address'],
                    FirmwareRev=dictn['FirmwareRev'],
                    Username=dictn['Username'],
                    Password=dictn['Password'])

                Domain = SubElement(Storage, 'Domain')
                j = 1
                for dictn2 in dictn['Domain']:
                    SubElement(
                        Domain,
                        'Domain' + str(j),
                        Name=dictn2['Name'],
                        DomainUsers=dictn2['DomainUsers'])
                    j += 1

                VirtualVolumes = SubElement(Storage, 'VirtualVolumes')
                j = 1
                for dictn2 in dictn['VirtualVolumes']:
                    SubElement(
                        VirtualVolumes,
                        'VV' + str(j),
                        Name=dictn2['Name'],
                        Size=dictn2['Size'],
                        Domain=dictn2['Domain'],
                        UserCPG=dictn2['UserCPG'],
                        Thin=dictn2['Thin'])
                    j += 1

                Hosts = SubElement(Storage, 'Hosts')
                j = 1
                for dictn2 in dictn['Hosts']:
                    SubElement(
                        Hosts,
                        'Host' + str(j),
                        Name=str(
                            dictn2['Name']),
                        HostOS=str(
                            dictn2['HostOS']),
                        wwn_or_iqn=str(
                            dictn2['wwn_or_iqn']),
                        ConnectionType=str(
                            dictn2['ConnectionType']))
                    j += 1

                CPG = SubElement(Storage, 'CPG')
                j = 1
                for dictn2 in dictn['CPGs']:
                    SubElement(
                        CPG,
                        'CPG' + str(j),
                        Name=dictn2['Name'],
                        Size=dictn2['Size'],
                        Domain=dictn2['Domain'])
                    j += 1

                VLUNs = SubElement(Storage, 'VLUNs')
                j = 1
                for dictn2 in dictn['VLUNs']:
                    SubElement(
                        VLUNs,
                        'VLUN' + str(j),
                        LUN=str(
                            dictn2['LUN']),
                        HostName=str(
                            dictn2['HostName']),
                        VV_Name=str(
                            dictn2['VV_Name']))
                    j += 1
                i += 1

            # Racks related
            Racks = SubElement(configManager, 'Racks')
            customlog._log_to_console_and_log_file(
                "Writing rack related data to XML")
            i = 1
            for dictn in DataObj.Rack_Object:
                if (len(dictn) > 0):
                    Rack = SubElement(
                        Racks, 'Rack' + str(i), Name=dictn['Name'])
                    Servers = SubElement(Rack, 'Servers')
                    j = 1
                    for dictn2 in dictn['Servers']:
                        if (len(dictn2) > 0):
                            SubElement(
                                Servers,
                                'Server' + str(j),
                                iLO_IPv4Address=dictn2['iLO_IPv4Address'],
                                iLOAdministrator=dictn2['iLOAdministrator'],
                                iLOAdminPassword=dictn2['iLOAdminPassword'],
                                Model=dictn2['Model'],
                                BIOS=dictn2['BIOS'],
                                FactoryResetServer=dictn2['FactoryResetServer'],
                                FactoryResetiLO=dictn2['FactoryResetiLO'])
                            Users = SubElement(Servers, 'Users')
                            k = 1
                            for dictn3 in dictn2['Users']:
                                SubElement(
                                    Users,
                                    'User' + str(k),
                                    Username=dictn3['Username'],
                                    Password=dictn3['Password'])
                                k += 1
                            j += 1
                    i += 1
                    dictn4 = dictn['IPDUs'][0]
                    SubElement(
                        Rack,
                        'iPDU',
                        IPAddress=dictn4['IPAddress'],
                        Username=dictn4['Username'],
                        Password=dictn3['Password'])
            # OA related
            if DataObj.OA_Object != []:
                OA = SubElement(
                    configManager,
                    'OA',
                    IPAddress=DataObj.OA_Object[0]['IPv4Address'],
                    Username=DataObj.OA_Object[0]['Username'],
                    Password=DataObj.OA_Object[0]['Password'])
                customlog._log_to_console_and_log_file(
                    "Writing OA related data to XML")

                """for dictn in DataObj.OA_Object:
                    EBIPAdict = dictn['EBIPA']
                    SubElement(OA, 'EBIPA', Enable=EBIPAdict['EBIPA']['Enable'])

                    ServerStartAddressdict = dictn['ServerStartAddress']
                    SubElement(OA, 'ServerStartAddress', Addr=ServerStartAddressdict['ServerStartAddress']['Addr'])

                    InterAddrdict = dictn['InterStartAddress']
                    SubElement(OA, 'InterStartAddress', InterAddr=InterAddrdict['InterStartAddress']['InterAddr'])

                    Subnetdict = dictn['SubnetMask']
                    SubElement(OA, 'SubnetMask', Subnet=Subnetdict['SubnetMask']['Subnet'])

                    Gatewaydict = dictn['Gateway']
                    SubElement(OA, 'Gateway', Gwip=Gatewaydict['Gateway']['Gwip'])

                    ResetVcModuledict = dictn['ResetVcModule']
                    SubElement(OA, 'ResetVcModule', Reset=ResetVcModuledict['ResetVcModule']['Reset'])"""
                for dictn in DataObj.OA_Object:
                    EBIPAdict = dictn['EBIPA']
                    SubElement(
                        OA, 'EBIPA', Enable=EBIPAdict['EBIPA']['Enable'])

                    ServerStartAddressdict = dictn['ServerStartAddress']
                    SubElement(
                        OA,
                        'ServerStartAddress',
                        Addr=ServerStartAddressdict['ServerStartAddress'])

                    InterAddrdict = dictn['InterStartAddress']
                    SubElement(
                        OA,
                        'InterStartAddress',
                        InterAddr=InterAddrdict['InterStartAddress'])

                    Subnetdict = dictn['SubnetMask']
                    SubElement(
                        OA, 'SubnetMask', Subnet=Subnetdict['SubnetMask'])

                    Gatewaydict = dictn['Gateway']
                    SubElement(OA, 'Gateway', Gwip=Gatewaydict['Gateway'])

                    ResetVcModuledict = dictn['ResetVcModule']
                    SubElement(
                        OA,
                        'ResetVcModule',
                        Reset=ResetVcModuledict['ResetVcModule']['Reset'])

            # Firmware related
            if(DataObj.Firmware_Object[0] != []):
                Firmware = SubElement(
                    configManager,
                    'Firmware',
                    HTTPAddress=DataObj.Firmware_Object[0]['HTTPAddress'],
                    OAIPAddress=DataObj.Firmware_Object[0]['OAIPAddress'],
                    Username=DataObj.Firmware_Object[0]['Username'],
                    Password=DataObj.Firmware_Object[0]['Password'])
                customlog._log_to_console_and_log_file(
                    "Writing firmware related data to XML")
                for dictn in DataObj.Firmware_Object:

                    OAFirmwareUpdateBayNumbers = dictn[
                        'OAFirmwareUpdateBayNumbers']
                    SubElement(
                        Firmware,
                        'EBIPA',
                        Cmd=OAFirmwareUpdateBayNumbers['OAFirmwareUpdateBayNumbers']['Bayno'])

                    NetworkSwitchFirmwaredict = dictn['NetworkSwitchFirmware']
                    dictns = NetworkSwitchFirmwaredict['NetworkSwitchFirmware']
                    SubElement(
                        Firmware,
                        'NetworkSwitchFirmware',
                        Switchupdate=dictns['Switchupdate'],
                        SwitchIP=dictns['SwitchIP'],
                        Switchuser=dictns['Switchuser'],
                        Firmwaredownloadcmd=dictns['Firmwaredownloadcmd'],
                        Firmwareupdatecmd=dictns['Firmwareupdatecmd'])
                    VirtualConnectDetailsdict = dictn['VirtualConnectDetails']
                    SubElement(
                        Firmware,
                        'VirtualConnectDetailsdict',
                        Username=VirtualConnectDetailsdict['VirtualConnectDetails']['Username'],
                        Password=VirtualConnectDetailsdict['VirtualConnectDetails']['Password'],
                        VCFirmwarelocation=VirtualConnectDetailsdict['VirtualConnectDetails']['VCFirmwarelocation'])

            # Hydrogen related
            if (DataObj.Hydrogen_Object):
                Hydrogen = SubElement(
                    configManager,
                    'Hydrogen',
                    IPAddress=DataObj.Hydrogen_Object[0]['IPv4Address'],
                    Username=DataObj.Hydrogen_Object[0]['Username'],
                    Password=DataObj.Hydrogen_Object[0]['Password'])
                customlog._log_to_console_and_log_file(
                    "Writing hydrogen related data to XML")
                for dictn in DataObj.Hydrogen_Object:
                    Xmgr_dict = dictn['Xmgr']
                    SubElement(
                        Hydrogen,
                        'Xmgr',
                        FactoryReset=Xmgr_dict['Xmgr']['FactoryReset'])
                    HC_dict = dictn['HC']
                    SubElement(
                        Hydrogen,
                        'HC',
                        FactoryReset=str(
                            HC_dict['HC']['FactoryReset']))
                    H3CSwitch_dict = dictn['H3CSwitch']
                    SubElement(Hydrogen, 'H3CSwitch', FactoryReset=str(
                        H3CSwitch_dict['H3CSwitch']['FactoryReset']))

            # Altair related
            if (DataObj.Altair_Object):
                altair = SubElement(
                    configManager,
                    'Altair',
                    IPAddress=DataObj.Altair_Object[0]['IPv4Address'],
                    Username=DataObj.Altair_Object[0]['Username'],
                    Password=DataObj.Altair_Object[0]['Password'])
                customlog._log_to_console_and_log_file(
                    "Writing altair related data to XML")
                for dictn in DataObj.Altair_Object:
                    VirtualHost_dict = dictn['VirtualHost']
                    SubElement(
                        altair,
                        'VirtualHost',
                        IPAddress=VirtualHost_dict['VirtualHost']['IPv4Address'],
                        Username=VirtualHost_dict['VirtualHost']['Username'],
                        Password=VirtualHost_dict['VirtualHost']['Password'],
                        HostType=VirtualHost_dict['VirtualHost']['HostType'])
                    MediaServer_dict = dictn['MediaServer']
                    SubElement(
                        altair,
                        'MediaServer',
                        IPAddress=MediaServer_dict['MediaServer']['IPv4Address'],
                        Username=MediaServer_dict['MediaServer']['Username'],
                        Password=MediaServer_dict['MediaServer']['Password'])

            # vSphere related
            customlog._log_to_console_and_log_file(
                "Writing vSphere related data to XML")
            for dictn in DataObj.vSphere_Object:
                if (len(dictn) > 0):
                    vSphere = SubElement(
                        configManager,
                        'vSphere',
                        IPv4Address=dictn['IPv4Address'],
                        Username=dictn['Username'],
                        Password=dictn['Password'])
                    i = 1
                    for dict2 in dictn['VM']:
                        SubElement(
                            vSphere,
                            'VM' + str(i),
                            Name=dict2['Name'],
                            Reset=dict2['Reset'],
                            PowerOn=dict2['PowerOn'],
                            Template=dict2['Template'],
                            OVF=dict2['OVF'],
                            Clone=dict2['Clone'],
                            CloneName=dict2['CloneName'],
                            ShutdownAfter=dict2['ShutdownAfter'])
                        i += 1

            # Writing the data to XML file
            if (xmltype != "teardown"):
                customlog._log_to_console_and_log_file(
                    "Snapshot name: %s" % snapshot_name)
                if snapshot_name:
                    filepath = snapshot_name
                else:
                    date = datetime.datetime.now().strftime("%I-%M%p_%B_%d_%Y")
                    filepath = "snapshot_" + date
            else:
                filepath = os.path.join(
                    os.getcwd(), r"testcase", r"teardown.xml")

            output_file = open(filepath, 'w')
            output_file.write('<?xml version="1.0" encoding="utf-8"?>')
            customlog._log_to_console_and_log_file(
                "Formatting the XML with proper indentation")
            indent_XML(configManager)
            # ElementTree.dump(configManager)
            customlog._log_to_console_and_log_file(
                "Writing the created XML file to given location %s" % filepath)
            output_file.write(ElementTree.tostring(configManager))
            output_file.close()
        except Exception as e:
            status = False
            customlog._exception(e)
        return status


def indent_XML(element, level=0):
    """Function to format XML """
    i = "\n" + level * "  "
    if len(element):
        if not element.text or not element.text.strip():
            element.text = i + "  "
        if not element.tail or not element.tail.strip():
            element.tail = i
        for element in element:
            indent_XML(element, level + 1)
        if not element.tail or not element.tail.strip():
            element.tail = i
    else:
        if level and (not element.tail or not element.tail.strip()):
            element.tail = i


def Parse_EVA_Storage_output(data, mainKey, datalist):
    """Function to parse 3PAR data"""
    eachline = data.split('\n')
    outlist = []
    templist = []
    for line in eachline:
        for key in datalist:
            if(key in line):
                if(key == line.split(':')[0].strip(".").strip(" ")):
                    templist.append(
                        (line.split(':')[0].strip(".").strip(" ")) + ":" + (line.split(':')[1].strip(" ")))
        if(mainKey in line):
            for key in datalist:
                if not (any(key in s for s in templist)):
                    templist.append(key + ":")
            outlist.append(templist)
            templist = []
    return outlist
