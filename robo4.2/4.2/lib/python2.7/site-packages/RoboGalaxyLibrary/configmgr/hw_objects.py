"""
This module contains classes that hold information via XML configuration file.

Element objects are used in this source code
doc: http://docs.python.org/2/library/xml.etree.elementtree.html#element-objects
"""

import xml.etree.ElementTree as ET
import copy
import custom_logging as log


class HardwareObject(object):

    """
    This class is intended to hold common information on switches and storage
    such as IP, Model, Name, and credentials.
    """

    def __init__(self, hw_dict):
        self.model = hw_dict['Model']
        self.name = hw_dict['Name']
        self.ip_address = hw_dict['IPv4Address']
        self.ipv6 = hw_dict['IPv6Address']
        self.username = hw_dict['Username']
        self.password = hw_dict['Password']
        self.fw_rev = hw_dict['FirmwareRev']

    def get_info(self):
        """
        Returns hardware info
        """
        return self.model, self.name, self.ip_address, self.fw_rev

    def get_credentials(self):
        """
        Returns ip, username, and password
        """
        return self. ip_address, self.mgt_un, self.mgt_pw


class StorageObject(HardwareObject):

    """
    This class holds info related to a storage object such as a 3PAR or EVA.
    See storage_eva.py and storage_3par.py to see implementation
    """

    def __init__(self, storage_element):
        HardwareObject.__init__(self, storage_element.attrib)
        self.tag = storage_element.tag
        self.domains = []
        self.virtual_volumes = []
        self.hosts = []
        self.cpgs = []
        self.vluns = []
        for domain in storage_element.find("Domains"):
            domain.attrib["DomainUsers"] = domain.attrib[
                "DomainUsers"].split(',')
            temp_list = []
            for user in domain.attrib["DomainUsers"]:
                temp_list.append(user.replace(" ", ""))
            domain.attrib["DomainUsers"] = temp_list
            self.domains.append(domain.attrib)
        for virtual_vol in storage_element.find("VirtualVolumes"):
            # virtual_vol.attrib adds the dict, virtual_vol adds the element
            self.virtual_volumes.append(virtual_vol.attrib)
        for host in storage_element.find("Hosts"):
            self.hosts.append(host.attrib)
        for cpg in storage_element.find("CPGs"):
            self.cpgs.append(cpg.attrib)
        for vlun in storage_element.find("VLUNs"):
            self.vluns.append(vlun.attrib)


class SanSwitchObject(HardwareObject):

    """
    Holds SAN Switch information such as zone configs, port zoning,
    port attributes
    """

    def __init__(self, san_switch_element):
        HardwareObject.__init__(self, san_switch_element.attrib)
        self.tag = san_switch_element.tag
        self.update = san_switch_element.attrib["FirmwareUpdate"]
        self.fw_loc = san_switch_element.attrib["FirmwareLoc"]
        self.fw_host = san_switch_element.attrib["FirmwareHost"]
        self.fw_un = san_switch_element.attrib["FirmwareUn"]
        self.fw_pw = san_switch_element.attrib["FirmwarePw"]
        self.fw_prot = san_switch_element.attrib["FirmwareProtocol"]
        self.zone_configs = []  # list of Element objects
        self.ports = []  # list of Element objects
        for port_zoning in san_switch_element.find("PortZoning"):
            log._debug("Port zoning not needed for now..." + port_zoning.tag)
        for zone_config in san_switch_element.find("ZoneConfigs"):
            log._debug("Currently processing %s" % zone_config.tag)
            self.zone_configs.append(zone_config)  # list of Element objects
            # view_element_and_subelements(zone_config)
        for port_attribute in san_switch_element.find("PortAttributes"):
            log._debug("Currently processing %s" % port_attribute.tag)
            self.ports.append(port_attribute)


class NetworkSwitchObject(HardwareObject):

    """
    Holds Network Switch info such as VLANs, users, ports
    """

    def __init__(self, network_switch_element):
        HardwareObject.__init__(self, network_switch_element.attrib)
        self.tag = network_switch_element.tag
        self.vlans = []
        self.users = []
        self.ports = []

        for vlan in network_switch_element.find("VLANS"):
            self.vlans.append(vlan)
        for user in network_switch_element.find("Users"):
            self.users.append(user)
        for port in network_switch_element.find("Ports"):
            self.ports.append(port)
        self.management = network_switch_element.find("Management")
        self.snmpv1_2 = copy.deepcopy(self.management.find("SNMPv1_2").attrib)
        self.snmpv3 = copy.deepcopy(self.management.find("SNMPv3").attrib)
        # self.config_file = network_switch_element.find("Config_File")
        # self.config_file_name = copy.deepcopy(self.management.find("Conf_File_name").attrib)
        self.config_file_name = network_switch_element.find(
            "Config_File").attrib["Configfilename"]
        self.tftp_server_ip = network_switch_element.find(
            "Config_File").attrib["tftpIP"]


class HydrogenObject(object):

    """
    Contains all info related to Hydrogen instance.
    """

    def __init__(self, hydrogen_element):
        self.tag = hydrogen_element.tag
        self.ip_address = hydrogen_element.attrib["IPv4Address"]
        self.username = hydrogen_element.attrib["Username"]
        self.password = hydrogen_element.attrib["Password"]

        # The following variables are dicts with respective keys above

        # Xmgr keys:
        #       "FactoryReset"
        # self.xmgr is a dict.
        self.xmgr = copy.deepcopy(hydrogen_element.find("Xmgr").attrib)

        # HC keys:
        #       "FactoryReset"
        self.hc_dict = copy.deepcopy(hydrogen_element.find("HC").attrib)

        # H3C Switch keys:
        #       "FactoryReset"
        self.h3c_switch = copy.deepcopy(
            hydrogen_element.find("H3CSwitch").attrib)


class AltairObject(object):

    """
    Contains Altair info
    """

    def __init__(self, altair_element):
        self.tag = altair_element.tag
        self.ip_address = altair_element.attrib["IPv4Address"]
        self.username = altair_element.attrib["Username"]
        self.password = altair_element.attrib["Password"]
        self.virtualhost_dict = copy.deepcopy(
            altair_element.find("VirtualHost").attrib)
        # VirtualHost keys:
        #       "IPv4Address"
        #       "Username"
        #       "Password"
        #       "HostTpe" - kvm or esx
        self.mediaserver_dict = copy.deepcopy(
            altair_element.find("MediaServer").attrib)
        # VirtualHost keys:
        #       "IPv4Address"
        #       "Username"
        #       "Password"


class VSphereObject(object):

    """
    Contains vSphere info
    """

    def __init__(self, vsphere_element):
        self.tag = vsphere_element.tag
        self.ip_address = vsphere_element.attrib["IPv4Address"]
        self.username = vsphere_element.attrib["Username"]
        self.password = vsphere_element.attrib["Password"]
        self.vms = []
        for vm in vsphere_element.find("VMs"):
            # adding to list of vms, each vm is ElementObject
            self.vms.append(vm)
            log._info("Added VM '%s' to vSphere object '%s'" %
                      (vm.tag, vsphere_element.tag))


class RackObject(object):

    """
    Holds Rack info, has list of servers, and
    """

    def __init__(self, rack_element):
        self.tag = rack_element.tag  # Ex Rack1
        self.name = rack_element.attrib["Name"]
        self.servers = []
        for server in rack_element.find("Servers"):
            # sending the server Element to ServerObject constructor
            # list of ServerObjects that represent each server
            self.servers.append(ServerObject(server))
            log._info("Added server %s to rack %s, Model: %s" %
                      (server.tag, rack_element.tag, server.attrib["Model"]))

        # self.ipdu is a dict with keys of 'IPAddress', 'Username' and
        # Password'
        self.ipdu = copy.deepcopy(rack_element.find("iPDU").attrib)


class ServerObject(object):

    """
    Contains server info such as ip, ilo creds, model, bios, etc.
    """

    def __init__(self, server_element):
        self.tag = server_element.tag  # Ex Server1
        self.ilo_ip = server_element.attrib["iLO_IPv4Address"]
        self.ilo_un = server_element.attrib["iLOAdministrator"]
        self.ilo_pw = server_element.attrib["iLOAdminPassword"]
        self.model = server_element.attrib["Model"]
        self.bios = server_element.attrib["BIOS"]
        self.factory_reset_server = server_element.attrib["FactoryResetServer"]
        self.factory_reset_ilo = server_element.attrib["FactoryResetiLO"]
        self.users = []  # users is a list of objects of type Element
        # each user Element in users List has Username and Password
        # accessible by users[user].attrib["Username"] and
        # users[user].attrib["Password"]
        for user in server_element.find("Users"):
            # adding each user Element to list, and can be
            self.users.append(user)
            # accessed externally by ServerObject.
            log._debug("Added %s to %s" % (user.tag, server_element.tag))
        self.bootorder = []
        self.bootorder = server_element.find(
            "Bootorder").attrib["Order"].split(',')


class OaObject(object):

    """
    Contains OA related information
    """

    def __init__(self, oa_element):
        self.tag = oa_element.tag
        self.ip_address = oa_element.attrib["IPv4Address"]
        self.username = oa_element.attrib["Username"]
        self.password = oa_element.attrib["Password"]
        self.subnet = oa_element.find("SubnetMask").attrib["Subnet"]
        self.gateway = oa_element.find("Gateway").attrib["Gwip"]
        self.enable_ebipa = oa_element.find("EBIPA").attrib["Enable"]
        self.server_start_addr = oa_element.find(
            "ServerStartAddress").attrib["Addr"]
        self.inter_start_addr = oa_element.find(
            "InterStartAddress").attrib["InterAddr"]
        self.reset_vc_module = oa_element.find("ResetVcModule").attrib["Reset"]


class VcObject(object):

    """
    Contains OA related information
    """

    def __init__(self, vc_element):
        self.tag = vc_element.tag
        self.ip_address = vc_element.attrib["IPv4Address"]
        self.username = vc_element.attrib["Username"]
        self.password = vc_element.attrib["Password"]
        self.is_delete_domain = vc_element.find(
            "DeleteDomain").attrib["Deldom"]
        self.oa_user = vc_element.find("ImportEnclosure").attrib["OAUsername"]
        self.oa_password = vc_element.find(
            "ImportEnclosure").attrib["OAPassword"]
        self.vc_user = vc_element.find("AddVCUser").attrib["Username"]
        self.vc_password = vc_element.find("AddVCUser").attrib["Password"]


class FirmwareObject(object):

    """
    Contains firmware related information
    """

    def __init__(self, firmware_element):
        self.tag = firmware_element.tag
        self.spp_http_url = firmware_element.attrib["HTTPAddress"]
        self.oa_ip = firmware_element.attrib["OAIPAddress"]
        self.oa_user = firmware_element.attrib["Username"]
        self.oa_passwd = firmware_element.attrib["Password"]
        self.bay_numbers = firmware_element.find(
            "OAFirmwareUpdateBayNumbers").attrib["Bayno"]
        self.oa_firmware_version = firmware_element.attrib["LatestOAVersion"]
        # self.server_firmware_command = firmware_element.find("ServerFirmwareCommand").attrib["Cmd"]
        self.vc_user = firmware_element.find(
            "VirtualConnectDetails").attrib["Username"]
        self.vc_passwd = firmware_element.find(
            "VirtualConnectDetails").attrib["Password"]
        self.vc_firmware_location = firmware_element.find(
            "VirtualConnectDetails").attrib["VCFirmwarelocation"]
        self.is_net_switch_update_enabled = firmware_element.find(
            "NetworkSwitchFirmware").attrib["Switchupdate"]
        self.network_switch_ip = firmware_element.find(
            "NetworkSwitchFirmware").attrib["SwitchIP"]
        self.network_switch_user = firmware_element.find(
            "NetworkSwitchFirmware").attrib["Switchuser"]
        self.network_switch_passwd = firmware_element.find(
            "NetworkSwitchFirmware").attrib["Switchpassword"]
        self.nework_switch_firmware_download_command = firmware_element.find(
            "NetworkSwitchFirmware").attrib["Firmwaredownloadcmd"]
        self.network_swtich_firmware_update_command = firmware_element.find(
            "NetworkSwitchFirmware").attrib["Firmwareupdatecmd"]


def _view_element_and_subelements(element):
    """
    prints out the Element type named element as string
    """
    log._info(ET.tostringlist(element))
