import httplib
import httplib2
import json
import traceback
import re
import time
import string
import random
import logging
import sys
import unittest
from config import common_config
from tests.utils import *


def conditional_skip():
    """ Decorator for skipping a test according to preferences set by the
    user on the command line when the test run was launched
    """
    def deco_conditional_skip(f):
        def f_conditional_skip(*args, **kwargs):
            testObject = args[0]  # self in the test
            if hasattr(testObject, 'skip_list'):
                match = re.match(
                    "^test_([0-9][0-9]).*$", testObject._testMethodName)
                if len(match.groups()) > 0:
                    idx = match.group(1)
                    if idx in testObject.skip_list:
                        testObject.skipTest("Skipped by user")
                        return
            return f(*args, **kwargs)
        return f_conditional_skip

    return deco_conditional_skip


def read_rolemappings_file(filename):
    roles_file = open(filename)
    vpx_roles_data = roles_file.read().split('\n')
    vpx_roles = {}
    roles_vpx = {}
    for vpx in vpx_roles_data:
        if vpx != '':
            fields = vpx.split(' ')
            vpx_roles[fields[0]] = dict(host=fields[1],
                                        roles=fields[2:])
            for role in fields[2:]:
                if role not in roles_vpx:
                    roles_vpx[role] = []
                roles_vpx[role].append(fields[0])
    return vpx_roles, roles_vpx


class MATTestCase(unittest.TestCase):

    def setUp(self):
        self.log = logging.getLogger("Pulsar_MAT")
        self.log.debug("Running %s", self._testMethodName)
        self.tenant = "anne"
        self.username = "anne"
        self.password = "serveradmin"
        self.image_name = "ubuntu"
        self.timeout = 5
        self.instance_id_list = []
        self.tenant_id, self.token_id = keystone_login(
            self.tenant, self.username, self.password)

    @conditional_skip()
    def test_01_list_role(self):
        roles = get_roles(self.token_id)
        assert 'Infrastructure Administrator' in roles
        assert 'Cloud User' in roles
        assert 'admin' in roles
        self.log.debug("test_01_list_role completed")

    @conditional_skip()
    def test_02_list_user(self):
        users = keystone_user_list(self.token_id)
        assert 'anne' in users
        assert 'steve' in users
        assert 'administrator' in users
        self.log.debug("test_02_list_user completed")

    @conditional_skip()
    def test_03_list_tenant(self):
        tenants = get_tenants(self.token_id)
        assert 'anne' in tenants
        assert 'steve' in tenants
        assert 'administrator' in tenants
        self.log.debug("test_03_list_tenant completed")

    @conditional_skip()
    def test_04_list_image(self):
        images = list_image_details(self.tenant_id, self.token_id)
        assert len(images) != 0, images
        self.log.debug("test_04_list_image completed")

    @conditional_skip()
    def test_05_list_flavor(self):
        response, flavors = list_flavor(self.token_id)
        if int(response['status']) != 200:
            raise AssertionError("status is not 200: " + response['status'])
        assert len(flavors) != 0, flavors
        self.log.debug("test_05_list_flavor completed")

    @conditional_skip()
    def test_06_create_server(self):
        image_ref = find_image(self.image_name, self.tenant_id, self.token_id)
        instance_id = create_instance(
            "useradmin_instance", image_ref, 1, self.tenant_id, self.token_id)
        self.instance_id_list.append(instance_id)
        while True:
            try:
                if is_instance_active(
                        instance_id,
                        self.tenant_id,
                        self.token_id):
                    break
            except httplib.BadStatusLine as exn:
                print "Warning: got BadStatusLine"
            time.sleep(self.timeout)
        self.log.debug("test_06_create_server completed")

    @conditional_skip()
    def test_07_reboot_server(self):
        for instance_id in self.instance_id_list:
            reboot_instance(self.tenant_id, self.token_id, instance_id)

        self.log.debug("test_07_reboot_server completed")

    @conditional_skip()
    def test_08_delete_server(self):
        for instance_id in self.instance_id_list:

            delete_instance(instance_id)
            while True:
                try:
                    if is_instance_deleted(instance_id):
                        break
                except httplib.BadStatusLine as exn:
                    print "Warning: got BadStatusLine"
            time.sleep(self.timeout)
        self.log.debug("test_08_delete_server completed")

if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout)
    logging.getLogger("isc_mat").\
        setLevel(logging.DEBUG)

    unittest.main()
