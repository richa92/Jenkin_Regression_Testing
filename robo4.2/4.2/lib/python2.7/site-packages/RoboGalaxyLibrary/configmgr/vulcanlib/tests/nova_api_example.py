
"""
Command-line interface to the Nova API.
"""

import argparse
import getpass
import os
import sys
from common.exec_eror import *
import tests.utils as utils


class NovaAPI(object):

    # sub-command functions

    def foo(self, args):
        print args.x * args.y

    def get_auth_token(self, args):
        tenant_id, auth_token = utils.keystone_login(
            args.tenant, args.username, args.password)
        sys.stdout.write(auth_token)

    def find_tenant_id(self, args):
        tenants = utils.get_tenants(args.auth_token)
        sys.stdout.write(tenants[args.tenant_name])

    def get_base_parser(self):
        parser = argparse.ArgumentParser(
            prog='nova_api',
            description=__doc__.strip(),
            epilog='See "help" '
                   'for help on a specific command.',
            add_help=False,
            formatter_class=HelpFormatter,
        )

        subparsers = parser.add_subparsers()

        # create the parser for the "get_auth_token" command
        parser_get_auth_token = subparsers.add_parser('get_auth_token')
        parser_get_auth_token.add_argument('tenant')
        parser_get_auth_token.add_argument('username')
        parser_get_auth_token.add_argument('password')
        parser_get_auth_token.set_defaults(func=self.get_auth_token)

        # create the parser for the "find_tenant_id" command
        parser_find_tenant_id = subparsers.add_parser('find_tenant_id')
        parser_find_tenant_id.add_argument('tenant_name')
        parser_find_tenant_id.add_argument('auth_token')
        parser_find_tenant_id.set_defaults(func=self.find_tenant_id)

        return parser

    def get_subcommand_parser(self):
        parser = self.get_base_parser()

        self.subcommands = {}
        subparsers = parser.add_subparsers(metavar='<subcommand>')

        self._find_actions(subparsers, self)

        return parser

    def _find_actions(self, subparsers, actions_module):
        for attr in (a for a in dir(actions_module) if a.startswith('do_')):
            # I prefer to be hypen-separated instead of underscores.
            command = attr[3:].replace('_', '-')
            callback = getattr(actions_module, attr)
            desc = callback.__doc__ or ''
            help = desc.strip().split('\n')[0]
            arguments = getattr(callback, 'arguments', [])

            subparser = subparsers.add_parser(
                command,
                help=help,
                description=desc,
                add_help=False,
                formatter_class=HelpFormatter)
            subparser.add_argument('-h', '--help', action='help',
                                   help=argparse.SUPPRESS)
            self.subcommands[command] = subparser
            for (args, kwargs) in arguments:
                subparser.add_argument(*args, **kwargs)
            subparser.set_defaults(func=callback)

    def main(self, argv):
        # Parse args once to find version
        parser = self.get_base_parser()
        (options, args) = parser.parse_known_args(argv)

# subcommand_parser = self.get_subcommand_parser()
# self.parser = subcommand_parser

        # Handle top-level --help/-h before attempting to parse
        # a command off the command line
        # if not argv or options.help:
        #    self.do_help(options)
        #    return 0

        # print "user %s" % options.username

        # parse the args and call whatever function was selected
        args = parser.parse_args(argv)
        args.func(args)

    @utils.arg('command', metavar='<subcommand>', nargs='?',
               help='Display help for <subcommand>')
    def do_help(self, args):
        """
        Display help about this program or one of its subcommands.
        """
        if getattr(args, 'command', None):
            if args.command in self.subcommands:
                self.subcommands[args.command].print_help()
            else:
                raise CommandError("'%s' is not a valid subcommand" %
                                   args.command)
        else:
            self.parser.print_help()


class HelpFormatter(argparse.HelpFormatter):

    def start_section(self, heading):
        # Title-case the headings
        heading = '%s%s' % (heading[0].upper(), heading[1:])
        super(HelpFormatter, self).start_section(heading)


if __name__ == "__main__":
    try:
        NovaAPI().main(sys.argv[1:])

    except Exception as e:
        print >> sys.stderr, e
        sys.exit(1)
