""" THIS IS A COMMON REST APIs & MISC Utility FUNCTIONS """


import httplib
import httplib2
import sys
import json
import time
import os
import random
import signal
import subprocess
import sys
from httplib import IncompleteRead
from config import common_config

keystone_auth_url = common_config.keystone_auth_url
glance_api_url = common_config.glance_api_url

nova_api_url = common_config.nova_api_url
ALPHABET = "abcdefghijklmnopqrstuvwxyz0123456789"
key_filename = '/root/.ssh/id_rsa.pub'


# Decorator for cli-args
def arg(*args, **kwargs):
    def _decorator(func):
        # Because of the sematics of decorator composition if we just append
        # to the options list positional options will appear to be backwards.
        func.__dict__.setdefault('arguments', []).insert(0, (args, kwargs))
        return func
    return _decorator


def _execute(command):

    env = os.environ.copy()
    process = subprocess.Popen(command,
                               shell=True,
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE,
                               env=env)
    return process


def execute_and_return(command):
    process = _execute(command)
    return process.pid


def execute(command):
    process = _execute(command)
    (out, err) = process.communicate()
    return (out, err, process.returncode)


def remote_execute(command, host, key):
    (out, err, code) = execute("ssh -o stricthostkeychecking=no -i %s "
                               "root@%s %s" % (key, host, command))
    return (out, err, code)


def do_remote_ping(host, dst_ip):

    (_, _, code) = remote_execute("ls", host, key_filename)
    if code == 255:
        raise Exception("WARNING (OS-849): The key was probably "
                        "not injected into the instance, "
                        "cannot perform ping!")

    (out, err, code) = remote_execute("ping -q -c4 %s | "
                                      "tail -n2 | head -n1 | "
                                      "awk {'print $1\":\"$4'}" % dst_ip,
                                      host, key_filename)
    # parse output
    (sent, received) = out.split(':')
    if sent.strip() != received.strip():
        return False
    return True


def gen_rnd_string(str_len=5):
    result = ""
    for item in random.sample(ALPHABET, str_len):
        result += item
    return result


def _do_request(method, path, tenant_id, auth_token, body=''):

    # conn = httplib2.Http(".cache")
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s%s/%s' % (nova_api_url, tenant_id, path)
    resp, content = conn.request(url, method, body,
                                 headers={"Content-Type": "application/json",
                                          "X-Auth-Token": auth_token})
    if int(resp['status']) in [200, 201, 202, 203, 204]:
        if content:
            content = json.loads(content)
        return content
    else:
        raise Exception('%s %s failed' % (method, url), body, resp, content)


def keystone_login(tenant, username, password):

    # conn = httplib2.Http(".cache")
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s/v2.0/tokens' % (keystone_auth_url)
    body = json.dumps({'auth':
                       {'tenantName': tenant,
                        'passwordCredentials': {'username': username,
                                                'password': password}}})
    resp, content = conn.request(url, 'POST', body,
                                 headers={"Content-Type": "application/json"})
    if resp['status'] == '200' and content:
        content = json.loads(content)
        # print content
        return (content['access']['token']['tenant']['id'],
                content['access']['token']['id'])
    else:
        raise Exception('Keystone login POST %s failed' %
                        url, body, resp, content)


def keystone_user_list(token_id):
    user_list_uri = common_config.keystone_admin_url + "/users"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(user_list_uri, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("Invalid user / password")

    return content


def createUser(token_id, username, email, password):
    cmd_uri = common_config.keystone_admin_url + "/users"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    body = json.JSONEncoder().encode(
        {"user": {"name": username, "email": email, "password": password, "enabled": "true"}})
    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(cmd_uri, "POST", headers=headers, body=body)

    # if int(response['status']) != 200:
    #    raise AssertionError("status is not 200: "+response['status'])

    jsonobj = json.loads(content)
    return jsonobj['user']['id'], response


def add_user_role(token, user_id, tenant_id, role_id):
    cmd_uri = common_config.keystone_admin_url + "/tenants/" + \
        tenant_id + "/users/" + user_id + "/roles/OS-KSADM/" + role_id
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token['id']}

    response, content = h.request(cmd_uri, "PUT", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    jsonobj = json.loads(content)
    return jsonobj


def delete_token(token_id):
    remove_token_uri = common_config.keystone_admin_url + \
        "/tokens/" + token_id + "?action=delete_token"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response = {}
    try:
        response, content = h.request(
            remove_token_uri, "DELETE", headers=headers)
    except IncompleteRead:
        response['status'] = 204
        content = ''

    responseCode = int(response['status'])
    if responseCode >= 300:
        raise AssertionError(
            "Delete token " +
            token_id +
            ' returns response code ' +
            response['status'])

    return content


def get_user_role(token_id, userName):

    cmd_uri = common_config.isc_appliance_url + \
        "/security-base/rest/user/role/"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "auth": token_id}

    response, content = h.request(cmd_uri + userName, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    jsonobj = json.loads(content)
    members = jsonobj['members']
    return [member['roleName'] for member in members]


def get_roles(token_id):
    cmd_uri = common_config.keystone_admin_url + "/OS-KSADM/roles"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(cmd_uri, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    jsonobj = json.loads(content)
    roles = jsonobj['roles']
    ids = [role['id'] for role in roles]
    names = [role['name'] for role in roles]
    return dict(zip(names, ids))


def get_tenants(token_id):
    cmd_uri = common_config.keystone_admin_url + "/tenants"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(cmd_uri, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    jsonobj = json.loads(content)
    tenants = jsonobj['tenants']
    ids = [tenant['id'] for tenant in tenants]
    names = [tenant['name'] for tenant in tenants]
    return dict(zip(names, ids))


def create_instance(server_name, image_ref, flavor_id, tenant_id, auth_token):
    body = ('{"server": {"name": "%s", "imageRef": "%s", "flavorRef": "%d"}}'
            % (server_name, image_ref, flavor_id))
    content = _do_request('POST', 'servers', tenant_id, auth_token, body)
    return content['server']['id']


def is_instance_active(server_id, tenant_id, auth_token):
    content = _do_request('GET', 'servers/%s' %
                          server_id, tenant_id, auth_token)
    status = content['server']['status']
    if status == 'ACTIVE':
        return True
    elif status == 'ERROR':
        raise Exception('Instance went into ERROR state')
    else:
        return False


def get_instance_ip_address(server_id, tenant_id, auth_token):
    content = _do_request('GET', 'servers/%s' %
                          server_id, tenant_id, auth_token)
    status = content['server']['status']
    ip_address = content['server']['addresses']['novanet']['addr']
    return status, ip_address


def delete_instance(server_id, tenant_id, auth_token):
    _do_request('DELETE', 'servers/%s' % server_id, tenant_id, auth_token)


def delete(path, tenant_id, auth_token):
    """
        Author      : Amogh R(Amogh-r.mavinagidad@hp.com)
        Descirption : This function deletes the attribute from the appliance(instance, Flavor, Image etc....).
        Params      :
                      path        -->  Path for the value to be deleted for ex: "servers/server-ID"
                      tenant_id   -->  tenant_id from keystone login
                      auth_token  -->  auth token from keystone login

        Usage       : path="images/image_ID"
                      delete(,tenant_id,auth_token)

        Return      : doesnt return a value
    """
    _do_request('DELETE', path, tenant_id, auth_token)


def is_instance_deleted(server_id, tenant_id, auth_token):
    content = _do_request('GET', 'servers', tenant_id, auth_token)
    for server in content['servers']:
        if server['id'] == server_id:
            return False
    return True


def reboot_instance(tenant_id, auth_token, server_id):
    # POST    /servers/id/action
    header = httplib2.Http(".cache")
    url = '%s%s/servers/%s/action' % (nova_api_url, tenant_id, server_id)
    resp, content = header.request(url, "POST", body='{"reboot" : \
                                                       {"type" : "HARD"}}',
                                   headers={"Content-Type": "application/json",
                                            "X-Auth-Token": auth_token})
    print "Reboot Server::resp %s content %s " % (resp, content)
    if int(resp['status']) in [200, 201, 202, 203, 204]:
        return resp
    else:
        raise NameError("Unable to reboot")


def find_image(image_name, tenant_id, auth_token):
    content = _do_request('GET', 'images', tenant_id, auth_token)
    for image in content['images']:
        if image['name'] == image_name:
            return image['id']
    raise Exception('Cannot find image')


def list_image(tenant_id, auth_token):
    content = _do_request('GET', 'images', tenant_id, auth_token)
    return content


def list_image_details(tenant_id, auth_token):
    content = _do_request('GET', 'images/detail', tenant_id, auth_token)
    return content


def image_status(image_id, tenant_id, auth_token):
    content = _do_request('GET', 'images/%s' % image_id, tenant_id, auth_token)
    return content['image']['status']


def list_server_details(tenant_id, auth_token):
    content = _do_request('GET', 'servers/detail', tenant_id, auth_token)
    return content


def get_instance_details(server_id, tenant_id, auth_token):
    content = _do_request('GET', 'servers/%s' %
                          server_id, tenant_id, auth_token)
    return content


def get_vm_details(server_id, tenant_id, auth_token):
    content = _do_request('GET', 'virtualmachines/%s' %
                          server_id, tenant_id, auth_token)
    return content


def list_server(tenant_id, auth_token):
    content = _do_request('GET', 'servers', tenant_id, auth_token)
    return content


def find_server_id(server_name, tenant_id, auth_token):
    '''Find the server ID given the server name'''
    content = _do_request('GET', 'servers', tenant_id, auth_token)
    for server in content['servers']:
        if server['name'] == server_name:
            return server['id']
    raise Exception('Cannot find server')


def find_tenant_id(tenant_name, auth_token):
    '''Find the tenant ID given the tenant name'''
    content = _do_request('GET', 'servers', tenant_id, auth_token)
    for server in content['servers']:
        if server['name'] == server_name:
            return server['id']
    raise Exception('Cannot find server')


def list_flavor(auth_token):
    header = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%sflavors' % (nova_api_url)
    resp, content = header.request(url, "GET", body='',
                                   headers={"Content-Type": "application/json",
                                            "X-Auth-Token": auth_token})
    # print "eval(content)"
    # print eval(content)
    # print "Flavors list ::resp %s content %s " % (resp, content)
    return resp, content


def find_flavor(flavor_name, tenant_id, auth_token):
    content = _do_request('GET', 'flavors', tenant_id, auth_token)
    for flavor in content['flavors']:
        if flavor['name'] == flavor_name:
            return flavor['id']
    raise Exception('Cannot find Flavor')


def find_flavor_id(flavor_name, tenant_id, auth_token):
    '''Find the flavor ID given the flavor name'''
    content = _do_request('GET', 'flavors', tenant_id, auth_token)
    for flavor in content['flavors']:
        if flavor['name'] == flavor_name:
            return flavor['id']
    raise Exception('Cannot find flavor')


def create_floating_ip(tenant_id, auth_token):
    '''Allocate floating ips for the current tenant'''
    content = _do_request('POST', 'os-floating-ips', tenant_id, auth_token)
    return content['floating_ip']


def delete_floating_ip(floating_ip_id, tenant_id, auth_token):
    '''Deallocates the provided floating IP'''
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s%s/os-floating-ips/%s' % (nova_api_url,
                                       tenant_id, str(floating_ip_id))
    resp, content = conn.request(url, 'DELETE',
                                 headers={"Content-Type": "application/json",
                                          "X-Auth-Token": auth_token})

    if resp['status'] == '202':
        return resp['status']
    else:
        raise Exception('Delete floating ip failed %s' % resp)


def list_floating_ip(tenant_id, auth_token):
    '''List allocated floating ips'''
    content = _do_request('GET', 'os-floating-ips', tenant_id, auth_token)
    return content


def find_floating_ip_id(ip_address, tenant_id, auth_token):
    '''Find floating ip ID given the ip address'''
    content = _do_request('GET', 'os-floating-ips', tenant_id, auth_token)
    for ip in content['floating_ips']:
        if ip['ip'] == str(ip_address):
            return ip['id']
    raise Exception('Cannot find IP address')


def add_floating_ip_to_server(floating_ip, server_id, tenant_id, auth_token):
    '''Associate the provided floating IP to a specific server'''

    post_body = {
        'addFloatingIp':
        {
            'address': floating_ip
        }
    }
    post_body = json.dumps(post_body)
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s%s/servers/%s/action' % (nova_api_url, tenant_id, str(server_id))
    resp, content = conn.request(url, 'POST', post_body,
                                 headers={"Content-Type": "application/json",
                                          "X-Auth-Token": auth_token})

    if resp['status'] == '202':
        return resp['status']
    else:
        raise Exception('Add floating ip failed %s' % resp)


def remove_floating_ip_from_server(
        floating_ip,
        server_id,
        tenant_id,
        auth_token):
    '''Disassociate the provided floating IP from a specific server'''

    post_body = {
        'removeFloatingIp':
        {
            'address': floating_ip
        }
    }
    post_body = json.dumps(post_body)
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s%s/servers/%s/action' % (nova_api_url, tenant_id, str(server_id))
    resp, content = conn.request(url, 'POST', post_body,
                                 headers={"Content-Type": "application/json",
                                          "X-Auth-Token": auth_token})

    if resp['status'] == '202':
        return resp['status']
    else:
        raise Exception('Remove floating ip failed %s' % resp)


def list_host(tenant_id, auth_token):
    content = _do_request('GET', 'vmhosts', tenant_id, auth_token)
    return content


def list_host_detail(tenant_id, auth_token):
    content = _do_request('GET', 'vmhosts/detail', tenant_id, auth_token)
    return content


def get_host_detail(host_id, tenant_id, auth_token):
    content = _do_request('GET', 'vmhosts/%s' % host_id, tenant_id, auth_token)
    return content


def find_host_id(hostname, tenant_id, auth_token):
    content = _do_request('GET', 'vmhosts', tenant_id, auth_token)
    for host in content['vmhosts']:
        fqdn_hostname = '%s.pulsar.net' % hostname
        if host['name'] == hostname or host['name'] == fqdn_hostname:
            return host['id']
    raise Exception('Cannot find VM Host')


def list_volume(tenant_id, auth_token):
    content = _do_request('GET', 'storagevolumes', tenant_id, auth_token)
    return content


def list_volume_detail(tenant_id, auth_token):
    content = _do_request(
        'GET', 'storagevolumes/detail', tenant_id, auth_token)
    return content


def find_volume_id(hostname, tenant_id, auth_token):
    content = _do_request('GET', 'vmhosts/detail', tenant_id, auth_token)
    for host in content['vmhosts']:
        fqdn_hostname = '%s.pulsar.net' % hostname
        if host['name'] == hostname or host['name'] == fqdn_hostname:
            return host['storagevolumes'][0]['id']
    raise Exception('Cannot find VM Host Volume ID')


def _do_requestalerts(method, path, auth_token, body=''):
    # conn = httplib2.Http(".cache")
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = path
    resp, content = conn.request(url, method, body,
                                 headers={"Content-Type": "application/json",
                                          "auth": auth_token})
    if int(resp['status']) in [200, 201, 202, 203, 204]:
        if content:
            content = json.loads(content)
        return content
    else:
        raise Exception('%s %s failed' % (method, url), body, resp, content)


def list_alerts(alerts_url, auth_token):
    content = _do_requestalerts('GET', alerts_url, auth_token)
    return content


def list_roles(token_id):
    cmd_uri = common_config.keystone_admin_url + "/OS-KSADM/roles"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(cmd_uri, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    return content


def list_tenants(token_id):
    cmd_uri = common_config.keystone_admin_url + "/tenants"
    h = httplib2.Http(disable_ssl_certificate_validation=True)

    headers = {"Accept": "application/json",
               "Content-type": "application/json", "x-auth-token": token_id}

    response, content = h.request(cmd_uri, "GET", headers=headers)

    if int(response['status']) != 200:
        raise AssertionError("status is not 200: " + response['status'])
    return content


def add_image(
        name,
        url,
        filelocation,
        public,
        disk_format,
        container_format,
        os_type,
        tenant_id,
        auth_token):

    # filelocation = 'C:\\tmp\\mini.iso'
    conn = httplib2.Http(disable_ssl_certificate_validation=True)
# url = '%s%s/images' % (nova_api_url, tenant_id)
# url = '%s:9292/v1/images' % common_config.isc_appliance_url
# url = "http://tuyengoldeni.pulsar.net:9292/v1/images"
    headers = {'x-image-meta-is-public': public,
               'x-image-meta-name': name,
               'x-image-meta-disk-format': disk_format,
               'x-image-meta-container-format': container_format,
               'x-image-meta-property-os_family': os_type,
               "X-Auth-Token": auth_token,
               'Content-Length': '%d' % os.path.getsize(filelocation),
               'Content-Type': 'application/octet-stream'}
    imagefile = open(filelocation, "rb")
    resp, content = conn.request(url, 'POST', body=imagefile, headers=headers)
    imagefile.close()
    if int(resp['status']) in [200, 201, 202, 203, 204]:
        if content:
            content = json.loads(content)
        return content
    else:
        raise Exception('action failed: %s' % resp)


def create_instance_meta(
        server_name,
        image_ref,
        flavor_id,
        meta,
        tenant_id,
        auth_token):
    """
        Author      : Amogh R(Amogh-r.mavinagidad@hp.com)
        Descirption : This function create the new VM with the user meta data added to it.
        Params      :
                      server_name      -->  VM Name to be created
                      Image_ref        -->  Image ID for vm creation
                      Flavor_id        -->  Instance_type ID for VM Creation (Integer Value)
                      tenant_id        -->  tenant_id from keystone login
                      auth_token       -->  auth token from keystone login

        Usage       : meta='{"function":"dynamic content", "master":"no","belongs-to":"load balanced group no 1", "admin":"Joe Speedoo", "backup":"no"}'
                      server_id=create_instance_meta("new_vm_name","9a35dae3-dc8c-430a-b7d5-a48494502d0a", 1, meta, "56667760f0814a62ac04f19d98f69383", "QwQIqZdKfnFp-a62LdDJtefsTFaJ1KNM")

        Return      : Return serverID
    """
    body = (
        '{"server": {"name": "%s", "imageRef": "%s", "flavorRef": "%d" , "metadata": %s}}' %
        (server_name, image_ref, flavor_id, meta))
    content = _do_request('POST', 'servers', tenant_id, auth_token, body)
    return content['server']['id']


def get_vmmetadata(server_id, tenant_id, auth_token):
    """
        Author      : Amogh R(Amogh-r.mavinagidad@hp.com)
        Descirption : This function fetch the meta data of the vm.
        Params      :
                      server_id    -->  server_id of the vm to fetch the metadata
                      tenant_id    -->  Tenant_id from keystone login
                      auth_token   -->  Auth token from keystone login

        Usage       : meta_data=get_vmmetadata("45557760f0814a62ac04f19d98f68382","56667760f0814a62ac04f19d98f69383", "QwQIqZdKfnFp-a62LdDJtefsTFaJ1KNM")
        Return      : Return server_metadata
    """
    path = 'servers/' + server_id + '/metadata'
    content = _do_request('GET', path, tenant_id, auth_token)
    meta = content['metadata']
    return meta  # content


def create_flavor(name, vcpus, disk, ram, tenant_id, auth_token):
    """
        Author      : Amogh R(Amogh-r.mavinagidad@hp.com)
        Descirption : This function create the new instance_type(Flavor).
        Params      :
                      name         -->  Name of the new Instnace_type
                      vcpus        -->  Virtual cpu's
                      disk         -->  Virtual Hard disk size
                      ram          -->  Virtual Memory size
                      tenant_id    -->  Tenant_id from keystone login
                      auth_token   -->  Auth token from keystone login

        Usage       : Flavor_ID=create_flavor("New_Name",2,10,10,"56667760f0814a62ac04f19d98f69383", "QwQIqZdKfnFp-a62LdDJtefsTFaJ1KNM")
        Return      : Return FlavorID
    """
    body = {
        "flavor":
        {
            "vcpus": vcpus,
            "disk": disk,
            "name": name,
            "OS-FLV-EXT-DATA:ephemeral": 0,
            "ram": ram
        }
    }
    body = json.dumps(body)
    content = _do_request('POST', 'flavors', tenant_id, auth_token, body)
    return content['flavor']['id']
