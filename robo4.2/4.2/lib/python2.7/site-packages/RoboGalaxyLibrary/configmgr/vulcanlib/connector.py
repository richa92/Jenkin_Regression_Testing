"""
Contains base Connector class which runs external commands and returns their output.

"""
import subprocess as sp


class Connector:

    """Base connector class that runs external commands.

    Other classes could extend the functionality of this connector to run commands
    on remote machines or run commands through an interpreter.

    The send_cmd() method runs the specified command in the foreground which will freeze
    the python script until the commands completes. The send_cmdNonBlk() method runs the
    command in the background where the results_cmdNonBlk() method can bring the command
    into the foreground.

    After the command has completed, the returncode variable should be set.

    This base class can be constructed and used to call external commands in a simple
    sub process using the subprocess.Popen() class.
    """

    def __init__(self):
        """Create a simple connector for running commands on the local machine in a sub process."""
        self.process = None
        self.returncode = -1

    def send_cmd(self, cmd):
        """Run the specified command on the local machine in the foreground.

        Until the command completes, this method will not return.

        Returns a tuple with the standard output and standard error streams of the command.
        """
        self.process = sp.Popen(cmd, stdout=sp.PIPE, shell=1)
        (stdout, stderr) = self.process.communicate()
        self.returncode = self.process.returncode
        return stdout, stderr

    def send_cmdNonBlk(self, cmd):
        """Run the specified command on the local machine in a background process.

        Once the command has been launched, this method returns immediately with the
        subprocess.Popen() object used to launch it. Call the results_cmdNonBlk() method
        to bring the command into the foreground and get its results.
        """
        self.process = sp.Popen(cmd, stdout=sp.PIPE, shell=1)
        return self.process

    def results_cmdNonBlk(self):
        """Take the last command run in send_cmdNonBlk() and bring it into the foreground.

        Until the command completes, this method will not return.

        Returns a tuple with the standard output and standard error streams of the command.
        """
        (stdout, stderr) = self.process.communicate()
        self.returncode = self.process.returncode
        return stdout, stderr
