"""
Contains the operation framework which is capable of running tasks in the background.

"""
import threading


class Operation(object):

    """A task capable of running in the foreground or background.

    This task can be kicked-off by calling the launch() or launch_in_background() methods.
    Once has_completed() returns True, the is_error variable can be checked to see if
    there were any problems running the operation.
    """

    def __init__(self):
        """Create a new operation with no known errors that has not completed."""
        self.is_error = False
        self.is_done = False
        self.thread = None

    def has_completed(self):
        """Determine if the operation has finished. Returns True if done, False otherwise."""
        if self.is_done or self.is_error:
            return True
        return False

    def launch(self, timeout_seconds=None):
        """Kick off this operation in the foreground and do not return until it has completed.

        If timeout_seconds is specified, this operation can return prematurely. Of course, the
        sub classes of Operation must implement a check for this timeout and behave
        appropriately.

        This method must be implemented by sub classes.
        """
        raise NotImplementedError("must override this method")

    def launch_in_background(self, timeout_seconds=None):
        """Kick off this operation in the background and return immediately.

        If timeout_seconds is specified, the operation can complete prematurely. Of course, the
        sub classes of Operation must implement a check for this timeout and behave
        appropriately.

        After calling this method, you will need to check the has_completed() method to see if
        the background operation has completed.

        Sub classes do not need to override this method as the default implementation which
        uses OperationThread should work fine for most situations.
        """
        self.thread = OperationThread(self.launch, timeout_seconds)
        self.thread.start()


class OperationThread(threading.Thread):

    """A background thread for running Operations."""

    def __init__(self, action, timeout_seconds=None):
        """Create a new thread that will invoke the provided action method when launched.

        The optional timeout_seconds value will be passed as the sole argument to the
        action method when invoked.
        """
        threading.Thread.__init__(self)
        self.action = action
        self.timeout_seconds = timeout_seconds

    def run(self):
        """Invokes the action method and passes the timeout as an argument."""
        self.action(self.timeout_seconds)
