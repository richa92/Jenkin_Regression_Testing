""" This script create a flood of login tokens  """
""" Custom Configurations:                                  """
"""     keystone_auth_url                                   """
"""     nova_api_url                                        """
"""     number_of_tokens                                    """

import httplib
import httplib2
import sys
import json
import time
from tests.utils import *
import logging
import traceback
import re
import time
import string
import random
import unittest


from config import common_config
from vulcanlib import vulcanfuncs
from vulcanlib import vulcanlog
import sys


LOG = logging.getLogger()


def main():
    try:
        main_section()
    except SystemExit:
        pass  # do nothing, just exit
    except:
        LOG.error("Unexpected error:")
        LOG.error(traceback.format_exc())


def main_section():

    vulcanfuncs.generate_pid_file(common_config.LOGDIR)

    (ch, fh) = vulcanlog.setup_default_logging(
        common_config.LOGDIR + "tcfat.log")
    if common_config.VERBOSE > 0:
        vulcanlog.adjust_logging_level("debug", ch, fh)

    if common_config.QUIET > 0:
        vulcanlog.adjust_logging_level("quiet", ch, fh)

    number_of_tokens = 10000

    token_id_list = []
    total_launch_time = 0
    tenant = "anne"
    username = "anne"
    password = "serveradmin"

    tenant_id, auth_token = keystone_login(tenant, username, password)

    # creating multiple tokens
    LOG.info("Number of tokens to be creaeted is %d", number_of_tokens)

    for i in range(1, (number_of_tokens + 1)):
        initial_time = time.time()
        tenant_id, auth_token = keystone_login(tenant, username, password)

        token_id_list.append(auth_token)
        final_time = time.time()

        if i is 1:
            first_launch_time = final_time - initial_time
        else:
            total_launch_time += (final_time - initial_time)
        print "Get token ", auth_token, "in", \
            (final_time - initial_time), "secs"

    # Deleting all tokens
    for token_id in token_id_list:
        delete_token(token_id)

    if number_of_tokens > 1:
        average_time = total_launch_time / (number_of_tokens - 1)
        print "First token created in", first_launch_time
        print "Avg time to create rest of the logins is", average_time

    else:
        average_time = total_launch_time
        print "First token created in", first_launch_time
        print "Avg time to create rest of the logins is", first_launch_time

    if average_time < first_launch_time:
        sys.exit(0)
    else:
        print ("Time taken for creating first token was less than the "
               "average time taken for rest of the tokens.")
        sys.exit(2)


if __name__ == "__main__":
    main()
