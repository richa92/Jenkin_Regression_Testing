import httplib
import httplib2
import json
import re
import time
import string
import sys
from config import common_config
from tests.utils import *
from vulcanlib import vulcanfuncs
from vulcanlib import vulcanlog
from tests import *
import sys
# from sshKVM import *
import unittest
from nose.plugins.attrib import attr
import logging


LOG = logging.getLogger()


def main():
    try:
        main_section()
    except SystemExit:
        pass  # do nothing, just exit
    except:
        LOG.error("Unexpected error:")
# LOG.error( traceback.format_exc() )


class main_section(unittest.TestCase):

    vulcanfuncs.generate_pid_file(common_config.LOGDIR)

    (ch, fh) = vulcanlog.setup_default_logging(
        common_config.LOGDIR + "test.log")
    if common_config.VERBOSE > 0:
        vulcanlog.adjust_logging_level("debug", ch, fh)

    if common_config.QUIET > 0:
        vulcanlog.adjust_logging_level("quiet", ch, fh)

    instance_id_list = []

    def setUp(self):
        self.log = logging.getLogger("TestCase")
        self.tenant = common_config.TENANT_NAME
        self.username = common_config.USER_NAME
        self.password = common_config.PASS_WORD
        self.image_name = common_config.image_name
        self.kvm_host = common_config.kvm_host
        self.kvm_user = common_config.kvm_user
        self.kvm_pass = common_config.kvm_pass
        self.cmd = common_config.cmd
        self.tenant_id, self.token_id = keystone_login(
            self.tenant, self.username, self.password)
        self.flavor_id = int(
            find_flavor(
                common_config.flavor_name,
                self.tenant_id,
                self.token_id))

    '''Create VM Instance and stop the libvirt services on the KVM Host'''

    def test_01_create_server(self):
        # sshcon(self.kvm_host,self.kvm_user,self.kvm_pass,self.cmd)
        # time.sleep(10)
        image_ref = find_image(self.image_name, self.tenant_id, self.token_id)
        instance_id = create_instance(
            "newimage",
            image_ref,
            self.flavor_id,
            self.tenant_id,
            self.token_id)
        self.instance_id_list.append(instance_id)
        # time.sleep(240)
        print "Token_id:", self.token_id
        self.log.info("test_01_Create_Server completed")

    '''Verify the VM Status after the libvirt services are stopped'''

    def test_02_vmstatus(self):
        while True:
            try:
                if(is_instance_active(self.instance_id_list[0], self.tenant_id, self.token_id)):
                    # '5b5cf1d5-4fe9-4c68-8b81-6362dd345a94'"
                    print "VM is ACTIVE"
                    break
                elif(is_instance_active(self.instance_id_list[0], self.tenant_id, self.token_id) is False):
                    print "VM is in inactive state"
                    break
                self.log.info("test_02_Create_Server: Test Completed")
            except:
                self.log.error(
                    "test_02_Create_Server: VM went into Error state")
                raise Exception("VM went into Error state")

    '''Verify the Healthnmon API(vmdetails) when libvirt services are stopped'''

    def test_03_vmDetails(self):
        try:
            content = get_vm_details(
                self.instance_id_list[0], self.tenant_id, self.token_id)
            content1 = get_instance_details(
                self.instance_id_list[0], self.tenant_id, self.token_id)
            print "------------------------------------------"
            print "             Instance Attributes              "
            print "------------------------------------------"
            print "Instance Name:", content['Vm']['name']
            print "Connection State:", content['Vm']['connectionState']
            print "Instance Power State:", content['Vm']['powerState']
            print "Memory Size:", content['Vm']['memorySize']
            print "Host ID:", content1['server']['hostId']
            print "\n"
            self.log.info("test_03_VM Details: Test Completed")

            # print content
        except:
            self.log.error(
                "test_03_vmDetails: VM went into ERROR state,Could not fetch VM details")
            raise Exception("Could not fetch VM details")

if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout)
    logging.getLogger("TestCase").\
        setLevel(logging.DEBUG)
    unittest.main()
