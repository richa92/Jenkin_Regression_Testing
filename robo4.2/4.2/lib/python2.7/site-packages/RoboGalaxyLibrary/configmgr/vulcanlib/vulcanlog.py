"""
Contains utility methods for log initialization and level adjustments as well as new logging levels.

"""

import logging
import os
import re
import sys
import time


PERF = 31
"""Performance logging level (note: logger passes messages >= level)"""

_LOG = logging.getLogger()


def setup_default_logging(log_file=None):
    """Setup default DM logging details.

    This method takes the root logger, adds the PERF logging level, and sets up a formatter along
    with handlers for the console and an optional log file (from the optional log_file argument). By
    default, the log level will be set to INFO. However, the console will show DEBUG details as well.

    Log messages will look like:
    |date {year-month-day}|time {24 hour format}|log level|source code line|message

    For example:
    |2010-10-23|13:25:46|INFO|dmfuncs:338|This is the log message

    The console and log file handlers will both be returned from this method. If the log_file
    argument was not provided, the file handler will be None.
    """
    logging.addLevelName(PERF, "PERF")
    formatter = logging.Formatter(
        "%(asctime)s%(levelname)s|%(module)s:%(lineno)d|%(message)s",
        "|%Y-%m-%d|%H:%M:%S|")

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    # create two log outputs (one for standard out, one for a file)
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(formatter)
    root_logger.addHandler(ch)

    fh = None
    if log_file is not None:
        fh = logging.FileHandler(log_file)
        fh.setLevel(logging.INFO)
        fh.setFormatter(formatter)
        root_logger.addHandler(fh)

    return(ch, fh)


def get_default_log_directory():
    """Generate a time-stamped directory name as a default log directory.

    The directory name should look like "{Year}-{Month}-{Day}_{TimeOfDay}_{ScriptName}".
    The {TimeOfDay} field will have no colons in between the hours, minutes, and seconds.
    """
    # lookup the script name but strip off the file extension
    unused, file_name = os.path.split(sys.argv[0])
    script_name = re.sub("\..*", "", file_name)

    # build a string that looks like "2010-10-21_123045_"
    log_dir = time.strftime("%Y-%m-%d_%H%M%S_")

    log_dir += script_name

    return(log_dir)


def adjust_logging_level(new_level, console_handler, file_handler):
    """Change the DM logging level.

    Makes corresponding log level changes to the provided console and file handlers.

    Available levels include:
     - verbose
     - debug
     - error
     - warning
     - info
     - quiet (only important ERROR messages will be printed to the console, the file handler
       will remain unchanged)
    """
    if new_level == "verbose":
        _LOG.setLevel(logging.DEBUG)
        console_handler.setLevel(logging.DEBUG)
        file_handler.setLevel(logging.DEBUG)

    if new_level == "debug":
        _LOG.setLevel(logging.DEBUG)
        console_handler.setLevel(logging.DEBUG)
        file_handler.setLevel(logging.DEBUG)

    elif new_level == "error":
        _LOG.setLevel(logging.ERROR)
        console_handler.setLevel(logging.ERROR)
        file_handler.setLevel(logging.ERROR)

    elif new_level == "warning":
        _LOG.setLevel(logging.WARNING)
        console_handler.setLevel(logging.WARNING)
        file_handler.setLevel(logging.WARNING)

    elif new_level == "info":
        _LOG.setLevel(logging.INFO)
        console_handler.setLevel(logging.INFO)
        file_handler.setLevel(logging.INFO)

    elif new_level == "quiet":
        console_handler.setLevel(logging.ERROR)
