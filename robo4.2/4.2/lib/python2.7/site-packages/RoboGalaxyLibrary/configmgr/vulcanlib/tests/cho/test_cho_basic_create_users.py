""" This script creates and delete users                    """
""" Custom Configurations:                                  """
"""     keystone_auth_url                                   """
"""     nova_api_url                                        """
"""     number_of_users                                     """

import httplib
import httplib2
import sys
import json
import time
from tests.utils import *
import logging
import traceback
import re
import time
import string
import random
import unittest


from config import common_config
from vulcanlib import vulcanfuncs
from vulcanlib import vulcanlog
import sys


LOG = logging.getLogger()


def main():
    try:
        main_section()
    except SystemExit:
        pass  # do nothing, just exit
    except:
        LOG.error("Unexpected error:")
        LOG.error(traceback.format_exc())


def main_section():

    vulcanfuncs.generate_pid_file(common_config.LOGDIR)

    (ch, fh) = vulcanlog.setup_default_logging(
        common_config.LOGDIR + "tcbcu.log")
    if common_config.VERBOSE > 0:
        vulcanlog.adjust_logging_level("debug", ch, fh)

    if common_config.QUIET > 0:
        vulcanlog.adjust_logging_level("quiet", ch, fh)

    number_of_users = 200

    user_id_list = []
    total_launch_time = 0
    tenant = "anne"
    username = "anne"
    password = "serveradmin"
    timeout = 5

    tenant_id, auth_token = keystone_login(
        tenant, username, password, keystone_auth_url)

    users_list = keystone_user_list(auth_token)

    # check if original yser and tenant in users list
    assert username, tenant_id in users_list

    gen_new_username = gen_rnd_string(5)

    # Creating users
    print "Number of user accounts to be created is", number_of_users
    for i in range(1, (number_of_users + 1)):
        initial_time = time.time()

        new_username = gen_new_username + "_" + str(i)
        email = gen_new_username + "@hp.com"
        new_password = "password"

        user_id, response = createUser(
            auth_token, new_username, email, new_password)

        if int(response['status']) != 200:
            raise AssertionError("status is not 200: " + response['status'])

        user_id_list.append(user_id)

        final_time = time.time()
        if i is 1:
            first_launch_time = final_time - initial_time
        else:
            total_launch_time += (final_time - initial_time)

        # verify new user again
        users_list = keystone_user_list(auth_token)
        assert new_username, email in users_list

        # To do: delete users

    average_time = total_launch_time / (number_of_users - 1)
    print "First user created in", first_launch_time
    print "Avg time to launch rest of the users is", average_time
    if average_time < first_launch_time:
        sys.exit(0)
    else:
        print ("Time taken for creating first user was less than the "
               "average time taken for rest of the users.")
        sys.exit(2)


if __name__ == "__main__":
    main()
