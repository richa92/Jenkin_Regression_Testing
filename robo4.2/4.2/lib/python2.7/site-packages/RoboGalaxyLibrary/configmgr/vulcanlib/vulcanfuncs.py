"""
Contains miscellaneous utility methods shared by multiple test scripts. These methods
handle integration with the sequencer for locking and generate a PID file in the output directory.

"""
import logging
import os
import time

from vulcanlib import vulcanpaths


_LOG = logging.getLogger()


def generate_pid_file(log_dir):
    """Create a PID.id file in the log directory with our process PID.

    This method is typically called at the beginning of a script after the output directory
    has been created.
    """
    pid = os.getpid()
    pid_file = open(log_dir + "PID.id", "w")
    pid_file.write(str(pid))
    pid_file.close()


def check_and_wait_for_sync_lock(test_obj):
    """Check to see if a sync.lock file exists in the output directory. Wait until it has been
    deleted before continuing.

    If a sync.clear file has been placed in the output directory, we will disable all
    future synchronization between this test run and the sequencer.
    """
    if _found_a_sync_clear(test_obj):
        return

    lock_file = test_obj.log_dir + \
        vulcanpaths.get_path_separator() + "sync.lock"
    if os.path.exists(lock_file):
        _LOG.info(
            "found a sync.lock file in the '%s' directory, will wait until it is deleted" %
            test_obj.log_dir)
        while os.path.exists(lock_file):
            # we are now locked
            if _found_a_sync_clear(test_obj):
                return

            time.sleep(3)

        _LOG.info(
            "sync.lock file no longer exists, will continue with the test")


def create_sync_lock(test_obj):
    """Create a sync.lock file in the output directory.

    Any subsequent call to check_and_wait_for_sync_lock() will hang until this file has
    been deleted. Usually, this file is deleted by the user interacting with the sequencer.
    """
    lock_file = test_obj.log_dir + \
        vulcanpaths.get_path_separator() + "sync.lock"
    open(lock_file, "a").close()


def _found_a_sync_clear(test_obj):
    """Determine if we have found a sync.clear file in the output directory.

    If the file has been found, the should_synchronize variable in the test_obj will be
    set to False which indicates we will no longer synchronize between this test run and
    the sequencer.

    Returns True if the file was found, False otherwise.
    """
    clear_file = test_obj.log_dir + \
        vulcanpaths.get_path_separator() + "sync.clear"
    if os.path.exists(clear_file):
        _LOG.info("disabling synchronization due to a sync.clear file")
        test_obj.should_synchronize = False
        return True
    return False
