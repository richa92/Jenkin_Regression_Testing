
"""
Command-line interface to the Nova API.
"""

import argparse
import getpass
import os
import sys
from common.exceptions import *
import tests.utils as utils


class NovaAPI(object):

    # sub-command functions

    def foo(self, args):
        print args.x * args.y

    def get_auth_token(self, args):
        tenant_id, auth_token = utils.keystone_login(
            args.tenant, args.username, args.password)
        sys.stdout.write(auth_token)

    def find_tenant_id(self, args):
        tenants = utils.get_tenants(args.auth_token)
        sys.stdout.write(tenants[args.tenant_name])

    def get_instance_public_ipaddr(self, args):
        content = utils.get_instance_details(
            args.server_id, args.tenant_id, args.auth_token)
        if len(content['server']['addresses']['novanet']) > 1:
            sys.stdout.write(
                content['server']['addresses']['novanet'][1]['addr'])
        else:
            sys.stdout.write("FAILED: no public ip address for this server")

    def get_instance_private_ipaddr(self, args):
        content = utils.get_instance_details(
            args.server_id, args.tenant_id, args.auth_token)
        if len(content['server']['addresses']['novanet']) >= 1:
            sys.stdout.write(
                content['server']['addresses']['novanet'][0]['addr'])
        else:
            sys.stdout.write("FAILED: no private ip address for this server")

    def get_instance_status(self, args):
        content = utils.get_instance_details(
            args.server_id, args.tenant_id, args.auth_token)
        sys.stdout.write(content['server']['status'])

    def create_instance(self, args):
        sys.stdout.write(str(utils.create_instance(args.server_name,
                                                   args.image_ref,
                                                   int(args.flavor_id),
                                                   args.tenant_id,
                                                   args.auth_token)))

    def delete_instance(self, args):
        sys.stdout.write(
            str(utils.delete_instance(args.server_id, args.tenant_id, args.auth_token)))

    def find_image_id(self, args):
        sys.stdout.write(
            str(utils.find_image(args.image_name, args.tenant_id, args.auth_token)))

    def find_server_id(self, args):
        sys.stdout.write(
            str(utils.find_server_id(args.server_name, args.tenant_id, args.auth_token)))

    def find_flavor_id(self, args):
        sys.stdout.write(
            str(utils.find_flavor_id(args.flavor_name, args.tenant_id, args.auth_token)))

    def create_floating_ip(self, args):
        ip_created = utils.create_floating_ip(args.tenant_id, args.auth_token)
        sys.stdout.write(str(ip_created['ip']))

    def list_floating_ip(self, args):
        sys.stdout.write(
            str(utils.list_floating_ip(args.tenant_id, args.auth_token)))

    def delete_floating_ip(self, args):
        sys.stdout.write(str(utils.delete_floating_ip(
            args.floating_ip_id, args.tenant_id, args.auth_token)))

    def find_floating_ip_id(self, args):
        sys.stdout.write(
            str(utils.find_floating_ip_id(args.ip_address, args.tenant_id, args.auth_token)))

    def add_floating_ip(self, args):
        sys.stdout.write(str(utils.add_floating_ip_to_server(
            args.floating_ip, args.server_id, args.tenant_id, args.auth_token)))

    def remove_floating_ip(self, args):
        sys.stdout.write(str(utils.remove_floating_ip_from_server(
            args.floating_ip, args.server_id, args.tenant_id, args.auth_token)))

    def list_host(self, args):
        sys.stdout.write(str(utils.list_host(args.tenant_id, args.auth_token)))

    def list_host_detail(self, args):
        sys.stdout.write(
            str(utils.list_host_detail(args.tenant_id, args.auth_token)))

    def get_host_detail(self, args):
        sys.stdout.write(
            str(utils.get_host_detail(args.host_id, args.tenant_id, args.auth_token)))

    def find_host_id(self, args):
        sys.stdout.write(
            str(utils.find_host_id(args.hostname, args.tenant_id, args.auth_token)))

    def find_volume_id(self, args):
        sys.stdout.write(
            str(utils.find_volume_id(args.hostname, args.tenant_id, args.auth_token)))

    def get_volume_property(self, args):
        try:
            volumeID = utils.find_volume_id(
                args.hostname, args.tenant_id, args.auth_token)
        except Exception:
            sys.stdout.write('FAIL: Cannot find volume ID')
            sys.exit(1)
        content = utils.list_volume_detail(args.tenant_id, args.auth_token)
        found = 0
        for vol in content['storagevolumes']:
            if vol['id'] == volumeID:
                found = 1
                if args.property in vol:
                    sys.stdout.write(vol[args.property])
                else:
                    sys.stdout.write('FAIL: Not a valid property.')
        if found == 0:
            sys.stdout.write('FAIL: Cannot find VM Host Volume ID')

    def get_list(self, args):

        if args.type == "floating-ips":
            # content = utils.list_floating_ip(args.tenant_id, args.auth_token)
            content = utils._do_request(
                'GET', 'os-%s' % args.type, args.tenant_id, args.auth_token)
        elif args.type == "floating-ip-pool":
            content = utils._do_request(
                'GET',
                'hp-%ss/list' %
                args.type,
                args.tenant_id,
                args.auth_token)
        elif args.type == "users":
            content = utils.keystone_user_list(args.auth_token)
        elif args.type == "roles":
            content = utils.list_roles(args.auth_token)
        elif args.type == "tenants":
            content = utils.list_tenants(args.auth_token)
        else:
            content = utils._do_request(
                'GET', args.type, args.tenant_id, args.auth_token)

        sys.stdout.write(str(content))

    def add_image(self, args):

        content = utils.add_image(
            args.name,
            args.url,
            args.filelocation,
            args.public,
            args.disk_format,
            args.container_format,
            args.os_type,
            args.tenant_id,
            args.auth_token)
        sys.stdout.write(str(content['image']['id']))

    def get_base_parser(self):
        parser = argparse.ArgumentParser(
            prog='nova_api',
            description=__doc__.strip(),
            epilog='See "help" '
                   'for help on a specific command.',
            add_help=False,
            formatter_class=HelpFormatter,
        )

        subparsers = parser.add_subparsers()

        # create the parser for the "get_auth_token" command
        parser_get_auth_token = subparsers.add_parser('get_auth_token')
        parser_get_auth_token.add_argument('tenant')
        parser_get_auth_token.add_argument('username')
        parser_get_auth_token.add_argument('password')
        parser_get_auth_token.set_defaults(func=self.get_auth_token)

        # create the parser for the "find_tenant_id" command
        parser_find_tenant_id = subparsers.add_parser('find_tenant_id')
        parser_find_tenant_id.add_argument('tenant_name')
        parser_find_tenant_id.add_argument('auth_token')
        parser_find_tenant_id.set_defaults(func=self.find_tenant_id)

        # create the parser for the "get_instance_public_ipaddr" command
        parser_get_instance_public_ipaddr = subparsers.add_parser(
            'get_instance_public_ipaddr')
        parser_get_instance_public_ipaddr.add_argument('server_id')
        parser_get_instance_public_ipaddr.add_argument('tenant_id')
        parser_get_instance_public_ipaddr.add_argument('auth_token')
        parser_get_instance_public_ipaddr.set_defaults(
            func=self.get_instance_public_ipaddr)

        # create the parser for the "get_instance_private_ipaddr" command
        parser_get_instance_private_ipaddr = subparsers.add_parser(
            'get_instance_private_ipaddr')
        parser_get_instance_private_ipaddr.add_argument('server_id')
        parser_get_instance_private_ipaddr.add_argument('tenant_id')
        parser_get_instance_private_ipaddr.add_argument('auth_token')
        parser_get_instance_private_ipaddr.set_defaults(
            func=self.get_instance_private_ipaddr)

        # create the parser for the "get_instance_status" command
        parser_get_instance_status = subparsers.add_parser(
            'get_instance_status')
        parser_get_instance_status.add_argument('server_id')
        parser_get_instance_status.add_argument('tenant_id')
        parser_get_instance_status.add_argument('auth_token')
        parser_get_instance_status.set_defaults(func=self.get_instance_status)

        # create the parser for the "create_instance" command
        parser_create_instance = subparsers.add_parser('create_instance')
        parser_create_instance.add_argument('server_name')
        parser_create_instance.add_argument('image_ref')
        parser_create_instance.add_argument('flavor_id')
        parser_create_instance.add_argument('tenant_id')
        parser_create_instance.add_argument('auth_token')
        parser_create_instance.set_defaults(func=self.create_instance)

        # create the parser for the "delete_instance" command
        parser_delete_instance = subparsers.add_parser('delete_instance')
        parser_delete_instance.add_argument('server_id')
        parser_delete_instance.add_argument('tenant_id')
        parser_delete_instance.add_argument('auth_token')
        parser_delete_instance.set_defaults(func=self.delete_instance)

        # create the parser for the "find_image_id" command
        parser_find_image_id = subparsers.add_parser('find_image_id')
        parser_find_image_id.add_argument('image_name')
        parser_find_image_id.add_argument('tenant_id')
        parser_find_image_id.add_argument('auth_token')
        parser_find_image_id.set_defaults(func=self.find_image_id)

        # create the parser for the "find_server_id" command
        parser_find_server_id = subparsers.add_parser('find_server_id')
        parser_find_server_id.add_argument('server_name')
        parser_find_server_id.add_argument('tenant_id')
        parser_find_server_id.add_argument('auth_token')
        parser_find_server_id.set_defaults(func=self.find_server_id)

        # create the parser for the "create_floating_ip" command
        parser_create_floating_ip = subparsers.add_parser('create_floating_ip')
        parser_create_floating_ip.add_argument('tenant_id')
        parser_create_floating_ip.add_argument('auth_token')
        parser_create_floating_ip.set_defaults(func=self.create_floating_ip)

        # create the parser for the "list_floating_ip" command
        parser_list_floating_ip = subparsers.add_parser('list_floating_ip')
        parser_list_floating_ip.add_argument('tenant_id')
        parser_list_floating_ip.add_argument('auth_token')
        parser_list_floating_ip.set_defaults(func=self.list_floating_ip)

        # create the parser for the "delete_floating_ip" command
        parser_delete_floating_ip = subparsers.add_parser('delete_floating_ip')
        parser_delete_floating_ip.add_argument('floating_ip_id')
        parser_delete_floating_ip.add_argument('tenant_id')
        parser_delete_floating_ip.add_argument('auth_token')
        parser_delete_floating_ip.set_defaults(func=self.delete_floating_ip)

        # create the parser for the "find_floating_ip_id" command
        parser_find_floating_ip_id = subparsers.add_parser(
            'find_floating_ip_id')
        parser_find_floating_ip_id.add_argument('ip_address')
        parser_find_floating_ip_id.add_argument('tenant_id')
        parser_find_floating_ip_id.add_argument('auth_token')
        parser_find_floating_ip_id.set_defaults(func=self.find_floating_ip_id)

        # create the parser for the "add_floating_ip" command
        parser_add_floating_ip = subparsers.add_parser('add_floating_ip')
        parser_add_floating_ip.add_argument('floating_ip')
        parser_add_floating_ip.add_argument('server_id')
        parser_add_floating_ip.add_argument('tenant_id')
        parser_add_floating_ip.add_argument('auth_token')
        parser_add_floating_ip.set_defaults(func=self.add_floating_ip)

        # create the parser for the "remove_floating_ip" command
        parser_remove_floating_ip = subparsers.add_parser('remove_floating_ip')
        parser_remove_floating_ip.add_argument('floating_ip')
        parser_remove_floating_ip.add_argument('server_id')
        parser_remove_floating_ip.add_argument('tenant_id')
        parser_remove_floating_ip.add_argument('auth_token')
        parser_remove_floating_ip.set_defaults(func=self.remove_floating_ip)

        # create the parser for the "list_host" command
        parser_list_host = subparsers.add_parser('list_host')
        parser_list_host.add_argument('tenant_id')
        parser_list_host.add_argument('auth_token')
        parser_list_host.set_defaults(func=self.list_host)

        # create the parser for the "list_host_detail" command
        parser_list_host_detail = subparsers.add_parser('list_host_detail')
        parser_list_host_detail.add_argument('tenant_id')
        parser_list_host_detail.add_argument('auth_token')
        parser_list_host_detail.set_defaults(func=self.list_host_detail)

        # create the parser for the "get_host_detail" command
        parser_get_host_detail = subparsers.add_parser('get_host_detail')
        parser_get_host_detail.add_argument('host_id')
        parser_get_host_detail.add_argument('tenant_id')
        parser_get_host_detail.add_argument('auth_token')
        parser_get_host_detail.set_defaults(func=self.get_host_detail)

        # create the parser for the "find_host_id" command
        parser_find_host_id = subparsers.add_parser('find_host_id')
        parser_find_host_id.add_argument('hostname')
        parser_find_host_id.add_argument('tenant_id')
        parser_find_host_id.add_argument('auth_token')
        parser_find_host_id.set_defaults(func=self.find_host_id)

        # create the parser for the "find_volume_id" command
        parser_find_volume_id = subparsers.add_parser('find_volume_id')
        parser_find_volume_id.add_argument('hostname')
        parser_find_volume_id.add_argument('tenant_id')
        parser_find_volume_id.add_argument('auth_token')
        parser_find_volume_id.set_defaults(func=self.find_volume_id)

        # create the parser for the "get_volume_property" command
        parser_get_volume_property = subparsers.add_parser(
            'get_volume_property')
        parser_get_volume_property.add_argument('hostname')
        parser_get_volume_property.add_argument('property')
        parser_get_volume_property.add_argument('tenant_id')
        parser_get_volume_property.add_argument('auth_token')
        parser_get_volume_property.set_defaults(func=self.get_volume_property)

        # create the parser for the "find_flavor_id" command
        parser_find_flavor_id = subparsers.add_parser('find_flavor_id')
        parser_find_flavor_id.add_argument('flavor_name')
        parser_find_flavor_id.add_argument('tenant_id')
        parser_find_flavor_id.add_argument('auth_token')
        parser_find_flavor_id.set_defaults(func=self.find_flavor_id)

        # create the parser for the "get_list" command
        parser_get_list = subparsers.add_parser('get_list')
        parser_get_list.add_argument('type')
        parser_get_list.add_argument('tenant_id')
        parser_get_list.add_argument('auth_token')
        parser_get_list.set_defaults(func=self.get_list)

        # create the parser for the "add_image" command
        parser_add_image = subparsers.add_parser('add_image')
        parser_add_image.add_argument('name')
        parser_add_image.add_argument('url')
        parser_add_image.add_argument('filelocation')
        parser_add_image.add_argument('public')
        parser_add_image.add_argument('disk_format')
        parser_add_image.add_argument('container_format')
        parser_add_image.add_argument('os_type')
        parser_add_image.add_argument('tenant_id')
        parser_add_image.add_argument('auth_token')
        parser_add_image.set_defaults(func=self.add_image)

        return parser

    def get_subcommand_parser(self):
        parser = self.get_base_parser()

        self.subcommands = {}
        subparsers = parser.add_subparsers(metavar='<subcommand>')

        self._find_actions(subparsers, self)

        return parser

    def _find_actions(self, subparsers, actions_module):
        for attr in (a for a in dir(actions_module) if a.startswith('do_')):
            # I prefer to be hypen-separated instead of underscores.
            command = attr[3:].replace('_', '-')
            callback = getattr(actions_module, attr)
            desc = callback.__doc__ or ''
            help = desc.strip().split('\n')[0]
            arguments = getattr(callback, 'arguments', [])

            subparser = subparsers.add_parser(
                command,
                help=help,
                description=desc,
                add_help=False,
                formatter_class=HelpFormatter)
            subparser.add_argument('-h', '--help', action='help',
                                   help=argparse.SUPPRESS)
            self.subcommands[command] = subparser
            for (args, kwargs) in arguments:
                subparser.add_argument(*args, **kwargs)
            subparser.set_defaults(func=callback)

    def main(self, argv):
        # Parse args once to find version
        parser = self.get_base_parser()
        (options, args) = parser.parse_known_args(argv)

# subcommand_parser = self.get_subcommand_parser()
# self.parser = subcommand_parser

        # Handle top-level --help/-h before attempting to parse
        # a command off the command line
        # if not argv or options.help:
        #    self.do_help(options)
        #    return 0

        # print "user %s" % options.username

        # parse the args and call whatever function was selected
        args = parser.parse_args(argv)
        args.func(args)

    @utils.arg('command', metavar='<subcommand>', nargs='?',
               help='Display help for <subcommand>')
    def do_help(self, args):
        """
        Display help about this program or one of its subcommands.
        """
        if getattr(args, 'command', None):
            if args.command in self.subcommands:
                self.subcommands[args.command].print_help()
            else:
                raise CommandError("'%s' is not a valid subcommand" %
                                   args.command)
        else:
            self.parser.print_help()


class HelpFormatter(argparse.HelpFormatter):

    def start_section(self, heading):
        # Title-case the headings
        heading = '%s%s' % (heading[0].upper(), heading[1:])
        super(HelpFormatter, self).start_section(heading)


if __name__ == "__main__":
    try:
        NovaAPI().main(sys.argv[1:])

    except Exception as e:
        print >> sys.stderr, e
        sys.exit(1)
