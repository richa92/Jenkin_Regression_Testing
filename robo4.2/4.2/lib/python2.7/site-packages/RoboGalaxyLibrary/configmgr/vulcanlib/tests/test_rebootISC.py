'''
Created on Jan 20, 2012

@author: pandi-selvi.rajangam@hp.com
'''


from config import common_config
import unittest
import traceback
import string
import time
import re
import random
import httplib
import logging
import sys
import pinger
from tests import utils
import tempest.tempest.common.ssh as ssh
from vulcanlib import vulcanfuncs
from vulcanlib import vulcanlog


LOG = logging.getLogger()


def main():
    try:
        errors, failures = main_section()
        test_summary(errors, failures)
    except SystemExit:
        pass  # do nothing, just exit
    except:
        LOG.error("Unexpected error:")
        LOG.error(traceback.format_exc())


def test_summary(errors, failures):
    error_count = len(errors)
    failure_count = len(failures)
    if (error_count > 0 and failure_count > 0):
        LOG.info(
            "************************************************************")
        LOG.info("            TEST COMPLETED WITH ERRORS AND FAILURES")
        LOG.info(
            "************************************************************")
    elif (error_count == 0 and failure_count > 0):
        LOG.info(
            "************************************************************")
        LOG.info("            TEST COMPLETED WITH FAILURES")
        LOG.info(
            "************************************************************")
    elif (error_count > 0 and failure_count == 0):
        LOG.info(
            "************************************************************")
        LOG.info("            TEST COMPLETED WITH ERRORS")
        LOG.info(
            "************************************************************")
    else:
        LOG.info("test completed and exiting normally")
        LOG.info(
            "************************************************************")
        LOG.info("            TEST COMPLETED SUCCESSFULLY")
        LOG.info(
            "************************************************************")


def main_section():

    vulcanfuncs.generate_pid_file(common_config.LOGDIR)

    (ch, fh) = vulcanlog.setup_default_logging(
        common_config.LOGDIR + "test.log")
    if common_config.VERBOSE > 0:
        vulcanlog.adjust_logging_level("debug", ch, fh)

    if common_config.QUIET > 0:
        vulcanlog.adjust_logging_level("quiet", ch, fh)

    class Test_RebootISC(unittest.TestCase):

        """
            Procedure:
                        Reboot isc - check services are up and running before and after reboot,
        create few instances before reboot,
        check the number of vms associated with the hosts are equal before and after reboot

            Expected result:
                         Services should be up and running after reboot,
        number of vms associated with the hosts are equal before and after reboot


        """

        # ======================================================================
        #                              CHECK SERVICES ARE UP AND RUNNING
        # ======================================================================

        def test_1check_services(self):
            LOG.info("check services are up and running")
            conn = ssh.Client(
                common_config.ISC_APPLIANCE_IP,
                common_config.ssh_username,
                common_config.ssh_password)
            servicelist = [
                "openstack-nova-scheduler",
                "openstack-nova-cert",
                "healthnmon",
                "openstack-glance-api",
                "openstack-glance-registry",
                "openstack-keystone"]
            for service in servicelist:
                output = conn.exec_command("service " + service + " status")
                try:
                    self.assertEquals("running",
                                      output[-11:-4],
                                      "%s is not running" % service)
                    LOG.error("%s is running" % service)
                except Exception as e:
                    LOG.error("%s is not running" % service)
# raise e

        # ======================================================================
        #                              GET DETAILS AND COUNT OF INSTANCES
        # ======================================================================
        def get_servers_details_count(self):
            LOG.info("get details and count of instances")
            tenant_id, auth_token = utils.keystone_login(
                common_config.TENANT_NAME, common_config.USER_NAME, common_config.PASS_WORD)
            details = utils.list_server_details(tenant_id, auth_token)
            servers_count = len(details["servers"])
            return details, servers_count

        # ======================================================================
        #               CREATE INSTANCES,CHECK TOTAL COUNT BEFORE AND AFTER CREATING INSTANCES
        # ======================================================================

        def test_2create_instance(self):
            LOG.info(
                "create instances, check total count before and after creating instances")
            tenant_id, auth_token = utils.keystone_login(
                common_config.TENANT_NAME, common_config.USER_NAME, common_config.PASS_WORD)
            details, servers_count_before = self.get_servers_details_count()
            for vm_name, image, flavor in common_config.vm_name_image_flavor:
                image_id = utils.find_image(image, tenant_id, auth_token)
                instance_id = utils.create_instance(
                    vm_name, image_id, flavor, tenant_id, auth_token)
                time.sleep(120)
                inst_active = utils.is_instance_active(
                    instance_id, tenant_id, auth_token)
                try:
                    self.assertEquals(
                        "True", inst_active, "%s is not active" % vm_name)
                    LOG.info("%s is active" % vm_name)
                except Exception as e:
                    LOG.error("%s is not active" % vm_name)
# raise e
                details, servers_count_now = self.get_servers_details_count()
            global servers_count_global
            servers_count_global = servers_count_now
            try:
                self.assertEquals(
                    (servers_count_before + len(
                        common_config.vm_name_image_flavor)),
                    servers_count_now,
                    "instance count does not match")
                LOG.info("instance count matches")
            except Exception as e:
                LOG.error("instance count does not match")
# raise e

        # ======================================================================
        #                              GET COUNT OF VMs UNDER EACH HOST
        # ======================================================================

        def test_3vm_count_with_host(self):
            LOG.info("Count of VMs under each host")
            tenant_id, auth_token = utils.keystone_login(
                common_config.TENANT_NAME, common_config.USER_NAME, common_config.PASS_WORD)
            server_details, total_server_count = self.get_servers_details_count()
            vm_hosts = utils.list_host(tenant_id, auth_token)
            vm_count_with_hosts_dict = {}
            for host in range(len(vm_hosts["vmhosts"])):
                vm_count_with_hosts_dict[vm_hosts["vmhosts"][host]["name"]] = 0
                for server in range(total_server_count):
                    for host in vm_count_with_hosts_dict.keys():
                        if server_details["servers"][server][
                                'OS-EXT-SRV-ATTR:host'] == host:
                            vm_count_with_hosts_dict[
                                host] = vm_count_with_hosts_dict[host] + 1
                            break
            global vm_count_with_hosts_global
            vm_count_with_hosts_global = vm_count_with_hosts_dict
            return vm_count_with_hosts_dict

        # ======================================================================
        #                             REBOOT ISC APPLIANCE
        # ======================================================================

        def test_4reboot_ISC(self):
            LOG.info("Reboot ISC appliance")
            conn = ssh.Client(
                common_config.ISC_APPLIANCE_IP,
                common_config.ssh_username,
                common_config.ssh_password)
            output = conn.exec_command("reboot")
            time.sleep(950)

        # ======================================================================
        #        PING APPLIANCE,CHECK SERVICES,SERVER COUNTS
        #                          AND NUMBER OF VMS ASSOCIATED WITH EACH HOST ARE EQUAL BEFORE AND AFTER REBOOT
        # ======================================================================

        def test_5after_reboot(self):
            LOG.info(
                "check ISC appliance is pinging,check services, server counts and number of vms associated with hosts before and after reboot are equal")
            servers_count_before_reboot = servers_count_global
            vm_count_with_hosts_before_reboot = vm_count_with_hosts_global
            ping_time = pinger.ping(common_config.ISC_APPLIANCE_IP)
            LOG.info("pinging system")
            if ping_time is None:
                LOG.info("Appliance not reachable")
            else:
                self.test_1check_services()
                details, servers_count_after_reboot = self.get_servers_details_count()
                vm_count_with_hosts_after_reboot = self.test_3vm_count_with_host()
            try:
                self.assertEquals(
                    servers_count_before_reboot, servers_count_after_reboot)
                LOG.info("number of servers before and after reboot are equal")
            except Exception as e:
                LOG.error(
                    "number of servers before and after reboot are not equal")
# raise e
            finally:
                try:
                    self.assertEquals(
                        vm_count_with_hosts_before_reboot,
                        vm_count_with_hosts_after_reboot,
                        "number of vms associted with hosts before and after reboot are not equal")
                    LOG.info(
                        "number of vms associted with hosts before and after reboot are equal")
                except Exception as e:
                    LOG.error(
                        "number of vms associted with hosts before and after reboot are not equal")
# raise e
            # ==================================================================
            #                            CLEANUP

            # ==================================================================
        def test_cleanup(self):
            tenant_id, auth_token = utils.keystone_login(
                common_config.TENANT_NAME, common_config.USER_NAME, common_config.PASS_WORD)
            for vm_name, image, flavor in common_config.vm_name_image_flavor:
                instance_id = utils.find_server_id(
                    vm_name, tenant_id, auth_token)
                utils.delete_instance(instance_id, tenant_id, auth_token)
                content = utils.list_server(tenant_id, auth_token)
                if content["servers"] == []:
                    LOG.info("Deleted all instances")
                else:
                    LOG.error("Instances are not deleted successfully")

    suite = unittest.TestLoader().loadTestsFromTestCase(Test_RebootISC)
    testResult = unittest.TextTestRunner(verbosity=2).run(suite)
    errors = testResult.errors
    failures = testResult.failures
    return errors, failures


if __name__ == "__main__":
    main()
