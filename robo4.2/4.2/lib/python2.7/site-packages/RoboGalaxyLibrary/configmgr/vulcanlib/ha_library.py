from __future__ import with_statement
import sys
from io import open
import time
from config import ha_common_config
from fabric.api import run, env, local, hide, get
from fabric.operations import put, get, reboot
from fabric.state import connections
from fabric.contrib import files
import re
import os.path
import os
from tests import utils
import httplib
import httplib2
import sys
import json


def write_Remote_file(
        hostIP,
        userName,
        password,
        filename,
        listval):
    """
        Author      :
        Descirption : This function append strings to a file on remote machine
        Params      :
                      hostIP       -->  IP address of remote machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      filename   -->  name of the file (eg: /tmp/filename)
                      listval -->  list of strings
        Usage       : write_Remote_file(node1IP,username,password,filename, ["string1", "string2"])
        Return      : return true if the verification string exist in the command output else return false
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        for text in listval:
            files.append(filename, text)
        closeConnection()
        return True
    except Exception:
        raise Exception("Failed to Execute the command  ")
        return False


def execute_Remote_commands(
        hostIP,
        userName,
        password,
        remCommand,
        verifyString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute the commands on remote machine and compare the result with verifystring you pass
        Params      :
                      hostIP       -->  IP address of remote machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      remCommand   -->  the command you need to run on remote machine (eg: ls , mkdir /test etc)
                      verifyString -->  verification string that you need to compare with the output
        Usage       : execute_Remote_commands(node1IP,userName,passWord,'lvcreate -L190G -n  lv_iscvm  vg_iscvm', "created")
        Return      : return true if the verification string exist in the command output else return false
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        outString = run(remCommand)
        isFound = outString.find(verifyString, 0, len(outString))
        closeConnection()
        if isFound != -1:
            return True
        else:
            return False

    except Exception:
        raise Exception("Failed to Execute the command  ", remCommand)
        return False


def execute_Remote_commands_and_return_output(
        hostIP,
        userName,
        password,
        remCommand):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute the commands on remote machine and return the ouput
        Params      :
                      hostIP       -->  IP address of remote machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      remCommand   -->  the command you need to run on remote machine (eg: ls , mkdir /test etc)
        Usage       : execute_Remote_commands_and_return_output(node1IP,userName,passWord,'lvcreate -L190G -n  lv_iscvm  vg_iscvm')
        Return      : return output from the command
    """
    try:
        initHostParams(hostIP, userName, password)
        outString = run(remCommand)
        return outString.lstrip()
    except Exception:
        raise Exception("Failed to Execute the command  ", remCommand)
        return False


def verify_lvm_status(hostIP, userName, passwod, verficationValue, *lvmNames):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function verify the lvm status weather actice or inactive
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      verficationValue -->  it should be ACTIVE or inactive
                      lvmNames         -->  Name of the lvm's that needs to be verified

        Usage       : value=ha_library.verify_lvm_status("192.168.0.24","root","ACTIVE","lv_osimage")
                      value=ha_library.verify_lvm_status("192.168.0.24","root","inactive","ls_iscvm")
        Return      : Return true
    """
    counter = 0
    try:
        for lvm in lvmNames:
            CLIOutput = execute_Remote_commands(
                hostIP,
                userName,
                passwod,
                "lvscan | grep " +
                lvm,
                verficationValue)
            if CLIOutput:
                counter = counter + 1
        if len(lvmNames) == counter:
            return True
        else:
            return False
    except:
        raise Exception("Failed to verify the lvm Status  ")
        return False


def copy_file_remotely(hostIP, userName, password, sourceFile, destFile):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function copy local file to remote machine
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      sourceFile       -->  location of the file in the local host
                      destFile         -->  Destination directory where the file need to be copied in remote host

        Usage       : value=ha_library.downloadfile_from_remote("192.168.0.24","root", "hpinvent","c:\\temp\cluster.conf","/etc/cluster/")

        Return      : Return true
    """
    try:
        initHostParams(hostIP, userName, password)
        put(sourceFile, destFile)
        return True

    except:
        raise Exception("Failed to copy the file remotely:", sourceFile)
        return False


def downloadfile_from_remote(hostIP, userName, password, sourceFile, destFile):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function download any files from remote machine to loca machine
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      sourceFile       -->  location of the file in the remote host
                      destFile         -->  Destination directory where the file need to be copied

        Usage       : value=ha_library.downloadfile_from_remote("192.168.0.24","root", "hpinvent","/etc/cluster/cluster.conf","c:\\temp")

        Return      : Return true
    """
    try:
        initHostParams(hostIP, userName, password)
        get(sourceFile, destFile)
        return True

    except:
        raise Exception(
            "Failed to download the file from remote machine :", sourceFile)
        return False


def initHostParams(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function initialize the Env variable for fabric to connecto to remote host
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
        Usage       : value=ha_library.initHostParams("192.168.0.24","root", "hpinvent")

        Return      : Return nothing
    """
    env.host_string = hostIP
    env.user = userName
    env.password = password


def getVMipaddress_KVM(hostIP, userName, password, vmName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function return the KVM guest IP addtess
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      vmName           -->  Name of the vm that the ip should return

        Usage       : value=ha_library.getVMipaddress_KVM("192.168.0.24","root", "hpinvent","testVM")

        Return      : Return VM guest IP address
    """

    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        outString = run('virsh dumpxml ' + vmName + ' | grep "mac address"')
        macList = re.findall(
            '[a-f0-9]{2}[:][a-f0-9]{2}[:][a-f0-9]{2}[:][a-f0-9]{2}[:][a-f0-9]{2}[:][a-f0-9]{2}',
            outString.lower())
        ipNet = re.findall('[0-9]+(?:\.[0-9]+){2}', hostIP)
        loopStatus = False
        for ind in range(253):
            ipAddr = str(ipNet[0]) + "." + str(ind)
            outString = run('ping -c 1 -q ' + ipAddr)
            for macAddr in macList:
                arpOut = run("arp -an | grep " + macAddr)
                if len(arpOut.lstrip()) != 0:
                    vmIP = re.findall('[0-9]+(?:\.[0-9]+){3}', arpOut)
                    loopStatus = True
                    break
            if loopStatus:
                break
        if len(vmIP) > 0:
            return vmIP[0]
        else:
            return False

    except:
        raise Exception("Failed to get the Pulsar IP address:")
        return "False"


def execute_and_verify_results(
        hostIP,
        userName,
        password,
        remCommand,
        verifyString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute any commands on remote host and verify if the verifystring is exist in the command output
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      remCommand       -->  commands to execute on the host
                      verifyString     -->  string that needs to be compared with the output

        Usage       : value=ha_library.execute_and_verify_results("192.168.0.24","root", "hpinvent","mkdir /temp","succesfully created")

        Return      : Return true if successfully ran the command and verified with string else return false
    """
    try:
        output = execute_Remote_commands(
            hostIP, userName, password, remCommand, verifyString)
        if output:
            return True
        else:
            # print "Failed to verify the value: "+ verifyString + "  Please
            # check ! Exiting the test"
            raise Exception("Failed to verify the value: ", verifyString)
            sys.exit()
    except:
        raise Exception("Failed to execute the command :", remCommand)
        sys.exit()
        return False


def execute_and_verify_results_multipleVerification(
        hostIP,
        userName,
        password,
        remCommand,
        *verifyString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute any commands on remote host and verify if the verifystring is exist in the command output, you can pass list of verification string
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      remCommand       -->  commands to execute on the host
                      verifyString     -->  string that needs to be compared with the output

        Usage       : value=ha_library.execute_and_verify_results_multipleVerification("192.168.0.24","root", "hpinvent","mkdir /temp","succesfully created","already exist")

        Return      : Return true if successfully ran the command and verified with any of the string in the list else return false
    """
    try:
        for vString in verifyString:
            output = execute_Remote_commands(
                hostIP, userName, password, remCommand, vString)
            if output:
                return True
        print "Unable to verify the output with passed verification value"
        return False
    except:
        raise Exception("Failed to execute the command :", remCommand)
        sys.exit()
        return False


def reboot_remote_host(hostIP, userName, password, waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function reboot the remote host and wait untill the waittime .
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      waitTime         -->  wait time in seconds
        Usage       : value=ha_library.reboot_remote_host("192.168.0.24","root", "hpinvent","200")

        Return      : Return true
    """
    try:
        initHostParams(hostIP, userName, password)
        # reboot(waitTime)
        run("reboot")
        time.sleep(waitTime)
        closeConnection()
        return True
    except:
        raise Exception("Failed to reboot the host")
        return False


def startClusterService(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function start the cluster service on the remote node.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password

        Usage       : value=ha_library.startClusterService("192.168.0.24","root", "hpinvent")

        Return      : Return true
    """
    try:
        execute_and_verify_results(
            hostIP,
            userName,
            password,
            "service cman start",
            "Joining fence domain")
        execute_and_verify_results(
            hostIP,
            userName,
            password,
            "service rgmanager start",
            "Starting Cluster Service Manager")
        return True
    except:
        raise Exception("Failed to start the cluster service :")
        return False


def restartClusterService(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function restart the cluster service on the remote node.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password

        Usage       : value=ha_library.restartClusterService("192.168.0.24","root", "hpinvent")

        Return      : Return true
    """
    try:
        rgStatus = execute_and_verify_results(
            hostIP, userName, password, "service rgmanager stop", "OK")
        cmanStatus = execute_and_verify_results(
            hostIP,
            userName,
            password,
            "service cman restart",
            "Joining fence domain")
        rgStatus2 = execute_and_verify_results(
            hostIP, userName, password, "service rgmanager start", "OK")

        assert cmanStatus and rgStatus and rgStatus2, "Failed to restart the cman service"
        return True
    except:
        raise Exception("Failed to restart the Cluster service please check")
        return False


def setCheck_config(hostIP, userName, password, *services):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function set chkconfig for any services pass to this function.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      volGroups        -->  tuple of services
        Usage       : value=ha_library.setCheck_config("192.168.0.24","root", "hpinvent","cman","rgmanager")

        Return      : Return true
    """
    try:
        for service in services:
            execute_and_verify_results(
                hostIP, userName, password, "chkconfig " + service + " on", "")
        return True
    except:
        raise Exception("Failed to set the chkconfig:")
        return False


def removeLogicalVolume(hostIP, userName, password, *logVolumes):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function removes the logical volume from remote host.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  hostpassword
                      volGroups        -->  tuple of volume group
        Usage       : value=ha_library.removeLogicalVolume("192.168.0.24","root", "hpinvent","/etc/dev/lg_isc","/etc/dev/lv_osimage")

        Return      : Return nothing
    """
    try:
        env.warn_only = True
        for lvm in logVolumes:
            CLIOutput = execute_Remote_commands(
                hostIP, userName, password, "lvscan | grep " + lvm, lvm)
            if CLIOutput:
                execute_and_verify_results(
                    hostIP,
                    userName,
                    password,
                    'lvremove -f ' +
                    lvm,
                    "successfully removed")
    except:
        raise Exception("Failed to remove the logical volume :")
        return False


def removeVolumeGroup(hostIP, userName, password, *volGroups):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function removes the volume group from remote host.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      volGroups        -->  tuple of volume group
        Usage       : value=ha_library.removeVolumeGroup("192.168.0.24","root", "hpinvent","vg_isc","vg_osimage")

        Return      : Return nothing
    """
    try:
        env.warn_only = True
        for vg in volGroups:
            CLIOutput = execute_Remote_commands(
                hostIP, userName, password, "vgscan | grep " + vg, vg)
            if CLIOutput:
                execute_and_verify_results(
                    hostIP,
                    userName,
                    password,
                    'vgremove ' + vg,
                    "successfully removed")
    except:
        raise Exception("Failed to remove volume group:")
        return False


def removePhysicalVolume(hostIP, userName, password, *physicalVolume):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function removes the physical voulume from remote host.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  host username
                      Password         -->  host password
                      volGroups        -->  tuple of volume group
        Usage       : value=ha_library.removePhysicalVolume("192.168.0.24","root", "hpinvent","vg_isc","vg_osimage")

        Return      : Return nothing
    """
    try:
        env.warn_only = True
        for pv in physicalVolume:
            CLIOutput = execute_Remote_commands(
                hostIP, userName, password, "pvscan | grep " + pv, pv)
            if CLIOutput:
                execute_and_verify_results(
                    hostIP,
                    userName,
                    password,
                    'pvremove ' + pv,
                    "successfully wiped")
    except:
        raise Exception("Failed to remove physical voulume :")
        return False


def closeConnection():
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function close all opened fabric connection.
        Params      : Nothing


        Usage       : value=ha_library.closeConnection()

        Return      : Return Nothing
    """
    for key in connections.keys():
        connections[key].close()
        del connections[key]


def getActivenodeFromCluster(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function return the Active cluster node IP.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.getActivenodeFromCluster("192.168.0.24","root", "hpinvent")

        Return      : Return active cluster node IP address
    """
    try:
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        cluList = run(
            "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
        if "started" in cluList:
            return cluList[0]
        else:
            raise Exception("There is no active node in the cluster")
            sys.exit()
    except:
        raise Exception("Failed to get the active node from cluster:")
        return False


def getSecondaryNodeFromCluster(hostIP, userName, password, *nodes):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function return the Secondary cluster node IP from cluster.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      nodes            -->  Tuple of cluster nodes
        Usage       : value=ha_library.getSecondaryNodeFromCluster("192.168.0.24","root", "hpinvent","node1.pulsar.net","abc.pulsar.net")

        Return      : Return Standby cluster node IP address
    """
    try:
        activeNode = getActivenodeFromCluster(hostIP, userName, password)
        secondaryNode = [node for node in nodes if activeNode != node]
        return secondaryNode
    except:
        raise Exception("Failed to get the secondary node from cluster:")
        return False


def waitUntilServiceisActive(hostIP, userName, password, waitTime, nodeName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function wait until the cluster service is up on specific node
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      waitTime         -->  wait time in minutes
                      nodeName         -->  Node name where the primary service is running
        Usage       : value=ha_library.waitUntilServiceisActive("192.168.0.24","root", "hpinvent",10,"authost.pulsar.net")

        Return      : Return True if the node is active else return false
    """
    try:
        env.warn_only = True
        while waitTime > 0:
            activeNode = getActivenodeFromCluster1(hostIP, userName, password)
            time.sleep(60)
            if activeNode == nodeName:
                waitTime = 0
                return True
            waitTime = waitTime - 1
        return False
    except:
        raise Exception("Failed to run waitUntil service is active:", hostIP)
        return False


def getActivenodeFromCluster1(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function return the Active cluster node IP. and returns False when status is not active
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.getActivenodeFromCluster("192.168.0.24","root", "hpinvent")

        Return      : Return active cluster node IP address else return false
    """
    try:
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        cluList = run(
            "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
        if "started" in cluList:
            return cluList[0]
        else:
            return "False"
    except:
        raise Exception("Failed to get the active node from cluster:")
        return False


def waitforServicetoActive(hostIP, userName, password, waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function wait until service is in started state
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      waitTime         -->  wait time in minutes
        Usage       : value=ha_library.waitforServicetoActive("192.168.0.24","root", "hpinvent")

        Return      : Return True if the node is active else return false
    """
    try:
        waitTime = waitTime * 4
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        while waitTime > 0:
            cluList = run(
                "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
            if "started" in cluList:
                return True
                waitTime = 0
            time.sleep(15)
            waitTime = waitTime - 1

        return False
    except:
        raise Exception(
            "Failed to run start the service:waitforServicetoActive :", hostIP)
        return False


def verifyClusterNodesStatus(hostIP, userName, password, status, *nodes):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function verify the status of the cluster nodes eg Active or inactive.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      nodes            -->  Tuple of nodes that needs to checked
        Usage       : value=ha_library.verifyClusterNodesStatus("192.168.0.24","root", "hpinvent","autohost1.pulsar.net","autohost2.pulsar.net")

        Return      : Return True if all the node status are same else return false
    """
    try:
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        cluList = run(
            "clustat | grep " + status + " | awk '{print $1}'").split("\r\n")
        del cluList[len(cluList) - 1]
        nodeList = list(nodes)

        if cluList == nodeList:
            return True
        else:
            return False

    except:
        raise Exception("Failed to verify the cluster node status", status)
        return False


def verifyClusterNodeCurrentState(hostIP, userName, password, status, node):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function verify the status of the cluster nodes eg Active or inactive.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      nodes            -->  Tuple of nodes that needs to checked
        Usage       : value=ha_library.verifyClusterNodeCurrentState("192.168.0.24","root", "hpinvent","Online","autohost1.pulsar.net")
                      value=ha_library.verifyClusterNodeCurrentState("192.168.0.24","root", "hpinvent","Offline","autohost1.pulsar.net")
        Return      : Return True if all the node status are same else return false
    """
    try:
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        cluList = run("clustat | grep " + status + " | grep " +
                      node + " | awk '{print $3}'").split(",")

        if cluList[0].lstrip() == status:
            return True
        else:
            return False

    except:
        raise Exception("Failed to  verifyClusterNodeCurrentState", status)
        return False


def initHostParamsForOA(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function initialize the Fabric ENV variable for OA
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.initHostParamsForOA("192.168.0.24","Administrator", "hpinvent")

        Return      : Return nothing
    """
    env.host_string = hostIP
    env.user = userName
    env.password = password
    env.warn_only = True
    env.use_shell = False


def execute_Remote_commands_iLO_and_return_output(
        hostIP,
        userName,
        password,
        remCommand,
        verbose=False):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute the commands on remote machine and return the ouput
        Params      :
                      hostIP       -->  IP address of remote machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      remCommand   -->  the command you need to run on remote machine (eg: ls , mkdir /test etc)
        Usage       : execute_Remote_commands_and_return_output(node1IP,userName,passWord,'lvcreate -L190G -n  lv_iscvm  vg_iscvm')
        Return      : return output from the command
    """
    # try:
    initHostParamsForOA(hostIP, userName, password)
    if not verbose:
        with hide('output'):
            output = run(remCommand)
    else:
        output = run(remCommand)
        closeConnection()
    return output.lstrip()
    # except Exception:
    # raise Exception("Failed to Execute the command  ", remCommand)
    # return False


def getActiveVCIP(OAIP, userName, Password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function returns the active VC module IP address from OA
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.getActiveVCIP("192.168.0.24","Administrator", "hpinvent")

        Return      : Return the acive VC IP from the OA
    """
    try:
        initHostParamsForOA(OAIP, userName, Password)
        vcDetails = run("show vcmode")
        vcIP = re.findall('[0-9]+(?:\.[0-9]+){3}', vcDetails)
        closeConnection()
        return vcIP[0]
    except:
        raise Exception("Failed to  getActiveVCIP", OAIP)
        return False


def getStandByVCIP(OAIP, userName, Password, ipList):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retreive standBy VC module IP address from two interconnect module OA
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      ipList           -->  two VC module IP address
        Usage       : value=ha_library.getStandByVCIP("192.168.0.24","Administrator", "hpinvent","170.50.40.10","170.50.40.12")

        Return      : Return the standby VC details from the two VC IP

        NOTE        : This function only support for 2 VC interconnect module OA
    """
    try:
        initHostParamsForOA(OAIP, userName, Password)
        vcDetails = run("show vcmode")
        vcIP = re.findall('[0-9]+(?:\.[0-9]+){3}', vcDetails)
        if ipList[0] == vcIP[0].lstrip():
            return ipList[1]
        else:
            return ipList[0]
        closeConnection()
    except:
        raise Exception("Failed to  getStandByVCIP", OAIP)
        return False


def getVCModuleIP(OAIP, userName, Password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retreive list of VC module IP address from OA
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.getVCModuleIP("192.168.0.24","Administrator", "hpinvent")

        Return      : Return the list of VC IP address
    """
    try:
        initHostParamsForOA(OAIP, userName, Password)
        interDetails = run("show interconnect list")
        vcIP = re.findall('[0-9]+(?:\.[0-9]+){3}', interDetails)
        closeConnection()
        return vcIP
    except:
        raise Exception("Failed to  getVCModuleIP", OAIP)
        return False


def getInterconnectPropertyByIP(
        OAIP,
        userName,
        Password,
        interconnectIP,
        propertyName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retreive the interconnect property by it's IP address
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      interconnectIP   -->  IP address of the interconnect module should be provided
                      propertyName     -->  it can be any of the following ('bay','type','manufacture','power','health','uid','ip')
        Usage       : value=ha_library.getInterconnectPowerStatusByIP("192.168.0.24","Administrator", "hpinvent","192.168.3.101","power")
                      value=ha_library.getInterconnectPowerStatusByIP("192.168.0.24","Administrator", "hpinvent","192.168.3.101","bay")
        Return      : Return the powerstatus as string (eg : on or off)
    """
    try:
        prop = {'bay': 0, 'type': 1, 'manufacture': 2,
                'power': 3, 'health': 4, 'uid': 5, 'ip': 6}
        initHostParamsForOA(OAIP, userName, Password)
        interDetails = run("show interconnect list")
        vcLine = [line for line in interDetails.split(
            '\n') if interconnectIP in line]
        vcLine = vcLine[0].split()
        closeConnection()
        return vcLine[prop[propertyName.lower()]]
    except:
        raise Exception("Failed to  getInterconnectPropertyByIP", OAIP)
        return False


def runOAcommands(
        OAIP,
        userName,
        Password,
        command,
        verifyString,
        verbose=False):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function run any commands in OA and return true if the command output match with the verify string passed to function
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      command          -->  any OA command
                      verifyString     -->  String that has to be compared with output retuned by the OA command
        Usage       : result=ha_library.runOAcommands("192.168.0.24","Administrator", "hpinvent","show interconnect 1","170.50.40.2")

        Return      : Return TRUE if verify string exist in the command output else return false
    """
    try:
        initHostParamsForOA(OAIP, userName, Password)
        if not verbose:
            with hide('output'):
                output = run(command)
        else:
            output = run(command)
        isFound = output.find(verifyString, 0, len(output))
        if isFound != -1:
            return True
        else:
            return False
        closeConnection()
    except:
        raise Exception("Failed to  runOAcommands", command)
        return False


def run_storage_commands(ip, userName, Password, command, verbose=False):
    """
        Author      : daniel.resendez@hp.com
        Descirption : This function run any commands in 3par, EVA, or StorageWorks
        Params      :
                      ip               --> ip address
                      userName         --> username
                      Password         --> password
                      command          --> any command
        Usage       : result = ha_library.run_storage_commands("192.168.0.24","Administrator", "hpinvent","createuser %s %s"%(username,domain_name))

        Return      : Return True if command executes, else return false
    """
    try:
        initHostParamsForOA(ip, userName, Password)
        if not verbose:
            with hide('output'):
                output = run(command)
        else:
            output = run(command)
        closeConnection()
        return True
    except:
        return False


def run_storage_commands_and_return_output(
        ip,
        userName,
        Password,
        command,
        verbose=False):
    """
        Author      : Vivek.Tatipamula@hp.com
        Descirption : This function run any commands on 3par
        Params      :
                      ip               --> ip address
                      userName         --> username
                      Password         --> password
                      command          --> any command
        Usage       : result = ha_library.run_storage_commands("192.168.0.24","Administrator", "hpinvent","createuser %s %s"%(username,domain_name))

        Return      : Returns list with status as true and output if command executes successfully, else return false with empty as output
    """
    try:
        initHostParamsForOA(ip, userName, Password)
        if not verbose:
            with hide('output'):
                output = run(command)
        else:
            output = run(command)
        closeConnection()
        return (True, output)
    except:
        return (False, "")


def verifyInterfacesArePresent(hostIP, userName, password, *interFaces):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function verify if nic interface is exist in the remote node,you can pass multiple interface to this function
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      interFaces       -->  tuple of nic interface ( you can pass multiple interface details)

        Usage       : result=ha_library.verifyInterfacesArePresent("192.168.0.24","root", "hpinvent","eth0")
                      result=ha_library.verifyInterfacesArePresent("192.168.0.24","root", "hpinvent","eth0","eth1","br0","bond1")

        Return      : Return TRUE if all the NIC interfaces are exist in the node else return false
    """
    try:
        counter = len(interFaces)
        initHostParams(hostIP, userName, password)
        for interface in interFaces:
            output = run('ifconfig ' + interface)
            isFound = output.find("HWaddr", 0, len(output))
            if isFound == -1:
                counter = 0
        closeConnection()
        if counter == 0:
            return False
        else:
            return True

    except:
        raise Exception("Failed to  verifyInterfacesArePresent")
        return False


def compareMacAddressforEth(hostIP, userName, password, *interFaces):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function compare the MAC address of interfaces passed to the function
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      interFaces       -->  tuple of nic interface ( you can pass multiple interface details)

        Usage       : result=ha_library.compareMacAddressforEth("192.168.0.24","root", "hpinvent","eth0","eth1")
                      result=ha_library.compareMacAddressforEth("192.168.0.24","root", "hpinvent","eth0","eth1","eth2")

        Return      : Return TRUE if all the NIC MAC address are same else return false
    """
    try:
        maclist = []

        initHostParams(hostIP, userName, password)
        for eth in interFaces:
            maclist.append(returnMACaddressFromString(run('ifconfig ' + eth)))
        if maclist.count(maclist[0]) == len(maclist):
            return True
        else:
            return False

    except:
        raise Exception("Failed to  compareMacAddressforEth")
        return False


def returnMACaddressFromString(macString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function search and return MAC address from any string which contains mac address
        Params      :
                      macString        -->  String with mac address

        Usage       : result=ha_library.returnMACaddressFromString("vnet0     Link encap:Ethernet  HWaddr FE:54:00:0C:F2:CD")


        Return      : Return MAC address from the string
    """
    try:
        expr = '([a-fA-F0-9]{2}[:|\-]?){6}'  # same regex as above
        macList = re.compile(expr).finditer(macString)
        if macList:
            for val in macList:
                macAddr = macString[val.start(): val.end()]
        return macAddr
    except:
        raise Exception("Failed to  returnMACaddressFromString")
        return False


def verifyBondSlaveInterface(
        hostIP,
        userName,
        password,
        bondName,
        *interFaces):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function verify if slave interfaces are associated with bond
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      bondName         -->  Name of the bond that slaves need to be verified
                      interFaces       -->  tuple of interfaces that need to verify the association with bond

        Usage       : result=ha_library.verifyBondSlaveInterface("192.168.0.24","root", "hpinvent","bond0","eth0","eth1")

        Return      : Return TRUE if all the passed interfaces are slaves for the bond else return false
    """
    try:
        ethList = []
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        for eth in interFaces:
            output = run(
                'cat /proc/net/bonding/' +
                bondName +
                ' | grep "Slave Interface: ' +
                eth +
                '"')
            if output:
                output = output.split(":")
                ethList.append(output[1].lstrip())

        listInt = list(interFaces)
        if ethList == listInt:
            return True
        else:
            return False
    except:
        raise Exception("Failed to  verifyBondSlaveInterface")
        return False


def returnSlaveInterfaceFromBond(hostIP, userName, password, bondName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retuns the slave interface details from the bond
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      bondName         -->  Name of the bond that slaves NIC's to be returned


        Usage       : result=ha_library.returnSlaveInterfaceFromBond("192.168.0.24","root", "hpinvent","bond0")

        Return      : Return the list of slave interface details from the bond
    """
    try:
        ethList = []
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        output = run(
            'cat /proc/net/bonding/' + bondName + ' | grep "Slave Interface:"')
        expr = 'eth[0-9]'
        nicList = re.compile(expr).finditer(output)
        for val in nicList:
            ethList.append(output[val.start(): val.end()])
        return ethList
    except:
        raise Exception("Failed to  returnSlaveInterfaceFromBond")
        return False


def returnActiveSlaveFromBond(hostIP, userName, password, bondName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retuns the Active slave interface details from the bond
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      bondName         -->  Name of the bond that Active slaves NIC to be returned


        Usage       : result=ha_library.returnActiveSlaveFromBond("192.168.0.24","root", "hpinvent","bond0")

        Return      : Return the active slave interface details from the bond
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        output = run(
            'cat /proc/net/bonding/' +
            bondName +
            ' | grep "Currently Active Slave"')
        if output:
            output = output.split(":")
            eth = (output[1].lstrip())
            return eth
        return False
    except:
        raise Exception("Failed to  returnActiveSlaveFromBond")
        return False


def returnStandBySlaveFromBond(hostIP, userName, password, bondName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retuns the standBy slave interface details from the bond
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      bondName         -->  Name of the bond that standby slaves NIC to be returned


        Usage       : result=ha_library.returnStandBySlaveFromBond("192.168.0.24","root", "hpinvent","bond0")

        Return      : Return the standby slave interface details from the bond
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        output = run(
            'cat /proc/net/bonding/' +
            bondName +
            ' | grep "Currently Active Slave"')
        if output:
            output = output.split(":")
            eth = (output[1].lstrip())
        ethList = returnSlaveInterfaceFromBond(
            hostIP, userName, password, bondName)
        vcLine = ([nic for nic in ethList if nic != eth])
        return vcLine

    except:
        raise Exception("Failed to  returnStandBySlaveFromBond")
        return False


def verifyBondhasActiveAndStandByInterface(
        hostIP,
        userName,
        password,
        bondName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retuns the Active slave interface details from the bond
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password
                      bondName         -->  Name of the bond that Active slaves NIC to be returned


        Usage       : result=ha_library.returnActiveSlaveFromBond("192.168.0.24","root", "hpinvent","bond0")

        Return      : Return the active slave interface details from the bond
    """
    try:
        activeStatus = returnActiveSlaveFromBond(
            hostIP, userName, password, bondName)
        standByStatus = returnStandBySlaveFromBond(
            hostIP, userName, password, bondName)

        if activeStatus.find(
                "eth",
                0,
                len(activeStatus)) != -1 and len(standByStatus) > 0:
            return True
        else:
            return False

    except Exception:
        raise Exception("Failed to  verifyBondhasActiveAndStandByInterface")
        return False


def loginResult(LOG, result):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function print the success and failure results to the log file
        Params      :
                      LOG              -->  LOG file reference
                      result           -->  result needs to be displayed ( pass or fail)
                      Password         -->  Host password
        Usage       : result=loginResult("pass")
                      result=loginResult("fail")

        Return      : Return the standby slave interface details from the bond
    """
    try:
        if result == "pass":
            LOG.info("***********************************************")
            LOG.info("            TEST COMPLETED SUCCESSFULLY")
            LOG.info("***********************************************")

            print("================================================")
            print("            TEST COMPLETED SUCCESSFULLY")
            print("================================================")
        else:

            LOG.info("***********************************************")
            LOG.info("            TEST FAILED ")
            LOG.info("***********************************************")

            print("================================================")
            print("            TEST FAILED ")
            print("================================================")
    except:
        raise Exception("Failed to  loginResult")
        return False


def setISCIP_toFile(vmIP):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function add the ISC IP addtess to the iscIP.txt file
        Params      :
                      vmIP             -->  IP address to add in the file

        Usage       : result = ha_library.setISCIP_toFile("192.168.0.24")

        Return      : Return nothing
    """
    try:
        fbo = open(ha_common_config.vmIPFile, "wb+")
        fbo.write(vmIP)
        fbo.close()
    except IOError as err:
        print "Failed while opening or writing to file " + err
        return False


def getVMPIP_fromFile():
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retuns the ISC IP address from the file
        Params      :

        Usage       : result=ha_library.getVMPIP_fromFile()

        Return      : Return the ISC IP address retrieved from file
    """
    try:
        if os.path.isfile(ha_common_config.vmIPFile):
            fbo = open(ha_common_config.vmIPFile, "r")
            vmIP = fbo.read()
            return vmIP
            fbo.close()
        else:
            return False
    except IOError as err:
        print "Unexpected error occured !! Exiting the test " + err
        return False


def getISC_VMIP(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function checks the iscIP.txt file already has a ISC IP and return if available else retrieve the ISC IP from KVM host and return
        Params      :
                      hostIP           -->  Remote host IP
                      userName         -->  Host User Name
                      Password         -->  Host password

        Usage       : VMIP = ha_library.getISC_VMIP("192.168.0.24","root", "hpinvent")

        Return      : Return thegetISC_VMIP address from the host
    """
    try:
        if not getVMPIP_fromFile():
            vmIP = getVMipaddress_KVM(
                hostIP, userName, password, ha_common_config.PULSARVM_NAME)
            if vmIP:
                setISCIP_toFile(vmIP)
                return vmIP
            else:
                return False
        else:
            vmIP = getVMPIP_fromFile()
            return str(vmIP)

    except:
        raise Exception("Failed to  getISC_VMIP")
        return False


def ping_host(hostIP, userName, Password, destHost, waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : Ping a remote host until the waitTime
        Params      :
                      hostIP           -->  The machine from where ping is initiated
                      userName         -->  Host User Name
                      Password         -->  Host password
                      destHost         -->  IP address of the machine to ping
                      waitTime         -->  Wait time in minutes
        Usage       : VMIP = ha_library.ping_host("192.168.0.24","root", "hpinvent","2.2.2.2",3)

        Return      : retun True if machine able to ping withing the wait time else return false
    """
    try:
        env.warn_only = True
        counter = 0
        waitTime = waitTime * 2
        while waitTime >= counter:
            pingStatus = execute_Remote_commands(
                hostIP,
                userName,
                Password,
                "ping -c 2 " +
                destHost,
                "2 packets transmitted, 2 received")
            if pingStatus:
                counter = waitTime + 1
            counter = counter + 1
            time.sleep(30)

        return pingStatus

    except:
        raise Exception("Failed to  ping_host")
        return False


def ping_host_return_notreachable(
        hostIP,
        userName,
        Password,
        destHost,
        waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : Ping a remote host and return true if the machine is not reachable
        Params      :
                      hostIP           -->  The machine from where ping is initiated
                      userName         -->  Host User Name
                      Password         -->  Host password
                      destHost         -->  IP address of the machine to ping
                      waitTime         -->  Wait time in minutes
        Usage       : VMIP = ha_library.ping_host_return_notreachable("192.168.0.24","root", "hpinvent","2.2.2.2",3)

        Return      : retun True if machine is not reachable withing the wait time else return false
    """
    try:
        env.warn_only = True
        counter = 0
        waitTime = waitTime * 2
        while waitTime >= counter:
            pingStatus = execute_Remote_commands(
                hostIP,
                userName,
                Password,
                "ping -c 2 " +
                destHost,
                "2 packets transmitted, 0 received")
            if pingStatus:
                counter = waitTime + 1
            counter = counter + 1
            time.sleep(30)

        return pingStatus

    except:
        raise Exception("Failed to  ping_host_return_notreachable")
        return False


def CheckfailOverStatus_untilWaitTime(
        hostIP,
        userName,
        Password,
        failoverNode,
        waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : check for the cluster status and compare the active node name with name passed to function and wait untill the ewaitTIme
        Params      :
                      hostIP           -->  The machine from where ping is initiated
                      userName         -->  Host User Name
                      Password         -->  Host password
                      destHost         -->  node name to compare with active node
                      waitTime         -->  Wait time in minutes
        Usage       : VMIP = ha_libraryCheckfailOverStatus_untilWaitTime.ping_host("192.168.0.24","root", "hpinvent","2.2.2.2",3)

        Return      : retun True if the active node is same as failOverNode else return False
    """
    try:
        counter = 0
        waitTime = waitTime * 2
        while waitTime >= counter:
            failOverStatus = str(
                getActivenodeFromCluster_result(
                    hostIP,
                    userName,
                    Password)) == failoverNode
            if failOverStatus:
                counter = waitTime + 1
            counter = counter + 1
            time.sleep(30)

        return failOverStatus

    except:
        raise Exception("Failed to  CheckfailOverStatus_untilWaitTime")
        return False


def getActivenodeFromCluster_result(hostIP, userName, password):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function return the Active cluster node IP.
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password

        Usage       : value=ha_library.getActivenodeFromCluster("192.168.0.24","root", "hpinvent")

        Return      : Return active cluster node IP address else return false
    """
    try:
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        cluList = run(
            "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
        if "started" in cluList:
            return cluList[0]
        else:
            return False
    except:
        raise Exception("Failed to  getActivenodeFromCluster_result")
        return False


def getPortStatusFromSANSW(sanSWIP, userName, Password, portNumber):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function returns port status from the SAN Switch
        Params      :
                      sanSWIP          -->  ip address of SAN Switch
                      userName         -->  SAN Switch username
                      Password         -->  SAN Switch password
                      portNumber       -->  port number for the status to be verified

        Usage       : value=ha_library.getPortStatusFromSANSW("192.168.0.24","Administrator", "hpinvent","15")

        Return      : Return the port current status "Online" or "Offline"
    """
    try:
        initHostParamsForOA(sanSWIP, userName, Password)
        outPut = run("portshow " + portNumber + " | grep portState")
        portStatus = outPut[13:]
        closeConnection()
        return portStatus.lstrip()
    except:
        raise Exception("Failed to  getPortStatusFromSANSW")
        return False


def getServerPropertyByIP(OAIP, userName, Password, serverBay, propertyName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function retreive the server property by it's IP Bay number
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      interconnectIP   -->  IP address of the interconnect module should be provided
                      propertyName     -->  it can be any of the following ('bay','type','manufacture','power','health','uid','ip')
        Usage       : value=ha_library.getServerPropertyByIP("192.168.0.24","Administrator", "hpinvent","1","power")
                      value=ha_library.getServerPropertyByIP("192.168.0.24","Administrator", "hpinvent","2","iloname")
        Return      : Return the server property as string (eg : on or off)
    """
    try:
        prop = {'bay': 0, 'iloname': 1, 'iloip': 2,
                'status': 3, 'power': 4, 'uid': 5}
        initHostParamsForOA(OAIP, userName, Password)
        interDetails = run("show server list")
        vcLine = [
            line for line in interDetails.split('\n') if serverBay in line]
        vcLine = vcLine[0].split()
        closeConnection()
        return vcLine[prop[propertyName.lower()]]
    except:
        raise Exception("Failed to get the property from OA ")
        return False


def execute_Local_commands(
        hostIP,
        userName,
        password,
        localCommand,
        verifyString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute the commands on local machine and compare the result with verifystring you pass
        Params      :
                      hostIP       -->  IP address of local machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      localCommand -->  the command you need to run on local machine (eg: ls , mkdir /test etc)
                      verifyString -->  verification string that you need to compare with the output
        Usage       : execute_Local_commands(node1IP,userName,passWord,'lvcreate -L190G -n  lv_iscvm  vg_iscvm', "created")
        Return      : return true if the verification string exist in the command output else return false
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        outString = local(localCommand, capture=True)
        isFound = outString.find(verifyString, 0, len(outString))
        closeConnection()
        if isFound != -1:
            return True
        else:
            return False

    except:
        raise Exception("Failed to  execute_Local_commands")
        return False


def revert_SAN_Snapshot(hostIP, userName, password, localCommand):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function Mainly used to run the SNap shot revert commands
        Params      :
                      hostIP       -->  IP address of local machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      localCommand -->  snapshot revert command

        Usage       : ha_library.revert_SAN_Snapshot(ha_common_config.LOCAL_IP_ADDR,ha_common_config.LOCAL_USER,ha_common_config.LOCAL_PWD,\
                                       ha_common_config.SSSU_TOOL_LOC + ' "file '+ ha_common_config.SSSU_FILE_LOC+'"')
        Return      : return true if snapshot revert successfull else return false
    """
    try:
        initHostParams(hostIP, userName, password)
        env.warn_only = True
        outString = local(localCommand, capture=True)
        isFound = outString.find("Error:", 0, len(outString))
        closeConnection()
        if isFound == -1:
            return True
        else:
            return False

    except:
        raise Exception("Failed to revert the snapshot !!")
        return False


def ping_host_from_localWindows(
        hostIP,
        userName,
        Password,
        destHost,
        waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : Ping a remote host from a local windows machine
        Params      :
                      hostIP           -->  The machine from where ping is initiated
                      userName         -->  Host User Name
                      Password         -->  Host password
                      destHost         -->  IP address of the machine to ping
                      waitTime         -->  Wait time in minutes
        Usage       : pingStat = ha_library.ping_host_from_localWindows("192.168.0.24","root", "hpinvent","2.2.2.2",3)

        Return      : retun True if machine able to ping within the wait time else return false
    """
    try:
        env.warn_only = True
        counter = 0
        waitTime = waitTime * 2
        while waitTime >= counter:
            pingStatus = execute_Local_commands(
                hostIP,
                userName,
                Password,
                "ping -n 2 " +
                destHost,
                "Destination host unreachable")
            pingStatus = execute_Local_commands(
                hostIP,
                userName,
                Password,
                "ping -n 2 " +
                destHost,
                "Request timed out")
            if not pingStatus and not pingStatus:
                counter = waitTime + 1
            counter = counter + 1
            time.sleep(30)
        if counter == waitTime + 2:
            return True
        else:
            return False

    except:
        raise Exception("Failed to get the ping status !!")
        return False


def deleteFile(fileName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function delete the file name is exist
        Params      :
                      fileName             -->  Name of the file needs to delete

        Usage       : result = ha_library.deleteFile(deleteFile)

        Return      : Return nothing
    """
    try:
        if os.path.exists(fileName):
            os.remove(fileName)
    except IOError as err:
        print "Failed to delete the file name " + err


def waitfor_ApplianceStatus(waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function waits until the appliance generate
        Params      :
                      authURL             -->  auth URL
                      iscUser             -->  appliance username
                      IscPwd              -->  appliance password
                      serverBay           -->  IP address of the interconnect module should be provided
                      propertyName        -->  it can be any of the following ('bay','type','manufacture','power','health','uid','ip')
                      waitTime            -->  wait time in minutes
        Usage       : status = utils.keystone_login_return_status(authURL , tenantName, iscUser, IscPwd)

        Return      : Return the True if it return HTTP status code 200 within the time limit
    """
    try:
        counter = 0
        returnStatus = False
        waitTime = waitTime * 2
        while waitTime >= counter:
            status = keystone_login_return_status(
                ha_common_config.keystone_auth_url,
                ha_common_config.TENANT_NAME,
                ha_common_config.USER_NAME,
                ha_common_config.PASS_WORD)
            if int(status) == 200:
                counter = waitTime + 1
                returnStatus = True
            counter = counter + 1
            time.sleep(30)
        return returnStatus
    except:
        raise Exception("Failed to generate the keyston token  ")
        return False


def veirifyApplianceStatus():
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function make rest call to appliance and verify return HTTP 200 status
        Params      :

        Usage       : appStatus = utils.veirifyApplianceStatus

        Return      : Return the True if it return HTTP status code 200 within the time limit
    """
    returnCode = keystone_login_return_status(
        ha_common_config.keystone_auth_url,
        ha_common_config.TENANT_NAME,
        ha_common_config.USER_NAME,
        ha_common_config.PASS_WORD)
    if int(returnCode) == 200:
        tenantID, authtoken = keystone_login(
            ha_common_config.TENANT_NAME, ha_common_config.USER_NAME, ha_common_config.PASS_WORD)
        status, content = list_image_status(tenantID, authtoken)
        if int(status) == 200:
            return True
        else:
            return False
    else:
        return False


def waitforReceoverableStatus(hostIP, userName, password, waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function wait for recoverable status untill the mentioned time
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  username
                      Password         -->  password
                      waitTime         -->  wait time in minutes
        Usage       : value=ha_library.waitforReceoverableStatus("192.168.0.24","root", "hpinvent",4)

        Return      : Return True if the node is status changed to receoverable within the time limit
    """
    try:
        waitTime = waitTime * 60
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        while waitTime > 0:
            cluList = run(
                "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
            if "recoverable" in cluList:
                return True
                waitTime = 0
            time.sleep(1)
            waitTime = waitTime - 1

        return False
    except:
        raise Exception(
            "Failed to run start the waitforReceoverableStatus :", hostIP)
        return False


def waitforReceoverableOrStartingStatus(hostIP, userName, password, waitTime):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function wait for recoverable/Starting status untill the mentioned time
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  username
                      Password         -->  password
                      waitTime         -->  wait time in minutes
        Usage       : value=ha_library.waitforReceoverableStatus("192.168.0.24","root", "hpinvent",4)

        Return      : Return True if the node is status changed to receoverable/starting within the time limit
    """
    try:
        waitTime = waitTime * 60
        env.warn_only = True
        initHostParams(hostIP, userName, password)
        while waitTime > 0:
            cluList = run(
                "clustat | grep service | awk '{print $2,$3}'").lstrip().split(" ")
            if "recoverable" in cluList or "starting" in cluList:
                return True
                waitTime = 0
            time.sleep(1)
            waitTime = waitTime - 1

        return False
    except:
        raise Exception(
            "Failed to run start the waitforReceoverableStatus :", hostIP)
        return False


def waitUntilNodeisOnline(hostIP, userName, password, waitTime, nodeName):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function wait until the cluster service is up on specific node
        Params      :
                      hostIP           -->  cluster node ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      waitTime         -->  wait time in minutes
                      nodeName         -->  Node name where the primary service is running
        Usage       : value=ha_library.waitUntilNodeisOnline("192.168.0.24","root", "hpinvent",10,"authost.pulsar.net")

        Return      : Return True if the node is Online within the wait time else return false
    """
    try:
        env.warn_only = True
        while waitTime > 0:
            onlineStatus = verifyClusterNodeCurrentState(
                hostIP, userName, password, "Online", nodeName)
            time.sleep(60)
            if onlineStatus:
                waitTime = 0
                return True
            waitTime = waitTime - 1
        return False
    except:
        raise Exception("Failed to run waitUntil service is active:", hostIP)
        return False


def printLog(message):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function just prints the message to console
        Params      :
                      message           --> any message

        Usage       : printLog("initiatinth run")

        Return      : Nothing
    """

    message = message.upper()

    print "************   " + message + "   ************"
    print "                                           "


def keystone_login(tenant, username, password):

    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s/v2.0/tokens' % (ha_common_config.keystone_auth_url)
    body = json.dumps({'auth':
                       {'tenantName': tenant,
                        'passwordCredentials': {'username': username,
                                                'password': password}}})
    resp, content = conn.request(url, 'POST', body,
                                 headers={"Content-Type": "application/json"})
    if resp['status'] == '200' and content:
        content = json.loads(content)
        return (content['access']['token']['tenant']['id'],
                content['access']['token']['id'])
    else:
        raise Exception('Keystone login POST %s failed' % url, body, resp,
                        content)


def keystone_login_return_status(authurl, tenant, username, password):

    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s/v2.0/tokens' % (authurl)
    body = json.dumps({'auth':
                       {'tenantName': tenant,
                        'passwordCredentials': {'username': username,
                                                'password': password}}})
    resp, content = conn.request(url, 'POST', body,
                                 headers={"Content-Type": "application/json"})
    return resp['status']


def _send_request(method, path, tenant_id, auth_token, body=''):

    conn = httplib2.Http(disable_ssl_certificate_validation=True)
    url = '%s%s/%s' % (ha_common_config.nova_api_url, tenant_id, path)
    resp, content = conn.request(url, method, body,
                                 headers={"Content-Type": "application/json",
                                          "X-Auth-Token": auth_token})

    return content, resp['status']


def list_image_status(tenant_id, auth_token):
    content, status = _send_request('GET', 'images', tenant_id, auth_token)
    return status, content


def get_ilo_type(OAIP, userName, Password, command, verifyString):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function run any commands in OA and return true if the command output match with the verify string passed to function
        Params      :
                      OAIP             -->  OA ip address
                      userName         -->  OA username
                      Password         -->  OA password
                      command          -->  any OA command
                      verifyString     -->  String that has to be compared with output retuned by the OA command
        Usage       : result=ha_library.runOAcommands("192.168.0.24","Administrator", "hpinvent","show interconnect 1","170.50.40.2")

        Return      : Return TRUE if verify string exist in the command output else return false
    """
    try:
        initHostParamsForOA(OAIP, userName, Password)
        output = run(command)
        isFound = output.find(verifyString, 0, len(output))
        if isFound != -1:
            return True
        else:
            return False
        closeConnection()
    except:
        raise Exception("Failed to  runOAcommands", command)
        return False


def execute_switch_commands(hostIP, userName, password, remCommand):
    """
        Author      : Bijeesh P(bijeesh.p@hp.com)
        Descirption : This function execute the commands on remote machine and return the ouput
        Params      :
                      hostIP       -->  IP address of remote machine
                      userName     -->  remote machine username
                      password     -->  remote machine password
                      remCommand   -->  the command you need to run on remote machine (eg: ls , mkdir /test etc)
        Usage       : execute_Remote_commands_and_return_output(node1IP,userName,passWord,'lvcreate -L190G -n  lv_iscvm  vg_iscvm')
        Return      : return output from the command
    """
    # try:
    initHostParamsForOA(hostIP, userName, password)
    outString = run(remCommand)
    return outString.lstrip()
    # except Exception:
    #   raise Exception("Failed to Execute the command  ", remCommand)
    #  return False
