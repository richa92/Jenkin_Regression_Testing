""" This script creates VM or VMs and then delete VM or VMs """
""" Custom Configurations:                                  """
"""     keystone_auth_url                                   """
"""     nova_api_url                                        """
"""     image_name or image_ref                             """
"""     number_of_instances                                 """

import httplib
import httplib2
import sys
import json
import time
from tests.utils import *
import logging
import traceback
import re
import time
import string
import random
from fabric.api import local, run, cd, put, env

from config import common_config
from vulcanlib import vulcanfuncs
from vulcanlib import vulcanlog
import sys


LOG = logging.getLogger()


def ssh_vm(vm_user, vm_password):
    with env.settings(hosts_string="Remote", user=vm_user, password=vm_password):
        run('ls')


def main():
    try:
        main_section()
    except SystemExit:
        pass  # do nothing, just exit
    except:
        LOG.error("Unexpected error:")
        LOG.error(traceback.format_exc())


def main_section():

    vulcanfuncs.generate_pid_file(common_config.LOGDIR)

    (ch, fh) = vulcanlog.setup_default_logging(
        common_config.LOGDIR + "tcbcdvm.log")
    if common_config.VERBOSE > 0:
        vulcanlog.adjust_logging_level("debug", ch, fh)

    if common_config.QUIET > 0:
        vulcanlog.adjust_logging_level("quiet", ch, fh)

    number_of_instances = 2000

    flavor_id = 1
    timeout = 5
    instance_id_list = []
    total_launch_time = 0
    tenant = "anne"
    username = "anne"
    password = "serveradmin"
    image_name = 'ubuntu'
    image_ref = ""

    tenant_id, auth_token = keystone_login(tenant, username, password)

    if image_ref == '':
        image_ref = find_image(image_name, tenant_id, auth_token)

    images = list_image_details(tenant_id, auth_token)

    LOG.info(images)

    # Launching multiple instances
    print "Number of instances to be launched is", number_of_instances
    for i in range(1, (number_of_instances + 1)):
        initial_time = time.time()
        instance_id = create_instance("useradmin_instance", image_ref,
                                      flavor_id, tenant_id, auth_token)

# instance_status, instance_ip_address = get_instance_ip_address(instance_id, tenant_id, auth_token)
        instance_id_list.append(instance_id)
        while True:
            try:
                if is_instance_active(instance_id, tenant_id, auth_token):
                    break
            except httplib.BadStatusLine as exn:
                print "Warning: got BadStatusLine"
            time.sleep(timeout)
        final_time = time.time()
        if i is 1:
            first_launch_time = final_time - initial_time
        else:
            total_launch_time += (final_time - initial_time)
        print "Launched instance", instance_id, "in", \
            (final_time - initial_time), "secs"

    # Measuring the difference between the time taken to launch an instance
    # for the first time and the average of the time taken to launch
    # the rest of the instances
    average_time = total_launch_time / (number_of_instances - 1)
    print "First instance launched in", first_launch_time
    print "Avg time to launch rest of the instances is", average_time
    if average_time < first_launch_time:
        sys.exit(0)
    else:
        print ("Time taken for launching first instance was less than the "
               "average time taken for rest of the instances.")
        sys.exit(2)


if __name__ == "__main__":
    main()
