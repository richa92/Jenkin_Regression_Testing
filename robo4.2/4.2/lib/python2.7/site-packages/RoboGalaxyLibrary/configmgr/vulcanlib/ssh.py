"""
Contains the SSHconnector class which runs external commands on a remote machine through SSH.

"""
import logging
import re
import subprocess as sp
import sys

from vulcanlib.connector import Connector


_LOG = logging.getLogger()


class SSHconnector(Connector):

    """A connector which runs external commands on a remote machine through SSH.

    No password is required as this class assumes you have previously setup a password-less
    bridge between the local machine and the remote machine by exchanging certificates.

    Of course, an ssh executable should be installed on the local machine and be placed
    in the PATH.
    """

    def __init__(self, client=None, login=None):
        """Create a connector that runs commands on the specified client through SSH.

        The client argument should be a hostname or IP address of the remote machine where
        the command will run. The login is required.
        """
        Connector.__init__(self)
        self.client = client
        self.login = login

        if client is None or login is None:
            _LOG.error(
                "sorry, you asked for an SSH connector but you don't have enough info")
            _LOG.error("SSH connectors require, a client and a login")
            sys.exit(1)

    def send_cmd(self, cmd):
        """Run the specified command on the remote machine through SSH in the foreground.

        Until the command completes, this method will not return.

        Returns a tuple with the standard output and standard error streams of the command.
        """
        cmd = "ssh " + self.login + "@" + self.client + " " + cmd
        self.process = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.PIPE, shell=1)

        (stdout, stderr) = self.process.communicate()
        self.returncode = self.process.returncode

        if stderr is not None and re.search("\w", stderr):
            _LOG.error("cmd:%s returned:%s" % (cmd, stderr))
        else:
            _LOG.error(
                "There is not any sense data returned to stderr from this failed command.  This is most likely because the command was aborted.")

        return(stdout, stderr)

    def send_cmdNonBlk(self, cmd):
        """Run the specified command on the remote machine through SSH in a background process.

        Once the command has been launched, this method returns immediately with the
        subprocess.Popen() object used to launch it. Call the results_cmdNonBlk() method
        to bring the command into the foreground and get its results.
        """
        cmd = "ssh " + self.login + "@" + self.client + " " + cmd
        self.process = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.PIPE, shell=1)
        return(self.process)

    def results_cmdNonBlk(self):
        """Take the last command run in send_cmdNonBlk() and bring it into the foreground.

        Until the command completes, this method will not return.

        Returns a tuple with the standard output and standard error streams of the command.
        """
        (stdout, stderr) = self.process.communicate()
        self.returncode = self.process.returncode

        if stderr is not None and re.search("\w", stderr):
            _LOG.error("ssh stderr returned:%s" % (stderr))

        return(stdout, stderr)
