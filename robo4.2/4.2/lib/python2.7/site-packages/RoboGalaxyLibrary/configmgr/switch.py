import telnetlib
import custom_logging as log
import config_parser
import time

# import win32serviceutil


class SwitchCfg(object):

    def __init__(
            self,
            login_ip,
            login_username,
            login_pw,
            tftp_ip,
            switch_cfg_file):
        self.switch_ip = login_ip
        self.switch_user = login_username
        self.switch_pw = login_pw
        self.tftp_server_ip = tftp_ip
        self.switch_conf_file = switch_cfg_file

    def upload_switch_config_file_to_tftp_server(self):
        """
            Description : This function Uploads the switch configuration file to a TFTP server
            Usage       : upload_switch_config_file_to_tftp_server("172.24.111.2", "switch user name", "switch user password")
            Return      : output message from console interaction
        """
        log._info("Executing switch configuration on %s " % self.switch_ip)
        put_config_file = telnetlib.Telnet(self.switch_ip)
        put_config_file.read_until("login: ")
        put_config_file.write(self.switch_user + "\n")
        put_config_file.read_until("Password: ")
        put_config_file.write(self.switch_pw + "\n")
        put_config_file.write("tftp %s put %s \n" %
                              (self.tftp_server_ip, self.switch_conf_file))
        put_config_file.write("quit \n")
        put_config_file.write("quit \n")
        ret = put_config_file.read_all()
        log._info(ret)

    def download_switch_config_file_to_switch(self):
        """
            Description : This function Uploads the switch configuration file to a TFTP server
            Usage       : upload_switch_config_file_to_tftp_server("172.24.111.2", "switch user name", "switch user password")
            Return      : output message from console interaction
        """
        get_config_file = telnetlib.Telnet(self.switch_ip)
        get_config_file.read_until("login: ")
        get_config_file.write(self.switch_user + "\n")
        get_config_file.read_until("Password: ")
        get_config_file.write(self.switch_pw + "\n")
# get_config_file.write("sys \n")
        get_config_file.write("tftp %s get %s \n" %
                              (self.tftp_server_ip, self.switch_conf_file))
        get_config_file.read_until("Overwrite it? [Y/N]:")
        get_config_file.write("Y \n")
        # get_config_file.write("reboot")
# get_config_file.read_until("Continue? [Y/N]:")
# get_config_file.write("Y \n")
        get_config_file.write("quit \n")
        get_config_file.write("quit \n")
        ret = get_config_file.read_all()
        log._info(ret)

    def create_vlan(self, vlan_id):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("vlan %s \n" % vlan_id)
        '''
        obj.write("save \n")
        obj.read_until("Are you sure? [Y/N]:")
        obj.write("Y \n")
        obj.read_until("press the enter key):")
        obj.write("\n")
        obj.read_until("overwrite? [Y/N]:")
        obj.write("Y \n")
        '''
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def save_config(self):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("save \n")
        obj.read_until("Are you sure? [Y/N]:")
        obj.write("Y \n")
        obj.read_until("press the enter key):")
        obj.write("\n")
        obj.read_until("overwrite? [Y/N]:")
        obj.write("Y \n")

    def untag_ports_to_vlan(self, vlan_id, port_no):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("interface Ten-GigabitEthernet 1/0/%s \n" % port_no)
        obj.write("port link-type hybrid \n")
        obj.write("port hybrid vlan %s untagged \n" % vlan_id)
        '''
        obj.write("save \n")
        obj.read_until("Are you sure? [Y/N]:")
        obj.write("Y \n")
        obj.read_until("press the enter key):")
        obj.write("\n")
        obj.read_until("overwrite? [Y/N]:")
        obj.write("Y \n")
        '''
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def tag_ports_to_vlan(self, vlan_id, port_no):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("interface Ten-GigabitEthernet 1/0/%s \n" % port_no)
        obj.write("port link-type hybrid \n")
        obj.write("port hybrid vlan %s tagged \n" % vlan_id)
        '''
        obj.write("save \n")
        obj.read_until("Are you sure? [Y/N]:")
        obj.write("Y \n")
        obj.read_until("press the enter key):")
        obj.write("\n")
        obj.read_until("overwrite? [Y/N]:")
        obj.write("Y \n")
        '''
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def configure_users(self, user_name, password):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("local-user %s" % user_name)
        time.sleep(5)
        obj.write("authorization-attribute user-role network-admin")
        obj.write("password simple %s" % password)
        obj.write("service-type telnet")
        '''
        obj.write("save \n")
        obj.read_until("Are you sure? [Y/N]:")
        obj.write("Y \n")
        obj.read_until("press the enter key):")
        obj.write("\n")
        obj.read_until("overwrite? [Y/N]:")
        obj.write("Y \n")
        '''
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def configure_port_state(self, port_no, port_state):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("interface Ten-GigabitEthernet 1/0/%s \n" % port_no)
        obj.write("%s \n" % port_state)
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def configure_port_duplex_mode(self, port_no, duplex_value):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("interface Ten-GigabitEthernet 1/0/%s \n" % port_no)
        obj.write("duplex %s \n" % duplex_value)
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)

    def configure_port_speed(self, port_no, speed):
        obj = telnetlib.Telnet(self.switch_ip)
        obj.read_until("login: ")
        obj.write(self.switch_user + "\n")
        obj.read_until("Password: ")
        obj.write(self.switch_pw + "\n")
        obj.write("sys \n")
        obj.write("interface Ten-GigabitEthernet 1/0/%s \n" % port_no)
        obj.write("speed %s \n" % speed)
        obj.write("quit \n")
        obj.write("quit \n")
        obj.write("quit \n")
        ret = obj.read_all()
        log._info(ret)


if __name__ == '__main__':
    p = config_parser.ConfigParser('testcase\ConfigMgr.xml')
    p.parse_xml()
    p.store_xml_data()
    lista = []
    for net in p.network_switches_list:
        for vlan in net.vlans:
            vlan_dict = vlan.attrib
            vlan_dict['name'] = vlan.tag
            # print vlan_dict
            lista.append(vlan_dict)
    for i in lista:
        untagged_ports = i["UntaggedPorts"]
        vlan_id = i["ID"]
        tagged_ports = i["TaggedPorts"]
        s = SwitchCfg("172.24.92.243", "root", "password", "test", "test")
        s.create_vlan(vlan_id)

# s = SwitchCfg("172.24.92.243", "root", "password")
    # s.upload_switch_config_file_to_tftp_server()
    # s.download_switch_config_file_from_switch()
    # if(win32serviceutil.QueryServiceStatus('SolarWinds TFTP Server')[1])==4:
        # print "TFTP service is already running"
    # else:
        # win32serviceutil.StartService('SolarWinds TFTP Server')
        # print "TFTP server is not running"
        # print "Starting TFTP server"
        # time.sleep(5)
        # if(win32serviceutil.QueryServiceStatus('SolarWinds TFTP Server')[1])==4:
        # print "Successfully started TFTP service"
