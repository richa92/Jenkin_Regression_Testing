"""
config_parser.py
Parses input XML file and stores all values into configManager

Does not make attempts to validate XML, but will throw _warn if invalid values
are found.

Uses xml.etree.ElementTree library

"""


import xml.etree.ElementTree as ET  # library used to parse XML files
import os.path  # used for directory concatenation of command line argument
import custom_logging as log
import hw_objects
import fw_flasher
import socket
import re
import custom_exceptions as err
import device_discovery
# from RoboGalaxyLibrary.configmgr import hw_objects


class ConfigParser(object):

    """
    This class is intended to parse XML for values and attributes
    """

    def __init__(self, xml_file):
        """
        xml_file -  full path of XML file
        """
        # Old code which allowed input in format of testcase\<filename>.xml
        # _current_directory = os.getcwd()
        # fullpath = os.path.join(_current_directory, xml_file)
        # fullpath = fullpath.replace('[', '').replace(']', '').replace("'", "")
        fullpath = xml_file.replace('[', '').replace(']', '').replace("'", "")
        self.fullpath = os.path.normpath(fullpath)
        self.san_switches_list = []
        self.network_switches_list = []
        self.storages_list = []
        self.rack_list = []
        self.hydrogen_list = []
        self.altair_list = []
        self.vsphere_list = []
        self.oa_list = []
        self.vc_list = []
        self.firmware_list = []
        # self.ilo_list = []
        self.tree = None
        self.root = None

    def parse_xml(self):
        """
        Parses XML.  Returns:
            - True if successful
            - False if XML is malformed.
        """
        try:
            self.tree = ET.parse(self.fullpath)
            self.root = self.tree.getroot()
            return True
        except:
            log._warn("Failed to parse XML, check XML Schema for errors")
            return False

    def store_xml_data(self):
        """
        stores objects in respective lists
        # """
        try:
            switches = self.root.find("Switches")
            storages = self.root.find("Storages")
            racks = self.root.find("Racks")
            hydrogen = self.root.find("Hydrogen")
            altair = self.root.find("Altair")
            oa = self.root.find("OA")
            vc = self.root.find("VC")
            firmware = self.root.find("Firmware")
            vsphere = self.root.find("vSphere")
            # ilo = self.root.find("iLO")

            # Switches
            san_switches = switches.find("SAN_Switches")
            network_switches = switches.find("Network_Switches")
            for san_switch in san_switches:
                log._info("Reading SAN switch %s:%s..." %
                          (san_switch.tag, san_switch.attrib['Name']))
                try:
                    obj = hw_objects.SanSwitchObject(san_switch)
                except:
                    raise err.ObjectError(san_switch.tag)
                if validate_object_attributes(obj):
                    self.san_switches_list.append(obj)
                    log._info("SUCCESS: SAN switch object stored")
                else:
                    log._warn(err.INVALID_OBJECT_WARNING % san_switch.tag)

            for network_switch in network_switches:
                log._info("Reading network switch %s:%s..." %
                          (network_switch.tag, network_switch.attrib['Name']))
                try:
                    obj = hw_objects.NetworkSwitchObject(network_switch)
                except:
                    raise err.ObjectError(san_switch.tag)
                if validate_object_attributes(obj):
                    self.network_switches_list.append(obj)
                    log._info("SUCCESS: Network switch object stored")
                else:
                    log._warn(err.INVALID_OBJECT_WARNING % network_switch.tag)
            # Storage
            for storage_obj in storages:
                log._info("Reading storage object %s:%s" %
                          (storage_obj.tag, storage_obj.attrib["Model"]))
                try:
                    obj = hw_objects.StorageObject(storage_obj)
                except:
                    raise err.ObjectError(storage_obj.tag)
                if validate_object_attributes(obj):
                    self.storages_list.append(obj)
                    log._info("SUCCESS: Storage object %s:%s stored" %
                              (obj.model, obj.name))
                else:
                    log._warn(err.INVALID_OBJECT_WARNING % storage_obj.tag)
            # Racks
            for rack in racks:
                log._info("Reading rack %s: Name = %s" %
                          (rack.tag, rack.attrib["Name"]))
                try:
                    obj = hw_objects.RackObject(rack)
                except:
                    raise err.ObjectError(rack.tag)
                if validate_object_attributes(obj):
                    self.rack_list.append(obj)
                    log._info("SUCCESS: Rack object %s stored" % (obj.name))
                else:
                    log._warn(err.INVALID_OBJECT_WARNING % rack.tag)

            # iLO
            # log._info("Reading %s" % ilo.tag)
            # try:
                # temp_obj = hw_objects.IloObject(ilo)
            # except:
                # raise err.ObjectError(ilo.tag)
            # if validate_object_attributes(temp_obj):
                # self.ilo_list.append(temp_obj)
                # log._info("SUCCESS: iLO object %s stored" % ilo.tag)
            # else:
                # log._warn(err.INVALID_OBJECT_WARNING % "iLO")

            # OA
            log._info("Reading %s" % oa.tag)
            try:
                temp_obj = hw_objects.OaObject(oa)
            except:
                raise err.ObjectError(oa.tag)
            if validate_object_attributes(temp_obj):
                self.oa_list.append(temp_obj)
                log._info("SUCCESS: OA object %s stored" % oa.tag)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % "OA")

            # VC
            log._info("Reading %s" % vc.tag)
            try:
                temp_obj = hw_objects.VcObject(vc)
            except:
                raise err.ObjectError(vc.tag)
            if validate_object_attributes(temp_obj):
                self.vc_list.append(temp_obj)
                log._info("SUCCESS: VC object %s stored" % vc.tag)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % "VC")

            # Firmware Update Details
            log._info("Reading firmware details")
            # try:
            obj = hw_objects.FirmwareObject(firmware)
            # except:
            # raise err.ObjectError(firmware.tag)
            if validate_object_attributes(obj):
                self.firmware_list.append(obj)
                log._info(
                    "SUCCESS: Firwmare object with OA_IP:%s stored" %
                    obj.oa_ip)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % firmware.tag)

            # for vsphere element in vSphere:
            log._info("Reading %s" % vsphere.tag)
            try:
                temp_obj = hw_objects.VSphereObject(vsphere)
            except:
                raise err.ObjectError(vsphere.tag)
            if validate_object_attributes(temp_obj):
                self.vsphere_list.append(temp_obj)
                log._info("SUCCESS: vSphere object %s stored" % temp_obj.tag)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % vsphere.tag)

            # Altair & Hydrogen
            # for hydrogen_element in hydrogen:
            log._info("Reading %s" % hydrogen.tag)
            try:
                temp_obj = hw_objects.HydrogenObject(hydrogen)
            except:
                raise err.ObjectError(hydrogen.tag)
            if validate_object_attributes(temp_obj):
                self.hydrogen_list.append(temp_obj)
                log._info("SUCCESS: Hydrogen object %s stored" % temp_obj.tag)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % hydrogen.tag)

            # for altair_element in altair:
            log._info("Reading %s" % altair.tag)
            try:
                temp_obj = hw_objects.AltairObject(altair)
            except:
                raise err.ObjectError(altair.tag)
            if validate_object_attributes(temp_obj):
                self.altair_list.append(temp_obj)
                log._info("SUCCESS: Altair object %s stored" % temp_obj.tag)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % altair.tag)

            # Firmware Update Details
            log._info("Reading firmware details")
            try:
                obj = hw_objects.FirmwareObject(firmware)
            except:
                raise err.ObjectError(firmware.tag)
            if validate_object_attributes(obj):
                self.firmware_list.append(obj)
                log._info(
                    "SUCCESS: Firwmare object with OA_IP:%s stored" %
                    obj.oa_ip)
            else:
                log._warn(err.INVALID_OBJECT_WARNING % firmware.tag)
            return True
        except:
            log._warn("Failed to store XML date")
            return False

    def store_san_switch_data(self):
        # Switches
        switches = self.root.find("Switches")
        san_switches = switches.find("SAN_Switches")
        for san_switch in san_switches:
            log._info("Reading SAN switch %s" % (san_switch.attrib['Name']))
            try:
                obj = hw_objects.SanSwitchObject(san_switch)
            except:
                raise err.ObjectError(san_switch.tag)
            if validate_object_attributes(obj):
                self.san_switches_list.append(obj)
                log._info("SUCCESS: SAN switch object stored")
            else:
                log._warn(err.INVALID_OBJECT_WARNING % san_switch.tag)


def validate_object_attributes(object):
    """
    Checks if the passed object has certain parameters defined, else it is
    ignored and the Parser will not store it in its list

    Returns True if object attributes are valid, else False.

    """
    # first check to see if ip address is valid for listed objects using check_ipv4
    # and check_ipv6 [currently not implemented]
    if any([isinstance(object, hw_objects.SanSwitchObject),
            isinstance(object, hw_objects.NetworkSwitchObject),
            isinstance(object, hw_objects.StorageObject),
            isinstance(object, hw_objects.HydrogenObject),
            isinstance(object, hw_objects.AltairObject),
            isinstance(object, hw_objects.OaObject),
            isinstance(object, hw_objects.VcObject),
            isinstance(object, hw_objects.VSphereObject),
            isinstance(object, hw_objects.VSphereObject),
            ]):
        if not check_ipv4(object.ip_address):
            # POSSIBLY USE IPV6 [NOT IMPLEMENTED]
            # if any([isinstance(object, hw_objects.SanSwitchObject),
                    # isinstance(object, hw_objects.NetworkSwitchObject),
                    # isinstance(object, hw_objects.StorageObject)]):
                # log._debug("%s ipv4 invalid, attempting to use ipv6..."%object)
            # if not check_ipv6(object.attrib['IPv6Address']:
                # return False
            # else:
            log._warn("Invalid ipv4 address for %s: %s" %
                      (object.tag, object.ip_address))
            return False
        else:  # if IP is valid, check if pingable
            if not device_discovery.ping_ip(object.ip_address):
                log._warn("IP not reachable in %s" % object.tag)
                return False
        if isinstance(object, hw_objects.VSphereObject):
            if not all([object.password, object.username]):
                log._warn("Username or password not defined for %s" %
                          object.tag)
                return False
        if any([isinstance(object, hw_objects.SanSwitchObject),
                isinstance(object, hw_objects.NetworkSwitchObject),
                isinstance(object, hw_objects.StorageObject),
                ]):
            # check to see if name, username exist for storage, switch
            if not all([object.name, object.username, object.model]):
                log._warn(
                    "Name, username, or model not defined for %s" % object.tag)
                return False
        # elif isinstance(object, hw_objects.HydrogenObject):
            # if not all([object.xmgr, object.hc_dict, object.h3c_switch]):
                # log._warn("Incomplete Hydrogen details, check XML")
        # elif isinstance(object, hw_objects.AltairObject):
            # if not all([object.virtualhost_dict, object.mediaserver_dict]):
                # log._warn("Incomplete Altair details, check XML")
        return True

    # ________________SPECIAL CASES_____________________
    # rack objects
    elif isinstance(object, hw_objects.RackObject):
        if not all([object.name, object.servers]):
            log._warn("Incomplete Rack definition: missing name or servers")
            return False
        else:
            return True

    # server objects
    elif isinstance(object, hw_objects.ServerObject):
        if not all([object.ilo_ip, object.ilo_un]):
            log._warn("Incomplete iLO definition: missing IP or username")
            return False
        else:
            return True

    # Firmware objects
    elif isinstance(object, hw_objects.FirmwareObject):
        if not all([object.oa_ip,
                    object.oa_user,
                    object.vc_user,
                    object.vc_firmware_location]):
            log._warn(
                "Incomplete Firmware definition: missing required parameters")
            return False
        if not check_ipv4(object.oa_ip):
            log._warn(
                "Invalid IP, please check XML for Firmware details for correctness")
            return False
        if not device_discovery.ping_ip(object.oa_ip):
            log._warn("IP not reachable in %s" % object.tag)
            return False
        else:
            return True

    # elif isinstance(object, hw_objects.NetworkSwitchObject):
        # if not check_ipv4(object.ip_address):
            # POSSIBLY USE IPV6 [NOT IMPLEMENTED]
            # if any([isinstance(object, hw_objects.SanSwitchObject),
            # isinstance(object, hw_objects.NetworkSwitchObject),
            # isinstance(object, hw_objects.StorageObject)]):
            # log._debug("%s ipv4 invalid, attempting to use ipv6..."%object)
            # if not check_ipv6(object.attrib['IPv6Address']:
            # return False
            # else:
            # log._warn("Invalid ipv4 address for %s: %s" % (object.tag, object.ip_address))
            # return False

        # else: #if IP is valid, check if pingable
            # if not device_discovery.ping_ip(object.ip_address):
            # log._warn("IP not reachable in %s" % object.tag)
            # return False
    else:
        log._error(
            "FATAL INTERNAL ERROR: OBJECT NOT RECOGNIZED, PLEASE REPORT")
        log._debug("Unrecognized object: %s" % object)
        return False


def check_ipv6(address):
    #  socket.inet_pton(socket_family, address)
    pass


def check_ipv4(address):
    """
    Checks ipv4 address to see if valid.
    Returns True if valid ipv4, False if not.
    """
    try:
        socket.inet_aton(address)
        return True
    except socket.error:
        return False


def check_wwn(wwn):
    """
    Uses regular expressions to validate WWN
    Returns True if valid WWN, False if not.
    """
    wwn_reg_expr = "^([0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f])$"
    matched_val_list = re.compile(wwn_reg_expr, re.IGNORECASE).findall(wwn)
    if(len(matched_val_list) > 0):
        log._debug("Given wwn number %s is a valid WWN number" % wwn)
        return True
    else:
        log._debug("Given wwn number %s is invalid WWN number" % wwn)
        return False
