#!/usr/bin/python

'''
NAME

reset5900Switch ( -D <DL-system-ip> -U <DL-user> -P <DL-password> | -p <port>
      -i <switch-IP> ) [ -C <config-file> -R <reboot:False> -S <save:False> ]

DESCRIPTION

Reboot a 5900 switch and set the switch configuration for Fusion use.
If the DL system IP option (-D) is given, use the CRM Java script on
the DL server to do the reset and setup.

With the port option (-p), the script connects to the Las Colinas
serial console port switch and the serial port indicated.  The switch
IP is required (-i) either on the command line or in the configuration
file (-C).  The switch is *not* rebooted unless the reboot option is
specified (-R) and the configuration is *not* saved unless the save
option is specified (-S).  Command line arguments take precedence
over any data in the configuration file.

This option assumes the Java script and configuration file are
installed on the server.  This option causes all the other options to
be ignored.

'''

import re
import argparse
import time
from argparse import ArgumentParser
from telnetlib import Telnet
from SSHLibrary import library

# Config file defaults
config = {
    'hostname': False,
    'username': 'Administrator',
    'password': 'hpvse123',
    'mask': '255.255.240.0',
    'timezone': 'CDT',
    'preferedEncryption': 'rsa',
    'ntpserverIP': '16.110.135.123',
    'defaultGateway': '0.0.0.0'}

# "Virtualize" the print command


def pprint(text):
    print text

if __name__ != '__main__':
    from RoboGalaxyLibrary.utilitylib import logging
    vprint = logging._log
else:
    vprint = pprint

ctld = '\x04'
ctlz = '\x1A'

#
#  Run reset/setup with DL server connected to serial port.
#
#  Input: dl_ip	The IP of the DL server
#


def reset_5900_dl(dl_ip, dl_user='root', dl_pw='hpvse123'):

    assert dl_ip, "No DL IP given."

    dl_user = str(dl_user)
    dl_pw = str(dl_pw)
    ssh = library.SSHLibrary(timeout=5, prompt='#')
    ssh.open_connection(dl_ip)
    ssh.login(dl_user, dl_pw)
    ssh.write('cd /root/javarundir')
    ssh.read_until_prompt()
    ssh.write('ls')
    lsout = ssh.read_until_prompt()
    file = re.compile('.*switchconnectionproperties.properties.*')
    for l in lsout.split('\n'):
        if file.match(l):
            break
        else:
            assert False, 'No switchconnectionproperties.properties file found'

    # For possible future write of the properties file...
    #
    # ssh.write( 'cat > switchconnectionproperties.properties.dvt' )
    # ssh.write( 'username=' + config['username'] )
    # ssh.write( 'password=' + config['password'] )
    # ssh.write( 'hostname=' + sw_ip )
    # ssh.write( 'mask=' + config['mask'] )
    # ssh.write( 'timezone=' + config['timezone'] )
    # ssh.write( 'javatimezone=America/Chicago' )
    # ssh.write( 'preferedEncryption=' + config['preferedEncryption'] )
    # ssh.write( 'ntpserverIP=' + config['ntpserverIP'] )
    # ssh.write( 'defaultGateway=0.0.0.0' )
    # ssh.write( ctld )
    # ssh.read_until_prompt()

    ssh.set_client_configuration(timeout=240)
    vprint('\nStarting java script...\n')
    ssh.write(
        'java -cp HydrogenConfigurationUtilities.jar hydrogenconfigurationreset.HydrogenConfigurationResetUtility /root/javarundir')
    ssh.read_until(
        '>>>>REBOOTING INTERCONNECT THIS WILL TAKE ABOUT 3 MINUTES COFFEE ANYONE')
    ssh.read_until('>>>>ENTERING SYSTEM VIEW')
    ssh.read_until_prompt()
    ssh.close_connection()


#
#  Run the reset/setup through the console switch serial port.
#
#  Input:	port		The console switch serial port
#        	sw_ip		The 5900 switch IP (to be set)
#               reboot          Reboot or not
#               save		Save the config or not
# 	        port_server	Optional: The IP of the serial console switch
# 	        server_user	Optional: Serial console switch user name
# 	        server_pw	Optional: Serial console switch password
#

def reset_5900_direct(
        port,
        sw_ip,
        reboot=True,
        save=True,
        port_server='inf15-con.rsn.hp.com',
        server_user='Admin',
        server_pw='Admin'):

    # Robot fixups
    port = int(port)
    sw_ip = str(sw_ip)
    reboot = int(reboot)
    save = int(save)

    y, mo, d, h, mi, s, wd, yd, isd = time.gmtime()
    # Pre reboot command
    pre_boot = ('delete /unreserved ".cfg"', 'delete /unreserved "*.mdb"')
    # Post reboot command											# Sync with CRM (Pat)
    post_boot = ('clock datetime %02i:%02i:00 %02i/%02i/%i' %
                 (h, mi, mo, d, y), '')  # 2] Change time--set time
    # System view commands
    syscmds = ('sysname HP',  # 1] Change device name
               'ntp-service enable'
               'ntp-service unicast-server ' + config['ntpserverIP'],
               # 2] Change time--andjust for central time
               'clock timezone ' + config['timezone'] + ' minus 05:00:00',
               'ssh server enable',  # 5] Enable ssh
               # 6] Create ssh user
               'ssh user ' +
               config['username'] +
               ' service-type all authentication-type password',
               # 8] Create local keys
               'public-key local destroy ' + config['preferedEncryption'],
               # 8] Create local keys
               'public-key local create  ' + config['preferedEncryption'],
               'sftp server enable',  # 9] Enable sftp
               'file prompt quiet')									# 10] Place console in quiet mode
    # Management port
    mgt_inf = (
        'interface M-GigabitEthernet 0/0/0',
        'ip address ' +
        sw_ip +
        ' ' +
        config['mask'],
        'ipv6 address auto link-local')  # 3] Set static IP
    # User
    local_user = (
        'local-user Administrator',
        'service-type telnet',
        'service-type ssh',
        'authorization-attribute work-directory flash:/',
        'authorization-attribute user-role network-admin',
        'password simple ' +
        config['password'])  # 4] Create local user Administrator
    # VTY interfaces
    # 7] Enable vty interface to allow ssh
    vty_inf = ('user-interface vty', 'authentication-mode scheme')

    assert port, "No serial console switch port given."
    assert sw_ip, "No 5900 switch IP given."

    tn = Telnet(port_server)
    vprint(tn.read_until('Username:', timeout=10))
    tn.write(server_user + '\r')
    vprint(tn.read_until('Password:', timeout=10))
    tn.write(server_pw + '\r')
    vprint(tn.read_until('Complete', timeout=10))

    tn.write('connect ' + str(port))
    vprint(tn.read_until('Port:', timeout=10))
    tn.write('\r')

    index = tn.expect(['<HP>', '[HP]'])
    if index[0] == 0:
        pass
    elif index[0] == 1:
        tn.write(ctlz)
        vprint(tn.read_until('<HP>', timeout=10))
    else:
        raise EOFError

    for command in pre_boot:
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('<HP>', timeout=10))

    if reboot:
        vprint("Reboot requested: REBOOTING switch and sleeping for 3 mins...")
        vprint('***' + 'reboot')
        tn.write('reboot' + '\r')
        time.sleep(180)
        tn.write('reboot' + '\r')
        vprint("Waiting for <HP> prompt...")
        vprint(tn.read_until('<HP>', timeout=180))

    for command in post_boot:
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('<HP>', timeout=10))

    tn.write('system-view\r')
    vprint(tn.read_until('[HP]', timeout=10))

    key_destr = re.compile('public-key local destroy.*')
    key_creat = re.compile('public-key local create.*')
    for command in syscmds:
        vprint('***' + command)
        tn.write(command + '\r')
        if key_destr.match(command):
            vprint(tn.read_until('[Y/N]:', timeout=10))
            tn.write('Y\r')
        elif key_creat.match(command):
            vprint(tn.read_until('default = 1024]:', timeout=60))
            tn.write('\r')
        vprint(tn.read_until('[HP]', timeout=10))

    for command in mgt_inf:
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('[HP-M-GigabitEthernet0/0/0]', timeout=10))

    tn.write('quit\r')
    vprint(tn.read_until('[HP]', timeout=10))

    for command in local_user:
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('[HP-luser-manage-Administrator]', timeout=10))
    tn.write('quit\r')
    vprint(tn.read_until('[HP]', timeout=10))

    n_vtys = 3
    for i_vty in range(1, n_vtys + 1):
        command = vty_inf[0] + ' ' + str(i_vty)
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('[HP-ui-vty', timeout=10))
        for command in vty_inf[1:]:
            vprint('***' + command)
            tn.write(command + '\r')
            vprint(tn.read_until('[HP-ui-vty', timeout=10))
        tn.write('quit\r')
        vprint(tn.read_until('[HP]', timeout=10))

    tn.write(ctlz)
    vprint(tn.read_until('<HP>', timeout=10))

    if save:
        vprint('Save requested: SAVING switch configuration')
        command = 'save'
        vprint('***' + command)
        tn.write(command + '\r')
        vprint(tn.read_until('[Y/N]:', timeout=10))
        tn.write('Y\r')
        vprint(tn.read_until('enter key):', timeout=10))
        tn.write('\r')
        vprint(tn.read_until('[Y/N]:', timeout=30))
        tn.write('Y\r')
        vprint(tn.read_until('<HP>', timeout=10))

    tn.write(ctld)
    vprint(tn.read_until('>', timeout=10))
    tn.write('quit\r')
    vprint(tn.read_until('Terminated', timeout=10))
    vprint(tn.read_all())


# main if called as a script

if __name__ == '__main__':

    parser = ArgumentParser()
    parser.add_argument('-p', dest='port', default=False)
    parser.add_argument('-i', dest='sw_ip', default=False)
    parser.add_argument('-g', dest='gate', default=False)
    parser.add_argument('-n', dest='ntps', default=False)
    parser.add_argument('-C', dest='conf', default=False)
    parser.add_argument('-D', dest='dl_ip', default=False)
    parser.add_argument('-U', dest='dl_user', default='root')
    parser.add_argument('-P', dest='dl_pw', default='hpvse123')
    parser.add_argument(
        '-R', dest='reboot', default=False, action='store_true')
    parser.add_argument(
        '-S', dest='save', default=False, action='store_true')
    args = parser.parse_args()

    if args.conf:
        conff = open(args.conf)
        for line in conff:
            key, val = line.split('=')
            val = val.strip('\n')
            config.update({key: val})

        conff.close()
        print 'Configuration: \n', config

    args.sw_ip = args.sw_ip or config['hostname']

    if args.dl_ip:

        reset_5900_dl(args.dl_ip, args.dl_user, args.dl_pw)

    else:

        reset_5900_direct(args.port, args.sw_ip, args.reboot, args.save)
