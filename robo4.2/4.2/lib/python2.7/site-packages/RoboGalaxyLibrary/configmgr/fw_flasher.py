from vulcanlib import ha_library
import os
import xml.etree.ElementTree as et
# import sys
import time
import telnetlib
import custom_logging as log
import platform
import config_parser
import hw_objects


class EnclFwFlasher:

    def __init__(self, login_ip, login_username, login_pw):
        """
        Class for Onboard Administrator
        oa_ip           -->  IP address of OA
        oa_username     -->  OA username
        oa_password     -->  OA password
        """
        self.oa_ip = login_ip
        self.oa_username = login_username
        self.oa_password = login_pw

    def set_spp_url_for_firmware_management(self, url):
        """
            Description : This function sets SPP url to OA
            Params      : url --> http url where SPP iso is been served
            Usage       : set_spp_url_for_firmware_management("http://172.24.36.85/SPP2013020.2013_0204.107.iso")
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set firmware management url " + url,
                "Enclosure Firmware Management URL set to")
            if output:
                log._info("Successfully set the SPP ISO URL")
            else:
                log._warn("Error setting SPP ISO URL")
        except:
            log._error("Unable to set Firmware management URL")

    def enable_firmware_management(self):
        """
            Description : This function enables/disbale firmware management on OA based on "state" parameter
            Params      : state --> word enable/disable
            Usage       : enable_disable_firmware_management("enable/disable")
            Return      : output message from console interaction
        """
        try:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "enable firmware management")
            return output
        except:
            log._error("Unable to enable firmware management for enclosure")

    def disable_firmware_management(self):
        """
            Description : This function enables/disbale firmware management on OA based on "state" parameter
            Params      : state --> word enable/disable
            Usage       : enable_disable_firmware_management("enable/disable")
            Return      : output message from console interaction
        """
        try:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "disable firmware management")
            return output
        except:
            log._error("Unable to enable firmware management for enclosure")

    def enable_force_downgrade(self):
        """
            Description : This function is to enable force downgrade the firmware to lower versions on devices within the enclosure
            Usage       : enable_force_downgrade()
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set firmware management force downgrade enable",
                "Operation was successful.")
            if output:
                log._info("Force downgrade is enabled")
            else:
                log._warn("Failed to enable force downgrade")
        except:
            log._error("Unable to enable force downgrade")

    def set_firmware_management_policy(self):
        """
            Description : This function is to set firmware update policy when a blade is insrted into enclosure
            Usage       : set_firmware_management_policy()
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set firmware  management policy manual",
                "Enclosure Firmware Management policy set to manual update and discovery.")
            if output:
                log._info("Firmware management policy set to manual")
            else:
                log._warn("Firmware management policy falied")
        except:
            log._error("Unable to set firmware deployment policy")

    def select_bays_for_firmware_deployment(self):
        """
            Description : This function is to select the device for firmware upgrade
            Usage       : select_bays_for_firmware_deployment()
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "set firmware management BAYS_TO_INCLUDE Server 1-16",
                "Enclosure Firmware Management settings applied successfully.")
            if output:
                log._info("Server bay selection done")
            else:
                log._warn("server bay not selected")
        except:
            log._error("Unable to select Server Bay")

    def set_power_policy(self):
        """
            Description : This function is to set power policy while firmware update initiated
            Usage       : set_power_policy()
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "SET FIRMWARE MANAGEMENT POWER force",
                "Power policy successfully changed to FORCE.")
            if output:
                log._info("Server power policy applied successfully")
            else:
                log._warn("Server power policy not applied")
        except:
            log._error("Unable to apply Server power policy")

    def update_oa_firmware(self):
        """
            Description : This function is to initiate OA firmware update
            Usage       : update_oa_firmware()
            Return      : output message from console interaction
        """
        try:
            ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "Update Image force FW_ISO")
        except:
            log._error("Unable to run OA firmware update")

    def update_server_firmware(self, bay_no):
        """
            Description : This function is to initiate firmware update on individual servers
            params      : bay_no --> server bay number.
            Usage       : update_server_firmware('2')
            Return      : output message from console interaction
        """
        try:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "update firmware server %s" %
                bay_no)
            return output
        except:
            log._error("Unable to apply Server power policy")

    '''
    def check_server_firmware_update_log(self, bay_no):
        """
            Description : This function is to virfy firmware update status
            params      : bay_no --> server bay number.
            Usage       : check_server_firmware_update_log('2')
            Return      : output message from console interaction
        """
        try:
            output = ha_library.runOAcommands(self.oa_ip, self.oa_username, self.oa_password, "show firmware log SERVER %s" %bay_no,"Firmware Management successfully completed on blade")
            if output:
                print "firmware update successful"
                return output
            else:
                print "firmware update is still in progress"
                return output
        except:
            log._error("Unable to check firmware update on server")
    '''

    def record_ilo_firmware_details_and_return_bay_no(self, command):
        try:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip, self.oa_username, self.oa_password, command)
            ot1 = output.split("Device Bay:")
            temp_ilo_version_gen8 = []
            temp_ilo_version_gen7 = []
            bay_no_gen8 = []
            bay_no_gen7 = []
            temp = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.oa_ip,
                self.oa_username,
                self.oa_password,
                "show server names")
            no_of_servers = int(temp.split(':')[1].split(' ')[1]) + 1

            for j in range(1, no_of_servers):
                ilo_type = ot1[j].split("Discovered:")[1].split(
                    '\n')[5].split(' ')[0].strip().split('O')[1]
                if ilo_type == '4':
                    temp_ilo_version_gen8.append(
                        ot1[j].split("Discovered:")[1].split('\n')[5].split('4')[1].strip().split(' ')[0])
                    bay_no_gen8.append(ot1[j].split("Discovered:")[0].strip())
                elif ilo_type == '3':
                    temp_ilo_version_gen7.append(
                        ot1[j].split("Discovered:")[1].split('\n')[5].split('3')[1].strip().split(' ')[0])
                    bay_no_gen7.append(ot1[j].split("Discovered:")[0].strip())
            self.dict_info_gen8 = dict(zip(bay_no_gen8, temp_ilo_version_gen8))
            self.dict_info_gen7 = dict(zip(bay_no_gen7, temp_ilo_version_gen7))
        except:
            log._error("Unable to get ILO firmware details")

    def check_if_oa_requires_update(self, desired_fw_version):
        # TODO: this code only checks to see if the current firmware is less than 4.01,
        # but it should just try to set the firmware to 'desired_fw_version'
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.oa_ip, self.oa_username, self.oa_password, "show oa info")
        oa_frm = output.split('Manufacturer')[1].split(
            '\n')[1].split(' ')[3].strip()
        if oa_frm < '4.01':
            log._info("OA firmware needs to be updated")
            self.update_oa_firmware()
            log._info(
                "\n OA update is started, it takes few minutes. Please try connecting to OA after some times \n")
            log._info("it takes about 3 minutes to complete \n")
            time.sleep(210)
        else:
            log._info("OA firmware is up to date")

    def check_if_any_gen8_needs_firmware_update_and_return_bay_no(self):
        try:
            bay_needing_firmware_update_gen8 = []
            for bay_gen8 in self.dict_info_gen8.iterkeys():
                if self.dict_info_gen8[bay_gen8] < '1.30':
                    bay_needing_firmware_update_gen8.append(bay_gen8)
                else:
                    pass
            return bay_needing_firmware_update_gen8
        except:
            log._error("Unable to check Gen8 blades for firmware upgrade")

    def check_if_any_gen7_needs_firmware_update_and_return_bay_no(self):
        try:
            bay_needing_firmware_update_gen7 = []
            for bay_gen7 in self.dict_info_gen7.iterkeys():
                if self.dict_info_gen7[bay_gen7] < '1.61':
                    bay_needing_firmware_update_gen7.append(bay_gen7)
                else:
                    pass
            return bay_needing_firmware_update_gen7
        except:
            log._error("Unable to check G7 blades for firmware upgrade")

    def set_firmware_environment(self, url_to_iso):
        self.disable_firmware_management()
        # self.set_spp_url_for_firmware_management("http://172.24.36.85/SPP2013020.2013_0204.107.iso")
        self.set_spp_url_for_firmware_management(url_to_iso)
        self.enable_firmware_management()
        self.enable_force_downgrade()
        self.set_firmware_management_policy()
        self.select_bays_for_firmware_deployment()
        self.set_power_policy()

    def initiate_firmware_update(self, bay_info):
        for i in bay_info:
            log._info("firmware update is needed on server in bay %s " % i)
            self.update_server_firmware(i)

    def initiate_firmware_update_on_gen8_blades(self, bay_number):
        if len(bay_number) > 0:
            log._info(
                "\n There are few Gen8 servers needing firmware update \n")
            for i in bay_number:
                log._info(
                    " firmware update is needed on server in bay %s " % i)
                self.initiate_firmware_update(i)
        else:
            log._info("\n There are no Gen8 Server needing firmware update \n")

    def initiate_firmware_update_on_gen7_blades(self, bay_number):
        if len(bay_number) > 0:
            log._info("\n There are few G7 servers needing firmware update \n")
            for i in bay_number:
                log._info(
                    " firmware update is needed on server in bay %s " % i)
                self.initiate_firmware_update(i)
        else:
            log._info("\n There are no G7 servers needing firmware update \n")

    def check_for_vc_firmware_version(self, command):
        '''
        Descritpion: Get the firmware version on alll Virtual connect modules into a list
        params      : command -->command from function call

        Usage       : update_vc_firmware("Administrator", "BYCVNNTM", "c:\\vcfw375.bin")
        '''
        current_vc_firmware_version = []
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.oa_ip, self.oa_username, self.oa_password, command)
        no_vc_modules_present = output.split(
            'Interconnect Firmware Information')[1].count('HP VC') + 1
        for i in range(1, no_vc_modules_present):
            current_vc_firmware_version.append(
                output.split('Interconnect Firmware Information')[1].split('\n')[
                    i + 3].split('Module')[1].strip())
        return current_vc_firmware_version

    def update_vc_firmware(
            self,
            vc_user,
            vc_passwd,
            vc_firmware_file_path_with_file_name,
            vc_firmware):
        '''
        To update virtual connect firmware, we need to have virtual connect support utility installed on local machine.
        And also we need to have Virtaul Connect firmware .bin file copied to local machine.

        Description : This function is to update virtaul connect firmware using HP VCSU utility.
        params      : vc_user -->Virtaul connect user name.
                      vc_passwd --> Virtual connect password
                      vc_firmware_file_path_with_file_name --> Location of Virtual connect firmware file

        Usage       : update_vc_firmware("Administrator", "BYCVNNTM", "c:\\vcfw375.bin")
        Return      : output message from console interaction
        '''

        latest_vc_firmware = '4.10'
        if platform.architecture()[0] == '64bit':
            vcsu_installed_path = 'C:\Program Files (x86)\Hewlett-Packard Company\Virtual Connect Support Utility'
            os.environ["PATH"] += os.pathsep + vcsu_installed_path
        elif platform.architecture()[0] == '32bit':
            vcsu_installed_path = 'C:\Program Files\Hewlett-Packard Company\Virtual Connect Support Utility'
            os.environ["PATH"] += os.pathsep + vcsu_installed_path

        for i in vc_firmware:
            if i != latest_vc_firmware:
                firmware_update = True
            else:
                firmware_update = False

        if firmware_update:
            os.system(
                "vcsu.exe -a update -i " +
                self.oa_ip +
                " -u " +
                self.oa_username +
                " -p " +
                self.oa_password +
                " -l " +
                vc_firmware_file_path_with_file_name +
                " -vcu " +
                vc_user +
                " -vcp " +
                vc_passwd +
                " -q")
        else:
            log._info("firmware update on VC modules is not required")


class DLFwFlasher:

    def __init__(self):
        """
        Class for Gen8 DL servers
        """

    def initiate_firmware_update_on_gen8_dl_servers(self):
        saved_dir = os.getcwd()
        os.chdir('offline tool')
        _current_directory = os.getcwd()
        fullpath = os.path.join(_current_directory, "ILO.xml")
        fullpath = fullpath.replace('[', '').replace(']', '').replace("'", "")
        fullpath = os.path.normpath(fullpath)
        tree = et.parse(fullpath)
        root = tree.getroot()
        os.chdir(saved_dir)
        for device in root.findall('ILO'):
            ilo_ip = device.find('ip').text
            ilo_un = device.find('user').text
            ilo_pw = device.find('password').text
        if ilo_ip is not None and ilo_un is not None and ilo_pw is not None:
            log._info("\n Initiating firmware deployment on DL Gen8 Server \n")
            os.system("java -jar offlinetool.jar ILO.xml")
        else:
            log._warn(
                "\n ILO details not found or incomplete, hence skipping firmware update on DL server \n")


class SwitchFwFlasher:

    def __init__(self, login_ip, login_username, login_pw):
        """
        Class for Gen8 DL servers
        switch_ip           -->  IP address of OA
        switch_user     -->  OA username
        switch_pw     -->  OA password
        """

        self.switch_ip = login_ip
        self.switch_user = login_username
        self.switch_pw = login_pw

    def download_firmware_image_to_switch(self, command):
        download_firmware_on_switch = telnetlib.Telnet(self.switch_ip)
        download_firmware_on_switch.read_until("login: ")
        download_firmware_on_switch.write(self.switch_user + "\n")
        download_firmware_on_switch.read_until("Password: ")
        download_firmware_on_switch.write(self.switch_pw + "\n")
        # download_firmware_on_switch.write("sys \n")
        log._info(
            "Initializing switch firmware download on switch, it takes about 8-10 minutes...")
        log._info("Please wait")
        download_firmware_on_switch.write(command + " \n")
        download_firmware_on_switch.read_until("Overwrite it? [Y/N]:")
        download_firmware_on_switch.write("Y \n")
        download_firmware_on_switch.write("quit \n")
        download_firmware_on_switch.write("quit \n")
        # put_config_file.write("quit \n")
        ret = download_firmware_on_switch.read_all()
        print ret

    def initialize_firmware_update_on_switch(self, command):
        firmware_update = telnetlib.Telnet(self.switch_ip)
        firmware_update.read_until("login: ")
        firmware_update.write(self.switch_user + "\n")
        firmware_update.read_until("Password: ")
        firmware_update.write(self.switch_pw + "\n")
        # firmware_update.write("sys \n")
        firmware_update.write(command + " \n")
        firmware_update.read_until(" Continue? [Y/N]: ")
        firmware_update.write("Y \n")
        firmware_update.write("reboot \n")
        firmware_update.write("quit \n")
        # firmware_update.write("quit \n")
        ret = firmware_update.read_all()
        print ret


if __name__ == "__main__":

    p = config_parser.ConfigParser('testcase\ConfigMgr.xml')
    p.parse_xml()
    p.store_xml_data()
    for frm in p.firmware_list:
        print frm.bay_numbers

    """
    Below object reference and function calls are for reference while building config_manager.py.
    These will be deleted as soos as config_manager.py is ready.
    """
    '''
    f = EnclFwFlasher(frm.oa_ip,frm.oa_user,frm.oa_passwd)
    f.set_firmware_environment()
    f.check_if_oa_requires_update(frm.oa_firmware_command)
    f.record_ilo_firmware_details_and_return_bay_no(frm.server_firmware_command)
    bay_no_needing_firmware_update_gen8 = f.check_if_any_gen8_needs_firmware_update_and_return_bay_no()
    f.initiate_firmware_update_on_gen8_blades(bay_no_needing_firmware_update_gen8)
    bay_no_needing_firmware_update_gen7 = f.check_if_any_gen7_needs_firmware_update_and_return_bay_no()
    f.initiate_firmware_update_on_gen7_blades(bay_no_needing_firmware_update_gen7)
    vc_firmware_list = f.check_for_vc_firmware_version(frm.server_firmware_command)
    f.update_vc_firmware(frm.vc_user, frm.vc_passwd, frm.vc_firmware_location, vc_firmware_list)
    '''
    # g = DLFwFlasher("172.24.121.31","admin","admin123")
    # g.initiate_firmware_update_on_gen8_dl_servers()
    # s = SwitchFwFlasher(frm.network_switch_ip, frm.network_switch_user, frm.network_switch_passwd)
    # s.download_firmware_image_to_switch(frm.nework_switch_firmware_download_command)
    # s.initialize_firmware_update_on_switch(frm.network_swtich_firmware_update_command)
