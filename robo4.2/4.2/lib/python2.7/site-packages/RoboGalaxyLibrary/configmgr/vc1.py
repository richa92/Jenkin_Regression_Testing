

# from RoboGalaxyLibrary.configmgr.vulcanlib import ha_library
from vulcanlib import ha_library
import custom_logging as log


class VC:

    """
Class for Virtual Connect
    vc_ip           -->  IP address of OA
    vc_username     -->  OA username
    vc_password     -->  OA password
"""

    def __init__(self, login_ip, login_username, login_pw):
        self.vc_ip = login_ip
        self.vc_username = login_username
        self.vc_password = login_pw

    def delete_domain(self):
        """
                Descirption : This function deletes VC domain present in  VC module

                Usage       : delete_domain(self)
                Return      : return true if there is no exception else return false
        """
        try:
            output = False
            output = ha_library.runOAcommands(
                self.vc_ip,
                self.vc_username,
                self.vc_password,
                "delete domain -quiet",
                "SUCCESS: Domain deleted")
            if output:
                ha_library.closeConnection()
                return "Domain delete successful"
            else:
                ha_library.closeConnection()
                return "Domain delete is not successful"
        except:
            raise Exception("Failed to delete VC Domain")

    def import_enclosure(self, OAusername, OApassword):
        """
                Descirption : This function imports an enclosure to VC domain
                Params      :
                                        OAusername   -->  OA user name of enclosure to be added
                                        OApassword   -->  OA password of enclosure to be added
                Usage       : import_enclosure(self,"OA user name","OA password")
                Return      : return true if there is no exception else return false
        """
        try:
            output1 = False
            output1 = ha_library.runOAcommands(
                self.vc_ip,
                self.vc_username,
                self.vc_password,
                "import enclosure username=%s password=%s" %
                (OAusername,
                 OApassword),
                "SUCCESS: Enclosure imported")
            if output1:
                return "Import successful"
            else:
                return "Import not successful"
        except:
            raise Exception("Failed to Import enclosure")

    def add_vc_user(self, VCusername, VCpassword):
        """
                Descirption : This function Adds a user specified in XML with adiministrator previlege
                Params      :
                                        VCusername -->  VC user name to be added
                                        VCpassword -->  password for user to be added
                Usage       : delete_domain(self, "VC user to be added", "password")
                Return      : return true if there is no exception else return false
        """
        try:
            output = False
            output = ha_library.runOAcommands(
                self.vc_ip,
                self.vc_username,
                self.vc_password,
                "add user %s password=%s Privileges=*" %
                (VCusername,
                 VCpassword),
                "SUCCESS: User added :")
            if output:
                return "user added"
            else:
                return "user not added"
        except:
            raise Exception("Failed to create user")

    def add_networks(self, netName):
        """
                Descirption : This function Adds networks to the VC domain
                Params      :
                                                netName   -->	 Network name listed in xml
                Usage       : add_networks(self, "netName")
                Return      : return true if there is no exception else return false
        """
        try:
            output = False
            output = ha_library.runOAcommands(
                self.vc_ip,
                self.vc_username,
                self.vc_password,
                "add network %s" %
                netName,
                "SUCCESS: Network added :")
            if output:
                return "network added"
            else:
                return "network not added"
        except:
            raise Exception("Failed to add network")

    def set_mac_addr_default_type(self, macAddrType):
        """
                Descirption : This function Sets MAC address type to be used
                Params      :
                                          macAddrType   -->	 Type such as factory default or hp defined
                Usage       : add_networks(self, "macAddrType")
                Return      : return true if there is no exception else return false
        """
        try:
            output = False
            output = ha_library.runOAcommands(
                self.vc_ip,
                self.vc_username,
                self.vc_password,
                "set domain MacType=%s" %
                macAddrType,
                "SUCCESS: Domain settings modified")
            if output:
                return "Mac Type modified successfully"
            else:
                return "Mac type was not modified"
        except:
            raise Exception("Failed to change Mac Type for the domain")
