"""
iLO.py contains methods that are used by configManager.py to
configure iLO settings such as user administration and obtain
information on the server.
"""

from vulcanlib import ha_library
import custom_logging as log
import subprocess
import custom_exceptions as err
import re

MPCONFIG = 'utilities\mpconfig.jar'


class Ilo(object):

    """
    iLO class containing CLI methods
    """

    def __init__(self, ip_address, username, password):
        self.mgt_ip = ip_address
        self.mgt_username = username
        self.mgt_pw = password

    def add_user(self, username, password, nickname=None, group=None):
        """
            Description: This function adds a user to the specified iLO console
            Params:
                  username     -->  username of new user to add
                  password     -->  password of new uer
                  nickname     -->  nickname of new user
                  group        -->  group of new user (see XML environment file)
            Usage       : addUser(username, password, group)
            Return      : return output from ssh interaction
        """
        if nickname and group:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "create /map1/accounts1 username=%s password=%s name=%s group=%s" %
                (username,
                 password,
                 nickname,
                 group))
        elif nickname and not group:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "create /map1/accounts1 username=%s password=%s name=%s" %
                (username,
                 password,
                 nickname))
        elif group and not nickname:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "create /map1/accounts1 username=%s password=%s group=%s" %
                (username,
                 password,
                 group))
        elif not group and not nickname:
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "create /map1/accounts1 username=%s password=%s" %
                (username,
                 password))
        else:
            log._error("iLO.py internal error in logic!!")
        clean_msg = _get_command_status(output)
        return output  # clean_msg

    def add_user_2(self, username, password):
        """
            This function is a backup to add_user.
            Uses java "mpconfig.jar" instead of vulcanlib ssh call.
            Slower compared to add_user, so will remain as a backup.
            Does not take nickname or group argument.
        """
        output = subprocess.call(['java',
                                  '-classpath',
                                  MPCONFIG,
                                  'mpconfig',
                                  '--host',
                                  self.mgt_ip,
                                  '--username',
                                  self.mgt_username,
                                  '--password',
                                  self.mgt_pw,
                                  '--cmd',
                                  'add-user-account',
                                  username,
                                  password])
        return output

    def add_user_w_license(
        self,
        username,
        password,
        lic,
        nickname='',
        group='',
    ):
        """
            Description: This function adds a user to the specified iLO console but takes on an additional parameter for a license
            Params:
                  username     -->  username of new user to add
                  password     -->  password of new uer
                  lic          -->  license of user (see iLO Manual for more info..)
            Optional:
                  nickname     -->  nickname of new user
                  group        -->  group of new user (see XML environment file)
            Usage       : addUser(self, self.mgt_ip, self.mgt_username, self.mgt_pw, username, password, group)
            Return      : return output from the attempt to add the user
        """
        ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "set /map1 license=%s" %
            (lic))
        output = add_user(username, password, nickname, group)
        if output:
            return output
        else:
            return False

    def delete_user(self, username):
        """
            Description: This function deletes a user from the specified iLO console
            Params:
                username    -->  username of user to be deleted
            Usage:
                  deleteUser('daniel')
            Return: return output from the attempt to delete the user
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "delete /map1/accounts1/%s" %
            (username))
        # errorCode = processOutput(output)
        return output

    def modify_user(self, username, password):
        """
        Same as add_user but used to edit an existing user.
        Uses mpconfig.jar iLO open source package.
        Does not take nickname or group argument.
        """
        return_code = subprocess.call(['java',
                                       '-classpath',
                                       MPCONFIG,
                                       'mpconfig',
                                       '--host',
                                       self.mgt_ip,
                                       '--username',
                                       self.mgt_username,
                                       '--password',
                                       self.mgt_pw,
                                       '--cmd',
                                       'modify-user-account',
                                       username,
                                       password])
        if return_code:
            log._warn("Failed to modify user,  user may not exist...")

    def list_all_users(self):
        """
        Uses mpconfig.jar iLO open source package.
        """
        # output = ha_library.execute_Remote_commands_iLO_and_return_output(self.mgt_ip,  self.mgt_username,  self.mgt_pw, "show")
        # errorCode = processOutput(output)
        return_code = subprocess.call(['java',
                                       '-classpath',
                                       MPCONFIG,
                                       'mpconfig',
                                       '--host',
                                       self.mgt_ip,
                                       '--username',
                                       self.mgt_username,
                                       '--password',
                                       self.mgt_pw,
                                       '--cmd',
                                       'list-user-accounts'])
        if return_code:
            log._warn("Failed to list users,  check input XML file...")

    def check_power(self):
        """
        Returns either ON or OFF
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.self.mgt_username,
            self.mgt_pw,
            "show /system1 enabledstate")
        result = _find_value_by_keyword(output, "enabledstate")
        if not result:
            log._warn("Failed to check power...")
            log._debug("output = %s" % output)
            log._debug("result = %s" % result)
            raise ValueError
        else:
            if result == "enabled":
                output = "Power:ON"
            else:
                output = "Power:OFF"
        return output

    def check_uid_light(self):
        """
        Returns either ON or OFF
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.self.mgt_username,
            self.mgt_pw,
            "show /system1/led1 enabledstate")
        result = _find_value_by_keyword(output, "enabledstate")
        if not result:
            log._warn("Failed to check UID light...")
            log._debug("output = %s" % output)
            log._debug("result = %s" % result)
            raise ValueError
        else:
            if result == "enabled":
                output = "ON"
            else:
                output = "OFF"
        return output

    def power_on_server(self):
        """
        Returns either ON if successful or OFF if unsuccessful
        Returns -1 if command failed to send
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip, self.self.mgt_username, self.mgt_pw, "start /system1")
        result = _find_value_by_keyword(output, "status_tag")
        if not result:
            output = False
            log._warn("Failed to send the command")
            log._debug("output = %s" % output)
            log._debug("result = %s" % result)
            raise ValueError
        else:
            if result == "COMMAND COMPLETED":
                output = "ON"
            else:
                output = "OFF"
        return output

    def get_raw_xml_host_data(self):
        """
        Gets raw XML of host data.
        Inputs: None

        Uses mpconfig.jar iLO open source package.
        """
        return_code = subprocess.call(['java',
                                       '-classpath',
                                       MPCONFIG,
                                       'mpconfig',
                                       '--host',
                                       self.mgt_ip,
                                       '--username',
                                       self.self.mgt_username,
                                       '--password',
                                       self.mgt_pw,
                                       '--cmd',
                                       'get-host-data'])
        if return_code:
            log._warn("Failed to get Raw XML of host data...")

    def get_mac_addr(self):
        """
        Returns mac address of server.
        Inputs:  None

        Uses mpconfig.jar iLO open source package.
        """
        return_code = subprocess.call(['java',
                                       '-classpath',
                                       MPCONFIG,
                                       'mpconfig',
                                       '--host',
                                       self.mgt_ip,
                                       '--username',
                                       self.self.mgt_username,
                                       '--password',
                                       self.mgt_pw,
                                       '--cmd',
                                       'get-nics'])
        if return_code:
            log._warn(
                "Failed to get MAC addresses... Please check IP,  U/N,  & PW\n")

    def _get_bootsources(self):
        """
        Internal class method to retrieve the devices available to boot from
        """
        # try:
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "show system1/bootconfig1/bootsource1")
        bootorder = _find_value_by_keyword(output, "bootorder")
        if bootorder:
            bootsources = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "set system1/bootconfig1/bootsource1 bootorder=%s" %
                bootorder)
            bootsources_list = re.split('bootorder=[\d]', bootsources)
            # pretty_list = []
            bootsource_dict = {}
            for source in bootsources_list:
                try:
                    bootsource_dict[
                        re.search(
                            'bootsource(.+?)=',
                            source).group(1)] = re.search(
                        'BootFm(.+?) ',
                        source).group(1).lower()
                    # pretty_list.append(re.search('BootFm(.+?) ', source).group(1))
                except:
                    continue
            return bootsource_dict
            # return delete_repeats(pretty_list)
        else:
            log._debug(
                "Invalid command sent to iLO:  bootorder not found in output")
        # except:
            # raise err.SSHConnectionError("Failed to execute commands to iLO")

    def set_boot_order(self, bootorder_list):
        """
        order: list which contains the following possibilities in a given order:
            cd, floppy, usb, disk, network
        """
        boot_dict = self._get_bootsources()
        available_sources_list = delete_repeats(
            [boot_dict[key] for key in boot_dict])
        for source in bootorder_list:
            source = source.strip().lower()
            if source == 'usb':
                source = 'usbkey'
            if source not in available_sources_list:
                log._warn(
                    "Option '%s' in Bootorder list does not exist within iLO! Bootorder not set" %
                    (source))
                return False
        source_num = 1
        for source in bootorder_list:
            source = source.lower()
            if source == 'usb':
                source = 'usbkey'
            for key, value in boot_dict.iteritems():
                if source == value:
                    temp_key = key
            output = ha_library.execute_Remote_commands_iLO_and_return_output(
                self.mgt_ip,
                self.mgt_username,
                self.mgt_pw,
                "set system1/bootconfig1/bootsource%s bootorder=%s" %
                (temp_key,
                 source_num))
            log._info("Set Bootsource%s ('%s') to priority %d" %
                      (temp_key, source, source_num))
            source_num += 1
        log._info("Successfully set boot order to %s" %
                  (''.join(bootorder_list)))
        return self._get_bootsources()

    def reset_ilo(self):
        """
            Description: Resets iLO
            Usage:
                  boolean = ilo_instance.reset_ilo()
            Return: Boolean
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "reset /map1" %
            (username))
        return _verify_command_completed(output)

    def set_ilo_ip_address(self, new_ip_address, subnet):
        """
            Description: Sets iLO IP address to 'new_ip_address'
            Usage:
                  boolean = ilo_instance.set_ilo_ip_address('16.84.xx.xx')
            Return: Boolean
        """
        # should check first to make sure no DHCP enabled... can do this by calling show /map1/enetport1/lanendpt1/ipendpt1 and checking AddressOrigin=Static
        # also, check to make sure new_ip_address and subnet are valid
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "set /map1/enetport1/lanendpt1/ipendpt1 IPv4Address=%s subnet=%s" %
            (new_ip_address,
             subnet))
        return _verify_command_completed(output)

    def reset_server(self):
        """
            Description: Resets server
            Usage:
                  boolean = ilo_instance.reset_server()
            Return: Boolean
        """
        output = ha_library.execute_Remote_commands_iLO_and_return_output(
            self.mgt_ip,
            self.mgt_username,
            self.mgt_pw,
            "reset /system1" %
            (username))
        return _verify_command_completed(output)


def _get_command_status(output):
    """
    Input output string, parses until 'status' keyword is found.
    Returns value of status.
    """
    index = output.index("status=")
    status = output[index + 7]
    log._info("status = %s" % status)
    return status


def _verify_command_completed(string):
    """
    Checks string to see if 'COMMAND COMPLETED' occurs
    """
    if 'COMMAND COMPLETED' in string:
        return True
    else:
        log._warn("Error verifying command completed")
        return False


def _find_value_by_keyword(output, keyword):
    """
    Given an output string,  find the value of a keyword
    assuming it is in the following form:

        keyword=value

    with nothing following it.

    Searches output string for keyword and returns value

    If keyword not found,  returns False
    """
    # print output, keyword
    index = output.rfind(keyword + '=')
    if index == -1:
        return False
    start = index + len(keyword) + 1
    end = output.find("\n", start)
    value = output[start:end - 1]
    value.rstrip()  # trying to take off trailing newline
    return value


def delete_repeats(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if x not in seen and not seen_add(x)]
