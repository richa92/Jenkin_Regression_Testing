"""
custom logger wrapper for Config Manager
"""
import logging
import os
import datetime

logger = logging.getLogger()
if not logger.handlers:
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    # date = datetime.datetime.now().strftime("%I-%M%p_%B_%d_%Y")
    # path = os.path.join(os.getcwd(), r"logs", r"configmgr"+date+r".log")
    path = "configmgr.log"
    fh = logging.FileHandler(path, "w")
    fh.setLevel(logging.INFO)
    fh.setFormatter(formatter)
    logger.addHandler(fh)


def _debug(message):
    logger.debug(message)


def _info(message):
    logger.info(message)


def _log(message, level='INFO'):
    level = level.upper()
    if (level == 'INFO'):
        _info(message)
    elif (level == 'DEBUG'):
        _debug(message)
    elif (level == 'WARN'):
        _warn(message)
    # elif (level == 'HTML'): _html(message)


def _log_list(self, items, what='item'):
    msg = ['Altogether %d %s%s.' %
           (len(items), what, ['s', ''][len(items) == 1])]
    for index, item in enumerate(items):
        msg.append('%d: %s' % (index + 1, item))
        _info('\n'.join(msg))
    return items


def _warn(message):
    logger.warn(message)


def _error(message):
    """function to log error messages"""
    logger.error(message)


def _exception(exc_message):
    """function for log exception messages"""
    logger.exception(exc_message)


def _log_to_console(message):
    """function for log message to console"""
    logger.console(message)


def _log_to_console_and_log_file(arg):
    """function for log message to file and console"""
    logger.info(arg)
