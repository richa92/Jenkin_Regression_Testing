"""
san_switch.py contains all switch classes, this module contains methods to
configure SAN switch settings such as zone configs and port attributes
"""

from fabric.api import env, run, open_shell
from fabric.network import disconnect_all
import custom_logging as log
import custom_exceptions as err
import argparse


class SwitchSN6000(object):

    """
    HP SN6000B class containing CLI methods
    """

    def __init__(self, ip_address, username, password):
        """
        Constructor for SwitchSn6000
        """
        env.host_string = ip_address
        env.user = username
        env.password = password
        env.warn_only = True
        env.use_shell = False

    def create_config(self, config_name, zone_names_list):
        """
        Creates a configuration with given list of zones
        """
        if len(zone_names_list) == 1:
            zone_names = zone_names_list[0]
        else:
            zone_names = ';'.join(zone_names_list)
        text = run('cfgcreate %s, "%s"' % (config_name, zone_names))
        if 'error' in text:
            log._warn(
                'create_config failed: error occured with internal syntax. please file bug with attached sn6000config.txt in logs')
            return False
        elif 'duplicate' in text:
            log._warn('create_config failed: config already exists!')
            return False
        else:
            log._info('create_config successful')
            return True

    def delete_config(self, config_name):
        """
        """
        text = run('cfgdelete %s' % (config_name))
        if 'not found' in text:
            log._warn(
                'delete_config failed: config name "%s" not found' %
                (config_name))
            log._debug(text)
            return False
        elif 'error' in text:
            log._warn('delete_config failed')
            log._debug(text)
            return False
        else:
            log._info('delete_config successful')
            return True

    def create_zone(self, zone_name, members_list):
        """
        Creates a new zone
        """
        if len(members_list) == 1:
            members_string = members_list[0]
        else:
            members_string = ';'.join(members_list)
        text = run('zonecreate %s, "%s"' % (zone_name, members_string))
        if 'invalid' in text:
            log._warn('create_zone failed')
            log._debug(text)
            return False
        elif 'error' in text:
            log._warn('create_zone failed')
            log._debug(text)
            return False
        else:
            log._info('create_zone successful')
            return True

    def delete_zone(self, zone_name):
        """
        Deletes a zone.
        """
        output = run('zonedelete %s' % (zone_name))
        if 'not found' or 'error' in output:
            log._warn('delete_zone failed')
            return False
        else:
            log._info('delete_zone successful')
            return True

    def create_alias(self, alias_name, wwn_list):
        """
        Creates a new alias, in this case creates a host with members from
        wwn_list
        """
        if len(wwn_list) == 1:
            wwn_string = wwn_list[0]
        else:
            wwn_string = ';'.join(wwn_list)
        text = run('alicreate %s, "%s"' % (alias_name, wwn_string))
        if 'invalid' in text:
            log._warn('create_alias failed')
            return False
        else:
            log._info('create_alias successful')
            return True

    def delete_alias(self, alias_name):
        """
        Deletes a zone alias.
        """
        output = run('alidelete %s' % (zone_name))
        if 'not found' in output:
            return False
        else:
            return True

    def set_port_speed(self, port_number, speed):
        """
        Configures the speed for a port.
        """
        output = run('portcfgspeed %s %s' % (port_number, speed))
        if 'Invalid input' in output:
            return False
        else:
            return True

    def set_port_fillword(self, port_number, fillword):
        """
        Configures the fill word for a single 8G FC port.

        fillword can be:
               0 | -idle-idle
                    Sets  IDLE  mode in the Link Init and IDLE as
                    the fill word (default).

               1 | -arbff-arbff
                    Sets ARB(ff) in the Link Init and ARB(ff)  as
                    the fill word.

               2 | -idlef-arbff
                    Sets  IDLE  mode in the Link Init and ARB(ff)
                    as the fill word.

               3 | -aa-then-ia
                    Attempts hardware arbff-arbff (mode 1) first.
                    If the attempt fails to go into active state,
                    this command executes software idle-arb (mode
                    2). Mode 3 is the preferable to modes 1 and 2
                    as it captures more cases.
        """
        acceptable_fillwords = [
            '0',
            '1',
            '2',
            '3',
            '-idle-idle',
            '-arbff-arbff',
            '-idlef-arbff',
            '-aa-then-ia']
        if fillword not in acceptable_fillwords:
            log._warn(
                "Invalid fillwords sent to san_hpsn600.<SwitchSN6000 object>.set_port_fillword()")
            return False
        else:
            output = run('portcfgfillword %s, %s' % (port_number, fillword))
            if 'Invalid input' in output:
                log._error(
                    "Shouldn't have landed here, the SAN switch detected invalid input when running set_port_fillword()")
                return False
            else:
                return True

    def list_Snapshot(self):
        """
        Lists the data and converts it into dictionaries.
        """
        zones_list = []
        zones_dict = {}
        zone_data = self.list_zone()
        if(zone_data[0]):
            lines = zone_data[1].split("Effective configuration:")[1]
            lines = lines.split('\n')
            line_data = ""
            for line in lines:
                if(line.strip('\t').strip('\r') != ""):
                    line_data += line.strip(' ') + '\n'
            cfgs = line_data.split('cfg:')
            zone_list = []

            for cfg in cfgs:
                if cfg != "":
                    zonesdat = cfg.split('\n')
                    zones_dict['cfg'] = zonesdat[0].strip('\r')
                    cfgname = zonesdat[0].strip('\r')
                    zones = cfg.split("zone:")
                    for i in range(len(zones)):
                        if i != 0:
                            zonename = zones[i].split(
                                '\n')[0].strip('\r').strip('\t')
                            wwninfo = ""
                            host_list = []
                            hostname = "host" + str(i)
                            for j in range(len(zones[i].split('\n'))):
                                if(j != 0):
                                    if(zones[i].split('\n')[0] != ""):
                                        wwninfo += zones[i].split('\n')[j].strip(
                                            '\r').strip('\t') + ";"
                            host_list.append(((hostname, wwninfo.strip(';'))))
                            zone_list.append(((zonename, host_list)))
                    # zones_dict['zones'] = zone_list
                    zones_list.append(((cfgname, zone_list)))
        alias_data = self.list_alias()
        return(zones_list)

    def list_port_attr(self):
        """
        Lists port attributes, converts it into dictionaries and returns the same.
        """
        ports_list = []
        St_flag = True
        for i in range(0, 23):
            text = run('portcfgshow ' + str(i))
            if 'invalid' in text:
                ports_list.append(i, "", "")
                St_flag = False
            else:
                ports_list.append(
                    (i,
                     text.split('\n')[1].split("Speed Level:")[1].strip('\r').strip('\t').strip(' '),
                        text.split('\n')[3].split("Fill Word(Current)")[1].strip('\r').strip('\t').strip(' ')))
                St_flag = True
        return (St_flag, ports_list)

    def list_zone(self):
        """
        Creates a new zone
        """

        text = run('zoneshow')
        if 'invalid' in text:
            return (False, text)
        elif 'error' in text:
            return (False, text)
        else:
            return (True, text)

    def list_alias(self):
        """
        Creates a new alias, in this case creates a host with members from
        wwn_list
        """

        text = run('alishow')
        if 'invalid' in text:
            return (False, text)
        else:
            return (True, text)

    # The following functions require that you use winpexpect to send resp
    def enable_config(self, config_name):
        """
        Enables the configuration
        """
        output = run('cfgenable %s' % (config_name))
        # send a y via winpexpect

    def disable_config(self, config_name):
        """
        Disables the configuration
        """
        output = run('cfgdisable %s' % (config_name))
        # send a y via winpexpect

    def save_config(self):
        """
        Saves the configuration to flash on the switch
        """
        text = run('cfgsave')
        # send a y via winpexpect

    def terminate_connection(self):
        """
        Terminates all connections made via fabric.api
        """
        disconnect_all()

    def firmware_download(
            self,
            host,
            fw_path,
            username='anonymous',
            password=''):
        """
        Downloads firmware from a remote hostor a local directory
        """
        if password:
            output = run('firmwareDownload %s,%s,%s,%s' %
                         (host, username, fw_path, password))
        else:
            output = run('firmwareDownload %s,%s,%s' %
                         (host, username, fw_path))
        if 'failed' in output:
            log._warn("Failed to download firmware from %s" % (host))

    ##########################################################################

if __name__ == '__main__':
    my_parser = argparse.ArgumentParser(
        description='-h for help', add_help=True, usage='%(prog)s [options]')
    my_parser.add_argument(
        'c',
        'creds',
        required=True,
        nargs=1,
        const=True,
        help="ip;username;password;")
    my_parser.add_argument('m', 'model', nargs=1, help="")
    args = my_parser.parse_args()

    creds = str(args.creds)
    ip_address = creds.split(';')[0]
    username = creds.split(';')[1]
    password = creds.split(';')[2]
    print ip_address, username, password
    if model:
        my_san = SwitchSN6000(ip_address, username, password)
