'''

This module provides all the OA ssh keywords

'''

# import serial
import re
from RoboGalaxyLibrary.utilitylib import logging as logger


def convert_oa_fan_status_to_dictionary(cli_output):
    """
        Convert the OA FAN status in to a dictionary
    """
    index_list = [10, 11, 12, 13, 14]
    detail_info = {}
    try:
        cli_output = cli_output.split("\n")
        del cli_output[0]
        del cli_output[-3:]
        for index, value in enumerate(cli_output):
            if index in index_list:
                value = re.sub('  +', ':', value)
            fan_stat = value.split(':')
            detail_info[fan_stat[0].strip().lower()] = fan_stat[1].strip()
        return detail_info
    except:
        logger._log_to_console_and_log_file(
            "Fail to convert the fan status list to dictionary : %s" %
            cli_output)


def convert_oa_all_fan_status_to_dictionary(cli_output):
    """
        Convert OA all FAN status into a dictionary

         Sample output from CLI that we are parsing:

        OA-10604BA26D> show enclosure fan all
        Fan #1 information:
                    Status: Fan slot Empty
        Fan #2 information:
                    Status: OK
                    Speed: 39 percent of Maximum speed
                    Maximum speed: 18000
                    Minimum speed: 10
                    Power consumed: 13
                    Product Name: Active Cool 200 Fan
                    Part Number: 412140-B21
                    Spare Part Number: 413996-001
                    Version: 2.7
        Diagnostic Status:
                    Internal Data                            OK
                    Location                                 OK
                    Device Failure                           OK
                    Device Degraded                          OK
                    Missing Device                           OK

    """
    return convert_oa_all_item_status_to_dictionary(cli_output)


def convert_oa_all_item_status_to_dictionary(cli_output):
    """
        Refactored generic function to support status_to_dictionary function for both fans and power supplies
        Convert OA all FAN status into a dictionary
        Output dictionary looks like
        {'Fan #1': {'status': 'Fan slot Empty'}, 'Fan #2': {'status': 'OK', 'power consumed': ......

        Sample output from CLI that we are parsing:

        OA-10604BA26D> show enclosure fan all
        Fan #1 information:
                    Status: Fan slot Empty                          <--- Used as a Marker for parsing (empty_bay)
        Fan #2 information:                                         <--- Used as a Marker for parsing (item_header_key)
                    Status: OK                                      | processing_header_data, process_colon_separated(line)
                    Speed: 39 percent of Maximum speed              |
                    Maximum speed: 18000                            |
                    Minimum speed: 10                               |
                    Power consumed: 13                              |
                    Product Name: Active Cool 200 Fan               |
                    Part Number: 412140-B21                         |
                    Spare Part Number: 413996-001                   |
                    Version: 2.7
        Diagnostic Status:                                          <--- Used as a Marker for parsing(diagnostic_status)
                    Internal Data                            OK     |processing_diagnostic_data, process_space_separated(line)
                    Location                                 OK     |
                    Device Failure                           OK     |
                    Device Degraded                          OK     |
                    Missing Device                           OK     |

    """
    detail_info = {}
    inner_detail_info = {}
    # setup the markers for the above data format
    # ie match fan #1 information or match power supply #2 information
    item_header_key = re.compile('(.+)\s+#(\d+)\s+[Ii]nformation:')
    diagnostic_status = re.compile('Diagnostic Status:')
    empty_bay = re.compile('[Bay | slot]\s+Empty')
    # initialize flags and header_key
    processing_header_data = False
    processing_diagnostic_data = False
    header_key = ''
    # kluge since fan keys  are lower case power supply is regular case
    lower_case_keys = True

    try:
        cli_output = cli_output.split("\n")
        # remove blank lines
        cli_output = [line for line in cli_output if line.strip()]
        for line in cli_output:
            header_key_found_in_current_line = item_header_key.search(line)
            diagnostic_status_found_in_current_line = diagnostic_status.search(
                line)
            empty_bay_found_in_current_line = empty_bay.search(line)
            if header_key_found_in_current_line:
                if header_key:
                    detail_info[header_key] = inner_detail_info
                    inner_detail_info = {}
                processing_header_data = True
                processing_diagnostic_data = False
                # fan keys are lower case, power supply keys are normal case,
                # fu legacy support
                if 'Power' in header_key_found_in_current_line.group(0):
                    # power version leaves capitalization on all keys, fu
                    lower_case_keys = False
                    header_key = header_key_found_in_current_line.group(
                        0).strip(':')
                else:
                    header_key = header_key_found_in_current_line.group(
                        0).strip(':').lower()

            if diagnostic_status_found_in_current_line:
                processing_diagnostic_data = True
                processing_header_data = False

            if processing_header_data and not header_key_found_in_current_line:
                if empty_bay_found_in_current_line:
                    processing_header_data = False
                inner_detail_info.update(
                    _process_colon_separated(line, lower_case_keys))
            if processing_diagnostic_data and not diagnostic_status_found_in_current_line:
                inner_detail_info.update(
                    _process_space_separated(line, lower_case_keys))

        detail_info[header_key] = inner_detail_info
        # update last header_key
        return detail_info
    except Exception as e:
        logger._log_to_console_and_log_file("Exception: %s" % e)
        logger._log_to_console_and_log_file(
            "Fail to convert the fan status list to dictionary : %s" %
            cli_output)
        raise e


def _process_colon_separated(line, lower_case_key=True):
    """
    utility function to be used with convert_oa_all_item_status_to_dictionary
    line is a string
    returns a dictionary (to update the final dictionary
    """
    single_entry = {}
    if lower_case_key:
        key, value = line.split(
            ":")[0].strip().lower(), line.split(":")[1].strip()
    else:
        key, value = line.split(":")[0].strip(), line.split(":")[1].strip()
    single_entry[key] = value
    return single_entry


def _process_space_separated(line, lower_case_key=True):
    """
    utility function to be used with convert_oa_all_item_status_to_dictionary
    line is a string
    returns a dictionary (to update the final dictionary
    """
    single_entry = {}
    if lower_case_key:
        key, value = ' '.join(
            line.split()[:-1]).strip().lower(), line.split()[-1].strip()
    else:
        key, value = ' '.join(
            line.split()[:-1]).strip(), line.split()[-1].strip()
    single_entry[key] = value
    return single_entry


def get_item_count(items, status):
    """
    This is a utility function called by the get_fan_count and get_powersupply_count functions.
    items is a dictionary to be processed
    the status is a string containing the 'status' to be processed, all lower case

    This function returns a list of bays, of status 'status' w/ element 0 of the list equal to the number of bays.
    ie, return fans that are of status 'ok' =>
    filtered_items=[2,1,2]
    filtered_items[0]=2, number of fans of status 'ok'
    filtered_items[1:]= the bay numbers of the fans w/ status 'ok' ie 1,2
    """
    # map status to items string value, ie status== 'failed' is equivalent to
    # item 'Failed'
    status_lookup = {
        'failed': 'Failed',
        'ok': 'OK',
        'unknown': 'unknown',
        'degraded': 'warning',
        'not present': 'Empty',
        'present': 'Empty',
        'all': '.'}

    if status not in status_lookup:
        raise Exception('Unsupported Status in get_item_count:%s' % status)

    # lists
    filtered_items = []  # returned list of items of status 'status'
    # a list of all bay numbers, for fans ['1','2'...'10'] for ps
    # ['1','2','3','4','5','6']
    all_bays = [str(item + 1) for item in range(len(items))]

    # regular expressions to retrieve the bay number and identify the bay
    # status
    # ie match fan #1 information or match power supply #2 information
    match_item_header_key = re.compile('(\w)+\s+#(\d+)\s+information')
    match_status = re.compile(status_lookup[status])

    for k, v in items.iteritems():
        matched_header = match_item_header_key.search(k)
        matched_status = match_status.search(v['status'])

        if (matched_header and matched_status):
            # 'fan' or 'ps', currently unused
            item_Type = matched_header.group(1)
            bay_number = matched_header.group(2)    # bay number '1', '2', etc
            filtered_items.append(bay_number)
    # special case, status 'present' is the complement of the filtered_items
    # list, since we use 'Empty' to identify 'present'
    if(status == 'present'):
        filtered_items = list(set(all_bays) - set(filtered_items))

    filtered_items.sort()
    # insert count of items into element 0 of the filtered_items list
    filtered_items.insert(0, len(filtered_items))
    return filtered_items


def get_fan_count(fan_dict, status_type):
    """  Get the fan count for the given status type
        Calls the generic get_item_count function
    """

    return get_item_count(fan_dict, status_type)


def convert_oa_coolingsubsystem_status_to_dictionary(cli_output):
    """
        Convert the OA COOLING SUBSYSTEM status into a dictionary

        Sample output from CLI that we are parsing:

        Cooling Subsystem:
            Status: Degraded
            Fans Good/Wanted/Needed: 7/8/7
            Fan 1:  Fan Slot Empty
            Fan 2:  7032 RPM (39%)
            Fan 3:  Fan Slot Empty
            Fan 4:  9445 RPM (52%)
            Fan 5:  9447 RPM (52%)
            Fan 6:  7883 RPM (44%)
            Fan 7:  7886 RPM (44%)
            Fan 8:  Fan Slot Empty
            Fan 9:  7161 RPM (40%)
            Fan 10:  7168 RPM (40%)

    """
    detail_info = {}
    # Gets fan subsystem health status
    try:
        # taking raw data from CLI output and creating a list by splitting by
        # newline
        cli_output = cli_output.split("\n")
        # Remove all lines above fan subsystem status
        del cli_output[0:20]
        # Remove last three line spaces below fan subsystem status
        del cli_output[-3:]
        for value in cli_output:
            fan_stat = value.split(':')
            detail_info[fan_stat[0].strip().lower()] = fan_stat[1].strip()
    # Handles splitting "Fans Good/Wanted/Needed" into 3 different status
    # types as required for UI validation
            if "Fans Good/Wanted/Needed" in value:
                fans_req = value.split(':')
                fans = ['fans ' + f.replace('Fans', '').replace(' ', '').strip(
                    '\t').lower() for f in fans_req[0].split("/")]
                state = [s.strip('\r') for s in fans_req[1].split("/")]
                # fan_detail={fans[0]:state[0],...}
                fan_detail = dict(zip(fans, state))
        del detail_info['fans good/wanted/needed']
        return dict(detail_info, **fan_detail)  # merge dictionaries
    except:
        logger._log_to_console_and_log_file(
            "Fail to convert the cooling subsystem status list to dictionary : %s" %
            cli_output)


def _get_fan_rules_state(fan_rule_list, bay_num):

    fan_list = []
    # This is considered as an exclusion list where the numbers in the list
    # indicate fan bays that are not required for 8 fan rule.
    eight_fan_rule_Excluded_bays = [3, 8]
    # This is considered as an exclusion list where the numbers in the list
    # indicate fan bays that are not required for 6 fan rule.
    six_fan_rule_Excluded_bays = [1, 2, 6, 7]
    # This is considered as an exclusion list where the numbers in the list
    # indicate fan bays that are not required for 4 fan rule.
    four_fan_rule_Excluded_bays = [1, 2, 3, 6, 7, 8]

    # This handles condition for different fan rules for retrieving fan
    # state,required and status
    if fan_rule_list[0] == 10:
        # For ten fan rules, the list element will be a string as "all fan
        # bays".Hence creating an integer list
        fans_populate = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    elif fan_rule_list[0] == 8:
        fans_populate = fan_rule_list[1:]
        if int(bay_num) not in fans_populate:
            if int(bay_num) in eight_fan_rule_Excluded_bays:
                fan_list.extend(('OK', 'No', 'empty'))
            else:
                fan_list.extend(('Missing', 'Yes', 'warning'))
        else:
            fan_list.extend(('OK', 'Yes', 'ok'))

    elif fan_rule_list[0] == 6:
        fans_populate = fan_rule_list[1:]
        if int(bay_num) not in fans_populate:
            if int(bay_num) in six_fan_rule_Excluded_bays:
                fan_list.extend(('OK', 'No', 'empty'))
            else:
                fan_list.extend(('Missing', 'Yes', 'warning'))
        else:
            fan_list.extend(('OK', 'Yes', 'ok'))

    elif fan_rule_list[0] == 4:
        fans_populate = fan_rule_list[1:]
        if int(bay_num) not in fans_populate:
            if int(bay_num) in four_fan_rule_Excluded_bays:
                fan_list.extend(('OK', 'No', 'empty'))
            else:
                fan_list.extend(('Missing', 'Yes', 'warning'))
        else:
            fan_list.extend(('OK', 'Yes', 'ok'))
    return fan_list


def convert_oa_fan_data_to_ui_format(oa_fan_dict, bay_num, fan_rule_list):
    """ Convert FAN data returned from OA so that it matches UI format """

    # OA data does not have "Bay", so adding that attribute
    oa_fan_dict["bay"] = str(bay_num)
    if 'Fan slot Empty' in oa_fan_dict.values():
        fanlist_val = _get_fan_rules_state(fan_rule_list, bay_num)
        oa_fan_dict["model"] = 'empty'
        oa_fan_dict["part number"] = ""
        oa_fan_dict["spare part number"] = ""
        oa_fan_dict["required"] = fanlist_val[1]
        if fanlist_val[1] == 'Yes':
            oa_fan_dict['status'] = 'warning'
            oa_fan_dict['state'] = 'Missing'
        else:
            oa_fan_dict['status'] = 'empty'
            oa_fan_dict['state'] = 'OK'
        return oa_fan_dict

    if 'product name' in oa_fan_dict.keys():
        # converting OA attribute "Product Name" to "Model"
        oa_fan_dict["model"] = oa_fan_dict.pop("product name")

    # Handles fan status conversion to map the data with OA and fusion UI

    if oa_fan_dict["status"] == "OK" and oa_fan_dict["location"] == "OK":
        oa_fan_dict['status'] = 'ok'
    else:
        oa_fan_dict['status'] = 'warning'

    if oa_fan_dict["device failure"] == 'Failed':
        oa_fan_dict['status'] = 'error'

    # Handles fan state conversion to map the data with OA and fusion UI
    if oa_fan_dict["location"] == "other":
        oa_fan_dict['state'] = 'Misplaced'

    # get_fan_rules_state function will retrieve fan state and required for
    # all the fan rules.
    fanlist_val = _get_fan_rules_state(fan_rule_list, bay_num)
    oa_fan_dict["state"] = fanlist_val[0]
    oa_fan_dict["required"] = fanlist_val[1]

    if oa_fan_dict["status"] == 'error':
        oa_fan_dict['state'] = 'Failed'

    ui_header_list = ['status', 'bay', 'state', 'required',
                      'model', 'part number', 'spare part number']
    oa_header_list = oa_fan_dict.keys()

    for header in ui_header_list:
        oa_header_list.remove(header)
    for key in oa_header_list:
        oa_fan_dict.pop(key)
    return oa_fan_dict


def convert_oa_all_fan_data_to_ui_format(oa_dict, fan_rule_list):
    """
    Convert all Fan data returned from OA so that it matches UI format
    Example
    convert_oa_all_fan_data_to_ui_format(oa_dict)
    """
    fan_count = len(oa_dict) + 1
    oa_fan_dict = {}
    for index in range(1, fan_count):
        oakey = "fan #" + str(index) + " information"
        convert_dict = convert_oa_fan_data_to_ui_format(
            oa_dict[oakey], index, fan_rule_list)
        uikey = "FAN%d" % index
        oa_fan_dict[uikey] = convert_dict
    return oa_fan_dict


def convert_oa_powersupply_status_to_dictionary(status):
    """
        Convert the OA POWER SUPPLY status into a dictionary

        Sample output from CLI that we are parsing:

        OA-10604BA26D> show enclosure powersupply 3
        Power Supply #3 Information:
            Status: OK
            AC Input Status: OK
            Output Capacity: 2250 Watts DC
            Current Power Output: 0 Watts DC (Dynamic Power Savings Mode)
            Serial Number: 5A22B0DHLU10GA
            Product Name: HP BladeSystem c-Class P/S
            Part Number: 412138-B21
            Spare Part Number: 411099-001
            Product Ver: 02
            Diagnostic Status:
                    Internal Data                            OK
                    Device Failure                           OK
                    Power Cord                               OK

    """

    # index_list contains index value for PS Diagnostic data.  This data is
    # separated by a space, not by ':', so we need to convert space(s) to ':'
    # for processing
    index_list = [10, 11, 12]
    status_dic = {}
    try:
        # taking raw data from CLI output and creating a list by splitting by
        # newline
        status = status.split("\n")
        del status[0]               # remove 1st empty line
        del status[-3:]             # remove bottom empty lines
        for index, value in enumerate(status):
            if index in index_list:
                value = re.sub('  +', ':', value)
            ps_stat = value.split(':')
            status_dic[ps_stat[0].strip()] = ps_stat[1].strip()
        return status_dic
    except:
        logger._log_to_console_and_log_file(
            "Fail to convert the power supply status list to dictionary : %s" %
            status)


def convert_oa_all_powersupply_status_to_dictionary(status):
    """
        Convert the OA POWER SUPPLY status into a dictionary

        Sample output from CLI that we are parsing:

        OA-10604BA26D> show enclosure powersupply all
        Power Supply #1 Information:
                Status: Power Supply Bay Empty
        Power Supply #2 Information:
                Status: OK
                AC Input Status: OK
                Output Capacity: 2250 Watts DC
                Current Power Output: 576 Watts DC
                Serial Number: 5A22B0EHLUT3EN
                Product Name: HP BladeSystem c-Class P/S
                Part Number: 412138-B21
                Spare Part Number: 411099-001
                Product Ver: 02
                Diagnostic Status:
                        Internal Data                            OK
                        Device Failure                           OK
                        Power Cord                               OK
        Power Supply #3 Information:
                Status: OK
                AC Input Status: OK
                Output Capacity: 2250 Watts DC

    """
    return convert_oa_all_item_status_to_dictionary(status)


def convert_oa_powersubsystem_status_to_dictionary(status):
    """
        Convert the OA POWER SUBSYSTEM status into a dictionary

        Sample output from CLI that we are parsing:

        Power Subsystem:
            Status: OK
            Power Mode: Power Supply Redundant
            Redundancy State: Redundant
            Power Capacity: 6750 Watts DC
            Power Available: 4365 Watts DC
            Present Power: 1354 Watts AC


    """
    status_dic = {}
    try:
        # taking raw data from CLI output and creating a list by splitting by
        # newline
        status = status.split("\n")
        # remove all lines below Power Subsystem status
        del status[18:]
        # remove all lines above Power Subsystem status
        del status[0:12]
        for index, value in enumerate(status):
            ps_stat = value.split(':')
            status_dic[ps_stat[0].strip()] = ps_stat[1].strip()
        return status_dic
    except:
        logger._log_to_console_and_log_file(
            "Fail to convert the power subsystem status list to dictionary : %s" %
            status)


def convert_oa_snmp_status_to_dictionary(status):
    """
        Convert the OA SNMP status into a dictionary

        Sample output from CLI that we are parsing:

        OA-10604BA26D> show snmp

        SNMP Configuration:
                Status: Disabled
                System Name: OA-10604BA26D93
                System Location:
                System Contact:
                Read Community Name: qKsg4e
                Write Community Name:
                Engine ID: 0x8000000b0431343137373235303438
                Trap Receiver host: 10.0.12.44 public
                                    10.0.12.101 public
                                    10.0.12.63 public

    """
    status_dic = {}

    try:
        # taking raw data from CLI output and creating a list by splitting by
        # newline
        status = status.split("\n")
        # remove empty line and heading before SNMP status data
        del status[:2]
        del status[-3:]             # remove bottom empty lines
        # create another copy of list to parse Trap Destination Host data
        status1 = status[:]
        del status1[:7]
        del status[7:]
        for index, value in enumerate(status):
            ps_stat = value.split(':')
            status_dic[ps_stat[0].strip()] = ps_stat[1].strip()
        for index, value in enumerate(status1):
            if index == 0:
                temp = value.split(':')
                key = temp[0]
                value = temp[1]
            value = value.strip()
            value = re.sub(' +', ':', value)
            value = value.split(':')
            status_dic.setdefault(key.strip(), []).append(value[0].strip())
        return status_dic
    except:
        logger._log_to_console_and_log_file(
            "Fail to convert the SNMP status list to dictionary : %s" % status)


def get_powersupply_count(ps_dict, type):
    """
        Get the count of power supply filtered by type
        Calls the generic get_item_count function
    """
    return get_item_count(ps_dict, type)


def convert_oa_powersupply_data_to_ui_format(oa_dict, bay_no):
    """
    Convert Power Supply data returned from OA so that it matches UI format
    """

    # OA data does not have "Bay", so adding that attribute
    oa_dict["Bay"] = str(bay_no)
    if 'Power Supply Bay Empty' in oa_dict.values():
        oa_dict["Model"] = 'empty'
        oa_dict["Part Number"] = ""
        oa_dict["Spare Part Number"] = ""
        oa_dict["Serial Number"] = ""
        return oa_dict

    if 'Product Name' in oa_dict:
        # converting OA attribute "Product Name" to "Model"
        oa_dict["Model"] = oa_dict.pop("Product Name")

    if oa_dict["Status"] == 'OK':
        oa_dict["Status"] = 'ok'

    if oa_dict["Status"] == 'Failed':
        oa_dict["Status"] = 'error'

    ui_header_list = ['Status', 'Bay', 'Model',
                      'Serial Number', 'Part Number', 'Spare Part Number']
    oa_header_list = oa_dict.keys()

    for header in ui_header_list:
        oa_header_list.remove(header)
    for key in oa_header_list:
        oa_dict.pop(key)

    return oa_dict


def convert_oa_all_powersupply_data_to_ui_format(oa_dict):
    """
    Convert all Power Supply data returned from OA so that it matches UI format
    Example
    convert_oa_all_powersupply_data_to_ui_format(oa_dict)
    """
    power_count = len(oa_dict) + 1
    oa_power_dict = {}
    for index in range(1, power_count):
        oakey = "Power Supply #%d Information" % index
        convert_dict = convert_oa_powersupply_data_to_ui_format(
            oa_dict[oakey], index)
        uikey = "PS%d" % index
        oa_power_dict[uikey] = convert_dict
    return oa_power_dict
