'''

Base Serial Class

'''

import serial
from RoboGalaxyLibrary.utilitylib import logging as logger


class SerialConnectorBase(object):

    '''
    Base Serial Blass
    '''

    def __init__(self, port='COM5', baurate=115200, timeout=1):
        '''
        Constructor
        '''
        self.ser = serial.Serial()
        self.ser.baudrate = baurate
        self.ser.port = port
        self.ser.timeout = timeout
        self.lines = []

    def readlines(self):
        """read all lines that are available. abort after timout
            when no more data arrives."""
        self.lines = []
        while True:
            line = self.ser.readline()
            if line:
                self.lines.append(line)
            if not line or line[-1:] != '\n':
                break
        return self.lines

    def run_serial_command(self, command):
        """Run any command."""
        try:
            logger._log_to_console_and_log_file(
                "Running Serial Command: %s" % command)
            self.ser.write(command)
            self.ser.write('\r')
            self.lines = self.readlines()
            logger._log_to_console_and_log_file("Results: %s" % self.lines)
            prompt = str(self.lines).strip('[]')

            if prompt.find('Invalid') != -1:
                raise AssertionError('Unsupported command')

        except Exception:
            raise AssertionError('Unable to execute command')
        return self.lines

    def open_serial_connection(self):
        """Open Serial Port"""
        try:
            logger._log_to_console_and_log_file(
                "Open Serial Connection Port %s" % self.ser.port)
            self.ser
            self.ser.open()
            self.ser.write('\r')
        except Exception:
            raise AssertionError('Unable to open port')

        lines = self.readlines()
        return lines

    def close_serial_connection(self):
        """Close serial port."""
        try:
            logger._log_to_console_and_log_file("Close Serial Port")
            self.ser.close()
        except Exception:
            raise AssertionError('Unable to close port')
